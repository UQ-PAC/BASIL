package build.basilmill

import mill._

import os.Path
import scalalib._
import scala.util.{Try}

import $file.basilmill.util.DownloadModule


trait MdBookModule extends DownloadModule {
  def mdbookSources : T[PathRef]

  def version = "0.4.51"
  override def url = s"https://github.com/rust-lang/mdBook/releases/download/v${version}/mdbook-v${version}-${suffix}"
  override def name = s"mdBook-$version-${System.currentTimeMillis()}$suffix"

  def osName = System.getProperty("os.name")

  override def local = Task.Input {
    Try(os.proc("mdbook", "--version").call())
      .map(Function.const("mdbook"))
      .toEither
      .left.map(_.toString)
  }


  def arch = {
    System.getProperty("os.arch") match {
      case "amd64" => "x86_64"
      case o => o
    }
  }

  def suffix = if (osName.contains("nux")) {
    s"${arch}-unknown-linux-musl.tar.gz"
  } else if (osName.contains("Mac")) {
    s"${arch}-apple-darwin.tar.gz"
  } else {
    throw new Exception(s"unsupported os ${osName}")
  }

  override def remote(dest: Path) = {
    val p = super.remote(dest)
    os.call(Seq("tar", "-xzf", p.toString), cwd=dest)
    os.remove(p)
    (p / ".." / "mdbook")
  }

  def run(args: String*) = Task.Command {
    val res = os.call(path() +: args, stdout = os.Inherit, check = false)
    Task.ctx().systemExit(res.exitCode)
    ()
  }

  def serve(args: String*) = Task.Command {
    val res = os.call(Seq(path().toString, "serve",  mdbookSources().path.toString) ++ args, stdout = os.Inherit, check = false)
    Task.ctx().systemExit(res.exitCode)
    ()
  }

  def mdbookDocs = Task {
    os.call(Seq(path(), "build", "--dest-dir", Task.dest.toString, mdbookSources().path.toString))
    PathRef(Task.dest)
  }

}
