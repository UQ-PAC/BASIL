package build.basilmill

object Platform {
  enum Arch {
    case X86_64, Aarch64
  }

  enum Os(val libExtension: String) {
    case Linux extends Os("so")
    case Mac extends Os("dylib")
    case Windows extends Os("dll")
  }

  export Arch.*
  export Os.*

  def detectArch() = System.getProperty("os.arch") match {
    case "amd64" => Right(Arch.X86_64)
    case "aarch64" => Right(Arch.Aarch64)
    case x => Left("unknown arch: " + x)
  }

  def detectOs() = System.getProperty("os.name") match {
    case "Linux" => Right(Os.Linux)
    case m if m.startsWith("Mac OS") => Right(Os.Mac)
    case w if w.startsWith("Windows") => Right(Os.Windows)
    case x => Left("unknown os: " + x)
  }

  def detect() = for {
    arch <- detectArch()
    os <- detectOs()
  } yield Platform(arch, os)

}

case class Platform(val arch: Platform.Arch, val os: Platform.Os)
