FunctionNode@1105 "main 1820 List(Parameter(main_argc,32,R0), Parameter(main_argv,64,R1), Parameter(FP,64,R29), Parameter(LR,64,R30), Parameter(SP,64,R31)) List(Parameter(main_argv_out,64,R1), Parameter(main_result,32,R0), Parameter(FP_out,64,R29), Parameter(LR_out,64,R30), Parameter(SP_out,64,R31))[
--------------------------------------------------------------------------
lmain Some(1820)
adrp x0, #0x11000 {
  R0 := 69632bv64;
}
add x0, x0, #0x14 {
  R0 := BinOp(PLUS,R0,20bv64);
}
mov w1, #0x1 {
  R1 := 0bv64;
  R1 := BinOp(OR,BinOp(AND,R1,18446744069414584320bv64),1bv64);
}
str w1, [x0] {
  mem[R0] := R1[31:0][31:0];
}
adrp x0, #0x11000 {
  R0 := 69632bv64;
}
add x0, x0, #0x14 {
  R0 := BinOp(PLUS,R0,20bv64);
}
ldr w0, [x0] {
  #33 := UnsignedExtend(64,mem[R0]);
  R0 := 0bv64;
  R0 := BinOp(OR,BinOp(AND,R0,18446744069414584320bv64),UnsignedExtend(64,#33));
}
cmp w0, #0x0 {
  #34 := SignedExtend(64,R0[31:0]);
  NF := #34[63:63];
  VF := BinOp(AND,R0[31:0][31:31],UnOp(NOT,#34[63:63]));
  ZF := BinOp(EQ,#34,0bv64);
  CF := BinOp(OR,BinOp(OR,R0[31:0][31:31],BinOp(AND,R0[31:0][31:31],UnOp(NOT,#34[63:63]))),UnOp(NOT,#34[63:63]));
}
b.eq #0x18 {
  #36 := ZF;
  GoTo(l00000473,#36)
}
 {
  GoTo(l00000557,1bv1)
}
--------------------------------------------------------------------------
l00000473 Some(1876)
adrp x0, #0x11000 {
  R0 := 69632bv64;
}
add x0, x0, #0x18 {
  R0 := BinOp(PLUS,R0,24bv64);
}
mov w1, #0x2 {
  R1 := 0bv64;
  R1 := BinOp(OR,BinOp(AND,R1,18446744069414584320bv64),2bv64);
}
str w1, [x0] {
  mem[R0] := R1[31:0][31:0];
}
 {
  GoTo(l0000048c,1bv1)
}
--------------------------------------------------------------------------
l00000557 Some(1856)
adrp x0, #0x11000 {
  R0 := 69632bv64;
}
add x0, x0, #0x18 {
  R0 := BinOp(PLUS,R0,24bv64);
}
mov w1, #0x3 {
  R1 := 0bv64;
  R1 := BinOp(OR,BinOp(AND,R1,18446744069414584320bv64),3bv64);
}
str w1, [x0] {
  mem[R0] := R1[31:0][31:0];
}
b #0x14 {
  GoTo(l0000048c,1bv1)
}
--------------------------------------------------------------------------
l0000048c Some(1892)
mov w0, #0x0 {
  R0 := 0bv64;
  R0 := BinOp(AND,R0,18446744069414584320bv64);
}
ret {
  IndirectCall(R30,1bv1,None)
}
]"
