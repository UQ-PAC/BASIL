0000135b: program
000012d9: sub __cxa_finalize(__cxa_finalize_result)
0000135c: __cxa_finalize_result :: out u32 = low:32[R0]

00000d7b:
00000f2f: R16 := 0x20000
00000f36: R17 := mem[R16 + 0x18, el]:u64
00000f3c: R16 := R16 + 0x18
00000f41: call R17 with noreturn

000012da: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000135d: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000005c5:
000005c9: #3 := R31 - 0x20
000005cf: mem := mem with [#3, el]:u64 <- R29
000005d5: mem := mem with [#3 + 8, el]:u64 <- R30
000005d9: R31 := #3
000005df: R29 := R31
000005e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000005ec: R19 := 0x20000
000005f3: R0 := pad:64[mem[R19 + 0x90]]
000005f9: when 0:0[R0] goto %000005f7
0000133d: goto %00000d44

00000d44:
00000d47: R0 := 0x1F000
00000d4e: R0 := mem[R0 + 0xFC8, el]:u64
00000d54: when R0 = 0 goto %00000d52
0000133e: goto %00000d6b

00000d6b:
00000d6e: R0 := 0x20000
00000d75: R0 := mem[R0 + 0x70, el]:u64
00000d7a: R30 := 0x9B0
00000d7d: call @__cxa_finalize with return %00000d52

00000d52:
00000d5a: R30 := 0x9B4
00000d5c: call @deregister_tm_clones with return %00000d5e

00000d5e:
00000d61: R0 := 1
00000d69: mem := mem with [R19 + 0x90] <- 7:0[R0]
0000133f: goto %000005f7

000005f7:
00000601: R19 := mem[R31 + 0x10, el]:u64
00000608: R29 := mem[R31, el]:u64
0000060d: R30 := mem[R31 + 8, el]:u64
00000611: R31 := R31 + 0x20
00000616: call R30 with noreturn

000012de: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000135e: __libc_start_main_main :: in u64 = R0
0000135f: __libc_start_main_arg2 :: in u32 = low:32[R1]
00001360: __libc_start_main_arg3 :: in out u64 = R2
00001361: __libc_start_main_auxv :: in out u64 = R3
00001362: __libc_start_main_result :: out u32 = low:32[R0]

0000051e:
00000f19: R16 := 0x20000
00000f20: R17 := mem[R16 + 0x10, el]:u64
00000f26: R16 := R16 + 0x10
00000f2b: call R17 with noreturn

000012df: sub _fini(_fini_result)
00001363: _fini_result :: out u32 = low:32[R0]

00000046:
0000004c: #0 := R31 - 0x10
00000052: mem := mem with [#0, el]:u64 <- R29
00000058: mem := mem with [#0 + 8, el]:u64 <- R30
0000005c: R31 := #0
00000062: R29 := R31
00000069: R29 := mem[R31, el]:u64
0000006e: R30 := mem[R31 + 8, el]:u64
00000072: R31 := R31 + 0x10
00000077: call R30 with noreturn

000012e0: sub _init(_init_result)
00001364: _init_result :: out u32 = low:32[R0]

00001143:
00001149: #28 := R31 - 0x10
0000114f: mem := mem with [#28, el]:u64 <- R29
00001155: mem := mem with [#28 + 8, el]:u64 <- R30
00001159: R31 := #28
0000115f: R29 := R31
00001164: R30 := 0x7C0
00001166: call @call_weak_fn with return %00001168

00001168:
0000116d: R29 := mem[R31, el]:u64
00001172: R30 := mem[R31 + 8, el]:u64
00001176: R31 := R31 + 0x10
0000117b: call R30 with noreturn

000012e1: sub _start(_start_result)
00001365: _start_result :: out u32 = low:32[R0]

000004df:
000004e4: R29 := 0
000004e9: R30 := 0
000004ef: R5 := R0
000004f6: R1 := mem[R31, el]:u64
000004fc: R2 := R31 + 8
00000502: R6 := R31
00000507: R0 := 0x1F000
0000050e: R0 := mem[R0 + 0xFD8, el]:u64
00000513: R3 := 0
00000518: R4 := 0
0000051d: R30 := 0x8F0
00000520: call @__libc_start_main with return %00000522

00000522:
00000525: R30 := 0x8F4
00000528: call @abort with return %00001340

00001340:
00001341: call @call_weak_fn with noreturn

000012e4: sub abort()


00000526:
00000f9d: R16 := 0x20000
00000fa4: R17 := mem[R16 + 0x40, el]:u64
00000faa: R16 := R16 + 0x40
00000faf: call R17 with noreturn

000012e5: sub call_weak_fn(call_weak_fn_result)
00001366: call_weak_fn_result :: out u32 = low:32[R0]

0000052a:
0000052d: R0 := 0x1F000
00000534: R0 := mem[R0 + 0xFD0, el]:u64
0000053a: when R0 = 0 goto %00000538
00001342: goto %00000dbb

00000538:
00000540: call R30 with noreturn

00000dbb:
00000dbe: goto @__gmon_start__

00000dbc:
00000f87: R16 := 0x20000
00000f8e: R17 := mem[R16 + 0x38, el]:u64
00000f94: R16 := R16 + 0x38
00000f99: call R17 with noreturn

000012e7: sub deregister_tm_clones(deregister_tm_clones_result)
00001367: deregister_tm_clones_result :: out u32 = low:32[R0]

00000546:
00000549: R0 := 0x20000
0000054f: R0 := R0 + 0x90
00000554: R1 := 0x20000
0000055a: R1 := R1 + 0x90
00000560: #1 := ~R0
00000565: #2 := R1 + ~R0
0000056b: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000571: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000575: ZF := #2 + 1 = 0
00000579: NF := 63:63[#2 + 1]
0000057f: when ZF goto %0000057d
00001343: goto %00000d9d

00000d9d:
00000da0: R1 := 0x1F000
00000da7: R1 := mem[R1 + 0xFC0, el]:u64
00000dac: when R1 = 0 goto %0000057d
00001344: goto %00000db0

0000057d:
00000585: call R30 with noreturn

00000db0:
00000db4: R16 := R1
00000db9: call R16 with noreturn

000012ea: sub frame_dummy(frame_dummy_result)
00001368: frame_dummy_result :: out u32 = low:32[R0]

0000061c:
0000061e: call @register_tm_clones with noreturn

000012eb: sub free(free_ptr)
00001369: free_ptr :: in out u64 = R0

000009e1:
00000fb3: R16 := 0x20000
00000fba: R17 := mem[R16 + 0x48, el]:u64
00000fc0: R16 := R16 + 0x48
00000fc5: call R17 with noreturn

000012ec: sub hlist_get(hlist_get_result)
0000136a: hlist_get_result :: out u32 = low:32[R0]

00000668:
0000066c: #5 := R31 - 0x30
00000672: mem := mem with [#5, el]:u64 <- R29
00000678: mem := mem with [#5 + 8, el]:u64 <- R30
0000067c: R31 := #5
00000682: R29 := R31
0000068a: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000692: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000699: R0 := mem[R31 + 0x18, el]:u64
000006a1: mem := mem with [R31 + 0x28, el]:u64 <- R0
000006a6: goto %000006a4

000006a4:
000006ac: R0 := mem[R31 + 0x28, el]:u64
000006b2: #6 := R0 - 1
000006b7: VF := extend:65[#6 + 1] <> extend:65[R0] + 0
000006bc: CF := pad:65[#6 + 1] <> pad:65[R0] - 0x10000000000000000
000006c0: ZF := #6 + 1 = 0
000006c4: NF := 63:63[#6 + 1]
000006ca: when ZF <> 1 goto %000006c8
00001345: goto %00000d40

00000d40:
00000d42: goto %0000070b

000006c8:
000006d2: R0 := mem[R31 + 0x28, el]:u64
000006d9: R0 := mem[R0, el]:u64
000006e0: R1 := mem[R31 + 0x10, el]:u64
000006e5: R30 := 0xA1C
000006e8: call @strstr with return %000006ea

000006ea:
000006ee: #7 := R0 - 1
000006f3: VF := extend:65[#7 + 1] <> extend:65[R0] + 0
000006f8: CF := pad:65[#7 + 1] <> pad:65[R0] - 0x10000000000000000
000006fc: ZF := #7 + 1 = 0
00000700: NF := 63:63[#7 + 1]
00000706: when ZF goto %00000704
00001346: goto %00000d2a

00000704:
00001347: goto %0000070b

0000070b:
00000710: R0 := mem[R31 + 0x28, el]:u64
00000716: #8 := R0 - 1
0000071b: VF := extend:65[#8 + 1] <> extend:65[R0] + 0
00000720: CF := pad:65[#8 + 1] <> pad:65[R0] - 0x10000000000000000
00000724: ZF := #8 + 1 = 0
00000728: NF := 63:63[#8 + 1]
0000072e: when ZF goto %0000072c
00001348: goto %00000d18

0000072c:
00000734: R0 := 0
00001349: goto %00000736

00000d18:
00000d1d: R0 := mem[R31 + 0x28, el]:u64
00000d24: R0 := mem[R0 + 8, el]:u64
00000d28: goto %00000736

00000736:
0000073b: R29 := mem[R31, el]:u64
00000740: R30 := mem[R31 + 8, el]:u64
00000744: R31 := R31 + 0x30
00000749: call R30 with noreturn

00000d2a:
00000d2f: R0 := mem[R31 + 0x28, el]:u64
00000d36: R0 := mem[R0 + 0x10, el]:u64
00000d3e: mem := mem with [R31 + 0x28, el]:u64 <- R0
0000134a: goto %000006a4

000012f3: sub http_parse_basic(http_parse_basic_result)
0000136b: http_parse_basic_result :: out u32 = low:32[R0]

0000074b:
0000074f: #9 := R31 - 0x70
00000755: mem := mem with [#9, el]:u64 <- R29
0000075b: mem := mem with [#9 + 8, el]:u64 <- R30
0000075f: R31 := #9
00000765: R29 := R31
0000076d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000775: mem := mem with [R31 + 0x38, el]:u64 <- R0
0000077d: mem := mem with [R31 + 0x30, el]:u64 <- R1
00000785: mem := mem with [R31 + 0x28, el]:u64 <- R2
0000078c: mem := mem with [R31 + 0x60, el]:u64 <- 0
00000793: mem := mem with [R31 + 0x58, el]:u64 <- 0
0000079a: mem := mem with [R31 + 0x50, el]:u64 <- 0
000007a1: mem := mem with [R31 + 0x48, el]:u64 <- 0
000007a8: R1 := mem[R31 + 0x30, el]:u64
000007af: R0 := mem[R31 + 0x38, el]:u64
000007b4: R30 := 0xA9C
000007b6: call @hlist_get with return %000007b8

000007b8:
000007be: mem := mem with [R31 + 0x60, el]:u64 <- R0
000007c5: R0 := mem[R31 + 0x60, el]:u64
000007ca: R30 := 0xAA8
000007cd: call @strlen with return %000007cf

000007cf:
000007d3: R0 := R0 + 1
000007d8: R30 := 0xAB0
000007db: call @malloc with return %000007dd

000007dd:
000007e3: mem := mem with [R31 + 0x50, el]:u64 <- R0
000007ea: R0 := mem[R31 + 0x60, el]:u64
000007ef: R30 := 0xABC
000007f1: call @strlen with return %000007f3

000007f3:
000007f7: R0 := R0 + 1
000007fd: R2 := R0
00000802: R1 := 0
00000809: R0 := mem[R31 + 0x50, el]:u64
0000080e: R30 := 0xAD0
00000811: call @memset with return %00000813

00000813:
00000816: R0 := 5
0000081e: mem := mem with [R31 + 0x6C, el]:u32 <- 31:0[R0]
0000134b: goto %00000822

00000822:
00000827: R19 := extend:64[mem[R31 + 0x6C, el]:u32]
0000082e: R0 := mem[R31 + 0x60, el]:u64
00000833: R30 := 0xAE8
00000835: call @strlen with return %00000837

00000837:
0000083b: #10 := ~R0
00000840: #11 := R19 + ~R0
00000846: VF := extend:65[#11 + 1] <> extend:65[R19] + extend:65[#10] + 1
0000084c: CF := pad:65[#11 + 1] <> pad:65[R19] + pad:65[#10] + 1
00000850: ZF := #11 + 1 = 0
00000854: NF := 63:63[#11 + 1]
0000085a: when CF goto %00000858
0000134c: goto %00000cc8

00000cc8:
00000ccd: R0 := pad:64[mem[R31 + 0x6C, el]:u32]
00000cd3: R0 := pad:64[31:0[R0] + 1]
00000cdb: mem := mem with [R31 + 0x6C, el]:u32 <- 31:0[R0]
00000ce2: R0 := extend:64[mem[R31 + 0x6C, el]:u32]
00000ce9: R1 := mem[R31 + 0x60, el]:u64
00000cf0: R0 := R1 + R0
00000cf7: R0 := pad:64[mem[R0]]
00000cfd: #26 := 31:0[R0] - 0x21
00000d02: VF := extend:33[#26 + 1] <> extend:33[31:0[R0]] - 0x20
00000d07: CF := pad:33[#26 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFE0
00000d0b: ZF := #26 + 1 = 0
00000d0f: NF := 31:31[#26 + 1]
00000d14: when ZF goto %00000822
0000134d: goto %00000858

00000858:
00000862: R0 := extend:64[mem[R31 + 0x6C, el]:u32]
00000869: R1 := mem[R31 + 0x60, el]:u64
00000870: R19 := R1 + R0
00000877: R0 := extend:64[mem[R31 + 0x6C, el]:u32]
0000087e: R1 := mem[R31 + 0x60, el]:u64
00000885: R0 := R1 + R0
0000088a: R30 := 0xB30
0000088c: call @strlen with return %0000088e

0000088e:
00000892: R2 := R0
00000898: R1 := R19
0000089f: R0 := mem[R31 + 0x50, el]:u64
000008a4: R30 := 0xB40
000008a7: call @memcpy with return %000008a9

000008a9:
000008ac: R1 := 0x3A
000008b3: R0 := mem[R31 + 0x50, el]:u64
000008b8: R30 := 0xB4C
000008bb: call @strchr with return %000008bd

000008bd:
000008c3: mem := mem with [R31 + 0x58, el]:u64 <- R0
000008ca: R0 := mem[R31 + 0x58, el]:u64
000008d0: #12 := R0 - 1
000008d5: VF := extend:65[#12 + 1] <> extend:65[R0] + 0
000008da: CF := pad:65[#12 + 1] <> pad:65[R0] - 0x10000000000000000
000008de: ZF := #12 + 1 = 0
000008e2: NF := 63:63[#12 + 1]
000008e8: when ZF <> 1 goto %000008e6
0000134e: goto %00000c8a

000008e6:
000008f0: R0 := mem[R31 + 0x58, el]:u64
000008f7: mem := mem with [R0] <- 0
000008fc: R1 := 0x5C
00000903: R0 := mem[R31 + 0x50, el]:u64
00000908: R30 := 0xB98
0000090a: call @strchr with return %0000090c

0000090c:
00000912: mem := mem with [R31 + 0x48, el]:u64 <- R0
00000919: R0 := mem[R31 + 0x48, el]:u64
0000091f: #13 := R0 - 1
00000924: VF := extend:65[#13 + 1] <> extend:65[R0] + 0
00000929: CF := pad:65[#13 + 1] <> pad:65[R0] - 0x10000000000000000
0000092d: ZF := #13 + 1 = 0
00000931: NF := 63:63[#13 + 1]
00000937: when ZF <> 1 goto %00000935
0000134f: goto %00000c20

00000935:
0000093f: R0 := mem[R31 + 0x48, el]:u64
00000946: mem := mem with [R0] <- 0
0000094d: R0 := mem[R31 + 0x28, el]:u64
00000953: #14 := R0 - 1
00000958: VF := extend:65[#14 + 1] <> extend:65[R0] + 0
0000095d: CF := pad:65[#14 + 1] <> pad:65[R0] - 0x10000000000000000
00000961: ZF := #14 + 1 = 0
00000965: NF := 63:63[#14 + 1]
0000096b: when ZF goto %00000969
00001350: goto %00000bda

00000bda:
00000bdf: R0 := mem[R31 + 0x50, el]:u64
00000be5: #23 := R0 - 1
00000bea: VF := extend:65[#23 + 1] <> extend:65[R0] + 0
00000bef: CF := pad:65[#23 + 1] <> pad:65[R0] - 0x10000000000000000
00000bf3: ZF := #23 + 1 = 0
00000bf7: NF := 63:63[#23 + 1]
00000bfc: when ZF goto %00000969
00001351: goto %00000c00

00000c00:
00000c05: R0 := mem[R31 + 0x28, el]:u64
00000c0b: R0 := R0 + 0x32
00000c10: R2 := 0x32
00000c17: R1 := mem[R31 + 0x50, el]:u64
00000c1c: R30 := 0xC08
00000c1e: call @strncpy with return %00000969

00000969:
00000973: R0 := mem[R31 + 0x28, el]:u64
00000979: #15 := R0 - 1
0000097e: VF := extend:65[#15 + 1] <> extend:65[R0] + 0
00000983: CF := pad:65[#15 + 1] <> pad:65[R0] - 0x10000000000000000
00000987: ZF := #15 + 1 = 0
0000098b: NF := 63:63[#15 + 1]
00000991: when ZF goto %0000098f
00001352: goto %00000b81

00000b81:
00000b86: R0 := mem[R31 + 0x48, el]:u64
00000b8c: R0 := R0 + 1
00000b92: #22 := R0 - 1
00000b97: VF := extend:65[#22 + 1] <> extend:65[R0] + 0
00000b9c: CF := pad:65[#22 + 1] <> pad:65[R0] - 0x10000000000000000
00000ba0: ZF := #22 + 1 = 0
00000ba4: NF := 63:63[#22 + 1]
00000ba9: when ZF goto %0000098f
00001353: goto %00000bad

00000bad:
00000bb2: R3 := mem[R31 + 0x28, el]:u64
00000bb9: R0 := mem[R31 + 0x48, el]:u64
00000bbf: R0 := R0 + 1
00000bc4: R2 := 0x32
00000bca: R1 := R0
00000bd0: R0 := R3
00000bd5: R30 := 0xC40
00000bd8: call @strncpy with return %0000098f

00000c20:
00000c25: R0 := mem[R31 + 0x28, el]:u64
00000c2b: #24 := R0 - 1
00000c30: VF := extend:65[#24 + 1] <> extend:65[R0] + 0
00000c35: CF := pad:65[#24 + 1] <> pad:65[R0] - 0x10000000000000000
00000c39: ZF := #24 + 1 = 0
00000c3d: NF := 63:63[#24 + 1]
00000c42: when ZF goto %0000098f
00001354: goto %00000c46

00000c46:
00000c4b: R0 := mem[R31 + 0x50, el]:u64
00000c51: #25 := R0 - 1
00000c56: VF := extend:65[#25 + 1] <> extend:65[R0] + 0
00000c5b: CF := pad:65[#25 + 1] <> pad:65[R0] - 0x10000000000000000
00000c5f: ZF := #25 + 1 = 0
00000c63: NF := 63:63[#25 + 1]
00000c68: when ZF goto %0000098f
00001355: goto %00000c6c

00000c6c:
00000c71: R0 := mem[R31 + 0x28, el]:u64
00000c76: R2 := 0x32
00000c7d: R1 := mem[R31 + 0x50, el]:u64
00000c82: R30 := 0xBD0
00000c84: call @strncpy with return %00000c86

00000c86:
00000c88: goto %0000098f

0000098f:
00000999: R0 := mem[R31 + 0x58, el]:u64
0000099f: R0 := R0 + 1
000009a4: R30 := 0xC4C
000009a6: call @ntlm_hash_nt_password with return %000009a8

000009a8:
000009ae: mem := mem with [R31 + 0x60, el]:u64 <- R0
000009b5: R0 := mem[R31 + 0x28, el]:u64
000009bb: #16 := R0 - 1
000009c0: VF := extend:65[#16 + 1] <> extend:65[R0] + 0
000009c5: CF := pad:65[#16 + 1] <> pad:65[R0] - 0x10000000000000000
000009c9: ZF := #16 + 1 = 0
000009cd: NF := 63:63[#16 + 1]
000009d3: when ZF goto %000009d1
00001356: goto %00000b3b

00000b3b:
00000b40: R0 := mem[R31 + 0x60, el]:u64
00000b46: #21 := R0 - 1
00000b4b: VF := extend:65[#21 + 1] <> extend:65[R0] + 0
00000b50: CF := pad:65[#21 + 1] <> pad:65[R0] - 0x10000000000000000
00000b54: ZF := #21 + 1 = 0
00000b58: NF := 63:63[#21 + 1]
00000b5d: when ZF goto %000009d1
00001357: goto %00000b61

00000b61:
00000b66: R0 := mem[R31 + 0x28, el]:u64
00000b6c: R0 := R0 + 0x64
00000b71: R2 := 0x15
00000b78: R1 := mem[R31 + 0x60, el]:u64
00000b7d: R30 := 0xC7C
00000b7f: call @memcpy with return %000009d1

000009d1:
000009db: R0 := mem[R31 + 0x60, el]:u64
000009e0: R30 := 0xC84
000009e3: call @free with return %000009e5

000009e5:
000009ea: R0 := mem[R31 + 0x50, el]:u64
000009ef: R30 := 0xC8C
000009f1: call @strlen with return %000009f3

000009f3:
000009f7: R2 := R0
000009fc: R1 := 0
00000a03: R0 := mem[R31 + 0x50, el]:u64
00000a08: R30 := 0xC9C
00000a0a: call @memset with return %00000a0c

00000a0c:
00000a11: R0 := mem[R31 + 0x50, el]:u64
00000a16: R30 := 0xCA4
00000a18: call @free with return %00000a1a

00000a1a:
00000a1d: R0 := 1
00001358: goto %00000a1f

00000c8a:
00000c8f: R0 := mem[R31 + 0x50, el]:u64
00000c94: R30 := 0xB64
00000c96: call @strlen with return %00000c98

00000c98:
00000c9c: R2 := R0
00000ca1: R1 := 0
00000ca8: R0 := mem[R31 + 0x50, el]:u64
00000cad: R30 := 0xB74
00000caf: call @memset with return %00000cb1

00000cb1:
00000cb6: R0 := mem[R31 + 0x50, el]:u64
00000cbb: R30 := 0xB7C
00000cbd: call @free with return %00000cbf

00000cbf:
00000cc2: R0 := 0xFFFFFFFF
00000cc6: goto %00000a1f

00000a1f:
00000a24: R19 := mem[R31 + 0x10, el]:u64
00000a2b: R29 := mem[R31, el]:u64
00000a30: R30 := mem[R31 + 8, el]:u64
00000a34: R31 := R31 + 0x70
00000a39: call R30 with noreturn

00001302: sub main(main_argc, main_argv, main_result)
0000136c: main_argc :: in u32 = low:32[R0]
0000136d: main_argv :: in out u64 = R1
0000136e: main_result :: out u32 = low:32[R0]

00000a3b:
00000a3f: #17 := R31 - 0xC0
00000a45: mem := mem with [#17, el]:u64 <- R29
00000a4b: mem := mem with [#17 + 8, el]:u64 <- R30
00000a4f: R31 := #17
00000a55: R29 := R31
00000a5b: R0 := R31 + 0x28
00000a60: V0 := 0
00000a68: mem := mem with [R0, el]:u128 <- V0
00000a6e: mem := mem with [R0 + 0x10, el]:u128 <- V0
00000a74: #18 := R0 + 0x20
00000a7a: mem := mem with [#18, el]:u128 <- V0
00000a80: mem := mem with [#18 + 0x10, el]:u128 <- V0
00000a86: #19 := R0 + 0x40
00000a8c: mem := mem with [#19, el]:u128 <- V0
00000a92: mem := mem with [#19 + 0x10, el]:u128 <- V0
00000a98: #20 := R0 + 0x60
00000a9e: mem := mem with [#20, el]:u128 <- V0
00000aa4: mem := mem with [#20 + 0x10, el]:u128 <- V0
00000aac: mem := mem with [R0 + 0x80, el]:u128 <- V0
00000ab2: R1 := 63:0[V0]
00000aba: mem := mem with [R0 + 0x8E, el]:u64 <- R1
00000abf: R0 := 0x20000
00000ac5: R0 := R0 + 0x78
00000acb: R2 := R31 + 0x10
00000ad1: R3 := R0
00000ad8: R0 := mem[R3, el]:u64
00000add: R1 := mem[R3 + 8, el]:u64
00000ae5: mem := mem with [R2, el]:u64 <- R0
00000aeb: mem := mem with [R2 + 8, el]:u64 <- R1
00000af2: R0 := mem[R3 + 0x10, el]:u64
00000afa: mem := mem with [R2 + 0x10, el]:u64 <- R0
00000b00: R0 := R31 + 0x28
00000b06: R3 := R31 + 0x10
00000b0c: R2 := R0
00000b11: R0 := 0
00000b17: R1 := R0 + 0xD40
00000b1d: R0 := R3
00000b22: R30 := 0xD1C
00000b24: call @http_parse_basic with return %00000b26

00000b26:
00000b2b: R29 := mem[R31, el]:u64
00000b30: R30 := mem[R31 + 8, el]:u64
00000b34: R31 := R31 + 0xC0
00000b39: call R30 with noreturn

00001303: sub malloc(malloc_size, malloc_result)
0000136f: malloc_size :: in u64 = R0
00001370: malloc_result :: out u64 = R0

000007d9:
00000f45: R16 := 0x20000
00000f4c: R17 := mem[R16 + 0x20, el]:u64
00000f52: R16 := R16 + 0x20
00000f57: call R17 with noreturn

00001304: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
00001371: memcpy_dst :: in out u64 = R0
00001372: memcpy_src :: in out u64 = R1
00001373: memcpy_n :: in u64 = R2
00001374: memcpy_result :: out u64 = R0

000008a5:
00000eed: R16 := 0x20000
00000ef4: R17 := mem[R16, el]:u64
00000efa: R16 := R16
00000eff: call R17 with noreturn

00001305: sub memset(memset_buf, memset_c, memset_n, memset_result)
00001375: memset_buf :: in out u64 = R0
00001376: memset_c :: in u32 = low:32[R1]
00001377: memset_n :: in u64 = R2
00001378: memset_result :: out u64 = R0

0000080f:
00000f5b: R16 := 0x20000
00000f62: R17 := mem[R16 + 0x28, el]:u64
00000f68: R16 := R16 + 0x28
00000f6d: call R17 with noreturn

00001306: sub ntlm_hash_nt_password(ntlm_hash_nt_password_result)
00001379: ntlm_hash_nt_password_result :: out u32 = low:32[R0]

00000620:
00000624: #4 := R31 - 0x20
0000062a: mem := mem with [#4, el]:u64 <- R29
00000630: mem := mem with [#4 + 8, el]:u64 <- R30
00000634: R31 := #4
0000063a: R29 := R31
00000642: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000649: R0 := mem[R31 + 0x18, el]:u64
0000064e: R30 := 0x9E8
00000651: call @strdup with return %00000653

00000653:
00000658: R29 := mem[R31, el]:u64
0000065d: R30 := mem[R31 + 8, el]:u64
00000661: R31 := R31 + 0x20
00000666: call R30 with noreturn

00001307: sub register_tm_clones(register_tm_clones_result)
0000137a: register_tm_clones_result :: out u32 = low:32[R0]

00000587:
0000058a: R0 := 0x20000
00000590: R0 := R0 + 0x90
00000595: R1 := 0x20000
0000059b: R1 := R1 + 0x90
000005a2: R1 := R1 + ~R0 + 1
000005a8: R2 := 0.63:63[R1]
000005af: R1 := R2 + (R1 ~>> 3)
000005b5: R1 := extend:64[63:1[R1]]
000005bb: when R1 = 0 goto %000005b9
00001359: goto %00000d7f

00000d7f:
00000d82: R2 := 0x1F000
00000d89: R2 := mem[R2 + 0xFE0, el]:u64
00000d8e: when R2 = 0 goto %000005b9
0000135a: goto %00000d92

000005b9:
000005c1: call R30 with noreturn

00000d92:
00000d96: R16 := R2
00000d9b: call R16 with noreturn

0000130a: sub strchr(strchr_s, strchr_c, strchr_result)
0000137b: strchr_s :: in u64 = R0
0000137c: strchr_c :: in u32 = low:32[R1]
0000137d: strchr_result :: out u64 = R0

000008b9:
00000fc9: R16 := 0x20000
00000fd0: R17 := mem[R16 + 0x50, el]:u64
00000fd6: R16 := R16 + 0x50
00000fdb: call R17 with noreturn

0000130b: sub strdup(strdup_s, strdup_result)
0000137e: strdup_s :: in u64 = R0
0000137f: strdup_result :: out u64 = R0

0000064f:
00000f71: R16 := 0x20000
00000f78: R17 := mem[R16 + 0x30, el]:u64
00000f7e: R16 := R16 + 0x30
00000f83: call R17 with noreturn

0000130c: sub strlen(strlen_s, strlen_result)
00001380: strlen_s :: in u64 = R0
00001381: strlen_result :: out u64 = R0

000007cb:
00000f03: R16 := 0x20000
00000f0a: R17 := mem[R16 + 8, el]:u64
00000f10: R16 := R16 + 8
00000f15: call R17 with noreturn

0000130d: sub strncpy(strncpy_dst, strncpy_src, strncpy_n, strncpy_result)
00001382: strncpy_dst :: in out u64 = R0
00001383: strncpy_src :: in u64 = R1
00001384: strncpy_n :: in u64 = R2
00001385: strncpy_result :: out u64 = R0

00000bd6:
00000ff5: R16 := 0x20000
00000ffc: R17 := mem[R16 + 0x60, el]:u64
00001002: R16 := R16 + 0x60
00001007: call R17 with noreturn

0000130e: sub strstr(strstr_haystack, strstr_needle, strstr_result)
00001386: strstr_haystack :: in u64 = R0
00001387: strstr_needle :: in u64 = R1
00001388: strstr_result :: out u64 = R0

000006e6:
00000fdf: R16 := 0x20000
00000fe6: R17 := mem[R16 + 0x58, el]:u64
00000fec: R16 := R16 + 0x58
00000ff1: call R17 with noreturn
