00000642: program
00000627: sub __cxa_finalize(__cxa_finalize_result)
00000643: __cxa_finalize_result :: out u32 = R0

0000056e:
000005c9: R16 := 0x10000
000005cd: R17 := mem[R16 + 0xFA0, el]:u64
000005d1: R16 := R16 + 0xFA0
000005d5: call R17 with noreturn

00000628: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000644: __do_global_dtors_aux_result :: out u32 = R0

000003f5:
000003f7: mem := mem with [R31 - 0x20, el]:u64 <- R29
000003f9: mem := mem with [R31 - 0x18, el]:u64 <- R30
000003fb: R31 := R31 - 0x20
000003ff: R29 := R31
00000403: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000407: R19 := 0x11000
0000040b: #28 := pad:64[mem[R19 + 0x10]]
0000040d: R0 := 0
0000040f: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
00000418: #29 := extract:31:0[R0] <> 0
00000414: when #29 goto %00000412
00000629: goto %00000543

00000543:
00000545: R0 := 0x10000
00000549: R0 := mem[R0 + 0xFD8, el]:u64
00000552: #81 := R0 = 0
0000054e: when #81 goto %0000054c
0000062a: goto %00000563

00000563:
00000565: R0 := 0x11000
00000569: R0 := mem[R0 + 8, el]:u64
0000056d: R30 := 0x700
00000570: call @__cxa_finalize with return %0000054c

0000054c:
00000555: R30 := 0x704
00000557: call @deregister_tm_clones with return %00000559

00000559:
0000055b: R0 := 0
0000055d: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000561: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
0000062b: goto %00000412

00000412:
0000041b: R19 := mem[R31 + 0x10, el]:u64
0000041f: R29 := mem[R31, el]:u64
00000421: R30 := mem[R31 + 8, el]:u64
00000423: R31 := R31 + 0x20
00000427: call R30 with noreturn

0000062c: sub __libc_csu_fini(__libc_csu_fini_result)
00000645: __libc_csu_fini_result :: out u32 = R0

00000503:
00000505: call R30 with noreturn

0000062d: sub __libc_csu_init(__libc_csu_init_result)
00000646: __libc_csu_init_result :: out u32 = R0

00000485:
00000487: mem := mem with [R31 - 0x40, el]:u64 <- R29
00000489: mem := mem with [R31 - 0x38, el]:u64 <- R30
0000048b: R31 := R31 - 0x40
0000048f: R29 := R31
00000493: mem := mem with [R31, el]:u64 <- R31 + 0x20
00000495: mem := mem with [R31, el]:u64 <- R31 + 0x28
00000499: R20 := 0x10000
0000049d: R20 := R20 + 0xD90
000004a1: mem := mem with [R31, el]:u64 <- R31 + 0x40
000004a3: mem := mem with [R31, el]:u64 <- R31 + 0x48
000004a7: R21 := 0x10000
000004ab: R21 := R21 + 0xD88
000004af: R20 := R20 - R21
000004b3: #46 := extract:31:0[R0]
000004b5: R22 := 0
000004b7: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#46]
000004bb: mem := mem with [R31, el]:u64 <- R31 + 0x60
000004bd: mem := mem with [R31, el]:u64 <- R31 + 0x68
000004c1: R23 := R1
000004c5: R24 := R2
000004c9: R30 := 0x7A8
000004cc: call @_init with return %000004ce

000004ce:
000004d0: #57 := ~(R20 ~>> 3) + 1
000004d2: NF := extract:63:63[#57]
000004d4: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#57]
000004d6: ZF := #57 = 0
000004d8: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#57]
000004e1: #59 := ZF
000004dd: when #59 goto %000004db
0000062e: goto %00000508

00000508:
0000050a: R20 := R20 >> 3
0000050e: R19 := 0
0000062f: goto %00000510

00000510:
00000512: R3 := mem[R21 + (R19 << 3), el]:u64
00000516: R2 := R24
0000051a: R19 := R19 + 1
0000051e: R1 := R23
00000522: #74 := extract:31:0[R22]
00000524: R0 := 0
00000526: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#74]
0000052a: R30 := 0x7D0
0000052c: call R3 with return %0000052f

0000052f:
00000531: #78 := 1 + ~R19 + R20
00000533: NF := extract:63:63[#78]
00000535: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#78] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#78]
00000537: ZF := #78 = 0
00000539: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#78] | extract:63:63[R20] &
          ~extract:63:63[#78]
00000541: #80 := ~ZF <> 0
0000053d: when #80 goto %00000510
00000630: goto %000004db

000004db:
000004e4: R19 := mem[R31 + 0x10, el]:u64
000004e6: R20 := mem[R31 + 0x18, el]:u64
000004ea: R21 := mem[R31 + 0x20, el]:u64
000004ec: R22 := mem[R31 + 0x28, el]:u64
000004f0: R23 := mem[R31 + 0x30, el]:u64
000004f2: R24 := mem[R31 + 0x38, el]:u64
000004f6: R29 := mem[R31, el]:u64
000004f8: R30 := mem[R31 + 8, el]:u64
000004fa: R31 := R31 + 0x40
000004fe: call R30 with noreturn

00000631: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000647: __libc_start_main_main :: in u64 = R0
00000648: __libc_start_main_arg2 :: in u32 = R1
00000649: __libc_start_main_arg3 :: in out u64 = R2
0000064a: __libc_start_main_auxv :: in out u64 = R3
0000064b: __libc_start_main_result :: out u32 = R0

00000371:
000005d9: R16 := 0x10000
000005dd: R17 := mem[R16 + 0xFA8, el]:u64
000005e1: R16 := R16 + 0xFA8
000005e5: call R17 with noreturn

00000632: sub _fini(_fini_result)
0000064c: _fini_result :: out u32 = R0

00000325:
00000327: mem := mem with [R31 - 0x10, el]:u64 <- R29
00000329: mem := mem with [R31 - 8, el]:u64 <- R30
0000032b: R31 := R31 - 0x10
0000032f: R29 := R31
00000333: R29 := mem[R31, el]:u64
00000335: R30 := mem[R31 + 8, el]:u64
00000337: R31 := R31 + 0x10
0000033b: call R30 with noreturn

00000633: sub _init(_init_result)
0000064d: _init_result :: out u32 = R0

000004ca:
00000609: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000060b: mem := mem with [R31 - 8, el]:u64 <- R30
0000060d: R31 := R31 - 0x10
00000611: R29 := R31
00000615: R30 := 0x5A4
00000617: call @call_weak_fn with return %00000619

00000619:
0000061b: R29 := mem[R31, el]:u64
0000061d: R30 := mem[R31 + 8, el]:u64
0000061f: R31 := R31 + 0x10
00000623: call R30 with noreturn

00000634: sub _start(_start_result)
0000064e: _start_result :: out u32 = R0

0000033e:
00000340: R29 := 0
00000344: R30 := 0
00000348: R5 := R0
0000034c: R1 := mem[R31, el]:u64
00000350: R2 := R31 + 8
00000354: R6 := R31
00000358: R0 := 0x10000
0000035c: R0 := mem[R0 + 0xFF0, el]:u64
00000360: R3 := 0x10000
00000364: R3 := mem[R3 + 0xFE8, el]:u64
00000368: R4 := 0x10000
0000036c: R4 := mem[R4 + 0xFC8, el]:u64
00000370: R30 := 0x644
00000373: call @__libc_start_main with return %00000375

00000375:
00000377: R30 := 0x648
0000037a: call @abort with return %00000635

00000635:
00000636: call @call_weak_fn with noreturn

00000637: sub abort()


00000378:
000005f9: R16 := 0x10000
000005fd: R17 := mem[R16 + 0xFB8, el]:u64
00000601: R16 := R16 + 0xFB8
00000605: call R17 with noreturn

00000638: sub call_weak_fn(call_weak_fn_result)
0000064f: call_weak_fn_result :: out u32 = R0

0000037c:
0000037e: R0 := 0x10000
00000382: R0 := mem[R0 + 0xFE0, el]:u64
0000038b: #5 := R0 = 0
00000387: when #5 goto %00000385
00000639: goto %000005a4

00000385:
0000038e: call R30 with noreturn

000005a4:
000005a7: goto @__gmon_start__

000005a5:
000005e9: R16 := 0x10000
000005ed: R17 := mem[R16 + 0xFB0, el]:u64
000005f1: R16 := R16 + 0xFB0
000005f5: call R17 with noreturn

0000063a: sub deregister_tm_clones(deregister_tm_clones_result)
00000650: deregister_tm_clones_result :: out u32 = R0

00000393:
00000395: R0 := 0x11000
00000399: R0 := R0 + 0x10
0000039d: R1 := 0x11000
000003a1: R1 := R1 + 0x10
000003a5: #9 := 1 + ~R0 + R1
000003a7: NF := extract:63:63[#9]
000003a9: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
000003ab: ZF := #9 = 0
000003ad: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
000003b6: #11 := ZF
000003b2: when #11 goto %000003b0
0000063b: goto %0000058b

0000058b:
0000058d: R1 := 0x10000
00000591: R1 := mem[R1 + 0xFD0, el]:u64
00000599: #87 := R1 = 0
00000595: when #87 goto %000003b0
0000063c: goto %0000059b

000003b0:
000003b9: call R30 with noreturn

0000059b:
0000059d: R16 := R1
000005a1: call R16 with noreturn

0000063d: sub frame_dummy(frame_dummy_result)
00000651: frame_dummy_result :: out u32 = R0

0000042a:
0000042c: call @register_tm_clones with noreturn

0000063e: sub main(main_argc, main_argv, main_result)
00000652: main_argc :: in u32 = R0
00000653: main_argv :: in out u64 = R1
00000654: main_result :: out u32 = R0

0000042e:
00000430: R31 := R31 - 0x10
00000434: R0 := 0x11000
00000438: R0 := R0 + 0x20
0000043c: R0 := mem[R0, el]:u64
00000440: mem := mem with [R31 + 8, el]:u64 <- R0
00000444: mem := mem with [R31 + 8, el]:u64 <- 0
00000448: R0 := 0x11000
0000044c: R0 := R0 + 0x18
00000450: R1 := mem[R31 + 8, el]:u64
00000454: mem := mem with [R0, el]:u64 <- R1
00000458: R0 := 0x11000
0000045c: R0 := R0 + 0x20
00000460: R0 := mem[R0, el]:u64
00000464: mem := mem with [R31 + 8, el]:u64 <- R0
00000468: R0 := 0x11000
0000046c: R0 := R0 + 0x18
00000470: R1 := mem[R31 + 8, el]:u64
00000474: mem := mem with [R0, el]:u64 <- R1
00000478: R0 := 0
0000047a: R0 := R0 & 0xFFFFFFFF00000000
0000047e: R31 := R31 + 0x10
00000482: call R30 with noreturn

0000063f: sub register_tm_clones(register_tm_clones_result)
00000655: register_tm_clones_result :: out u32 = R0

000003bc:
000003be: R0 := 0x11000
000003c2: R0 := R0 + 0x10
000003c6: R1 := 0x11000
000003ca: R1 := R1 + 0x10
000003ce: R1 := R1 - R0
000003d2: R2 := R1 >> 0x3F
000003d6: R1 := R2 + (R1 ~>> 3)
000003da: #22 := ~(R1 ~>> 1) + 1
000003dc: NF := extract:63:63[#22]
000003de: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000003e0: ZF := #22 = 0
000003e2: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000003e6: R1 := R1 >> 1
000003ef: #25 := ZF
000003eb: when #25 goto %000003e9
00000640: goto %00000572

00000572:
00000574: R2 := 0x10000
00000578: R2 := mem[R2 + 0xFF8, el]:u64
00000580: #83 := R2 = 0
0000057c: when #83 goto %000003e9
00000641: goto %00000582

000003e9:
000003f2: call R30 with noreturn

00000582:
00000584: R16 := R2
00000588: call R16 with noreturn
