000007c2: program
000007a7: sub __cxa_finalize(__cxa_finalize_result)
000007c3: __cxa_finalize_result :: out u32 = low:32[R0]

00000529:
0000060a: R16 := 0x11000
00000611: R17 := mem[R16, el]:u64
00000617: R16 := R16
0000061c: call R17 with noreturn

000007a8: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000007c4: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000031c:
00000320: #5 := R31 - 0x20
00000326: mem := mem with [#5, el]:u64 <- R29
0000032c: mem := mem with [#5 + 8, el]:u64 <- R30
00000330: R31 := #5
00000336: R29 := R31
0000033e: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000343: R19 := 0x11000
0000034a: R0 := pad:64[mem[R19 + 0x30]]
00000351: when 31:0[R0] <> 0 goto %0000034f
000007a9: goto %000004f2

000004f2:
000004f5: R0 := 0x10000
000004fc: R0 := mem[R0 + 0xFC0, el]:u64
00000502: when R0 = 0 goto %00000500
000007aa: goto %00000519

00000519:
0000051c: R0 := 0x11000
00000523: R0 := mem[R0 + 0x28, el]:u64
00000528: R30 := 0x700
0000052b: call @__cxa_finalize with return %00000500

00000500:
00000508: R30 := 0x704
0000050a: call @deregister_tm_clones with return %0000050c

0000050c:
0000050f: R0 := 1
00000517: mem := mem with [R19 + 0x30] <- 7:0[R0]
000007ab: goto %0000034f

0000034f:
00000359: R19 := mem[R31 + 0x10, el]:u64
00000360: R29 := mem[R31, el]:u64
00000365: R30 := mem[R31 + 8, el]:u64
00000369: R31 := R31 + 0x20
0000036e: call R30 with noreturn

000007ac: sub __libc_csu_fini(__libc_csu_fini_result)
000007c5: __libc_csu_fini_result :: out u32 = low:32[R0]

00000492:
00000495: call R30 with noreturn

000007ad: sub __libc_csu_init(__libc_csu_init_result)
000007c6: __libc_csu_init_result :: out u32 = low:32[R0]

0000039f:
000003a3: #6 := R31 - 0x40
000003a9: mem := mem with [#6, el]:u64 <- R29
000003af: mem := mem with [#6 + 8, el]:u64 <- R30
000003b3: R31 := #6
000003b9: R29 := R31
000003bf: #7 := R31 + 0x10
000003c5: mem := mem with [#7, el]:u64 <- R19
000003cb: mem := mem with [#7 + 8, el]:u64 <- R20
000003d0: R20 := 0x10000
000003d6: R20 := R20 + 0xDC0
000003dc: #8 := R31 + 0x20
000003e2: mem := mem with [#8, el]:u64 <- R21
000003e8: mem := mem with [#8 + 8, el]:u64 <- R22
000003ed: R21 := 0x10000
000003f3: R21 := R21 + 0xDB8
000003fa: R20 := R20 + ~R21 + 1
00000400: R22 := pad:64[31:0[R0]]
00000406: #9 := R31 + 0x30
0000040c: mem := mem with [#9, el]:u64 <- R23
00000412: mem := mem with [#9 + 8, el]:u64 <- R24
00000418: R23 := R1
0000041e: R24 := R2
00000423: R30 := 0x770
00000426: call @_init with return %00000428

00000428:
0000042c: #10 := ~(R20 ~>> 3)
00000430: #11 := ~(R20 ~>> 3) + 1
00000435: VF := extend:65[#11] <> extend:65[#10] + 1
0000043a: CF := pad:65[#11] <> pad:65[#10] + 1
0000043e: ZF := #11 = 0
00000442: NF := 63:63[#11]
00000448: when ZF goto %00000446
000007ae: goto %00000497

00000497:
0000049d: R20 :=

          >> 3 | R20 << 0x3D]
000004a2: R19 := 0
000007af: goto %000004a4

000004a4:
000004aa: R3 := mem[R21 + (60:0[R19].0), el]:u64
000004b0: R2 := R24
000004b6: R19 := R19 + 1
000004bc: R1 := R23
000004c2: R0 := pad:64[31:0[R22]]
000004c7: R30 := 0x798
000004ca: call R3 with return %000004cc

000004cc:
000004d0: #15 := ~R19
000004d5: #16 := R20 + ~R19 + 1
000004db: VF := extend:65[#16] <> extend:65[R20] + extend:65[#15] + 1
000004e1: CF := pad:65[#16] <> pad:65[R20] + pad:65[#15] + 1
000004e5: ZF := #16 = 0
000004e9: NF := 63:63[#16]
000004ee: when ZF <> 1 goto %000004a4
000007b0: goto %00000446

00000446:
0000044f: #12 := R31 + 0x10
00000454: R19 := mem[#12, el]:u64
00000459: R20 := mem[#12 + 8, el]:u64
0000045f: #13 := R31 + 0x20
00000464: R21 := mem[#13, el]:u64
00000469: R22 := mem[#13 + 8, el]:u64
0000046f: #14 := R31 + 0x30
00000474: R23 := mem[#14, el]:u64
00000479: R24 := mem[#14 + 8, el]:u64
00000480: R29 := mem[R31, el]:u64
00000485: R30 := mem[R31 + 8, el]:u64
00000489: R31 := R31 + 0x40
0000048e: call R30 with noreturn

000007b1: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000007c7: __libc_start_main_main :: in u64 = R0
000007c8: __libc_start_main_arg2 :: in u32 = low:32[R1]
000007c9: __libc_start_main_arg3 :: in out u64 = R2
000007ca: __libc_start_main_auxv :: in out u64 = R3
000007cb: __libc_start_main_result :: out u32 = low:32[R0]

0000025a:
00000620: R16 := 0x11000
00000627: R17 := mem[R16 + 8, el]:u64
0000062d: R16 := R16 + 8
00000632: call R17 with noreturn

000007b2: sub _fini(_fini_result)
000007cc: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

000007b3: sub _init(_init_result)
000007cd: _init_result :: out u32 = low:32[R0]

00000424:
000006ea: #18 := R31 - 0x10
000006f0: mem := mem with [#18, el]:u64 <- R29
000006f6: mem := mem with [#18 + 8, el]:u64 <- R30
000006fa: R31 := #18
00000700: R29 := R31
00000705: R30 := 0x5A4
00000707: call @call_weak_fn with return %00000709

00000709:
0000070e: R29 := mem[R31, el]:u64
00000713: R30 := mem[R31 + 8, el]:u64
00000717: R31 := R31 + 0x10
0000071c: call R30 with noreturn

000007b4: sub _start(_start_result)
000007ce: _start_result :: out u32 = low:32[R0]

0000020f:
00000212: R29 := 0
00000217: R30 := 0
0000021d: R5 := R0
00000224: R1 := mem[R31, el]:u64
0000022a: R2 := R31 + 8
00000230: R6 := R31
00000235: R0 := 0x10000
0000023c: R0 := mem[R0 + 0xFD8, el]:u64
00000241: R3 := 0x10000
00000248: R3 := mem[R3 + 0xFD0, el]:u64
0000024d: R4 := 0x10000
00000254: R4 := mem[R4 + 0xFB0, el]:u64
00000259: R30 := 0x644
0000025c: call @__libc_start_main with return %0000025e

0000025e:
00000261: R30 := 0x648
00000264: call @abort with return %000007b5

000007b5:
000007b6: call @call_weak_fn with noreturn

000007b7: sub abort()


00000262:
0000064c: R16 := 0x11000
00000653: R17 := mem[R16 + 0x18, el]:u64
00000659: R16 := R16 + 0x18
0000065e: call R17 with noreturn

000007b8: sub call_weak_fn(call_weak_fn_result)
000007cf: call_weak_fn_result :: out u32 = low:32[R0]

00000266:
00000269: R0 := 0x10000
00000270: R0 := mem[R0 + 0xFC8, el]:u64
00000276: when R0 = 0 goto %00000274
000007b9: goto %00000569

00000274:
0000027c: call R30 with noreturn

00000569:
0000056c: goto @__gmon_start__

0000056a:
00000636: R16 := 0x11000
0000063d: R17 := mem[R16 + 0x10, el]:u64
00000643: R16 := R16 + 0x10
00000648: call R17 with noreturn

000007ba: sub deregister_tm_clones(deregister_tm_clones_result)
000007d0: deregister_tm_clones_result :: out u32 = low:32[R0]

00000280:
00000283: R0 := 0x11000
00000289: R0 := R0 + 0x30
0000028e: R1 := 0x11000
00000294: R1 := R1 + 0x30
0000029a: #1 := ~R0
0000029f: #2 := R1 + ~R0 + 1
000002a5: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002ab: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002af: ZF := #2 = 0
000002b3: NF := 63:63[#2]
000002b9: when ZF goto %000002b7
000007bb: goto %0000054b

0000054b:
0000054e: R1 := 0x10000
00000555: R1 := mem[R1 + 0xFB8, el]:u64
0000055a: when R1 = 0 goto %000002b7
000007bc: goto %0000055e

000002b7:
000002bf: call R30 with noreturn

0000055e:
00000562: R16 := R1
00000567: call R16 with noreturn

000007bd: sub frame_dummy(frame_dummy_result)
000007d1: frame_dummy_result :: out u32 = low:32[R0]

00000370:
00000372: call @register_tm_clones with noreturn

000007be: sub main(main_argc, main_argv, main_result)
000007d2: main_argc :: in u32 = low:32[R0]
000007d3: main_argv :: in out u64 = R1
000007d4: main_result :: out u32 = low:32[R0]

00000374:
00000378: R31 := R31 - 0x10
0000037f: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000384: R8 := 0x11000
0000038b: mem := mem with [R8 + 0x34, el]:u32 <- 0
00000392: R0 := pad:64[mem[R8 + 0x34, el]:u32]
00000398: R31 := R31 + 0x10
0000039d: call R30 with noreturn

000007bf: sub register_tm_clones(register_tm_clones_result)
000007d5: register_tm_clones_result :: out u32 = low:32[R0]

000002c1:
000002c4: R0 := 0x11000
000002ca: R0 := R0 + 0x30
000002cf: R1 := 0x11000
000002d5: R1 := R1 + 0x30
000002dc: R1 := R1 + ~R0 + 1
000002e3: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
000002ea: R1 := R2 + (R1 ~>> 3)
000002f0: #3 := ~(R1 ~>> 1)
000002f4: #4 := ~(R1 ~>> 1) + 1
000002f9: VF := extend:65[#4] <> extend:65[#3] + 1
000002fe: CF := pad:65[#4] <> pad:65[#3] + 1
00000302: ZF := #4 = 0
00000306: NF := 63:63[#4]
0000030e: R1 :=

          >> 1 | R1 << 0x3F]
00000314: when ZF goto %00000312
000007c0: goto %0000052d

0000052d:
00000530: R2 := 0x10000
00000537: R2 := mem[R2 + 0xFE0, el]:u64
0000053c: when R2 = 0 goto %00000312
000007c1: goto %00000540

00000312:
0000031a: call R30 with noreturn

00000540:
00000544: R16 := R2
00000549: call R16 with noreturn
