00000854: program
00000838: sub __cxa_finalize(__cxa_finalize_result)
00000855: __cxa_finalize_result :: out u32 = low:32[R0]

000005a6:
00000687: R16 := 0x11000
0000068e: R17 := mem[R16, el]:u64
00000694: R16 := R16
00000699: call R17 with noreturn

00000839: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000856: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000342:
00000346: #5 := R31 - 0x20
0000034c: mem := mem with [#5, el]:u64 <- R29
00000352: mem := mem with [#5 + 8, el]:u64 <- R30
00000356: R31 := #5
0000035c: R29 := R31
00000364: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000369: R19 := 0x11000
00000370: R0 := pad:64[mem[R19 + 0x30]]
00000377: when 31:0[R0] <> 0 goto %00000375
0000083a: goto %0000056f

0000056f:
00000572: R0 := 0x10000
00000579: R0 := mem[R0 + 0xFC0, el]:u64
0000057f: when R0 = 0 goto %0000057d
0000083b: goto %00000596

00000596:
00000599: R0 := 0x11000
000005a0: R0 := mem[R0 + 0x28, el]:u64
000005a5: R30 := 0x700
000005a8: call @__cxa_finalize with return %0000057d

0000057d:
00000585: R30 := 0x704
00000587: call @deregister_tm_clones with return %00000589

00000589:
0000058c: R0 := 1
00000594: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000083c: goto %00000375

00000375:
0000037f: R19 := mem[R31 + 0x10, el]:u64
00000386: R29 := mem[R31, el]:u64
0000038b: R30 := mem[R31 + 8, el]:u64
0000038f: R31 := R31 + 0x20
00000394: call R30 with noreturn

0000083d: sub __libc_csu_fini(__libc_csu_fini_result)
00000857: __libc_csu_fini_result :: out u32 = low:32[R0]

00000500:
00000503: call R30 with noreturn

0000083e: sub __libc_csu_init(__libc_csu_init_result)
00000858: __libc_csu_init_result :: out u32 = low:32[R0]

0000040d:
00000411: #7 := R31 - 0x40
00000417: mem := mem with [#7, el]:u64 <- R29
0000041d: mem := mem with [#7 + 8, el]:u64 <- R30
00000421: R31 := #7
00000427: R29 := R31
0000042d: #8 := R31 + 0x10
00000433: mem := mem with [#8, el]:u64 <- R19
00000439: mem := mem with [#8 + 8, el]:u64 <- R20
0000043e: R20 := 0x10000
00000444: R20 := R20 + 0xDC0
0000044a: #9 := R31 + 0x20
00000450: mem := mem with [#9, el]:u64 <- R21
00000456: mem := mem with [#9 + 8, el]:u64 <- R22
0000045b: R21 := 0x10000
00000461: R21 := R21 + 0xDB8
00000468: R20 := R20 + ~R21 + 1
0000046e: R22 := pad:64[31:0[R0]]
00000474: #10 := R31 + 0x30
0000047a: mem := mem with [#10, el]:u64 <- R23
00000480: mem := mem with [#10 + 8, el]:u64 <- R24
00000486: R23 := R1
0000048c: R24 := R2
00000491: R30 := 0x798
00000494: call @_init with return %00000496

00000496:
0000049a: #11 := ~(R20 ~>> 3)
0000049e: #12 := ~(R20 ~>> 3) + 1
000004a3: VF := extend:65[#12] <> extend:65[#11] + 1
000004a8: CF := pad:65[#12] <> pad:65[#11] + 1
000004ac: ZF := #12 = 0
000004b0: NF := 63:63[#12]
000004b6: when ZF goto %000004b4
0000083f: goto %00000505

00000505:
0000050b: R20 :=

          >> 3 | R20 << 0x3D]
00000510: R19 := 0
00000840: goto %00000512

00000512:
00000518: R3 := mem[R21 + (60:0[R19].0), el]:u64
0000051e: R2 := R24
00000524: R19 := R19 + 1
0000052a: R1 := R23
00000530: R0 := pad:64[31:0[R22]]
00000535: R30 := 0x7C0
00000538: call R3 with return %0000053a

0000053a:
0000053e: #16 := ~R19
00000543: #17 := R20 + ~R19 + 1
00000549: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
0000054f: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
00000553: ZF := #17 = 0
00000557: NF := 63:63[#17]
0000055c: when ZF <> 1 goto %00000512
00000841: goto %000004b4

000004b4:
000004bd: #13 := R31 + 0x10
000004c2: R19 := mem[#13, el]:u64
000004c7: R20 := mem[#13 + 8, el]:u64
000004cd: #14 := R31 + 0x20
000004d2: R21 := mem[#14, el]:u64
000004d7: R22 := mem[#14 + 8, el]:u64
000004dd: #15 := R31 + 0x30
000004e2: R23 := mem[#15, el]:u64
000004e7: R24 := mem[#15 + 8, el]:u64
000004ee: R29 := mem[R31, el]:u64
000004f3: R30 := mem[R31 + 8, el]:u64
000004f7: R31 := R31 + 0x40
000004fc: call R30 with noreturn

00000842: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000859: __libc_start_main_main :: in u64 = R0
0000085a: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000085b: __libc_start_main_arg3 :: in out u64 = R2
0000085c: __libc_start_main_auxv :: in out u64 = R3
0000085d: __libc_start_main_result :: out u32 = low:32[R0]

00000280:
0000069d: R16 := 0x11000
000006a4: R17 := mem[R16 + 8, el]:u64
000006aa: R16 := R16 + 8
000006af: call R17 with noreturn

00000843: sub _fini(_fini_result)
0000085e: _fini_result :: out u32 = low:32[R0]

0000002e:
00000032: #0 := R31 - 0x10
00000038: mem := mem with [#0, el]:u64 <- R29
0000003e: mem := mem with [#0 + 8, el]:u64 <- R30
00000042: R31 := #0
00000048: R29 := R31
0000004f: R29 := mem[R31, el]:u64
00000054: R30 := mem[R31 + 8, el]:u64
00000058: R31 := R31 + 0x10
0000005d: call R30 with noreturn

00000844: sub _init(_init_result)
0000085f: _init_result :: out u32 = low:32[R0]

00000492:
00000771: #19 := R31 - 0x10
00000777: mem := mem with [#19, el]:u64 <- R29
0000077d: mem := mem with [#19 + 8, el]:u64 <- R30
00000781: R31 := #19
00000787: R29 := R31
0000078c: R30 := 0x5A4
0000078e: call @call_weak_fn with return %00000790

00000790:
00000795: R29 := mem[R31, el]:u64
0000079a: R30 := mem[R31 + 8, el]:u64
0000079e: R31 := R31 + 0x10
000007a3: call R30 with noreturn

00000845: sub _start(_start_result)
00000860: _start_result :: out u32 = low:32[R0]

00000235:
00000238: R29 := 0
0000023d: R30 := 0
00000243: R5 := R0
0000024a: R1 := mem[R31, el]:u64
00000250: R2 := R31 + 8
00000256: R6 := R31
0000025b: R0 := 0x10000
00000262: R0 := mem[R0 + 0xFD8, el]:u64
00000267: R3 := 0x10000
0000026e: R3 := mem[R3 + 0xFD0, el]:u64
00000273: R4 := 0x10000
0000027a: R4 := mem[R4 + 0xFB0, el]:u64
0000027f: R30 := 0x644
00000282: call @__libc_start_main with return %00000284

00000284:
00000287: R30 := 0x648
0000028a: call @abort with return %00000846

00000846:
00000847: call @call_weak_fn with noreturn

00000848: sub abort()


00000288:
000006c9: R16 := 0x11000
000006d0: R17 := mem[R16 + 0x18, el]:u64
000006d6: R16 := R16 + 0x18
000006db: call R17 with noreturn

00000849: sub call_weak_fn(call_weak_fn_result)
00000861: call_weak_fn_result :: out u32 = low:32[R0]

0000028c:
0000028f: R0 := 0x10000
00000296: R0 := mem[R0 + 0xFC8, el]:u64
0000029c: when R0 = 0 goto %0000029a
0000084a: goto %000005e6

0000029a:
000002a2: call R30 with noreturn

000005e6:
000005e9: goto @__gmon_start__

000005e7:
000006b3: R16 := 0x11000
000006ba: R17 := mem[R16 + 0x10, el]:u64
000006c0: R16 := R16 + 0x10
000006c5: call R17 with noreturn

0000084b: sub deregister_tm_clones(deregister_tm_clones_result)
00000862: deregister_tm_clones_result :: out u32 = low:32[R0]

000002a6:
000002a9: R0 := 0x11000
000002af: R0 := R0 + 0x30
000002b4: R1 := 0x11000
000002ba: R1 := R1 + 0x30
000002c0: #1 := ~R0
000002c5: #2 := R1 + ~R0 + 1
000002cb: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002d1: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002d5: ZF := #2 = 0
000002d9: NF := 63:63[#2]
000002df: when ZF goto %000002dd
0000084c: goto %000005c8

000005c8:
000005cb: R1 := 0x10000
000005d2: R1 := mem[R1 + 0xFB8, el]:u64
000005d7: when R1 = 0 goto %000002dd
0000084d: goto %000005db

000002dd:
000002e5: call R30 with noreturn

000005db:
000005df: R16 := R1
000005e4: call R16 with noreturn

0000084e: sub frame_dummy(frame_dummy_result)
00000863: frame_dummy_result :: out u32 = low:32[R0]

00000396:
00000398: call @register_tm_clones with noreturn

0000084f: sub main(main_argc, main_argv, main_result)
00000864: main_argc :: in u32 = low:32[R0]
00000865: main_argv :: in out u64 = R1
00000866: main_result :: out u32 = low:32[R0]

0000039a:
0000039e: R31 := R31 - 0x10
000003a5: mem := mem with [R31 + 0xC, el]:u32 <- 0
000003aa: R8 := 0x11000
000003b1: R8 := pad:64[mem[R8 + 0x34, el]:u32]
000003b9: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003be: R8 := 0x11000
000003c5: R8 := pad:64[mem[R8 + 0x38, el]:u32]
000003cb: #6 := 31:0[R8] + 0
000003d0: VF := extend:33[#6] <> extend:33[31:0[R8]] + 0
000003d5: CF := pad:33[#6] <> pad:33[31:0[R8]] - 0x100000000
000003d9: ZF := #6 = 0
000003dd: NF := 31:31[#6]
000003e1: R8 := pad:64[#6]
000003ed: when ZF <> 1 goto %000003e6
000003ee: goto %000003e9

000003e9:
000003ea: R8 := 1
000003f0: goto %000003ec

000003e6:
000003e7: R8 := 0
000003ef: goto %000003ec

000003ec:
000003f6: when 0:0[R8] goto %000003f4
00000850: goto %00000560

00000560:
00000563: goto %00000561

00000561:
00000569: mem := mem with [R31 + 8, el]:u32 <- 0
0000056d: goto %000003f4

000003f4:
000003fe: R0 := pad:64[mem[R31 + 8, el]:u32]
00000404: R31 := R31 + 0x10
00000409: call R30 with noreturn

00000851: sub register_tm_clones(register_tm_clones_result)
00000867: register_tm_clones_result :: out u32 = low:32[R0]

000002e7:
000002ea: R0 := 0x11000
000002f0: R0 := R0 + 0x30
000002f5: R1 := 0x11000
000002fb: R1 := R1 + 0x30
00000302: R1 := R1 + ~R0 + 1
00000309: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000310: R1 := R2 + (R1 ~>> 3)
00000316: #3 := ~(R1 ~>> 1)
0000031a: #4 := ~(R1 ~>> 1) + 1
0000031f: VF := extend:65[#4] <> extend:65[#3] + 1
00000324: CF := pad:65[#4] <> pad:65[#3] + 1
00000328: ZF := #4 = 0
0000032c: NF := 63:63[#4]
00000334: R1 :=

          >> 1 | R1 << 0x3F]
0000033a: when ZF goto %00000338
00000852: goto %000005aa

000005aa:
000005ad: R2 := 0x10000
000005b4: R2 := mem[R2 + 0xFE0, el]:u64
000005b9: when R2 = 0 goto %00000338
00000853: goto %000005bd

00000338:
00000340: call R30 with noreturn

000005bd:
000005c1: R16 := R2
000005c6: call R16 with noreturn
