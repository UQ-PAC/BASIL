000007d7: program
000007bc: sub __cxa_finalize(__cxa_finalize_result)
000007d8: __cxa_finalize_result :: out u32 = low:32[R0]

0000053a:
0000061b: R16 := 0x10000
00000622: R17 := mem[R16 + 0xFA0, el]:u64
00000628: R16 := R16 + 0xFA0
0000062d: call R17 with noreturn

000007bd: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000007d9: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000324:
00000328: #5 := R31 - 0x20
0000032e: mem := mem with [#5, el]:u64 <- R29
00000334: mem := mem with [#5 + 8, el]:u64 <- R30
00000338: R31 := #5
0000033e: R29 := R31
00000346: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000034b: R19 := 0x11000
00000352: R0 := pad:64[mem[R19 + 0x10]]
00000359: when 31:0[R0] <> 0 goto %00000357
000007be: goto %00000503

00000503:
00000506: R0 := 0x10000
0000050d: R0 := mem[R0 + 0xFD8, el]:u64
00000513: when R0 = 0 goto %00000511
000007bf: goto %0000052a

0000052a:
0000052d: R0 := 0x11000
00000534: R0 := mem[R0 + 8, el]:u64
00000539: R30 := 0x700
0000053c: call @__cxa_finalize with return %00000511

00000511:
00000519: R30 := 0x704
0000051b: call @deregister_tm_clones with return %0000051d

0000051d:
00000520: R0 := 1
00000528: mem := mem with [R19 + 0x10] <- 7:0[R0]
000007c0: goto %00000357

00000357:
00000361: R19 := mem[R31 + 0x10, el]:u64
00000368: R29 := mem[R31, el]:u64
0000036d: R30 := mem[R31 + 8, el]:u64
00000371: R31 := R31 + 0x20
00000376: call R30 with noreturn

000007c1: sub __libc_csu_fini(__libc_csu_fini_result)
000007da: __libc_csu_fini_result :: out u32 = low:32[R0]

000004a3:
000004a6: call R30 with noreturn

000007c2: sub __libc_csu_init(__libc_csu_init_result)
000007db: __libc_csu_init_result :: out u32 = low:32[R0]

000003b0:
000003b4: #6 := R31 - 0x40
000003ba: mem := mem with [#6, el]:u64 <- R29
000003c0: mem := mem with [#6 + 8, el]:u64 <- R30
000003c4: R31 := #6
000003ca: R29 := R31
000003d0: #7 := R31 + 0x10
000003d6: mem := mem with [#7, el]:u64 <- R19
000003dc: mem := mem with [#7 + 8, el]:u64 <- R20
000003e1: R20 := 0x10000
000003e7: R20 := R20 + 0xD90
000003ed: #8 := R31 + 0x20
000003f3: mem := mem with [#8, el]:u64 <- R21
000003f9: mem := mem with [#8 + 8, el]:u64 <- R22
000003fe: R21 := 0x10000
00000404: R21 := R21 + 0xD88
0000040b: R20 := R20 + ~R21 + 1
00000411: R22 := pad:64[31:0[R0]]
00000417: #9 := R31 + 0x30
0000041d: mem := mem with [#9, el]:u64 <- R23
00000423: mem := mem with [#9 + 8, el]:u64 <- R24
00000429: R23 := R1
0000042f: R24 := R2
00000434: R30 := 0x778
00000437: call @_init with return %00000439

00000439:
0000043d: #10 := ~(R20 ~>> 3)
00000441: #11 := ~(R20 ~>> 3) + 1
00000446: VF := extend:65[#11] <> extend:65[#10] + 1
0000044b: CF := pad:65[#11] <> pad:65[#10] + 1
0000044f: ZF := #11 = 0
00000453: NF := 63:63[#11]
00000459: when ZF goto %00000457
000007c3: goto %000004a8

000004a8:
000004ae: R20 :=

          >> 3 | R20 << 0x3D]
000004b3: R19 := 0
000007c4: goto %000004b5

000004b5:
000004bb: R3 := mem[R21 + (60:0[R19].0), el]:u64
000004c1: R2 := R24
000004c7: R19 := R19 + 1
000004cd: R1 := R23
000004d3: R0 := pad:64[31:0[R22]]
000004d8: R30 := 0x7A0
000004db: call R3 with return %000004dd

000004dd:
000004e1: #15 := ~R19
000004e6: #16 := R20 + ~R19 + 1
000004ec: VF := extend:65[#16] <> extend:65[R20] + extend:65[#15] + 1
000004f2: CF := pad:65[#16] <> pad:65[R20] + pad:65[#15] + 1
000004f6: ZF := #16 = 0
000004fa: NF := 63:63[#16]
000004ff: when ZF <> 1 goto %000004b5
000007c5: goto %00000457

00000457:
00000460: #12 := R31 + 0x10
00000465: R19 := mem[#12, el]:u64
0000046a: R20 := mem[#12 + 8, el]:u64
00000470: #13 := R31 + 0x20
00000475: R21 := mem[#13, el]:u64
0000047a: R22 := mem[#13 + 8, el]:u64
00000480: #14 := R31 + 0x30
00000485: R23 := mem[#14, el]:u64
0000048a: R24 := mem[#14 + 8, el]:u64
00000491: R29 := mem[R31, el]:u64
00000496: R30 := mem[R31 + 8, el]:u64
0000049a: R31 := R31 + 0x40
0000049f: call R30 with noreturn

000007c6: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000007dc: __libc_start_main_main :: in u64 = R0
000007dd: __libc_start_main_arg2 :: in u32 = low:32[R1]
000007de: __libc_start_main_arg3 :: in out u64 = R2
000007df: __libc_start_main_auxv :: in out u64 = R3
000007e0: __libc_start_main_result :: out u32 = low:32[R0]

00000262:
00000631: R16 := 0x10000
00000638: R17 := mem[R16 + 0xFA8, el]:u64
0000063e: R16 := R16 + 0xFA8
00000643: call R17 with noreturn

000007c7: sub _fini(_fini_result)
000007e1: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

000007c8: sub _init(_init_result)
000007e2: _init_result :: out u32 = low:32[R0]

00000435:
000006fd: #18 := R31 - 0x10
00000703: mem := mem with [#18, el]:u64 <- R29
00000709: mem := mem with [#18 + 8, el]:u64 <- R30
0000070d: R31 := #18
00000713: R29 := R31
00000718: R30 := 0x5A4
0000071a: call @call_weak_fn with return %0000071c

0000071c:
00000721: R29 := mem[R31, el]:u64
00000726: R30 := mem[R31 + 8, el]:u64
0000072a: R31 := R31 + 0x10
0000072f: call R30 with noreturn

000007c9: sub _start(_start_result)
000007e3: _start_result :: out u32 = low:32[R0]

00000217:
0000021a: R29 := 0
0000021f: R30 := 0
00000225: R5 := R0
0000022c: R1 := mem[R31, el]:u64
00000232: R2 := R31 + 8
00000238: R6 := R31
0000023d: R0 := 0x10000
00000244: R0 := mem[R0 + 0xFF0, el]:u64
00000249: R3 := 0x10000
00000250: R3 := mem[R3 + 0xFE8, el]:u64
00000255: R4 := 0x10000
0000025c: R4 := mem[R4 + 0xFC8, el]:u64
00000261: R30 := 0x644
00000264: call @__libc_start_main with return %00000266

00000266:
00000269: R30 := 0x648
0000026c: call @abort with return %000007ca

000007ca:
000007cb: call @call_weak_fn with noreturn

000007cc: sub abort()


0000026a:
0000065d: R16 := 0x10000
00000664: R17 := mem[R16 + 0xFB8, el]:u64
0000066a: R16 := R16 + 0xFB8
0000066f: call R17 with noreturn

000007cd: sub call_weak_fn(call_weak_fn_result)
000007e4: call_weak_fn_result :: out u32 = low:32[R0]

0000026e:
00000271: R0 := 0x10000
00000278: R0 := mem[R0 + 0xFE0, el]:u64
0000027e: when R0 = 0 goto %0000027c
000007ce: goto %0000057a

0000027c:
00000284: call R30 with noreturn

0000057a:
0000057d: goto @__gmon_start__

0000057b:
00000647: R16 := 0x10000
0000064e: R17 := mem[R16 + 0xFB0, el]:u64
00000654: R16 := R16 + 0xFB0
00000659: call R17 with noreturn

000007cf: sub deregister_tm_clones(deregister_tm_clones_result)
000007e5: deregister_tm_clones_result :: out u32 = low:32[R0]

00000288:
0000028b: R0 := 0x11000
00000291: R0 := R0 + 0x10
00000296: R1 := 0x11000
0000029c: R1 := R1 + 0x10
000002a2: #1 := ~R0
000002a7: #2 := R1 + ~R0 + 1
000002ad: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002b3: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002b7: ZF := #2 = 0
000002bb: NF := 63:63[#2]
000002c1: when ZF goto %000002bf
000007d0: goto %0000055c

0000055c:
0000055f: R1 := 0x10000
00000566: R1 := mem[R1 + 0xFD0, el]:u64
0000056b: when R1 = 0 goto %000002bf
000007d1: goto %0000056f

000002bf:
000002c7: call R30 with noreturn

0000056f:
00000573: R16 := R1
00000578: call R16 with noreturn

000007d2: sub frame_dummy(frame_dummy_result)
000007e6: frame_dummy_result :: out u32 = low:32[R0]

00000378:
0000037a: call @register_tm_clones with noreturn

000007d3: sub main(main_argc, main_argv, main_result)
000007e7: main_argc :: in u32 = low:32[R0]
000007e8: main_argv :: in out u64 = R1
000007e9: main_result :: out u32 = low:32[R0]

0000037c:
0000037f: R0 := 0x11000
00000385: R0 := R0 + 0x18
0000038a: R1 := 1
00000392: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000397: R0 := 0x11000
0000039d: R0 := R0 + 0x14
000003a4: mem := mem with [R0, el]:u32 <- 0
000003a9: R0 := 0
000003ae: call R30 with noreturn

000007d4: sub register_tm_clones(register_tm_clones_result)
000007ea: register_tm_clones_result :: out u32 = low:32[R0]

000002c9:
000002cc: R0 := 0x11000
000002d2: R0 := R0 + 0x10
000002d7: R1 := 0x11000
000002dd: R1 := R1 + 0x10
000002e4: R1 := R1 + ~R0 + 1
000002eb: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
000002f2: R1 := R2 + (R1 ~>> 3)
000002f8: #3 := ~(R1 ~>> 1)
000002fc: #4 := ~(R1 ~>> 1) + 1
00000301: VF := extend:65[#4] <> extend:65[#3] + 1
00000306: CF := pad:65[#4] <> pad:65[#3] + 1
0000030a: ZF := #4 = 0
0000030e: NF := 63:63[#4]
00000316: R1 :=

          >> 1 | R1 << 0x3F]
0000031c: when ZF goto %0000031a
000007d5: goto %0000053e

0000053e:
00000541: R2 := 0x10000
00000548: R2 := mem[R2 + 0xFF8, el]:u64
0000054d: when R2 = 0 goto %0000031a
000007d6: goto %00000551

0000031a:
00000322: call R30 with noreturn

00000551:
00000555: R16 := R2
0000055a: call R16 with noreturn
