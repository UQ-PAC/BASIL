00000706: program
000006ee: sub .plt(\.plt_result)
00000707: \.plt_result :: out u32 = low:32[R0]

0000057e:
00000582: #5 := R31 - 0x10
00000588: mem := mem with [#5, el]:u64 <- R16
0000058e: mem := mem with [#5 + 8, el]:u64 <- R30
00000592: R31 := #5
00000597: R16 := 0x10000
0000059e: R17 := mem[R16 + 0xF90, el]:u64
000005a4: R16 := R16 + 0xF90
000005a9: call R17 with noreturn

000006ef: sub __cxa_finalize(__cxa_finalize_result)
00000708: __cxa_finalize_result :: out u32 = low:32[R0]

000004d1:
000005c9: R16 := 0x10000
000005d0: R17 := mem[R16 + 0xFA0, el]:u64
000005d6: R16 := R16 + 0xFA0
000005db: call R17 with noreturn

000006f0: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000709: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000302:
00000306: #3 := R31 - 0x20
0000030c: mem := mem with [#3, el]:u64 <- R29
00000312: mem := mem with [#3 + 8, el]:u64 <- R30
00000316: R31 := #3
0000031c: R29 := R31
00000324: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000329: R19 := 0x11000
00000330: R0 := pad:64[mem[R19 + 0x10]]
00000337: when 31:0[R0] <> 0 goto %00000335
000006f1: goto %0000049a

0000049a:
0000049d: R0 := 0x10000
000004a4: R0 := mem[R0 + 0xFC8, el]:u64
000004aa: when R0 = 0 goto %000004a8
000006f2: goto %000004c1

000004c1:
000004c4: R0 := 0x11000
000004cb: R0 := mem[R0 + 8, el]:u64
000004d0: R30 := 0x7B0
000004d3: call @__cxa_finalize with return %000004a8

000004a8:
000004b0: R30 := 0x7B4
000004b2: call @deregister_tm_clones with return %000004b4

000004b4:
000004b7: R0 := 1
000004bf: mem := mem with [R19 + 0x10] <- 7:0[R0]
000006f3: goto %00000335

00000335:
0000033f: R19 := mem[R31 + 0x10, el]:u64
00000346: R29 := mem[R31, el]:u64
0000034b: R30 := mem[R31 + 8, el]:u64
0000034f: R31 := R31 + 0x20
00000354: call R30 with noreturn

000006f4: sub __gmon_start__(__gmon_start___result)
0000070a: __gmon_start___result :: out u32 = low:32[R0]

00000512:
000005df: R16 := 0x10000
000005e6: R17 := mem[R16 + 0xFA8, el]:u64
000005ec: R16 := R16 + 0xFA8
000005f1: call R17 with noreturn

000006f5: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000070b: __libc_start_main_main :: in u64 = R0
0000070c: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000070d: __libc_start_main_arg3 :: in out u64 = R2
0000070e: __libc_start_main_auxv :: in out u64 = R3
0000070f: __libc_start_main_result :: out u32 = low:32[R0]

0000025b:
000005b3: R16 := 0x10000
000005ba: R17 := mem[R16 + 0xF98, el]:u64
000005c0: R16 := R16 + 0xF98
000005c5: call R17 with noreturn

000006f6: sub _fini(_fini_result)
00000710: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000006f7: sub _init(_init_result)
00000711: _init_result :: out u32 = low:32[R0]

00000623:
00000629: #6 := R31 - 0x10
0000062f: mem := mem with [#6, el]:u64 <- R29
00000635: mem := mem with [#6 + 8, el]:u64 <- R30
00000639: R31 := #6
0000063f: R29 := R31
00000644: R30 := 0x638
00000646: call @call_weak_fn with return %00000648

00000648:
0000064d: R29 := mem[R31, el]:u64
00000652: R30 := mem[R31 + 8, el]:u64
00000656: R31 := R31 + 0x10
0000065b: call R30 with noreturn

000006f8: sub _start(_start_result)
00000712: _start_result :: out u32 = low:32[R0]

0000021c:
00000221: R29 := 0
00000226: R30 := 0
0000022c: R5 := R0
00000233: R1 := mem[R31, el]:u64
00000239: R2 := R31 + 8
0000023f: R6 := R31
00000244: R0 := 0x10000
0000024b: R0 := mem[R0 + 0xFE8, el]:u64
00000250: R3 := 0
00000255: R4 := 0
0000025a: R30 := 0x6F0
0000025d: call @__libc_start_main with return %0000025f

0000025f:
00000262: R30 := 0x6F4
00000265: call @abort with return %000006f9

000006f9:
000006fa: call @call_weak_fn with noreturn

000006fb: sub abort()


00000263:
000005f5: R16 := 0x10000
000005fc: R17 := mem[R16 + 0xFB0, el]:u64
00000602: R16 := R16 + 0xFB0
00000607: call R17 with noreturn

000006fc: sub call_weak_fn(call_weak_fn_result)
00000713: call_weak_fn_result :: out u32 = low:32[R0]

00000267:
0000026a: R0 := 0x10000
00000271: R0 := mem[R0 + 0xFD8, el]:u64
00000277: when R0 = 0 goto %00000275
000006fd: goto %00000511

00000275:
0000027d: call R30 with noreturn

00000511:
00000514: call @__gmon_start__ with noreturn

000006fe: sub deregister_tm_clones(deregister_tm_clones_result)
00000714: deregister_tm_clones_result :: out u32 = low:32[R0]

00000283:
00000286: R0 := 0x11000
0000028c: R0 := R0 + 0x10
00000291: R1 := 0x11000
00000297: R1 := R1 + 0x10
0000029d: #1 := ~R0
000002a2: #2 := R1 + ~R0
000002a8: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002ae: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002b2: ZF := #2 + 1 = 0
000002b6: NF := 63:63[#2 + 1]
000002bc: when ZF goto %000002ba
000006ff: goto %000004f3

000004f3:
000004f6: R1 := 0x10000
000004fd: R1 := mem[R1 + 0xFC0, el]:u64
00000502: when R1 = 0 goto %000002ba
00000700: goto %00000506

000002ba:
000002c2: call R30 with noreturn

00000506:
0000050a: R16 := R1
0000050f: call R16 with noreturn

00000701: sub frame_dummy(frame_dummy_result)
00000715: frame_dummy_result :: out u32 = low:32[R0]

0000035a:
0000035c: call @register_tm_clones with noreturn

00000702: sub main(main_argc, main_argv, main_result)
00000716: main_argc :: in u32 = low:32[R0]
00000717: main_argv :: in out u64 = R1
00000718: main_result :: out u32 = low:32[R0]

0000035e:
00000362: #4 := R31 - 0x20
00000368: mem := mem with [#4, el]:u64 <- R29
0000036e: mem := mem with [#4 + 8, el]:u64 <- R30
00000372: R31 := #4
00000378: R29 := R31
0000037d: R0 := 1
00000382: R1 := 0x10000
00000389: R1 := mem[R1 + 0xFD0, el]:u64
0000038e: R30 := 0x7EC
00000391: call R1 with return %00000393

00000393:
00000399: mem := mem with [R31 + 0x10, el]:u64 <- R0
0000039e: R0 := 4
000003a3: R1 := 0x10000
000003aa: R1 := mem[R1 + 0xFD0, el]:u64
000003af: R30 := 0x800
000003b2: call R1 with return %000003b4

000003b4:
000003ba: mem := mem with [R31 + 0x18, el]:u64 <- R0
000003c1: R0 := mem[R31 + 0x10, el]:u64
000003c6: R1 := 0x41
000003ce: mem := mem with [R0] <- 7:0[R1]
000003d5: R0 := mem[R31 + 0x18, el]:u64
000003da: R1 := 0x2A
000003e2: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003e9: R0 := mem[R31 + 0x10, el]:u64
000003f0: R0 := pad:64[mem[R0]]
000003f6: R1 := pad:64[31:0[R0]]
000003fb: R0 := 0
00000401: R0 := R0 + 0x8A8
00000406: R2 := 0x10000
0000040d: R2 := mem[R2 + 0xFF8, el]:u64
00000412: R30 := 0x83C
00000415: call R2 with return %00000417

00000417:
0000041c: R0 := mem[R31 + 0x18, el]:u64
00000423: R0 := pad:64[mem[R0, el]:u32]
00000429: R1 := pad:64[31:0[R0]]
0000042e: R0 := 0
00000434: R0 := R0 + 0x8C0
00000439: R2 := 0x10000
00000440: R2 := mem[R2 + 0xFF8, el]:u64
00000445: R30 := 0x85C
00000448: call R2 with return %0000044a

0000044a:
0000044f: R0 := mem[R31 + 0x10, el]:u64
00000454: R1 := 0x10000
0000045b: R1 := mem[R1 + 0xFE0, el]:u64
00000460: R30 := 0x86C
00000463: call R1 with return %00000465

00000465:
0000046a: R0 := mem[R31 + 0x18, el]:u64
0000046f: R1 := 0x10000
00000476: R1 := mem[R1 + 0xFE0, el]:u64
0000047b: R30 := 0x87C
0000047e: call R1 with return %00000480

00000480:
00000483: R0 := 0
0000048a: R29 := mem[R31, el]:u64
0000048f: R30 := mem[R31 + 8, el]:u64
00000493: R31 := R31 + 0x20
00000498: call R30 with noreturn

00000703: sub register_tm_clones(register_tm_clones_result)
00000719: register_tm_clones_result :: out u32 = low:32[R0]

000002c4:
000002c7: R0 := 0x11000
000002cd: R0 := R0 + 0x10
000002d2: R1 := 0x11000
000002d8: R1 := R1 + 0x10
000002df: R1 := R1 + ~R0 + 1
000002e5: R2 := 0.63:63[R1]
000002ec: R1 := R2 + (R1 ~>> 3)
000002f2: R1 := extend:64[63:1[R1]]
000002f8: when R1 = 0 goto %000002f6
00000704: goto %000004d5

000004d5:
000004d8: R2 := 0x10000
000004df: R2 := mem[R2 + 0xFF0, el]:u64
000004e4: when R2 = 0 goto %000002f6
00000705: goto %000004e8

000002f6:
000002fe: call R30 with noreturn

000004e8:
000004ec: R16 := R2
000004f1: call R16 with noreturn
