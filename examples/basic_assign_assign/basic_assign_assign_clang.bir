000007a7: program
0000078c: sub __cxa_finalize(__cxa_finalize_result)
000007a8: __cxa_finalize_result :: out u32 = low:32[R0]

00000512:
000005f3: R16 := 0x11000
000005fa: R17 := mem[R16, el]:u64
00000600: R16 := R16
00000605: call R17 with noreturn

0000078d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000007a9: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000314:
00000318: #5 := R31 - 0x20
0000031e: mem := mem with [#5, el]:u64 <- R29
00000324: mem := mem with [#5 + 8, el]:u64 <- R30
00000328: R31 := #5
0000032e: R29 := R31
00000336: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000033b: R19 := 0x11000
00000342: R0 := pad:64[mem[R19 + 0x30]]
00000349: when 31:0[R0] <> 0 goto %00000347
0000078e: goto %000004db

000004db:
000004de: R0 := 0x10000
000004e5: R0 := mem[R0 + 0xFC0, el]:u64
000004eb: when R0 = 0 goto %000004e9
0000078f: goto %00000502

00000502:
00000505: R0 := 0x11000
0000050c: R0 := mem[R0 + 0x28, el]:u64
00000511: R30 := 0x700
00000514: call @__cxa_finalize with return %000004e9

000004e9:
000004f1: R30 := 0x704
000004f3: call @deregister_tm_clones with return %000004f5

000004f5:
000004f8: R0 := 1
00000500: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000790: goto %00000347

00000347:
00000351: R19 := mem[R31 + 0x10, el]:u64
00000358: R29 := mem[R31, el]:u64
0000035d: R30 := mem[R31 + 8, el]:u64
00000361: R31 := R31 + 0x20
00000366: call R30 with noreturn

00000791: sub __libc_csu_fini(__libc_csu_fini_result)
000007aa: __libc_csu_fini_result :: out u32 = low:32[R0]

0000047b:
0000047e: call R30 with noreturn

00000792: sub __libc_csu_init(__libc_csu_init_result)
000007ab: __libc_csu_init_result :: out u32 = low:32[R0]

00000388:
0000038c: #6 := R31 - 0x40
00000392: mem := mem with [#6, el]:u64 <- R29
00000398: mem := mem with [#6 + 8, el]:u64 <- R30
0000039c: R31 := #6
000003a2: R29 := R31
000003a8: #7 := R31 + 0x10
000003ae: mem := mem with [#7, el]:u64 <- R19
000003b4: mem := mem with [#7 + 8, el]:u64 <- R20
000003b9: R20 := 0x10000
000003bf: R20 := R20 + 0xDC0
000003c5: #8 := R31 + 0x20
000003cb: mem := mem with [#8, el]:u64 <- R21
000003d1: mem := mem with [#8 + 8, el]:u64 <- R22
000003d6: R21 := 0x10000
000003dc: R21 := R21 + 0xDB8
000003e3: R20 := R20 + ~R21 + 1
000003e9: R22 := pad:64[31:0[R0]]
000003ef: #9 := R31 + 0x30
000003f5: mem := mem with [#9, el]:u64 <- R23
000003fb: mem := mem with [#9 + 8, el]:u64 <- R24
00000401: R23 := R1
00000407: R24 := R2
0000040c: R30 := 0x768
0000040f: call @_init with return %00000411

00000411:
00000415: #10 := ~(R20 ~>> 3)
00000419: #11 := ~(R20 ~>> 3) + 1
0000041e: VF := extend:65[#11] <> extend:65[#10] + 1
00000423: CF := pad:65[#11] <> pad:65[#10] + 1
00000427: ZF := #11 = 0
0000042b: NF := 63:63[#11]
00000431: when ZF goto %0000042f
00000793: goto %00000480

00000480:
00000486: R20 :=

          >> 3 | R20 << 0x3D]
0000048b: R19 := 0
00000794: goto %0000048d

0000048d:
00000493: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000499: R2 := R24
0000049f: R19 := R19 + 1
000004a5: R1 := R23
000004ab: R0 := pad:64[31:0[R22]]
000004b0: R30 := 0x790
000004b3: call R3 with return %000004b5

000004b5:
000004b9: #15 := ~R19
000004be: #16 := R20 + ~R19 + 1
000004c4: VF := extend:65[#16] <> extend:65[R20] + extend:65[#15] + 1
000004ca: CF := pad:65[#16] <> pad:65[R20] + pad:65[#15] + 1
000004ce: ZF := #16 = 0
000004d2: NF := 63:63[#16]
000004d7: when ZF <> 1 goto %0000048d
00000795: goto %0000042f

0000042f:
00000438: #12 := R31 + 0x10
0000043d: R19 := mem[#12, el]:u64
00000442: R20 := mem[#12 + 8, el]:u64
00000448: #13 := R31 + 0x20
0000044d: R21 := mem[#13, el]:u64
00000452: R22 := mem[#13 + 8, el]:u64
00000458: #14 := R31 + 0x30
0000045d: R23 := mem[#14, el]:u64
00000462: R24 := mem[#14 + 8, el]:u64
00000469: R29 := mem[R31, el]:u64
0000046e: R30 := mem[R31 + 8, el]:u64
00000472: R31 := R31 + 0x40
00000477: call R30 with noreturn

00000796: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000007ac: __libc_start_main_main :: in u64 = R0
000007ad: __libc_start_main_arg2 :: in u32 = low:32[R1]
000007ae: __libc_start_main_arg3 :: in out u64 = R2
000007af: __libc_start_main_auxv :: in out u64 = R3
000007b0: __libc_start_main_result :: out u32 = low:32[R0]

00000252:
00000609: R16 := 0x11000
00000610: R17 := mem[R16 + 8, el]:u64
00000616: R16 := R16 + 8
0000061b: call R17 with noreturn

00000797: sub _fini(_fini_result)
000007b1: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

00000798: sub _init(_init_result)
000007b2: _init_result :: out u32 = low:32[R0]

0000040d:
000006d1: #18 := R31 - 0x10
000006d7: mem := mem with [#18, el]:u64 <- R29
000006dd: mem := mem with [#18 + 8, el]:u64 <- R30
000006e1: R31 := #18
000006e7: R29 := R31
000006ec: R30 := 0x5A4
000006ee: call @call_weak_fn with return %000006f0

000006f0:
000006f5: R29 := mem[R31, el]:u64
000006fa: R30 := mem[R31 + 8, el]:u64
000006fe: R31 := R31 + 0x10
00000703: call R30 with noreturn

00000799: sub _start(_start_result)
000007b3: _start_result :: out u32 = low:32[R0]

00000207:
0000020a: R29 := 0
0000020f: R30 := 0
00000215: R5 := R0
0000021c: R1 := mem[R31, el]:u64
00000222: R2 := R31 + 8
00000228: R6 := R31
0000022d: R0 := 0x10000
00000234: R0 := mem[R0 + 0xFD8, el]:u64
00000239: R3 := 0x10000
00000240: R3 := mem[R3 + 0xFD0, el]:u64
00000245: R4 := 0x10000
0000024c: R4 := mem[R4 + 0xFB0, el]:u64
00000251: R30 := 0x644
00000254: call @__libc_start_main with return %00000256

00000256:
00000259: R30 := 0x648
0000025c: call @abort with return %0000079a

0000079a:
0000079b: call @call_weak_fn with noreturn

0000079c: sub abort()


0000025a:
00000635: R16 := 0x11000
0000063c: R17 := mem[R16 + 0x18, el]:u64
00000642: R16 := R16 + 0x18
00000647: call R17 with noreturn

0000079d: sub call_weak_fn(call_weak_fn_result)
000007b4: call_weak_fn_result :: out u32 = low:32[R0]

0000025e:
00000261: R0 := 0x10000
00000268: R0 := mem[R0 + 0xFC8, el]:u64
0000026e: when R0 = 0 goto %0000026c
0000079e: goto %00000552

0000026c:
00000274: call R30 with noreturn

00000552:
00000555: goto @__gmon_start__

00000553:
0000061f: R16 := 0x11000
00000626: R17 := mem[R16 + 0x10, el]:u64
0000062c: R16 := R16 + 0x10
00000631: call R17 with noreturn

0000079f: sub deregister_tm_clones(deregister_tm_clones_result)
000007b5: deregister_tm_clones_result :: out u32 = low:32[R0]

00000278:
0000027b: R0 := 0x11000
00000281: R0 := R0 + 0x30
00000286: R1 := 0x11000
0000028c: R1 := R1 + 0x30
00000292: #1 := ~R0
00000297: #2 := R1 + ~R0 + 1
0000029d: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002a3: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002a7: ZF := #2 = 0
000002ab: NF := 63:63[#2]
000002b1: when ZF goto %000002af
000007a0: goto %00000534

00000534:
00000537: R1 := 0x10000
0000053e: R1 := mem[R1 + 0xFB8, el]:u64
00000543: when R1 = 0 goto %000002af
000007a1: goto %00000547

000002af:
000002b7: call R30 with noreturn

00000547:
0000054b: R16 := R1
00000550: call R16 with noreturn

000007a2: sub frame_dummy(frame_dummy_result)
000007b6: frame_dummy_result :: out u32 = low:32[R0]

00000368:
0000036a: call @register_tm_clones with noreturn

000007a3: sub main(main_argc, main_argv, main_result)
000007b7: main_argc :: in u32 = low:32[R0]
000007b8: main_argv :: in out u64 = R1
000007b9: main_result :: out u32 = low:32[R0]

0000036c:
0000036f: R9 := 0x11000
00000374: R8 := 5
0000037c: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
00000381: R0 := 0
00000386: call R30 with noreturn

000007a4: sub register_tm_clones(register_tm_clones_result)
000007ba: register_tm_clones_result :: out u32 = low:32[R0]

000002b9:
000002bc: R0 := 0x11000
000002c2: R0 := R0 + 0x30
000002c7: R1 := 0x11000
000002cd: R1 := R1 + 0x30
000002d4: R1 := R1 + ~R0 + 1
000002db: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
000002e2: R1 := R2 + (R1 ~>> 3)
000002e8: #3 := ~(R1 ~>> 1)
000002ec: #4 := ~(R1 ~>> 1) + 1
000002f1: VF := extend:65[#4] <> extend:65[#3] + 1
000002f6: CF := pad:65[#4] <> pad:65[#3] + 1
000002fa: ZF := #4 = 0
000002fe: NF := 63:63[#4]
00000306: R1 :=

          >> 1 | R1 << 0x3F]
0000030c: when ZF goto %0000030a
000007a5: goto %00000516

00000516:
00000519: R2 := 0x10000
00000520: R2 := mem[R2 + 0xFE0, el]:u64
00000525: when R2 = 0 goto %0000030a
000007a6: goto %00000529

0000030a:
00000312: call R30 with noreturn

00000529:
0000052d: R16 := R2
00000532: call R16 with noreturn
