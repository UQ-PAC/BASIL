var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2300bv64);
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvadd"} bvadd65(bv65, bv65) returns (bv65);
function {:bvbuiltin "bvand"} bvand1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp64(bv64, bv64) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp65(bv65, bv65) returns (bv1);
function {:bvbuiltin "bvlshr"} bvlshr64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:bvbuiltin "bvnot"} bvnot64(bv64) returns (bv64);
function {:bvbuiltin "bvor"} bvor64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvshl"} bvshl64(bv64, bv64) returns (bv64);
function gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "sign_extend 1"} sign_extend1_64(bv64) returns (bv65);
function {:bvbuiltin "sign_extend 32"} sign_extend32_32(bv32) returns (bv64);
function {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "zero_extend 1"} zero_extend1_64(bv64) returns (bv65);
function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
function {:bvbuiltin "zero_extend 57"} zero_extend57_7(bv7) returns (bv64);
function {:bvbuiltin "zero_extend 61"} zero_extend61_3(bv3) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure main(main_argc: bv32, Gamma_main_argc: bool, main_argv: bv64, Gamma_main_argv: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (main_argv_out: bv64, Gamma_main_argv_out: bool, main_result: bv32, Gamma_main_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
  requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  requires (memory_load8_le(mem, 69647bv64) == 0bv8);
{
  var #6: bv64;
  var #7: bv32;
  var #8: bv64;
  var #9: bv64;
  var CF: bv1;
  var Gamma_#6: bool;
  var Gamma_#7: bool;
  var Gamma_#8: bool;
  var Gamma_#9: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R2: bool;
  var Gamma_R29: bool;
  var Gamma_R3: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var R0: bv64;
  var R1: bv64;
  var R2: bv64;
  var R29: bv64;
  var R3: bv64;
  var R30: bv64;
  var R31: bv64;
  var VF: bv1;
  var ZF: bv1;
  R0, Gamma_R0 := zero_extend32_32(main_argc), Gamma_main_argc;
  R1, Gamma_R1 := main_argv, Gamma_main_argv;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lmain:
    #6, Gamma_#6 := bvadd64(R31, 18446744073709551552bv64), Gamma_R31;
    call rely();
    assert (L(mem, #6) ==> Gamma_R29);
    mem, Gamma_mem := memory_store64_le(mem, #6, R29), gamma_store64(Gamma_mem, #6, Gamma_R29);
    call rely();
    assert (L(mem, bvadd64(#6, 8bv64)) ==> Gamma_R30);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#6, 8bv64), R30), gamma_store64(Gamma_mem, bvadd64(#6, 8bv64), Gamma_R30);
    R31, Gamma_R31 := #6, Gamma_#6;
    R29, Gamma_R29 := R31, Gamma_R31;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    call rely();
    R1, Gamma_R1 := memory_load64_le(mem, R0), (gamma_load64(Gamma_mem, R0) || L(mem, R0));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 56bv64), R1), gamma_store64(Gamma_stack, bvadd64(R31, 56bv64), Gamma_R1);
    R1, Gamma_R1 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), true);
    goto l0000042a;
  l0000042a:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #7, Gamma_#7 := bvadd32(R0[32:0], 4294967292bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(#7), bvadd33(sign_extend1_32(R0[32:0]), 8589934588bv33))), (Gamma_R0 && Gamma_#7);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#7), bvadd33(zero_extend1_32(R0[32:0]), 4294967292bv33))), (Gamma_R0 && Gamma_#7);
    ZF, Gamma_ZF := bvcomp32(#7, 0bv32), Gamma_#7;
    NF, Gamma_NF := #7[32:31], Gamma_#7;
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvnot1(bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1))) != 0bv1)) {
      goto l00000450;
    }
    goto l0000048e;
  l0000048e:
    R0, Gamma_R0 := 0bv64, true;
    R1, Gamma_R1 := zero_extend32_32(R0[32:0]), Gamma_R0;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    R2, Gamma_R2 := memory_load64_le(stack, bvadd64(R31, 56bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 56bv64));
    call rely();
    R3, Gamma_R3 := memory_load64_le(mem, R0), (gamma_load64(Gamma_mem, R0) || L(mem, R0));
    #8, Gamma_#8 := bvnot64(R3), Gamma_R3;
    #9, Gamma_#9 := bvadd64(bvadd64(R2, bvnot64(R3)), 1bv64), (Gamma_R3 && Gamma_R2);
    VF, Gamma_VF := bvnot1(bvcomp65(sign_extend1_64(#9), bvadd65(bvadd65(sign_extend1_64(R2), sign_extend1_64(#8)), 1bv65))), (Gamma_#8 && (Gamma_R2 && Gamma_#9));
    CF, Gamma_CF := bvnot1(bvcomp65(zero_extend1_64(#9), bvadd65(bvadd65(zero_extend1_64(R2), zero_extend1_64(#8)), 1bv65))), (Gamma_#8 && (Gamma_R2 && Gamma_#9));
    ZF, Gamma_ZF := bvcomp64(#9, 0bv64), Gamma_#9;
    NF, Gamma_NF := #9[64:63], Gamma_#9;
    R2, Gamma_R2 := #9, Gamma_#9;
    R3, Gamma_R3 := 0bv64, true;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l000004dd;
    }
    goto l00000650;
  l00000650:
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4048bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4048bv64)) || L(mem, bvadd64(R0, 4048bv64)));
    R30, Gamma_R30 := 2140bv64, true;
    // UNRESOLVED: call R0
    assume false;
    goto l000004dd;
  l000004dd:
    R0, Gamma_R0 := zero_extend32_32(R1[32:0]), Gamma_R1;
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 64bv64), Gamma_R31;
    main_argv_out, Gamma_main_argv_out := R1, Gamma_R1;
    main_result, Gamma_main_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
  l00000450:
    R0, Gamma_R0 := sign_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    R0, Gamma_R0 := (bvor64(bvlshr64(R0, zero_extend57_7(62bv7)), bvshl64(R0, zero_extend61_3(2bv3)))[64:2] ++ 0bv2), Gamma_R0;
    R1, Gamma_R1 := bvadd64(R31, 32bv64), Gamma_R31;
    R2, Gamma_R2 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    call rely();
    assert (L(mem, bvadd64(R1, R0)) ==> Gamma_R2);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, R0), R2[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, R0), Gamma_R2);
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 1bv32)), Gamma_R0;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    goto l0000042a;
}
