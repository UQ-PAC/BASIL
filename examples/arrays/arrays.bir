000003a5: program
00000386: sub __cxa_finalize(__cxa_finalize_result)
000003a6: __cxa_finalize_result :: out u32 = R0

000002bd:
00000318: R16 := 0x10000
0000031c: R17 := mem[R16 + 0xF90, el]:u64
00000320: R16 := R16 + 0xF90
00000324: call R17 with noreturn

00000387: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000003a7: __do_global_dtors_aux_result :: out u32 = R0

000000d9:
000000db: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000dd: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000df: R31 := R31 - 0x20
000000e3: R29 := R31
000000e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000eb: R19 := 0x11000
000000ef: #28 := pad:64[mem[R19 + 0x10]]
000000f1: R0 := 0
000000f3: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
000000fc: #29 := extract:31:0[R0] <> 0
000000f8: when #29 goto %000000f6
00000388: goto %00000292

00000292:
00000294: R0 := 0x10000
00000298: R0 := mem[R0 + 0xFD0, el]:u64
000002a1: #104 := R0 = 0
0000029d: when #104 goto %0000029b
00000389: goto %000002b2

000002b2:
000002b4: R0 := 0x11000
000002b8: R0 := mem[R0 + 8, el]:u64
000002bc: R30 := 0x7D0
000002bf: call @__cxa_finalize with return %0000029b

0000029b:
000002a4: R30 := 0x7D4
000002a6: call @deregister_tm_clones with return %000002a8

000002a8:
000002aa: R0 := 0
000002ac: R0 := R0 & 0xFFFFFFFF00000000 | 1
000002b0: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
0000038a: goto %000000f6

000000f6:
000000ff: R19 := mem[R31 + 0x10, el]:u64
00000103: R29 := mem[R31, el]:u64
00000105: R30 := mem[R31 + 8, el]:u64
00000107: R31 := R31 + 0x20
0000010b: call R30 with noreturn

0000038b: sub __libc_csu_fini(__libc_csu_fini_result)
000003a8: __libc_csu_fini_result :: out u32 = R0

0000024b:
0000024d: call R30 with noreturn

0000038c: sub __libc_csu_init(__libc_csu_init_result)
000003a9: __libc_csu_init_result :: out u32 = R0

000001cd:
000001cf: mem := mem with [R31 - 0x40, el]:u64 <- R29
000001d1: mem := mem with [R31 - 0x38, el]:u64 <- R30
000001d3: R31 := R31 - 0x40
000001d7: R29 := R31
000001db: mem := mem with [R31, el]:u64 <- R31 + 0x20
000001dd: mem := mem with [R31, el]:u64 <- R31 + 0x28
000001e1: R20 := 0x10000
000001e5: R20 := R20 + 0xD70
000001e9: mem := mem with [R31, el]:u64 <- R31 + 0x40
000001eb: mem := mem with [R31, el]:u64 <- R31 + 0x48
000001ef: R21 := 0x10000
000001f3: R21 := R21 + 0xD68
000001f7: R20 := R20 - R21
000001fb: #69 := extract:31:0[R0]
000001fd: R22 := 0
000001ff: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#69]
00000203: mem := mem with [R31, el]:u64 <- R31 + 0x60
00000205: mem := mem with [R31, el]:u64 <- R31 + 0x68
00000209: R23 := R1
0000020d: R24 := R2
00000211: R30 := 0x8A8
00000214: call @_init with return %00000216

00000216:
00000218: #80 := ~(R20 ~>> 3) + 1
0000021a: NF := extract:63:63[#80]
0000021c: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#80]
0000021e: ZF := #80 = 0
00000220: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#80]
00000229: #82 := ZF
00000225: when #82 goto %00000223
0000038d: goto %00000250

00000250:
00000252: R20 := R20 >> 3
00000256: R19 := 0
0000038e: goto %00000258

00000258:
0000025a: R3 := mem[R21 + (R19 << 3), el]:u64
0000025e: R2 := R24
00000262: R19 := R19 + 1
00000266: R1 := R23
0000026a: #97 := extract:31:0[R22]
0000026c: R0 := 0
0000026e: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#97]
00000272: R30 := 0x8D0
00000274: call R3 with return %00000277

00000277:
00000279: #101 := 1 + ~R19 + R20
0000027b: NF := extract:63:63[#101]
0000027d: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#101] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#101]
0000027f: ZF := #101 = 0
00000281: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#101] | extract:63:63[R20] &
          ~extract:63:63[#101]
00000289: #103 := ~ZF <> 0
00000285: when #103 goto %00000258
0000038f: goto %00000223

00000223:
0000022c: R19 := mem[R31 + 0x10, el]:u64
0000022e: R20 := mem[R31 + 0x18, el]:u64
00000232: R21 := mem[R31 + 0x20, el]:u64
00000234: R22 := mem[R31 + 0x28, el]:u64
00000238: R23 := mem[R31 + 0x30, el]:u64
0000023a: R24 := mem[R31 + 0x38, el]:u64
0000023e: R29 := mem[R31, el]:u64
00000240: R30 := mem[R31 + 8, el]:u64
00000242: R31 := R31 + 0x40
00000246: call R30 with noreturn

00000390: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000003aa: __libc_start_main_main :: in u64 = R0
000003ab: __libc_start_main_arg2 :: in u32 = R1
000003ac: __libc_start_main_arg3 :: in out u64 = R2
000003ad: __libc_start_main_auxv :: in out u64 = R3
000003ae: __libc_start_main_result :: out u32 = R0

00000055:
00000328: R16 := 0x10000
0000032c: R17 := mem[R16 + 0xF98, el]:u64
00000330: R16 := R16 + 0xF98
00000334: call R17 with noreturn

00000391: sub __stack_chk_fail(__stack_chk_fail_result)
000003af: __stack_chk_fail_result :: out u32 = R0

0000028e:
00000338: R16 := 0x10000
0000033c: R17 := mem[R16 + 0xFA0, el]:u64
00000340: R16 := R16 + 0xFA0
00000344: call R17 with noreturn

00000392: sub _fini(_fini_result)
000003b0: _fini_result :: out u32 = R0

00000009:
0000000b: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000d: mem := mem with [R31 - 8, el]:u64 <- R30
0000000f: R31 := R31 - 0x10
00000013: R29 := R31
00000017: R29 := mem[R31, el]:u64
00000019: R30 := mem[R31 + 8, el]:u64
0000001b: R31 := R31 + 0x10
0000001f: call R30 with noreturn

00000393: sub _init(_init_result)
000003b1: _init_result :: out u32 = R0

00000212:
00000368: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000036a: mem := mem with [R31 - 8, el]:u64 <- R30
0000036c: R31 := R31 - 0x10
00000370: R29 := R31
00000374: R30 := 0x664
00000376: call @call_weak_fn with return %00000378

00000378:
0000037a: R29 := mem[R31, el]:u64
0000037c: R30 := mem[R31 + 8, el]:u64
0000037e: R31 := R31 + 0x10
00000382: call R30 with noreturn

00000394: sub _start(_start_result)
000003b2: _start_result :: out u32 = R0

00000022:
00000024: R29 := 0
00000028: R30 := 0
0000002c: R5 := R0
00000030: R1 := mem[R31, el]:u64
00000034: R2 := R31 + 8
00000038: R6 := R31
0000003c: R0 := 0x10000
00000040: R0 := mem[R0 + 0xFF0, el]:u64
00000044: R3 := 0x10000
00000048: R3 := mem[R3 + 0xFE8, el]:u64
0000004c: R4 := 0x10000
00000050: R4 := mem[R4 + 0xFC0, el]:u64
00000054: R30 := 0x714
00000057: call @__libc_start_main with return %00000059

00000059:
0000005b: R30 := 0x718
0000005e: call @abort with return %00000395

00000395:
00000396: call @call_weak_fn with noreturn

00000397: sub abort()


0000005c:
00000358: R16 := 0x10000
0000035c: R17 := mem[R16 + 0xFB0, el]:u64
00000360: R16 := R16 + 0xFB0
00000364: call R17 with noreturn

00000398: sub call_weak_fn(call_weak_fn_result)
000003b3: call_weak_fn_result :: out u32 = R0

00000060:
00000062: R0 := 0x10000
00000066: R0 := mem[R0 + 0xFD8, el]:u64
0000006f: #5 := R0 = 0
0000006b: when #5 goto %00000069
00000399: goto %000002f3

00000069:
00000072: call R30 with noreturn

000002f3:
000002f6: goto @__gmon_start__

000002f4:
00000348: R16 := 0x10000
0000034c: R17 := mem[R16 + 0xFA8, el]:u64
00000350: R16 := R16 + 0xFA8
00000354: call R17 with noreturn

0000039a: sub deregister_tm_clones(deregister_tm_clones_result)
000003b4: deregister_tm_clones_result :: out u32 = R0

00000077:
00000079: R0 := 0x11000
0000007d: R0 := R0 + 0x10
00000081: R1 := 0x11000
00000085: R1 := R1 + 0x10
00000089: #9 := 1 + ~R0 + R1
0000008b: NF := extract:63:63[#9]
0000008d: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
0000008f: ZF := #9 = 0
00000091: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
0000009a: #11 := ZF
00000096: when #11 goto %00000094
0000039b: goto %000002da

000002da:
000002dc: R1 := 0x10000
000002e0: R1 := mem[R1 + 0xFC8, el]:u64
000002e8: #110 := R1 = 0
000002e4: when #110 goto %00000094
0000039c: goto %000002ea

00000094:
0000009d: call R30 with noreturn

000002ea:
000002ec: R16 := R1
000002f0: call R16 with noreturn

0000039d: sub frame_dummy(frame_dummy_result)
000003b5: frame_dummy_result :: out u32 = R0

0000010e:
00000110: call @register_tm_clones with noreturn

0000039e: sub main(main_argc, main_argv, main_result)
000003b6: main_argc :: in u32 = R0
000003b7: main_argv :: in out u64 = R1
000003b8: main_result :: out u32 = R0

00000112:
00000114: mem := mem with [R31 - 0x40, el]:u64 <- R29
00000116: mem := mem with [R31 - 0x38, el]:u64 <- R30
00000118: R31 := R31 - 0x40
0000011c: R29 := R31
00000120: R0 := 0x10000
00000124: R0 := mem[R0 + 0xFE0, el]:u64
00000128: R1 := mem[R0, el]:u64
0000012c: mem := mem with [R31 + 0x38, el]:u64 <- R1
00000130: R1 := 0
00000134: mem := mem with [R31 + 0x1C, el]:u32 <- 0
00000139: goto %00000137

00000137:
0000013c: #34 := pad:64[mem[R31 + 0x1C, el]:u32]
0000013e: R0 := 0
00000140: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#34]
00000144: #35 := 0xFFFFFFFFFFFFFFFC + extend:64[extract:31:0[R0]]
00000146: NF := extract:63:63[#35]
00000148: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#35]
0000014a: ZF := #35 = 0
0000014c: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#35] |
          ~extract:63:63[#35]
00000155: #37 := (NF <> VF | ZF) <> 0
00000151: when #37 goto %0000014f
0000039f: goto %00000180

00000180:
00000182: R0 := 0
00000184: R0 := R0 & 0xFFFFFFFF00000000
00000188: #48 := extract:31:0[R0]
0000018a: R1 := 0
0000018c: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#48]
00000190: R0 := 0x10000
00000194: R0 := mem[R0 + 0xFE0, el]:u64
00000198: R2 := mem[R31 + 0x38, el]:u64
0000019c: R3 := mem[R0, el]:u64
000001a0: #52 := 1 + ~R3 + R2
000001a2: NF := extract:63:63[#52]
000001a4: VF := extract:63:63[R2] & extract:63:63[~R3] & ~extract:63:63[#52]
          | ~extract:63:63[R2] & ~extract:63:63[~R3] & extract:63:63[#52]
000001a6: ZF := #52 = 0
000001a8: CF := extract:63:63[R2] & extract:63:63[~R3] | extract:63:63[~R3] &
          ~extract:63:63[#52] | extract:63:63[R2] & ~extract:63:63[#52]
000001aa: R2 := #52
000001ae: R3 := 0
000001b7: #54 := ZF
000001b3: when #54 goto %000001b1
000003a0: goto %0000028b

0000028b:
0000028d: R30 := 0x864
00000290: call @__stack_chk_fail with return %000001b1

000001b1:
000001ba: #58 := extract:31:0[R1]
000001bc: R0 := 0
000001be: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#58]
000001c2: R29 := mem[R31, el]:u64
000001c4: R30 := mem[R31 + 8, el]:u64
000001c6: R31 := R31 + 0x40
000001ca: call R30 with noreturn

0000014f:
00000158: R0 := extend:64[mem[R31 + 0x1C, el]:u32]
0000015c: R0 := R0 << 2
00000160: R1 := R31 + 0x20
00000164: #40 := pad:64[mem[R31 + 0x1C, el]:u32]
00000166: R2 := 0
00000168: R2 := R2 & 0xFFFFFFFF00000000 | pad:64[#40]
0000016e: #41 := pad:64[mem[R31 + 0x1C, el]:u32]
00000170: R0 := 0
00000172: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#41]
00000176: #42 := extend:64[extract:31:0[R0]] + 1
00000178: R0 := 0
0000017a: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#42]
0000017e: mem := mem with [R31 + 0x1C, el]:u32 <- low:32[extract:31:0[R0]]
000003a1: goto %00000137

000003a2: sub register_tm_clones(register_tm_clones_result)
000003b9: register_tm_clones_result :: out u32 = R0

000000a0:
000000a2: R0 := 0x11000
000000a6: R0 := R0 + 0x10
000000aa: R1 := 0x11000
000000ae: R1 := R1 + 0x10
000000b2: R1 := R1 - R0
000000b6: R2 := R1 >> 0x3F
000000ba: R1 := R2 + (R1 ~>> 3)
000000be: #22 := ~(R1 ~>> 1) + 1
000000c0: NF := extract:63:63[#22]
000000c2: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000000c4: ZF := #22 = 0
000000c6: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000000ca: R1 := R1 >> 1
000000d3: #25 := ZF
000000cf: when #25 goto %000000cd
000003a3: goto %000002c1

000002c1:
000002c3: R2 := 0x10000
000002c7: R2 := mem[R2 + 0xFF8, el]:u64
000002cf: #106 := R2 = 0
000002cb: when #106 goto %000000cd
000003a4: goto %000002d1

000000cd:
000000d6: call R30 with noreturn

000002d1:
000002d3: R16 := R2
000002d7: call R16 with noreturn
