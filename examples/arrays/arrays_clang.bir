0000088e: program
00000872: sub __cxa_finalize(__cxa_finalize_result)
0000088f: __cxa_finalize_result :: out u32 = low:32[R0]

000005d8:
000006b9: R16 := 0x11000
000006c0: R17 := mem[R16, el]:u64
000006c6: R16 := R16
000006cb: call R17 with noreturn

00000873: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000890: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000354:
00000358: #5 := R31 - 0x20
0000035e: mem := mem with [#5, el]:u64 <- R29
00000364: mem := mem with [#5 + 8, el]:u64 <- R30
00000368: R31 := #5
0000036e: R29 := R31
00000376: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000037b: R19 := 0x11000
00000382: R0 := pad:64[mem[R19 + 0x30]]
00000389: when 31:0[R0] <> 0 goto %00000387
00000874: goto %000005a1

000005a1:
000005a4: R0 := 0x10000
000005ab: R0 := mem[R0 + 0xFC0, el]:u64
000005b1: when R0 = 0 goto %000005af
00000875: goto %000005c8

000005c8:
000005cb: R0 := 0x11000
000005d2: R0 := mem[R0 + 0x28, el]:u64
000005d7: R30 := 0x700
000005da: call @__cxa_finalize with return %000005af

000005af:
000005b7: R30 := 0x704
000005b9: call @deregister_tm_clones with return %000005bb

000005bb:
000005be: R0 := 1
000005c6: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000876: goto %00000387

00000387:
00000391: R19 := mem[R31 + 0x10, el]:u64
00000398: R29 := mem[R31, el]:u64
0000039d: R30 := mem[R31 + 8, el]:u64
000003a1: R31 := R31 + 0x20
000003a6: call R30 with noreturn

00000877: sub __libc_csu_fini(__libc_csu_fini_result)
00000891: __libc_csu_fini_result :: out u32 = low:32[R0]

00000503:
00000506: call R30 with noreturn

00000878: sub __libc_csu_init(__libc_csu_init_result)
00000892: __libc_csu_init_result :: out u32 = low:32[R0]

00000410:
00000414: #7 := R31 - 0x40
0000041a: mem := mem with [#7, el]:u64 <- R29
00000420: mem := mem with [#7 + 8, el]:u64 <- R30
00000424: R31 := #7
0000042a: R29 := R31
00000430: #8 := R31 + 0x10
00000436: mem := mem with [#8, el]:u64 <- R19
0000043c: mem := mem with [#8 + 8, el]:u64 <- R20
00000441: R20 := 0x10000
00000447: R20 := R20 + 0xDC0
0000044d: #9 := R31 + 0x20
00000453: mem := mem with [#9, el]:u64 <- R21
00000459: mem := mem with [#9 + 8, el]:u64 <- R22
0000045e: R21 := 0x10000
00000464: R21 := R21 + 0xDB8
0000046b: R20 := R20 + ~R21 + 1
00000471: R22 := pad:64[31:0[R0]]
00000477: #10 := R31 + 0x30
0000047d: mem := mem with [#10, el]:u64 <- R23
00000483: mem := mem with [#10 + 8, el]:u64 <- R24
00000489: R23 := R1
0000048f: R24 := R2
00000494: R30 := 0x7A8
00000497: call @_init with return %00000499

00000499:
0000049d: #11 := ~(R20 ~>> 3)
000004a1: #12 := ~(R20 ~>> 3) + 1
000004a6: VF := extend:65[#12] <> extend:65[#11] + 1
000004ab: CF := pad:65[#12] <> pad:65[#11] + 1
000004af: ZF := #12 = 0
000004b3: NF := 63:63[#12]
000004b9: when ZF goto %000004b7
00000879: goto %00000508

00000508:
0000050e: R20 :=

          >> 3 | R20 << 0x3D]
00000513: R19 := 0
0000087a: goto %00000515

00000515:
0000051b: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000521: R2 := R24
00000527: R19 := R19 + 1
0000052d: R1 := R23
00000533: R0 := pad:64[31:0[R22]]
00000538: R30 := 0x7D0
0000053b: call R3 with return %0000053d

0000053d:
00000541: #16 := ~R19
00000546: #17 := R20 + ~R19 + 1
0000054c: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
00000552: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
00000556: ZF := #17 = 0
0000055a: NF := 63:63[#17]
0000055f: when ZF <> 1 goto %00000515
0000087b: goto %000004b7

000004b7:
000004c0: #13 := R31 + 0x10
000004c5: R19 := mem[#13, el]:u64
000004ca: R20 := mem[#13 + 8, el]:u64
000004d0: #14 := R31 + 0x20
000004d5: R21 := mem[#14, el]:u64
000004da: R22 := mem[#14 + 8, el]:u64
000004e0: #15 := R31 + 0x30
000004e5: R23 := mem[#15, el]:u64
000004ea: R24 := mem[#15 + 8, el]:u64
000004f1: R29 := mem[R31, el]:u64
000004f6: R30 := mem[R31 + 8, el]:u64
000004fa: R31 := R31 + 0x40
000004ff: call R30 with noreturn

0000087c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000893: __libc_start_main_main :: in u64 = R0
00000894: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000895: __libc_start_main_arg3 :: in out u64 = R2
00000896: __libc_start_main_auxv :: in out u64 = R3
00000897: __libc_start_main_result :: out u32 = low:32[R0]

00000292:
000006cf: R16 := 0x11000
000006d6: R17 := mem[R16 + 8, el]:u64
000006dc: R16 := R16 + 8
000006e1: call R17 with noreturn

0000087d: sub _fini(_fini_result)
00000898: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

0000087e: sub _init(_init_result)
00000899: _init_result :: out u32 = low:32[R0]

00000495:
000007a7: #19 := R31 - 0x10
000007ad: mem := mem with [#19, el]:u64 <- R29
000007b3: mem := mem with [#19 + 8, el]:u64 <- R30
000007b7: R31 := #19
000007bd: R29 := R31
000007c2: R30 := 0x5A4
000007c4: call @call_weak_fn with return %000007c6

000007c6:
000007cb: R29 := mem[R31, el]:u64
000007d0: R30 := mem[R31 + 8, el]:u64
000007d4: R31 := R31 + 0x10
000007d9: call R30 with noreturn

0000087f: sub _start(_start_result)
0000089a: _start_result :: out u32 = low:32[R0]

00000247:
0000024a: R29 := 0
0000024f: R30 := 0
00000255: R5 := R0
0000025c: R1 := mem[R31, el]:u64
00000262: R2 := R31 + 8
00000268: R6 := R31
0000026d: R0 := 0x10000
00000274: R0 := mem[R0 + 0xFD8, el]:u64
00000279: R3 := 0x10000
00000280: R3 := mem[R3 + 0xFD0, el]:u64
00000285: R4 := 0x10000
0000028c: R4 := mem[R4 + 0xFB0, el]:u64
00000291: R30 := 0x644
00000294: call @__libc_start_main with return %00000296

00000296:
00000299: R30 := 0x648
0000029c: call @abort with return %00000880

00000880:
00000881: call @call_weak_fn with noreturn

00000882: sub abort()


0000029a:
000006fb: R16 := 0x11000
00000702: R17 := mem[R16 + 0x18, el]:u64
00000708: R16 := R16 + 0x18
0000070d: call R17 with noreturn

00000883: sub call_weak_fn(call_weak_fn_result)
0000089b: call_weak_fn_result :: out u32 = low:32[R0]

0000029e:
000002a1: R0 := 0x10000
000002a8: R0 := mem[R0 + 0xFC8, el]:u64
000002ae: when R0 = 0 goto %000002ac
00000884: goto %00000618

000002ac:
000002b4: call R30 with noreturn

00000618:
0000061b: goto @__gmon_start__

00000619:
000006e5: R16 := 0x11000
000006ec: R17 := mem[R16 + 0x10, el]:u64
000006f2: R16 := R16 + 0x10
000006f7: call R17 with noreturn

00000885: sub deregister_tm_clones(deregister_tm_clones_result)
0000089c: deregister_tm_clones_result :: out u32 = low:32[R0]

000002b8:
000002bb: R0 := 0x11000
000002c1: R0 := R0 + 0x30
000002c6: R1 := 0x11000
000002cc: R1 := R1 + 0x30
000002d2: #1 := ~R0
000002d7: #2 := R1 + ~R0 + 1
000002dd: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002e3: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002e7: ZF := #2 = 0
000002eb: NF := 63:63[#2]
000002f1: when ZF goto %000002ef
00000886: goto %000005fa

000005fa:
000005fd: R1 := 0x10000
00000604: R1 := mem[R1 + 0xFB8, el]:u64
00000609: when R1 = 0 goto %000002ef
00000887: goto %0000060d

000002ef:
000002f7: call R30 with noreturn

0000060d:
00000611: R16 := R1
00000616: call R16 with noreturn

00000888: sub frame_dummy(frame_dummy_result)
0000089d: frame_dummy_result :: out u32 = low:32[R0]

000003a8:
000003aa: call @register_tm_clones with noreturn

00000889: sub main(main_argc, main_argv, main_result)
0000089e: main_argc :: in u32 = low:32[R0]
0000089f: main_argv :: in out u64 = R1
000008a0: main_result :: out u32 = low:32[R0]

000003ac:
000003b0: R31 := R31 - 0x20
000003b7: mem := mem with [R31 + 0x1C, el]:u32 <- 0
000003be: mem := mem with [R31 + 4, el]:u32 <- 0
000003c3: goto %000003c1

000003c1:
000003c9: R8 := pad:64[mem[R31 + 4, el]:u32]
000003cf: #6 := 31:0[R8] - 5
000003d4: VF := extend:33[#6] <> extend:33[31:0[R8]] - 5
000003d9: CF := pad:33[#6] <> pad:33[31:0[R8]] + 0xFFFFFFFB
000003dd: ZF := #6 = 0
000003e1: NF := 31:31[#6]
000003e5: R8 := pad:64[#6]
000003f2: when NF <> VF goto %000003eb
000003f3: goto %000003ee

000003ee:
000003ef: R8 := 1
000003f5: goto %000003f1

000003eb:
000003ec: R8 := 0
000003f4: goto %000003f1

000003f1:
000003fb: when 0:0[R8] goto %000003f9
0000088a: goto %00000563

000003f9:
00000403: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000409: R31 := R31 + 0x20
0000040e: call R30 with noreturn

00000563:
00000566: goto %00000564

00000564:
0000056c: R8 := pad:64[mem[R31 + 4, el]:u32]
00000573: R10 := extend:64[mem[R31 + 4, el]:u32]
00000579: R9 := R31 + 8
00000582: mem := mem with [R9 + (61:0[R10].0), el]:u32 <- 31:0[R8]
00000587: goto %00000585

00000585:
0000058d: R8 := pad:64[mem[R31 + 4, el]:u32]
00000593: R8 := pad:64[31:0[R8] + 1]
0000059b: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
0000059f: goto %000003c1

0000088b: sub register_tm_clones(register_tm_clones_result)
000008a1: register_tm_clones_result :: out u32 = low:32[R0]

000002f9:
000002fc: R0 := 0x11000
00000302: R0 := R0 + 0x30
00000307: R1 := 0x11000
0000030d: R1 := R1 + 0x30
00000314: R1 := R1 + ~R0 + 1
0000031b: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000322: R1 := R2 + (R1 ~>> 3)
00000328: #3 := ~(R1 ~>> 1)
0000032c: #4 := ~(R1 ~>> 1) + 1
00000331: VF := extend:65[#4] <> extend:65[#3] + 1
00000336: CF := pad:65[#4] <> pad:65[#3] + 1
0000033a: ZF := #4 = 0
0000033e: NF := 63:63[#4]
00000346: R1 :=
          63:63[63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1]].62:0[R1
          >> 1 | R1 << 0x3F]
0000034c: when ZF goto %0000034a
0000088c: goto %000005dc

000005dc:
000005df: R2 := 0x10000
000005e6: R2 := mem[R2 + 0xFE0, el]:u64
000005eb: when R2 = 0 goto %0000034a
0000088d: goto %000005ef

0000034a:
00000352: call R30 with noreturn

000005ef:
000005f3: R16 := R2
000005f8: call R16 with noreturn
