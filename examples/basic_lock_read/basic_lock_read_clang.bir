0000085b: program
0000083f: sub __cxa_finalize(__cxa_finalize_result)
0000085c: __cxa_finalize_result :: out u32 = low:32[R0]

000005ad:
0000068e: R16 := 0x11000
00000695: R17 := mem[R16, el]:u64
0000069b: R16 := R16
000006a0: call R17 with noreturn

00000840: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000085d: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000344:
00000348: #5 := R31 - 0x20
0000034e: mem := mem with [#5, el]:u64 <- R29
00000354: mem := mem with [#5 + 8, el]:u64 <- R30
00000358: R31 := #5
0000035e: R29 := R31
00000366: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000036b: R19 := 0x11000
00000372: R0 := pad:64[mem[R19 + 0x30]]
00000379: when 31:0[R0] <> 0 goto %00000377
00000841: goto %00000576

00000576:
00000579: R0 := 0x10000
00000580: R0 := mem[R0 + 0xFC0, el]:u64
00000586: when R0 = 0 goto %00000584
00000842: goto %0000059d

0000059d:
000005a0: R0 := 0x11000
000005a7: R0 := mem[R0 + 0x28, el]:u64
000005ac: R30 := 0x700
000005af: call @__cxa_finalize with return %00000584

00000584:
0000058c: R30 := 0x704
0000058e: call @deregister_tm_clones with return %00000590

00000590:
00000593: R0 := 1
0000059b: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000843: goto %00000377

00000377:
00000381: R19 := mem[R31 + 0x10, el]:u64
00000388: R29 := mem[R31, el]:u64
0000038d: R30 := mem[R31 + 8, el]:u64
00000391: R31 := R31 + 0x20
00000396: call R30 with noreturn

00000844: sub __libc_csu_fini(__libc_csu_fini_result)
0000085e: __libc_csu_fini_result :: out u32 = low:32[R0]

000004f3:
000004f6: call R30 with noreturn

00000845: sub __libc_csu_init(__libc_csu_init_result)
0000085f: __libc_csu_init_result :: out u32 = low:32[R0]

00000400:
00000404: #7 := R31 - 0x40
0000040a: mem := mem with [#7, el]:u64 <- R29
00000410: mem := mem with [#7 + 8, el]:u64 <- R30
00000414: R31 := #7
0000041a: R29 := R31
00000420: #8 := R31 + 0x10
00000426: mem := mem with [#8, el]:u64 <- R19
0000042c: mem := mem with [#8 + 8, el]:u64 <- R20
00000431: R20 := 0x10000
00000437: R20 := R20 + 0xDC0
0000043d: #9 := R31 + 0x20
00000443: mem := mem with [#9, el]:u64 <- R21
00000449: mem := mem with [#9 + 8, el]:u64 <- R22
0000044e: R21 := 0x10000
00000454: R21 := R21 + 0xDB8
0000045b: R20 := R20 + ~R21 + 1
00000461: R22 := pad:64[31:0[R0]]
00000467: #10 := R31 + 0x30
0000046d: mem := mem with [#10, el]:u64 <- R23
00000473: mem := mem with [#10 + 8, el]:u64 <- R24
00000479: R23 := R1
0000047f: R24 := R2
00000484: R30 := 0x798
00000487: call @_init with return %00000489

00000489:
0000048d: #11 := ~(R20 ~>> 3)
00000491: #12 := ~(R20 ~>> 3) + 1
00000496: VF := extend:65[#12] <> extend:65[#11] + 1
0000049b: CF := pad:65[#12] <> pad:65[#11] + 1
0000049f: ZF := #12 = 0
000004a3: NF := 63:63[#12]
000004a9: when ZF goto %000004a7
00000846: goto %000004f8

000004f8:
000004fe: R20 :=

          >> 3 | R20 << 0x3D]
00000503: R19 := 0
00000847: goto %00000505

00000505:
0000050b: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000511: R2 := R24
00000517: R19 := R19 + 1
0000051d: R1 := R23
00000523: R0 := pad:64[31:0[R22]]
00000528: R30 := 0x7C0
0000052b: call R3 with return %0000052d

0000052d:
00000531: #16 := ~R19
00000536: #17 := R20 + ~R19 + 1
0000053c: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
00000542: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
00000546: ZF := #17 = 0
0000054a: NF := 63:63[#17]
0000054f: when ZF <> 1 goto %00000505
00000848: goto %000004a7

000004a7:
000004b0: #13 := R31 + 0x10
000004b5: R19 := mem[#13, el]:u64
000004ba: R20 := mem[#13 + 8, el]:u64
000004c0: #14 := R31 + 0x20
000004c5: R21 := mem[#14, el]:u64
000004ca: R22 := mem[#14 + 8, el]:u64
000004d0: #15 := R31 + 0x30
000004d5: R23 := mem[#15, el]:u64
000004da: R24 := mem[#15 + 8, el]:u64
000004e1: R29 := mem[R31, el]:u64
000004e6: R30 := mem[R31 + 8, el]:u64
000004ea: R31 := R31 + 0x40
000004ef: call R30 with noreturn

00000849: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000860: __libc_start_main_main :: in u64 = R0
00000861: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000862: __libc_start_main_arg3 :: in out u64 = R2
00000863: __libc_start_main_auxv :: in out u64 = R3
00000864: __libc_start_main_result :: out u32 = low:32[R0]

00000282:
000006a4: R16 := 0x11000
000006ab: R17 := mem[R16 + 8, el]:u64
000006b1: R16 := R16 + 8
000006b6: call R17 with noreturn

0000084a: sub _fini(_fini_result)
00000865: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

0000084b: sub _init(_init_result)
00000866: _init_result :: out u32 = low:32[R0]

00000485:
00000778: #19 := R31 - 0x10
0000077e: mem := mem with [#19, el]:u64 <- R29
00000784: mem := mem with [#19 + 8, el]:u64 <- R30
00000788: R31 := #19
0000078e: R29 := R31
00000793: R30 := 0x5A4
00000795: call @call_weak_fn with return %00000797

00000797:
0000079c: R29 := mem[R31, el]:u64
000007a1: R30 := mem[R31 + 8, el]:u64
000007a5: R31 := R31 + 0x10
000007aa: call R30 with noreturn

0000084c: sub _start(_start_result)
00000867: _start_result :: out u32 = low:32[R0]

00000237:
0000023a: R29 := 0
0000023f: R30 := 0
00000245: R5 := R0
0000024c: R1 := mem[R31, el]:u64
00000252: R2 := R31 + 8
00000258: R6 := R31
0000025d: R0 := 0x10000
00000264: R0 := mem[R0 + 0xFD8, el]:u64
00000269: R3 := 0x10000
00000270: R3 := mem[R3 + 0xFD0, el]:u64
00000275: R4 := 0x10000
0000027c: R4 := mem[R4 + 0xFB0, el]:u64
00000281: R30 := 0x644
00000284: call @__libc_start_main with return %00000286

00000286:
00000289: R30 := 0x648
0000028c: call @abort with return %0000084d

0000084d:
0000084e: call @call_weak_fn with noreturn

0000084f: sub abort()


0000028a:
000006d0: R16 := 0x11000
000006d7: R17 := mem[R16 + 0x18, el]:u64
000006dd: R16 := R16 + 0x18
000006e2: call R17 with noreturn

00000850: sub call_weak_fn(call_weak_fn_result)
00000868: call_weak_fn_result :: out u32 = low:32[R0]

0000028e:
00000291: R0 := 0x10000
00000298: R0 := mem[R0 + 0xFC8, el]:u64
0000029e: when R0 = 0 goto %0000029c
00000851: goto %000005ed

0000029c:
000002a4: call R30 with noreturn

000005ed:
000005f0: goto @__gmon_start__

000005ee:
000006ba: R16 := 0x11000
000006c1: R17 := mem[R16 + 0x10, el]:u64
000006c7: R16 := R16 + 0x10
000006cc: call R17 with noreturn

00000852: sub deregister_tm_clones(deregister_tm_clones_result)
00000869: deregister_tm_clones_result :: out u32 = low:32[R0]

000002a8:
000002ab: R0 := 0x11000
000002b1: R0 := R0 + 0x30
000002b6: R1 := 0x11000
000002bc: R1 := R1 + 0x30
000002c2: #1 := ~R0
000002c7: #2 := R1 + ~R0 + 1
000002cd: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002d3: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002d7: ZF := #2 = 0
000002db: NF := 63:63[#2]
000002e1: when ZF goto %000002df
00000853: goto %000005cf

000005cf:
000005d2: R1 := 0x10000
000005d9: R1 := mem[R1 + 0xFB8, el]:u64
000005de: when R1 = 0 goto %000002df
00000854: goto %000005e2

000002df:
000002e7: call R30 with noreturn

000005e2:
000005e6: R16 := R1
000005eb: call R16 with noreturn

00000855: sub frame_dummy(frame_dummy_result)
0000086a: frame_dummy_result :: out u32 = low:32[R0]

00000398:
0000039a: call @register_tm_clones with noreturn

00000856: sub main(main_argc, main_argv, main_result)
0000086b: main_argc :: in u32 = low:32[R0]
0000086c: main_argv :: in out u64 = R1
0000086d: main_result :: out u32 = low:32[R0]

0000039c:
000003a0: R31 := R31 - 0x10
000003a7: mem := mem with [R31 + 0xC, el]:u32 <- 0
000003ae: mem := mem with [R31 + 8, el]:u32 <- 0
000003b3: R8 := 0x11000
000003ba: R8 := pad:64[mem[R8 + 0x34, el]:u32]
000003c0: #6 := 31:0[R8] + 0
000003c5: VF := extend:33[#6] <> extend:33[31:0[R8]] + 0
000003ca: CF := pad:33[#6] <> pad:33[31:0[R8]] - 0x100000000
000003ce: ZF := #6 = 0
000003d2: NF := 31:31[#6]
000003d6: R8 := pad:64[#6]
000003e2: when ZF goto %000003db
000003e3: goto %000003de

000003de:
000003df: R8 := 1
000003e5: goto %000003e1

000003db:
000003dc: R8 := 0
000003e4: goto %000003e1

000003e1:
000003eb: when 0:0[R8] goto %000003e9
00000857: goto %00000553

00000553:
00000556: goto %00000554

00000554:
0000055a: R8 := 0x11000
00000561: mem := mem with [R8 + 0x38, el]:u32 <- 0
00000568: R8 := pad:64[mem[R8 + 0x38, el]:u32]
00000570: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000574: goto %000003e9

000003e9:
000003f3: R0 := pad:64[mem[R31 + 8, el]:u32]
000003f9: R31 := R31 + 0x10
000003fe: call R30 with noreturn

00000858: sub register_tm_clones(register_tm_clones_result)
0000086e: register_tm_clones_result :: out u32 = low:32[R0]

000002e9:
000002ec: R0 := 0x11000
000002f2: R0 := R0 + 0x30
000002f7: R1 := 0x11000
000002fd: R1 := R1 + 0x30
00000304: R1 := R1 + ~R0 + 1
0000030b: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000312: R1 := R2 + (R1 ~>> 3)
00000318: #3 := ~(R1 ~>> 1)
0000031c: #4 := ~(R1 ~>> 1) + 1
00000321: VF := extend:65[#4] <> extend:65[#3] + 1
00000326: CF := pad:65[#4] <> pad:65[#3] + 1
0000032a: ZF := #4 = 0
0000032e: NF := 63:63[#4]
00000336: R1 :=

          >> 1 | R1 << 0x3F]
0000033c: when ZF goto %0000033a
00000859: goto %000005b1

000005b1:
000005b4: R2 := 0x10000
000005bb: R2 := mem[R2 + 0xFE0, el]:u64
000005c0: when R2 = 0 goto %0000033a
0000085a: goto %000005c4

0000033a:
00000342: call R30 with noreturn

000005c4:
000005c8: R16 := R2
000005cd: call R16 with noreturn
