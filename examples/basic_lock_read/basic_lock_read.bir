00000851: program
00000834: sub __cxa_finalize(__cxa_finalize_result)
00000852: __cxa_finalize_result :: out u32 = low:32[R0]

000005a2:
00000683: R16 := 0x10000
0000068a: R17 := mem[R16 + 0xFA0, el]:u64
00000690: R16 := R16 + 0xFA0
00000695: call R17 with noreturn

00000835: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000853: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000344:
00000348: #5 := R31 - 0x20
0000034e: mem := mem with [#5, el]:u64 <- R29
00000354: mem := mem with [#5 + 8, el]:u64 <- R30
00000358: R31 := #5
0000035e: R29 := R31
00000366: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000036b: R19 := 0x11000
00000372: R0 := pad:64[mem[R19 + 0x10]]
00000379: when 31:0[R0] <> 0 goto %00000377
00000836: goto %0000056b

0000056b:
0000056e: R0 := 0x10000
00000575: R0 := mem[R0 + 0xFD8, el]:u64
0000057b: when R0 = 0 goto %00000579
00000837: goto %00000592

00000592:
00000595: R0 := 0x11000
0000059c: R0 := mem[R0 + 8, el]:u64
000005a1: R30 := 0x700
000005a4: call @__cxa_finalize with return %00000579

00000579:
00000581: R30 := 0x704
00000583: call @deregister_tm_clones with return %00000585

00000585:
00000588: R0 := 1
00000590: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000838: goto %00000377

00000377:
00000381: R19 := mem[R31 + 0x10, el]:u64
00000388: R29 := mem[R31, el]:u64
0000038d: R30 := mem[R31 + 8, el]:u64
00000391: R31 := R31 + 0x20
00000396: call R30 with noreturn

00000839: sub __libc_csu_fini(__libc_csu_fini_result)
00000854: __libc_csu_fini_result :: out u32 = low:32[R0]

000004df:
000004e2: call R30 with noreturn

0000083a: sub __libc_csu_init(__libc_csu_init_result)
00000855: __libc_csu_init_result :: out u32 = low:32[R0]

000003ec:
000003f0: #7 := R31 - 0x40
000003f6: mem := mem with [#7, el]:u64 <- R29
000003fc: mem := mem with [#7 + 8, el]:u64 <- R30
00000400: R31 := #7
00000406: R29 := R31
0000040c: #8 := R31 + 0x10
00000412: mem := mem with [#8, el]:u64 <- R19
00000418: mem := mem with [#8 + 8, el]:u64 <- R20
0000041d: R20 := 0x10000
00000423: R20 := R20 + 0xD90
00000429: #9 := R31 + 0x20
0000042f: mem := mem with [#9, el]:u64 <- R21
00000435: mem := mem with [#9 + 8, el]:u64 <- R22
0000043a: R21 := 0x10000
00000440: R21 := R21 + 0xD88
00000447: R20 := R20 + ~R21 + 1
0000044d: R22 := pad:64[31:0[R0]]
00000453: #10 := R31 + 0x30
00000459: mem := mem with [#10, el]:u64 <- R23
0000045f: mem := mem with [#10 + 8, el]:u64 <- R24
00000465: R23 := R1
0000046b: R24 := R2
00000470: R30 := 0x798
00000473: call @_init with return %00000475

00000475:
00000479: #11 := ~(R20 ~>> 3)
0000047d: #12 := ~(R20 ~>> 3) + 1
00000482: VF := extend:65[#12] <> extend:65[#11] + 1
00000487: CF := pad:65[#12] <> pad:65[#11] + 1
0000048b: ZF := #12 = 0
0000048f: NF := 63:63[#12]
00000495: when ZF goto %00000493
0000083b: goto %000004e4

000004e4:
000004ea: R20 :=

          >> 3 | R20 << 0x3D]
000004ef: R19 := 0
0000083c: goto %000004f1

000004f1:
000004f7: R3 := mem[R21 + (60:0[R19].0), el]:u64
000004fd: R2 := R24
00000503: R19 := R19 + 1
00000509: R1 := R23
0000050f: R0 := pad:64[31:0[R22]]
00000514: R30 := 0x7C0
00000517: call R3 with return %00000519

00000519:
0000051d: #16 := ~R19
00000522: #17 := R20 + ~R19 + 1
00000528: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
0000052e: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
00000532: ZF := #17 = 0
00000536: NF := 63:63[#17]
0000053b: when ZF <> 1 goto %000004f1
0000083d: goto %00000493

00000493:
0000049c: #13 := R31 + 0x10
000004a1: R19 := mem[#13, el]:u64
000004a6: R20 := mem[#13 + 8, el]:u64
000004ac: #14 := R31 + 0x20
000004b1: R21 := mem[#14, el]:u64
000004b6: R22 := mem[#14 + 8, el]:u64
000004bc: #15 := R31 + 0x30
000004c1: R23 := mem[#15, el]:u64
000004c6: R24 := mem[#15 + 8, el]:u64
000004cd: R29 := mem[R31, el]:u64
000004d2: R30 := mem[R31 + 8, el]:u64
000004d6: R31 := R31 + 0x40
000004db: call R30 with noreturn

0000083e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000856: __libc_start_main_main :: in u64 = R0
00000857: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000858: __libc_start_main_arg3 :: in out u64 = R2
00000859: __libc_start_main_auxv :: in out u64 = R3
0000085a: __libc_start_main_result :: out u32 = low:32[R0]

00000282:
00000699: R16 := 0x10000
000006a0: R17 := mem[R16 + 0xFA8, el]:u64
000006a6: R16 := R16 + 0xFA8
000006ab: call R17 with noreturn

0000083f: sub _fini(_fini_result)
0000085b: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

00000840: sub _init(_init_result)
0000085c: _init_result :: out u32 = low:32[R0]

00000471:
0000076d: #19 := R31 - 0x10
00000773: mem := mem with [#19, el]:u64 <- R29
00000779: mem := mem with [#19 + 8, el]:u64 <- R30
0000077d: R31 := #19
00000783: R29 := R31
00000788: R30 := 0x5A4
0000078a: call @call_weak_fn with return %0000078c

0000078c:
00000791: R29 := mem[R31, el]:u64
00000796: R30 := mem[R31 + 8, el]:u64
0000079a: R31 := R31 + 0x10
0000079f: call R30 with noreturn

00000841: sub _start(_start_result)
0000085d: _start_result :: out u32 = low:32[R0]

00000237:
0000023a: R29 := 0
0000023f: R30 := 0
00000245: R5 := R0
0000024c: R1 := mem[R31, el]:u64
00000252: R2 := R31 + 8
00000258: R6 := R31
0000025d: R0 := 0x10000
00000264: R0 := mem[R0 + 0xFF0, el]:u64
00000269: R3 := 0x10000
00000270: R3 := mem[R3 + 0xFE8, el]:u64
00000275: R4 := 0x10000
0000027c: R4 := mem[R4 + 0xFC8, el]:u64
00000281: R30 := 0x644
00000284: call @__libc_start_main with return %00000286

00000286:
00000289: R30 := 0x648
0000028c: call @abort with return %00000842

00000842:
00000843: call @call_weak_fn with noreturn

00000844: sub abort()


0000028a:
000006c5: R16 := 0x10000
000006cc: R17 := mem[R16 + 0xFB8, el]:u64
000006d2: R16 := R16 + 0xFB8
000006d7: call R17 with noreturn

00000845: sub call_weak_fn(call_weak_fn_result)
0000085e: call_weak_fn_result :: out u32 = low:32[R0]

0000028e:
00000291: R0 := 0x10000
00000298: R0 := mem[R0 + 0xFE0, el]:u64
0000029e: when R0 = 0 goto %0000029c
00000846: goto %000005e2

0000029c:
000002a4: call R30 with noreturn

000005e2:
000005e5: goto @__gmon_start__

000005e3:
000006af: R16 := 0x10000
000006b6: R17 := mem[R16 + 0xFB0, el]:u64
000006bc: R16 := R16 + 0xFB0
000006c1: call R17 with noreturn

00000847: sub deregister_tm_clones(deregister_tm_clones_result)
0000085f: deregister_tm_clones_result :: out u32 = low:32[R0]

000002a8:
000002ab: R0 := 0x11000
000002b1: R0 := R0 + 0x10
000002b6: R1 := 0x11000
000002bc: R1 := R1 + 0x10
000002c2: #1 := ~R0
000002c7: #2 := R1 + ~R0 + 1
000002cd: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002d3: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002d7: ZF := #2 = 0
000002db: NF := 63:63[#2]
000002e1: when ZF goto %000002df
00000848: goto %000005c4

000005c4:
000005c7: R1 := 0x10000
000005ce: R1 := mem[R1 + 0xFD0, el]:u64
000005d3: when R1 = 0 goto %000002df
00000849: goto %000005d7

000002df:
000002e7: call R30 with noreturn

000005d7:
000005db: R16 := R1
000005e0: call R16 with noreturn

0000084a: sub frame_dummy(frame_dummy_result)
00000860: frame_dummy_result :: out u32 = low:32[R0]

00000398:
0000039a: call @register_tm_clones with noreturn

0000084b: sub main(main_argc, main_argv, main_result)
00000861: main_argc :: in u32 = low:32[R0]
00000862: main_argv :: in out u64 = R1
00000863: main_result :: out u32 = low:32[R0]

0000039c:
000003a0: R31 := R31 - 0x10
000003a7: mem := mem with [R31 + 0xC, el]:u32 <- 0
000003ac: R0 := 0x11000
000003b2: R0 := R0 + 0x14
000003b9: R0 := pad:64[mem[R0, el]:u32]
000003bf: #6 := 31:0[R0] + 0
000003c4: VF := extend:33[#6] <> extend:33[31:0[R0]] + 0
000003c9: CF := pad:33[#6] <> pad:33[31:0[R0]] - 0x100000000
000003cd: ZF := #6 = 0
000003d1: NF := 31:31[#6]
000003d7: when ZF <> 1 goto %000003d5
0000084c: goto %0000053f

0000053f:
00000542: R0 := 0x11000
00000548: R0 := R0 + 0x18
0000054f: mem := mem with [R0, el]:u32 <- 0
00000554: R0 := 0x11000
0000055a: R0 := R0 + 0x18
00000561: R0 := pad:64[mem[R0, el]:u32]
00000569: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000084d: goto %000003d5

000003d5:
000003df: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000003e5: R31 := R31 + 0x10
000003ea: call R30 with noreturn

0000084e: sub register_tm_clones(register_tm_clones_result)
00000864: register_tm_clones_result :: out u32 = low:32[R0]

000002e9:
000002ec: R0 := 0x11000
000002f2: R0 := R0 + 0x10
000002f7: R1 := 0x11000
000002fd: R1 := R1 + 0x10
00000304: R1 := R1 + ~R0 + 1
0000030b: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000312: R1 := R2 + (R1 ~>> 3)
00000318: #3 := ~(R1 ~>> 1)
0000031c: #4 := ~(R1 ~>> 1) + 1
00000321: VF := extend:65[#4] <> extend:65[#3] + 1
00000326: CF := pad:65[#4] <> pad:65[#3] + 1
0000032a: ZF := #4 = 0
0000032e: NF := 63:63[#4]
00000336: R1 :=

          >> 1 | R1 << 0x3F]
0000033c: when ZF goto %0000033a
0000084f: goto %000005a6

000005a6:
000005a9: R2 := 0x10000
000005b0: R2 := mem[R2 + 0xFF8, el]:u64
000005b5: when R2 = 0 goto %0000033a
00000850: goto %000005b9

0000033a:
00000342: call R30 with noreturn

000005b9:
000005bd: R16 := R2
000005c2: call R16 with noreturn
