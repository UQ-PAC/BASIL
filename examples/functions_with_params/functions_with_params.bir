00000343: program
0000031c: sub __cxa_finalize(__cxa_finalize_result)
00000344: __cxa_finalize_result :: out u32 = R0

00000263:
000002be: R16 := 0x10000
000002c2: R17 := mem[R16 + 0xFA0, el]:u64
000002c6: R16 := R16 + 0xFA0
000002ca: call R17 with noreturn

0000031d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000345: __do_global_dtors_aux_result :: out u32 = R0

000000d9:
000000db: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000dd: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000df: R31 := R31 - 0x20
000000e3: R29 := R31
000000e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000eb: R19 := 0x11000
000000ef: #28 := pad:64[mem[R19 + 0x10]]
000000f1: R0 := 0
000000f3: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
000000fc: #29 := extract:31:0[R0] <> 0
000000f8: when #29 goto %000000f6
00000336: goto %00000238

00000238:
0000023a: R0 := 0x10000
0000023e: R0 := mem[R0 + 0xFD8, el]:u64
00000247: #87 := R0 = 0
00000243: when #87 goto %00000241
00000337: goto %00000258

00000258:
0000025a: R0 := 0x11000
0000025e: R0 := mem[R0 + 8, el]:u64
00000262: R30 := 0x700
00000265: call @__cxa_finalize with return %00000241

00000241:
0000024a: R30 := 0x704
0000024c: call @deregister_tm_clones with return %0000024e

0000024e:
00000250: R0 := 0
00000252: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000256: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
00000338: goto %000000f6

000000f6:
000000ff: R19 := mem[R31 + 0x10, el]:u64
00000103: R29 := mem[R31, el]:u64
00000105: R30 := mem[R31 + 8, el]:u64
00000107: R31 := R31 + 0x20
0000010b: call R30 with noreturn

00000321: sub __libc_csu_fini(__libc_csu_fini_result)
00000346: __libc_csu_fini_result :: out u32 = R0

000001e1:
000001e3: call R30 with noreturn

00000322: sub __libc_csu_init(__libc_csu_init_result)
00000347: __libc_csu_init_result :: out u32 = R0

00000163:
00000165: mem := mem with [R31 - 0x40, el]:u64 <- R29
00000167: mem := mem with [R31 - 0x38, el]:u64 <- R30
00000169: R31 := R31 - 0x40
0000016d: R29 := R31
00000171: mem := mem with [R31, el]:u64 <- R31 + 0x20
00000173: mem := mem with [R31, el]:u64 <- R31 + 0x28
00000177: R20 := 0x10000
0000017b: R20 := R20 + 0xD90
0000017f: mem := mem with [R31, el]:u64 <- R31 + 0x40
00000181: mem := mem with [R31, el]:u64 <- R31 + 0x48
00000185: R21 := 0x10000
00000189: R21 := R21 + 0xD88
0000018d: R20 := R20 - R21
00000191: #49 := extract:31:0[R0]
00000193: R22 := 0
00000195: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#49]
00000199: mem := mem with [R31, el]:u64 <- R31 + 0x60
0000019b: mem := mem with [R31, el]:u64 <- R31 + 0x68
0000019f: R23 := R1
000001a3: R24 := R2
000001a7: R30 := 0x7A0
000001aa: call @_init with return %000001ac

000001ac:
000001ae: #60 := ~(R20 ~>> 3) + 1
000001b0: NF := extract:63:63[#60]
000001b2: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#60]
000001b4: ZF := #60 = 0
000001b6: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#60]
000001bf: #62 := ZF
000001bb: when #62 goto %000001b9
00000339: goto %000001e6

000001e6:
000001e8: R20 := R20 >> 3
000001ec: R19 := 0
0000033a: goto %000001ee

000001ee:
000001f0: R3 := mem[R21 + (R19 << 3), el]:u64
000001f4: R2 := R24
000001f8: R19 := R19 + 1
000001fc: R1 := R23
00000200: #77 := extract:31:0[R22]
00000202: R0 := 0
00000204: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#77]
00000208: R30 := 0x7C8
0000020a: call R3 with return %0000020d

0000020d:
0000020f: #81 := 1 + ~R19 + R20
00000211: NF := extract:63:63[#81]
00000213: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#81] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#81]
00000215: ZF := #81 = 0
00000217: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#81] | extract:63:63[R20] &
          ~extract:63:63[#81]
0000021f: #83 := ~ZF <> 0
0000021b: when #83 goto %000001ee
0000033b: goto %000001b9

000001b9:
000001c2: R19 := mem[R31 + 0x10, el]:u64
000001c4: R20 := mem[R31 + 0x18, el]:u64
000001c8: R21 := mem[R31 + 0x20, el]:u64
000001ca: R22 := mem[R31 + 0x28, el]:u64
000001ce: R23 := mem[R31 + 0x30, el]:u64
000001d0: R24 := mem[R31 + 0x38, el]:u64
000001d4: R29 := mem[R31, el]:u64
000001d6: R30 := mem[R31 + 8, el]:u64
000001d8: R31 := R31 + 0x40
000001dc: call R30 with noreturn

00000326: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000348: __libc_start_main_main :: in u64 = R0
00000349: __libc_start_main_arg2 :: in u32 = R1
0000034a: __libc_start_main_arg3 :: in out u64 = R2
0000034b: __libc_start_main_auxv :: in out u64 = R3
0000034c: __libc_start_main_result :: out u32 = R0

00000055:
000002ce: R16 := 0x10000
000002d2: R17 := mem[R16 + 0xFA8, el]:u64
000002d6: R16 := R16 + 0xFA8
000002da: call R17 with noreturn

00000327: sub _fini(_fini_result)
0000034d: _fini_result :: out u32 = R0

00000009:
0000000b: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000d: mem := mem with [R31 - 8, el]:u64 <- R30
0000000f: R31 := R31 - 0x10
00000013: R29 := R31
00000017: R29 := mem[R31, el]:u64
00000019: R30 := mem[R31 + 8, el]:u64
0000001b: R31 := R31 + 0x10
0000001f: call R30 with noreturn

00000328: sub _init(_init_result)
0000034e: _init_result :: out u32 = R0

000001a8:
000002fe: mem := mem with [R31 - 0x10, el]:u64 <- R29
00000300: mem := mem with [R31 - 8, el]:u64 <- R30
00000302: R31 := R31 - 0x10
00000306: R29 := R31
0000030a: R30 := 0x5A4
0000030c: call @call_weak_fn with return %0000030e

0000030e:
00000310: R29 := mem[R31, el]:u64
00000312: R30 := mem[R31 + 8, el]:u64
00000314: R31 := R31 + 0x10
00000318: call R30 with noreturn

00000329: sub _start(_start_result)
0000034f: _start_result :: out u32 = R0

00000022:
00000024: R29 := 0
00000028: R30 := 0
0000002c: R5 := R0
00000030: R1 := mem[R31, el]:u64
00000034: R2 := R31 + 8
00000038: R6 := R31
0000003c: R0 := 0x10000
00000040: R0 := mem[R0 + 0xFF0, el]:u64
00000044: R3 := 0x10000
00000048: R3 := mem[R3 + 0xFE8, el]:u64
0000004c: R4 := 0x10000
00000050: R4 := mem[R4 + 0xFC8, el]:u64
00000054: R30 := 0x644
00000057: call @__libc_start_main with return %00000059

00000059:
0000005b: R30 := 0x648
0000005e: call @abort with return %0000033c

0000033c:
0000033d: call @call_weak_fn with noreturn

0000032c: sub abort()


0000005c:
000002ee: R16 := 0x10000
000002f2: R17 := mem[R16 + 0xFB8, el]:u64
000002f6: R16 := R16 + 0xFB8
000002fa: call R17 with noreturn

0000032d: sub call_weak_fn(call_weak_fn_result)
00000350: call_weak_fn_result :: out u32 = R0

00000060:
00000062: R0 := 0x10000
00000066: R0 := mem[R0 + 0xFE0, el]:u64
0000006f: #5 := R0 = 0
0000006b: when #5 goto %00000069
0000033e: goto %00000299

00000069:
00000072: call R30 with noreturn

00000299:
0000029c: goto @__gmon_start__

0000029a:
000002de: R16 := 0x10000
000002e2: R17 := mem[R16 + 0xFB0, el]:u64
000002e6: R16 := R16 + 0xFB0
000002ea: call R17 with noreturn

0000032f: sub deregister_tm_clones(deregister_tm_clones_result)
00000351: deregister_tm_clones_result :: out u32 = R0

00000077:
00000079: R0 := 0x11000
0000007d: R0 := R0 + 0x10
00000081: R1 := 0x11000
00000085: R1 := R1 + 0x10
00000089: #9 := 1 + ~R0 + R1
0000008b: NF := extract:63:63[#9]
0000008d: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
0000008f: ZF := #9 = 0
00000091: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
0000009a: #11 := ZF
00000096: when #11 goto %00000094
0000033f: goto %00000280

00000280:
00000282: R1 := 0x10000
00000286: R1 := mem[R1 + 0xFD0, el]:u64
0000028e: #93 := R1 = 0
0000028a: when #93 goto %00000094
00000340: goto %00000290

00000094:
0000009d: call R30 with noreturn

00000290:
00000292: R16 := R1
00000296: call R16 with noreturn

00000332: sub frame_dummy(frame_dummy_result)
00000352: frame_dummy_result :: out u32 = R0

0000010e:
00000110: call @register_tm_clones with noreturn

00000333: sub main(main_argc, main_argv, main_result)
00000353: main_argc :: in u32 = R0
00000354: main_argv :: in out u64 = R1
00000355: main_result :: out u32 = R0

00000112:
00000114: mem := mem with [R31 - 0x20, el]:u64 <- R29
00000116: mem := mem with [R31 - 0x18, el]:u64 <- R30
00000118: R31 := R31 - 0x20
0000011c: R29 := R31
00000120: R0 := 0
00000122: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000126: mem := mem with [R31 + 0x18, el]:u32 <- low:32[extract:31:0[R0]]
0000012a: R0 := 0
0000012c: R0 := R0 & 0xFFFFFFFF00000000 | 2
00000130: mem := mem with [R31 + 0x1C, el]:u32 <- low:32[extract:31:0[R0]]
00000134: #36 := pad:64[mem[R31 + 0x18, el]:u32]
00000136: R0 := 0
00000138: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#36]
0000013c: R30 := 0x73C
0000013f: call @plus_one with return %00000221

00000221:
00000223: mem := mem with [R31 + 0x18, el]:u32 <- low:32[extract:31:0[R0]]
00000227: R0 := 0
00000229: R0 := R0 & 0xFFFFFFFF00000000
0000022d: R29 := mem[R31, el]:u64
0000022f: R30 := mem[R31 + 8, el]:u64
00000231: R31 := R31 + 0x20
00000235: call R30 with noreturn

00000334: sub plus_one(plus_one_result)
00000356: plus_one_result :: out u32 = R0

0000013d:
00000142: R31 := R31 - 0x10
00000146: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]
0000014a: #38 := pad:64[mem[R31 + 0xC, el]:u32]
0000014c: R0 := 0
0000014e: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#38]
00000152: #39 := extend:64[extract:31:0[R0]] + 1
00000154: R0 := 0
00000156: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#39]
0000015a: R31 := R31 + 0x10
0000015e: call R30 with noreturn

00000335: sub register_tm_clones(register_tm_clones_result)
00000357: register_tm_clones_result :: out u32 = R0

000000a0:
000000a2: R0 := 0x11000
000000a6: R0 := R0 + 0x10
000000aa: R1 := 0x11000
000000ae: R1 := R1 + 0x10
000000b2: R1 := R1 - R0
000000b6: R2 := R1 >> 0x3F
000000ba: R1 := R2 + (R1 ~>> 3)
000000be: #22 := ~(R1 ~>> 1) + 1
000000c0: NF := extract:63:63[#22]
000000c2: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000000c4: ZF := #22 = 0
000000c6: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000000ca: R1 := R1 >> 1
000000d3: #25 := ZF
000000cf: when #25 goto %000000cd
00000341: goto %00000267

00000267:
00000269: R2 := 0x10000
0000026d: R2 := mem[R2 + 0xFF8, el]:u64
00000275: #89 := R2 = 0
00000271: when #89 goto %000000cd
00000342: goto %00000277

000000cd:
000000d6: call R30 with noreturn

00000277:
00000279: R16 := R2
0000027d: call R16 with noreturn
