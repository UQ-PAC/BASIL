00000870: program
00000854: sub __cxa_finalize(__cxa_finalize_result)
00000871: __cxa_finalize_result :: out u32 = low:32[R0]

000005be:
0000069f: R16 := 0x10000
000006a6: R17 := mem[R16 + 0xFA0, el]:u64
000006ac: R16 := R16 + 0xFA0
000006b1: call R17 with noreturn

00000855: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000872: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000034e:
00000352: #5 := R31 - 0x20
00000358: mem := mem with [#5, el]:u64 <- R29
0000035e: mem := mem with [#5 + 8, el]:u64 <- R30
00000362: R31 := #5
00000368: R29 := R31
00000370: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000375: R19 := 0x11000
0000037c: R0 := pad:64[mem[R19 + 0x10]]
00000383: when 31:0[R0] <> 0 goto %00000381
00000856: goto %00000587

00000587:
0000058a: R0 := 0x10000
00000591: R0 := mem[R0 + 0xFD8, el]:u64
00000597: when R0 = 0 goto %00000595
00000857: goto %000005ae

000005ae:
000005b1: R0 := 0x11000
000005b8: R0 := mem[R0 + 8, el]:u64
000005bd: R30 := 0x700
000005c0: call @__cxa_finalize with return %00000595

00000595:
0000059d: R30 := 0x704
0000059f: call @deregister_tm_clones with return %000005a1

000005a1:
000005a4: R0 := 1
000005ac: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000858: goto %00000381

00000381:
0000038b: R19 := mem[R31 + 0x10, el]:u64
00000392: R29 := mem[R31, el]:u64
00000397: R30 := mem[R31 + 8, el]:u64
0000039b: R31 := R31 + 0x20
000003a0: call R30 with noreturn

00000859: sub __libc_csu_fini(__libc_csu_fini_result)
00000873: __libc_csu_fini_result :: out u32 = low:32[R0]

00000505:
00000508: call R30 with noreturn

0000085a: sub __libc_csu_init(__libc_csu_init_result)
00000874: __libc_csu_init_result :: out u32 = low:32[R0]

00000412:
00000416: #7 := R31 - 0x40
0000041c: mem := mem with [#7, el]:u64 <- R29
00000422: mem := mem with [#7 + 8, el]:u64 <- R30
00000426: R31 := #7
0000042c: R29 := R31
00000432: #8 := R31 + 0x10
00000438: mem := mem with [#8, el]:u64 <- R19
0000043e: mem := mem with [#8 + 8, el]:u64 <- R20
00000443: R20 := 0x10000
00000449: R20 := R20 + 0xD90
0000044f: #9 := R31 + 0x20
00000455: mem := mem with [#9, el]:u64 <- R21
0000045b: mem := mem with [#9 + 8, el]:u64 <- R22
00000460: R21 := 0x10000
00000466: R21 := R21 + 0xD88
0000046d: R20 := R20 + ~R21 + 1
00000473: R22 := pad:64[31:0[R0]]
00000479: #10 := R31 + 0x30
0000047f: mem := mem with [#10, el]:u64 <- R23
00000485: mem := mem with [#10 + 8, el]:u64 <- R24
0000048b: R23 := R1
00000491: R24 := R2
00000496: R30 := 0x7A0
00000499: call @_init with return %0000049b

0000049b:
0000049f: #11 := ~(R20 ~>> 3)
000004a3: #12 := ~(R20 ~>> 3) + 1
000004a8: VF := extend:65[#12] <> extend:65[#11] + 1
000004ad: CF := pad:65[#12] <> pad:65[#11] + 1
000004b1: ZF := #12 = 0
000004b5: NF := 63:63[#12]
000004bb: when ZF goto %000004b9
0000085b: goto %0000050a

0000050a:
00000510: R20 :=

          >> 3 | R20 << 0x3D]
00000515: R19 := 0
0000085c: goto %00000517

00000517:
0000051d: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000523: R2 := R24
00000529: R19 := R19 + 1
0000052f: R1 := R23
00000535: R0 := pad:64[31:0[R22]]
0000053a: R30 := 0x7C8
0000053d: call R3 with return %0000053f

0000053f:
00000543: #16 := ~R19
00000548: #17 := R20 + ~R19 + 1
0000054e: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
00000554: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
00000558: ZF := #17 = 0
0000055c: NF := 63:63[#17]
00000561: when ZF <> 1 goto %00000517
0000085d: goto %000004b9

000004b9:
000004c2: #13 := R31 + 0x10
000004c7: R19 := mem[#13, el]:u64
000004cc: R20 := mem[#13 + 8, el]:u64
000004d2: #14 := R31 + 0x20
000004d7: R21 := mem[#14, el]:u64
000004dc: R22 := mem[#14 + 8, el]:u64
000004e2: #15 := R31 + 0x30
000004e7: R23 := mem[#15, el]:u64
000004ec: R24 := mem[#15 + 8, el]:u64
000004f3: R29 := mem[R31, el]:u64
000004f8: R30 := mem[R31 + 8, el]:u64
000004fc: R31 := R31 + 0x40
00000501: call R30 with noreturn

0000085e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000875: __libc_start_main_main :: in u64 = R0
00000876: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000877: __libc_start_main_arg3 :: in out u64 = R2
00000878: __libc_start_main_auxv :: in out u64 = R3
00000879: __libc_start_main_result :: out u32 = low:32[R0]

0000028c:
000006b5: R16 := 0x10000
000006bc: R17 := mem[R16 + 0xFA8, el]:u64
000006c2: R16 := R16 + 0xFA8
000006c7: call R17 with noreturn

0000085f: sub _fini(_fini_result)
0000087a: _fini_result :: out u32 = low:32[R0]

00000032:
00000036: #0 := R31 - 0x10
0000003c: mem := mem with [#0, el]:u64 <- R29
00000042: mem := mem with [#0 + 8, el]:u64 <- R30
00000046: R31 := #0
0000004c: R29 := R31
00000053: R29 := mem[R31, el]:u64
00000058: R30 := mem[R31 + 8, el]:u64
0000005c: R31 := R31 + 0x10
00000061: call R30 with noreturn

00000860: sub _init(_init_result)
0000087b: _init_result :: out u32 = low:32[R0]

00000497:
0000078b: #19 := R31 - 0x10
00000791: mem := mem with [#19, el]:u64 <- R29
00000797: mem := mem with [#19 + 8, el]:u64 <- R30
0000079b: R31 := #19
000007a1: R29 := R31
000007a6: R30 := 0x5A4
000007a8: call @call_weak_fn with return %000007aa

000007aa:
000007af: R29 := mem[R31, el]:u64
000007b4: R30 := mem[R31 + 8, el]:u64
000007b8: R31 := R31 + 0x10
000007bd: call R30 with noreturn

00000861: sub _start(_start_result)
0000087c: _start_result :: out u32 = low:32[R0]

00000241:
00000244: R29 := 0
00000249: R30 := 0
0000024f: R5 := R0
00000256: R1 := mem[R31, el]:u64
0000025c: R2 := R31 + 8
00000262: R6 := R31
00000267: R0 := 0x10000
0000026e: R0 := mem[R0 + 0xFF0, el]:u64
00000273: R3 := 0x10000
0000027a: R3 := mem[R3 + 0xFE8, el]:u64
0000027f: R4 := 0x10000
00000286: R4 := mem[R4 + 0xFC8, el]:u64
0000028b: R30 := 0x644
0000028e: call @__libc_start_main with return %00000290

00000290:
00000293: R30 := 0x648
00000296: call @abort with return %00000862

00000862:
00000863: call @call_weak_fn with noreturn

00000864: sub abort()


00000294:
000006e1: R16 := 0x10000
000006e8: R17 := mem[R16 + 0xFB8, el]:u64
000006ee: R16 := R16 + 0xFB8
000006f3: call R17 with noreturn

00000865: sub call_weak_fn(call_weak_fn_result)
0000087d: call_weak_fn_result :: out u32 = low:32[R0]

00000298:
0000029b: R0 := 0x10000
000002a2: R0 := mem[R0 + 0xFE0, el]:u64
000002a8: when R0 = 0 goto %000002a6
00000866: goto %000005fe

000002a6:
000002ae: call R30 with noreturn

000005fe:
00000601: goto @__gmon_start__

000005ff:
000006cb: R16 := 0x10000
000006d2: R17 := mem[R16 + 0xFB0, el]:u64
000006d8: R16 := R16 + 0xFB0
000006dd: call R17 with noreturn

00000867: sub deregister_tm_clones(deregister_tm_clones_result)
0000087e: deregister_tm_clones_result :: out u32 = low:32[R0]

000002b2:
000002b5: R0 := 0x11000
000002bb: R0 := R0 + 0x10
000002c0: R1 := 0x11000
000002c6: R1 := R1 + 0x10
000002cc: #1 := ~R0
000002d1: #2 := R1 + ~R0 + 1
000002d7: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002dd: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002e1: ZF := #2 = 0
000002e5: NF := 63:63[#2]
000002eb: when ZF goto %000002e9
00000868: goto %000005e0

000005e0:
000005e3: R1 := 0x10000
000005ea: R1 := mem[R1 + 0xFD0, el]:u64
000005ef: when R1 = 0 goto %000002e9
00000869: goto %000005f3

000002e9:
000002f1: call R30 with noreturn

000005f3:
000005f7: R16 := R1
000005fc: call R16 with noreturn

0000086a: sub frame_dummy(frame_dummy_result)
0000087f: frame_dummy_result :: out u32 = low:32[R0]

000003a2:
000003a4: call @register_tm_clones with noreturn

0000086b: sub main(main_argc, main_argv, main_result)
00000880: main_argc :: in u32 = low:32[R0]
00000881: main_argv :: in out u64 = R1
00000882: main_result :: out u32 = low:32[R0]

000003a6:
000003aa: #6 := R31 - 0x20
000003b0: mem := mem with [#6, el]:u64 <- R29
000003b6: mem := mem with [#6 + 8, el]:u64 <- R30
000003ba: R31 := #6
000003c0: R29 := R31
000003c5: R0 := 1
000003cd: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
000003d2: R0 := 2
000003da: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000003e1: R0 := pad:64[mem[R31 + 0x18, el]:u32]
000003e6: R30 := 0x73C
000003e9: call @plus_one with return %00000565

00000565:
0000056b: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
00000570: R0 := 0
00000577: R29 := mem[R31, el]:u64
0000057c: R30 := mem[R31 + 8, el]:u64
00000580: R31 := R31 + 0x20
00000585: call R30 with noreturn

0000086c: sub plus_one(plus_one_result)
00000883: plus_one_result :: out u32 = low:32[R0]

000003e7:
000003ee: R31 := R31 - 0x10
000003f6: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000003fd: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000403: R0 := pad:64[31:0[R0] + 1]
00000409: R31 := R31 + 0x10
0000040e: call R30 with noreturn

0000086d: sub register_tm_clones(register_tm_clones_result)
00000884: register_tm_clones_result :: out u32 = low:32[R0]

000002f3:
000002f6: R0 := 0x11000
000002fc: R0 := R0 + 0x10
00000301: R1 := 0x11000
00000307: R1 := R1 + 0x10
0000030e: R1 := R1 + ~R0 + 1
00000315: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
0000031c: R1 := R2 + (R1 ~>> 3)
00000322: #3 := ~(R1 ~>> 1)
00000326: #4 := ~(R1 ~>> 1) + 1
0000032b: VF := extend:65[#4] <> extend:65[#3] + 1
00000330: CF := pad:65[#4] <> pad:65[#3] + 1
00000334: ZF := #4 = 0
00000338: NF := 63:63[#4]
00000340: R1 :=

          >> 1 | R1 << 0x3F]
00000346: when ZF goto %00000344
0000086e: goto %000005c2

000005c2:
000005c5: R2 := 0x10000
000005cc: R2 := mem[R2 + 0xFF8, el]:u64
000005d1: when R2 = 0 goto %00000344
0000086f: goto %000005d5

00000344:
0000034c: call R30 with noreturn

000005d5:
000005d9: R16 := R2
000005de: call R16 with noreturn
