000003a5: program
0000037b: sub __cxa_finalize(__cxa_finalize_result)
000003a6: __cxa_finalize_result :: out u32 = R0

000002a2:
000002fd: R16 := 0x10000
00000301: R17 := mem[R16 + 0xF88, el]:u64
00000305: R16 := R16 + 0xF88
00000309: call R17 with noreturn

0000037c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000003a7: __do_global_dtors_aux_result :: out u32 = R0

000000d9:
000000db: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000dd: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000df: R31 := R31 - 0x20
000000e3: R29 := R31
000000e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000eb: R19 := 0x11000
000000ef: #28 := pad:64[mem[R19 + 0x10]]
000000f1: R0 := 0
000000f3: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
000000fc: #29 := extract:31:0[R0] <> 0
000000f8: when #29 goto %000000f6
00000397: goto %00000277

00000277:
00000279: R0 := 0x10000
0000027d: R0 := mem[R0 + 0xFD0, el]:u64
00000286: #95 := R0 = 0
00000282: when #95 goto %00000280
00000398: goto %00000297

00000297:
00000299: R0 := 0x11000
0000029d: R0 := mem[R0 + 8, el]:u64
000002a1: R30 := 0x820
000002a4: call @__cxa_finalize with return %00000280

00000280:
00000289: R30 := 0x824
0000028b: call @deregister_tm_clones with return %0000028d

0000028d:
0000028f: R0 := 0
00000291: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000295: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
00000399: goto %000000f6

000000f6:
000000ff: R19 := mem[R31 + 0x10, el]:u64
00000103: R29 := mem[R31, el]:u64
00000105: R30 := mem[R31 + 8, el]:u64
00000107: R31 := R31 + 0x20
0000010b: call R30 with noreturn

00000380: sub __libc_csu_fini(__libc_csu_fini_result)
000003a8: __libc_csu_fini_result :: out u32 = R0

00000230:
00000232: call R30 with noreturn

00000381: sub __libc_csu_init(__libc_csu_init_result)
000003a9: __libc_csu_init_result :: out u32 = R0

000001b2:
000001b4: mem := mem with [R31 - 0x40, el]:u64 <- R29
000001b6: mem := mem with [R31 - 0x38, el]:u64 <- R30
000001b8: R31 := R31 - 0x40
000001bc: R29 := R31
000001c0: mem := mem with [R31, el]:u64 <- R31 + 0x20
000001c2: mem := mem with [R31, el]:u64 <- R31 + 0x28
000001c6: R20 := 0x10000
000001ca: R20 := R20 + 0xD68
000001ce: mem := mem with [R31, el]:u64 <- R31 + 0x40
000001d0: mem := mem with [R31, el]:u64 <- R31 + 0x48
000001d4: R21 := 0x10000
000001d8: R21 := R21 + 0xD60
000001dc: R20 := R20 - R21
000001e0: #60 := extract:31:0[R0]
000001e2: R22 := 0
000001e4: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#60]
000001e8: mem := mem with [R31, el]:u64 <- R31 + 0x60
000001ea: mem := mem with [R31, el]:u64 <- R31 + 0x68
000001ee: R23 := R1
000001f2: R24 := R2
000001f6: R30 := 0x8F8
000001f9: call @_init with return %000001fb

000001fb:
000001fd: #71 := ~(R20 ~>> 3) + 1
000001ff: NF := extract:63:63[#71]
00000201: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#71]
00000203: ZF := #71 = 0
00000205: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#71]
0000020e: #73 := ZF
0000020a: when #73 goto %00000208
0000039a: goto %00000235

00000235:
00000237: R20 := R20 >> 3
0000023b: R19 := 0
0000039b: goto %0000023d

0000023d:
0000023f: R3 := mem[R21 + (R19 << 3), el]:u64
00000243: R2 := R24
00000247: R19 := R19 + 1
0000024b: R1 := R23
0000024f: #88 := extract:31:0[R22]
00000251: R0 := 0
00000253: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#88]
00000257: R30 := 0x920
00000259: call R3 with return %0000025c

0000025c:
0000025e: #92 := 1 + ~R19 + R20
00000260: NF := extract:63:63[#92]
00000262: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#92] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#92]
00000264: ZF := #92 = 0
00000266: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#92] | extract:63:63[R20] &
          ~extract:63:63[#92]
0000026e: #94 := ~ZF <> 0
0000026a: when #94 goto %0000023d
0000039c: goto %00000208

00000208:
00000211: R19 := mem[R31 + 0x10, el]:u64
00000213: R20 := mem[R31 + 0x18, el]:u64
00000217: R21 := mem[R31 + 0x20, el]:u64
00000219: R22 := mem[R31 + 0x28, el]:u64
0000021d: R23 := mem[R31 + 0x30, el]:u64
0000021f: R24 := mem[R31 + 0x38, el]:u64
00000223: R29 := mem[R31, el]:u64
00000225: R30 := mem[R31 + 8, el]:u64
00000227: R31 := R31 + 0x40
0000022b: call R30 with noreturn

00000385: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000003aa: __libc_start_main_main :: in u64 = R0
000003ab: __libc_start_main_arg2 :: in u32 = R1
000003ac: __libc_start_main_arg3 :: in out u64 = R2
000003ad: __libc_start_main_auxv :: in out u64 = R3
000003ae: __libc_start_main_result :: out u32 = R0

00000055:
0000031d: R16 := 0x10000
00000321: R17 := mem[R16 + 0xF98, el]:u64
00000325: R16 := R16 + 0xF98
00000329: call R17 with noreturn

00000386: sub __stack_chk_fail(__stack_chk_fail_result)
000003af: __stack_chk_fail_result :: out u32 = R0

00000273:
0000032d: R16 := 0x10000
00000331: R17 := mem[R16 + 0xFA0, el]:u64
00000335: R16 := R16 + 0xFA0
00000339: call R17 with noreturn

00000387: sub _fini(_fini_result)
000003b0: _fini_result :: out u32 = R0

00000009:
0000000b: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000d: mem := mem with [R31 - 8, el]:u64 <- R30
0000000f: R31 := R31 - 0x10
00000013: R29 := R31
00000017: R29 := mem[R31, el]:u64
00000019: R30 := mem[R31 + 8, el]:u64
0000001b: R31 := R31 + 0x10
0000001f: call R30 with noreturn

00000388: sub _init(_init_result)
000003b1: _init_result :: out u32 = R0

000001f7:
0000035d: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000035f: mem := mem with [R31 - 8, el]:u64 <- R30
00000361: R31 := R31 - 0x10
00000365: R29 := R31
00000369: R30 := 0x69C
0000036b: call @call_weak_fn with return %0000036d

0000036d:
0000036f: R29 := mem[R31, el]:u64
00000371: R30 := mem[R31 + 8, el]:u64
00000373: R31 := R31 + 0x10
00000377: call R30 with noreturn

00000389: sub _start(_start_result)
000003b2: _start_result :: out u32 = R0

00000022:
00000024: R29 := 0
00000028: R30 := 0
0000002c: R5 := R0
00000030: R1 := mem[R31, el]:u64
00000034: R2 := R31 + 8
00000038: R6 := R31
0000003c: R0 := 0x10000
00000040: R0 := mem[R0 + 0xFF0, el]:u64
00000044: R3 := 0x10000
00000048: R3 := mem[R3 + 0xFE8, el]:u64
0000004c: R4 := 0x10000
00000050: R4 := mem[R4 + 0xFC0, el]:u64
00000054: R30 := 0x764
00000057: call @__libc_start_main with return %00000059

00000059:
0000005b: R30 := 0x768
0000005e: call @abort with return %0000039d

0000039d:
0000039e: call @call_weak_fn with noreturn

0000038c: sub abort()


0000005c:
0000034d: R16 := 0x10000
00000351: R17 := mem[R16 + 0xFB0, el]:u64
00000355: R16 := R16 + 0xFB0
00000359: call R17 with noreturn

0000038d: sub call_weak_fn(call_weak_fn_result)
000003b3: call_weak_fn_result :: out u32 = R0

00000060:
00000062: R0 := 0x10000
00000066: R0 := mem[R0 + 0xFD8, el]:u64
0000006f: #5 := R0 = 0
0000006b: when #5 goto %00000069
0000039f: goto %000002d8

00000069:
00000072: call R30 with noreturn

000002d8:
000002db: goto @__gmon_start__

000002d9:
0000033d: R16 := 0x10000
00000341: R17 := mem[R16 + 0xFA8, el]:u64
00000345: R16 := R16 + 0xFA8
00000349: call R17 with noreturn

0000038f: sub deregister_tm_clones(deregister_tm_clones_result)
000003b4: deregister_tm_clones_result :: out u32 = R0

00000077:
00000079: R0 := 0x11000
0000007d: R0 := R0 + 0x10
00000081: R1 := 0x11000
00000085: R1 := R1 + 0x10
00000089: #9 := 1 + ~R0 + R1
0000008b: NF := extract:63:63[#9]
0000008d: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
0000008f: ZF := #9 = 0
00000091: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
0000009a: #11 := ZF
00000096: when #11 goto %00000094
000003a0: goto %000002bf

000002bf:
000002c1: R1 := 0x10000
000002c5: R1 := mem[R1 + 0xFC8, el]:u64
000002cd: #101 := R1 = 0
000002c9: when #101 goto %00000094
000003a1: goto %000002cf

00000094:
0000009d: call R30 with noreturn

000002cf:
000002d1: R16 := R1
000002d5: call R16 with noreturn

00000392: sub frame_dummy(frame_dummy_result)
000003b5: frame_dummy_result :: out u32 = R0

0000010e:
00000110: call @register_tm_clones with noreturn

00000393: sub main(main_argc, main_argv, main_result)
000003b6: main_argc :: in u32 = R0
000003b7: main_argv :: in out u64 = R1
000003b8: main_result :: out u32 = R0

00000112:
00000114: mem := mem with [R31 - 0x30, el]:u64 <- R29
00000116: mem := mem with [R31 - 0x28, el]:u64 <- R30
00000118: R31 := R31 - 0x30
0000011c: R29 := R31
00000120: R0 := 0x10000
00000124: R0 := mem[R0 + 0xFE0, el]:u64
00000128: R1 := mem[R0, el]:u64
0000012c: mem := mem with [R31 + 0x28, el]:u64 <- R1
00000130: R1 := 0
00000134: R0 := 4
00000138: R30 := 0x860
0000013b: call @malloc with return %0000013d

0000013d:
0000013f: mem := mem with [R31 + 0x18, el]:u64 <- R0

R0 is foo
foo = &bar
00000143: R0 := R31 + 0x18

0x18: bar (pointer from malloc)
0x20: foo (R31 + 0x18: pointer to bar)
foo on the stack
00000147: mem := mem with [R31 + 0x20, el]:u64 <- R0

R0 is now foo = bar
0000014b: R0 := mem[R31 + 0x18, el]:u64
0000014f: mem := mem with [R31 + 0x20, el]:u64 <- R0

0x18: bar (pointer from malloc)
0x20: foo = bar (pointer from malloc)

00000153: R0 := mem[R31 + 0x18, el]:u64   // loading value of bar
00000157: #39 := extract:31:0[R0]
00000159: R1 := 0
0000015b: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#39]
0000015f: R0 := mem[R31 + 0x20, el]:u64    // loading value of foo
00000163: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000167: R0 := mem[R31 + 0x20, el]:u64
0000016b: #41 := pad:64[mem[R0, el]:u32]
0000016d: R0 := 0
0000016f: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#41]
00000173: R0 := extend:64[extract:31:0[R0]]
00000177: mem := mem with [R31 + 0x18, el]:u64 <- R0
0000017d: R0 := 0x10000
00000181: R0 := mem[R0 + 0xFE0, el]:u64
00000185: R1 := mem[R31 + 0x28, el]:u64
00000189: R2 := mem[R0, el]:u64
0000018d: #47 := 1 + ~R2 + R1
0000018f: NF := extract:63:63[#47]
00000191: VF := extract:63:63[R1] & extract:63:63[~R2] & ~extract:63:63[#47]
          | ~extract:63:63[R1] & ~extract:63:63[~R2] & extract:63:63[#47]
00000193: ZF := #47 = 0
00000195: CF := extract:63:63[R1] & extract:63:63[~R2] | extract:63:63[~R2] &
          ~extract:63:63[#47] | extract:63:63[R1] & ~extract:63:63[#47]
00000197: R1 := #47
0000019b: R2 := 0
000001a4: #49 := ZF
000001a0: when #49 goto %0000019e
000003a2: goto %00000270

00000270:
00000272: R30 := 0x8B8
00000275: call @__stack_chk_fail with return %0000019e

0000019e:
000001a7: R29 := mem[R31, el]:u64
000001a9: R30 := mem[R31 + 8, el]:u64
000001ab: R31 := R31 + 0x30
000001af: call R30 with noreturn

00000395: sub malloc(malloc_size, malloc_result)
000003b9: malloc_size :: in u64 = R0
000003ba: malloc_result :: out u64 = R0

00000139:
0000030d: R16 := 0x10000
00000311: R17 := mem[R16 + 0xF90, el]:u64
00000315: R16 := R16 + 0xF90
00000319: call R17 with noreturn

00000396: sub register_tm_clones(register_tm_clones_result)
000003bb: register_tm_clones_result :: out u32 = R0

000000a0:
000000a2: R0 := 0x11000
000000a6: R0 := R0 + 0x10
000000aa: R1 := 0x11000
000000ae: R1 := R1 + 0x10
000000b2: R1 := R1 - R0
000000b6: R2 := R1 >> 0x3F
000000ba: R1 := R2 + (R1 ~>> 3)
000000be: #22 := ~(R1 ~>> 1) + 1
000000c0: NF := extract:63:63[#22]
000000c2: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000000c4: ZF := #22 = 0
000000c6: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000000ca: R1 := R1 >> 1
000000d3: #25 := ZF
000000cf: when #25 goto %000000cd
000003a3: goto %000002a6

000002a6:
000002a8: R2 := 0x10000
000002ac: R2 := mem[R2 + 0xFF8, el]:u64
000002b4: #97 := R2 = 0
000002b0: when #97 goto %000000cd
000003a4: goto %000002b6

000000cd:
000000d6: call R30 with noreturn

000002b6:
000002b8: R16 := R2
000002bc: call R16 with noreturn
