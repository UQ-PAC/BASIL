var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R2: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R3: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R2: bv64;
var {:extern} R29: bv64;
var {:extern} R3: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2192bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvadd"} bvadd65(bv65, bv65) returns (bv65);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp64(bv64, bv64) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp65(bv65, bv65) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot64(bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_64(bv64) returns (bv65);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_64(bv64) returns (bv65);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2192bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2193bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2194bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2195bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 130408bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 130416bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 131056bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure __stack_chk_fail();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load8_le(mem, 2192bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2193bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2194bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2195bv64) == 0bv8);
  free requires (memory_load64_le(mem, 130408bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 130416bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 131056bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free ensures (memory_load8_le(mem, 2192bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2193bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2194bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2195bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 130408bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 130416bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 131056bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R2, Gamma_R29, Gamma_R3, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R2, R29, R3, R30, R31, mem, stack;
  free requires (memory_load64_le(mem, 131072bv64) == 0bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free requires (memory_load8_le(mem, 2192bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2193bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2194bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2195bv64) == 0bv8);
  free requires (memory_load64_le(mem, 130408bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 130416bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 131056bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 2192bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2193bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2194bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2195bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 130408bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 130416bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 131056bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);

implementation main()
{
  var #4: bv64;
  var #5: bv64;
  var #6: bv64;
  var CF: bv1;
  var Gamma_#4: bool;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var VF: bv1;
  var ZF: bv1;
  lmain:
    assume {:captureState "lmain"} true;
    #4, Gamma_#4 := bvadd64(R31, 18446744073709551552bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #4, R29), gamma_store64(Gamma_stack, #4, Gamma_R29);
    assume {:captureState "%0000032f"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#4, 8bv64), Gamma_R30);
    assume {:captureState "%00000335"} true;
    R31, Gamma_R31 := #4, Gamma_#4;
    R29, Gamma_R29 := R31, Gamma_R31;
    R0, Gamma_R0 := 126976bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4072bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4072bv64)) || L(mem, bvadd64(R0, 4072bv64)));
    call rely();
    R1, Gamma_R1 := memory_load64_le(mem, R0), (gamma_load64(Gamma_mem, R0) || L(mem, R0));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 56bv64), R1), gamma_store64(Gamma_stack, bvadd64(R31, 56bv64), Gamma_R1);
    assume {:captureState "%0000035a"} true;
    R1, Gamma_R1 := 0bv64, true;
    R0, Gamma_R0 := 3bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 40bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 40bv64), Gamma_R0);
    assume {:captureState "%0000036c"} true;
    R0, Gamma_R0 := 7bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 48bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 48bv64), Gamma_R0);
    assume {:captureState "%00000379"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 40bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 40bv64));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    assume {:captureState "%00000388"} true;
    R0, Gamma_R0 := 0bv64, true;
    R1, Gamma_R1 := zero_extend32_32(R0[32:0]), Gamma_R0;
    R0, Gamma_R0 := 126976bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4072bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4072bv64)) || L(mem, bvadd64(R0, 4072bv64)));
    R3, Gamma_R3 := memory_load64_le(stack, bvadd64(R31, 56bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 56bv64));
    call rely();
    R2, Gamma_R2 := memory_load64_le(mem, R0), (gamma_load64(Gamma_mem, R0) || L(mem, R0));
    #5, Gamma_#5 := bvnot64(R2), Gamma_R2;
    #6, Gamma_#6 := bvadd64(R3, bvnot64(R2)), (Gamma_R2 && Gamma_R3);
    VF, Gamma_VF := bvnot1(bvcomp65(sign_extend1_64(bvadd64(#6, 1bv64)), bvadd65(bvadd65(sign_extend1_64(R3), sign_extend1_64(#5)), 1bv65))), (Gamma_#5 && (Gamma_R3 && Gamma_#6));
    CF, Gamma_CF := bvnot1(bvcomp65(zero_extend1_64(bvadd64(#6, 1bv64)), bvadd65(bvadd65(zero_extend1_64(R3), zero_extend1_64(#5)), 1bv65))), (Gamma_#5 && (Gamma_R3 && Gamma_#6));
    ZF, Gamma_ZF := bvcomp64(bvadd64(#6, 1bv64), 0bv64), Gamma_#6;
    NF, Gamma_NF := bvadd64(#6, 1bv64)[64:63], Gamma_#6;
    R3, Gamma_R3 := bvadd64(#6, 1bv64), Gamma_#6;
    R2, Gamma_R2 := 0bv64, true;
    assert Gamma_ZF;
    goto lmain_goto_l000003d9, lmain_goto_l000003f9;
  l000003f9:
    assume {:captureState "l000003f9"} true;
    R30, Gamma_R30 := 2160bv64, true;
    call __stack_chk_fail();
    goto l000003d9;
  l000003d9:
    assume {:captureState "l000003d9"} true;
    R0, Gamma_R0 := zero_extend32_32(R1[32:0]), Gamma_R1;
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 64bv64), Gamma_R31;
    return;
  lmain_goto_l000003d9:
    assume {:captureState "lmain_goto_l000003d9"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l000003d9;
  lmain_goto_l000003f9:
    assume {:captureState "lmain_goto_l000003f9"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l000003f9;
}

