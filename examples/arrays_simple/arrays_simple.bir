00000906: program
000008ea: sub __cxa_finalize(__cxa_finalize_result)
00000907: __cxa_finalize_result :: out u32 = low:32[R0]

00000640:
00000721: R16 := 0x10000
00000728: R17 := mem[R16 + 0xF90, el]:u64
0000072e: R16 := R16 + 0xF90
00000733: call R17 with noreturn

000008eb: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000908: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000374:
00000378: #5 := R31 - 0x20
0000037e: mem := mem with [#5, el]:u64 <- R29
00000384: mem := mem with [#5 + 8, el]:u64 <- R30
00000388: R31 := #5
0000038e: R29 := R31
00000396: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000039b: R19 := 0x11000
000003a2: R0 := pad:64[mem[R19 + 0x10]]
000003a9: when 31:0[R0] <> 0 goto %000003a7
000008ec: goto %00000609

00000609:
0000060c: R0 := 0x10000
00000613: R0 := mem[R0 + 0xFC8, el]:u64
00000619: when R0 = 0 goto %00000617
000008ed: goto %00000630

00000630:
00000633: R0 := 0x11000
0000063a: R0 := mem[R0 + 8, el]:u64
0000063f: R30 := 0x7C0
00000642: call @__cxa_finalize with return %00000617

00000617:
0000061f: R30 := 0x7C4
00000621: call @deregister_tm_clones with return %00000623

00000623:
00000626: R0 := 1
0000062e: mem := mem with [R19 + 0x10] <- 7:0[R0]
000008ee: goto %000003a7

000003a7:
000003b1: R19 := mem[R31 + 0x10, el]:u64
000003b8: R29 := mem[R31, el]:u64
000003bd: R30 := mem[R31 + 8, el]:u64
000003c1: R31 := R31 + 0x20
000003c6: call R30 with noreturn

000008ef: sub __libc_csu_fini(__libc_csu_fini_result)
00000909: __libc_csu_fini_result :: out u32 = low:32[R0]

00000595:
00000598: call R30 with noreturn

000008f0: sub __libc_csu_init(__libc_csu_init_result)
0000090a: __libc_csu_init_result :: out u32 = low:32[R0]

000004a2:
000004a6: #9 := R31 - 0x40
000004ac: mem := mem with [#9, el]:u64 <- R29
000004b2: mem := mem with [#9 + 8, el]:u64 <- R30
000004b6: R31 := #9
000004bc: R29 := R31
000004c2: #10 := R31 + 0x10
000004c8: mem := mem with [#10, el]:u64 <- R19
000004ce: mem := mem with [#10 + 8, el]:u64 <- R20
000004d3: R20 := 0x10000
000004d9: R20 := R20 + 0xD70
000004df: #11 := R31 + 0x20
000004e5: mem := mem with [#11, el]:u64 <- R21
000004eb: mem := mem with [#11 + 8, el]:u64 <- R22
000004f0: R21 := 0x10000
000004f6: R21 := R21 + 0xD68
000004fd: R20 := R20 + ~R21 + 1
00000503: R22 := pad:64[31:0[R0]]
00000509: #12 := R31 + 0x30
0000050f: mem := mem with [#12, el]:u64 <- R23
00000515: mem := mem with [#12 + 8, el]:u64 <- R24
0000051b: R23 := R1
00000521: R24 := R2
00000526: R30 := 0x888
00000529: call @_init with return %0000052b

0000052b:
0000052f: #13 := ~(R20 ~>> 3)
00000533: #14 := ~(R20 ~>> 3) + 1
00000538: VF := extend:65[#14] <> extend:65[#13] + 1
0000053d: CF := pad:65[#14] <> pad:65[#13] + 1
00000541: ZF := #14 = 0
00000545: NF := 63:63[#14]
0000054b: when ZF goto %00000549
000008f1: goto %0000059a

0000059a:
000005a0: R20 :=

          >> 3 | R20 << 0x3D]
000005a5: R19 := 0
000008f2: goto %000005a7

000005a7:
000005ad: R3 := mem[R21 + (60:0[R19].0), el]:u64
000005b3: R2 := R24
000005b9: R19 := R19 + 1
000005bf: R1 := R23
000005c5: R0 := pad:64[31:0[R22]]
000005ca: R30 := 0x8B0
000005cd: call R3 with return %000005cf

000005cf:
000005d3: #18 := ~R19
000005d8: #19 := R20 + ~R19 + 1
000005de: VF := extend:65[#19] <> extend:65[R20] + extend:65[#18] + 1
000005e4: CF := pad:65[#19] <> pad:65[R20] + pad:65[#18] + 1
000005e8: ZF := #19 = 0
000005ec: NF := 63:63[#19]
000005f1: when ZF <> 1 goto %000005a7
000008f3: goto %00000549

00000549:
00000552: #15 := R31 + 0x10
00000557: R19 := mem[#15, el]:u64
0000055c: R20 := mem[#15 + 8, el]:u64
00000562: #16 := R31 + 0x20
00000567: R21 := mem[#16, el]:u64
0000056c: R22 := mem[#16 + 8, el]:u64
00000572: #17 := R31 + 0x30
00000577: R23 := mem[#17, el]:u64
0000057c: R24 := mem[#17 + 8, el]:u64
00000583: R29 := mem[R31, el]:u64
00000588: R30 := mem[R31 + 8, el]:u64
0000058c: R31 := R31 + 0x40
00000591: call R30 with noreturn

000008f4: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000090b: __libc_start_main_main :: in u64 = R0
0000090c: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000090d: __libc_start_main_arg3 :: in out u64 = R2
0000090e: __libc_start_main_auxv :: in out u64 = R3
0000090f: __libc_start_main_result :: out u32 = low:32[R0]

000002b2:
00000737: R16 := 0x10000
0000073e: R17 := mem[R16 + 0xF98, el]:u64
00000744: R16 := R16 + 0xF98
00000749: call R17 with noreturn

000008f5: sub _fini(_fini_result)
00000910: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

000008f6: sub _init(_init_result)
00000911: _init_result :: out u32 = low:32[R0]

00000527:
00000817: #21 := R31 - 0x10
0000081d: mem := mem with [#21, el]:u64 <- R29
00000823: mem := mem with [#21 + 8, el]:u64 <- R30
00000827: R31 := #21
0000082d: R29 := R31
00000832: R30 := 0x664
00000834: call @call_weak_fn with return %00000836

00000836:
0000083b: R29 := mem[R31, el]:u64
00000840: R30 := mem[R31 + 8, el]:u64
00000844: R31 := R31 + 0x10
00000849: call R30 with noreturn

000008f7: sub _start(_start_result)
00000912: _start_result :: out u32 = low:32[R0]

00000267:
0000026a: R29 := 0
0000026f: R30 := 0
00000275: R5 := R0
0000027c: R1 := mem[R31, el]:u64
00000282: R2 := R31 + 8
00000288: R6 := R31
0000028d: R0 := 0x10000
00000294: R0 := mem[R0 + 0xFF0, el]:u64
00000299: R3 := 0x10000
000002a0: R3 := mem[R3 + 0xFE8, el]:u64
000002a5: R4 := 0x10000
000002ac: R4 := mem[R4 + 0xFB8, el]:u64
000002b1: R30 := 0x704
000002b4: call @__libc_start_main with return %000002b6

000002b6:
000002b9: R30 := 0x708
000002bc: call @abort with return %000008f8

000008f8:
000008f9: call @call_weak_fn with noreturn

000008fa: sub abort()


000002ba:
00000763: R16 := 0x10000
0000076a: R17 := mem[R16 + 0xFA8, el]:u64
00000770: R16 := R16 + 0xFA8
00000775: call R17 with noreturn

000008fb: sub call_weak_fn(call_weak_fn_result)
00000913: call_weak_fn_result :: out u32 = low:32[R0]

000002be:
000002c1: R0 := 0x10000
000002c8: R0 := mem[R0 + 0xFD8, el]:u64
000002ce: when R0 = 0 goto %000002cc
000008fc: goto %00000680

000002cc:
000002d4: call R30 with noreturn

00000680:
00000683: goto @__gmon_start__

00000681:
0000074d: R16 := 0x10000
00000754: R17 := mem[R16 + 0xFA0, el]:u64
0000075a: R16 := R16 + 0xFA0
0000075f: call R17 with noreturn

000008fd: sub deregister_tm_clones(deregister_tm_clones_result)
00000914: deregister_tm_clones_result :: out u32 = low:32[R0]

000002d8:
000002db: R0 := 0x11000
000002e1: R0 := R0 + 0x10
000002e6: R1 := 0x11000
000002ec: R1 := R1 + 0x10
000002f2: #1 := ~R0
000002f7: #2 := R1 + ~R0 + 1
000002fd: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
00000303: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
00000307: ZF := #2 = 0
0000030b: NF := 63:63[#2]
00000311: when ZF goto %0000030f
000008fe: goto %00000662

00000662:
00000665: R1 := 0x10000
0000066c: R1 := mem[R1 + 0xFC0, el]:u64
00000671: when R1 = 0 goto %0000030f
000008ff: goto %00000675

0000030f:
00000317: call R30 with noreturn

00000675:
00000679: R16 := R1
0000067e: call R16 with noreturn

00000900: sub frame_dummy(frame_dummy_result)
00000915: frame_dummy_result :: out u32 = low:32[R0]

000003c8:
000003ca: call @register_tm_clones with noreturn

00000901: sub main(main_argc, main_argv, main_result)
00000916: main_argc :: in u32 = low:32[R0]
00000917: main_argv :: in out u64 = R1
00000918: main_result :: out u32 = low:32[R0]

000003cc:
000003d0: #6 := R31 - 0x40
000003d6: mem := mem with [#6, el]:u64 <- R29
000003dc: mem := mem with [#6 + 8, el]:u64 <- R30
000003e0: R31 := #6
000003e6: R29 := R31
000003eb: R0 := 0x10000
000003f2: R0 := mem[R0 + 0xFE0, el]:u64
000003f9: R1 := mem[R0, el]:u64
00000401: mem := mem with [R31 + 0x38, el]:u64 <- R1
00000406: R1 := 0
0000040b: R0 := 3
00000413: mem := mem with [R31 + 0x28, el]:u32 <- 31:0[R0]
00000418: R0 := 7
00000420: mem := mem with [R31 + 0x30, el]:u32 <- 31:0[R0]
00000427: R0 := pad:64[mem[R31 + 0x28, el]:u32]
0000042f: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000434: R0 := 0
0000043a: R1 := pad:64[31:0[R0]]
0000043f: R0 := 0x10000
00000446: R0 := mem[R0 + 0xFE0, el]:u64
0000044d: R2 := mem[R31 + 0x38, el]:u64
00000454: R3 := mem[R0, el]:u64
0000045a: #7 := ~R3
0000045f: #8 := R2 + ~R3 + 1
00000465: VF := extend:65[#8] <> extend:65[R2] + extend:65[#7] + 1
0000046b: CF := pad:65[#8] <> pad:65[R2] + pad:65[#7] + 1
0000046f: ZF := #8 = 0
00000473: NF := 63:63[#8]
00000477: R2 := #8
0000047c: R3 := 0
00000482: when ZF goto %00000480
00000902: goto %000005f5

000005f5:
000005f8: R0 := 0x10000
000005ff: R0 := mem[R0 + 0xFD0, el]:u64
00000604: R30 := 0x840
00000607: call R0 with return %00000480

00000480:
00000489: R0 := pad:64[31:0[R1]]
00000490: R29 := mem[R31, el]:u64
00000495: R30 := mem[R31 + 8, el]:u64
00000499: R31 := R31 + 0x40
0000049e: call R30 with noreturn

00000903: sub register_tm_clones(register_tm_clones_result)
00000919: register_tm_clones_result :: out u32 = low:32[R0]

00000319:
0000031c: R0 := 0x11000
00000322: R0 := R0 + 0x10
00000327: R1 := 0x11000
0000032d: R1 := R1 + 0x10
00000334: R1 := R1 + ~R0 + 1
0000033b: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000342: R1 := R2 + (R1 ~>> 3)
00000348: #3 := ~(R1 ~>> 1)
0000034c: #4 := ~(R1 ~>> 1) + 1
00000351: VF := extend:65[#4] <> extend:65[#3] + 1
00000356: CF := pad:65[#4] <> pad:65[#3] + 1
0000035a: ZF := #4 = 0
0000035e: NF := 63:63[#4]
00000366: R1 :=

          >> 1 | R1 << 0x3F]
0000036c: when ZF goto %0000036a
00000904: goto %00000644

00000644:
00000647: R2 := 0x10000
0000064e: R2 := mem[R2 + 0xFF8, el]:u64
00000653: when R2 = 0 goto %0000036a
00000905: goto %00000657

0000036a:
00000372: call R30 with noreturn

00000657:
0000065b: R16 := R2
00000660: call R16 with noreturn
