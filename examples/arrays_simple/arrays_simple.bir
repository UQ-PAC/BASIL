00000383: program
0000035a: sub __cxa_finalize(__cxa_finalize_result)
00000384: __cxa_finalize_result :: out u32 = R0

00000291:
000002ec: R16 := 0x10000
000002f0: R17 := mem[R16 + 0xF90, el]:u64
000002f4: R16 := R16 + 0xF90
000002f8: call R17 with noreturn

0000035b: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000385: __do_global_dtors_aux_result :: out u32 = R0

000000d9:
000000db: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000dd: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000df: R31 := R31 - 0x20
000000e3: R29 := R31
000000e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000eb: R19 := 0x11000
000000ef: #28 := pad:64[mem[R19 + 0x10]]
000000f1: R0 := 0
000000f3: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
000000fc: #29 := extract:31:0[R0] <> 0
000000f8: when #29 goto %000000f6
00000375: goto %00000266

00000266:
00000268: R0 := 0x10000
0000026c: R0 := mem[R0 + 0xFD0, el]:u64
00000275: #99 := R0 = 0
00000271: when #99 goto %0000026f
00000376: goto %00000286

00000286:
00000288: R0 := 0x11000
0000028c: R0 := mem[R0 + 8, el]:u64
00000290: R30 := 0x7D0
00000293: call @__cxa_finalize with return %0000026f

0000026f:
00000278: R30 := 0x7D4
0000027a: call @deregister_tm_clones with return %0000027c

0000027c:
0000027e: R0 := 0
00000280: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000284: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
00000377: goto %000000f6

000000f6:
000000ff: R19 := mem[R31 + 0x10, el]:u64
00000103: R29 := mem[R31, el]:u64
00000105: R30 := mem[R31 + 8, el]:u64
00000107: R31 := R31 + 0x20
0000010b: call R30 with noreturn

0000035f: sub __libc_csu_fini(__libc_csu_fini_result)
00000386: __libc_csu_fini_result :: out u32 = R0

0000021f:
00000221: call R30 with noreturn

00000360: sub __libc_csu_init(__libc_csu_init_result)
00000387: __libc_csu_init_result :: out u32 = R0

000001a1:
000001a3: mem := mem with [R31 - 0x40, el]:u64 <- R29
000001a5: mem := mem with [R31 - 0x38, el]:u64 <- R30
000001a7: R31 := R31 - 0x40
000001ab: R29 := R31
000001af: mem := mem with [R31, el]:u64 <- R31 + 0x20
000001b1: mem := mem with [R31, el]:u64 <- R31 + 0x28
000001b5: R20 := 0x10000
000001b9: R20 := R20 + 0xD70
000001bd: mem := mem with [R31, el]:u64 <- R31 + 0x40
000001bf: mem := mem with [R31, el]:u64 <- R31 + 0x48
000001c3: R21 := 0x10000
000001c7: R21 := R21 + 0xD68
000001cb: R20 := R20 - R21
000001cf: #64 := extract:31:0[R0]
000001d1: R22 := 0
000001d3: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#64]
000001d7: mem := mem with [R31, el]:u64 <- R31 + 0x60
000001d9: mem := mem with [R31, el]:u64 <- R31 + 0x68
000001dd: R23 := R1
000001e1: R24 := R2
000001e5: R30 := 0x890
000001e8: call @_init with return %000001ea

000001ea:
000001ec: #75 := ~(R20 ~>> 3) + 1
000001ee: NF := extract:63:63[#75]
000001f0: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#75]
000001f2: ZF := #75 = 0
000001f4: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#75]
000001fd: #77 := ZF
000001f9: when #77 goto %000001f7
00000378: goto %00000224

00000224:
00000226: R20 := R20 >> 3
0000022a: R19 := 0
00000379: goto %0000022c

0000022c:
0000022e: R3 := mem[R21 + (R19 << 3), el]:u64
00000232: R2 := R24
00000236: R19 := R19 + 1
0000023a: R1 := R23
0000023e: #92 := extract:31:0[R22]
00000240: R0 := 0
00000242: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#92]
00000246: R30 := 0x8B8
00000248: call R3 with return %0000024b

0000024b:
0000024d: #96 := 1 + ~R19 + R20
0000024f: NF := extract:63:63[#96]
00000251: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#96] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#96]
00000253: ZF := #96 = 0
00000255: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#96] | extract:63:63[R20] &
          ~extract:63:63[#96]
0000025d: #98 := ~ZF <> 0
00000259: when #98 goto %0000022c
0000037a: goto %000001f7

000001f7:
00000200: R19 := mem[R31 + 0x10, el]:u64
00000202: R20 := mem[R31 + 0x18, el]:u64
00000206: R21 := mem[R31 + 0x20, el]:u64
00000208: R22 := mem[R31 + 0x28, el]:u64
0000020c: R23 := mem[R31 + 0x30, el]:u64
0000020e: R24 := mem[R31 + 0x38, el]:u64
00000212: R29 := mem[R31, el]:u64
00000214: R30 := mem[R31 + 8, el]:u64
00000216: R31 := R31 + 0x40
0000021a: call R30 with noreturn

00000364: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000388: __libc_start_main_main :: in u64 = R0
00000389: __libc_start_main_arg2 :: in u32 = R1
0000038a: __libc_start_main_arg3 :: in out u64 = R2
0000038b: __libc_start_main_auxv :: in out u64 = R3
0000038c: __libc_start_main_result :: out u32 = R0

00000055:
000002fc: R16 := 0x10000
00000300: R17 := mem[R16 + 0xF98, el]:u64
00000304: R16 := R16 + 0xF98
00000308: call R17 with noreturn

00000365: sub __stack_chk_fail(__stack_chk_fail_result)
0000038d: __stack_chk_fail_result :: out u32 = R0

00000262:
0000030c: R16 := 0x10000
00000310: R17 := mem[R16 + 0xFA0, el]:u64
00000314: R16 := R16 + 0xFA0
00000318: call R17 with noreturn

00000366: sub _fini(_fini_result)
0000038e: _fini_result :: out u32 = R0

00000009:
0000000b: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000d: mem := mem with [R31 - 8, el]:u64 <- R30
0000000f: R31 := R31 - 0x10
00000013: R29 := R31
00000017: R29 := mem[R31, el]:u64
00000019: R30 := mem[R31 + 8, el]:u64
0000001b: R31 := R31 + 0x10
0000001f: call R30 with noreturn

00000367: sub _init(_init_result)
0000038f: _init_result :: out u32 = R0

000001e6:
0000033c: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000033e: mem := mem with [R31 - 8, el]:u64 <- R30
00000340: R31 := R31 - 0x10
00000344: R29 := R31
00000348: R30 := 0x664
0000034a: call @call_weak_fn with return %0000034c

0000034c:
0000034e: R29 := mem[R31, el]:u64
00000350: R30 := mem[R31 + 8, el]:u64
00000352: R31 := R31 + 0x10
00000356: call R30 with noreturn

00000368: sub _start(_start_result)
00000390: _start_result :: out u32 = R0

00000022:
00000024: R29 := 0
00000028: R30 := 0
0000002c: R5 := R0
00000030: R1 := mem[R31, el]:u64
00000034: R2 := R31 + 8
00000038: R6 := R31
0000003c: R0 := 0x10000
00000040: R0 := mem[R0 + 0xFF0, el]:u64
00000044: R3 := 0x10000
00000048: R3 := mem[R3 + 0xFE8, el]:u64
0000004c: R4 := 0x10000
00000050: R4 := mem[R4 + 0xFC0, el]:u64
00000054: R30 := 0x714
00000057: call @__libc_start_main with return %00000059

00000059:
0000005b: R30 := 0x718
0000005e: call @abort with return %0000037b

0000037b:
0000037c: call @call_weak_fn with noreturn

0000036b: sub abort()


0000005c:
0000032c: R16 := 0x10000
00000330: R17 := mem[R16 + 0xFB0, el]:u64
00000334: R16 := R16 + 0xFB0
00000338: call R17 with noreturn

0000036c: sub call_weak_fn(call_weak_fn_result)
00000391: call_weak_fn_result :: out u32 = R0

00000060:
00000062: R0 := 0x10000
00000066: R0 := mem[R0 + 0xFD8, el]:u64
0000006f: #5 := R0 = 0
0000006b: when #5 goto %00000069
0000037d: goto %000002c7

00000069:
00000072: call R30 with noreturn

000002c7:
000002ca: goto @__gmon_start__

000002c8:
0000031c: R16 := 0x10000
00000320: R17 := mem[R16 + 0xFA8, el]:u64
00000324: R16 := R16 + 0xFA8
00000328: call R17 with noreturn

0000036e: sub deregister_tm_clones(deregister_tm_clones_result)
00000392: deregister_tm_clones_result :: out u32 = R0

00000077:
00000079: R0 := 0x11000
0000007d: R0 := R0 + 0x10
00000081: R1 := 0x11000
00000085: R1 := R1 + 0x10
00000089: #9 := 1 + ~R0 + R1
0000008b: NF := extract:63:63[#9]
0000008d: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
0000008f: ZF := #9 = 0
00000091: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
0000009a: #11 := ZF
00000096: when #11 goto %00000094
0000037e: goto %000002ae

000002ae:
000002b0: R1 := 0x10000
000002b4: R1 := mem[R1 + 0xFC8, el]:u64
000002bc: #105 := R1 = 0
000002b8: when #105 goto %00000094
0000037f: goto %000002be

00000094:
0000009d: call R30 with noreturn

000002be:
000002c0: R16 := R1
000002c4: call R16 with noreturn

00000371: sub frame_dummy(frame_dummy_result)
00000393: frame_dummy_result :: out u32 = R0

0000010e:
00000110: call @register_tm_clones with noreturn

00000372: sub main(main_argc, main_argv, main_result)
00000394: main_argc :: in u32 = R0
00000395: main_argv :: in out u64 = R1
00000396: main_result :: out u32 = R0

00000112:
00000114: mem := mem with [R31 - 0x40, el]:u64 <- R29
00000116: mem := mem with [R31 - 0x38, el]:u64 <- R30
00000118: R31 := R31 - 0x40
0000011c: R29 := R31
00000120: R0 := 0x10000
00000124: R0 := mem[R0 + 0xFE0, el]:u64
00000128: R1 := mem[R0, el]:u64
0000012c: mem := mem with [R31 + 0x38, el]:u64 <- R1
00000130: R1 := 0
00000134: R0 := 0
00000136: R0 := R0 & 0xFFFFFFFF00000000 | 3
0000013a: mem := mem with [R31 + 0x28, el]:u32 <- low:32[extract:31:0[R0]]
0000013e: R0 := 0
00000140: R0 := R0 & 0xFFFFFFFF00000000 | 7
00000144: mem := mem with [R31 + 0x30, el]:u32 <- low:32[extract:31:0[R0]]
00000148: #37 := pad:64[mem[R31 + 0x28, el]:u32]
0000014a: R0 := 0
0000014c: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#37]
00000150: mem := mem with [R31 + 0x1C, el]:u32 <- low:32[extract:31:0[R0]]
00000154: R0 := 0
00000156: R0 := R0 & 0xFFFFFFFF00000000
0000015a: #43 := extract:31:0[R0]
0000015c: R1 := 0
0000015e: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#43]
00000162: R0 := 0x10000
00000166: R0 := mem[R0 + 0xFE0, el]:u64
0000016a: R2 := mem[R31 + 0x38, el]:u64
0000016e: R3 := mem[R0, el]:u64
00000172: #47 := 1 + ~R3 + R2
00000174: NF := extract:63:63[#47]
00000176: VF := extract:63:63[R2] & extract:63:63[~R3] & ~extract:63:63[#47]
          | ~extract:63:63[R2] & ~extract:63:63[~R3] & extract:63:63[#47]
00000178: ZF := #47 = 0
0000017a: CF := extract:63:63[R2] & extract:63:63[~R3] | extract:63:63[~R3] &
          ~extract:63:63[#47] | extract:63:63[R2] & ~extract:63:63[#47]
0000017c: R2 := #47
00000180: R3 := 0
00000189: #49 := ZF
00000185: when #49 goto %00000183
00000380: goto %0000025f

0000025f:
00000261: R30 := 0x848
00000264: call @__stack_chk_fail with return %00000183

00000183:
0000018c: #53 := extract:31:0[R1]
0000018e: R0 := 0
00000190: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#53]
00000194: R29 := mem[R31, el]:u64
00000196: R30 := mem[R31 + 8, el]:u64
00000198: R31 := R31 + 0x40
0000019c: call R30 with noreturn

00000374: sub register_tm_clones(register_tm_clones_result)
00000397: register_tm_clones_result :: out u32 = R0

000000a0:
000000a2: R0 := 0x11000
000000a6: R0 := R0 + 0x10
000000aa: R1 := 0x11000
000000ae: R1 := R1 + 0x10
000000b2: R1 := R1 - R0
000000b6: R2 := R1 >> 0x3F
000000ba: R1 := R2 + (R1 ~>> 3)
000000be: #22 := ~(R1 ~>> 1) + 1
000000c0: NF := extract:63:63[#22]
000000c2: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000000c4: ZF := #22 = 0
000000c6: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000000ca: R1 := R1 >> 1
000000d3: #25 := ZF
000000cf: when #25 goto %000000cd
00000381: goto %00000295

00000295:
00000297: R2 := 0x10000
0000029b: R2 := mem[R2 + 0xFF8, el]:u64
000002a3: #101 := R2 = 0
0000029f: when #101 goto %000000cd
00000382: goto %000002a5

000000cd:
000000d6: call R30 with noreturn

000002a5:
000002a7: R16 := R2
000002ab: call R16 with noreturn
