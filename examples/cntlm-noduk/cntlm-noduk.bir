00035e22: program
00035711: sub __assert_fail(__assert_fail_result)
00035e23: __assert_fail_result :: out u32 = low:32[R0]

00010e2d:
0003113b: R16 := 0x42F000
00031142: R17 := mem[R16 + 0xEA0, el]:u64
00031148: R16 := R16 + 0xEA0
0003114d: call R17 with noreturn

00035712: sub __ctype_b_loc(__ctype_b_loc_result)
00035e24: __ctype_b_loc_result :: out u32 = low:32[R0]

0001134e:
00030e7b: R16 := 0x42F000
00030e82: R17 := mem[R16 + 0xDA0, el]:u64
00030e88: R16 := R16 + 0xDA0
00030e8d: call R17 with noreturn

00035713: sub __ctype_tolower_loc(__ctype_tolower_loc_result)
00035e25: __ctype_tolower_loc_result :: out u32 = low:32[R0]

00017e42:
00030a9d: R16 := 0x42F000
00030aa4: R17 := mem[R16 + 0xC38, el]:u64
00030aaa: R16 := R16 + 0xC38
00030aaf: call R17 with noreturn

00035714: sub __ctype_toupper_loc(__ctype_toupper_loc_result)
00035e26: __ctype_toupper_loc_result :: out u32 = low:32[R0]

000180af:
00030cc3: R16 := 0x42F000
00030cca: R17 := mem[R16 + 0xD00, el]:u64
00030cd0: R16 := R16 + 0xD00
00030cd5: call R17 with noreturn

00035715: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00035e27: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0002cfb6:
0002cfba: #1343 := R31 - 0x20
0002cfc0: mem := mem with [#1343, el]:u64 <- R29
0002cfc6: mem := mem with [#1343 + 8, el]:u64 <- R30
0002cfca: R31 := #1343
0002cfd0: R29 := R31
0002cfd8: mem := mem with [R31 + 0x10, el]:u64 <- R19
0002cfdd: R19 := 0x430000
0002cfe4: R0 := pad:64[mem[R19 + 0x38]]
0002cfea: when 0:0[R0] goto %0002cfe8
00035716: goto %0002d740

0002d740:
0002d743: R30 := 0x404F2C
0002d745: call @deregister_tm_clones with return %0002d747

0002d747:
0002d74a: R0 := 1
0002d752: mem := mem with [R19 + 0x38] <- 7:0[R0]
00035717: goto %0002cfe8

0002cfe8:
0002cff2: R19 := mem[R31 + 0x10, el]:u64
0002cff9: R29 := mem[R31, el]:u64
0002cffe: R30 := mem[R31 + 8, el]:u64
0002d002: R31 := R31 + 0x20
0002d007: call R30 with noreturn

00035718: sub __errno_location(__errno_location_result)
00035e28: __errno_location_result :: out u64 = R0

00012076:
00031151: R16 := 0x42F000
00031158: R17 := mem[R16 + 0xEA8, el]:u64
0003115e: R16 := R16 + 0xEA8
00031163: call R17 with noreturn

00035719: sub __fdelt_chk(__fdelt_chk_result)
00035e29: __fdelt_chk_result :: out u32 = low:32[R0]

0001e41a:
00030bbb: R16 := 0x42F000
00030bc2: R17 := mem[R16 + 0xCA0, el]:u64
00030bc8: R16 := R16 + 0xCA0
00030bcd: call R17 with noreturn

0003571a: sub __fprintf_chk(__fprintf_chk_result)
00035e2a: __fprintf_chk_result :: out u32 = low:32[R0]

00010e95:
00030e4f: R16 := 0x42F000
00030e56: R17 := mem[R16 + 0xD90, el]:u64
00030e5c: R16 := R16 + 0xD90
00030e61: call R17 with noreturn

0003571b: sub __fread_chk(__fread_chk_result)
00035e2b: __fread_chk_result :: out u32 = low:32[R0]

000140a6:
00030d31: R16 := 0x42F000
00030d38: R17 := mem[R16 + 0xD28, el]:u64
00030d3e: R16 := R16 + 0xD28
00030d43: call R17 with noreturn

0003571c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00035e2c: __libc_start_main_main :: in u64 = R0
00035e2d: __libc_start_main_arg2 :: in u32 = low:32[R1]
00035e2e: __libc_start_main_arg3 :: in out u64 = R2
00035e2f: __libc_start_main_auxv :: in out u64 = R3
00035e30: __libc_start_main_result :: out u32 = low:32[R0]

0002cf02:
000309ab: R16 := 0x42F000
000309b2: R17 := mem[R16 + 0xBE0, el]:u64
000309b8: R16 := R16 + 0xBE0
000309bd: call R17 with noreturn

0003571d: sub __memcpy_chk(__memcpy_chk_result)
00035e31: __memcpy_chk_result :: out u32 = low:32[R0]

00018533:
00030ac9: R16 := 0x42F000
00030ad0: R17 := mem[R16 + 0xC48, el]:u64
00030ad6: R16 := R16 + 0xC48
00030adb: call R17 with noreturn

0003571e: sub __memset_chk(__memset_chk_result)
00035e32: __memset_chk_result :: out u32 = low:32[R0]

0001c118:
00030d9f: R16 := 0x42F000
00030da6: R17 := mem[R16 + 0xD50, el]:u64
00030dac: R16 := R16 + 0xD50
00030db1: call R17 with noreturn

0003571f: sub __posix_getopt(__posix_getopt_result)
00035e33: __posix_getopt_result :: out u32 = low:32[R0]

0002bda7:
00030c29: R16 := 0x42F000
00030c30: R17 := mem[R16 + 0xCC8, el]:u64
00030c36: R16 := R16 + 0xCC8
00030c3b: call R17 with noreturn

00035720: sub __printf_chk(__printf_chk_result)
00035e34: __printf_chk_result :: out u32 = low:32[R0]

00011667:
00030be7: R16 := 0x42F000
00030bee: R17 := mem[R16 + 0xCB0, el]:u64
00030bf4: R16 := R16 + 0xCB0
00030bf9: call R17 with noreturn

00035721: sub __read_chk(__read_chk_result)
00035e35: __read_chk_result :: out u32 = low:32[R0]

0001eabc:
00030f99: R16 := 0x42F000
00030fa0: R17 := mem[R16 + 0xE08, el]:u64
00030fa6: R16 := R16 + 0xE08
00030fab: call R17 with noreturn

00035722: sub __snprintf_chk(__snprintf_chk_result)
00035e36: __snprintf_chk_result :: out u32 = low:32[R0]

00017dcc:
00030af5: R16 := 0x42F000
00030afc: R17 := mem[R16 + 0xC58, el]:u64
00030b02: R16 := R16 + 0xC58
00030b07: call R17 with noreturn

00035723: sub __stack_chk_fail(__stack_chk_fail_result)
00035e37: __stack_chk_fail_result :: out u32 = low:32[R0]

00011f9e:
00030d05: R16 := 0x42F000
00030d0c: R17 := mem[R16 + 0xD18, el]:u64
00030d12: R16 := R16 + 0xD18
00030d17: call R17 with noreturn

00035724: sub __strlcat_chk(__strlcat_chk_result)
00035e38: __strlcat_chk_result :: out u32 = low:32[R0]

0002296d:
00030f6d: R16 := 0x42F000
00030f74: R17 := mem[R16 + 0xDF8, el]:u64
00030f7a: R16 := R16 + 0xDF8
00030f7f: call R17 with noreturn

00035725: sub __strlcpy_chk(__strlcpy_chk_result)
00035e39: __strlcpy_chk_result :: out u32 = low:32[R0]

000196c3:
00030f83: R16 := 0x42F000
00030f8a: R17 := mem[R16 + 0xE00, el]:u64
00030f90: R16 := R16 + 0xE00
00030f95: call R17 with noreturn

00035726: sub __syslog_chk(__syslog_chk_result)
00035e3a: __syslog_chk_result :: out u32 = low:32[R0]

000120b4:
00030ff1: R16 := 0x42F000
00030ff8: R17 := mem[R16 + 0xE28, el]:u64
00030ffe: R16 := R16 + 0xE28
00031003: call R17 with noreturn

00035727: sub _dl_relocate_static_pie(_dl_relocate_static_pie_result)
00035e3b: _dl_relocate_static_pie_result :: out u32 = low:32[R0]

0002cf16:
0002cf19: call R30 with noreturn

00035728: sub _fini(_fini_result)
00035e3c: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00035729: sub _init(_init_result)
00035e3d: _init_result :: out u32 = low:32[R0]

00031219:
0003121f: #1408 := R31 - 0x10
00031225: mem := mem with [#1408, el]:u64 <- R29
0003122b: mem := mem with [#1408 + 8, el]:u64 <- R30
0003122f: R31 := #1408
00031235: R29 := R31
0003123a: R30 := 0x402268
0003123c: call @call_weak_fn with return %0003123e

0003123e:
00031243: R29 := mem[R31, el]:u64
00031248: R30 := mem[R31 + 8, el]:u64
0003124c: R31 := R31 + 0x10
00031251: call R30 with noreturn

0003572a: sub _start(_start_result)
00035e3e: _start_result :: out u32 = low:32[R0]

0002cec4:
0002cec9: R29 := 0
0002cece: R30 := 0
0002ced4: R5 := R0
0002cedb: R1 := mem[R31, el]:u64
0002cee1: R2 := R31 + 8
0002cee7: R6 := R31
0002ceec: R0 := 0x404000
0002cef2: R0 := R0 + 0xE74
0002cef7: R3 := 0
0002cefc: R4 := 0
0002cf01: R30 := 0x404E70
0002cf04: call @__libc_start_main with return %0002cf06

0002cf06:
0002cf09: R30 := 0x404E74
0002cf0c: call @abort with return %0002cf0e

0002cf0e:
0002cf12: call @main with noreturn

0003572b: sub abort()


0002cf0a:
00030db5: R16 := 0x42F000
00030dbc: R17 := mem[R16 + 0xD58, el]:u64
00030dc2: R16 := R16 + 0xD58
00030dc7: call R17 with noreturn

0003572c: sub accept(accept_fd, accept_addr, accept_len_ptr, accept_result)
00035e3f: accept_fd :: in u32 = low:32[R0]
00035e40: accept_addr :: in u64 = R1
00035e41: accept_len_ptr :: in out u64 = R2
00035e42: accept_result :: out u32 = low:32[R0]

0002fa37:
00030c3f: R16 := 0x42F000
00030c46: R17 := mem[R16 + 0xCD0, el]:u64
00030c4c: R16 := R16 + 0xCD0
00030c51: call R17 with noreturn

0003572d: sub acl_add(acl_add_result)
00035e43: acl_add_result :: out u32 = low:32[R0]

0002d013:
0002d017: R31 := R31 - 0x60
0002d01c: R3 := 0x42F000
0002d023: R3 := mem[R3 + 0xFB8, el]:u64
0002d029: #1344 := R31 + 0x20
0002d02f: mem := mem with [#1344, el]:u64 <- R29
0002d035: mem := mem with [#1344 + 8, el]:u64 <- R30
0002d03b: R29 := R31 + 0x20
0002d041: #1345 := R31 + 0x40
0002d047: mem := mem with [#1345, el]:u64 <- R21
0002d04d: mem := mem with [#1345 + 8, el]:u64 <- R22
0002d053: R21 := R0
0002d05a: R4 := mem[R3, el]:u64
0002d062: mem := mem with [R31 + 0x18, el]:u64 <- R4
0002d067: R4 := 0
0002d06e: mem := mem with [R31 + 8, el]:u64 <- 0
0002d074: when R0 = 0 goto %0002d072
0003572e: goto %0002d69a

0002d69a:
0002d69e: R0 := R1
0002d6a4: #1366 := R31 + 0x30
0002d6aa: mem := mem with [#1366, el]:u64 <- R19
0002d6b0: mem := mem with [#1366 + 8, el]:u64 <- R20
0002d6b6: #1367 := R31 + 0x50
0002d6bc: mem := mem with [#1367, el]:u64 <- R23
0002d6c2: mem := mem with [#1367 + 8, el]:u64 <- R24
0002d6c8: R23 := pad:64[31:0[R2]]
0002d6cd: R30 := 0x404F94
0002d6cf: call @strdup with return %0002d6d1

0002d6d1:
0002d6d5: R20 := R0
0002d6da: R0 := 8
0002d6df: R30 := 0x404FA0
0002d6e1: call @zmalloc with return %0002d6e3

0002d6e3:
0002d6e7: R22 := R0
0002d6ec: R1 := 0x413000
0002d6f2: R1 := R1 + 0x5C8
0002d6f8: R0 := R20
0002d6fd: R30 := 0x404FB4
0002d6ff: call @strcspn with return %0002d701

0002d701:
0002d705: R19 := R0
0002d70a: R24 := 0x20
0002d710: R0 := R20
0002d715: R30 := 0x404FC4
0002d717: call @strlen with return %0002d719

0002d719:
0002d71d: #1368 := ~R19
0002d722: #1369 := R0 + ~R19
0002d728: VF := extend:128[#1369 + 1] <> extend:128[R0] + extend:128[#1368] +
          1
0002d72e: CF := pad:128[#1369 + 1] <> pad:128[R0] + pad:128[#1368] + 1
0002d732: ZF := #1369 + 1 = 0
0002d736: NF := 63:63[#1369 + 1]
0002d73c: when CF & ~ZF goto %0002d562
0003572f: goto %0002d62a

0002d562:
0002d568: mem := mem with [R20 + R19] <- 0
0002d56e: R24 := R19 + 1
0002d575: R0 := R20 + R24
0002d57b: R1 := R31 + 0x10
0002d580: R2 := 0xA
0002d585: R30 := 0x40513C
0002d587: call @strtol with return %0002d589

0002d589:
0002d58d: #1362 := 31:0[R0] - 0x20
0002d592: VF := extend:64[#1362] <> extend:64[31:0[R0]] - 0x20
0002d597: CF := pad:64[#1362] <> pad:64[31:0[R0]] + 0xFFFFFFE0
0002d59b: ZF := #1362 = 0
0002d59f: NF := 31:31[#1362]
0002d5a6: when CF & ~ZF goto %0002d5a4
00035730: goto %0002d605

0002d605:
0002d60b: R1 := pad:64[mem[R20 + R24]]
0002d610: when 31:0[R1] = 0 goto %0002d5a4
00035731: goto %0002d614

0002d614:
0002d619: R1 := mem[R31 + 0x10, el]:u64
0002d61f: R24 := pad:64[31:0[R0]]
0002d626: R1 := pad:64[mem[R1]]
0002d62c: when 31:0[R1] = 0 goto %0002d62a
00035732: goto %0002d5a4

0002d5a4:
0002d5ac: R2 := 0x413000
0002d5b2: R3 := R20
0002d5b8: R2 := R2 + 0x5D0
00035733: goto %0002d5ba

0002d62a:
0002d634: R0 := pad:64[mem[R20]]
0002d63a: #1365 := 31:0[R0] - 0x2A
0002d63f: VF := extend:64[#1365] <> extend:64[31:0[R0]] - 0x2A
0002d644: CF := pad:64[#1365] <> pad:64[31:0[R0]] + 0xFFFFFFD6
0002d648: ZF := #1365 = 0
0002d64c: NF := 31:31[#1365]
0002d651: when ZF <> 1 goto %0002d25b
00035734: goto %0002d655

0002d655:
0002d65a: R1 := pad:64[mem[R20 + 1]]
0002d660: R4 := pad:64[~31:0[R1] + 1]
0002d665: when 31:0[R1] <> 0 goto %0002d25b
00035735: goto %0002d669

0002d25b:
0002d25f: #1354 := 31:0[R0] - 0x30
0002d264: VF := extend:64[#1354] <> extend:64[31:0[R0]] - 0x30
0002d269: CF := pad:64[#1354] <> pad:64[31:0[R0]] + 0xFFFFFFD0
0002d26d: ZF := #1354 = 0
0002d271: NF := 31:31[#1354]
0002d277: when ZF <> 1 goto %0002d275
00035736: goto %0002d685

0002d685:
0002d68a: R0 := pad:64[mem[R20 + 1]]
0002d68f: when 31:0[R0] <> 0 goto %0002d275
00035737: goto %0002d693

0002d275:
0002d27e: R1 := R20
0002d284: R0 := R31 + 8
0002d289: R2 := 0
0002d28e: R30 := 0x4051B0
0002d290: call @so_resolv with return %0002d292

0002d292:
0002d296: when 31:0[R0] <> 0 goto %0002d294
00035738: goto %0002d670

0002d670:
0002d673: R2 := 0x413000
0002d679: R3 := R20
0002d67f: R2 := R2 + 0x5F0
0002d683: goto %0002d5ba

0002d5ba:
0002d5bd: R1 := 2
0002d5c2: R0 := 3
0002d5c7: R30 := 0x405174
0002d5c9: call @__syslog_chk with return %0002d5cb

0002d5cb:
0002d5cf: R0 := R22
0002d5d4: R30 := 0x40517C
0002d5d6: call @free with return %0002d5d8

0002d5d8:
0002d5dc: R0 := R20
0002d5e1: R30 := 0x405184
0002d5e3: call @free with return %0002d5e5

0002d5e5:
0002d5e9: #1363 := R31 + 0x30
0002d5ee: R19 := mem[#1363, el]:u64
0002d5f3: R20 := mem[#1363 + 8, el]:u64
0002d5f9: #1364 := R31 + 0x50
0002d5fe: R23 := mem[#1364, el]:u64
0002d603: R24 := mem[#1364 + 8, el]:u64
00035739: goto %0002d072

0002d072:
0002d07a: R0 := 0
0002d07f: goto %0002d07d

0002d693:
0002d698: mem := mem with [R22, el]:u32 <- 0
0003573a: goto %0002d294

0002d294:
0002d29d: R4 := pad:64[31:0[R24]]
0002d2a2: goto %0002d2a0

0002d669:
0002d66e: mem := mem with [R22, el]:u32 <- 0
0003573b: goto %0002d2a0

0002d2a0:
0002d2a8: R3 := mem[R31 + 8, el]:u64
0002d2ae: when R3 <> 0 goto %0002d2ac
0003573c: goto %0002d4b8

0002d2ac:
0002d2b6: R19 := pad:64[mem[R3 + 4, el]:u32]
0002d2bc: #1355 := 31:0[R19] - 2
0002d2c1: VF := extend:64[#1355] <> extend:64[31:0[R19]] - 2
0002d2c6: CF := pad:64[#1355] <> pad:64[31:0[R19]] + 0xFFFFFFFE
0002d2ca: ZF := #1355 = 0
0002d2ce: NF := 31:31[#1355]
0002d2d4: when ZF <> 1 goto %0002d2d2
0003573d: goto %0002d358

0002d358:
0002d35d: R24 := mem[R3 + 0x18, el]:u64
0002d362: when R24 = 0 goto %0002d2e0
0003573e: goto %0002d366

0002d366:
0002d369: R1 := 0x20
0002d370: R1 := pad:64[31:0[R1] + ~31:0[R4] + 1]
0002d375: R0 := 1
0002d37c: R2 := pad:64[mem[R24 + 4, el]:u32]
0002d383: R0 := R0 << pad:12[5:0[R1]]
0002d389: R0 := pad:64[~31:0[R0] + 1]
0002d392: R0 := pad:64[7:0[R0].15:8[R0].23:16[R0].31:24[R0]]
0002d39a: mem := mem with [R22, el]:u32 <- 31:0[R2]
0002d3a0: mem := mem with [R22 + 4, el]:u32 <- 31:0[R4]
0002d3a6: #1358 := ~31:0[R0]
0002d3a9: VF := 0
0002d3ac: CF := 0
0002d3b1: ZF := (31:0[R2] & #1358) = 0
0002d3b6: NF := 31:31[R2] & 31:31[#1358]
0002d3bc: when ZF goto %0002d3ba
0003573f: goto %0002d480

0002d480:
0002d485: R0 := pad:64[mem[R24 + 4, el]:u32]
0002d48a: R30 := 0x405040
0002d48c: call @inet_ntoa with return %0002d48e

0002d48e:
0002d492: R3 := R0
0002d499: R4 := pad:64[mem[R22 + 4, el]:u32]
0002d49e: R2 := 0x413000
0002d4a4: R1 := pad:64[31:0[R19]]
0002d4aa: R2 := R2 + 0x650
0002d4af: R0 := 4
0002d4b4: R30 := 0x40505C
0002d4b6: call @__syslog_chk with return %0002d3ba

0002d3ba:
0002d3c3: when 31:0[R23] <> 0 goto %0002d3c1
00035740: goto %0002d475

0002d3c1:
0002d3c9: R19 := 0x413000
0002d3cf: R19 := R19 + 0x5C0
0002d3d4: goto %0002d3d2

0002d475:
0002d478: R19 := 0x413000
0002d47e: R19 := R19 + 0x5B8
00035741: goto %0002d3d2

0002d3d2:
0002d3da: R0 := pad:64[mem[R24 + 4, el]:u32]
0002d3df: R30 := 0x405070
0002d3e2: call @inet_ntoa with return %0002d3e4

0002d3e4:
0002d3e8: R4 := R0
00035742: goto %0002d3ea

0002d2d2:
0002d2dc: R3 := mem[R3 + 0x28, el]:u64
0002d2e2: when R3 = 0 goto %0002d2e0
00035743: goto %0002d2ac

0002d2e0:
0002d2e9: R3 := R20
0002d2ee: R2 := 0x413000
0002d2f4: R2 := R2 + 0x618
0002d2f9: R1 := 2
0002d2fe: R0 := 3
0002d303: R30 := 0x405240
0002d305: call @__syslog_chk with return %0002d307

0002d307:
0002d30b: R0 := R22
0002d310: R30 := 0x405248
0002d312: call @free with return %0002d314

0002d314:
0002d318: R0 := R20
0002d31d: R30 := 0x405250
0002d31f: call @free with return %0002d321

0002d321:
0002d326: R0 := mem[R31 + 8, el]:u64
0002d32b: R30 := 0x405258
0002d32d: call @freeaddrinfo with return %0002d32f

0002d32f:
0002d333: #1356 := R31 + 0x30
0002d338: R19 := mem[#1356, el]:u64
0002d33d: R20 := mem[#1356 + 8, el]:u64
0002d342: R0 := 0
0002d348: #1357 := R31 + 0x50
0002d34d: R23 := mem[#1357, el]:u64
0002d352: R24 := mem[#1357 + 8, el]:u64
0002d356: goto %0002d07d

0002d4b8:
0002d4bb: goto %0002d4b9

0002d4b9:
0002d4bf: R1 := 0x20
0002d4c6: R1 := pad:64[31:0[R1] + ~31:0[R4] + 1]
0002d4cb: R0 := 1
0002d4d2: R2 := pad:64[mem[R22, el]:u32]
0002d4d9: R0 := R0 << pad:12[5:0[R1]]
0002d4df: R0 := pad:64[~31:0[R0] + 1]
0002d4e8: R0 := pad:64[7:0[R0].15:8[R0].23:16[R0].31:24[R0]]
0002d4f0: mem := mem with [R22 + 4, el]:u32 <- 31:0[R4]
0002d4f6: #1361 := ~31:0[R0]
0002d4f9: VF := 0
0002d4fc: CF := 0
0002d501: ZF := (31:0[R2] & #1361) = 0
0002d506: NF := 31:31[R2] & 31:31[#1361]
0002d50c: when ZF goto %0002d50a
00035744: goto %0002d540

0002d540:
0002d543: R2 := 0x413000
0002d549: R3 := R20
0002d54f: R2 := R2 + 0x650
0002d554: R1 := 2
0002d559: R0 := 4
0002d55e: R30 := 0x405204
0002d560: call @__syslog_chk with return %0002d50a

0002d50a:
0002d513: when 31:0[R23] <> 0 goto %0002d511
00035745: goto %0002d52b

0002d511:
0002d519: R19 := 0x413000
0002d51f: R4 := R20
0002d525: R19 := R19 + 0x5C0
0002d529: goto %0002d3ea

0002d52b:
0002d52e: R19 := 0x413000
0002d534: R4 := R20
0002d53a: R19 := R19 + 0x5B8
0002d53e: goto %0002d3ea

0002d3ea:
0002d3ef: R5 := pad:64[mem[R22 + 4, el]:u32]
0002d3f5: R3 := R19
0002d3fa: R1 := 2
0002d3ff: R0 := 6
0002d404: R2 := 0x413000
0002d40a: R2 := R2 + 0x680
0002d40f: R30 := 0x405090
0002d411: call @__syslog_chk with return %0002d413

0002d413:
0002d418: R0 := mem[R21, el]:u64
0002d41e: R1 := pad:64[31:0[R23]]
0002d424: R2 := R22
0002d429: R30 := 0x4050A0
0002d42b: call @plist_add with return %0002d42d

0002d42d:
0002d433: mem := mem with [R21, el]:u64 <- R0
0002d439: R0 := R20
0002d43e: R30 := 0x4050AC
0002d440: call @free with return %0002d442

0002d442:
0002d447: R0 := mem[R31 + 8, el]:u64
0002d44c: R30 := 0x4050B4
0002d44e: call @freeaddrinfo with return %0002d450

0002d450:
0002d454: #1359 := R31 + 0x30
0002d459: R19 := mem[#1359, el]:u64
0002d45e: R20 := mem[#1359 + 8, el]:u64
0002d463: R0 := 1
0002d469: #1360 := R31 + 0x50
0002d46e: R23 := mem[#1360, el]:u64
0002d473: R24 := mem[#1360 + 8, el]:u64
00035746: goto %0002d07d

0002d07d:
0002d083: R1 := 0x42F000
0002d08a: R1 := mem[R1 + 0xFB8, el]:u64
0002d091: R3 := mem[R31 + 0x18, el]:u64
0002d098: R2 := mem[R1, el]:u64
0002d09e: #1346 := ~R2
0002d0a3: #1347 := R3 + ~R2
0002d0a9: VF := extend:128[#1347 + 1] <> extend:128[R3] + extend:128[#1346] +
          1
0002d0af: CF := pad:128[#1347 + 1] <> pad:128[R3] + pad:128[#1346] + 1
0002d0b3: ZF := #1347 + 1 = 0
0002d0b7: NF := 63:63[#1347 + 1]
0002d0bb: R3 := #1347 + 1
0002d0c0: R2 := 0
0002d0c6: when ZF <> 1 goto %0002d0c4
00035747: goto %0002d20d

0002d0c4:
0002d0cd: #1348 := R31 + 0x30
0002d0d3: mem := mem with [#1348, el]:u64 <- R19
0002d0d9: mem := mem with [#1348 + 8, el]:u64 <- R20
0002d0df: #1349 := R31 + 0x50
0002d0e5: mem := mem with [#1349, el]:u64 <- R23
0002d0eb: mem := mem with [#1349 + 8, el]:u64 <- R24
0002d0f0: R30 := 0x405274
0002d0f2: call @__stack_chk_fail with return %00035748

00035748:
00035749: call @acl_check with noreturn

0002d20d:
0002d211: #1352 := R31 + 0x20
0002d216: R29 := mem[#1352, el]:u64
0002d21b: R30 := mem[#1352 + 8, el]:u64
0002d221: #1353 := R31 + 0x40
0002d226: R21 := mem[#1353, el]:u64
0002d22b: R22 := mem[#1353 + 8, el]:u64
0002d231: R31 := R31 + 0x60
0002d236: R1 := 0
0002d23b: R2 := 0
0002d240: R3 := 0
0002d245: R4 := 0
0002d24a: R5 := 0
0002d24f: R16 := 0
0002d254: R17 := 0
0002d259: call R30 with noreturn

0003574a: sub acl_check(acl_check_result)
00035e44: acl_check_result :: out u32 = low:32[R0]

0002d0f4:
0002d0f8: R2 := R0
0002d0fe: when R0 = 0 goto %0002d0fc
0003574b: goto %0002d128

0002d128:
0002d12d: R3 := pad:64[mem[R1, el]:u16]
0002d132: R0 := 0
0002d138: #1350 := 31:0[R3] - 2
0002d13d: VF := extend:64[#1350] <> extend:64[31:0[R3]] - 2
0002d142: CF := pad:64[#1350] <> pad:64[31:0[R3]] + 0xFFFFFFFE
0002d146: ZF := #1350 = 0
0002d14a: NF := 31:31[#1350]
0002d150: when ZF goto %0002d14e
0003574c: goto %0002d1ef

0002d14e:
0002d158: R5 := pad:64[mem[R1 + 4, el]:u32]
0002d15d: R4 := 0x20
0002d162: R3 := 1
0002d167: goto %0002d165

0002d165:
0002d16d: R0 := mem[R2 + 8, el]:u64
0002d174: #1351 := mem[R0 + 4, el]:u32
0002d179: R0 := pad:64[mem[R0, el]:u32]
0002d17d: R1 := pad:64[#1351]
0002d184: R1 := pad:64[31:0[R4] + ~31:0[R1] + 1]
0002d18b: R0 := pad:64[31:0[R5] ^ 31:0[R0]]
0002d192: R1 := R3 << pad:12[5:0[R1]]
0002d198: R1 := pad:64[~31:0[R1] + 1]
0002d1a1: R1 := pad:64[7:0[R1].15:8[R1].23:16[R1].31:24[R1]]
0002d1a6: VF := 0
0002d1a9: CF := 0
0002d1ae: ZF := (31:0[R0] & 31:0[R1]) = 0
0002d1b3: NF := 31:31[R0] & 31:31[R1]
0002d1b9: when ZF <> 1 goto %0002d1b7
0003574d: goto %0002d1ca

0002d1ca:
0002d1cf: R0 := pad:64[mem[R2, el]:u32]
0002d1d4: R1 := 0
0002d1d9: R2 := 0
0002d1de: R3 := 0
0002d1e3: R4 := 0
0002d1e8: R5 := 0
0002d1ed: call R30 with noreturn

0002d1b7:
0002d1c1: R2 := mem[R2 + 0x10, el]:u64
0002d1c6: when R2 = 0 goto %0002d0fc
0003574e: goto %0002d165

0002d0fc:
0002d104: R0 := 0
0002d109: R1 := 0
0002d10e: R2 := 0
0002d113: R3 := 0
0002d118: R4 := 0
0002d11d: R5 := 0
0002d122: call R30 with noreturn

0002d1ef:
0002d1f2: R1 := 0
0002d1f7: R2 := 0
0002d1fc: R3 := 0
0002d201: R4 := 0
0002d206: R5 := 0
0002d20b: call R30 with noreturn

0003574f: sub bind(bind_fd, bind_addr, bind_len, bind_result)
00035e45: bind_fd :: in u32 = low:32[R0]
00035e46: bind_addr :: in u64 = R1
00035e47: bind_len :: in u64 = R2
00035e48: bind_result :: out u32 = low:32[R0]

0001b0cd:
00030a2f: R16 := 0x42F000
00030a36: R17 := mem[R16 + 0xC10, el]:u64
00030a3c: R16 := R16 + 0xC10
00030a41: call R17 with noreturn

00035750: sub call_weak_fn(call_weak_fn_result)
00035e49: call_weak_fn_result :: out u32 = low:32[R0]

0002cf1b:
0002cf1e: R0 := 0x42F000
0002cf25: R0 := mem[R0 + 0xFB0, el]:u64
0002cf2b: when R0 = 0 goto %0002cf29
00035751: goto %0002d790

0002cf29:
0002cf31: call R30 with noreturn

0002d790:
0002d793: goto @__gmon_start__

0002d791:
00030d73: R16 := 0x42F000
00030d7a: R17 := mem[R16 + 0xD40, el]:u64
00030d80: R16 := R16 + 0xD40
00030d85: call R17 with noreturn

00035752: sub chdir(chdir_arg1, chdir_result)
00035e4a: chdir_arg1 :: in u64 = R0
00035e4b: chdir_result :: out u32 = low:32[R0]

0002d7cc:
00030ed3: R16 := 0x42F000
00030eda: R17 := mem[R16 + 0xDC0, el]:u64
00030ee0: R16 := R16 + 0xDC0
00030ee5: call R17 with noreturn

00035753: sub chunked_data_send(chunked_data_send_result)
00035e4c: chunked_data_send_result :: out u32 = low:32[R0]

0001e10c:
0001e113: R31 := R31 - 0x70
0001e118: R2 := 0x42F000
0001e11f: R2 := mem[R2 + 0xFB8, el]:u64
0001e125: #743 := R31 + 0x20
0001e12b: mem := mem with [#743, el]:u64 <- R29
0001e131: mem := mem with [#743 + 8, el]:u64 <- R30
0001e137: R29 := R31 + 0x20
0001e13d: #744 := R31 + 0x30
0001e143: mem := mem with [#744, el]:u64 <- R19
0001e149: mem := mem with [#744 + 8, el]:u64 <- R20
0001e14f: R20 := pad:64[31:0[R0]]
0001e155: #745 := R31 + 0x40
0001e15b: mem := mem with [#745, el]:u64 <- R21
0001e161: mem := mem with [#745 + 8, el]:u64 <- R22
0001e167: R21 := pad:64[31:0[R1]]
0001e16c: R1 := 0x1000
0001e172: #746 := R31 + 0x50
0001e178: mem := mem with [#746, el]:u64 <- R23
0001e17e: mem := mem with [#746 + 8, el]:u64 <- R24
0001e184: R22 := R31 + 4
0001e18a: R23 := R31 + 8
0001e190: #747 := R31 + 0x60
0001e196: mem := mem with [#747, el]:u64 <- R25
0001e19c: mem := mem with [#747 + 8, el]:u64 <- R26
0001e1a2: R24 := R31 + 0x10
0001e1a9: R0 := mem[R2, el]:u64
0001e1b1: mem := mem with [R31 + 0x18, el]:u64 <- R0
0001e1b6: R0 := 0
0001e1be: mem := mem with [R31 + 4, el]:u32 <- 31:0[R1]
0001e1c3: R0 := 0x1000
0001e1ca: mem := mem with [R31 + 0x10, el]:u64 <- 0
0001e1cf: R30 := 0x409588
0001e1d1: call @zmalloc with return %0001e1d3

0001e1d3:
0001e1d9: mem := mem with [R31 + 8, el]:u64 <- R0
00035754: goto %0001e1dd

0001e1dd:
0001e1e1: R2 := R22
0001e1e7: R1 := R23
0001e1ed: R0 := pad:64[31:0[R21]]
0001e1f2: R30 := 0x4095A0
0001e1f4: call @so_recvln with return %0001e1f6

0001e1f6:
0001e1f9: VF := 0
0001e1fc: CF := 1
0001e200: ZF := 31:0[R0] = 0
0001e204: NF := 31:31[R0]
0001e20c: when ~(NF = VF & ~ZF) goto %0001e20a
00035755: goto %0001e74a

0001e20a:
0001e212: R0 := 0x42F000
0001e219: R0 := mem[R0 + 0xF30, el]:u64
0001e220: R0 := pad:64[mem[R0, el]:u32]
0001e226: when 31:0[R0] <> 0 goto %0001e224
00035756: goto %0001e241

0001e224:
0001e22c: R1 := 0x414000
0001e231: R0 := 2
0001e237: R1 := R1 + 0x5F8
0001e23c: R30 := 0x409784
0001e23e: call @__printf_chk with return %0001e240

0001e240:
0001e243: goto %0001e241

0001e74a:
0001e74f: R0 := mem[R31 + 8, el]:u64
0001e755: R1 := R24
0001e75a: R2 := 0x10
0001e75f: R30 := 0x4095B8
0001e762: call @strtol with return %0001e764

0001e764:
0001e768: R19 := R0
0001e76e: R25 := pad:64[31:0[R0]]
0001e773: R30 := 0x4095C4
0001e775: call @__ctype_b_loc with return %0001e777

0001e777:
0001e77c: R1 := mem[R31 + 0x10, el]:u64
0001e783: R0 := mem[R0, el]:u64
0001e78a: R2 := pad:64[mem[R1]]
0001e790: #772 := 31:0[R2] - 0x3B
0001e795: VF := extend:64[#772] <> extend:64[31:0[R2]] - 0x3B
0001e79a: CF := pad:64[#772] <> pad:64[31:0[R2]] + 0xFFFFFFC5
0001e79e: ZF := #772 = 0
0001e7a2: NF := 31:31[#772]
0001e7a8: R2 := pad:64[7:0[R2].0]
0001e7b0: R0 := pad:64[mem[R0 + R2, el]:u16]
0001e7b6: R0 := pad:64[13:13[R0].0]
0001e7bc: #773 := ZF <> 1
0001e7bf: VF := 0
0001e7c3: CF := #773
0001e7c8: ZF := #773 & 31:0[R0] = 0
0001e7cd: NF := #773 & 31:31[R0]
0001e7d2: when ZF goto %0001e715
00035757: goto %0001e7d6

0001e715:
0001e718: R0 := 0x42F000
0001e71f: R0 := mem[R0 + 0xF30, el]:u64
0001e726: R0 := pad:64[mem[R0, el]:u32]
0001e72b: when 31:0[R0] = 0 goto %0001e241
00035758: goto %0001e72f

0001e72f:
0001e732: R1 := 0x414000
0001e737: R0 := 2
0001e73d: R1 := R1 + 0x628
0001e742: R30 := 0x409770
0001e744: call @__printf_chk with return %0001e746

0001e746:
0001e748: goto %0001e241

0001e7d6:
0001e7da: when ~31:31[R20] goto %0001e7d8
00035759: goto %0001efe0

0001e7d8:
0001e7e2: R26 := mem[R31 + 8, el]:u64
0001e7e8: R0 := R26
0001e7ed: R30 := 0x409698
0001e7ef: call @strlen with return %0001e7f1

0001e7f1:
0001e7f5: R1 := R26
0001e7fb: R2 := R0
0001e801: R0 := pad:64[31:0[R20]]
0001e806: R30 := 0x4096A8
0001e808: call @write_wrapper with return %0001e80a

0001e80a:
0001e80e: when 31:0[R19] = 0 goto %0001e80c
0003575a: goto %0001e9af

0001efe0:
0001efe3: when 31:0[R19] <> 0 goto %0001e9af
0003575b: goto %0001e80c

0001e9af:
0001e9b3: R2 := pad:64[31:0[R19] + 2]
0001e9b9: R1 := pad:64[31:0[R21]]
0001e9bf: R0 := pad:64[31:0[R20]]
0001e9c5: R2 := extend:64[31:0[R2]]
0001e9ca: R30 := 0x4096C0
0001e9cd: call @data_send with return %0001efa4

0001efa4:
0001efa7: when 31:0[R0] <> 0 goto %0001e1dd
0003575c: goto %0001efab

0001efab:
0001efae: R0 := 0x42F000
0001efb5: R0 := mem[R0 + 0xF30, el]:u64
0001efbc: R0 := pad:64[mem[R0, el]:u32]
0001efc1: when 31:0[R0] = 0 goto %0001e241
0003575d: goto %0001efc5

0001efc5:
0001efc8: R1 := 0x414000
0001efcd: R0 := 2
0001efd3: R1 := R1 + 0x660
0001efd8: R30 := 0x4096E4
0001efda: call @__printf_chk with return %0001efdc

0001efdc:
0001efde: goto %0001e241

0001e241:
0001e249: R0 := mem[R31 + 8, el]:u64
0001e24e: R30 := 0x409700
0001e250: call @free with return %0001e252

0001e252:
0001e255: R0 := 0
0003575e: goto %0001e257

0001e80c:
0001e815: R1 := pad:64[~31:0[R20]]
0001e81a: R24 := 0
0001e820: R19 := pad:64[31:31[R1]]
0001e825: goto %0001e823

0001e823:
0001e82a: R2 := R22
0001e830: R1 := R23
0001e836: R0 := pad:64[31:0[R21]]
0001e83b: R30 := 0x409630
0001e83d: call @so_recvln with return %0001e83f

0001e83f:
0001e842: VF := 0
0001e845: CF := 1
0001e849: ZF := 31:0[R0] = 0
0001e84d: NF := 31:31[R0]
0001e85b: when ~(NF = VF & ~ZF) goto %0001e854
0001e85c: goto %0001e857

0001e857:
0001e858: R26 := 1
0001e85e: goto %0001e85a

0001e854:
0001e855: R26 := 0
0001e85d: goto %0001e85a

0001e85a:
0001e863: VF := 0
0001e866: CF := 1
0001e86a: ZF := 31:0[R26] = 0
0001e86e: NF := 31:31[R26]
0001e874: #774 := ZF <> 1
0001e877: VF := 0
0001e87b: CF := #774
0001e880: ZF := 31:0[R19] = 0 | ~#774
0001e885: NF := #774 & 31:31[R19]
0001e88b: when ZF goto %0001e889
0003575f: goto %0001e929

0001e929:
0001e92e: R24 := mem[R31 + 8, el]:u64
0001e934: R0 := R24
0001e939: R30 := 0x409650
0001e93b: call @strlen with return %0001e93d

0001e93d:
0001e941: R2 := R0
0001e947: R1 := R24
0001e94d: R25 := pad:64[31:0[R2]]
0001e953: R0 := pad:64[31:0[R20]]
0001e959: R2 := extend:64[31:0[R2]]
0001e95e: R30 := 0x409668
0001e960: call @write_wrapper with return %0001e962

0001e962:
0001e965: VF := 0
0001e968: CF := 1
0001e96c: ZF := 31:0[R26] = 0
0001e970: NF := 31:31[R26]
0001e976: R24 := pad:64[31:0[R0]]
0001e97d: R0 := mem[R31 + 8, el]:u64
0001e983: #781 := ~31:0[R24]
0001e988: #782 := 31:0[R25] + ~31:0[R24]
0001e98c: #783 := ZF <> 1
0001e993: VF := #783 & extend:64[#782 + 1] <> extend:64[31:0[R25]] +
          extend:64[#781] + 1
0001e99a: CF := #783 & pad:64[#782 + 1] <> pad:64[31:0[R25]] + pad:64[#781] +
          1
0001e99f: ZF := #783 & #782 + 1 = 0
0001e9a4: NF := #783 & 31:31[#782 + 1]
0001e9a9: when ZF goto %0001e8e3
00035760: goto %0001e9ad

0001e9ad:
00035761: goto %0001e8ce

0001e889:
0001e891: VF := 0
0001e894: CF := 1
0001e898: ZF := 31:0[R26] = 0
0001e89c: NF := 31:31[R26]
0001e8a3: R0 := mem[R31 + 8, el]:u64
0001e8a9: #775 := ~31:0[R24]
0001e8ae: #776 := 31:0[R25] + ~31:0[R24]
0001e8b2: #777 := ZF <> 1
0001e8b9: VF := #777 & extend:64[#776 + 1] <> extend:64[31:0[R25]] +
          extend:64[#775] + 1
0001e8c0: CF := #777 & pad:64[#776 + 1] <> pad:64[31:0[R25]] + pad:64[#775] +
          1
0001e8c5: ZF := #777 & #776 + 1 = 0
0001e8ca: NF := #777 & 31:31[#776 + 1]
0001e8d0: when ZF <> 1 goto %0001e8ce
00035762: goto %0001e8e3

0001e8e3:
0001e8e8: R1 := pad:64[mem[R0]]
0001e8ee: #778 := 31:0[R1] - 0xA
0001e8f3: VF := extend:64[#778] <> extend:64[31:0[R1]] - 0xA
0001e8f8: CF := pad:64[#778] <> pad:64[31:0[R1]] + 0xFFFFFFF6
0001e8fc: ZF := #778 = 0
0001e900: NF := 31:31[#778]
0001e906: #779 := 31:0[R1] - 0xD
0001e90a: #780 := ZF <> 1
0001e910: VF := #780 & extend:64[#779] <> extend:64[31:0[R1]] - 0xD
0001e916: CF := #780 & pad:64[#779] <> pad:64[31:0[R1]] + 0xFFFFFFF3
0001e91b: ZF := #779 = 0 | ~#780
0001e920: NF := #780 & 31:31[#779]
0001e925: when ZF goto %0001e8ce
00035763: goto %0001e823

0001e8ce:
0001e8d6: R30 := 0x409684
0001e8d8: call @free with return %0001e8da

0001e8da:
0001e8dd: R0 := 1
0001e8e1: goto %0001e257

0001e257:
0001e25a: R1 := 0x42F000
0001e261: R1 := mem[R1 + 0xFB8, el]:u64
0001e268: R3 := mem[R31 + 0x18, el]:u64
0001e26f: R2 := mem[R1, el]:u64
0001e275: #748 := ~R2
0001e27a: #749 := R3 + ~R2
0001e280: VF := extend:128[#749 + 1] <> extend:128[R3] + extend:128[#748] + 1
0001e286: CF := pad:128[#749 + 1] <> pad:128[R3] + pad:128[#748] + 1
0001e28a: ZF := #749 + 1 = 0
0001e28e: NF := 63:63[#749 + 1]
0001e292: R3 := #749 + 1
0001e297: R2 := 0
0001e29d: when ZF <> 1 goto %0001e29b
00035764: goto %0001e6a1

0001e29b:
0001e2a3: R30 := 0x40978C
0001e2a5: call @__stack_chk_fail with return %0001e2a7

0001e2a7:
00035765: call @tunnel with noreturn

0001e6a1:
0001e6a5: #767 := R31 + 0x20
0001e6aa: R29 := mem[#767, el]:u64
0001e6af: R30 := mem[#767 + 8, el]:u64
0001e6b5: #768 := R31 + 0x30
0001e6ba: R19 := mem[#768, el]:u64
0001e6bf: R20 := mem[#768 + 8, el]:u64
0001e6c5: #769 := R31 + 0x40
0001e6ca: R21 := mem[#769, el]:u64
0001e6cf: R22 := mem[#769 + 8, el]:u64
0001e6d5: #770 := R31 + 0x50
0001e6da: R23 := mem[#770, el]:u64
0001e6df: R24 := mem[#770 + 8, el]:u64
0001e6e5: #771 := R31 + 0x60
0001e6ea: R25 := mem[#771, el]:u64
0001e6ef: R26 := mem[#771 + 8, el]:u64
0001e6f5: R31 := R31 + 0x70
0001e6fa: R1 := 0
0001e6ff: R2 := 0
0001e704: R3 := 0
0001e709: R16 := 0
0001e70e: R17 := 0
0001e713: call R30 with noreturn

00035766: sub close(close_fd, close_result)
00035e4d: close_fd :: in u32 = low:32[R0]
00035e4e: close_result :: out u32 = low:32[R0]

0001a934:
00030d1b: R16 := 0x42F000
00030d22: R17 := mem[R16 + 0xD20, el]:u64
00030d28: R16 := R16 + 0xD20
00030d2d: call R17 with noreturn

00035767: sub config_close(config_close_result)
00035e4f: config_close_result :: out u32 = low:32[R0]

00019bbd:
00019bc1: when R0 = 0 goto %00019bbf
00035768: goto %0002b646

00019bbf:
00019bc7: R0 := 0
00019bcc: R16 := 0
00019bd1: R17 := 0
00019bd6: call R30 with noreturn

0002b646:
0002b64a: #1321 := R31 - 0x20
0002b650: mem := mem with [#1321, el]:u64 <- R29
0002b656: mem := mem with [#1321 + 8, el]:u64 <- R30
0002b65a: R31 := #1321
0002b660: R29 := R31
0002b668: mem := mem with [R31 + 0x10, el]:u64 <- R19
0002b66e: R19 := R0
0002b675: R0 := mem[R0, el]:u64
0002b67a: R30 := 0x405C6C
0002b67c: call @hlist_free with return %0002b67e

0002b67e:
0002b682: R0 := R19
0002b689: R19 := mem[R31 + 0x10, el]:u64
0002b690: R29 := mem[R31, el]:u64
0002b695: R30 := mem[R31 + 8, el]:u64
0002b699: R31 := R31 + 0x20
0002b69d: call @free with noreturn

00035769: sub config_count(config_count_result)
00035e50: config_count_result :: out u32 = low:32[R0]

00019bb0:
00019bb5: R0 := mem[R0, el]:u64
00019bb9: call @hlist_count with noreturn

0003576a: sub config_open(config_open_result)
00035e51: config_open_result :: out u32 = low:32[R0]

000191a2:
000191a6: R31 := R31 - 0x90
000191ab: R4 := 0x6C67
000191b0: R2 := 0x42F000
000191b7: R2 := mem[R2 + 0xFB8, el]:u64
000191be: R4 := 63:32[R4].0x626F.15:0[R4]
000191c4: #422 := R31 + 0x40
000191ca: mem := mem with [#422, el]:u64 <- R29
000191d0: mem := mem with [#422 + 8, el]:u64 <- R30
000191d6: R29 := R31 + 0x40
000191dd: R4 := 63:48[R4].0x6C61.31:0[R4]
000191e2: R5 := 0
000191e8: #423 := R31 + 0x60
000191ee: mem := mem with [#423, el]:u64 <- R21
000191f4: mem := mem with [#423 + 8, el]:u64 <- R22
000191f9: R1 := 0x413000
000191ff: R1 := R1 + 0x780
00019206: R3 := mem[R2, el]:u64
0001920e: mem := mem with [R31 + 0x38, el]:u64 <- R3
00019213: R3 := 0
0001921b: mem := mem with [R31, el]:u64 <- R4
00019221: mem := mem with [R31 + 8, el]:u64 <- R5
00019227: #424 := R31 + 0x10
0001922c: mem := mem with [#424, el]:u64 <- 0
00019231: mem := mem with [#424 + 8, el]:u64 <- 0
00019237: #425 := R31 + 0x20
0001923c: mem := mem with [#425, el]:u64 <- 0
00019241: mem := mem with [#425 + 8, el]:u64 <- 0
00019248: mem := mem with [R31 + 0x30, el]:u16 <- 0
0001924d: R30 := 0x4057D0
0001924f: call @fopen with return %00019251

00019251:
00019255: when R0 = 0 goto %00019253
0003576b: goto %0002b6c8

0002b6c8:
0002b6cc: #1322 := R31 + 0x50
0002b6d2: mem := mem with [#1322, el]:u64 <- R19
0002b6d8: mem := mem with [#1322 + 8, el]:u64 <- R20
0002b6de: R20 := R0
0002b6e3: R0 := 0x1000
0002b6e9: #1323 := R31 + 0x70
0002b6ef: mem := mem with [#1323, el]:u64 <- R23
0002b6f5: mem := mem with [#1323 + 8, el]:u64 <- R24
0002b6fa: R22 := 0x23
0002b702: mem := mem with [R31 + 0x80, el]:u64 <- R25
0002b707: R30 := 0x4057F0
0002b709: call @zmalloc with return %0002b70b

0002b70b:
0002b70f: R19 := R0
0002b714: R0 := 8
0002b719: R30 := 0x4057FC
0002b71b: call @zmalloc with return %0002b71d

0002b71d:
0002b721: R21 := R0
0002b728: mem := mem with [R0, el]:u64 <- 0
0003576c: goto %00019345

00019345:
0001934e: R0 := R20
00019353: R30 := 0x405810
00019355: call @feof with return %00019357

00019357:
0001935b: when 31:0[R0] <> 0 goto %00019359
0003576d: goto %0001939f

0001939f:
000193a3: R2 := R20
000193a9: R0 := R19
000193ae: R1 := 0x1000
000193b3: R30 := 0x405824
000193b6: call @fgets with return %000193b8

000193b8:
000193bb: when R0 = 0 goto %00019359
0003576e: goto %000193bf

000193bf:
000193c3: R0 := R19
000193c8: R30 := 0x405830
000193ca: call @strlen with return %000193cc

000193cc:
000193d0: #434 := R0 - 0x1000
000193d5: VF := extend:128[#434] <> extend:128[R0] - 0x1000
000193da: CF := pad:128[#434] <> pad:128[R0] + 0xFFFFFFFFFFFFF000
000193de: ZF := #434 = 0
000193e2: NF := 63:63[#434]
000193e8: when CF & ~ZF goto %00019336
0003576f: goto %000193ec

00019336:
0001933a: R0 := R20
0001933f: R30 := 0x405A1C
00019341: call @feof with return %00019343

00019343:
00019347: when 31:0[R0] <> 0 goto %00019345
00035770: goto %00019a88

00019a88:
00019a8b: R23 := 0x1000
00019a8f: goto %0001940d

000193ec:
000193f0: R23 := pad:64[31:0[R0]]
000193f5: when 31:0[R0] = 0 goto %00019345
00035771: goto %000193f9

000193f9:
000193fd: R0 := R20
00019402: R30 := 0x405848
00019404: call @feof with return %00019406

00019406:
00019409: when 31:0[R0] <> 0 goto %00019345
00035772: goto %0001940d

0001940d:
00019410: R30 := 0x405850
00019412: call @__ctype_b_loc with return %00019414

00019414:
00019418: R25 := R0
0001941f: R3 := mem[R0, el]:u64
00019425: R5 := extend:64[31:0[R23]]
0001942a: R1 := 0
0001942f: goto %0001942d

0001942d:
00019436: R2 := pad:64[mem[R19 + R1]]
0001943c: R4 := pad:64[31:0[R1]]
00019444: R2 := pad:64[mem[R3 + (62:0[R2].0), el]:u16]
0001944a: when 13:13[R2] goto %00019448
00035773: goto %00019480

00019448:
00019451: R1 := R1 + 1
00019457: #435 := ~R1
0001945c: #436 := R5 + ~R1
00019462: VF := extend:128[#436 + 1] <> extend:128[R5] + extend:128[#435] + 1
00019468: CF := pad:128[#436 + 1] <> pad:128[R5] + pad:128[#435] + 1
0001946c: ZF := #436 + 1 = 0
00019470: NF := 63:63[#436 + 1]
00019476: when ZF goto %00019474
00035774: goto %0001942d

00019474:
0001947d: R1 := pad:64[31:0[R4] + 1]
00019482: goto %00019480

00019480:
00019487: #437 := ~31:0[R1]
0001948c: #438 := 31:0[R23] + ~31:0[R1]
00019492: VF := extend:64[#438 + 1] <> extend:64[31:0[R23]] + extend:64[#437]
          + 1
00019498: CF := pad:64[#438 + 1] <> pad:64[31:0[R23]] + pad:64[#437] + 1
0001949c: ZF := #438 + 1 = 0
000194a0: NF := 31:31[#438 + 1]
000194a7: when ~(NF = VF & ~ZF) goto %00019345
00035775: goto %000194ab

000194ab:
000194b1: R0 := pad:64[mem[R19 + extend:64[31:0[R1]]]]
000194b7: R2 := extend:64[31:0[R1]]
000194bd: #439 := 31:0[R0] - 0x3B
000194c2: VF := extend:64[#439] <> extend:64[31:0[R0]] - 0x3B
000194c7: CF := pad:64[#439] <> pad:64[31:0[R0]] + 0xFFFFFFC5
000194cb: ZF := #439 = 0
000194cf: NF := 31:31[#439]
000194d5: #440 := ~31:0[R22]
000194da: #441 := 31:0[R0] + ~31:0[R22]
000194de: #442 := ZF <> 1
000194e5: VF := #442 & extend:64[#441 + 1] <> extend:64[31:0[R0]] +
          extend:64[#440] + 1
000194ec: CF := #442 & pad:64[#441 + 1] <> pad:64[31:0[R0]] + pad:64[#440] +
          1
000194f1: ZF := #441 + 1 = 0 | ~#442
000194f6: NF := #442 & 31:31[#441 + 1]
000194fb: when ZF goto %00019345
00035776: goto %000194ff

000194ff:
00019502: goto %00019500

00019500:
00019509: R4 := pad:64[mem[R19 + R2]]
0001950f: R0 := pad:64[31:0[R2]]
00019517: R4 := pad:64[mem[R3 + (62:0[R4].0), el]:u16]
0001951d: when 3:3[R4] goto %0001951b
00035777: goto %00019555

0001951b:
00019524: R2 := R2 + 1
0001952a: #443 := ~31:0[R2]
0001952f: #444 := 31:0[R23] + ~31:0[R2]
00019535: VF := extend:64[#444 + 1] <> extend:64[31:0[R23]] + extend:64[#443]
          + 1
0001953b: CF := pad:64[#444 + 1] <> pad:64[31:0[R23]] + pad:64[#443] + 1
0001953f: ZF := #444 + 1 = 0
00019543: NF := 31:31[#444 + 1]
0001954b: when ~(NF = VF & ~ZF) goto %00019549
00035778: goto %00019500

00019549:
00019552: R2 := pad:64[31:0[R0] + 1]
00019557: goto %00019555

00019555:
0001955c: #445 := ~31:0[R23]
00019561: #446 := 31:0[R2] + ~31:0[R23]
00019567: VF := extend:64[#446 + 1] <> extend:64[31:0[R2]] + extend:64[#445]
          + 1
0001956d: CF := pad:64[#446 + 1] <> pad:64[31:0[R2]] + pad:64[#445] + 1
00019571: ZF := #446 + 1 = 0
00019575: NF := 31:31[#446 + 1]
0001957b: when NF = VF goto %00019345
00035779: goto %0001957f

0001957f:
00019585: R0 := pad:64[mem[R19 + extend:64[31:0[R2]]]]
0001958b: R24 := extend:64[31:0[R2]]
00019591: #447 := 31:0[R0] - 0x5B
00019596: VF := extend:64[#447] <> extend:64[31:0[R0]] - 0x5B
0001959b: CF := pad:64[#447] <> pad:64[31:0[R0]] + 0xFFFFFFA5
0001959f: ZF := #447 = 0
000195a3: NF := 31:31[#447]
000195a9: when ZF goto %000195a7
0003577a: goto %00019a12

000195a7:
000195b0: R2 := pad:64[31:0[R2] + 1]
000195b6: R0 := extend:64[31:0[R2]]
000195bc: #448 := ~31:0[R2]
000195c1: #449 := 31:0[R23] + ~31:0[R2]
000195c7: VF := extend:64[#449 + 1] <> extend:64[31:0[R23]] + extend:64[#448]
          + 1
000195cd: CF := pad:64[#449 + 1] <> pad:64[31:0[R23]] + pad:64[#448] + 1
000195d1: ZF := #449 + 1 = 0
000195d5: NF := 31:31[#449 + 1]
000195dc: when ~(NF = VF & ~ZF) goto %00019345
0003577b: goto %000195e0

000195e0:
000195e6: R1 := pad:64[mem[R19 + R0]]
000195ec: R2 := pad:64[31:0[R0]]
000195f4: R1 := pad:64[mem[R3 + (62:0[R1].0), el]:u16]
000195fa: when ~13:13[R1] goto %000195f8
0003577c: goto %00019736

00019736:
0001973a: R0 := R0 + 1
00019740: #456 := ~31:0[R0]
00019745: #457 := 31:0[R23] + ~31:0[R0]
0001974b: VF := extend:64[#457 + 1] <> extend:64[31:0[R23]] + extend:64[#456]
          + 1
00019751: CF := pad:64[#457 + 1] <> pad:64[31:0[R23]] + pad:64[#456] + 1
00019755: ZF := #457 + 1 = 0
00019759: NF := 31:31[#457 + 1]
00019761: when ~(NF = VF & ~ZF) goto %0001975f
0003577d: goto %000199f5

0001975f:
00019768: R0 := pad:64[31:0[R2] + 1]
0001976c: goto %000195f8

000199f5:
000199fb: R1 := pad:64[mem[R19 + R0]]
00019a01: R2 := pad:64[31:0[R0]]
00019a09: R1 := pad:64[mem[R3 + (62:0[R1].0), el]:u16]
00019a0e: when 13:13[R1] goto %00019736
0003577e: goto %000195f8

000195f8:
00019601: #450 := ~31:0[R0]
00019606: #451 := 31:0[R23] + ~31:0[R0]
0001960c: VF := extend:64[#451 + 1] <> extend:64[31:0[R23]] + extend:64[#450]
          + 1
00019612: CF := pad:64[#451 + 1] <> pad:64[31:0[R23]] + pad:64[#450] + 1
00019616: ZF := #451 + 1 = 0
0001961a: NF := 31:31[#451 + 1]
00019621: when ~(NF = VF & ~ZF) goto %00019345
0003577f: goto %00019625

00019625:
00019629: R1 := extend:64[31:0[R0]]
00019630: R23 := pad:64[31:0[R23] + ~31:0[R0] + 1]
00019636: R4 := R1
0001963b: R5 := 1
00019640: goto %0001963e

0001963e:
00019647: R2 := pad:64[mem[R19 + R4]]
0001964d: #452 := 31:0[R2] - 0x5D
00019652: VF := extend:64[#452] <> extend:64[31:0[R2]] - 0x5D
00019657: CF := pad:64[#452] <> pad:64[31:0[R2]] + 0xFFFFFFA3
0001965b: ZF := #452 = 0
0001965f: NF := 31:31[#452]
00019665: when ZF <> 1 goto %00019663
00035780: goto %0001972f

0001972f:
00019734: R0 := pad:64[31:0[R4] + ~31:0[R0] + 1]
00035781: goto %00019685

00019663:
0001966c: R2 := pad:64[7:0[R2].0]
00019674: R2 := pad:64[mem[R3 + R2, el]:u16]
0001967a: when 13:13[R2] goto %00019678
00035782: goto %000196de

00019678:
00019682: R0 := pad:64[31:0[R4] + ~31:0[R0] + 1]
00019687: goto %00019685

000196de:
000196e2: #453 := ~31:0[R5]
000196e7: #454 := 31:0[R23] + ~31:0[R5]
000196ed: VF := extend:64[#454 + 1] <> extend:64[31:0[R23]] + extend:64[#453]
          + 1
000196f3: CF := pad:64[#454 + 1] <> pad:64[31:0[R23]] + pad:64[#453] + 1
000196f7: ZF := #454 + 1 = 0
000196fb: NF := 31:31[#454 + 1]
00019700: when ZF goto %000196d4
00035783: goto %00019704

000196d4:
000196d8: R0 := pad:64[31:0[R23]]
000196dc: goto %00019685

00019685:
0001968b: VF := 0
0001968e: CF := 1
00019692: ZF := 31:0[R0] = 0
00019696: NF := 31:31[R0]
0001969d: when ~(NF = VF & ~ZF) goto %00019345
00035784: goto %000196a1

00019704:
00019708: R5 := pad:64[31:0[R5] + 1]
0001970e: R4 := R4 + 1
00019714: #455 := 31:0[R5] - 0x32
00019719: VF := extend:64[#455] <> extend:64[31:0[R5]] - 0x32
0001971e: CF := pad:64[#455] <> pad:64[31:0[R5]] + 0xFFFFFFCE
00019722: ZF := #455 = 0
00019726: NF := 31:31[#455]
0001972b: when ZF goto %000196cb
00035785: goto %0001963e

000196cb:
000196ce: R0 := 0x31
000196d2: goto %000196a1

000196a1:
000196a5: R2 := pad:64[31:0[R0] + 1]
000196ac: R1 := R19 + R1
000196b2: R0 := R31
000196b7: R3 := 0x32
000196bd: R2 := extend:64[31:0[R2]]
000196c2: R30 := 0x405ADC
000196c5: call @__strlcpy_chk with return %000196c7

000196c7:
000196c9: goto %00019345

00019a12:
00019a17: R2 := pad:64[31:0[R2] + ~31:0[R1] + 1]
00019a1d: R0 := R19
00019a22: R30 := 0x4058E0
00019a24: call @substr with return %00019a26

00019a26:
00019a2b: R2 := mem[R25, el]:u64
00019a31: R25 := R0
00019a36: goto %00019a34

00019a34:
00019a3d: R1 := pad:64[mem[R19 + R24]]
00019a43: R4 := pad:64[31:0[R24]]
00019a4b: R1 := pad:64[mem[R2 + (62:0[R1].0), el]:u16]
00019a51: when 13:13[R1] goto %00019a4f
00035786: goto %00019a82

00019a82:
00019a86: R1 := pad:64[31:0[R24]]
00035787: goto %00019823

00019a4f:
00019a58: R24 := R24 + 1
00019a5e: #473 := ~31:0[R24]
00019a63: #474 := 31:0[R23] + ~31:0[R24]
00019a69: VF := extend:64[#474 + 1] <> extend:64[31:0[R23]] + extend:64[#473]
          + 1
00019a6f: CF := pad:64[#474 + 1] <> pad:64[31:0[R23]] + pad:64[#473] + 1
00019a73: ZF := #474 + 1 = 0
00019a77: NF := 31:31[#474 + 1]
00019a7e: when ~(NF = VF & ~ZF) goto %0001981c
00035788: goto %00019a34

0001981c:
00019820: R1 := pad:64[31:0[R4] + 1]
00019825: goto %00019823

00019823:
0001982a: #460 := ~31:0[R1]
0001982f: #461 := 31:0[R23] + ~31:0[R1]
00019835: VF := extend:64[#461 + 1] <> extend:64[31:0[R23]] + extend:64[#460]
          + 1
0001983b: CF := pad:64[#461 + 1] <> pad:64[31:0[R23]] + pad:64[#460] + 1
0001983f: ZF := #461 + 1 = 0
00019843: NF := 31:31[#461 + 1]
0001984a: when ~(NF = VF & ~ZF) goto %00019806
00035789: goto %0001984e

0001984e:
00019854: R0 := pad:64[mem[R19 + extend:64[31:0[R1]]]]
00019859: R2 := 0x3B
0001985f: #462 := 31:0[R0] - 0x23
00019864: VF := extend:64[#462] <> extend:64[31:0[R0]] - 0x23
00019869: CF := pad:64[#462] <> pad:64[31:0[R0]] + 0xFFFFFFDD
0001986d: ZF := #462 = 0
00019871: NF := 31:31[#462]
00019877: #463 := ~31:0[R2]
0001987c: #464 := 31:0[R0] + ~31:0[R2]
00019880: #465 := ZF <> 1
00019887: VF := #465 & extend:64[#464 + 1] <> extend:64[31:0[R0]] +
          extend:64[#463] + 1
0001988e: CF := #465 & pad:64[#464 + 1] <> pad:64[31:0[R0]] + pad:64[#463] +
          1
00019893: ZF := #464 + 1 = 0 | ~#465
00019898: NF := #465 & 31:31[#464 + 1]
0001989d: when ZF goto %00019806
0003578a: goto %000198a1

000198a1:
000198a5: #466 := 31:0[R0] - 0x22
000198aa: VF := extend:64[#466] <> extend:64[31:0[R0]] - 0x22
000198af: CF := pad:64[#466] <> pad:64[31:0[R0]] + 0xFFFFFFDE
000198b3: ZF := #466 = 0
000198b7: NF := 31:31[#466]
000198bc: when ZF goto %000197dd
0003578b: goto %000198c0

000197dd:
000197e1: R1 := pad:64[31:0[R1] + 1]
000197e7: #458 := ~31:0[R1]
000197ec: #459 := 31:0[R23] + ~31:0[R1]
000197f2: VF := extend:64[#459 + 1] <> extend:64[31:0[R23]] + extend:64[#458]
          + 1
000197f8: CF := pad:64[#459 + 1] <> pad:64[31:0[R23]] + pad:64[#458] + 1
000197fc: ZF := #459 + 1 = 0
00019800: NF := 31:31[#459 + 1]
00019808: when ~(NF = VF & ~ZF) goto %00019806
0003578c: goto %00019955

00019955:
0001995b: R0 := pad:64[mem[R19 + extend:64[31:0[R1]]]]
00019961: R2 := pad:64[31:0[R1]]
00019967: #469 := 31:0[R0] - 0x22
0001996c: VF := extend:64[#469] <> extend:64[31:0[R0]] - 0x22
00019971: CF := pad:64[#469] <> pad:64[31:0[R0]] + 0xFFFFFFDE
00019975: ZF := #469 = 0
00019979: NF := 31:31[#469]
0001997f: when ZF goto %0001997d
0003578d: goto %000199a0

000199a0:
000199a4: R2 := pad:64[31:0[R2] + 1]
000199ac: R0 := pad:64[mem[R19 + extend:64[31:0[R2]]]]
000199b2: #470 := 31:0[R0] - 0x22
000199b7: VF := extend:64[#470] <> extend:64[31:0[R0]] - 0x22
000199bc: CF := pad:64[#470] <> pad:64[31:0[R0]] + 0xFFFFFFDE
000199c0: ZF := #470 = 0
000199c4: NF := 31:31[#470]
000199c9: when ZF <> 1 goto %000199a0
0003578e: goto %000199cd

000199cd:
000199d1: #471 := ~31:0[R2]
000199d6: #472 := 31:0[R23] + ~31:0[R2]
000199dc: VF := extend:64[#472 + 1] <> extend:64[31:0[R23]] + extend:64[#471]
          + 1
000199e2: CF := pad:64[#472 + 1] <> pad:64[31:0[R23]] + pad:64[#471] + 1
000199e6: ZF := #472 + 1 = 0
000199ea: NF := 31:31[#472 + 1]
000199f1: when ~(NF = VF & ~ZF) goto %00019806
0003578f: goto %0001997d

0001997d:
00019987: R2 := pad:64[31:0[R2] + ~31:0[R1] + 1]
0001998d: R0 := R19
00019992: R30 := 0x405B64
00019994: call @substr with return %00019996

00019996:
0001999a: R23 := R0
0001999e: goto %00019933

00019806:
0001980f: R0 := R25
00019814: R30 := 0x405AF0
00019816: call @free with return %00019818

00019818:
0001981a: goto %00019345

000198c0:
000198c5: R2 := pad:64[31:0[R23] + ~31:0[R1] + 1]
000198cb: R0 := R19
000198d0: R30 := 0x40593C
000198d2: call @substr with return %000198d4

000198d4:
000198d8: R23 := R0
000198dd: R1 := 0x413000
000198e3: R1 := R1 + 0x7A0
000198e8: R30 := 0x40594C
000198eb: call @strcspn with return %000198ed

000198ed:
000198f1: R24 := R0
000198f7: R0 := R23
000198fc: R30 := 0x405958
000198fe: call @strlen with return %00019900

00019900:
00019904: #467 := ~31:0[R0]
00019909: #468 := 31:0[R24] + ~31:0[R0]
0001990f: VF := extend:64[#468 + 1] <> extend:64[31:0[R24]] + extend:64[#467]
          + 1
00019915: CF := pad:64[#468 + 1] <> pad:64[31:0[R24]] + pad:64[#467] + 1
00019919: ZF := #468 + 1 = 0
0001991d: NF := 31:31[#468 + 1]
00019923: when ZF goto %00019921
00035790: goto %0001994d

0001994d:
00019953: mem := mem with [R23 + extend:64[31:0[R24]]] <- 0
00035791: goto %00019921

00019921:
0001992a: R0 := R23
0001992f: R30 := 0x40596C
00019931: call @trimr with return %00019933

00019933:
00019936: R0 := 0x42F000
0001993d: R0 := mem[R0 + 0xF30, el]:u64
00019944: R0 := pad:64[mem[R0, el]:u32]
00019949: when 31:0[R0] <> 0 goto %0001976e
00035792: goto %00019798

0001976e:
00019772: R4 := R23
00019778: R3 := R25
0001977e: R2 := R31
00019783: R1 := 0x413000
00019788: R0 := 2
0001978e: R1 := R1 + 0x788
00019793: R30 := 0x405B20
00019795: call @__printf_chk with return %00019797

00019797:
0001979a: goto %00019798

00019798:
000197a0: R0 := mem[R21, el]:u64
000197a6: R2 := R23
000197ac: R1 := R25
000197b1: R4 := 0
000197b6: R3 := 0
000197bb: R30 := 0x405994
000197bd: call @hlist_add with return %000197bf

000197bf:
000197c5: mem := mem with [R21, el]:u64 <- R0
000197cb: R0 := R20
000197d0: R30 := 0x4059A0
000197d2: call @feof with return %000197d4

000197d4:
000197d7: when 31:0[R0] = 0 goto %0001939f
00035793: goto %000197db

000197db:
00035794: goto %00019359

00019359:
00019362: R0 := R19
00019367: R30 := 0x4059B0
00019369: call @free with return %0001936b

0001936b:
0001936f: R0 := R20
00019374: R30 := 0x4059B8
00019376: call @fclose with return %00019378

00019378:
0001937c: #432 := R31 + 0x50
00019381: R19 := mem[#432, el]:u64
00019386: R20 := mem[#432 + 8, el]:u64
0001938c: #433 := R31 + 0x70
00019391: R23 := mem[#433, el]:u64
00019396: R24 := mem[#433 + 8, el]:u64
0001939d: R25 := mem[R31 + 0x80, el]:u64
00035795: goto %0001925e

0001925e:
00019264: R0 := 0x42F000
0001926b: R0 := mem[R0 + 0xFB8, el]:u64
00019272: R2 := mem[R31 + 0x38, el]:u64
00019279: R1 := mem[R0, el]:u64
0001927f: #426 := ~R1
00019284: #427 := R2 + ~R1
0001928a: VF := extend:128[#427 + 1] <> extend:128[R2] + extend:128[#426] + 1
00019290: CF := pad:128[#427 + 1] <> pad:128[R2] + pad:128[#426] + 1
00019294: ZF := #427 + 1 = 0
00019298: NF := 63:63[#427 + 1]
0001929c: R2 := #427 + 1
000192a1: R1 := 0
000192a7: when ZF <> 1 goto %000192a5
00035796: goto %000192dd

000192a5:
000192ae: #428 := R31 + 0x50
000192b4: mem := mem with [#428, el]:u64 <- R19
000192ba: mem := mem with [#428 + 8, el]:u64 <- R20
000192c0: #429 := R31 + 0x70
000192c6: mem := mem with [#429, el]:u64 <- R23
000192cc: mem := mem with [#429 + 8, el]:u64 <- R24
000192d4: mem := mem with [R31 + 0x80, el]:u64 <- R25
000192d9: R30 := 0x405B94
000192db: call @__stack_chk_fail with return %00019253

00019253:
0001925b: R21 := 0
00019260: goto %0001925e

000192dd:
000192e1: #430 := R31 + 0x40
000192e6: R29 := mem[#430, el]:u64
000192eb: R30 := mem[#430 + 8, el]:u64
000192f1: R0 := R21
000192f7: #431 := R31 + 0x60
000192fc: R21 := mem[#431, el]:u64
00019301: R22 := mem[#431 + 8, el]:u64
00019307: R31 := R31 + 0x90
0001930c: R1 := 0
00019311: R2 := 0
00019316: R3 := 0
0001931b: R4 := 0
00019320: R5 := 0
00019325: R6 := 0
0001932a: R16 := 0
0001932f: R17 := 0
00019334: call R30 with noreturn

00035797: sub config_pop(config_pop_result)
00035e52: config_pop_result :: out u32 = low:32[R0]

00019b12:
00019b16: #476 := R31 - 0x30
00019b1c: mem := mem with [#476, el]:u64 <- R29
00019b22: mem := mem with [#476 + 8, el]:u64 <- R30
00019b26: R31 := #476
00019b2c: R29 := R31
00019b32: #477 := R31 + 0x10
00019b38: mem := mem with [#477, el]:u64 <- R19
00019b3e: mem := mem with [#477 + 8, el]:u64 <- R20
00019b44: R20 := R0
00019b4b: R0 := mem[R0, el]:u64
00019b53: mem := mem with [R31 + 0x20, el]:u64 <- R21
00019b59: R21 := R1
00019b5e: R30 := 0x405C04
00019b60: call @hlist_get with return %00019b62

00019b62:
00019b66: R19 := R0
00019b6c: when R0 = 0 goto %00019b6a
00035798: goto %0002b69f

0002b69f:
0002b6a2: R30 := 0x405C10
0002b6a4: call @strdup with return %0002b6a6

0002b6a6:
0002b6aa: R19 := R0
0002b6b1: R0 := mem[R20, el]:u64
0002b6b7: R1 := R21
0002b6bc: R30 := 0x405C20
0002b6be: call @hlist_del with return %0002b6c0

0002b6c0:
0002b6c6: mem := mem with [R20, el]:u64 <- R0
00035799: goto %00019b6a

00019b6a:
00019b74: R21 := mem[R31 + 0x20, el]:u64
00019b7a: R0 := R19
00019b80: #478 := R31 + 0x10
00019b85: R19 := mem[#478, el]:u64
00019b8a: R20 := mem[#478 + 8, el]:u64
00019b91: R29 := mem[R31, el]:u64
00019b96: R30 := mem[R31 + 8, el]:u64
00019b9a: R31 := R31 + 0x30
00019b9f: R1 := 0
00019ba4: R16 := 0
00019ba9: R17 := 0
00019bae: call R30 with noreturn

0003579a: sub config_set(config_set_result)
00035e53: config_set_result :: out u32 = low:32[R0]

00019a93:
00019a97: #475 := R31 - 0x20
00019a9d: mem := mem with [#475, el]:u64 <- R29
00019aa3: mem := mem with [#475 + 8, el]:u64 <- R30
00019aa7: R31 := #475
00019aac: R3 := 1
00019ab2: R29 := R31
00019aba: mem := mem with [R31 + 0x10, el]:u64 <- R19
00019ac0: R19 := R0
00019ac7: R0 := mem[R0, el]:u64
00019acc: R30 := 0x405BBC
00019ace: call @hlist_mod with return %00019ad0

00019ad0:
00019ad6: mem := mem with [R19, el]:u64 <- R0
00019add: R19 := mem[R31 + 0x10, el]:u64
00019ae4: R29 := mem[R31, el]:u64
00019ae9: R30 := mem[R31 + 8, el]:u64
00019aed: R31 := R31 + 0x20
00019af2: R0 := 0
00019af7: R1 := 0
00019afc: R2 := 0
00019b01: R3 := 0
00019b06: R16 := 0
00019b0b: R17 := 0
00019b10: call R30 with noreturn

0003579b: sub connect(connect_fd, connect_addr, connect_len, connect_result)
00035e54: connect_fd :: in u32 = low:32[R0]
00035e55: connect_addr :: in u64 = R1
00035e56: connect_len :: in u64 = R2
00035e57: connect_result :: out u32 = low:32[R0]

0001b4d4:
00030f41: R16 := 0x42F000
00030f48: R17 := mem[R16 + 0xDE8, el]:u64
00030f4e: R16 := R16 + 0xDE8
00030f53: call R17 with noreturn

0003579c: sub copy_auth(copy_auth_result)
00035e58: copy_auth_result :: out u32 = low:32[R0]

00018efe:
00018f02: #413 := R31 - 0x30
00018f08: mem := mem with [#413, el]:u64 <- R29
00018f0e: mem := mem with [#413 + 8, el]:u64 <- R30
00018f12: R31 := #413
00018f18: R4 := R1 + 0x200
00018f1e: R3 := R0 + 0x200
00018f24: R29 := R31
00018f2b: V0 := pad:128[mem[R4 - 0xD4, el]:u64]
00018f31: #414 := R31 + 0x10
00018f37: mem := mem with [#414, el]:u64 <- R19
00018f3d: mem := mem with [#414 + 8, el]:u64 <- R20
00018f43: R19 := R1
00018f49: R20 := R0
00018f51: mem := mem with [R31 + 0x20, el]:u64 <- R21
00018f57: R1 := R1 + 0x32
00018f5d: R21 := pad:64[31:0[R2]]
00018f63: R0 := R0 + 0x32
00018f6b: mem := mem with [R3 - 0xD4, el]:u64 <- 63:0[V0]
00018f70: R2 := 0x32
00018f77: R4 := pad:64[mem[R19 + 0x134, el]:u32]
00018f7e: R3 := pad:64[mem[R19 + 0x138, el]:u32]
00018f86: mem := mem with [R20 + 0x134, el]:u32 <- 31:0[R4]
00018f8e: mem := mem with [R20 + 0x138, el]:u32 <- 31:0[R3]
00018f93: R30 := 0x405420
00018f95: call @strlcpy with return %00018f97

00018f97:
00018f9b: R1 := R19 + 0x64
00018fa1: R0 := R20 + 0x64
00018fa6: R2 := 0x32
00018fab: R30 := 0x405430
00018fad: call @strlcpy with return %00018faf

00018faf:
00018fb3: when 31:0[R21] = 0 goto %00018fb1
0003579d: goto %0002b9f6

00018fb1:
00018fb9: V0 := 0
00018fbf: R2 := R20 + 0xFA
00018fc5: R1 := R20 + 0xC8
00018fcc: mem := mem with [R20 + 0x30, el]:u16 <- 0
00018fd3: mem := mem with [R20 + 0x12A, el]:u16 <- 0
00018fd9: R0 := R20 + 0x96
00018fe1: mem := mem with [R20, el]:u128 <- V0
00018fe7: mem := mem with [R20 + 0x10, el]:u128 <- V0
00018fef: mem := mem with [R20 + 0x20, el]:u128 <- V0
00018ff7: mem := mem with [R2, el]:u128 <- V0
00018ffd: mem := mem with [R2 + 0x10, el]:u128 <- V0
00019005: mem := mem with [R2 + 0x20, el]:u128 <- V0
0001900d: mem := mem with [R1, el]:u128 <- V0
00019013: mem := mem with [R1 + 0x10, el]:u128 <- V0
0001901b: mem := mem with [R1 + 0x20, el]:u128 <- V0
00019022: mem := mem with [R1 + 0x30, el]:u16 <- 0
00019029: mem := mem with [R20 + 0xC6, el]:u16 <- 0
00019031: mem := mem with [R0, el]:u128 <- V0
00019037: mem := mem with [R0 + 0x10, el]:u128 <- V0
0001903f: mem := mem with [R0 + 0x20, el]:u128 <- V0
00019045: R0 := R20
0001904b: #415 := R31 + 0x10
00019050: R19 := mem[#415, el]:u64
00019055: R20 := mem[#415 + 8, el]:u64
0001905c: R21 := mem[R31 + 0x20, el]:u64
00019063: R29 := mem[R31, el]:u64
00019068: R30 := mem[R31 + 8, el]:u64
0001906c: R31 := R31 + 0x30
00019071: R1 := 0
00019076: R2 := 0
0001907b: R3 := 0
00019080: R4 := 0
00019085: R16 := 0
0001908a: R17 := 0
0001908f: call R30 with noreturn

0002b9f6:
0002b9fa: R1 := R19
0002b9ff: R2 := 0x32
0002ba05: R0 := R20
0002ba0a: R30 := 0x405444
0002ba0c: call @strlcpy with return %0002ba0e

0002ba0e:
0002ba12: R4 := R19 + 0xFA
0002ba18: R3 := R20 + 0xFA
0002ba1e: R2 := R19 + 0xC8
0002ba24: R1 := R20 + 0xC8
0002ba2a: R19 := R19 + 0x96
0002ba30: R0 := R20 + 0x96
0002ba37: V0 := mem[R4, el]:u128
0002ba3c: V1 := mem[R4 + 0x10, el]:u128
0002ba44: mem := mem with [R3, el]:u128 <- V0
0002ba4a: mem := mem with [R3 + 0x10, el]:u128 <- V1
0002ba51: V0 := mem[R4 + 0x20, el]:u128
0002ba59: mem := mem with [R3 + 0x20, el]:u128 <- V0
0002ba60: R4 := pad:64[mem[R4 + 0x30, el]:u16]
0002ba68: mem := mem with [R3 + 0x30, el]:u16 <- 15:0[R4]
0002ba6f: V0 := mem[R2, el]:u128
0002ba74: V1 := mem[R2 + 0x10, el]:u128
0002ba7c: mem := mem with [R1, el]:u128 <- V0
0002ba82: mem := mem with [R1 + 0x10, el]:u128 <- V1
0002ba89: V0 := mem[R2 + 0x20, el]:u128
0002ba91: mem := mem with [R1 + 0x20, el]:u128 <- V0
0002ba98: R2 := pad:64[mem[R2 + 0x30, el]:u16]
0002baa0: mem := mem with [R1 + 0x30, el]:u16 <- 15:0[R2]
0002baa7: V0 := mem[R19, el]:u128
0002baac: V1 := mem[R19 + 0x10, el]:u128
0002bab4: mem := mem with [R0, el]:u128 <- V0
0002baba: mem := mem with [R0 + 0x10, el]:u128 <- V1
0002bac1: V0 := mem[R19 + 0x20, el]:u128
0002bac9: mem := mem with [R0 + 0x20, el]:u128 <- V0
0002bad0: R1 := pad:64[mem[R19 + 0x30, el]:u16]
0002bad8: mem := mem with [R0 + 0x30, el]:u16 <- 15:0[R1]
0002bade: R0 := R20
0002bae4: #1327 := R31 + 0x10
0002bae9: R19 := mem[#1327, el]:u64
0002baee: R20 := mem[#1327 + 8, el]:u64
0002baf5: R21 := mem[R31 + 0x20, el]:u64
0002bafc: R29 := mem[R31, el]:u64
0002bb01: R30 := mem[R31 + 8, el]:u64
0002bb05: R31 := R31 + 0x30
0002bb0a: R1 := 0
0002bb0f: R2 := 0
0002bb14: R3 := 0
0002bb19: R4 := 0
0002bb1e: R16 := 0
0002bb23: R17 := 0
0002bb28: call R30 with noreturn

0003579e: sub copy_rr_data(copy_rr_data_result)
00035e59: copy_rr_data_result :: out u32 = low:32[R0]

00010e31:
00010e35: #11 := R31 - 0x30
00010e3b: mem := mem with [#11, el]:u64 <- R29
00010e41: mem := mem with [#11 + 8, el]:u64 <- R30
00010e45: R31 := #11
00010e4b: R29 := R31
00010e51: #12 := R31 + 0x10
00010e57: mem := mem with [#12, el]:u64 <- R19
00010e5d: mem := mem with [#12 + 8, el]:u64 <- R20
00010e63: when R0 = 0 goto %00010e61
0003579f: goto %00018398

00018398:
0001839c: R19 := R1
000183a2: when R1 = 0 goto %000183a0
000357a0: goto %0001840a

000183a0:
000183a8: R0 := 0x42F000
000183af: R0 := mem[R0 + 0xF18, el]:u64
000183b4: R1 := 2
000183b9: R2 := 0x417000
000183bf: R2 := R2 + 0x40
000183c6: R0 := mem[R0, el]:u64
000183ce: mem := mem with [R31 + 0x20, el]:u64 <- R21
000183d3: R30 := 0x40FD0C
000183d5: call @__fprintf_chk with return %000183d7

000183d7:
000183da: R3 := 0x417000
000183e0: R3 := R3 + 0x3F0
000183e5: R1 := 0x416000
000183ea: R0 := 0x413000
000183f0: R3 := R3 + 0x30
000183f6: R1 := R1 + 0xF58
000183fc: R0 := R0 + 0x7E0
00018401: R2 := 0x22D
00018406: R30 := 0x40FD30
00018408: call @__assert_fail with return %00010e61

00010e61:
00010e69: R0 := 0x42F000
00010e70: R0 := mem[R0 + 0xF18, el]:u64
00010e75: R1 := 2
00010e7a: R2 := 0x417000
00010e80: R2 := R2 + 8
00010e87: R0 := mem[R0, el]:u64
00010e8f: mem := mem with [R31 + 0x20, el]:u64 <- R21
00010e94: R30 := 0x40FD50
00010e97: call @__fprintf_chk with return %00010e99

00010e99:
00010e9c: R3 := 0x417000
00010ea2: R3 := R3 + 0x3F0
00010ea7: R1 := 0x416000
00010eac: R0 := 0x413000
00010eb2: R3 := R3 + 0x30
00010eb8: R1 := R1 + 0xF58
00010ebe: R0 := R0 + 0x7E0
00010ec3: R2 := 0x228
00010ec8: R30 := 0x40FD74
00010eca: call @__assert_fail with return %000357a1

000357a1:
000357a2: call @dup_rr_data with noreturn

0001840a:
0001840e: R20 := R0
00018413: R30 := 0x40FBE0
00018415: call @reset_rr_data with return %00018417

00018417:
0001841c: R0 := pad:64[mem[R19, el]:u32]
00018424: mem := mem with [R20, el]:u32 <- 31:0[R0]
0001842b: R0 := mem[R19 + 8, el]:u64
00018432: V0 := mem[R19 + 0x10, el]:u128
0001843a: mem := mem with [R20 + 0x10, el]:u128 <- V0
00018441: V0 := pad:128[mem[R19 + 0x20, el]:u64]
00018449: mem := mem with [R20 + 0x20, el]:u64 <- 63:0[V0]
0001844f: when R0 = 0 goto %0001844d
000357a3: goto %000185fc

000185fc:
000185ff: R30 := 0x40FC04
00018602: call @hlist_dup with return %00018cc7

00018cc7:
00018ccd: mem := mem with [R20 + 8, el]:u64 <- R0
000357a4: goto %0001844d

0001844d:
00018457: R0 := mem[R19 + 0x28, el]:u64
0001845d: when R0 = 0 goto %0001845b
000357a5: goto %000185ed

000185ed:
000185f0: R30 := 0x40FC14
000185f2: call @strdup with return %000185f4

000185f4:
000185fa: mem := mem with [R20 + 0x28, el]:u64 <- R0
000357a6: goto %0001845b

0001845b:
00018465: R0 := mem[R19 + 0x30, el]:u64
0001846b: when R0 = 0 goto %00018469
000357a7: goto %000185de

000185de:
000185e1: R30 := 0x40FC24
000185e3: call @strdup with return %000185e5

000185e5:
000185eb: mem := mem with [R20 + 0x30, el]:u64 <- R0
000357a8: goto %00018469

00018469:
00018473: R0 := mem[R19 + 0x38, el]:u64
00018479: when R0 = 0 goto %00018477
000357a9: goto %000185cf

000185cf:
000185d2: R30 := 0x40FC34
000185d4: call @strdup with return %000185d6

000185d6:
000185dc: mem := mem with [R20 + 0x38, el]:u64 <- R0
000357aa: goto %00018477

00018477:
00018481: R0 := mem[R19 + 0x40, el]:u64
00018487: when R0 = 0 goto %00018485
000357ab: goto %000185c0

000185c0:
000185c3: R30 := 0x40FC44
000185c5: call @strdup with return %000185c7

000185c7:
000185cd: mem := mem with [R20 + 0x40, el]:u64 <- R0
000357ac: goto %00018485

00018485:
0001848f: R0 := mem[R19 + 0x48, el]:u64
00018495: when R0 = 0 goto %00018493
000357ad: goto %000185b1

000185b1:
000185b4: R30 := 0x40FC54
000185b6: call @strdup with return %000185b8

000185b8:
000185be: mem := mem with [R20 + 0x48, el]:u64 <- R0
000357ae: goto %00018493

00018493:
0001849d: R0 := mem[R19 + 0x50, el]:u64
000184a3: when R0 = 0 goto %000184a1
000357af: goto %000185a2

000185a2:
000185a5: R30 := 0x40FC64
000185a7: call @strdup with return %000185a9

000185a9:
000185af: mem := mem with [R20 + 0x50, el]:u64 <- R0
000357b0: goto %000184a1

000184a1:
000184ab: R0 := mem[R19 + 0x58, el]:u64
000184b1: when R0 = 0 goto %000184af
000357b1: goto %00018582

00018582:
00018587: R3 := pad:64[mem[R19 + 0x18, el]:u32]
0001858c: VF := 0
0001858f: CF := 1
00018593: ZF := 31:0[R3] = 0
00018597: NF := 31:31[R3]
0001859e: when NF = VF & ~ZF goto %000184f8
000357b2: goto %000184af

000184f8:
000184fe: mem := mem with [R31 + 0x20, el]:u64 <- R21
00018504: R21 := extend:64[31:0[R3]]
0001850a: R0 := R21
0001850f: R30 := 0x40FCB0
00018511: call @zmalloc with return %00018513

00018513:
00018518: R2 := extend:64[mem[R19 + 0x18, el]:u32]
0001851e: R3 := R21
00018526: mem := mem with [R20 + 0x58, el]:u64 <- R0
0001852d: R1 := mem[R19 + 0x58, el]:u64
00018532: R30 := 0x40FCC4
00018535: call @__memcpy_chk with return %00018537

00018537:
0001853c: R21 := mem[R31 + 0x20, el]:u64
00018542: R0 := R20
00018548: #378 := R31 + 0x10
0001854d: R19 := mem[#378, el]:u64
00018552: R20 := mem[#378 + 8, el]:u64
00018559: R29 := mem[R31, el]:u64
0001855e: R30 := mem[R31 + 8, el]:u64
00018562: R31 := R31 + 0x30
00018567: R1 := 0
0001856c: R2 := 0
00018571: R3 := 0
00018576: R16 := 0
0001857b: R17 := 0
00018580: call R30 with noreturn

000184af:
000184b8: R0 := R20
000184be: #377 := R31 + 0x10
000184c3: R19 := mem[#377, el]:u64
000184c8: R20 := mem[#377 + 8, el]:u64
000184cf: R29 := mem[R31, el]:u64
000184d4: R30 := mem[R31 + 8, el]:u64
000184d8: R31 := R31 + 0x30
000184dd: R1 := 0
000184e2: R2 := 0
000184e7: R3 := 0
000184ec: R16 := 0
000184f1: R17 := 0
000184f6: call R30 with noreturn

000357b3: sub croak(croak_result)
00035e5a: croak_result :: out u32 = low:32[R0]

0001a455:
0001a459: #521 := R31 - 0x10
0001a45f: mem := mem with [#521, el]:u64 <- R29
0001a465: mem := mem with [#521 + 8, el]:u64 <- R30
0001a469: R31 := #521
0001a46f: R29 := R31
0001a475: when 31:0[R1] = 0 goto %0001a473
000357b4: goto %0001abc4

0001abc4:
0001abc8: R2 := R0
0001abcd: R1 := 0x414000
0001abd2: R0 := 2
0001abd8: R1 := R1 + 0x7D8
0001abdd: R30 := 0x40EF30
0001abdf: call @__printf_chk with return %0001a49b

0001a49b:
0001a4a1: R0 := 1
0001a4a6: R30 := 0x40EF38
0001a4a8: call @myexit with return %0001a473

0001a473:
0001a47c: R3 := R0
0001a481: R2 := 0x414000
0001a486: R1 := 2
0001a48c: R2 := R2 + 0x7D8
0001a491: R0 := 3
0001a496: R30 := 0x40EF50
0001a498: call @__syslog_chk with return %0001a49a

0001a49a:
0001a49d: goto %0001a49b

000357b5: sub data_send(data_send_result)
00035e5b: data_send_result :: out u32 = low:32[R0]

0001e9cb:
0001e9d2: when R2 <> 0 goto %0001e9d0
000357b6: goto %0001ef72

0001e9d0:
0001e9d9: #784 := R31 - 0x60
0001e9df: mem := mem with [#784, el]:u64 <- R29
0001e9e5: mem := mem with [#784 + 8, el]:u64 <- R30
0001e9e9: R31 := #784
0001e9ef: R29 := R31
0001e9f5: #785 := R31 + 0x10
0001e9fb: mem := mem with [#785, el]:u64 <- R19
0001ea01: mem := mem with [#785 + 8, el]:u64 <- R20
0001ea07: R20 := R2
0001ea0d: #786 := R31 + 0x20
0001ea13: mem := mem with [#786, el]:u64 <- R21
0001ea19: mem := mem with [#786 + 8, el]:u64 <- R22
0001ea1f: R21 := pad:64[31:0[R0]]
0001ea24: R0 := 0x800
0001ea2a: #787 := R31 + 0x30
0001ea30: mem := mem with [#787, el]:u64 <- R23
0001ea36: mem := mem with [#787 + 8, el]:u64 <- R24
0001ea3c: R24 := pad:64[31:0[R1]]
0001ea42: #788 := R31 + 0x40
0001ea48: mem := mem with [#788, el]:u64 <- R25
0001ea4e: mem := mem with [#788 + 8, el]:u64 <- R26
0001ea54: #789 := R31 + 0x50
0001ea5a: mem := mem with [#789, el]:u64 <- R27
0001ea60: mem := mem with [#789 + 8, el]:u64 <- R28
0001ea65: R30 := 0x4092BC
0001ea67: call @zmalloc with return %0001ea69

0001ea69:
0001ea6d: R23 := R0
0001ea73: #790 := R20 + 1
0001ea78: VF := extend:128[#790] <> extend:128[R20] + 1
0001ea7d: CF := pad:128[#790] <> pad:128[R20] + 1
0001ea81: ZF := #790 = 0
0001ea85: NF := 63:63[#790]
0001ea8b: when ZF goto %0001ea89
000357b7: goto %0001ef5f

0001ea89:
0001ea91: R2 := 0x800
0001ea96: R25 := 1
0001ea9c: R27 := pad:64[31:0[R2]]
0001eaa1: R22 := 0
0001eaa6: goto %0001eaa4

0001ef5f:
0001ef62: R25 := 1
0001ef67: R22 := 0
0001ef6c: R2 := 0
0001ef70: goto %0001edca

0001edca:
0001edcf: R2 := R20 + ~R2 + 1
0001edd5: #803 := R2 - 0x800
0001edda: VF := extend:128[#803] <> extend:128[R2] - 0x800
0001eddf: CF := pad:128[#803] <> pad:128[R2] + 0xFFFFFFFFFFFFF800
0001ede3: ZF := #803 = 0
0001ede7: NF := 63:63[#803]
0001edef: when NF = VF & ~ZF goto %0001eded
000357b8: goto %0001eee1

0001eded:
0001edf5: R2 := 0x800
0001edfb: R27 := pad:64[31:0[R2]]
0001edff: goto %0001eaa4

0001eee1:
0001eee6: R27 := pad:64[31:0[R20] + ~31:0[R22] + 1]
0001eeec: R2 := extend:64[31:0[R27]]
000357b9: goto %0001eaa4

0001eaa4:
0001eaab: R1 := R23
0001eab1: R0 := pad:64[31:0[R24]]
0001eab6: R3 := 0x800
0001eabb: R30 := 0x409368
0001eabe: call @__read_chk with return %0001eac0

0001eac0:
0001eac4: R19 := R0
0001eaca: R26 := pad:64[31:0[R0]]
0001eacf: VF := 0
0001ead2: CF := 1
0001ead6: ZF := 31:0[R0] = 0
0001eada: NF := 31:31[R0]
0001eae2: when NF = VF & ~ZF goto %0001eae0
000357ba: goto %0001ef1c

0001ef1c:
0001ef1f: when 31:31[R21] goto %0001eed4
000357bb: goto %0001ef23

0001eed4:
0001eed8: R0 := R23
0001eedd: R30 := 0x409404
0001eedf: call @free with return %0001ecb8

0001ef23:
0001ef26: R28 := 0x42F000
0001ef2d: R28 := mem[R28 + 0xF30, el]:u64
0001ef34: R0 := pad:64[mem[R28, el]:u32]
0001ef39: when 31:0[R0] = 0 goto %0001ed46
000357bc: goto %0001ef3d

0001ed46:
0001ed4a: R0 := pad:64[31:0[R21]]
0001ed4f: R30 := 0x409444
0001ed51: call @so_closed with return %0001ed53

0001ed53:
0001ed57: when 31:0[R0] <> 0 goto %0001ed55
000357bd: goto %0001ec5b

0001ef3d:
0001ef40: when 31:0[R19] = 0 goto %0001ee01
000357be: goto %0001ef44

0001ef44:
0001ef47: R30 := 0x409394
0001ef49: call @__errno_location with return %0001ef4b

0001ef4b:
0001ef50: R0 := pad:64[mem[R0, el]:u32]
0001ef55: R30 := 0x40939C
0001ef57: call @strerror with return %0001ef59

0001ef59:
0001ef5d: R6 := R0
000357bf: goto %0001ee0d

0001eae0:
0001eaea: R22 := pad:64[31:0[R22] + 31:0[R0]]
0001eaf0: when 31:31[R21] goto %0001eaee
000357c0: goto %0001eeee

0001eeee:
0001eef1: R28 := 0x42F000
0001eef8: R28 := mem[R28 + 0xF30, el]:u64
0001eeff: R0 := pad:64[mem[R28, el]:u32]
0001ef04: when 31:0[R0] <> 0 goto %0001ee01
000357c1: goto %0001ef08

0001ee01:
0001ee04: R6 := 0x414000
0001ee0a: R6 := R6 + 0x560
0001ee0f: goto %0001ee0d

0001ee0d:
0001ee14: R3 := pad:64[31:0[R27]]
0001ee1a: R5 := R20
0001ee20: R4 := pad:64[31:0[R22]]
0001ee26: R2 := pad:64[31:0[R19]]
0001ee2b: R1 := 0x414000
0001ee31: R1 := R1 + 0x568
0001ee36: R0 := 2
0001ee3b: R30 := 0x4093C0
0001ee3d: call @__printf_chk with return %0001ee3f

0001ee3f:
0001ee43: R0 := pad:64[31:0[R21]]
0001ee48: R30 := 0x4093C8
0001ee4a: call @so_closed with return %0001ee4c

0001ee4c:
0001ee4f: when 31:0[R0] <> 0 goto %0001ed55
000357c2: goto %0001ee53

0001ee53:
0001ee56: VF := 0
0001ee59: CF := 1
0001ee5d: ZF := 31:0[R21] = 0
0001ee61: NF := 31:31[R21]
0001ee68: #804 := NF = VF
0001ee6b: VF := 0
0001ee6f: CF := #804
0001ee74: ZF := 31:0[R19] = 0 | ~#804
0001ee79: NF := #804 & 31:31[R19]
0001ee81: when NF = VF & ~ZF goto %0001ee7f
000357c3: goto %0001eeb7

0001eeb7:
0001eeba: VF := 0
0001eebd: CF := 1
0001eec1: ZF := 31:0[R19] = 0
0001eec5: NF := 31:31[R19]
0001eecc: when NF = VF & ~ZF goto %0001eaee
000357c4: goto %0001eed0

0001eed0:
0001eed2: goto %0001ec5b

0001ef08:
0001ef0c: R0 := pad:64[31:0[R21]]
0001ef11: R30 := 0x4092F8
0001ef13: call @so_closed with return %0001ef15

0001ef15:
0001ef18: when 31:0[R0] <> 0 goto %0001ed55
000357c5: goto %0001ee7f

0001ed55:
0001ed5e: R0 := R23
0001ed63: R26 := 0xFFFFFC19
0001ed68: R30 := 0x40952C
0001ed6a: call @free with return %0001ed6c

0001ed6c:
0001ed6e: goto %0001ecfa

0001ee7f:
0001ee88: R1 := R23
0001ee8e: R2 := extend:64[31:0[R19]]
0001ee94: R0 := pad:64[31:0[R21]]
0001ee99: R30 := 0x40930C
0001ee9b: call @write_wrapper with return %0001ee9d

0001ee9d:
0001eea2: R1 := pad:64[mem[R28, el]:u32]
0001eea8: R27 := R0
0001eeae: R25 := pad:64[31:0[R0]]
0001eeb3: when 31:0[R1] <> 0 goto %0001ec11
000357c6: goto %0001ec35

0001ec11:
0001ec15: R2 := pad:64[31:0[R0]]
0001ec1b: R3 := pad:64[31:0[R19]]
0001ec20: R1 := 0x414000
0001ec25: R0 := 2
0001ec2b: R1 := R1 + 0x5A0
0001ec30: R30 := 0x4094C0
0001ec32: call @__printf_chk with return %0001ec34

0001ec34:
0001ec37: goto %0001ec35

0001ec35:
0001ec3b: VF := 0
0001ec3e: CF := 1
0001ec42: ZF := 31:0[R27] = 0
0001ec46: NF := 31:31[R27]
0001ec54: when ~(NF = VF & ~ZF) goto %0001ec4d
0001ec55: goto %0001ec50

0001ec50:
0001ec51: R0 := 1
0001ec57: goto %0001ec53

0001ec4d:
0001ec4e: R0 := 0
0001ec56: goto %0001ec53

0001ec53:
0001ec5d: when 31:0[R0] = 0 goto %0001ec5b
000357c7: goto %0001eaee

0001ec5b:
0001ec63: VF := 0
0001ec66: CF := 1
0001ec6a: ZF := 31:0[R25] = 0
0001ec6e: NF := 31:31[R25]
0001ec7c: when NF = VF & ~ZF goto %0001ec75
0001ec7d: goto %0001ec78

0001ec78:
0001ec79: R27 := 1
0001ec7f: goto %0001ec7b

0001ec75:
0001ec76: R27 := 0
0001ec7e: goto %0001ec7b

0001ec7b:
0001ec84: VF := 0
0001ec87: CF := 1
0001ec8b: ZF := 31:0[R19] = 0
0001ec8f: NF := 31:31[R19]
0001ec9d: when NF = VF & ~ZF goto %0001ec96
0001ec9e: goto %0001ec99

0001ec99:
0001ec9a: R0 := 1
0001eca0: goto %0001ec9c

0001ec96:
0001ec97: R0 := 0
0001ec9f: goto %0001ec9c

0001ec9c:
0001eca7: R27 := pad:64[31:0[R27] | 31:0[R0]]
0001ecad: R0 := R23
0001ecb2: R30 := 0x409464
0001ecb4: call @free with return %0001ecb6

0001ecb6:
0001ecba: when 31:0[R27] <> 0 goto %0001ecb8
000357c8: goto %0001eb7a

0001eaee:
0001eaf6: R27 := 0x800
0001eafb: R2 := 0x800
0001eb01: #791 := R20 + 1
0001eb06: VF := extend:128[#791] <> extend:128[R20] + 1
0001eb0b: CF := pad:128[#791] <> pad:128[R20] + 1
0001eb0f: ZF := #791 = 0
0001eb13: NF := 63:63[#791]
0001eb18: when ZF goto %0001eaa4
000357c9: goto %0001eb1c

0001eb1c:
0001eb20: R2 := extend:64[31:0[R22]]
0001eb26: #792 := ~R2
0001eb2b: #793 := R20 + ~R2
0001eb31: VF := extend:128[#793 + 1] <> extend:128[R20] + extend:128[#792] +
          1
0001eb37: CF := pad:128[#793 + 1] <> pad:128[R20] + pad:128[#792] + 1
0001eb3b: ZF := #793 + 1 = 0
0001eb3f: NF := 63:63[#793 + 1]
0001eb47: when ~(NF = VF & ~ZF) goto %0001eb45
000357ca: goto %0001edca

0001eb45:
0001eb4d: VF := 0
0001eb50: CF := 1
0001eb54: ZF := 31:0[R25] = 0
0001eb58: NF := 31:31[R25]
0001eb5e: R0 := R23
0001eb6c: when NF = VF & ~ZF goto %0001eb65
0001eb6d: goto %0001eb68

0001eb68:
0001eb69: R27 := 1
0001eb6f: goto %0001eb6b

0001eb65:
0001eb66: R27 := 0
0001eb6e: goto %0001eb6b

0001eb6b:
0001eb74: R30 := 0x409518
0001eb76: call @free with return %0001eb78

0001eb78:
0001eb7c: when 31:0[R27] = 0 goto %0001eb7a
000357cb: goto %0001edc6

0001edc6:
0001edc8: goto %0001ecb8

0001ecb8:
0001ecc0: VF := 0
0001ecc3: CF := 1
0001ecc7: ZF := 31:0[R19] = 0
0001eccb: NF := 31:31[R19]
0001ecd1: #799 := ZF
0001ecd4: VF := 0
0001ecd8: CF := #799
0001ecdd: ZF := 31:0[R25] = 0 | ~#799
0001ece2: NF := #799 & 31:31[R25]
0001ecea: when ~(NF = VF & ~ZF) goto %0001ece8
000357cc: goto %0001ed70

0001ece8:
0001ecf0: R28 := 0x42F000
0001ecf7: R28 := mem[R28 + 0xF30, el]:u64
0001ecfc: goto %0001ecfa

0001ed70:
0001ed74: #800 := R20 + 1
0001ed79: VF := extend:128[#800] <> extend:128[R20] + 1
0001ed7e: CF := pad:128[#800] <> pad:128[R20] + 1
0001ed82: ZF := #800 = 0
0001ed86: NF := 63:63[#800]
0001ed8b: when ZF goto %0001eb7a
000357cd: goto %0001ed8f

0001ed8f:
0001ed93: #801 := extend:64[31:0[R22]]
0001ed98: #802 := R20 + ~extend:64[31:0[R22]]
0001ed9e: VF := extend:128[#802 + 1] <> extend:128[R20] + extend:128[~#801] +
          1
0001eda4: CF := pad:128[#802 + 1] <> pad:128[R20] + pad:128[~#801] + 1
0001eda8: ZF := #802 + 1 = 0
0001edac: NF := 63:63[#802 + 1]
0001edb1: when ZF goto %0001eb7a
000357ce: goto %0001edb5

0001edb5:
0001edb8: R28 := 0x42F000
0001edbf: R28 := mem[R28 + 0xF30, el]:u64
0001edc4: R26 := 0
000357cf: goto %0001ecfa

0001ecfa:
0001ed02: R0 := pad:64[mem[R28, el]:u32]
0001ed08: when 31:0[R0] <> 0 goto %0001ed06
000357d0: goto %0001ed3d

0001ed06:
0001ed0f: R4 := pad:64[31:0[R26]]
0001ed15: R3 := pad:64[31:0[R24]]
0001ed1b: R2 := pad:64[31:0[R21]]
0001ed20: R1 := 0x414000
0001ed25: R0 := 2
0001ed2b: R1 := R1 + 0x5C0
0001ed30: R30 := 0x4094EC
0001ed32: call @__printf_chk with return %0001ed34

0001ed34:
0001ed37: R0 := 0
0001ed3b: goto %0001eb84

0001ed3d:
0001ed40: R0 := 0
0001ed44: goto %0001eb84

0001eb7a:
0001eb82: R0 := 1
000357d1: goto %0001eb84

0001eb84:
0001eb88: #794 := R31 + 0x10
0001eb8d: R19 := mem[#794, el]:u64
0001eb92: R20 := mem[#794 + 8, el]:u64
0001eb98: #795 := R31 + 0x20
0001eb9d: R21 := mem[#795, el]:u64
0001eba2: R22 := mem[#795 + 8, el]:u64
0001eba8: #796 := R31 + 0x30
0001ebad: R23 := mem[#796, el]:u64
0001ebb2: R24 := mem[#796 + 8, el]:u64
0001ebb8: #797 := R31 + 0x40
0001ebbd: R25 := mem[#797, el]:u64
0001ebc2: R26 := mem[#797 + 8, el]:u64
0001ebc8: #798 := R31 + 0x50
0001ebcd: R27 := mem[#798, el]:u64
0001ebd2: R28 := mem[#798 + 8, el]:u64
0001ebd9: R29 := mem[R31, el]:u64
0001ebde: R30 := mem[R31 + 8, el]:u64
0001ebe2: R31 := R31 + 0x60
0001ebe7: R1 := 0
0001ebec: R2 := 0
0001ebf1: R3 := 0
0001ebf6: R4 := 0
0001ebfb: R5 := 0
0001ec00: R6 := 0
0001ec05: R16 := 0
0001ec0a: R17 := 0
0001ec0f: call R30 with noreturn

0001ef72:
0001ef75: R0 := 1
0001ef7a: R1 := 0
0001ef7f: R2 := 0
0001ef84: R3 := 0
0001ef89: R4 := 0
0001ef8e: R5 := 0
0001ef93: R6 := 0
0001ef98: R16 := 0
0001ef9d: R17 := 0
0001efa2: call R30 with noreturn

000357d2: sub deregister_tm_clones(deregister_tm_clones_result)
00035e5c: deregister_tm_clones_result :: out u32 = low:32[R0]

0002cf37:
0002cf3a: R0 := 0x430000
0002cf40: R0 := R0 + 0x38
0002cf45: R1 := 0x430000
0002cf4b: R1 := R1 + 0x38
0002cf51: #1341 := ~R0
0002cf56: #1342 := R1 + ~R0
0002cf5c: VF := extend:128[#1342 + 1] <> extend:128[R1] + extend:128[#1341] +
          1
0002cf62: CF := pad:128[#1342 + 1] <> pad:128[R1] + pad:128[#1341] + 1
0002cf66: ZF := #1342 + 1 = 0
0002cf6a: NF := 63:63[#1342 + 1]
0002cf70: when ZF goto %0002cf6e
000357d3: goto %0002d772

0002d772:
0002d775: R1 := 0x42F000
0002d77c: R1 := mem[R1 + 0xEF8, el]:u64
0002d781: when R1 = 0 goto %0002cf6e
000357d4: goto %0002d785

0002cf6e:
0002cf76: call R30 with noreturn

0002d785:
0002d789: R16 := R1
0002d78e: call R16 with noreturn

000357d5: sub direct_request(direct_request_result)
00035e5d: direct_request_result :: out u32 = low:32[R0]

000254f3:
000254fa: R31 := R31 - 0x130
00025500: R2 := R0
00025505: V0 := 0
0002550b: R4 := R0 + 0x14
00025511: R5 := R0 + 0x18
00025517: #1065 := R31 + 0xD0
0002551d: mem := mem with [#1065, el]:u64 <- R29
00025523: mem := mem with [#1065 + 8, el]:u64 <- R30
00025529: R29 := R31 + 0xD0
0002552e: R3 := 0x42F000
00025535: R3 := mem[R3 + 0xFB8, el]:u64
0002553b: #1066 := R31 + 0xE0
00025541: mem := mem with [#1066, el]:u64 <- R19
00025547: mem := mem with [#1066 + 8, el]:u64 <- R20
0002554e: R6 := pad:64[mem[R2, el]:u32]
00025554: #1067 := R31 + 0xF0
0002555a: mem := mem with [#1067, el]:u64 <- R21
00025560: mem := mem with [#1067 + 8, el]:u64 <- R22
00025566: R21 := R1
0002556c: #1068 := R31 + 0x100
00025572: mem := mem with [#1068, el]:u64 <- R23
00025578: mem := mem with [#1068 + 8, el]:u64 <- R24
0002557e: R24 := R31 + 0x98
00025584: R2 := R24
0002558a: #1069 := R31 + 0x120
00025590: mem := mem with [#1069, el]:u64 <- R27
00025596: mem := mem with [#1069 + 8, el]:u64 <- R28
0002559d: R0 := pad:64[mem[R0 + 0x10, el]:u16]
000255a2: R19 := 0x42F000
000255a9: R19 := mem[R19 + 0xF30, el]:u64
000255af: #1070 := 31:0[R0] - 2
000255b4: VF := extend:64[#1070] <> extend:64[31:0[R0]] - 2
000255b9: CF := pad:64[#1070] <> pad:64[31:0[R0]] + 0xFFFFFFFE
000255bd: ZF := #1070 = 0
000255c1: NF := 31:31[#1070]
000255c9: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R6]
000255d0: R1 := mem[R3, el]:u64
000255d8: mem := mem with [R31 + 0xC8, el]:u64 <- R1
000255dd: R1 := 0
000255e5: mem := mem with [R24, el]:u128 <- V0
000255eb: mem := mem with [R24 + 0x10, el]:u128 <- V0
000255f9: when ZF <> 1 goto %000255f1
000255fa: goto %000255f5

000255f5:
000255f6: R1 := R4
000255fc: goto %000255f8

000255f1:
000255f2: R1 := R5
000255fb: goto %000255f8

000255f8:
00025601: R3 := 0x2E
00025609: mem := mem with [R24 + 0x1E, el]:u128 <- V0
00025611: mem := mem with [R31 + 0x54, el]:u32 <- 31:0[R6]
00025617: #1071 := R31 + 0x60
0002561c: mem := mem with [#1071, el]:u64 <- 0
00025621: mem := mem with [#1071 + 8, el]:u64 <- 0
00025626: R30 := 0x406240
00025628: call @inet_ntop with return %0002562a

0002562a:
0002562f: R0 := pad:64[mem[R19, el]:u32]
00025635: when 31:0[R0] <> 0 goto %00025633
000357d6: goto %00026bd3

00025633:
0002563b: R1 := 0x413000
00025640: R0 := 2
00025646: R1 := R1 + 0x998
0002564b: R30 := 0x4068B4
0002564d: call @__printf_chk with return %0002564f

0002564f:
00025654: R0 := mem[R21 + 0x40, el]:u64
0002565b: R1 := pad:64[mem[R21 + 0x20, el]:u32]
00025660: R30 := 0x4068C0
00025662: call @host_connect with return %00025664

00025664:
0002566a: mem := mem with [R31 + 0x50, el]:u32 <- 31:0[R0]
00025670: R27 := pad:64[31:0[R0]]
00025676: when ~31:31[R0] goto %00025674
000357d7: goto %00026b20

00026bd3:
00026bd8: R0 := mem[R21 + 0x40, el]:u64
00026bdf: R1 := pad:64[mem[R21 + 0x20, el]:u32]
00026be4: R30 := 0x406254
00026be6: call @host_connect with return %00026be8

00026be8:
00026bee: mem := mem with [R31 + 0x50, el]:u32 <- 31:0[R0]
00026bf4: R27 := pad:64[31:0[R0]]
00026bf9: when 31:31[R0] goto %00026b20
000357d8: goto %00025674

00026b20:
00026b23: R30 := 0x4068D0
00026b25: call @__errno_location with return %00026b27

00026b27:
00026b2b: R19 := R0
00026b32: R0 := pad:64[mem[R0, el]:u32]
00026b39: R20 := mem[R21 + 0x40, el]:u64
00026b40: R22 := pad:64[mem[R21 + 0x20, el]:u32]
00026b45: R30 := 0x4068E4
00026b47: call @strerror with return %00026b49

00026b49:
00026b4d: R5 := R0
00026b53: R4 := pad:64[31:0[R22]]
00026b59: R3 := R20
00026b5e: R1 := 2
00026b63: R0 := 4
00026b68: R2 := 0x413000
00026b6e: R2 := R2 + 0x9B8
00026b73: R30 := 0x406904
00026b75: call @__syslog_chk with return %00026b77

00026b77:
00026b7c: R0 := pad:64[mem[R19, el]:u32]
00026b83: R19 := mem[R21 + 0x48, el]:u64
00026b88: R30 := 0x406910
00026b8a: call @strerror with return %00026b8c

00026b8c:
00026b90: R1 := R0
00026b96: R0 := R19
00026b9b: R30 := 0x40691C
00026b9d: call @gen_502_page with return %00026b9f

00026b9f:
00026ba3: R19 := R0
00026ba8: R30 := 0x406924
00026baa: call @strlen with return %00026bac

00026bac:
00026bb0: R2 := R0
00026bb7: R0 := pad:64[mem[R31 + 0x14, el]:u32]
00026bbd: R1 := R19
00026bc2: R30 := 0x406934
00026bc4: call @write_wrapper with return %00026bc6

00026bc6:
00026bca: R0 := R19
00026bcf: R30 := 0x40693C
00026bd1: call @free with return %00025ce1

00025674:
0002567c: R0 := 0x42F000
00025683: R0 := mem[R0 + 0xF38, el]:u64
00025688: R1 := 1
0002568f: R0 := mem[R0, el]:u64
00025694: R30 := 0x406274
00025696: call @dup_auth with return %00025698

00025698:
0002569e: mem := mem with [R31 + 0x18, el]:u64 <- R0
000256a5: R1 := mem[R21 + 0x40, el]:u64
000256ab: when R1 = 0 goto %000256a9
000357d9: goto %00026a1d

000256a9:
000256b3: R0 := mem[R21 + 0x48, el]:u64
000256b8: R1 := 0x413000
000256be: R1 := R1 + 0x9E0
000256c3: R30 := 0x4069F4
000256c5: call @gen_502_page with return %000256c7

000256c7:
000256cb: R19 := R0
000256d0: R30 := 0x4069FC
000256d2: call @strlen with return %000256d4

000256d4:
000256d8: R2 := R0
000256df: R0 := pad:64[mem[R31 + 0x14, el]:u32]
000256e5: R1 := R19
000256ea: R30 := 0x406A0C
000256ec: call @write_wrapper with return %000256ee

000256ee:
000256f2: R0 := R19
000256f7: R30 := 0x406A14
000256f9: call @free with return %000256fb

000256fb:
00025700: R0 := mem[R31 + 0x18, el]:u64
00025706: when R0 = 0 goto %00025704
000357da: goto %00026a16

00026a16:
00026a19: R30 := 0x406A20
00026a1b: call @free with return %00025704

00025704:
0002570c: R0 := 0xFFFFFFFFFFFFFFFF
00025714: mem := mem with [R31 + 8, el]:u64 <- R0
000357db: goto %00025716

00026a1d:
00026a21: R0 := R1
00026a27: #1108 := R31 + 0x110
00026a2d: mem := mem with [#1108, el]:u64 <- R25
00026a33: mem := mem with [#1108 + 8, el]:u64 <- R26
00026a38: R30 := 0x40628C
00026a3a: call @strdup with return %00026a3c

00026a3c:
00026a41: R1 := pad:64[mem[R21, el]:u32]
00026a47: R22 := R0
00026a4e: R2 := pad:64[mem[R21 + 0x20, el]:u32]
00026a56: mem := mem with [R31 + 0x10, el]:u32 <- 31:0[R2]
00026a5c: when 31:0[R1] = 0 goto %00026a5a
000357dc: goto %00026afa

00026afa:
00026aff: R1 := mem[R21 + 0x28, el]:u64
00026b04: R0 := 0x413000
00026b0a: R0 := R0 + 0x9F8
00026b0f: R30 := 0x4062B0
00026b11: call @strcasecmp with return %00026b13

00026b13:
00026b17: R20 := pad:64[31:0[R0]]
00026b1c: when 31:0[R0] = 0 goto %00026a90
000357dd: goto %00026a5a

00026a5a:
00026a63: R0 := R21
00026a68: R1 := 0
00026a6d: R30 := 0x4062C4
00026a6f: call @http_has_body with return %00026a71

00026a71:
00026a74: VF := 0
00026a77: CF := 1
00026a7b: ZF := R0 = 0
00026a7f: NF := 63:63[R0]
00026a8b: when ZF goto %00026a84
00026a8c: goto %00026a87

00026a87:
00026a88: R20 := 1
00026a8e: goto %00026a8a

00026a84:
00026a85: R20 := 0
00026a8d: goto %00026a8a

00026a8a:
000357de: goto %00026a90

00026a90:
00026a94: R0 := R21
00026a99: R30 := 0x4062D4
00026a9b: call @dup_rr_data with return %00026a9d

00026a9d:
00026aa1: R1 := R31 + 0x54
00026aa9: mem := mem with [R31 + 0x40, el]:u64 <- R1
00026aaf: R1 := R31 + 0x50
00026ab5: R21 := R31 + 0x60
00026abd: mem := mem with [R31 + 0x38, el]:u64 <- R1
00026ac3: R1 := R31 + 0x68
00026ac8: R2 := 0x413000
00026ace: R2 := R2 + 0xA00
00026ad5: mem := mem with [R31 + 8, el]:u64 <- 0
00026add: mem := mem with [R31 + 0x28, el]:u64 <- R2
00026ae5: mem := mem with [R31 + 0x48, el]:u64 <- R1
00026aea: R1 := 0x413000
00026af0: R1 := R1 + 0xA28
00026af8: mem := mem with [R31 + 0x30, el]:u64 <- R1
000357df: goto %00026649

00026649:
00026652: mem := mem with [R31 + 0x60, el]:u64 <- R0
00026657: R30 := 0x406314
00026659: call @new_rr_data with return %0002665b

0002665b:
00026660: R1 := mem[R31 + 0x38, el]:u64
00026668: mem := mem with [R31 + 0x68, el]:u64 <- R0
0002666f: R0 := mem[R31 + 0x40, el]:u64
00026674: R26 := 0
0002667b: mem := mem with [R31 + 0x20, el]:u32 <- 0
00026683: mem := mem with [R31 + 0x78, el]:u64 <- R0
00026689: #1093 := R31 + 0x80
0002668f: mem := mem with [#1093, el]:u64 <- R1
00026695: mem := mem with [#1093 + 8, el]:u64 <- R1
0002669d: mem := mem with [R31 + 0x90, el]:u64 <- R0
000357e0: goto %00025897

00025897:
000258a0: R28 := extend:64[31:0[R26]]
000258a7: R2 := pad:64[mem[R19, el]:u32]
000258ad: R23 := extend:64[31:0[R26].0]
000258b5: R1 := mem[R21 + (60:0[R28].0), el]:u64
000258bc: R0 := pad:64[mem[R1 + 0x1C, el]:u32]
000258c2: when 31:0[R0] = 0 goto %000258c0
000357e1: goto %000265b2

000265b2:
000265b5: when 31:0[R2] <> 0 goto %000260a6
000357e2: goto %000265b9

000260a6:
000260ab: R1 := mem[R31 + 0x28, el]:u64
000260b1: R2 := pad:64[31:0[R26] + 1]
000260b8: R3 := pad:64[mem[R31 + 0x14, el]:u32]
000260bd: R0 := 2
000260c4: R4 := pad:64[mem[R31 + 0x50, el]:u32]
000260c9: R30 := 0x4067C0
000260cb: call @__printf_chk with return %000260cd

000260cd:
000260d1: R2 := R31 + 0x78
000260d6: R0 := 2
000260dd: R1 := mem[R31 + 0x30, el]:u64
000260e5: R2 := mem[R2 + R23, el]:u64
000260ec: R25 := pad:64[mem[R2, el]:u32]
000260f2: R2 := pad:64[31:0[R25]]
000260f7: R30 := 0x4067DC
000260f9: call @__printf_chk with return %000260fb

000260fb:
00026101: R1 := mem[R21 + R23, el]:u64
00026106: goto %00026104

000265b9:
000265bd: R0 := R31 + 0x78
000265c5: R0 := mem[R0 + R23, el]:u64
000265cc: R25 := pad:64[mem[R0, el]:u32]
000357e3: goto %00026104

00026104:
0002610b: R0 := pad:64[31:0[R25]]
00026110: R30 := 0x406368
00026112: call @headers_recv with return %00026114

00026114:
00026117: when 31:0[R0] = 0 goto %000257c3
000357e4: goto %000258c0

000258c0:
000258c8: VF := 0
000258cb: CF := 1
000258cf: ZF := 31:0[R26] = 0
000258d3: NF := 31:31[R26]
000258da: R25 := pad:64[mem[R19, el]:u32]
000258e6: when ZF <> 1 goto %000258df
000258e7: goto %000258e2

000258e2:
000258e3: R23 := 1
000258e9: goto %000258e5

000258df:
000258e0: R23 := 0
000258e8: goto %000258e5

000258e5:
000258ee: VF := 0
000258f1: CF := 1
000258f5: ZF := R22 = 0
000258f9: NF := 63:63[R22]
00025905: when ZF goto %000258fe
00025906: goto %00025901

00025901:
00025902: R0 := 1
00025908: goto %00025904

000258fe:
000258ff: R0 := 0
00025907: goto %00025904

00025904:
0002590f: #1078 := 31:0[R23] & 31:0[R0]
00025912: VF := 0
00025915: CF := 0
00025919: ZF := #1078 = 0
0002591e: NF := 31:31[R23] & 31:31[R0]
00025922: R23 := pad:64[#1078]
00025928: when ZF goto %00025926
000357e5: goto %0002654e

00025926:
0002592f: when 31:0[R25] <> 0 goto %0002592d
000357e6: goto %00026547

0002592d:
00025938: R0 := mem[R21 + (60:0[R28].0), el]:u64
0002593f: R0 := mem[R0 + 8, el]:u64
00025944: R30 := 0x4065F8
00025946: call @hlist_dump with return %00025948

00025948:
0002594c: when 31:0[R26] <> 0 goto %0002594a
000357e7: goto %00026532

00026547:
0002654a: when 31:0[R26] = 0 goto %00026532
000357e8: goto %0002594a

00026532:
00026537: R23 := mem[R31 + 0x60, el]:u64
0002653e: R0 := pad:64[mem[R23, el]:u32]
00026543: when 31:0[R0] = 0 goto %00026375
000357e9: goto %0002613d

0002594a:
00025953: #1079 := 31:0[R26] - 1
00025958: VF := extend:64[#1079] <> extend:64[31:0[R26]] - 1
0002595d: CF := pad:64[#1079] <> pad:64[31:0[R26]] + 0xFFFFFFFF
00025961: ZF := #1079 = 0
00025965: NF := 31:31[#1079]
0002596b: when ZF <> 1 goto %00025969
000357ea: goto %000264f4

000264f4:
000264f9: R0 := mem[R31 + 0x68, el]:u64
00026500: R1 := pad:64[mem[R0 + 0x10, el]:u32]
00026506: #1090 := 31:0[R1] - 0x191
0002650b: VF := extend:64[#1090] <> extend:64[31:0[R1]] - 0x191
00026510: CF := pad:64[#1090] <> pad:64[31:0[R1]] + 0xFFFFFE6F
00026514: ZF := #1090 = 0
00026518: NF := 31:31[#1090]
0002651d: when ZF goto %000259b2
000357eb: goto %00026521

000259b2:
000259b7: R0 := mem[R0 + 8, el]:u64
000259bc: R2 := 0x413000
000259c1: R1 := 0x413000
000259c7: R2 := R2 + 0xAE8
000259cd: R1 := R1 + 0x850
000259d2: R30 := 0x406858
000259d4: call @hlist_subcmp_all with return %000259d6

000259d6:
000259da: when 31:0[R0] <> 0 goto %000259d8
000357ec: goto %000264d8

000259d8:
000259e2: R0 := mem[R31 + 0x68, el]:u64
000259e7: R23 := 0x413000
000259ec: R25 := 0x413000
000259f2: R2 := R23 + 0xAF0
000259f8: R1 := R25 + 0x7C0
000259ff: R0 := mem[R0 + 8, el]:u64
00025a04: R30 := 0x406A78
00025a06: call @hlist_subcmp with return %00025a08

00025a08:
00025a0d: R27 := pad:64[mem[R31 + 0x50, el]:u32]
00025a13: when 31:0[R0] = 0 goto %00025a11
000357ed: goto %000264ca

000264ca:
000264cf: R0 := pad:64[mem[R19, el]:u32]
000264d4: when 31:0[R0] <> 0 goto %00025cf5
000357ee: goto %00025d0d

00025cf5:
00025cf8: R1 := 0x413000
00025cfd: R0 := 2
00025d03: R1 := R1 + 0xAF8
00025d08: R30 := 0x406C54
00025d0a: call @__printf_chk with return %00025d0c

00025d0c:
00025d0f: goto %00025d0d

00025d0d:
00025d14: R0 := pad:64[31:0[R27]]
00025d19: R30 := 0x406A90
00025d1b: call @close with return %00025d1d

00025d1d:
00025d22: R27 := mem[R31 + 0x68, el]:u64
00025d27: R3 := 1
00025d2c: R2 := 0x413000
00025d31: R1 := 0x413000
00025d37: R2 := R2 + 0x7E0
00025d3d: R1 := R1 + 0x7E8
00025d44: R0 := mem[R27 + 8, el]:u64
00025d49: R30 := 0x406AB0
00025d4b: call @hlist_mod with return %00025d4d

00025d4d:
00025d52: R2 := mem[R31 + 0x60, el]:u64
00025d59: R1 := pad:64[mem[R2 + 0x20, el]:u32]
00025d61: mem := mem with [R27 + 8, el]:u64 <- R0
00025d68: R0 := mem[R2 + 0x40, el]:u64
00025d6d: R30 := 0x406AC4
00025d6f: call @host_connect with return %00025d71

00025d71:
00025d77: mem := mem with [R31 + 0x50, el]:u32 <- 31:0[R0]
00025d7d: R27 := pad:64[31:0[R0]]
00025d82: when 31:31[R0] goto %00025c3f
000357ef: goto %00025a11

00025c3f:
00025c44: R0 := mem[R31 + 0x60, el]:u64
00025c49: R1 := 0x413000
00025c4f: R1 := R1 + 0xB18
000357f0: goto %00025c51

00025a11:
00025a1a: #1080 := R31 + 0x60
00025a1f: R2 := mem[#1080, el]:u64
00025a24: R3 := mem[#1080 + 8, el]:u64
00025a2a: R5 := pad:64[31:0[R20]]
00025a31: R4 := mem[R31 + 0x18, el]:u64
00025a37: R0 := pad:64[31:0[R27]]
00025a3e: R1 := pad:64[mem[R31 + 0x14, el]:u32]
00025a43: R30 := 0x406AE8
00025a45: call @www_authenticate with return %00025a47

00025a47:
00025a4b: when 31:0[R0] = 0 goto %00025a49
000357f1: goto %000263d6

00025a49:
00025a53: R0 := pad:64[mem[R19, el]:u32]
00025a59: when 31:0[R0] <> 0 goto %00025a57
000357f2: goto %00025a74

00025a57:
00025a5f: R1 := 0x413000
00025a64: R0 := 2
00025a6a: R1 := R1 + 0xB40
00025a6f: R30 := 0x406CC0
00025a71: call @__printf_chk with return %00025a73

00025a73:
00025a76: goto %00025a74

00025a74:
00025a7c: R2 := mem[R31 + 0x68, el]:u64
00025a81: R1 := 0x413000
00025a87: R1 := R1 + 0x978
00025a8e: R0 := mem[R2 + 0x48, el]:u64
00025a95: R2 := mem[R2 + 0x60, el]:u64
00025a9a: VF := 0
00025a9d: CF := 1
00025aa1: ZF := R2 = 0
00025aa5: NF := 63:63[R2]
00025ab3: when ZF goto %00025aab
00025ab4: goto %00025aaf

00025aaf:
00025ab0: R1 := R2
00025ab6: goto %00025ab2

00025aab:
00025aac: R1 := R1
00025ab5: goto %00025ab2

00025ab2:
00025abb: R30 := 0x406CAC
00025abd: call @gen_502_page with return %00025abf

00025abf:
00025ac2: goto %00025ac0

000263d6:
000263db: R0 := mem[R31 + 0x68, el]:u64
000263e2: R1 := pad:64[mem[R0 + 0x10, el]:u32]
000263e8: #1085 := 31:0[R1] - 0x191
000263ed: VF := extend:64[#1085] <> extend:64[31:0[R1]] - 0x191
000263f2: CF := pad:64[#1085] <> pad:64[31:0[R1]] + 0xFFFFFE6F
000263f6: ZF := #1085 = 0
000263fa: NF := 31:31[#1085]
00026400: when ZF <> 1 goto %000263fe
000357f3: goto %000264a7

000264a7:
000264ac: R1 := mem[R31 + 0x60, el]:u64
000264b3: R0 := mem[R0 + 0x48, el]:u64
000264ba: R2 := pad:64[mem[R1 + 0x20, el]:u32]
000264c1: R1 := mem[R1 + 0x40, el]:u64
000264c6: R30 := 0x406B10
000264c8: call @gen_401_page with return %00025ac0

00025ac0:
00025ac7: R19 := R0
00025acc: R30 := 0x406B18
00025ace: call @strlen with return %00025ad0

00025ad0:
00025ad4: R2 := R0
00025adb: R0 := pad:64[mem[R31 + 0x14, el]:u32]
00025ae1: R1 := R19
00025ae6: R30 := 0x406B28
00025ae8: call @write_wrapper with return %00025aea

00025aea:
00025aee: R0 := R19
00025af3: R30 := 0x406B30
00025af5: call @free with return %00025af7

00025af7:
00025afb: R0 := R21
00025b00: R30 := 0x406B38
00025b02: call @free_rr_data with return %00025b04

00025b04:
00025b09: R0 := mem[R31 + 0x48, el]:u64
00025b0e: R30 := 0x406B40
00025b10: call @free_rr_data with return %00025b12

00025b12:
00025b14: goto %000257ea

000264d8:
000264db: when 31:0[R20] <> 0 goto %00025e52
000357f4: goto %000264df

000264df:
000264e4: R0 := mem[R31 + 0x68, el]:u64
000264e9: R25 := 0x413000
000264ee: R23 := 0x413000
000264f2: goto %000263fe

00026521:
00026524: when 31:0[R20] <> 0 goto %00025e52
000357f5: goto %00026528

00025e52:
00025e57: R20 := pad:64[mem[R31 + 0x50, el]:u32]
00025e5d: R0 := pad:64[31:0[R20]]
00025e62: R30 := 0x406750
00025e64: call @so_closed with return %00025e66

00025e66:
00025e6a: when 31:0[R0] = 0 goto %00025e68
000357f6: goto %0002637c

0002637c:
00026380: R0 := pad:64[31:0[R20]]
00026385: R30 := 0x40675C
00026387: call @close with return %00026389

00026389:
0002638e: R0 := mem[R31 + 0x60, el]:u64
00026395: R1 := pad:64[mem[R0 + 0x20, el]:u32]
0002639c: R0 := mem[R0 + 0x40, el]:u64
000263a1: R30 := 0x40676C
000263a3: call @host_connect with return %000263a5

000263a5:
000263ab: mem := mem with [R31 + 0x50, el]:u32 <- 31:0[R0]
000263b1: R27 := pad:64[31:0[R0]]
000263b6: when 31:31[R0] goto %00025d86
000357f7: goto %000263ba

00025d86:
00025d8b: R0 := mem[R31 + 0x60, el]:u64
00025d90: R1 := 0x413000
00025d96: R1 := R1 + 0xB60
00025d9a: goto %00025c51

00025c51:
00025c56: R0 := mem[R0 + 0x48, el]:u64
00025c5b: R30 := 0x406BF8
00025c5d: call @gen_502_page with return %00025c5f

00025c5f:
00025c63: R19 := R0
00025c68: R30 := 0x406C00
00025c6a: call @strlen with return %00025c6c

00025c6c:
00025c70: R2 := R0
00025c77: R0 := pad:64[mem[R31 + 0x14, el]:u32]
00025c7d: R1 := R19
00025c82: R30 := 0x406C10
00025c84: call @write_wrapper with return %00025c86

00025c86:
00025c8a: R0 := R19
00025c8f: R30 := 0x406C18
00025c91: call @free with return %00025c93

00025c93:
00025c97: R0 := R21
00025c9c: R30 := 0x406C20
00025c9e: call @free_rr_data with return %00025ca0

00025ca0:
00025ca5: R0 := mem[R31 + 0x48, el]:u64
00025caa: R30 := 0x406C28
00025cac: call @free_rr_data with return %00025cae

00025cae:
00025cb1: R0 := 0xFFFFFFFFFFFFFFFF
00025cb9: mem := mem with [R31 + 8, el]:u64 <- R0
00025cc0: R0 := mem[R31 + 0x18, el]:u64
00025cc5: when R0 <> 0 goto %00025830
000357f8: goto %00025cc9

00025cc9:
00025ccc: when R22 <> 0 goto %00025823
000357f9: goto %00025cd0

00025cd0:
00025cd4: #1081 := R31 + 0x110
00025cd9: R25 := mem[#1081, el]:u64
00025cde: R26 := mem[#1081 + 8, el]:u64
00025ce3: goto %00025ce1

00025ce1:
00025ce7: R0 := 0xFFFFFFFFFFFFFFFF
00025cef: mem := mem with [R31 + 8, el]:u64 <- R0
00025cf3: goto %00025724

000263ba:
000263bd: R2 := 0x413000
000263c2: R1 := 2
000263c8: R2 := R2 + 0xB88
000263cd: R0 := 7
000263d2: R30 := 0x40678C
000263d4: call @__syslog_chk with return %00025e68

00025e68:
00025e72: R0 := mem[R31 + 0x68, el]:u64
00025e77: R30 := 0x406794
00025e79: call @reset_rr_data with return %00025e7b

00025e7b:
00025e80: R26 := pad:64[mem[R19, el]:u32]
00025e86: when 31:0[R26] <> 0 goto %00025e84
000357fa: goto %00026098

00025e84:
00025e8e: R2 := mem[R31 + 0x88, el]:u64
00025e93: R1 := 0x413000
00025e98: R20 := 0
00025e9e: R1 := R1 + 0xBC0
00025ea3: R0 := 2
00025eaa: R2 := pad:64[mem[R2, el]:u32]
00025eaf: R30 := 0x406810
00025eb1: call @__printf_chk with return %00025eb3

00025eb3:
00025eb6: goto %00025eb4

00026098:
0002609b: R20 := 0
000260a0: R28 := 0
000260a4: goto %00025794

00026528:
0002652b: R25 := 0x413000
00026530: R23 := 0x413000
000357fb: goto %000263fe

000263fe:
00026408: R0 := mem[R0 + 8, el]:u64
0002640e: R1 := R25 + 0x7C0
00026414: R2 := R23 + 0xAF0
0002641c: mem := mem with [R31 + 0x20, el]:u64 <- R1
00026421: R30 := 0x4064DC
00026423: call @hlist_subcmp with return %00026425

00026425:
00026429: R20 := pad:64[31:0[R0]]
0002642e: when 31:0[R0] <> 0 goto %00026014
000357fc: goto %00026432

00026432:
00026436: #1086 := R31 + 0x60
0002643b: R0 := mem[#1086, el]:u64
00026440: R1 := mem[#1086 + 8, el]:u64
00026445: R30 := 0x4064EC
00026447: call @http_has_body with return %00026449

00026449:
0002644d: #1087 := R0 + 1
00026452: VF := extend:128[#1087] <> extend:128[R0] + 1
00026457: CF := pad:128[#1087] <> pad:128[R0] + 1
0002645b: ZF := #1087 = 0
0002645f: NF := 63:63[#1087]
00026464: when ZF goto %00026014
000357fd: goto %00026468

00026014:
00026019: R27 := mem[R31 + 0x68, el]:u64
0002601e: goto %0002601c

00026468:
0002646c: #1088 := R31 + 0x60
00026471: R0 := mem[#1088, el]:u64
00026476: R27 := mem[#1088 + 8, el]:u64
0002647d: R1 := pad:64[mem[R0 + 0x24, el]:u32]
00026484: R0 := mem[R27 + 8, el]:u64
0002648a: #1089 := 31:0[R1] - 0xA
0002648f: VF := extend:64[#1089] <> extend:64[31:0[R1]] - 0xA
00026494: CF := pad:64[#1089] <> pad:64[31:0[R1]] + 0xFFFFFFF6
00026498: ZF := #1089 = 0
0002649c: NF := 31:31[#1089]
000264a3: when NF = VF & ~ZF goto %00025b96
000357fe: goto %0002601c

00025b96:
00025b99: R23 := 0x413000
00025b9f: R23 := R23 + 0x7B0
00025ba5: R2 := R23
00025baa: R3 := 1
00025baf: R1 := 0x413000
00025bb5: R1 := R1 + 0xBA8
00025bba: R30 := 0x406B94
00025bbc: call @hlist_mod with return %00025bbe

00025bbe:
00025bc3: R25 := mem[R31 + 0x68, el]:u64
00025bcb: mem := mem with [R27 + 8, el]:u64 <- R0
00025bd2: R1 := mem[R31 + 0x20, el]:u64
00025bd8: R2 := R23
00025bdf: R0 := mem[R25 + 8, el]:u64
00025be4: R3 := 1
00025be9: R30 := 0x406BB0
00025beb: call @hlist_mod with return %00025bed

00025bed:
00025bf3: mem := mem with [R25 + 8, el]:u64 <- R0
00025bf8: R1 := 1
00025c00: mem := mem with [R31 + 0x20, el]:u32 <- 31:0[R1]
00025c04: goto %00025969

0002601c:
00026024: R0 := mem[R27 + 8, el]:u64
0002602a: R20 := R23 + 0xAF0
00026030: R2 := R20
00026035: R3 := 1
0002603a: R1 := 0x413000
00026040: R1 := R1 + 0xBA8
00026045: R30 := 0x406524
00026047: call @hlist_mod with return %00026049

00026049:
0002604e: R23 := mem[R31 + 0x68, el]:u64
00026056: mem := mem with [R27 + 8, el]:u64 <- R0
0002605c: R2 := R20
00026062: R1 := R25 + 0x7C0
00026067: R3 := 1
0002606c: R20 := 0
00026073: R0 := mem[R23 + 8, el]:u64
00026078: R30 := 0x406544
0002607a: call @hlist_mod with return %0002607c

0002607c:
00026082: mem := mem with [R23 + 8, el]:u64 <- R0
00026087: R1 := 0xFFFFFFFFFFFFFFFF
0002608f: mem := mem with [R31 + 8, el]:u64 <- R1
00026096: mem := mem with [R31 + 0x20, el]:u32 <- 0
000357ff: goto %00025969

00025969:
00025973: R0 := pad:64[mem[R19, el]:u32]
00025979: when 31:0[R0] <> 0 goto %00025977
00035800: goto %00025794

00025977:
00025980: R2 := R31 + 0x88
00025985: R1 := 0x413000
0002598a: R0 := 2
00025990: R1 := R1 + 0xBC0
00025998: R2 := mem[R2 + (60:0[R28].0), el]:u64
0002599f: R23 := pad:64[mem[R2, el]:u32]
000259a5: R2 := pad:64[31:0[R23]]
000259aa: R30 := 0x40683C
000259ac: call @__printf_chk with return %000259ae

000259ae:
000259b0: goto %000257ac

0002654e:
00026553: R23 := mem[R31 + 0x60, el]:u64
0002655a: R1 := mem[R23 + 0x40, el]:u64
00026560: when R1 = 0 goto %0002655e
00035801: goto %0002656a

0002656a:
0002656e: R0 := R22
00026573: R30 := 0x40639C
00026575: call @strcasecmp with return %00026577

00026577:
0002657a: when 31:0[R0] <> 0 goto %00025b16
00035802: goto %0002657e

0002657e:
00026583: R0 := pad:64[mem[R23 + 0x20, el]:u32]
0002658a: R1 := pad:64[mem[R31 + 0x10, el]:u32]
00026590: #1091 := ~31:0[R1]
00026595: #1092 := 31:0[R0] + ~31:0[R1]
0002659b: VF := extend:64[#1092 + 1] <> extend:64[31:0[R0]] +
          extend:64[#1091] + 1
000265a1: CF := pad:64[#1092 + 1] <> pad:64[31:0[R0]] + pad:64[#1091] + 1
000265a5: ZF := #1092 + 1 = 0
000265a9: NF := 31:31[#1092 + 1]
000265ae: when ZF <> 1 goto %00025b16
00035803: goto %0002655e

00025b16:
00025b1a: when 31:0[R25] <> 0 goto %00025b18
00035804: goto %00025b43

00025b18:
00025b22: R2 := mem[R23 + 0x30, el]:u64
00025b27: R1 := 0x413000
00025b2c: R0 := 2
00025b32: R1 := R1 + 0xA48
00025b37: R30 := 0x406C6C
00025b39: call @__printf_chk with return %00025b3b

00025b3b:
00025b40: R23 := mem[R31 + 0x60, el]:u64
00025b45: goto %00025b43

00025b43:
00025b4a: R0 := R23
00025b4f: R30 := 0x406B50
00025b51: call @dup_rr_data with return %00025b53

00025b53:
00025b59: mem := mem with [R31 + 8, el]:u64 <- R0
00025b5f: R0 := R21
00025b64: R30 := 0x406B5C
00025b66: call @free_rr_data with return %00025b68

00025b68:
00025b6d: R0 := mem[R31 + 0x48, el]:u64
00025b72: R30 := 0x406B64
00025b74: call @free_rr_data with return %00025b76

00025b76:
00025b7b: R27 := pad:64[mem[R31 + 0x50, el]:u32]
00025b82: R0 := mem[R31 + 0x18, el]:u64
00025b87: when R0 = 0 goto %00025823
00035805: goto %00025b8b

00025b8b:
00025b8e: R30 := 0x406B74
00025b90: call @free with return %00025b92

00025b92:
00025b94: goto %00025823

0002655e:
00026566: when 31:0[R25] <> 0 goto %0002611b
00035806: goto %00026131

0002611b:
00026120: R0 := mem[R23 + 8, el]:u64
00026125: R30 := 0x4067EC
00026127: call @hlist_dump with return %00026129

00026129:
0002612e: R23 := mem[R31 + 0x60, el]:u64
00026133: goto %00026131

00026131:
00026139: R0 := pad:64[mem[R23, el]:u32]
0002613f: when 31:0[R0] <> 0 goto %0002613d
00035807: goto %00026375

0002613d:
00026146: #1083 := R23 + 0x28
0002614b: R4 := mem[#1083, el]:u64
00026150: R5 := mem[#1083 + 8, el]:u64
00026155: R0 := 7
0002615b: R3 := R24
00026160: R2 := 0x413000
00026165: R1 := 2
0002616b: R2 := R2 + 0xA68
00026170: R30 := 0x406624
00026172: call @__syslog_chk with return %00026174

00026174:
00026179: R26 := mem[R31 + 0x60, el]:u64
00026180: R0 := mem[R26 + 0x38, el]:u64
00026186: when R0 = 0 goto %00026184
00035808: goto %00026336

00026336:
0002633b: R1 := mem[R26 + 0x30, el]:u64
00026341: when R1 = 0 goto %0002633f
00035809: goto %0002635a

0002635a:
0002635e: R0 := R1
00026363: R30 := 0x406640
00026365: call @free with return %00026367

00026367:
0002636c: R26 := mem[R31 + 0x60, el]:u64
00026373: R0 := mem[R26 + 0x38, el]:u64
0003580a: goto %0002633f

0002633f:
00026347: R30 := 0x40664C
00026349: call @strdup with return %0002634b

0002634b:
00026351: mem := mem with [R26 + 0x30, el]:u64 <- R0
00026358: R26 := mem[R31 + 0x60, el]:u64
0003580b: goto %00026184

00026184:
0002618e: R0 := pad:64[mem[R26 + 0x24, el]:u32]
00026194: #1084 := 31:0[R0] - 0xA
00026199: VF := extend:64[#1084] <> extend:64[31:0[R0]] - 0xA
0002619e: CF := pad:64[#1084] <> pad:64[31:0[R0]] + 0xFFFFFFF6
000261a2: ZF := #1084 = 0
000261a6: NF := 31:31[#1084]
000261ae: when NF = VF & ~ZF goto %000261ac
0003580c: goto %000261ea

000261ac:
000261b6: R0 := mem[R26 + 8, el]:u64
000261bb: R2 := 0x413000
000261c0: R25 := 0x413000
000261c6: R2 := R2 + 0x7B0
000261cc: R1 := R25 + 0x7C0
000261d1: R3 := 1
000261d6: R30 := 0x406A50
000261d8: call @hlist_mod with return %000261da

000261da:
000261e0: mem := mem with [R26 + 8, el]:u64 <- R0
000261e7: R26 := mem[R31 + 0x60, el]:u64
000261ec: goto %000261ea

000261ea:
000261f0: R23 := 0x413000
000261f6: R23 := R23 + 0xA78
000261fb: goto %000261f9

000261f9:
00026200: R1 := R23
00026207: R0 := mem[R26 + 8, el]:u64
0002620c: R30 := 0x406690
0002620e: call @hlist_get with return %00026210

00026210:
00026214: when R0 <> 0 goto %00026212
0003580d: goto %00026241

00026241:
00026246: R0 := mem[R31 + 0x60, el]:u64
0002624b: R1 := 0x413000
00026252: R2 := mem[R31 + 0x18, el]:u64
00026258: R1 := R1 + 0x7D0
0002625f: R0 := mem[R0 + 8, el]:u64
00026264: R30 := 0x4066AC
00026266: call @http_parse_basic with return %00026268

00026268:
0002626b: VF := 0
0002626e: CF := 1
00026272: ZF := 31:0[R0] = 0
00026276: NF := 31:31[R0]
0002627e: when ~(NF = VF & ~ZF) goto %0002627c
0003580e: goto %000262ea

000262ea:
000262ef: R0 := pad:64[mem[R19, el]:u32]
000262f5: when 31:0[R0] <> 0 goto %000262f3
0003580f: goto %00026328

000262f3:
000262fd: R0 := mem[R31 + 0x18, el]:u64
00026302: R1 := 0x413000
00026308: R1 := R1 + 0xA90
0002630e: R4 := R0 + 0x64
00026314: R3 := R0
0002631a: R2 := R0 + 0x32
0002631f: R0 := 2
00026324: R30 := 0x406890
00026326: call @__printf_chk with return %0002627c

0002627c:
00026286: R0 := mem[R31 + 0x60, el]:u64
0002628d: R23 := pad:64[mem[R19, el]:u32]
00026293: when R0 <> 0 goto %00026291
00035810: goto %000262df

000262df:
000262e2: when 31:0[R23] = 0 goto %000262b2
00035811: goto %000262e6

000262e6:
000262e8: goto %00025fe9

00026328:
0002632d: R0 := mem[R31 + 0x60, el]:u64
00026332: when R0 = 0 goto %000262b2
00035812: goto %00026291

00026291:
0002629b: R1 := pad:64[mem[R0, el]:u32]
000262a2: R23 := pad:64[mem[R19, el]:u32]
000262a8: when 31:0[R1] = 0 goto %000262a6
00035813: goto %000262b8

000262b8:
000262bd: R1 := mem[R0 + 0x28, el]:u64
000262c2: R0 := 0x413000
000262c8: R0 := R0 + 0x9F8
000262cd: R30 := 0x4066E0
000262cf: call @strcasecmp with return %000262d1

000262d1:
000262d4: when 31:0[R0] <> 0 goto %000262a6
00035814: goto %000262d8

000262d8:
000262db: when 31:0[R23] <> 0 goto %00025d9c
00035815: goto %00025db4

00025d9c:
00025d9f: R1 := 0x413000
00025da4: R0 := 2
00025daa: R1 := R1 + 0xAC0
00025daf: R30 := 0x406CD4
00025db1: call @__printf_chk with return %00025db3

00025db3:
00025db6: goto %00025db4

00025db4:
00025dbc: R19 := mem[R31 + 0x68, el]:u64
00025dc1: R1 := 0xC8
00025dc6: R0 := 0x413000
00025dcc: R0 := R0 + 0xAD0
00025dd3: mem := mem with [R19, el]:u32 <- 0
00025ddb: mem := mem with [R19 + 0x10, el]:u32 <- 31:0[R1]
00025de2: mem := mem with [R19 + 0x1C, el]:u32 <- 0
00025de7: R30 := 0x406708
00025de9: call @strdup with return %00025deb

00025deb:
00025df1: mem := mem with [R19 + 0x50, el]:u64 <- R0
00025df8: R1 := mem[R31 + 0x60, el]:u64
00025dff: R19 := mem[R31 + 0x68, el]:u64
00025e06: R0 := mem[R1 + 0x48, el]:u64
00025e0b: R30 := 0x40671C
00025e0d: call @strdup with return %00025e0f

00025e0f:
00025e15: mem := mem with [R19 + 0x48, el]:u64 <- R0
00025e1c: R1 := mem[R31 + 0x68, el]:u64
00025e23: R0 := pad:64[mem[R31 + 0x14, el]:u32]
00025e28: R30 := 0x40672C
00025e2a: call @headers_send with return %00025e2c

00025e2c:
00025e31: R27 := pad:64[mem[R31 + 0x50, el]:u32]
00025e36: when 31:0[R0] = 0 goto %00025c13
00035816: goto %00025e3a

00025e3a:
00025e3f: R0 := pad:64[mem[R31 + 0x14, el]:u32]
00025e45: R1 := pad:64[31:0[R27]]
00025e4a: R30 := 0x406740
00025e4c: call @tunnel with return %00025e4e

00025e4e:
00025e50: goto %00025c13

00026212:
0002621c: R25 := mem[R31 + 0x60, el]:u64
00026222: R1 := R23
00026229: R0 := mem[R25 + 8, el]:u64
0002622e: R30 := 0x40667C
00026230: call @hlist_del with return %00026232

00026232:
00026238: mem := mem with [R25 + 8, el]:u64 <- R0
0002623f: R26 := mem[R31 + 0x60, el]:u64
00035817: goto %000261f9

00026375:
0002637a: R23 := pad:64[mem[R19, el]:u32]
00035818: goto %000262a6

000262a6:
000262ae: when 31:0[R23] <> 0 goto %00025fe9
00035819: goto %000262b2

00025fe9:
00025fee: R2 := mem[R31 + 0x88, el]:u64
00025ff3: R1 := 0x413000
00025ff9: R23 := pad:64[0:0[R20]]
00025fff: R1 := R1 + 0xBC0
00026004: R0 := 2
0002600b: R2 := pad:64[mem[R2, el]:u32]
00026010: R30 := 0x406470
00026012: call @__printf_chk with return %00025eb4

00025eb4:
00025ebc: R4 := mem[R31 + 0x60, el]:u64
00025ec1: R1 := 0x413000
00025ec6: R0 := 2
00025ecc: R1 := R1 + 0xBE0
00025ed2: #1082 := R4 + 0x28
00025ed7: R2 := mem[#1082, el]:u64
00025edc: R3 := mem[#1082 + 8, el]:u64
00025ee3: R4 := mem[R4 + 0x48, el]:u64
00025ee8: R30 := 0x40648C
00025eea: call @__printf_chk with return %00025eec

00025eec:
00025ef1: R0 := mem[R31 + 0x60, el]:u64
00025ef8: R0 := mem[R0 + 8, el]:u64
00025efd: R30 := 0x406498
00025eff: call @hlist_dump with return %00025f01

00025f01:
00025f04: goto %00025f02

000262b2:
000262b6: R23 := pad:64[0:0[R20]]
0003581a: goto %00025f02

00025f02:
00025f08: when 31:0[R23] = 0 goto %00025789
0003581b: goto %00025f0c

00025f0c:
00025f11: R0 := mem[R31 + 0x60, el]:u64
00025f16: R30 := 0x4063D4
00025f18: call @dup_rr_data with return %00025f1a

00025f1a:
00025f20: mem := mem with [R31 + 0x58, el]:u64 <- R0
00025f27: R0 := mem[R0 + 0x28, el]:u64
00025f2c: R30 := 0x4063E0
00025f2e: call @free with return %00025f30

00025f30:
00025f35: R23 := mem[R31 + 0x58, el]:u64
00025f3a: R0 := 0x413000
00025f40: R0 := R0 + 0xBF0
00025f45: R30 := 0x4063F0
00025f47: call @strdup with return %00025f49

00025f49:
00025f4e: R25 := mem[R31 + 0x58, el]:u64
00025f56: mem := mem with [R23 + 0x28, el]:u64 <- R0
00025f5b: R3 := 1
00025f60: R2 := 0x413000
00025f65: R1 := 0x413000
00025f6b: R2 := R2 + 0x7E0
00025f72: R0 := mem[R25 + 8, el]:u64
00025f78: R1 := R1 + 0x7E8
00025f7d: R30 := 0x406414
00025f7f: call @hlist_mod with return %00025f81

00025f81:
00025f87: mem := mem with [R25 + 8, el]:u64 <- R0
00025f8e: R23 := mem[R31 + 0x58, el]:u64
00025f93: R1 := 0x413000
00025f99: R1 := R1 + 0x7F8
00025fa0: R0 := mem[R23 + 8, el]:u64
00025fa5: R30 := 0x40642C
00025fa7: call @hlist_del with return %00025fa9

00025fa9:
00025fae: R27 := pad:64[mem[R31 + 0x50, el]:u32]
00025fb5: R1 := mem[R31 + 0x58, el]:u64
00025fbd: mem := mem with [R23 + 8, el]:u64 <- R0
00025fc3: R0 := pad:64[31:0[R27]]
00025fc8: R30 := 0x406440
00025fca: call @headers_send with return %00025fcc

00025fcc:
00025fcf: when 31:0[R0] = 0 goto %00025c06
0003581c: goto %00025fd3

00025c06:
00025c0a: R0 := R31 + 0x58
00025c0f: R30 := 0x406BC8
00025c11: call @free_rr_data with return %00025c13

00025c13:
00025c17: R0 := R21
00025c1c: R30 := 0x406BD0
00025c1e: call @free_rr_data with return %00025c20

00025c20:
00025c25: R0 := mem[R31 + 0x48, el]:u64
00025c2a: R30 := 0x406BD8
00025c2c: call @free_rr_data with return %00025c2e

00025c2e:
00025c31: R0 := 0xFFFFFFFFFFFFFFFF
00025c39: mem := mem with [R31 + 8, el]:u64 <- R0
00025c3d: goto %000257f7

000257f7:
000257fc: R0 := mem[R31 + 0x18, el]:u64
00025802: when R0 = 0 goto %00025800
0003581d: goto %00025830

00025830:
00025835: R0 := mem[R31 + 0x18, el]:u64
0002583a: R30 := 0x406974
0002583c: call @free with return %00025800

00025800:
00025809: when R22 = 0 goto %00025807
0003581e: goto %00025823

00025823:
00025827: R0 := R22
0002582c: R30 := 0x406980
0002582e: call @free with return %00025807

00025807:
00025810: #1075 := R31 + 0x110
00025815: R25 := mem[#1075, el]:u64
0002581a: R26 := mem[#1075 + 8, el]:u64
0002581f: when ~31:31[R27] goto %00025716
0003581f: goto %00025724

00025716:
0002571a: R0 := pad:64[31:0[R27]]
0002571f: R30 := 0x406A30
00025721: call @close with return %00025723

00025723:
00025726: goto %00025724

00025724:
0002572a: R0 := 0x42F000
00025731: R0 := mem[R0 + 0xFB8, el]:u64
00025738: R2 := mem[R31 + 0xC8, el]:u64
0002573f: R1 := mem[R0, el]:u64
00025745: #1072 := ~R1
0002574a: #1073 := R2 + ~R1
00025750: VF := extend:128[#1073 + 1] <> extend:128[R2] + extend:128[#1072] +
          1
00025756: CF := pad:128[#1073 + 1] <> pad:128[R2] + pad:128[#1072] + 1
0002575a: ZF := #1073 + 1 = 0
0002575e: NF := 63:63[#1073 + 1]
00025762: R2 := #1073 + 1
00025767: R1 := 0
0002576d: when ZF <> 1 goto %0002576b
00035820: goto %0002698c

0002576b:
00025774: #1074 := R31 + 0x110
0002577a: mem := mem with [#1074, el]:u64 <- R25
00025780: mem := mem with [#1074 + 8, el]:u64 <- R26
00025785: R30 := 0x406CE0
00025787: call @__stack_chk_fail with return %00025789

00025789:
0002578c: R26 := 0
00025791: R28 := 0
00025796: goto %00025794

00025794:
0002579b: R0 := R31 + 0x88
000257a3: R0 := mem[R0 + (60:0[R28].0), el]:u64
000257aa: R23 := pad:64[mem[R0, el]:u32]
00035821: goto %000257ac

000257ac:
000257b2: R1 := mem[R21 + (60:0[R28].0), el]:u64
000257b8: R0 := pad:64[31:0[R23]]
000257bd: R30 := 0x406574
000257bf: call @headers_send with return %000257c1

000257c1:
000257c5: when 31:0[R0] = 0 goto %000257c3
00035822: goto %0002583e

0002583e:
00025842: R1 := R31 + 0x78
00025848: R0 := pad:64[31:0[R23]]
0002584e: #1076 := R31 + 0x60
00025853: R2 := mem[#1076, el]:u64
00025858: R3 := mem[#1076 + 8, el]:u64
00025860: R1 := mem[R1 + (60:0[R28].0), el]:u64
00025867: R1 := pad:64[mem[R1, el]:u32]
0002586c: R30 := 0x406590
0002586e: call @http_body_send with return %00025870

00025870:
00025873: when 31:0[R0] = 0 goto %000257c3
00035823: goto %00025877

000257c3:
000257cc: R0 := R21
000257d1: R30 := 0x406950
000257d3: call @free_rr_data with return %000257d5

000257d5:
000257da: R0 := mem[R31 + 0x48, el]:u64
000257df: R30 := 0x406958
000257e1: call @free_rr_data with return %000257e3

000257e3:
000257e8: R27 := pad:64[mem[R31 + 0x50, el]:u32]
00035824: goto %000257ea

000257ea:
000257ed: R0 := 0xFFFFFFFFFFFFFFFF
000257f5: mem := mem with [R31 + 8, el]:u64 <- R0
00035825: goto %000257f7

00025877:
0002587b: R26 := pad:64[31:0[R26] + 1]
00025881: #1077 := 31:0[R26] - 2
00025886: VF := extend:64[#1077] <> extend:64[31:0[R26]] - 2
0002588b: CF := pad:64[#1077] <> pad:64[31:0[R26]] + 0xFFFFFFFE
0002588f: ZF := #1077 = 0
00025893: NF := 31:31[#1077]
00025899: when ZF <> 1 goto %00025897
00035826: goto %000265ce

000265ce:
000265d2: R0 := R21
000265d7: R30 := 0x4065A8
000265d9: call @free_rr_data with return %000265db

000265db:
000265e0: R0 := mem[R31 + 0x48, el]:u64
000265e5: R30 := 0x4065B0
000265e7: call @free_rr_data with return %000265e9

000265e9:
000265ee: R27 := pad:64[mem[R31 + 0x50, el]:u32]
000265f5: R0 := pad:64[mem[R31 + 0x20, el]:u32]
000265fa: when 31:0[R0] = 0 goto %000257f7
00035827: goto %000265fe

000265fe:
00026602: R0 := pad:64[31:0[R27]]
00026607: R30 := 0x4065C4
00026609: call @so_closed with return %0002660b

0002660b:
0002660e: when 31:0[R0] <> 0 goto %000257f7
00035828: goto %00026612

00026612:
00026617: R0 := pad:64[mem[R31 + 0x14, el]:u32]
0002661c: R30 := 0x4065D0
0002661e: call @so_closed with return %00026620

00026620:
00026623: R1 := 0x42F000
0002662a: R1 := mem[R1 + 0xFD0, el]:u64
00026631: R1 := pad:64[mem[R1, el]:u32]
00026638: R0 := pad:64[31:0[R0] | 31:0[R1]]
0002663d: when 31:0[R0] <> 0 goto %000257f7
00035829: goto %00026641

00026641:
00026644: R30 := 0x4065E8
00026646: call @new_rr_data with return %00026648

00026648:
0002664b: goto %00026649

0002698c:
00026991: R0 := mem[R31 + 8, el]:u64
00026997: #1103 := R31 + 0xD0
0002699c: R29 := mem[#1103, el]:u64
000269a1: R30 := mem[#1103 + 8, el]:u64
000269a7: #1104 := R31 + 0xE0
000269ac: R19 := mem[#1104, el]:u64
000269b1: R20 := mem[#1104 + 8, el]:u64
000269b7: #1105 := R31 + 0xF0
000269bc: R21 := mem[#1105, el]:u64
000269c1: R22 := mem[#1105 + 8, el]:u64
000269c7: #1106 := R31 + 0x100
000269cc: R23 := mem[#1106, el]:u64
000269d1: R24 := mem[#1106 + 8, el]:u64
000269d7: #1107 := R31 + 0x120
000269dc: R27 := mem[#1107, el]:u64
000269e1: R28 := mem[#1107 + 8, el]:u64
000269e7: R31 := R31 + 0x130
000269ec: R1 := 0
000269f1: R2 := 0
000269f6: R3 := 0
000269fb: R4 := 0
00026a00: R5 := 0
00026a05: R6 := 0
00026a0a: R16 := 0
00026a0f: R17 := 0
00026a14: call R30 with noreturn

00025fd3:
00025fd7: R0 := R31 + 0x58
00025fdc: R26 := 1
00025fe1: R30 := 0x406450
00025fe3: call @free_rr_data with return %00025fe5

00025fe5:
00025fe7: goto %00025897

0003582a: sub direct_tunnel(direct_tunnel_result)
00035e5e: direct_tunnel_result :: out u32 = low:32[R0]

000266a3:
000266a7: R31 := R31 - 0x80
000266ad: R4 := R0
000266b2: R5 := 0x42F000
000266b9: R5 := mem[R5 + 0xFB8, el]:u64
000266bf: R6 := R0 + 0x18
000266c5: #1094 := R31 + 0x40
000266cb: mem := mem with [#1094, el]:u64 <- R29
000266d1: mem := mem with [#1094 + 8, el]:u64 <- R30
000266d7: R29 := R31 + 0x40
000266dd: R1 := R0 + 0x14
000266e2: V0 := 0
000266e8: #1095 := R31 + 0x50
000266ee: mem := mem with [#1095, el]:u64 <- R19
000266f4: mem := mem with [#1095 + 8, el]:u64 <- R20
000266fa: R19 := R31 + 8
00026700: R2 := R19
00026706: #1096 := R31 + 0x60
0002670c: mem := mem with [#1096, el]:u64 <- R21
00026712: mem := mem with [#1096 + 8, el]:u64 <- R22
00026717: R3 := 0x2E
0002671e: R22 := pad:64[mem[R0, el]:u32]
00026726: mem := mem with [R31 + 0x70, el]:u64 <- R23
0002672d: R23 := mem[R4 + 8, el]:u64
00026734: R7 := mem[R5, el]:u64
0002673c: mem := mem with [R31 + 0x38, el]:u64 <- R7
00026741: R7 := 0
00026748: R0 := pad:64[mem[R0 + 0x10, el]:u16]
00026750: mem := mem with [R19, el]:u128 <- V0
00026756: mem := mem with [R19 + 0x10, el]:u128 <- V0
0002675c: #1097 := 31:0[R0] - 2
00026761: VF := extend:64[#1097] <> extend:64[31:0[R0]] - 2
00026766: CF := pad:64[#1097] <> pad:64[31:0[R0]] + 0xFFFFFFFE
0002676a: ZF := #1097 = 0
0002676e: NF := 31:31[#1097]
0002677c: when ZF <> 1 goto %00026774
0002677d: goto %00026778

00026778:
00026779: R1 := R1
0002677f: goto %0002677b

00026774:
00026775: R1 := R6
0002677e: goto %0002677b

0002677b:
00026787: mem := mem with [R19 + 0x1E, el]:u128 <- V0
0002678c: R30 := 0x406D58
0002678e: call @inet_ntop with return %00026790

00026790:
00026794: R0 := R23
00026799: R30 := 0x406D60
0002679b: call @strdup with return %0002679d

0002679d:
000267a0: R1 := 0x3A
000267a6: R21 := R0
000267ab: R30 := 0x406D6C
000267ad: call @strchr with return %000267af

000267af:
000267b2: R1 := 0
000267b8: when R0 = 0 goto %000267b6
0003582b: goto %0002696a

0002696a:
0002696f: mem := mem with [R0] <- 0
00026973: R0 := R0 + 1
00026978: R1 := 0
0002697d: R2 := 0xA
00026982: R30 := 0x406D84
00026984: call @strtol with return %00026986

00026986:
0002698a: R1 := pad:64[31:0[R0]]
0003582c: goto %000267b6

000267b6:
000267bf: R0 := R21
000267c4: R30 := 0x406D90
000267c6: call @host_connect with return %000267c8

000267c8:
000267cc: R20 := pad:64[31:0[R0]]
000267d1: VF := 0
000267d4: CF := 1
000267d8: ZF := 31:0[R0] = 0
000267dc: NF := 31:31[R0]
000267e4: when ~(NF = VF & ~ZF) goto %000267e2
0003582d: goto %00026928

000267e2:
000267eb: R0 := R21
000267f0: R30 := 0x406E50
000267f2: call @free with return %000267f4

000267f4:
000267f8: when 31:0[R20] <> 0 goto %000267f6
0003582e: goto %000268d0

000268d0:
000268d3: goto %000268d1

00026928:
0002692b: R0 := 7
00026931: R3 := R19
00026937: R4 := R23
0002693c: R2 := 0x413000
00026941: R1 := 2
00026947: R2 := R2 + 0xBF8
0002694c: R30 := 0x406DB8
0002694e: call @__syslog_chk with return %00026950

00026950:
00026953: R0 := 0x42F000
0002695a: R0 := mem[R0 + 0xF30, el]:u64
00026961: R0 := pad:64[mem[R0, el]:u32]
00026966: when 31:0[R0] <> 0 goto %000268e1
0003582f: goto %00026905

000268e1:
000268e5: R2 := R23
000268eb: R3 := pad:64[31:0[R22]]
000268f0: R1 := 0x413000
000268f5: R0 := 2
000268fb: R1 := R1 + 0xC08
00026900: R30 := 0x406E70
00026902: call @__printf_chk with return %00026904

00026904:
00026907: goto %00026905

00026905:
0002690c: R1 := pad:64[31:0[R20]]
00026912: R0 := pad:64[31:0[R22]]
00026917: R30 := 0x406DD4
00026919: call @tunnel with return %0002691b

0002691b:
0002691f: R0 := R21
00026924: R30 := 0x406DDC
00026926: call @free with return %000268d1

000268d1:
000268d8: R0 := pad:64[31:0[R20]]
000268dd: R30 := 0x406DE4
000268df: call @close with return %000267f6

000267f6:
000267ff: R0 := pad:64[31:0[R22]]
00026804: R30 := 0x406DEC
00026806: call @close with return %00026808

00026808:
0002680b: R0 := 0x42F000
00026812: R0 := mem[R0 + 0xFB8, el]:u64
00026819: R2 := mem[R31 + 0x38, el]:u64
00026820: R1 := mem[R0, el]:u64
00026826: #1098 := ~R1
0002682b: #1099 := R2 + ~R1
00026831: VF := extend:128[#1099 + 1] <> extend:128[R2] + extend:128[#1098] +
          1
00026837: CF := pad:128[#1099 + 1] <> pad:128[R2] + pad:128[#1098] + 1
0002683b: ZF := #1099 + 1 = 0
0002683f: NF := 63:63[#1099 + 1]
00026843: R2 := #1099 + 1
00026848: R1 := 0
0002684e: when ZF <> 1 goto %0002684c
00035830: goto %0002685c

0002684c:
00026854: R30 := 0x406E78
00026856: call @__stack_chk_fail with return %00026858

00026858:
00035831: call @forward_request with noreturn

0002685c:
00026860: #1100 := R31 + 0x40
00026865: R29 := mem[#1100, el]:u64
0002686a: R30 := mem[#1100 + 8, el]:u64
00026870: #1101 := R31 + 0x50
00026875: R19 := mem[#1101, el]:u64
0002687a: R20 := mem[#1101 + 8, el]:u64
00026880: #1102 := R31 + 0x60
00026885: R21 := mem[#1102, el]:u64
0002688a: R22 := mem[#1102 + 8, el]:u64
00026891: R23 := mem[R31 + 0x70, el]:u64
00026897: R31 := R31 + 0x80
0002689c: R0 := 0
000268a1: R1 := 0
000268a6: R2 := 0
000268ab: R3 := 0
000268b0: R4 := 0
000268b5: R5 := 0
000268ba: R6 := 0
000268bf: R7 := 0
000268c4: R16 := 0
000268c9: R17 := 0
000268ce: call R30 with noreturn

00035832: sub dump_auth(dump_auth_result)
00035e5f: dump_auth_result :: out u32 = low:32[R0]

00019116:
0001911a: #419 := R31 - 0x20
00019120: mem := mem with [#419, el]:u64 <- R29
00019126: mem := mem with [#419 + 8, el]:u64 <- R30
0001912a: R31 := #419
0001912f: R1 := 0x413000
00019135: R1 := R1 + 0x698
0001913b: R29 := R31
00019141: #420 := R31 + 0x10
00019147: mem := mem with [#420, el]:u64 <- R19
0001914d: mem := mem with [#420 + 8, el]:u64 <- R20
00019153: R19 := R0
00019158: R0 := 2
0001915d: R30 := 0x4055B0
0001915f: call @__printf_chk with return %00019161

00019161:
00019165: when R19 = 0 goto %00019163
00035833: goto %0002b72c

00019163:
0001916c: #421 := R31 + 0x10
00019171: R19 := mem[#421, el]:u64
00019176: R20 := mem[#421 + 8, el]:u64
0001917b: R1 := 0x413000
00019182: R29 := mem[R31, el]:u64
00019187: R30 := mem[R31 + 8, el]:u64
0001918b: R31 := R31 + 0x20
00019191: R1 := R1 + 0x6B8
00019196: R0 := 2
0001919a: call @__printf_chk with noreturn

0002b72c:
0002b730: R2 := R19
0002b735: R1 := 0x413000
0002b73a: R0 := 2
0002b740: R1 := R1 + 0x6D8
0002b745: R30 := 0x4055C8
0002b747: call @__printf_chk with return %0002b749

0002b749:
0002b74d: R20 := R19 + 0xFA
0002b753: R2 := R19 + 0x32
0002b758: R1 := 0x413000
0002b75d: R0 := 2
0002b763: R1 := R1 + 0x6E8
0002b768: R30 := 0x4055E0
0002b76a: call @__printf_chk with return %0002b76c

0002b76c:
0002b770: R2 := R19 + 0x64
0002b775: R1 := 0x413000
0002b77a: R0 := 2
0002b780: R1 := R1 + 0x6F8
0002b785: R30 := 0x4055F4
0002b787: call @__printf_chk with return %0002b789

0002b789:
0002b78e: R2 := pad:64[mem[R19 + 0x12C, el]:u32]
0002b793: R1 := 0x413000
0002b798: R0 := 2
0002b79e: R1 := R1 + 0x708
0002b7a3: R30 := 0x405608
0002b7a5: call @__printf_chk with return %0002b7a7

0002b7a7:
0002b7ac: R2 := pad:64[mem[R19 + 0x130, el]:u32]
0002b7b1: R1 := 0x413000
0002b7b6: R0 := 2
0002b7bc: R1 := R1 + 0x718
0002b7c1: R30 := 0x40561C
0002b7c3: call @__printf_chk with return %0002b7c5

0002b7c5:
0002b7ca: R2 := pad:64[mem[R19 + 0x134, el]:u32]
0002b7cf: R1 := 0x413000
0002b7d4: R0 := 2
0002b7da: R1 := R1 + 0x728
0002b7df: R30 := 0x405630
0002b7e1: call @__printf_chk with return %0002b7e3

0002b7e3:
0002b7e8: R2 := pad:64[mem[R19 + 0x138, el]:u32]
0002b7ed: R1 := 0x413000
0002b7f2: R0 := 2
0002b7f8: R1 := R1 + 0x738
0002b7fd: R30 := 0x405644
0002b7ff: call @__printf_chk with return %0002b801

0002b801:
0002b805: R0 := R20
0002b80a: R1 := 0x32
0002b80f: R30 := 0x405650
0002b811: call @is_memory_all_zero with return %0002b813

0002b813:
0002b817: when 31:0[R0] = 0 goto %0002b815
00035834: goto %0002b9a7

0002b815:
0002b81e: R0 := R20
0002b823: R2 := 8
0002b828: R1 := 0x10
0002b82d: R30 := 0x4056AC
0002b82f: call @printmem with return %0002b831

0002b831:
0002b834: R1 := 0x413000
0002b83a: R2 := R0
0002b840: R1 := R1 + 0x748
0002b846: R20 := R0
0002b84b: R0 := 2
0002b850: R30 := 0x4056C4
0002b852: call @__printf_chk with return %0002b854

0002b854:
0002b858: R0 := R20
0002b85e: R20 := R19 + 0xC8
0002b863: R30 := 0x4056D0
0002b865: call @free with return %0002b867

0002b867:
0002b86b: R0 := R20
0002b870: R1 := 0x32
0002b875: R30 := 0x4056DC
0002b877: call @is_memory_all_zero with return %0002b879

0002b879:
0002b87d: when 31:0[R0] <> 0 goto %0002b87b
00035835: goto %0002b941

0002b9a7:
0002b9ab: R20 := R19 + 0xC8
0002b9b0: R1 := 0x32
0002b9b6: R0 := R20
0002b9bb: R30 := 0x405664
0002b9bd: call @is_memory_all_zero with return %0002b9bf

0002b9bf:
0002b9c2: when 31:0[R0] = 0 goto %0002b941
00035836: goto %0002b87b

0002b941:
0002b945: R0 := R20
0002b94a: R2 := 8
0002b94f: R1 := 0x10
0002b954: R30 := 0x4056F0
0002b956: call @printmem with return %0002b958

0002b958:
0002b95b: R1 := 0x413000
0002b961: R2 := R0
0002b967: R1 := R1 + 0x758
0002b96d: R20 := R0
0002b972: R0 := 2
0002b977: R30 := 0x405708
0002b979: call @__printf_chk with return %0002b97b

0002b97b:
0002b97f: R0 := R20
0002b985: R19 := R19 + 0x96
0002b98a: R30 := 0x405714
0002b98c: call @free with return %0002b98e

0002b98e:
0002b992: R0 := R19
0002b997: R1 := 0x32
0002b99c: R30 := 0x405720
0002b99e: call @is_memory_all_zero with return %0002b9a0

0002b9a0:
0002b9a3: when 31:0[R0] <> 0 goto %0002b903
00035837: goto %0002b89a

0002b87b:
0002b884: R19 := R19 + 0x96
0002b889: R1 := 0x32
0002b88f: R0 := R19
0002b894: R30 := 0x405678
0002b896: call @is_memory_all_zero with return %0002b898

0002b898:
0002b89c: when 31:0[R0] = 0 goto %0002b89a
00035838: goto %0002b903

0002b89a:
0002b8a3: R0 := R19
0002b8a8: R2 := 8
0002b8ad: R1 := 0x10
0002b8b2: R30 := 0x405734
0002b8b4: call @printmem with return %0002b8b6

0002b8b6:
0002b8b9: R1 := 0x413000
0002b8bf: R19 := R0
0002b8c5: R2 := R0
0002b8cb: R1 := R1 + 0x768
0002b8d0: R0 := 2
0002b8d5: R30 := 0x40574C
0002b8d7: call @__printf_chk with return %0002b8d9

0002b8d9:
0002b8dd: R0 := R19
0002b8e3: #1324 := R31 + 0x10
0002b8e8: R19 := mem[#1324, el]:u64
0002b8ed: R20 := mem[#1324 + 8, el]:u64
0002b8f4: R29 := mem[R31, el]:u64
0002b8f9: R30 := mem[R31 + 8, el]:u64
0002b8fd: R31 := R31 + 0x20
0002b901: call @free with noreturn

0002b903:
0002b907: #1325 := R31 + 0x10
0002b90c: R19 := mem[#1325, el]:u64
0002b911: R20 := mem[#1325 + 8, el]:u64
0002b918: R29 := mem[R31, el]:u64
0002b91d: R30 := mem[R31 + 8, el]:u64
0002b921: R31 := R31 + 0x20
0002b926: R0 := 0
0002b92b: R1 := 0
0002b930: R2 := 0
0002b935: R16 := 0
0002b93a: R17 := 0
0002b93f: call R30 with noreturn

00035839: sub dup2(dup2_fd, dup2_fd2, dup2_result)
00035e60: dup2_fd :: in u32 = low:32[R0]
00035e61: dup2_fd2 :: in u32 = low:32[R1]
00035e62: dup2_result :: out u32 = low:32[R0]

0002cd95:
000310cd: R16 := 0x42F000
000310d4: R17 := mem[R16 + 0xE78, el]:u64
000310da: R16 := R16 + 0xE78
000310df: call R17 with noreturn

0003583a: sub dup_auth(dup_auth_result)
00035e63: dup_auth_result :: out u32 = low:32[R0]

00019093:
00019097: #416 := R31 - 0x20
0001909d: mem := mem with [#416, el]:u64 <- R29
000190a3: mem := mem with [#416 + 8, el]:u64 <- R30
000190a7: R31 := #416
000190ad: R29 := R31
000190b3: #417 := R31 + 0x10
000190b9: mem := mem with [#417, el]:u64 <- R19
000190bf: mem := mem with [#417 + 8, el]:u64 <- R20
000190c5: R19 := R0
000190cb: R20 := pad:64[31:0[R1]]
000190d0: R30 := 0x405558
000190d2: call @new_auth with return %000190d4

000190d4:
000190d8: when R0 = 0 goto %000190d6
0003583b: goto %0002b9c6

000190d6:
000190df: #418 := R31 + 0x10
000190e4: R19 := mem[#418, el]:u64
000190e9: R20 := mem[#418 + 8, el]:u64
000190f0: R29 := mem[R31, el]:u64
000190f5: R30 := mem[R31 + 8, el]:u64
000190f9: R31 := R31 + 0x20
000190fe: R1 := 0
00019103: R2 := 0
00019108: R16 := 0
0001910d: R17 := 0
00019112: call R30 with noreturn

0002b9c6:
0002b9ca: R2 := pad:64[31:0[R20]]
0002b9d0: R1 := R19
0002b9d6: #1326 := R31 + 0x10
0002b9db: R19 := mem[#1326, el]:u64
0002b9e0: R20 := mem[#1326 + 8, el]:u64
0002b9e7: R29 := mem[R31, el]:u64
0002b9ec: R30 := mem[R31 + 8, el]:u64
0002b9f0: R31 := R31 + 0x20
0002b9f4: call @copy_auth with noreturn

0003583c: sub dup_rr_data(dup_rr_data_result)
00035e64: dup_rr_data_result :: out u32 = low:32[R0]

00010ecc:
00010ed0: #13 := R31 - 0x20
00010ed6: mem := mem with [#13, el]:u64 <- R29
00010edc: mem := mem with [#13 + 8, el]:u64 <- R30
00010ee0: R31 := #13
00010ee6: R29 := R31
00010eee: mem := mem with [R31 + 0x10, el]:u64 <- R19
00010ef4: when R0 = 0 goto %00010ef2
0003583d: goto %0001836a

00010ef2:
00010efa: R0 := 0x42F000
00010f01: R0 := mem[R0 + 0xF18, el]:u64
00010f06: R1 := 2
00010f0b: R2 := 0x417000
00010f11: R2 := R2 + 0x78
00010f18: R0 := mem[R0, el]:u64
00010f1d: R30 := 0x40FDB8
00010f1f: call @__fprintf_chk with return %00010f21

00010f21:
00010f24: R3 := 0x417000
00010f2a: R3 := R3 + 0x3F0
00010f2f: R1 := 0x416000
00010f34: R0 := 0x413000
00010f3a: R3 := R3 + 0x40
00010f40: R1 := R1 + 0xF58
00010f46: R0 := R0 + 0x7E0
00010f4b: R2 := 0x258
00010f50: R30 := 0x40FDDC
00010f52: call @__assert_fail with return %00010f54

00010f54:
0003583e: call @lowercase with noreturn

0001836a:
0001836e: R19 := R0
00018373: R30 := 0x40FD8C
00018375: call @new_rr_data with return %00018377

00018377:
0001837b: R1 := R19
00018382: R19 := mem[R31 + 0x10, el]:u64
00018389: R29 := mem[R31, el]:u64
0001838e: R30 := mem[R31 + 8, el]:u64
00018392: R31 := R31 + 0x20
00018396: call @copy_rr_data with noreturn

0003583f: sub exit(exit_code)
00035e65: exit_code :: in u32 = low:32[R0]

0001a44f:
00030995: R16 := 0x42F000
0003099c: R17 := mem[R16 + 0xBD8, el]:u64
000309a2: R16 := R16 + 0xBD8
000309a7: call R17 with noreturn

00035840: sub fclose(fclose_fp, fclose_result)
00035e66: fclose_fp :: in out u64 = R0
00035e67: fclose_result :: out u32 = low:32[R0]

00017677:
00030b0b: R16 := 0x42F000
00030b12: R17 := mem[R16 + 0xC60, el]:u64
00030b18: R16 := R16 + 0xC60
00030b1d: call R17 with noreturn

00035841: sub fcntl(fcntl_result)
00035e68: fcntl_result :: out u32 = low:32[R0]

0001b4ab:
00030fdb: R16 := 0x42F000
00030fe2: R17 := mem[R16 + 0xE20, el]:u64
00030fe8: R16 := R16 + 0xE20
00030fed: call R17 with noreturn

00035842: sub feof(feof_stream, feof_result)
00035e69: feof_stream :: in out u64 = R0
00035e6a: feof_result :: out u32 = low:32[R0]

00014f74:
00030df7: R16 := 0x42F000
00030dfe: R17 := mem[R16 + 0xD70, el]:u64
00030e04: R16 := R16 + 0xD70
00030e09: call R17 with noreturn

00035843: sub ferror(ferror_stream, ferror_result)
00035e6b: ferror_stream :: in out u64 = R0
00035e6c: ferror_result :: out u32 = low:32[R0]

000140e1:
000311d5: R16 := 0x42F000
000311dc: R17 := mem[R16 + 0xED8, el]:u64
000311e2: R16 := R16 + 0xED8
000311e7: call R17 with noreturn

00035844: sub fgets(fgets_s, fgets_size, fgets_stream, fgets_result)
00035e6d: fgets_s :: in out u64 = R0
00035e6e: fgets_size :: in u32 = low:32[R1]
00035e6f: fgets_stream :: in out u64 = R2
00035e70: fgets_result :: out u64 = R0

000193b4:
000311a9: R16 := 0x42F000
000311b0: R17 := mem[R16 + 0xEC8, el]:u64
000311b6: R16 := R16 + 0xEC8
000311bb: call R17 with noreturn

00035845: sub fnmatch(fnmatch_result)
00035e71: fnmatch_result :: out u32 = low:32[R0]

0001f8e3:
00030fc5: R16 := 0x42F000
00030fcc: R17 := mem[R16 + 0xE18, el]:u64
00030fd2: R16 := R16 + 0xE18
00030fd7: call R17 with noreturn

00035846: sub fopen(fopen_path, fopen_mode, fopen_result)
00035e72: fopen_path :: in u64 = R0
00035e73: fopen_mode :: in u64 = R1
00035e74: fopen_result :: out u64 = R0

00011f10:
00030b4d: R16 := 0x42F000
00030b54: R17 := mem[R16 + 0xC78, el]:u64
00030b5a: R16 := R16 + 0xC78
00030b5f: call R17 with noreturn

00035847: sub fork(fork_result)
00035e75: fork_result :: out u32 = low:32[R0]

0002cd0f:
00030a87: R16 := 0x42F000
00030a8e: R17 := mem[R16 + 0xC30, el]:u64
00030a94: R16 := R16 + 0xC30
00030a99: call R17 with noreturn

00035848: sub forward_request(forward_request_result)
00035e76: forward_request_result :: out u32 = low:32[R0]

000210bc:
000210c3: R31 := R31 - 0x140
000210c9: R2 := R0
000210ce: R3 := 0x42F000
000210d5: R3 := mem[R3 + 0xFB8, el]:u64
000210db: #901 := R31 + 0xE0
000210e1: mem := mem with [#901, el]:u64 <- R29
000210e7: mem := mem with [#901 + 8, el]:u64 <- R30
000210ed: R29 := R31 + 0xE0
000210f3: #902 := R31 + 0xF0
000210f9: mem := mem with [#902, el]:u64 <- R19
000210ff: mem := mem with [#902 + 8, el]:u64 <- R20
00021105: #903 := R31 + 0x100
0002110b: mem := mem with [#903, el]:u64 <- R21
00021111: mem := mem with [#903 + 8, el]:u64 <- R22
00021117: #904 := R31 + 0x110
0002111d: mem := mem with [#904, el]:u64 <- R23
00021123: mem := mem with [#904 + 8, el]:u64 <- R24
00021129: #905 := R31 + 0x120
0002112f: mem := mem with [#905, el]:u64 <- R25
00021135: mem := mem with [#905 + 8, el]:u64 <- R26
0002113b: #906 := R31 + 0x130
00021141: mem := mem with [#906, el]:u64 <- R27
00021147: mem := mem with [#906 + 8, el]:u64 <- R28
0002114e: R0 := mem[R3, el]:u64
00021156: mem := mem with [R31 + 0xD8, el]:u64 <- R0
0002115b: R0 := 0
00021162: mem := mem with [R31 + 0x68, el]:u64 <- 0
00021168: #907 := R31 + 0x70
0002116d: mem := mem with [#907, el]:u64 <- 0
00021172: mem := mem with [#907 + 8, el]:u64 <- 0
00021178: when R2 = 0 goto %00021176
00035849: goto %000253b4

00021176:
0002117e: R3 := 0x417000
00021183: R1 := 0x413000
00021188: R0 := 0x413000
0002118e: R3 := R3 + 0x268
00021194: R1 := R1 + 0xC40
0002119a: R0 := R0 + 0xC80
0002119f: R2 := 0x60
000211a4: R30 := 0x407B6C
000211a6: call @__assert_fail with return %000211a8

000253b4:
000253b9: R0 := pad:64[mem[R2 + 0x10, el]:u16]
000253bf: R23 := R31 + 0xA8
000253c4: V0 := 0
000253cb: R4 := pad:64[mem[R2, el]:u32]
000253d1: #1063 := 31:0[R0] - 2
000253d6: VF := extend:64[#1063] <> extend:64[31:0[R0]] - 2
000253db: CF := pad:64[#1063] <> pad:64[31:0[R0]] + 0xFFFFFFFE
000253df: ZF := #1063 = 0
000253e3: NF := 31:31[#1063]
000253e9: R19 := R1
000253ef: R1 := R2 + 0x14
000253f5: R2 := R2 + 0x18
00025403: when ZF <> 1 goto %000253fb
00025404: goto %000253ff

000253ff:
00025400: R1 := R1
00025406: goto %00025402

000253fb:
000253fc: R1 := R2
00025405: goto %00025402

00025402:
0002540b: R3 := 0x2E
00025413: mem := mem with [R23, el]:u128 <- V0
00025419: mem := mem with [R23 + 0x10, el]:u128 <- V0
0002541f: R2 := R23
00025424: R24 := 0x413000
0002542c: mem := mem with [R23 + 0x1E, el]:u128 <- V0
00025432: R25 := R31 + 0x60
00025438: R24 := R24 + 0xA68
00025440: mem := mem with [R31 + 0x64, el]:u32 <- 31:0[R4]
00025445: R30 := 0x406F0C
00025447: call @inet_ntop with return %00025449

00025449:
0002544d: R0 := R31 + 0x64
00025455: mem := mem with [R31 + 0x28, el]:u64 <- R0
0002545a: R20 := 0x42F000
00025461: R20 := mem[R20 + 0xF30, el]:u64
00025466: R21 := 0
0002546b: R0 := 0x42F000
00025472: R0 := mem[R0 + 0xF10, el]:u64
0002547a: mem := mem with [R31 + 0x38, el]:u64 <- R0
0002547f: R26 := 0x42F000
00025486: R26 := mem[R26 + 0xF00, el]:u64
0002548d: mem := mem with [R31 + 0x10, el]:u64 <- 0
00025492: R28 := 0x42F000
00025499: R28 := mem[R28 + 0xF58, el]:u64
0002549e: R0 := 0x42F000
000254a5: R0 := mem[R0 + 0xFC0, el]:u64
000254ad: mem := mem with [R31 + 0x40, el]:u64 <- R0
000254b3: R0 := R31 + 0x68
000254bb: mem := mem with [R31 + 0x30, el]:u64 <- R0
0003584a: goto %00023b5f

00023b5f:
00023b67: R0 := pad:64[mem[R20, el]:u32]
00023b6e: R1 := mem[R31 + 0x28, el]:u64
00023b75: mem := mem with [R31 + 0x60, el]:u32 <- 0
00023b7b: #986 := R31 + 0x88
00023b81: mem := mem with [#986, el]:u64 <- R1
00023b87: mem := mem with [#986 + 8, el]:u64 <- R25
00023b8d: #987 := R31 + 0x98
00023b93: mem := mem with [#987, el]:u64 <- R25
00023b99: mem := mem with [#987 + 8, el]:u64 <- R1
00023b9f: when 31:0[R0] = 0 goto %00023b9d
0003584b: goto %00023c76

00023c76:
00023c79: VF := 0
00023c7c: CF := 1
00023c80: ZF := 31:0[R21] = 0
00023c84: NF := 31:31[R21]
00023c89: R0 := 0x413000
00023c8e: R2 := 0x413000
00023c94: R0 := R0 + 0xC30
00023c9a: R2 := R2 + 0x778
00023c9f: R1 := 0x413000
00023cad: when ZF goto %00023ca5
00023cae: goto %00023ca9

00023ca9:
00023caa: R2 := R0
00023cb0: goto %00023cac

00023ca5:
00023ca6: R2 := R2
00023caf: goto %00023cac

00023cac:
00023cb6: R1 := R1 + 0xC98
00023cbb: R0 := 2
00023cc0: R30 := 0x406F94
00023cc2: call @__printf_chk with return %00023cc4

00023cc4:
00023cc7: R0 := 0x42F000
00023cce: R0 := mem[R0 + 0xF10, el]:u64
00023cd3: R30 := 0x406FA0
00023cd5: call @pthread_mutex_lock with return %00023cd7

00023cd7:
00023cda: R0 := 0x42F000
00023ce1: R0 := mem[R0 + 0xFC0, el]:u64
00023ce8: R0 := mem[R0, el]:u64
00023ced: R30 := 0x406FB0
00023cef: call @plist_dump with return %00023cf1

00023cf1:
00023cf4: R0 := 0x42F000
00023cfb: R0 := mem[R0 + 0xF10, el]:u64
00023d00: R30 := 0x406FBC
00023d02: call @pthread_mutex_unlock with return %00023b9d

00023b9d:
00023ba7: R27 := mem[R31 + 0x38, el]:u64
00023bad: R0 := R27
00023bb2: R30 := 0x406FC8
00023bb4: call @pthread_mutex_lock with return %00023bb6

00023bb6:
00023bbb: R1 := mem[R31 + 0x30, el]:u64
00023bc2: R0 := mem[R31 + 0x40, el]:u64
00023bc7: R30 := 0x406FD4
00023bc9: call @plist_pop with return %00023bcb

00023bcb:
00023bcf: R22 := pad:64[31:0[R0]]
00023bd5: R0 := R27
00023bda: R30 := 0x406FE0
00023bdc: call @pthread_mutex_unlock with return %00023bde

00023bde:
00023be1: when 31:0[R22] = 0 goto %0002324a
0003584c: goto %00023be5

0002324a:
0002324d: R30 := 0x407804
0002324f: call @new_auth with return %00023251

00023251:
00023257: mem := mem with [R31 + 0x68, el]:u64 <- R0
0002325e: R1 := mem[R19 + 0x30, el]:u64
00023265: R2 := mem[R19 + 0x40, el]:u64
0002326a: R30 := 0x407814
0002326c: call @proxy_connect with return %0002326e

0002326e:
00023274: mem := mem with [R31 + 0x60, el]:u32 <- 31:0[R0]
0002327a: #974 := 31:0[R0] + 2
0002327f: VF := extend:64[#974] <> extend:64[31:0[R0]] + 2
00023284: CF := pad:64[#974] <> pad:64[31:0[R0]] + 2
00023288: ZF := #974 = 0
0002328c: NF := 31:31[#974]
00023292: when ZF goto %00023290
0003584d: goto %000232ea

00023290:
00023298: R23 := 0
0002329d: R19 := 0
000232a2: R21 := 0xFFFFFFFFFFFFFFFE
000232a6: goto %00021384

000232ea:
000232ee: when 31:31[R0] goto %000232ec
0003584e: goto %00023351

000232ec:
000232f6: R0 := mem[R19 + 0x48, el]:u64
000232fb: R1 := 0x413000
00023301: R1 := R1 + 0xCD8
00023306: R23 := 0
0002330b: R21 := 0xFFFFFFFFFFFFFFFF
00023310: R30 := 0x407AE8
00023312: call @gen_502_page with return %00023314

00023314:
00023318: R19 := R0
0002331d: R30 := 0x407AF0
0002331f: call @strlen with return %00023321

00023321:
00023325: R2 := R0
0002332c: R0 := pad:64[mem[R31 + 0x64, el]:u32]
00023332: R1 := R19
00023337: R30 := 0x407B00
00023339: call @write_wrapper with return %0002333b

0002333b:
0002333f: R0 := R19
00023344: R19 := 0
00023349: R30 := 0x407B0C
0002334b: call @free with return %0002334d

0002334d:
0002334f: goto %00021384

00023351:
00023356: R0 := mem[R31 + 0x10, el]:u64
0002335c: when R0 <> 0 goto %0002335a
0003584f: goto %000239f3

000239f3:
000239f6: goto %000239f4

00023be5:
00023bea: R0 := pad:64[mem[R20, el]:u32]
00023bf0: when 31:0[R0] <> 0 goto %00023bee
00035850: goto %00023c60

00023bee:
00023bf7: R2 := pad:64[31:0[R22]]
00023bfc: R1 := 0x413000
00023c01: R0 := 2
00023c07: R1 := R1 + 0xCB0
00023c0c: R30 := 0x407114
00023c0e: call @__printf_chk with return %00023c10

00023c10:
00023c16: mem := mem with [R31 + 0x60, el]:u32 <- 31:0[R22]
00023c1d: R0 := mem[R31 + 0x10, el]:u64
00023c23: when R0 <> 0 goto %00023c21
00035851: goto %00023c5b

00023c60:
00023c65: R0 := mem[R31 + 0x10, el]:u64
00023c6d: mem := mem with [R31 + 0x60, el]:u32 <- 31:0[R22]
00023c72: when R0 = 0 goto %00023c5b
00035852: goto %00023c21

00023c5b:
00023c5e: R22 := 1
00035853: goto %000239f4

000239f4:
000239fc: R0 := mem[R19 + 0x40, el]:u64
00023a04: mem := mem with [R31 + 0x10, el]:u64 <- R0
00023a09: when R0 = 0 goto %0002335a
00035854: goto %00023a0d

00023a0d:
00023a10: R30 := 0x407134
00023a12: call @strdup with return %00023a14

00023a14:
00023a1a: mem := mem with [R31 + 0x10, el]:u64 <- R0
00023a1f: when 31:0[R21] <> 0 goto %000239ca
00035855: goto %00023361

00023c21:
00023c29: R22 := 1
00023c2f: when R19 = 0 goto %00023c2d
00035856: goto %0002335a

00023c2d:
00023c36: R0 := R31 + 0x70
00023c3b: R21 := 0
00023c43: mem := mem with [R31 + 8, el]:u64 <- R0
00023c49: R0 := R31 + 0x78
00023c51: mem := mem with [R31 + 0x18, el]:u64 <- R0
00023c59: mem := mem with [R31 + 0x4C, el]:u32 <- 31:0[R22]
00035857: goto %000231cd

0002335a:
00023363: when 31:0[R21] = 0 goto %00023361
00035858: goto %000239ca

00023361:
0002336a: R0 := R19
0002336f: R30 := 0x407144
00023371: call @dup_rr_data with return %00023373

00023373:
00023377: R19 := R0
0002337d: R0 := R31 + 0x70
00023385: mem := mem with [R31 + 8, el]:u64 <- R0
0002338b: R0 := R31 + 0x78
00023393: mem := mem with [R31 + 0x18, el]:u64 <- R0
0002339b: mem := mem with [R31 + 0x4C, el]:u32 <- 31:0[R22]
0002339f: goto %000231e0

000239ca:
000239ce: R0 := R31 + 0x70
000239d3: R21 := 0
000239db: mem := mem with [R31 + 8, el]:u64 <- R0
000239e1: R0 := R31 + 0x78
000239e9: mem := mem with [R31 + 0x18, el]:u64 <- R0
000239f1: mem := mem with [R31 + 0x4C, el]:u32 <- 31:0[R22]
00035859: goto %000231e0

000231e0:
000231e9: mem := mem with [R31 + 0x70, el]:u64 <- R19
000231ee: R30 := 0x407024
000231f0: call @new_rr_data with return %000231f2

000231f2:
000231f6: R1 := R31 + 0x88
000231fb: R27 := 0
00023203: mem := mem with [R31 + 0x20, el]:u64 <- R1
0002320a: mem := mem with [R31 + 0x48, el]:u32 <- 0
00023212: mem := mem with [R31 + 0x78, el]:u64 <- R0
0003585a: goto %000215eb

000215eb:
000215f3: R0 := mem[R31 + 8, el]:u64
000215f9: R7 := extend:64[31:0[R27]]
00021600: R2 := pad:64[mem[R20, el]:u32]
00021606: R19 := extend:64[31:0[R27].0]
0002160e: R1 := mem[R0 + (60:0[R7].0), el]:u64
00021615: R0 := pad:64[mem[R1 + 0x1C, el]:u32]
0002161b: when 31:0[R0] = 0 goto %00021619
0003585b: goto %00025236

00025236:
00025239: when 31:0[R2] <> 0 goto %00023496
0003585c: goto %0002523d

00023496:
0002349a: #977 := R31 + 0x60
0002349f: R4 := pad:64[mem[#977, el]:u32]
000234a4: R3 := pad:64[mem[#977 + 4, el]:u32]
000234aa: R6 := pad:64[31:0[R21]]
000234b0: R5 := pad:64[31:0[R22]]
000234b6: R2 := pad:64[31:0[R27] + 1]
000234bb: R1 := 0x413000
000234c0: R0 := 2
000234c6: R1 := R1 + 0xCF8
000234ce: mem := mem with [R31 + 0x50, el]:u64 <- R7
000234d3: R30 := 0x40774C
000234d5: call @__printf_chk with return %000234d7

000234d7:
000234db: R2 := R31 + 0x88
000234e0: R1 := 0x413000
000234e5: R0 := 2
000234eb: R1 := R1 + 0xA28
000234f3: R3 := mem[R2 + R19, el]:u64
000234fb: mem := mem with [R31, el]:u64 <- R3
00023502: R2 := pad:64[mem[R3, el]:u32]
00023507: R30 := 0x40776C
00023509: call @__printf_chk with return %0002350b

0002350b:
00023510: R3 := mem[R31, el]:u64
00023515: R0 := mem[R31 + 8, el]:u64
0002351c: R7 := mem[R31 + 0x50, el]:u64
00023524: R1 := mem[R0 + R19, el]:u64
00023529: goto %00023527

0002523d:
00025242: R0 := mem[R31 + 0x20, el]:u64
0002524a: R3 := mem[R0 + R19, el]:u64
0003585d: goto %00023527

00023527:
00023530: mem := mem with [R31, el]:u64 <- R7
00023537: R0 := pad:64[mem[R3, el]:u32]
0002353c: R30 := 0x40706C
0002353e: call @headers_recv with return %00023540

00023540:
00023545: R7 := mem[R31, el]:u64
0002354a: when 31:0[R0] = 0 goto %0002154c
0003585e: goto %00021619

00021619:
00021623: R0 := mem[R31 + 0x10, el]:u64
00021628: VF := 0
0002162b: CF := 1
0002162f: ZF := 31:0[R27] = 0
00021633: NF := 31:31[R27]
0002163a: R3 := pad:64[mem[R20, el]:u32]
00021640: #914 := ZF
00021643: VF := 0
00021647: CF := #914
0002164c: ZF := R0 = 0 | ~#914
00021651: NF := #914 & 63:63[R0]
00021657: when ZF goto %00021655
0003585f: goto %000251f0

00021655:
0002165e: when 31:0[R3] <> 0 goto %0002165c
00035860: goto %000251e9

0002165c:
00021666: R0 := mem[R31 + 8, el]:u64
0002166e: mem := mem with [R31, el]:u64 <- R7
00021676: R0 := mem[R0 + (60:0[R7].0), el]:u64
0002167d: R0 := mem[R0 + 8, el]:u64
00021682: R30 := 0x407620
00021684: call @hlist_dump with return %00021686

00021686:
0002168b: R7 := mem[R31, el]:u64
00021691: when 31:0[R27] <> 0 goto %0002168f
00035861: goto %000251de

000251e9:
000251ec: when 31:0[R27] = 0 goto %000251de
00035862: goto %0002168f

000251de:
000251e3: R19 := mem[R31 + 0x70, el]:u64
000251e7: goto %00023564

0002168f:
00021697: R19 := 0x7FFF
0002169d: #915 := 31:0[R27] - 1
000216a2: VF := extend:64[#915] <> extend:64[31:0[R27]] - 1
000216a7: CF := pad:64[#915] <> pad:64[31:0[R27]] + 0xFFFFFFFF
000216ab: ZF := #915 = 0
000216af: NF := 31:31[#915]
000216b5: when ZF goto %000216b3
00035863: goto %000214f0

000216b3:
000216bd: R0 := mem[R31 + 0x78, el]:u64
000216c4: R1 := pad:64[mem[R0 + 0x10, el]:u32]
000216c9: goto %000216c7

000251f0:
000251f5: R19 := mem[R31 + 0x70, el]:u64
000251fc: R1 := mem[R19 + 0x40, el]:u64
00025202: when R1 = 0 goto %00025200
00035864: goto %0002520c

0002520c:
00025212: mem := mem with [R31, el]:u32 <- 31:0[R3]
00025217: R30 := 0x40709C
00025219: call @strcasecmp with return %0002521b

0002521b:
00025220: R3 := pad:64[mem[R31, el]:u32]
00025226: when 31:0[R0] <> 0 goto %00025224
00035865: goto %00025200

00025224:
0002522d: R2 := R19
00025232: when 31:0[R3] <> 0 goto %0002395f
00035866: goto %00023985

0002395f:
00023964: R2 := mem[R19 + 0x30, el]:u64
00023969: R1 := 0x413000
0002396e: R0 := 2
00023974: R1 := R1 + 0xD38
00023979: R30 := 0x407AC8
0002397b: call @__printf_chk with return %0002397d

0002397d:
00023982: R2 := mem[R31 + 0x70, el]:u64
00023987: goto %00023985

00023985:
0002398b: R19 := 0
00023990: when 31:0[R22] = 0 goto %000211f5
00035867: goto %00023994

00023994:
00023999: R0 := pad:64[mem[R2 + 0x24, el]:u32]
0002399f: #983 := 31:0[R0] - 0xA
000239a4: VF := extend:64[#983] <> extend:64[31:0[R0]] - 0xA
000239a9: CF := pad:64[#983] <> pad:64[31:0[R0]] + 0xFFFFFFF6
000239ad: ZF := #983 = 0
000239b1: NF := 31:31[#983]
000239b8: when NF = VF & ~ZF goto %000232a8
00035868: goto %000211f5

000232a8:
000232ad: R0 := mem[R2 + 8, el]:u64
000232b2: R19 := 0x413000
000232b8: R19 := R19 + 0x7B0
000232bd: R1 := 0x413000
000232c3: R2 := R19
000232c9: R1 := R1 + 0xBA8
000232ce: R30 := 0x407B3C
000232d0: call @hlist_subcmp with return %000232d2

000232d2:
000232d5: when 31:0[R0] = 0 goto %000211a8
00035869: goto %000232d9

000211a8:
000211ad: R0 := mem[R31 + 0x70, el]:u64
000211b3: R2 := R19
000211b8: R1 := 0x413000
000211be: R1 := R1 + 0x7C0
000211c5: R0 := mem[R0 + 8, el]:u64
000211ca: R30 := 0x407B84
000211cc: call @hlist_subcmp with return %000211ce

000211ce:
000211d1: VF := 0
000211d4: CF := 1
000211d8: ZF := 31:0[R0] = 0
000211dc: NF := 31:31[R0]
000211e3: R2 := mem[R31 + 0x70, el]:u64
000211ef: when ZF goto %000211e8
000211f0: goto %000211eb

000211eb:
000211ec: R19 := 1
000211f2: goto %000211ee

000211e8:
000211e9: R19 := 0
000211f1: goto %000211ee

000211ee:
000211f7: goto %000211f5

000232d9:
000232de: R2 := mem[R31 + 0x70, el]:u64
000232e4: R19 := pad:64[31:0[R22]]
000232e8: goto %000211f5

000211f5:
000211fc: R0 := R2
00021201: R30 := 0x407A6C
00021203: call @dup_rr_data with return %00021205

00021205:
00021209: R21 := R0
0002120f: R23 := pad:64[31:0[R19]]
00021216: R0 := mem[R31 + 8, el]:u64
0002121b: R30 := 0x407A7C
0002121d: call @free_rr_data with return %0002121f

0002121f:
00021224: R0 := mem[R31 + 0x18, el]:u64
00021229: R30 := 0x407A84
0002122b: call @free_rr_data with return %0002122d

0002122d:
00021230: goto %0002122e

00025200:
00025208: when 31:0[R3] <> 0 goto %0002354e
0003586a: goto %00023564

0002354e:
00023553: R0 := mem[R19 + 8, el]:u64
00023558: R30 := 0x407784
0002355a: call @hlist_dump with return %0002355c

0002355c:
00023561: R19 := mem[R31 + 0x70, el]:u64
00023566: goto %00023564

00023564:
0002356c: R0 := pad:64[mem[R19, el]:u32]
00023571: when 31:0[R0] <> 0 goto %000233a1
0003586b: goto %000233de

000233a1:
000233a5: #975 := R19 + 0x28
000233aa: R4 := mem[#975, el]:u64
000233af: R5 := mem[#975 + 8, el]:u64
000233b4: R1 := 2
000233b9: R0 := 7
000233bf: R3 := R23
000233c5: R2 := R24
000233ca: R30 := 0x407178
000233cc: call @__syslog_chk with return %000233ce

000233ce:
000233d3: R0 := mem[R31 + 0x70, el]:u64
000233da: R1 := pad:64[mem[R0, el]:u32]
000233e0: when 31:0[R1] = 0 goto %000233de
0003586c: goto %0002358a

0002358a:
0002358f: R0 := mem[R0 + 8, el]:u64
00023594: R19 := 0x413000
0002359b: R2 := mem[R31 + 0x68, el]:u64
000235a1: R1 := R19 + 0xA78
000235a6: R30 := 0x407198
000235a8: call @http_parse_basic with return %000235aa

000235aa:
000235ad: VF := 0
000235b0: CF := 1
000235b4: ZF := 31:0[R0] = 0
000235b8: NF := 31:31[R0]
000235c0: when ~(NF = VF & ~ZF) goto %000235be
0003586d: goto %000239bc

000235be:
000235c8: R0 := pad:64[mem[R28, el]:u32]
000235ce: when 31:0[R0] = 0 goto %000235cc
0003586e: goto %0002389f

0002389f:
000238a4: R0 := pad:64[mem[R20, el]:u32]
000238aa: when 31:0[R0] <> 0 goto %000238a8
0003586f: goto %000238c5

000238a8:
000238b0: R1 := 0x413000
000238b5: R0 := 2
000238bb: R1 := R1 + 0xD58
000238c0: R30 := 0x407AB0
000238c2: call @__printf_chk with return %000238c4

000238c4:
000238c7: goto %000238c5

000238c5:
000238cd: R0 := mem[R31 + 0x70, el]:u64
000238d4: R0 := mem[R0 + 0x48, el]:u64
000238d9: R30 := 0x4073C0
000238db: call @gen_407_page with return %000238dd

000238dd:
000238e1: R19 := R0
000238e6: R30 := 0x4073C8
000238e8: call @strlen with return %000238ea

000238ea:
000238ee: R2 := R0
000238f5: R0 := pad:64[mem[R31 + 0x64, el]:u32]
000238fb: R1 := R19
00023900: R30 := 0x4073D8
00023902: call @write_wrapper with return %00023904

00023904:
00023908: R0 := R19
0002390d: R30 := 0x4073E0
0002390f: call @free with return %00023911

00023911:
00023916: R0 := mem[R31 + 8, el]:u64
0002391b: R30 := 0x4073E8
0002391d: call @free_rr_data with return %0002391f

0002391f:
00023924: R0 := mem[R31 + 0x18, el]:u64
00023929: R30 := 0x4073F0
0002392b: call @free_rr_data with return %0002392d

0002392d:
0002392f: goto %0002156d

000239bc:
000239c1: R0 := pad:64[mem[R20, el]:u32]
000239c6: when 31:0[R0] <> 0 goto %00023931
00035870: goto %000235cc

00023931:
00023936: R3 := mem[R31 + 0x68, el]:u64
0002393b: R1 := 0x413000
00023940: R0 := 2
00023946: R1 := R1 + 0xA90
0002394c: R4 := R3 + 0x64
00023952: R2 := R3 + 0x32
00023957: R30 := 0x407410
00023959: call @__printf_chk with return %0002395b

0002395b:
0002395d: goto %000235cc

000235cc:
000235d6: R27 := mem[R26, el]:u64
000235dc: when R27 = 0 goto %000235da
00035871: goto %00023852

00023852:
00023858: mem := mem with [R31, el]:u64 <- R20
00035872: goto %0002385c

0002385c:
00023861: R20 := mem[R31 + 0x70, el]:u64
00023866: R3 := 1
0002386d: R1 := mem[R27, el]:u64
00023872: R2 := mem[R27 + 8, el]:u64
00023879: R0 := mem[R20 + 8, el]:u64
0002387e: R30 := 0x4071CC
00023880: call @hlist_mod with return %00023882

00023882:
00023887: R27 := mem[R27 + 0x18, el]:u64
0002388f: mem := mem with [R20 + 8, el]:u64 <- R0
00023894: when R27 <> 0 goto %0002385c
00035873: goto %00023898

00023898:
0002389d: R20 := mem[R31, el]:u64
00035874: goto %000235da

000235da:
000235e4: R4 := mem[R31 + 0x70, el]:u64
000235eb: R0 := pad:64[mem[R4 + 0x24, el]:u32]
000235f1: #978 := 31:0[R0] - 0xA
000235f6: VF := extend:64[#978] <> extend:64[31:0[R0]] - 0xA
000235fb: CF := pad:64[#978] <> pad:64[31:0[R0]] + 0xFFFFFFF6
000235ff: ZF := #978 = 0
00023603: NF := 31:31[#978]
0002360b: when NF = VF & ~ZF goto %00023609
00035875: goto %00023656

00023609:
00023613: R0 := mem[R4 + 8, el]:u64
00023618: R2 := 0x413000
0002361d: R1 := 0x413000
00023623: R2 := R2 + 0x7B0
00023629: R1 := R1 + 0xBA8
0002362e: R3 := 1
00023636: mem := mem with [R31, el]:u64 <- R4
0002363b: R30 := 0x407364
0002363d: call @hlist_mod with return %0002363f

0002363f:
00023644: R4 := mem[R31, el]:u64
0002364c: mem := mem with [R4 + 8, el]:u64 <- R0
00023653: R4 := mem[R31 + 0x70, el]:u64
00023658: goto %00023656

00023656:
0002365d: R19 := R19 + 0xA78
00023662: goto %00023660

00023660:
00023667: R1 := R19
0002366e: R0 := mem[R4 + 8, el]:u64
00023673: R30 := 0x407218
00023675: call @hlist_get with return %00023677

00023677:
0002367b: when R0 <> 0 goto %00023679
00035876: goto %000236a8

000236a8:
000236ad: R1 := mem[R31 + 0x70, el]:u64
000236b4: R0 := pad:64[mem[R1, el]:u32]
000236b9: when 31:0[R0] = 0 goto %000233de
00035877: goto %000236bd

000236bd:
000236c2: R0 := pad:64[31:0[R21] | 31:0[R22]]
000236c7: when 31:0[R0] <> 0 goto %000233de
00035878: goto %000236cb

000236cb:
000236d0: R3 := mem[R31 + 0x68, el]:u64
000236d6: R0 := R25
000236dd: R2 := mem[R31 + 0x78, el]:u64
000236e2: R30 := 0x407240
000236e4: call @proxy_authenticate with return %000236e6

000236e6:
000236ea: when 31:0[R0] = 0 goto %000236e8
00035879: goto %00023778

000236e8:
000236f1: R19 := pad:64[31:0[R0]]
000236f8: R0 := pad:64[mem[R20, el]:u32]
000236fe: when 31:0[R0] <> 0 goto %000236fc
0003587a: goto %00023719

000236fc:
00023704: R1 := 0x413000
00023709: R0 := 2
0002370f: R1 := R1 + 0xD88
00023714: R30 := 0x407840
00023716: call @__printf_chk with return %00023718

00023718:
0002371b: goto %00023719

00023719:
00023721: R0 := mem[R31 + 8, el]:u64
00023726: R23 := 0
0002372b: R22 := 0
00023730: R21 := 0xFFFFFFFFFFFFFFFF
00023735: R30 := 0x4076B0
00023737: call @free_rr_data with return %00023739

00023739:
0002373e: R0 := mem[R31 + 0x18, el]:u64
00023743: R30 := 0x4076B8
00023745: call @free_rr_data with return %00023747

00023747:
00023749: goto %00021384

00023778:
0002377d: R0 := mem[R31 + 0x78, el]:u64
00023784: R1 := pad:64[mem[R0 + 0x10, el]:u32]
0002378a: #979 := 31:0[R1] - 0x197
0002378f: VF := extend:64[#979] <> extend:64[31:0[R1]] - 0x197
00023794: CF := pad:64[#979] <> pad:64[31:0[R1]] + 0xFFFFFE69
00023798: ZF := #979 = 0
0002379c: NF := 31:31[#979]
000237a1: when ZF goto %0002374b
0003587b: goto %000237a5

0002374b:
0002374e: R30 := 0x4076C0
00023750: call @reset_rr_data with return %00023752

00023752:
00023755: R21 := 0
0002375c: R19 := mem[R31 + 0x98, el]:u64
00023761: R22 := 0
00023768: R1 := pad:64[mem[R20, el]:u32]
0002376f: R0 := pad:64[mem[R19, el]:u32]
00023774: when 31:0[R1] = 0 goto %00023575
0003587c: goto %000233fa

000237a5:
000237aa: R2 := pad:64[mem[R20, el]:u32]
000237b0: when 31:0[R2] <> 0 goto %000237ae
0003587d: goto %00023801

000237ae:
000237b6: R1 := 0x413000
000237bb: R0 := 2
000237c1: R1 := R1 + 0xDA8
000237c6: R30 := 0x407384
000237c8: call @__printf_chk with return %000237ca

000237ca:
000237cf: R0 := mem[R31 + 0x78, el]:u64
000237d6: R1 := pad:64[mem[R0 + 0x10, el]:u32]
000237dc: #980 := 31:0[R1] - 0x18F
000237e1: VF := extend:64[#980] <> extend:64[31:0[R1]] - 0x18F
000237e6: CF := pad:64[#980] <> pad:64[31:0[R1]] + 0xFFFFFE71
000237ea: ZF := #980 = 0
000237ee: NF := 31:31[#980]
000237fc: when NF = VF & ~ZF goto %000237f5
000237fd: goto %000237f8

000237f8:
000237f9: R21 := 1
000237ff: goto %000237fb

000237f5:
000237f6: R21 := 0
000237fe: goto %000237fb

000237fb:
0003587e: goto %000216c7

000216c7:
000216ce: #916 := 31:0[R1] - 0x197
000216d3: VF := extend:64[#916] <> extend:64[31:0[R1]] - 0x197
000216d8: CF := pad:64[#916] <> pad:64[31:0[R1]] + 0xFFFFFE69
000216dc: ZF := #916 = 0
000216e0: NF := 31:31[#916]
000216e6: when ZF goto %000216e4
0003587f: goto %000251d4

000216e4:
000216ee: R1 := pad:64[mem[R31 + 0x4C, el]:u32]
000216f5: R27 := pad:64[31:0[R21] | 31:0[R1]]
000216fb: when 31:0[R27] = 0 goto %000216f9
00035880: goto %00023ace

00023ace:
00023ad3: R0 := pad:64[mem[R20, el]:u32]
00023ad9: R6 := pad:64[31:0[R27]]
00023adf: when 31:0[R0] <> 0 goto %00023add
00035881: goto %00023b15

00023add:
00023ae6: R2 := R1
00023aec: R3 := pad:64[31:0[R21]]
00023af1: R1 := 0x413000
00023af6: R0 := 2
00023afc: R1 := R1 + 0xDD8
00023b04: mem := mem with [R31, el]:u32 <- 31:0[R27]
00023b09: R30 := 0x407BC8
00023b0b: call @__printf_chk with return %00023b0d

00023b0d:
00023b12: R6 := pad:64[mem[R31, el]:u32]
00023b17: goto %00023b15

00023b15:
00023b1d: R0 := mem[R31 + 0x68, el]:u64
00023b23: when R0 = 0 goto %00023b21
00035882: goto %00023d04

00023d04:
00023d0a: mem := mem with [R31, el]:u32 <- 31:0[R6]
00023d0f: R30 := 0x4077B4
00023d11: call @free with return %00023d13

00023d13:
00023d18: R6 := pad:64[mem[R31, el]:u32]
00035883: goto %00023b21

00023b21:
00023b2b: R0 := mem[R31 + 0x18, el]:u64
00023b33: mem := mem with [R31, el]:u32 <- 31:0[R6]
00023b3a: R19 := mem[R31 + 0x70, el]:u64
00023b3f: R30 := 0x4077C8
00023b41: call @free_rr_data with return %00023b43

00023b43:
00023b48: R0 := pad:64[mem[R31 + 0x60, el]:u32]
00023b4d: R30 := 0x4077D0
00023b4f: call @close with return %00023b51

00023b51:
00023b56: R6 := pad:64[mem[R31, el]:u32]
00023b5c: R21 := pad:64[31:0[R6]]
00023b61: goto %00023b5f

000251d4:
000251d8: R27 := pad:64[31:0[R21]]
000251dc: goto %0002382a

00023801:
00023805: #981 := 31:0[R1] - 0x18F
0002380a: VF := extend:64[#981] <> extend:64[31:0[R1]] - 0x18F
0002380f: CF := pad:64[#981] <> pad:64[31:0[R1]] + 0xFFFFFE71
00023813: ZF := #981 = 0
00023817: NF := 31:31[#981]
00023825: when NF = VF & ~ZF goto %0002381e
00023826: goto %00023821

00023821:
00023822: R27 := 1
00023828: goto %00023824

0002381e:
0002381f: R27 := 0
00023827: goto %00023824

00023824:
00035884: goto %0002382a

0002382a:
0002382e: #982 := 31:0[R27] - 1
00023833: VF := extend:64[#982] <> extend:64[31:0[R27]] - 1
00023838: CF := pad:64[#982] <> pad:64[31:0[R27]] + 0xFFFFFFFF
0002383c: ZF := #982 = 0
00023840: NF := 31:31[#982]
0002384d: when ZF goto %00023846
0002384e: goto %00023849

00023849:
0002384a: R22 := 1
00023850: goto %0002384c

00023846:
00023847: R22 := pad:64[31:0[R22]]
0002384f: goto %0002384c

0002384c:
00035885: goto %000216f9

000216f9:
00021701: R1 := 0x42F000
00021708: R1 := mem[R1 + 0xFF0, el]:u64
0002170d: R2 := 1
00021715: mem := mem with [R31, el]:u32 <- 31:0[R2]
0002171a: R19 := 0x7FFF
00021721: R1 := pad:64[mem[R1, el]:u32]
00021727: when 31:0[R1] <> 0 goto %00021725
00035886: goto %00022eb9

00021725:
0002172d: R5 := 0x42F000
00021734: R5 := mem[R5 + 0xF80, el]:u64
0002173a: R1 := R0
00021740: #917 := R31 + 0x68
00021745: R2 := mem[#917, el]:u64
0002174a: R0 := mem[#917 + 8, el]:u64
00021750: R4 := R25
00021757: R5 := mem[R5, el]:u64
0002175e: R3 := pad:64[mem[R31 + 0x64, el]:u32]
00021763: R30 := 0x407950
00021766: call @scanner_hook with return %00022e9d

00022e9d:
00022ea1: R1 := pad:64[0:0[R0]]
00022ea7: R19 := pad:64[31:0[R0]]
00022eaf: mem := mem with [R31, el]:u32 <- 31:0[R1]
00022eb6: R0 := mem[R31 + 0x78, el]:u64
00022ebb: goto %00022eb9

00022eb9:
00022ec1: R0 := mem[R0 + 8, el]:u64
00022ec6: R2 := 0x413000
00022ecb: R21 := 0x413000
00022ed1: R2 := R2 + 0x7B0
00022ed7: R1 := R21 + 0x7C0
00022edc: R30 := 0x4072A0
00022ede: call @hlist_subcmp with return %00022ee0

00022ee0:
00022ee6: mem := mem with [R31 + 0x48, el]:u32 <- 31:0[R0]
00022eec: when 31:0[R0] <> 0 goto %00022eea
00035887: goto %00023aa9

00022eea:
00022ef4: R4 := mem[R31 + 0x78, el]:u64
00022ef8: goto %00021406

00023aa9:
00023aad: #985 := R31 + 0x70
00023ab2: R0 := mem[#985, el]:u64
00023ab7: R4 := mem[#985 + 8, el]:u64
00023abc: when R0 = 0 goto %000213bf
00035888: goto %00023ac0

00023ac0:
00023ac5: R1 := pad:64[mem[R0, el]:u32]
00023aca: when 31:0[R1] <> 0 goto %00021395
00035889: goto %000213bf

00021395:
0002139a: R1 := mem[R0 + 0x28, el]:u64
0002139f: R0 := 0x413000
000213a5: R0 := R0 + 0x9F8
000213ad: mem := mem with [R31 + 0x50, el]:u64 <- R4
000213b2: R30 := 0x4078F4
000213b4: call @strcasecmp with return %000213b6

000213b6:
000213bb: R4 := mem[R31 + 0x50, el]:u64
000213c1: when 31:0[R0] <> 0 goto %000213bf
0003588a: goto %000252cb

000252cb:
000252d0: R0 := pad:64[mem[R4 + 0x10, el]:u32]
000252d6: #1056 := 31:0[R0] - 0xC8
000252db: VF := extend:64[#1056] <> extend:64[31:0[R0]] - 0xC8
000252e0: CF := pad:64[#1056] <> pad:64[31:0[R0]] + 0xFFFFFF38
000252e4: ZF := #1056 = 0
000252e8: NF := 31:31[#1056]
000252ed: when ZF <> 1 goto %000213bf
0003588b: goto %000252f1

000252f1:
000252f3: goto %00021406

000213bf:
000213c9: R0 := mem[R4 + 8, el]:u64
000213cf: R1 := R21 + 0x7C0
000213d4: R2 := 0x413000
000213d9: R3 := 1
000213df: R2 := R2 + 0xAF0
000213e7: mem := mem with [R31 + 0x50, el]:u64 <- R4
000213ec: R30 := 0x4072D4
000213ee: call @hlist_mod with return %000213f0

000213f0:
000213f5: R4 := mem[R31 + 0x50, el]:u64
000213fd: mem := mem with [R4 + 8, el]:u64 <- R0
00021404: R4 := mem[R31 + 0x78, el]:u64
0003588c: goto %00021406

00021406:
00021409: R21 := 0x413000
0002140f: R21 := R21 + 0xE10
00021417: mem := mem with [R31 + 0x50, el]:u32 <- 31:0[R19]
0002141c: goto %0002141a

0002141a:
00021422: R0 := mem[R4 + 8, el]:u64
00021428: R1 := R21
0002142d: R30 := 0x407314
0002142f: call @hlist_get with return %00021431

00021431:
00021435: when R0 <> 0 goto %00021433
0003588d: goto %00021462

00021462:
00021467: R4 := mem[R31 + 0x78, el]:u64
0002146e: R19 := pad:64[mem[R31 + 0x50, el]:u32]
00021475: R0 := pad:64[mem[R4 + 0x10, el]:u32]
0002147b: #911 := 31:0[R0] - 0x197
00021480: VF := extend:64[#911] <> extend:64[31:0[R0]] - 0x197
00021485: CF := pad:64[#911] <> pad:64[31:0[R0]] + 0xFFFFFE69
00021489: ZF := #911 = 0
0002148d: NF := 31:31[#911]
00021493: when ZF goto %00021491
0003588e: goto %000252bd

00021491:
0002149b: R0 := mem[R4 + 8, el]:u64
000214a1: R1 := R21
000214a6: R2 := 0x413000
000214ab: R3 := 1
000214b1: R2 := R2 + 0xE28
000214b9: mem := mem with [R31 + 0x50, el]:u64 <- R4
000214be: R30 := 0x407A2C
000214c0: call @hlist_mod with return %000214c2

000214c2:
000214c7: R4 := mem[R31 + 0x50, el]:u64
000214cf: mem := mem with [R4 + 8, el]:u64 <- R0
000214d6: R0 := pad:64[mem[R31, el]:u32]
000214dc: when 31:0[R0] <> 0 goto %000214da
0003588f: goto %000252ac

000252ac:
000252b1: R4 := mem[R31 + 0x78, el]:u64
000252b7: R21 := pad:64[31:0[R27]]
000252bb: goto %00022fb1

000252bd:
000252c2: R0 := pad:64[mem[R31, el]:u32]
000252c7: when 31:0[R0] = 0 goto %00022faa
00035890: goto %000214da

00022faa:
00022fae: R21 := pad:64[31:0[R27]]
00022fb3: goto %00022fb1

000214da:
000214e3: R21 := pad:64[31:0[R27]]
000214e8: R7 := 1
000214ed: R27 := 1
000214f2: goto %000214f0

000214f0:
000214f8: R0 := pad:64[mem[R20, el]:u32]
000214fe: R3 := R31 + 0x98
00021506: R4 := mem[R3 + (60:0[R7].0), el]:u64
0002150c: when 31:0[R0] = 0 goto %0002150a
00035891: goto %0002525d

0002525d:
00025262: R2 := pad:64[mem[R4, el]:u32]
00025267: R1 := 0x413000
0002526c: R0 := 2
00025272: R1 := R1 + 0xBC0
0002527a: mem := mem with [R31, el]:u64 <- R4
00025280: #1054 := R31 + 0x50
00025286: mem := mem with [#1054, el]:u64 <- R7
0002528c: mem := mem with [#1054 + 8, el]:u64 <- R3
00025291: R30 := 0x407454
00025293: call @__printf_chk with return %00025295

00025295:
00025299: #1055 := R31 + 0x50
0002529e: R7 := mem[#1055, el]:u64
000252a3: R3 := mem[#1055 + 8, el]:u64
000252aa: R4 := mem[R31, el]:u64
00035892: goto %0002150a

0002150a:
00021515: mem := mem with [R31, el]:u64 <- R7
0002151c: R1 := mem[R31 + 8, el]:u64
00021524: mem := mem with [R31 + 0x50, el]:u64 <- R3
0002152b: R0 := pad:64[mem[R4, el]:u32]
00021533: R1 := mem[R1 + (60:0[R7].0), el]:u64
00021538: R30 := 0x407474
0002153a: call @headers_send with return %0002153c

0002153c:
00021541: R7 := mem[R31, el]:u64
00021548: R3 := mem[R31 + 0x50, el]:u64
0002154e: when 31:0[R0] = 0 goto %0002154c
00035893: goto %0002157c

0002157c:
00021580: #912 := 31:0[R27] - 1
00021585: VF := extend:64[#912] <> extend:64[31:0[R27]] - 1
0002158a: CF := pad:64[#912] <> pad:64[31:0[R27]] + 0xFFFFFFFF
0002158e: ZF := #912 = 0
00021592: NF := 31:31[#912]
00021598: when ZF <> 1 goto %00021596
00035894: goto %00025256

00021596:
0002159f: when 1:1[R19] goto %0002159d
00035895: goto %0002524c

0002524c:
00025250: R27 := pad:64[31:0[R27] + 1]
00025254: goto %000215eb

00025256:
0002525b: R4 := mem[R31 + 0x78, el]:u64
00035896: goto %00022fb1

00022fb1:
00022fb9: R2 := mem[R31 + 0x70, el]:u64
00022fbf: when R2 = 0 goto %00022fbd
00035897: goto %00023a23

00023a23:
00023a28: R0 := pad:64[mem[R2, el]:u32]
00023a2d: when 31:0[R0] = 0 goto %00022fbd
00035898: goto %00023a31

00023a31:
00023a36: R1 := mem[R2 + 0x28, el]:u64
00023a3b: R0 := 0x413000
00023a41: R0 := R0 + 0x9F8
00023a49: mem := mem with [R31, el]:u64 <- R2
00023a51: mem := mem with [R31 + 0x20, el]:u64 <- R4
00023a56: R30 := 0x4074B4
00023a58: call @strcasecmp with return %00023a5a

00023a5a:
00023a5f: R2 := mem[R31, el]:u64
00023a66: R4 := mem[R31 + 0x20, el]:u64
00023a6c: when 31:0[R0] = 0 goto %00023a6a
00035899: goto %00022fbd

00023a6a:
00023a74: R1 := pad:64[mem[R4 + 0x10, el]:u32]
00023a7a: #984 := 31:0[R1] - 0xC8
00023a7f: VF := extend:64[#984] <> extend:64[31:0[R1]] - 0xC8
00023a84: CF := pad:64[#984] <> pad:64[31:0[R1]] + 0xFFFFFF38
00023a88: ZF := #984 = 0
00023a8c: NF := 31:31[#984]
00023a91: when ZF <> 1 goto %00022fbd
0003589a: goto %00023a95

00023a95:
00023a99: R19 := pad:64[31:0[R0]]
00023aa0: R0 := pad:64[mem[R20, el]:u32]
00023aa5: when 31:0[R0] <> 0 goto %0002132b
0003589b: goto %00021343

00022fbd:
00022fc6: when 1:1[R19] goto %00022fc4
0003589c: goto %00023001

00022fc4:
00022fce: R1 := mem[R31 + 0x90, el]:u64
00022fd4: R3 := R4
00022fdb: R0 := mem[R31 + 0xA0, el]:u64
00022fe2: R1 := pad:64[mem[R1, el]:u32]
00022fe9: R0 := pad:64[mem[R0, el]:u32]
00022fee: R30 := 0x4077F4
00022ff0: call @http_body_send with return %00022ff2

00022ff2:
00022ff5: when 31:0[R0] = 0 goto %0002154c
0003589d: goto %00022ff9

00022ff9:
00022ffe: R4 := mem[R31 + 0x78, el]:u64
00023003: goto %00023001

00023001:
00023009: R0 := mem[R4 + 8, el]:u64
0002300e: R3 := 0x413000
00023013: R19 := 0x413000
00023019: R19 := R19 + 0x7B0
0002301f: R1 := R3 + 0xBA8
00023025: R2 := R19
0002302d: mem := mem with [R31, el]:u64 <- R1
00023032: R30 := 0x4074E4
00023034: call @hlist_subcmp with return %00023036

00023036:
00023039: R3 := 0x413000
0002303f: when 31:0[R0] = 0 goto %0002303d
0003589e: goto %00023214

00023214:
00023219: R0 := mem[R31 + 0x70, el]:u64
00023220: R1 := mem[R31, el]:u64
00023227: R0 := pad:64[mem[R0 + 0x24, el]:u32]
0002322d: #973 := 31:0[R0] - 0xA
00023232: VF := extend:64[#973] <> extend:64[31:0[R0]] - 0xA
00023237: CF := pad:64[#973] <> pad:64[31:0[R0]] + 0xFFFFFFF6
0002323b: ZF := #973 = 0
0002323f: NF := 31:31[#973]
00023246: when NF = VF & ~ZF goto %000230d7
0003589f: goto %0002303d

000230d7:
000230dc: R5 := mem[R31 + 0x78, el]:u64
000230e2: R2 := R19
000230e7: R3 := 1
000230ef: mem := mem with [R31, el]:u64 <- R5
000230f6: R0 := mem[R5 + 8, el]:u64
000230fb: R30 := 0x407990
000230fd: call @hlist_mod with return %000230ff

000230ff:
00023104: R5 := mem[R31, el]:u64
0002310a: R2 := R19
00023111: R4 := mem[R31 + 0x78, el]:u64
00023116: R3 := 1
0002311e: mem := mem with [R5 + 8, el]:u64 <- R0
00023123: R1 := 0x413000
00023129: R1 := R1 + 0x7C0
00023131: mem := mem with [R31, el]:u64 <- R4
00023138: R0 := mem[R4 + 8, el]:u64
0002313d: R30 := 0x4079B8
0002313f: call @hlist_mod with return %00023141

00023141:
00023146: R4 := mem[R31, el]:u64
0002314e: mem := mem with [R4 + 8, el]:u64 <- R0
00023155: R0 := mem[R31 + 8, el]:u64
0002315a: R30 := 0x4079C8
0002315c: call @free_rr_data with return %0002315e

0002315e:
00023163: R0 := mem[R31 + 0x18, el]:u64
00023168: R30 := 0x4079D0
0002316a: call @free_rr_data with return %0002316c

0002316c:
00023171: R0 := pad:64[mem[R31 + 0x48, el]:u32]
00023177: when 31:0[R0] = 0 goto %00023175
000358a0: goto %0002318e

0002318e:
00023193: R0 := pad:64[mem[R31 + 0x60, el]:u32]
00023198: R30 := 0x4079E0
0002319a: call @so_closed with return %0002319c

0002319c:
0002319f: when 31:0[R0] <> 0 goto %00023175
000358a1: goto %000231a3

000231a3:
000231a8: R0 := pad:64[mem[R31 + 0x64, el]:u32]
000231ad: R30 := 0x4079EC
000231af: call @so_closed with return %000231b1

000231b1:
000231b4: R1 := 0x42F000
000231bb: R1 := mem[R1 + 0xFD0, el]:u64
000231c2: R1 := pad:64[mem[R1, el]:u32]
000231c9: R0 := pad:64[31:0[R0] | 31:0[R1]]
000231cf: when 31:0[R0] = 0 goto %000231cd
000358a2: goto %00023175

00023175:
0002317e: R23 := pad:64[31:0[R22]]
00023183: R19 := 1
00023188: R21 := 0
0002318c: goto %00021384

000231cd:
000231d5: R30 := 0x407928
000231d7: call @new_rr_data with return %000231d9

000231d9:
000231dd: R19 := R0
000231e2: goto %000231e0

0002303d:
00023047: R23 := mem[R31 + 0x78, el]:u64
0002304c: R19 := 0x413000
00023052: R19 := R19 + 0xAF0
00023058: R1 := R3 + 0xBA8
0002305e: R2 := R19
00023063: R3 := 1
0002306a: R0 := mem[R23 + 8, el]:u64
0002306f: R30 := 0x407520
00023071: call @hlist_mod with return %00023073

00023073:
00023078: R21 := mem[R31 + 0x78, el]:u64
00023080: mem := mem with [R23 + 8, el]:u64 <- R0
00023086: R2 := R19
0002308b: R1 := 0x413000
00023090: R3 := 1
00023096: R1 := R1 + 0x7C0
0002309d: R0 := mem[R21 + 8, el]:u64
000230a2: R30 := 0x407540
000230a4: call @hlist_mod with return %000230a6

000230a6:
000230ac: mem := mem with [R21 + 8, el]:u64 <- R0
000230b3: R1 := pad:64[mem[R20, el]:u32]
000230b9: when 31:0[R1] <> 0 goto %000230b7
000358a3: goto %0002154c

000230b7:
000230bf: R1 := 0x413000
000230c4: R0 := 2
000230ca: R1 := R1 + 0xE90
000230cf: R30 := 0x407974
000230d1: call @__printf_chk with return %000230d3

000230d3:
000230d5: goto %0002154c

00021433:
0002143d: R19 := mem[R31 + 0x78, el]:u64
00021443: R1 := R21
0002144a: R0 := mem[R19 + 8, el]:u64
0002144f: R30 := 0x407300
00021451: call @hlist_del with return %00021453

00021453:
00021458: R4 := mem[R31 + 0x78, el]:u64
00021460: mem := mem with [R19 + 8, el]:u64 <- R0
000358a4: goto %0002141a

00023679:
00023683: R27 := mem[R31 + 0x70, el]:u64
00023689: R1 := R19
00023690: R0 := mem[R27 + 8, el]:u64
00023695: R30 := 0x407204
00023697: call @hlist_del with return %00023699

00023699:
0002369f: mem := mem with [R27 + 8, el]:u64 <- R0
000236a6: R4 := mem[R31 + 0x70, el]:u64
000358a5: goto %00023660

000233de:
000233e8: R19 := mem[R31 + 0x98, el]:u64
000233ef: R1 := pad:64[mem[R20, el]:u32]
000233f6: R0 := pad:64[mem[R19, el]:u32]
000233fc: when 31:0[R1] <> 0 goto %000233fa
000358a6: goto %00023575

000233fa:
00023403: R2 := pad:64[31:0[R0]]
00023408: R1 := 0x413000
0002340d: R0 := 2
00023413: R1 := R1 + 0xBC0
00023418: R30 := 0x4076EC
0002341a: call @__printf_chk with return %0002341c

0002341c:
00023421: R4 := mem[R31 + 0x70, el]:u64
00023426: R1 := 0x413000
0002342b: R0 := 2
00023431: R1 := R1 + 0xBE0
00023437: #976 := R4 + 0x28
0002343c: R2 := mem[#976, el]:u64
00023441: R3 := mem[#976 + 8, el]:u64
00023448: R4 := mem[R4 + 0x48, el]:u64
0002344d: R30 := 0x407708
0002344f: call @__printf_chk with return %00023451

00023451:
00023456: R0 := mem[R31 + 0x70, el]:u64
0002345d: R0 := mem[R0 + 8, el]:u64
00023462: R30 := 0x407714
00023464: call @hlist_dump with return %00023466

00023466:
0002346b: R1 := mem[R31 + 0x70, el]:u64
00023472: R0 := pad:64[mem[R19, el]:u32]
00023477: R30 := 0x407720
00023479: call @headers_send with return %0002347b

0002347b:
0002347f: when 31:0[R0] <> 0 goto %0002347d
000358a7: goto %00023492

00023492:
00023494: goto %0002154c

00023575:
0002357a: R1 := mem[R31 + 0x70, el]:u64
0002357f: R30 := 0x4070C8
00023581: call @headers_send with return %00023583

00023583:
00023586: when 31:0[R0] = 0 goto %0002154c
000358a8: goto %0002347d

0002347d:
00023486: R3 := R31 + 0x98
0002348b: R27 := 0
00023490: R7 := 0
000358a9: goto %0002159d

0002159d:
000215a6: R0 := R31 + 0x88
000215ae: R4 := mem[R3 + (60:0[R7].0), el]:u64
000215b6: R1 := mem[R0 + (60:0[R7].0), el]:u64
000215bc: #913 := R31 + 0x70
000215c1: R2 := mem[#913, el]:u64
000215c6: R3 := mem[#913 + 8, el]:u64
000215cd: R1 := pad:64[mem[R1, el]:u32]
000215d4: R0 := pad:64[mem[R4, el]:u32]
000215d9: R30 := 0x4070F4
000215db: call @http_body_send with return %000215dd

000215dd:
000215e0: when 31:0[R0] = 0 goto %0002154c
000358aa: goto %000215e4

0002154c:
00021556: R0 := mem[R31 + 8, el]:u64
0002155b: R30 := 0x407554
0002155d: call @free_rr_data with return %0002155f

0002155f:
00021564: R0 := mem[R31 + 0x18, el]:u64
00021569: R30 := 0x40755C
0002156b: call @free_rr_data with return %0002156d

0002156d:
00021570: R23 := 0
00021575: R19 := 0
0002157a: R21 := 0xFFFFFFFFFFFFFFFF
000358ab: goto %00021384

00021384:
0002138c: R0 := mem[R31 + 0x10, el]:u64
00021391: when R0 = 0 goto %0002123f
000358ac: goto %0002122e

0002122e:
00021236: R0 := mem[R31 + 0x10, el]:u64
0002123b: R30 := 0x407578
0002123d: call @free with return %0002123f

0002123f:
00021244: R0 := pad:64[mem[R20, el]:u32]
0002124a: when 31:0[R0] <> 0 goto %00021248
000358ad: goto %000212b5

00021248:
00021250: R1 := 0x42F000
00021257: R1 := mem[R1 + 0xF58, el]:u64
0002125e: R0 := pad:64[mem[R31 + 0x60, el]:u32]
00021265: R24 := pad:64[mem[R1, el]:u32]
0002126a: R30 := 0x407644
0002126c: call @so_closed with return %0002126e

0002126e:
00021272: R5 := pad:64[31:0[R0]]
00021278: R4 := pad:64[31:0[R24]]
0002127e: R3 := pad:64[31:0[R22]]
00021284: R2 := pad:64[31:0[R19]]
00021289: R1 := 0x413000
0002128e: R0 := 2
00021294: R1 := R1 + 0xEB0
00021299: R30 := 0x407664
0002129b: call @__printf_chk with return %0002129d

0002129d:
000212a0: R1 := 0x413000
000212a5: R0 := 2
000212ab: R1 := R1 + 0xEF0
000212b0: R30 := 0x407674
000212b2: call @__printf_chk with return %000212b4

000212b4:
000212b7: goto %000212b5

000212b5:
000212bc: when 31:0[R23] = 0 goto %000212ba
000358ae: goto %0002539a

0002539a:
0002539d: R0 := 0x42F000
000253a4: R0 := mem[R0 + 0xF58, el]:u64
000253ab: R0 := pad:64[mem[R0, el]:u32]
000253b0: when 31:0[R0] = 0 goto %00022efa
000358af: goto %000212ba

00022efa:
00022eff: R0 := pad:64[mem[R31 + 0x60, el]:u32]
00022f04: R30 := 0x407854
00022f06: call @so_closed with return %00022f08

00022f08:
00022f0b: when 31:0[R0] <> 0 goto %000212ba
000358b0: goto %00022f0f

00022f0f:
00022f14: R0 := pad:64[mem[R20, el]:u32]
00022f1a: when 31:0[R0] <> 0 goto %00022f18
000358b1: goto %00022f45

00022f18:
00022f21: #972 := R31 + 0x60
00022f26: R3 := pad:64[mem[#972, el]:u32]
00022f2b: R2 := pad:64[mem[#972 + 4, el]:u32]
00022f30: R1 := 0x413000
00022f35: R0 := 2
00022f3b: R1 := R1 + 0xF08
00022f40: R30 := 0x407A9C
00022f42: call @__printf_chk with return %00022f44

00022f44:
00022f47: goto %00022f45

00022f45:
00022f4b: R0 := 0x42F000
00022f52: R0 := mem[R0 + 0xF10, el]:u64
00022f57: R19 := 0x42F000
00022f5e: R19 := mem[R19 + 0xFC0, el]:u64
00022f63: R30 := 0x407874
00022f66: call @pthread_mutex_lock with return %00022f68

00022f68:
00022f6d: R2 := mem[R31 + 0x68, el]:u64
00022f74: R0 := mem[R19, el]:u64
00022f7b: R1 := extend:64[mem[R31 + 0x60, el]:u32]
00022f80: R30 := 0x407884
00022f82: call @plist_add with return %00022f84

00022f84:
00022f88: R1 := R0
00022f8d: R0 := 0x42F000
00022f94: R0 := mem[R0 + 0xF10, el]:u64
00022f9c: mem := mem with [R19, el]:u64 <- R1
00022fa1: R30 := 0x407898
00022fa4: call @pthread_mutex_unlock with return %00022fa6

00022fa6:
00022fa8: goto %000212d6

000212ba:
000212c4: R0 := mem[R31 + 0x68, el]:u64
000212c9: R30 := 0x40759C
000212cb: call @free with return %000212cd

000212cd:
000212d2: R0 := pad:64[mem[R31 + 0x60, el]:u32]
000212d8: when 31:31[R0] goto %000212d6
000358b2: goto %00025393

00025393:
00025396: R30 := 0x4075A8
00025398: call @close with return %000212d6

000212d6:
000212de: R0 := 0x42F000
000212e5: R0 := mem[R0 + 0xFB8, el]:u64
000212ec: R2 := mem[R31 + 0xD8, el]:u64
000212f3: R1 := mem[R0, el]:u64
000212f9: #908 := ~R1
000212fe: #909 := R2 + ~R1
00021304: VF := extend:128[#909 + 1] <> extend:128[R2] + extend:128[#908] + 1
0002130a: CF := pad:128[#909 + 1] <> pad:128[R2] + pad:128[#908] + 1
0002130e: ZF := #909 + 1 = 0
00021312: NF := 63:63[#909 + 1]
00021316: R2 := #909 + 1
0002131b: R1 := 0
00021321: when ZF <> 1 goto %0002131f
000358b3: goto %000252f5

0002131f:
00021327: R30 := 0x407B98
00021329: call @__stack_chk_fail with return %0002132b

0002132b:
0002132e: R1 := 0x413000
00021333: R0 := 2
00021339: R1 := R1 + 0xE68
0002133e: R30 := 0x407BA8
00021340: call @__printf_chk with return %00021342

00021342:
00021345: goto %00021343

00021343:
0002134a: #910 := R31 + 0x60
0002134f: R1 := pad:64[mem[#910, el]:u32]
00021354: R0 := pad:64[mem[#910 + 4, el]:u32]
00021359: R23 := 0
0002135e: R21 := 0xFFFFFFFFFFFFFFFF
00021363: R30 := 0x4078CC
00021365: call @tunnel with return %00021367

00021367:
0002136c: R0 := mem[R31 + 8, el]:u64
00021371: R30 := 0x4078D4
00021373: call @free_rr_data with return %00021375

00021375:
0002137a: R0 := mem[R31 + 0x18, el]:u64
0002137f: R30 := 0x4078DC
00021381: call @free_rr_data with return %00021383

00021383:
00021386: goto %00021384

000252f5:
000252f9: #1057 := R31 + 0xE0
000252fe: R29 := mem[#1057, el]:u64
00025303: R30 := mem[#1057 + 8, el]:u64
00025309: R0 := R21
0002530f: #1058 := R31 + 0xF0
00025314: R19 := mem[#1058, el]:u64
00025319: R20 := mem[#1058 + 8, el]:u64
0002531f: #1059 := R31 + 0x100
00025324: R21 := mem[#1059, el]:u64
00025329: R22 := mem[#1059 + 8, el]:u64
0002532f: #1060 := R31 + 0x110
00025334: R23 := mem[#1060, el]:u64
00025339: R24 := mem[#1060 + 8, el]:u64
0002533f: #1061 := R31 + 0x120
00025344: R25 := mem[#1061, el]:u64
00025349: R26 := mem[#1061 + 8, el]:u64
0002534f: #1062 := R31 + 0x130
00025354: R27 := mem[#1062, el]:u64
00025359: R28 := mem[#1062 + 8, el]:u64
0002535f: R31 := R31 + 0x140
00025364: R1 := 0
00025369: R2 := 0
0002536e: R3 := 0
00025373: R4 := 0
00025378: R5 := 0
0002537d: R6 := 0
00025382: R7 := 0
00025387: R16 := 0
0002538c: R17 := 0
00025391: call R30 with noreturn

000215e4:
000215e8: R27 := pad:64[31:0[R27] + 1]
000215ed: goto %000215eb

000358b4: sub forward_tunnel(forward_tunnel_result)
00035e77: forward_tunnel_result :: out u32 = low:32[R0]

00023e0b:
00023e0f: R31 := R31 - 0x80
00023e14: R1 := 0x42F000
00023e1b: R1 := mem[R1 + 0xFB8, el]:u64
00023e21: #994 := R31 + 0x40
00023e27: mem := mem with [#994, el]:u64 <- R29
00023e2d: mem := mem with [#994 + 8, el]:u64 <- R30
00023e33: R29 := R31 + 0x40
00023e39: #995 := R31 + 0x50
00023e3f: mem := mem with [#995, el]:u64 <- R19
00023e45: mem := mem with [#995 + 8, el]:u64 <- R20
00023e4b: R19 := R0
00023e51: #996 := R31 + 0x60
00023e57: mem := mem with [#996, el]:u64 <- R21
00023e5d: mem := mem with [#996 + 8, el]:u64 <- R22
00023e63: #997 := R31 + 0x70
00023e69: mem := mem with [#997, el]:u64 <- R23
00023e6f: mem := mem with [#997 + 8, el]:u64 <- R24
00023e76: R0 := mem[R1, el]:u64
00023e7e: mem := mem with [R31 + 0x38, el]:u64 <- R0
00023e83: R0 := 0
00023e89: when R19 = 0 goto %00023e87
000358b5: goto %00024a06

00024a06:
00024a0b: R21 := mem[R19 + 8, el]:u64
00024a11: R20 := R31 + 8
00024a18: R22 := pad:64[mem[R19, el]:u32]
00024a1e: R0 := R21
00024a23: R30 := 0x407F58
00024a25: call @strdup with return %00024a27

00024a27:
00024a2c: R3 := pad:64[mem[R19 + 0x10, el]:u16]
00024a32: R1 := R19 + 0x14
00024a37: V0 := 0
00024a3d: R19 := R19 + 0x18
00024a43: #1035 := 31:0[R3] - 2
00024a48: VF := extend:64[#1035] <> extend:64[31:0[R3]] - 2
00024a4d: CF := pad:64[#1035] <> pad:64[31:0[R3]] + 0xFFFFFFFE
00024a51: ZF := #1035 = 0
00024a55: NF := 31:31[#1035]
00024a5b: R2 := R20
00024a69: when ZF <> 1 goto %00024a61
00024a6a: goto %00024a65

00024a65:
00024a66: R1 := R1
00024a6c: goto %00024a68

00024a61:
00024a62: R1 := R19
00024a6b: goto %00024a68

00024a68:
00024a72: R23 := R0
00024a78: R0 := pad:64[31:0[R3]]
00024a7d: R3 := 0x2E
00024a85: mem := mem with [R20, el]:u128 <- V0
00024a8b: mem := mem with [R20 + 0x10, el]:u128 <- V0
00024a93: mem := mem with [R20 + 0x1E, el]:u128 <- V0
00024a98: R30 := 0x407F8C
00024a9a: call @inet_ntop with return %00024a9c

00024a9c:
00024a9f: R30 := 0x407F90
00024aa1: call @new_auth with return %00024aa3

00024aa3:
00024aa6: R1 := 0x3A
00024aac: R24 := R0
00024ab2: R0 := R23
00024ab7: R30 := 0x407FA0
00024ab9: call @strchr with return %00024abb

00024abb:
00024abf: when R0 = 0 goto %00024abd
000358b6: goto %00024cbe

00024cbe:
00024cc3: mem := mem with [R0] <- 0
000358b7: goto %00024abd

00024abd:
00024ac6: R2 := R23
00024acc: R1 := R21
00024ad2: R0 := R24
00024ad7: R30 := 0x407FB8
00024ad9: call @proxy_connect with return %00024adb

00024adb:
00024adf: R19 := pad:64[31:0[R0]]
00024ae5: when 31:31[R0] goto %00024ae3
000358b8: goto %00024c5c

00024ae3:
00024aec: #1036 := 31:0[R0] + 2
00024af1: VF := extend:64[#1036] <> extend:64[31:0[R0]] + 2
00024af6: CF := pad:64[#1036] <> pad:64[31:0[R0]] + 2
00024afa: ZF := #1036 = 0
00024afe: NF := 31:31[#1036]
00024b04: when ZF goto %00024b02
000358b9: goto %00024be0

00024be0:
00024be3: goto %00024be1

00024c5c:
00024c5f: R0 := 7
00024c65: R3 := R20
00024c6b: R4 := R21
00024c70: R2 := 0x414000
00024c75: R1 := 2
00024c7b: R2 := R2 + 0x50
00024c80: R30 := 0x407FDC
00024c82: call @__syslog_chk with return %00024c84

00024c84:
00024c87: R0 := 0x42F000
00024c8e: R0 := mem[R0 + 0xF30, el]:u64
00024c95: R0 := pad:64[mem[R0, el]:u32]
00024c9a: when 31:0[R0] <> 0 goto %00024c15
000358ba: goto %00024c9e

00024c15:
00024c19: R3 := pad:64[31:0[R22]]
00024c1f: R2 := R21
00024c24: R1 := 0x414000
00024c29: R0 := 2
00024c2f: R1 := R1 + 0x60
00024c34: R30 := 0x4080A4
00024c36: call @__printf_chk with return %00024c38

00024c38:
00024c3c: R2 := R21
00024c42: R1 := R24
00024c48: R0 := pad:64[31:0[R19]]
00024c4d: R30 := 0x4080B4
00024c4f: call @prepare_http_connect with return %00024c51

00024c51:
00024c54: when 31:0[R0] = 0 goto %00024c05
000358bb: goto %00024c58

00024c58:
00024c5a: goto %00024bf1

00024c9e:
00024ca2: R2 := R21
00024ca8: R1 := R24
00024cae: R0 := pad:64[31:0[R19]]
00024cb3: R30 := 0x407FFC
00024cb5: call @prepare_http_connect with return %00024cb7

00024cb7:
00024cba: when 31:0[R0] <> 0 goto %00024bf1
000358bc: goto %00024c05

00024bf1:
00024bf5: R1 := pad:64[31:0[R19]]
00024bfb: R0 := pad:64[31:0[R22]]
00024c00: R30 := 0x408088
00024c02: call @tunnel with return %00024c04

00024c04:
00024c07: goto %00024c05

00024c05:
00024c0c: R0 := pad:64[31:0[R19]]
00024c11: R30 := 0x408008
00024c13: call @close with return %00024be1

00024be1:
00024be8: R0 := pad:64[31:0[R22]]
00024bed: R30 := 0x408010
00024bef: call @close with return %00024b02

00024b02:
00024b0b: R0 := R24
00024b10: R30 := 0x408018
00024b12: call @free with return %00024b14

00024b14:
00024b18: R0 := R23
00024b1d: R30 := 0x408020
00024b1f: call @free with return %00024b21

00024b21:
00024b24: R0 := 0x42F000
00024b2b: R0 := mem[R0 + 0xFB8, el]:u64
00024b32: R2 := mem[R31 + 0x38, el]:u64
00024b39: R1 := mem[R0, el]:u64
00024b3f: #1037 := ~R1
00024b44: #1038 := R2 + ~R1
00024b4a: VF := extend:128[#1038 + 1] <> extend:128[R2] + extend:128[#1037] +
          1
00024b50: CF := pad:128[#1038 + 1] <> pad:128[R2] + pad:128[#1037] + 1
00024b54: ZF := #1038 + 1 = 0
00024b58: NF := 63:63[#1038 + 1]
00024b5c: R2 := #1038 + 1
00024b61: R1 := 0
00024b67: when ZF <> 1 goto %00024b65
000358bd: goto %00024b71

00024b65:
00024b6d: R30 := 0x4080C0
00024b6f: call @__stack_chk_fail with return %00023e87

00023e87:
00023e8f: R3 := 0x417000
00023e95: R3 := R3 + 0x268
00023e9a: R1 := 0x413000
00023e9f: R0 := 0x413000
00023ea5: R3 := R3 + 0x10
00023eab: R1 := R1 + 0xC40
00023eb1: R0 := R0 + 0xC80
00023eb6: R2 := 0x250
00023ebb: R30 := 0x4080E4
00023ebd: call @__assert_fail with return %000358be

000358be:
000358bf: call @magic_auth_detect with noreturn

00024b71:
00024b75: #1039 := R31 + 0x40
00024b7a: R29 := mem[#1039, el]:u64
00024b7f: R30 := mem[#1039 + 8, el]:u64
00024b85: R0 := pad:64[31:0[R19]]
00024b8b: #1040 := R31 + 0x50
00024b90: R19 := mem[#1040, el]:u64
00024b95: R20 := mem[#1040 + 8, el]:u64
00024b9b: #1041 := R31 + 0x60
00024ba0: R21 := mem[#1041, el]:u64
00024ba5: R22 := mem[#1041 + 8, el]:u64
00024bab: #1042 := R31 + 0x70
00024bb0: R23 := mem[#1042, el]:u64
00024bb5: R24 := mem[#1042 + 8, el]:u64
00024bbb: R31 := R31 + 0x80
00024bc0: R1 := 0
00024bc5: R2 := 0
00024bca: R3 := 0
00024bcf: R4 := 0
00024bd4: R16 := 0
00024bd9: R17 := 0
00024bde: call R30 with noreturn

000358c0: sub frame_dummy(frame_dummy_result)
00035e78: frame_dummy_result :: out u32 = low:32[R0]

0002d009:
0002d00b: call @register_tm_clones with noreturn

000358c1: sub fread(fread_ptr, fread_size, fread_nmemb, fread_stream, fread_result)
00035e79: fread_ptr :: in out u64 = R0
00035e7a: fread_size :: in u64 = R1
00035e7b: fread_nmemb :: in u64 = R2
00035e7c: fread_stream :: in out u64 = R3
00035e7d: fread_result :: out u64 = R0

000176ce:
00030ea7: R16 := 0x42F000
00030eae: R17 := mem[R16 + 0xDB0, el]:u64
00030eb4: R16 := R16 + 0xDB0
00030eb9: call R17 with noreturn

000358c2: sub free(free_ptr)
00035e7e: free_ptr :: in out u64 = R0

0001148e:
00030ee9: R16 := 0x42F000
00030ef0: R17 := mem[R16 + 0xDC8, el]:u64
00030ef6: R16 := R16 + 0xDC8
00030efb: call R17 with noreturn

000358c3: sub free_rr_data(free_rr_data_result)
00035e7f: free_rr_data_result :: out u32 = low:32[R0]

000111cc:
000111d0: #21 := R31 - 0x20
000111d6: mem := mem with [#21, el]:u64 <- R29
000111dc: mem := mem with [#21 + 8, el]:u64 <- R30
000111e0: R31 := #21
000111e6: R29 := R31
000111ee: mem := mem with [R31 + 0x10, el]:u64 <- R19
000111f4: when R0 = 0 goto %000111f2
000358c4: goto %000113b8

000111f2:
000111fa: R0 := 0x42F000
00011201: R0 := mem[R0 + 0xF18, el]:u64
00011206: R1 := 2
0001120b: R2 := 0x416000
00011211: R2 := R2 + 0xF90
00011218: R0 := mem[R0, el]:u64
0001121d: R30 := 0x40F9CC
0001121f: call @__fprintf_chk with return %00011221

00011221:
00011224: R3 := 0x417000
0001122a: R3 := R3 + 0x3F0
0001122f: R1 := 0x416000
00011234: R0 := 0x413000
0001123a: R3 := R3 + 0x10
00011240: R1 := R1 + 0xF58
00011246: R0 := R0 + 0x7E0
0001124b: R2 := 0x28F
00011250: R30 := 0x40F9F0
00011252: call @__assert_fail with return %000358c5

000358c5:
000358c6: call @trimr with noreturn

000113b8:
000113bd: R19 := mem[R0, el]:u64
000113c3: when R19 = 0 goto %000113c1
000358c7: goto %00011400

000113c1:
000113cb: R19 := mem[R31 + 0x10, el]:u64
000113d2: R29 := mem[R31, el]:u64
000113d7: R30 := mem[R31 + 8, el]:u64
000113db: R31 := R31 + 0x20
000113e0: R0 := 0
000113e5: R1 := 0
000113ea: R2 := 0
000113ef: R3 := 0
000113f4: R16 := 0
000113f9: R17 := 0
000113fe: call R30 with noreturn

00011400:
00011405: R0 := mem[R19 + 8, el]:u64
0001140b: when R0 = 0 goto %00011409
000358c8: goto %000114c3

000114c3:
000114c6: R30 := 0x40F928
000114c8: call @hlist_free with return %00011409

00011409:
00011413: R0 := mem[R19 + 0x28, el]:u64
00011419: when R0 = 0 goto %00011417
000358c9: goto %000114bc

000114bc:
000114bf: R30 := 0x40F934
000114c1: call @free with return %00011417

00011417:
00011421: R0 := mem[R19 + 0x30, el]:u64
00011427: when R0 = 0 goto %00011425
000358ca: goto %000114b5

000114b5:
000114b8: R30 := 0x40F940
000114ba: call @free with return %00011425

00011425:
0001142f: R0 := mem[R19 + 0x38, el]:u64
00011435: when R0 = 0 goto %00011433
000358cb: goto %000114ae

000114ae:
000114b1: R30 := 0x40F94C
000114b3: call @free with return %00011433

00011433:
0001143d: R0 := mem[R19 + 0x40, el]:u64
00011443: when R0 = 0 goto %00011441
000358cc: goto %000114a7

000114a7:
000114aa: R30 := 0x40F958
000114ac: call @free with return %00011441

00011441:
0001144b: R0 := mem[R19 + 0x48, el]:u64
00011451: when R0 = 0 goto %0001144f
000358cd: goto %000114a0

000114a0:
000114a3: R30 := 0x40F964
000114a5: call @free with return %0001144f

0001144f:
00011459: R0 := mem[R19 + 0x50, el]:u64
0001145f: when R0 = 0 goto %0001145d
000358ce: goto %00011499

00011499:
0001149c: R30 := 0x40F970
0001149e: call @free with return %0001145d

0001145d:
00011467: R0 := mem[R19 + 0x58, el]:u64
0001146d: when R0 = 0 goto %0001146b
000358cf: goto %00011492

00011492:
00011495: R30 := 0x40F97C
00011497: call @free with return %0001146b

0001146b:
00011474: R0 := R19
0001147b: R19 := mem[R31 + 0x10, el]:u64
00011482: R29 := mem[R31, el]:u64
00011487: R30 := mem[R31 + 8, el]:u64
0001148b: R31 := R31 + 0x20
00011490: call @free with noreturn

000358d0: sub freeaddrinfo(freeaddrinfo_result)
00035e80: freeaddrinfo_result :: out u32 = low:32[R0]

00028377:
0003093d: R16 := 0x42F000
00030944: R17 := mem[R16 + 0xBB8, el]:u64
0003094a: R16 := R16 + 0xBB8
0003094f: call R17 with noreturn

000358d1: sub from_base64(from_base64_result)
00035e81: from_base64_result :: out u32 = low:32[R0]

00011e1a:
00011e1d: R3 := 0x417000
00011e23: R3 := R3 + 0x3F0
00011e29: R6 := R0
00011e2f: R3 := R3 + 0x300
00011e34: R8 := 0
000358d2: goto %00011e36

00011e36:
00011e3b: R2 := pad:64[mem[R1]]
00011e41: when 7:7[R2] goto %00011e3f
000358d3: goto %0001770b

0001770b:
00017711: R0 := pad:64[mem[R3 + (61:0[R2].0), el]:u32]
00017717: #324 := 31:0[R0] + 1
0001771c: VF := extend:64[#324] <> extend:64[31:0[R0]] + 1
00017721: CF := pad:64[#324] <> pad:64[31:0[R0]] + 1
00017725: ZF := #324 = 0
00017729: NF := 31:31[#324]
0001772f: when ZF goto %0001772d
000358d4: goto %000177e5

000177e5:
000177ea: R2 := pad:64[mem[R1 + 1]]
000177ef: when 7:7[R2] goto %00011e3f
000358d5: goto %000177f3

000177f3:
000177f9: R5 := pad:64[mem[R3 + (61:0[R2].0), el]:u32]
000177ff: #327 := 31:0[R5] + 1
00017804: VF := extend:64[#327] <> extend:64[31:0[R5]] + 1
00017809: CF := pad:64[#327] <> pad:64[31:0[R5]] + 1
0001780d: ZF := #327 = 0
00017811: NF := 31:31[#327]
00017816: when ZF goto %00011e3f
000358d6: goto %0001781a

0001781a:
0001781f: R2 := pad:64[mem[R1 + 2]]
00017824: when 7:7[R2] goto %00011e3f
000358d7: goto %00017828

00017828:
0001782c: #328 := 31:0[R2] - 0x3D
00017831: VF := extend:64[#328] <> extend:64[31:0[R2]] - 0x3D
00017836: CF := pad:64[#328] <> pad:64[31:0[R2]] + 0xFFFFFFC3
0001783a: ZF := #328 = 0
0001783e: NF := 31:31[#328]
00017844: when ZF goto %00017842
000358d8: goto %00017940

00017940:
00017944: R4 := pad:64[31:0[R2]]
0001794c: R4 := pad:64[mem[R3 + (61:0[R4].0), el]:u32]
00017952: #333 := 31:0[R4] + 1
00017957: VF := extend:64[#333] <> extend:64[31:0[R4]] + 1
0001795c: CF := pad:64[#333] <> pad:64[31:0[R4]] + 1
00017960: ZF := #333 = 0
00017964: NF := 31:31[#333]
00017969: when ZF goto %00011e3f
000358d9: goto %00017842

00017842:
0001784c: R4 := pad:64[mem[R1 + 3]]
00017851: when 7:7[R4] goto %00011e3f
000358da: goto %00017855

00011e3f:
00011e47: R0 := 0xFFFFFFFF
00011e4c: R1 := 0
00011e51: R2 := 0
00011e56: R3 := 0
00011e5b: R4 := 0
00011e60: R5 := 0
00011e65: R6 := 0
00011e6a: R7 := 0
00011e6f: R8 := 0
00011e74: call R30 with noreturn

00017855:
00017859: #329 := 31:0[R4] - 0x3D
0001785e: VF := extend:64[#329] <> extend:64[31:0[R4]] - 0x3D
00017863: CF := pad:64[#329] <> pad:64[31:0[R4]] + 0xFFFFFFC3
00017867: ZF := #329 = 0
0001786b: NF := 31:31[#329]
00017871: when ZF goto %0001786f
000358db: goto %00017913

00017913:
00017917: R7 := pad:64[31:0[R4]]
0001791f: R7 := pad:64[mem[R3 + (61:0[R7].0), el]:u32]
00017925: #332 := 31:0[R7] + 1
0001792a: VF := extend:64[#332] <> extend:64[31:0[R7]] + 1
0001792f: CF := pad:64[#332] <> pad:64[31:0[R7]] + 1
00017933: ZF := #332 = 0
00017937: NF := 31:31[#332]
0001793c: when ZF goto %00011e76
000358dc: goto %0001786f

00011e76:
00011e7a: R0 := pad:64[31:0[R7]]
00011e7f: R1 := 0
00011e84: R2 := 0
00011e89: R3 := 0
00011e8e: R4 := 0
00011e93: R5 := 0
00011e98: R6 := 0
00011e9d: R7 := 0
00011ea2: R8 := 0
00011ea7: call R30 with noreturn

0001786f:
00017878: R7 := pad:64[extend:32[31:4[R5]]]
0001787e: R1 := R1 + 4
00017885: R0 := pad:64[31:0[R7] | (29:0[R0].0)]
0001788d: mem := mem with [R6] <- 7:0[R0]
00017893: #330 := 31:0[R2] - 0x3D
00017898: VF := extend:64[#330] <> extend:64[31:0[R2]] - 0x3D
0001789d: CF := pad:64[#330] <> pad:64[31:0[R2]] + 0xFFFFFFC3
000178a1: ZF := #330 = 0
000178a5: NF := 31:31[#330]
000178aa: when ZF goto %0001775f
000358dd: goto %000178ae

0001775f:
00017763: R6 := R6 + 1
00017769: R8 := pad:64[31:0[R8] + 1]
0001776e: goto %0001776c

000178ae:
000178b4: R0 := pad:64[mem[R3 + (61:0[R2].0), el]:u32]
000178ba: R2 := pad:64[extend:32[31:2[R0]]]
000178c1: R5 := pad:64[31:0[R2] | (27:0[R5].0)]
000178c9: mem := mem with [R6 + 1] <- 7:0[R5]
000178cf: #331 := 31:0[R4] - 0x3D
000178d4: VF := extend:64[#331] <> extend:64[31:0[R4]] - 0x3D
000178d9: CF := pad:64[#331] <> pad:64[31:0[R4]] + 0xFFFFFFC3
000178dd: ZF := #331 = 0
000178e1: NF := 31:31[#331]
000178e6: when ZF goto %000177b2
000358de: goto %000178ea

000177b2:
000177b6: R0 := pad:64[31:0[R8] + 2]
000177bb: R1 := 0
000177c0: R2 := 0
000177c5: R3 := 0
000177ca: R4 := 0
000177cf: R5 := 0
000177d4: R6 := 0
000177d9: R7 := 0
000177de: R8 := 0
000177e3: call R30 with noreturn

000178ea:
000178ee: R2 := pad:64[31:0[R4]]
000178f4: R8 := pad:64[31:0[R8] + 3]
000178fa: R6 := R6 + 3
00017902: R2 := pad:64[mem[R3 + (61:0[R2].0), el]:u32]
00017909: R0 := pad:64[31:0[R2] | (25:0[R0].0)]
00017911: mem := mem with [R6 - 1] <- 7:0[R0]
000358df: goto %0001776c

0001776c:
00017774: R0 := pad:64[mem[R1]]
0001777a: #325 := 31:0[R4] - 0x3D
0001777f: VF := extend:64[#325] <> extend:64[31:0[R4]] - 0x3D
00017784: CF := pad:64[#325] <> pad:64[31:0[R4]] + 0xFFFFFFC3
00017788: ZF := #325 = 0
0001778c: NF := 31:31[#325]
00017792: #326 := ZF <> 1
00017795: VF := 0
00017799: CF := #326
0001779e: ZF := 31:0[R0] = 0 | ~#326
000177a3: NF := #326 & 31:31[R0]
000177a8: when ZF <> 1 goto %00011e36
000358e0: goto %000177ac

000177ac:
000177b0: R0 := pad:64[31:0[R8]]
000358e1: goto %0001772d

0001772d:
00017735: R1 := 0
0001773a: R2 := 0
0001773f: R3 := 0
00017744: R4 := 0
00017749: R5 := 0
0001774e: R6 := 0
00017753: R7 := 0
00017758: R8 := 0
0001775d: call R30 with noreturn

000358e2: sub gai_strerror(gai_strerror_result)
00035e82: gai_strerror_result :: out u32 = low:32[R0]

00019d8f:
00030927: R16 := 0x42F000
0003092e: R17 := mem[R16 + 0xBB0, el]:u64
00030934: R16 := R16 + 0xBB0
00030939: call R17 with noreturn

000358e3: sub gen_401_page(gen_401_page_result)
00035e83: gen_401_page_result :: out u32 = low:32[R0]

0001d1f2:
0001d1f6: #686 := R31 - 0x30
0001d1fc: mem := mem with [#686, el]:u64 <- R29
0001d202: mem := mem with [#686 + 8, el]:u64 <- R30
0001d206: R31 := #686
0001d20b: VF := 0
0001d20e: CF := 1
0001d212: ZF := R0 = 0
0001d216: NF := 63:63[R0]
0001d21c: R29 := R31
0001d222: #687 := R31 + 0x10
0001d228: mem := mem with [#687, el]:u64 <- R19
0001d22e: mem := mem with [#687 + 8, el]:u64 <- R20
0001d234: R19 := R0
0001d239: R0 := 0x416000
0001d23f: R0 := R0 + 0x280
0001d245: R20 := R1
0001d253: when ZF goto %0001d24b
0001d254: goto %0001d24f

0001d24f:
0001d250: R19 := R19
0001d256: goto %0001d252

0001d24b:
0001d24c: R19 := R0
0001d255: goto %0001d252

0001d252:
0001d25b: R0 := 0x1000
0001d263: mem := mem with [R31 + 0x20, el]:u64 <- R21
0001d269: R21 := pad:64[31:0[R2]]
0001d26e: R30 := 0x40C448
0001d270: call @zmalloc with return %0001d272

0001d272:
0001d276: R7 := pad:64[31:0[R21]]
0001d27c: R6 := R20
0001d282: R5 := R19
0001d287: R3 := 0x1000
0001d28d: R19 := R0
0001d292: R2 := 2
0001d297: R1 := 0xFFF
0001d29c: R4 := 0x416000
0001d2a2: R4 := R4 + 0x380
0001d2a7: R30 := 0x40C470
0001d2a9: call @__snprintf_chk with return %0001d2ab

0001d2ab:
0001d2b0: R21 := mem[R31 + 0x20, el]:u64
0001d2b6: R0 := R19
0001d2bc: #688 := R31 + 0x10
0001d2c1: R19 := mem[#688, el]:u64
0001d2c6: R20 := mem[#688 + 8, el]:u64
0001d2cd: R29 := mem[R31, el]:u64
0001d2d2: R30 := mem[R31 + 8, el]:u64
0001d2d6: R31 := R31 + 0x30
0001d2db: R1 := 0
0001d2e0: R2 := 0
0001d2e5: R3 := 0
0001d2ea: R4 := 0
0001d2ef: R5 := 0
0001d2f4: R6 := 0
0001d2f9: R7 := 0
0001d2fe: R16 := 0
0001d303: R17 := 0
0001d308: call R30 with noreturn

000358e4: sub gen_407_page(gen_407_page_result)
00035e84: gen_407_page_result :: out u32 = low:32[R0]

0001d11e:
0001d122: #685 := R31 - 0x20
0001d128: mem := mem with [#685, el]:u64 <- R29
0001d12e: mem := mem with [#685 + 8, el]:u64 <- R30
0001d132: R31 := #685
0001d137: VF := 0
0001d13a: CF := 1
0001d13e: ZF := R0 = 0
0001d142: NF := 63:63[R0]
0001d147: R1 := 0x416000
0001d14d: R1 := R1 + 0x280
0001d153: R29 := R31
0001d15b: mem := mem with [R31 + 0x10, el]:u64 <- R19
0001d161: R19 := R0
0001d16f: when ZF goto %0001d167
0001d170: goto %0001d16b

0001d16b:
0001d16c: R19 := R19
0001d172: goto %0001d16e

0001d167:
0001d168: R19 := R1
0001d171: goto %0001d16e

0001d16e:
0001d177: R0 := 0x1000
0001d17c: R30 := 0x40C3C8
0001d17e: call @zmalloc with return %0001d180

0001d180:
0001d184: R5 := R19
0001d189: R3 := 0x1000
0001d18f: R19 := R0
0001d194: R2 := 2
0001d199: R1 := 0xFFF
0001d19e: R4 := 0x416000
0001d1a4: R4 := R4 + 0x290
0001d1a9: R30 := 0x40C3E8
0001d1ab: call @__snprintf_chk with return %0001d1ad

0001d1ad:
0001d1b1: R0 := R19
0001d1b8: R19 := mem[R31 + 0x10, el]:u64
0001d1bf: R29 := mem[R31, el]:u64
0001d1c4: R30 := mem[R31 + 8, el]:u64
0001d1c8: R31 := R31 + 0x20
0001d1cd: R1 := 0
0001d1d2: R2 := 0
0001d1d7: R3 := 0
0001d1dc: R4 := 0
0001d1e1: R5 := 0
0001d1e6: R16 := 0
0001d1eb: R17 := 0
0001d1f0: call R30 with noreturn

000358e5: sub gen_502_page(gen_502_page_result)
00035e85: gen_502_page_result :: out u32 = low:32[R0]

0001d3e2:
0001d3e6: #690 := R31 - 0x20
0001d3ec: mem := mem with [#690, el]:u64 <- R29
0001d3f2: mem := mem with [#690 + 8, el]:u64 <- R30
0001d3f6: R31 := #690
0001d3fb: VF := 0
0001d3fe: CF := 1
0001d402: ZF := R0 = 0
0001d406: NF := 63:63[R0]
0001d40c: R29 := R31
0001d412: #691 := R31 + 0x10
0001d418: mem := mem with [#691, el]:u64 <- R19
0001d41e: mem := mem with [#691 + 8, el]:u64 <- R20
0001d424: R19 := R1
0001d42a: R20 := R0
0001d42f: R0 := 0x416000
0001d435: R0 := R0 + 0x280
0001d443: when ZF goto %0001d43b
0001d444: goto %0001d43f

0001d43f:
0001d440: R20 := R20
0001d446: goto %0001d442

0001d43b:
0001d43c: R20 := R0
0001d445: goto %0001d442

0001d442:
0001d44b: R1 := 0x416000
0001d450: VF := 0
0001d453: CF := 1
0001d457: ZF := R19 = 0
0001d45b: NF := 63:63[R19]
0001d461: R1 := R1 + 0x528
0001d46f: when ZF goto %0001d467
0001d470: goto %0001d46b

0001d46b:
0001d46c: R19 := R19
0001d472: goto %0001d46e

0001d467:
0001d468: R19 := R1
0001d471: goto %0001d46e

0001d46e:
0001d477: R0 := 0x1000
0001d47c: R30 := 0x40C560
0001d47e: call @zmalloc with return %0001d480

0001d480:
0001d484: R5 := R20
0001d48a: R7 := R19
0001d490: R6 := R19
0001d495: R3 := 0x1000
0001d49b: R19 := R0
0001d4a0: R2 := 2
0001d4a5: R1 := 0xFFF
0001d4aa: R4 := 0x416000
0001d4b0: R4 := R4 + 0x538
0001d4b5: R30 := 0x40C588
0001d4b7: call @__snprintf_chk with return %0001d4b9

0001d4b9:
0001d4bd: R0 := R19
0001d4c3: #692 := R31 + 0x10
0001d4c8: R19 := mem[#692, el]:u64
0001d4cd: R20 := mem[#692 + 8, el]:u64
0001d4d4: R29 := mem[R31, el]:u64
0001d4d9: R30 := mem[R31 + 8, el]:u64
0001d4dd: R31 := R31 + 0x20
0001d4e2: R1 := 0
0001d4e7: R2 := 0
0001d4ec: R3 := 0
0001d4f1: R4 := 0
0001d4f6: R5 := 0
0001d4fb: R6 := 0
0001d500: R7 := 0
0001d505: R16 := 0
0001d50a: R17 := 0
0001d50f: call R30 with noreturn

000358e6: sub gen_denied_page(gen_denied_page_result)
00035e86: gen_denied_page_result :: out u32 = low:32[R0]

0001d30e:
0001d312: #689 := R31 - 0x20
0001d318: mem := mem with [#689, el]:u64 <- R29
0001d31e: mem := mem with [#689 + 8, el]:u64 <- R30
0001d322: R31 := #689
0001d327: VF := 0
0001d32a: CF := 1
0001d32e: ZF := R0 = 0
0001d332: NF := 63:63[R0]
0001d337: R1 := 0x416000
0001d33d: R1 := R1 + 0x470
0001d343: R29 := R31
0001d34b: mem := mem with [R31 + 0x10, el]:u64 <- R19
0001d351: R19 := R0
0001d35f: when ZF goto %0001d357
0001d360: goto %0001d35b

0001d35b:
0001d35c: R19 := R19
0001d362: goto %0001d35e

0001d357:
0001d358: R19 := R1
0001d361: goto %0001d35e

0001d35e:
0001d367: R0 := 0x1000
0001d36c: R30 := 0x40C4D8
0001d36e: call @zmalloc with return %0001d370

0001d370:
0001d374: R5 := R19
0001d379: R3 := 0x1000
0001d37f: R19 := R0
0001d384: R2 := 2
0001d389: R1 := 0xFFF
0001d38e: R4 := 0x416000
0001d394: R4 := R4 + 0x478
0001d399: R30 := 0x40C4F8
0001d39b: call @__snprintf_chk with return %0001d39d

0001d39d:
0001d3a1: R0 := R19
0001d3a8: R19 := mem[R31 + 0x10, el]:u64
0001d3af: R29 := mem[R31, el]:u64
0001d3b4: R30 := mem[R31 + 8, el]:u64
0001d3b8: R31 := R31 + 0x20
0001d3bd: R1 := 0
0001d3c2: R2 := 0
0001d3c7: R3 := 0
0001d3cc: R4 := 0
0001d3d1: R5 := 0
0001d3d6: R16 := 0
0001d3db: R17 := 0
0001d3e0: call R30 with noreturn

000358e7: sub get_http_header_name(get_http_header_name_result)
00035e87: get_http_header_name_result :: out u32 = low:32[R0]

000205d8:
000205dc: #882 := R31 - 0x20
000205e2: mem := mem with [#882, el]:u64 <- R29
000205e8: mem := mem with [#882 + 8, el]:u64 <- R30
000205ec: R31 := #882
000205f1: R1 := 0x414000
000205f7: R1 := R1 + 0x400
000205fd: R29 := R31
00020603: #883 := R31 + 0x10
00020609: mem := mem with [#883, el]:u64 <- R19
0002060f: mem := mem with [#883 + 8, el]:u64 <- R20
00020615: R19 := R0
0002061a: R30 := 0x40875C
0002061c: call @strcspn with return %0002061e

0002061e:
00020622: R20 := R0
00020628: R0 := R19
0002062d: R30 := 0x408768
0002062f: call @strlen with return %00020631

00020631:
00020635: #884 := ~31:0[R0]
0002063a: #885 := 31:0[R20] + ~31:0[R0]
00020640: VF := extend:64[#885 + 1] <> extend:64[31:0[R20]] + extend:64[#884]
          + 1
00020646: CF := pad:64[#885 + 1] <> pad:64[31:0[R20]] + pad:64[#884] + 1
0002064a: ZF := #885 + 1 = 0
0002064e: NF := 31:31[#885 + 1]
00020654: when ZF goto %00020652
000358e8: goto %00020761

00020652:
0002065b: #886 := R31 + 0x10
00020660: R19 := mem[#886, el]:u64
00020665: R20 := mem[#886 + 8, el]:u64
0002066a: R0 := 0
00020671: R29 := mem[R31, el]:u64
00020676: R30 := mem[R31 + 8, el]:u64
0002067a: R31 := R31 + 0x20
0002067f: R1 := 0
00020684: R2 := 0
00020689: R16 := 0
0002068e: R17 := 0
00020693: call R30 with noreturn

00020761:
00020765: R2 := pad:64[31:0[R20]]
0002076b: R0 := R19
00020771: #891 := R31 + 0x10
00020776: R19 := mem[#891, el]:u64
0002077b: R20 := mem[#891 + 8, el]:u64
00020780: R1 := 0
00020787: R29 := mem[R31, el]:u64
0002078c: R30 := mem[R31 + 8, el]:u64
00020790: R31 := R31 + 0x20
00020794: call @substr with noreturn

000358e9: sub get_http_header_value(get_http_header_value_result)
00035e88: get_http_header_value_result :: out u32 = low:32[R0]

00020699:
0002069d: #887 := R31 - 0x10
000206a3: mem := mem with [#887, el]:u64 <- R29
000206a9: mem := mem with [#887 + 8, el]:u64 <- R30
000206ad: R31 := #887
000206b2: R1 := 0x3A
000206b8: R29 := R31
000206bd: R30 := 0x4087C0
000206bf: call @strchr with return %000206c1

000206c1:
000206c5: when R0 = 0 goto %000206c3
000358ea: goto %000206f1

000206c3:
000206cd: R29 := mem[R31, el]:u64
000206d2: R30 := mem[R31 + 8, el]:u64
000206d6: R31 := R31 + 0x10
000206db: R1 := 0
000206e0: R2 := 0
000206e5: R16 := 0
000206ea: R17 := 0
000206ef: call R30 with noreturn

000206f1:
000206f6: R2 := pad:64[mem[R0 + 1]]
000206fc: R0 := R0 + 1
00020702: #888 := 31:0[R2] - 0x20
00020707: VF := extend:64[#888] <> extend:64[31:0[R2]] - 0x20
0002070c: CF := pad:64[#888] <> pad:64[31:0[R2]] + 0xFFFFFFE0
00020710: ZF := #888 = 0
00020714: NF := 31:31[#888]
0002071a: when ZF <> 1 goto %00020718
000358eb: goto %00020731

00020731:
000358ec: goto %00020733

00020733:
00020737: #889 := R0 + 1
0002073c: R1 := pad:64[mem[#889]]
00020740: R0 := #889
00020746: #890 := 31:0[R1] - 0x20
0002074b: VF := extend:64[#890] <> extend:64[31:0[R1]] - 0x20
00020750: CF := pad:64[#890] <> pad:64[31:0[R1]] + 0xFFFFFFE0
00020754: ZF := #890 = 0
00020758: NF := 31:31[#890]
0002075d: when ZF goto %00020733
000358ed: goto %00020718

00020718:
00020722: R29 := mem[R31, el]:u64
00020727: R30 := mem[R31 + 8, el]:u64
0002072b: R31 := R31 + 0x10
0002072f: call @strdup with noreturn

000358ee: sub getaddrinfo(getaddrinfo_result)
00035e89: getaddrinfo_result :: out u32 = low:32[R0]

00019d60:
0003101d: R16 := 0x42F000
00031024: R17 := mem[R16 + 0xE38, el]:u64
0003102a: R16 := R16 + 0xE38
0003102f: call R17 with noreturn

000358ef: sub geteuid(geteuid_result)
00035e8a: geteuid_result :: out u32 = low:32[R0]

0002c38f:
00030a19: R16 := 0x42F000
00030a20: R17 := mem[R16 + 0xC08, el]:u64
00030a26: R16 := R16 + 0xC08
00030a2b: call R17 with noreturn

000358f0: sub getgid(getgid_result)
00035e8b: getgid_result :: out u32 = low:32[R0]

0003010d:
00030eff: R16 := 0x42F000
00030f06: R17 := mem[R16 + 0xDD0, el]:u64
00030f0c: R16 := R16 + 0xDD0
00030f11: call R17 with noreturn

000358f1: sub gethostname(gethostname_buf, gethostname_len, gethostname_result)
00035e8c: gethostname_buf :: in out u64 = R0
00035e8d: gethostname_len :: in u64 = R1
00035e8e: gethostname_result :: out u32 = low:32[R0]

0002f5cf:
0003105f: R16 := 0x42F000
00031066: R17 := mem[R16 + 0xE50, el]:u64
0003106c: R16 := R16 + 0xE50
00031071: call R17 with noreturn

000358f2: sub getpid(getpid_result)
00035e8f: getpid_result :: out u32 = low:32[R0]

0002ff8f:
00030b21: R16 := 0x42F000
00030b28: R17 := mem[R16 + 0xC68, el]:u64
00030b2e: R16 := R16 + 0xC68
00030b33: call R17 with noreturn

000358f3: sub getpwnam(getpwnam_result)
00035e90: getpwnam_result :: out u32 = low:32[R0]

0002c3d0:
00030c13: R16 := 0x42F000
00030c1a: R17 := mem[R16 + 0xCC0, el]:u64
00030c20: R16 := R16 + 0xCC0
00030c25: call R17 with noreturn

000358f4: sub getrandom64(getrandom64_result)
00035e91: getrandom64_result :: out u32 = low:32[R0]

00011ea9:
00011ead: R31 := R31 - 0x30
00011eb2: R1 := 0x417000
00011eb7: R2 := 0x42F000
00011ebe: R2 := mem[R2 + 0xFB8, el]:u64
00011ec3: R0 := 0x417000
00011ec9: #72 := R31 + 0x10
00011ecf: mem := mem with [#72, el]:u64 <- R29
00011ed5: mem := mem with [#72 + 8, el]:u64 <- R30
00011edb: R29 := R31 + 0x10
00011ee1: R1 := R1 + 0xE8
00011ee7: R0 := R0 + 0xF0
00011eef: mem := mem with [R31 + 0x20, el]:u64 <- R19
00011ef6: R3 := mem[R2, el]:u64
00011efe: mem := mem with [R31 + 8, el]:u64 <- R3
00011f03: R3 := 0
00011f0a: mem := mem with [R31, el]:u64 <- 0
00011f0f: R30 := 0x41079C
00011f12: call @fopen with return %00011f14

00011f14:
00011f18: when R0 = 0 goto %00011f16
000358f5: goto %000176ae

00011f16:
00011f1e: R0 := 0x42F000
00011f25: R0 := mem[R0 + 0xF30, el]:u64
00011f2c: R0 := pad:64[mem[R0, el]:u32]
00011f32: when 31:0[R0] = 0 goto %00011f30
000358f6: goto %00017693

00017693:
00017696: R1 := 0x417000
0001769b: R0 := 2
000176a1: R1 := R1 + 0x128
000176a6: R30 := 0x41087C
000176a8: call @__printf_chk with return %000176aa

000176aa:
000176ac: goto %00011f30

000176ae:
000176b2: R19 := R0
000176b8: R3 := R0
000176bd: R2 := 1
000176c3: R0 := R31
000176c8: R1 := 8
000176cd: R30 := 0x4107B8
000176d0: call @fread with return %000176d2

000176d2:
000176d6: #323 := R0 - 1
000176db: VF := extend:128[#323] <> extend:128[R0] - 1
000176e0: CF := pad:128[#323] <> pad:128[R0] + 0xFFFFFFFFFFFFFFFF
000176e4: ZF := #323 = 0
000176e8: NF := 63:63[#323]
000176ed: when ZF goto %0001767b
000358f7: goto %000176f1

0001767b:
0001767f: R0 := R19
00017684: R30 := 0x410854
00017686: call @fclose with return %00017688

00017688:
0001768d: R0 := mem[R31, el]:u64
00017691: goto %00011f51

000176f1:
000176f4: R0 := 0x42F000
000176fb: R0 := mem[R0 + 0xF30, el]:u64
00017702: R0 := pad:64[mem[R0, el]:u32]
00017707: when 31:0[R0] <> 0 goto %00017637
000358f8: goto %0001766a

00017637:
0001763a: R30 := 0x41082C
0001763c: call @__errno_location with return %0001763e

0001763e:
00017643: R0 := pad:64[mem[R0, el]:u32]
00017648: R30 := 0x410834
0001764a: call @strerror with return %0001764c

0001764c:
00017650: R2 := R0
00017655: R1 := 0x417000
0001765a: R0 := 2
00017660: R1 := R1 + 0x100
00017665: R30 := 0x410848
00017667: call @__printf_chk with return %00017669

00017669:
0001766c: goto %0001766a

0001766a:
00017671: R0 := R19
00017676: R30 := 0x4107D8
00017679: call @fclose with return %00011f30

00011f30:
00011f38: R30 := 0x4107DC
00011f3b: call @random with return %00011f3d

00011f3d:
00011f41: R19 := R0
00011f46: R30 := 0x4107E4
00011f48: call @random with return %00011f4a

00011f4a:
00011f4f: R0 := R0 | (31:0[R19].0)
000358f9: goto %00011f51

00011f51:
00011f54: R1 := 0x42F000
00011f5b: R1 := mem[R1 + 0xFB8, el]:u64
00011f62: R3 := mem[R31 + 8, el]:u64
00011f69: R2 := mem[R1, el]:u64
00011f6f: #73 := ~R2
00011f74: #74 := R3 + ~R2
00011f7a: VF := extend:128[#74 + 1] <> extend:128[R3] + extend:128[#73] + 1
00011f80: CF := pad:128[#74 + 1] <> pad:128[R3] + pad:128[#73] + 1
00011f84: ZF := #74 + 1 = 0
00011f88: NF := 63:63[#74 + 1]
00011f8c: R3 := #74 + 1
00011f91: R2 := 0
00011f97: when ZF <> 1 goto %00011f95
000358fa: goto %000175fc

00011f95:
00011f9d: R30 := 0x410884
00011fa0: call @__stack_chk_fail with return %000358fb

000358fb:
000358fc: call @write_wrapper with noreturn

000175fc:
00017600: #322 := R31 + 0x10
00017605: R29 := mem[#322, el]:u64
0001760a: R30 := mem[#322 + 8, el]:u64
00017611: R19 := mem[R31 + 0x20, el]:u64
00017617: R31 := R31 + 0x30
0001761c: R1 := 0
00017621: R2 := 0
00017626: R3 := 0
0001762b: R16 := 0
00017630: R17 := 0
00017635: call R30 with noreturn

000358fd: sub getuid(getuid_result)
00035e92: getuid_result :: out u32 = low:32[R0]

0002c380:
00030a45: R16 := 0x42F000
00030a4c: R17 := mem[R16 + 0xC18, el]:u64
00030a52: R16 := R16 + 0xC18
00030a57: call R17 with noreturn

000358fe: sub gl_des_ecb_crypt(gl_des_ecb_crypt_result)
00035e93: gl_des_ecb_crypt_result :: out u32 = low:32[R0]

00012997:
0001299b: #102 := R31 - 0x40
000129a1: mem := mem with [#102, el]:u64 <- R29
000129a7: mem := mem with [#102 + 8, el]:u64 <- R30
000129ab: R31 := #102
000129b1: R29 := R31
000129b7: #103 := R31 + 0x10
000129bd: mem := mem with [#103, el]:u64 <- R19
000129c3: mem := mem with [#103 + 8, el]:u64 <- R20
000129c9: #104 := R31 + 0x20
000129cf: mem := mem with [#104, el]:u64 <- R21
000129d5: mem := mem with [#104 + 8, el]:u64 <- R22
000129dd: mem := mem with [R31 + 0x30, el]:u64 <- R23
000129e3: when 31:0[R3] = 0 goto %000129e1
000358ff: goto %00017439

000129e1:
000129eb: R17 := pad:64[mem[R0, el]:u32]
000129f0: goto %000129ee

00017439:
0001743e: R17 := pad:64[mem[R0 + 0x80, el]:u32]
00017444: R0 := R0 + 0x80
00035900: goto %000129ee

000129ee:
000129f6: R5 := pad:64[mem[R1, el]:u32]
000129fb: R4 := pad:64[mem[R1 + 4, el]:u32]
00012a00: R3 := 0x417000
00012a06: R1 := R3 + 0x8F0
00012a0d: R13 := pad:64[mem[R0 + 0x14, el]:u32]
00012a16: R3 := pad:64[7:0[R5].15:8[R5].23:16[R5].31:24[R5]]
00012a1f: R4 := pad:64[7:0[R4].15:8[R4].23:16[R4].31:24[R4]]
00012a25: #105 := R0 + 4
00012a2a: R18 := pad:64[mem[#105, el]:u32]
00012a2f: R16 := pad:64[mem[#105 + 4, el]:u32]
00012a36: R12 := pad:64[31:0[R4] ^ pad:32[31:4[R3]]]
00012a3c: R12 := pad:64[31:0[R12] & 0xF0F0F0F]
00012a42: R10 := R1 + 0x290
00012a49: R4 := pad:64[31:0[R12] ^ 31:0[R4]]
00012a4f: R9 := R1 + 0x390
00012a56: R12 := pad:64[31:0[R3] ^ (27:0[R12].0)]
00012a5c: R11 := R1 + 0x490
00012a62: R7 := R1 + 0x690
00012a68: R8 := R1 + 0x590
00012a6f: R3 := pad:64[31:0[R4] ^ pad:32[31:16[R12]]]
00012a75: R5 := R1 + 0x890
00012a7b: R3 := pad:64[15:0[R3]]
00012a81: R6 := R1 + 0x790
00012a88: R4 := pad:64[31:0[R4] ^ 31:0[R3]]
00012a8e: R1 := R1 + 0x990
00012a95: R3 := pad:64[31:0[R12] ^ (15:0[R3].0)]
00012a9c: R30 := pad:64[31:0[R3] ^ pad:32[31:2[R4]]]
00012aa2: R30 := pad:64[31:0[R30] & 0x33333333]
00012aa9: R3 := pad:64[31:0[R3] ^ 31:0[R30]]
00012ab0: R30 := pad:64[31:0[R4] ^ (29:0[R30].0)]
00012ab6: #106 := R0 + 0xC
00012abb: R15 := pad:64[mem[#106, el]:u32]
00012ac0: R14 := pad:64[mem[#106 + 4, el]:u32]
00012ac7: R4 := pad:64[31:0[R3] ^ pad:32[31:8[R30]]]
00012acd: R4 := pad:64[31:0[R4] & 0xFF00FF]
00012ad4: R3 := pad:64[31:0[R3] ^ 31:0[R4]]
00012adb: R4 := pad:64[31:0[R30] ^ (23:0[R4].0)]
00012ae2: R4 := pad:64[30:0[R4].31:31[R4]]
00012ae9: R30 := pad:64[31:0[R3] ^ 31:0[R4]]
00012aef: R30 := pad:64[31:0[R30] & 0xAAAAAAAA]
00012af6: R4 := pad:64[31:0[R4] ^ 31:0[R30]]
00012afd: R19 := pad:64[31:0[R3] ^ 31:0[R30]]
00012b04: R17 := pad:64[31:0[R17] ^ 31:0[R4]]
00012b0a: R22 := pad:64[5:0[R17]]
00012b12: R18 := pad:64[31:0[R18] ^ (3:0[R4].31:4[R4])]
00012b18: R3 := pad:64[13:8[R17]]
00012b1e: R20 := pad:64[21:16[R17]]
00012b24: R21 := pad:64[5:0[R18]]
00012b2a: R17 := pad:64[29:24[R17]]
00012b32: R23 := pad:64[mem[R11 + (61:0[R22].0), el]:u32]
00012b38: R22 := pad:64[13:8[R18]]
00012b40: R20 := pad:64[mem[R9 + (61:0[R20].0), el]:u32]
00012b48: R3 := pad:64[mem[R10 + (61:0[R3].0), el]:u32]
00012b50: R30 := pad:64[mem[R8 + (61:0[R17].0), el]:u32]
00012b58: R19 := pad:64[31:0[R23] ^ (30:0[R19].31:31[R19])]
00012b5f: R3 := pad:64[31:0[R3] ^ 31:0[R20]]
00012b65: R20 := pad:64[21:16[R18]]
00012b6d: R21 := pad:64[mem[R7 + (61:0[R21].0), el]:u32]
00012b73: R18 := pad:64[29:24[R18]]
00012b7b: R17 := pad:64[mem[R6 + (61:0[R22].0), el]:u32]
00012b82: R3 := pad:64[31:0[R3] ^ 31:0[R19]]
00012b8a: R19 := pad:64[mem[R5 + (61:0[R20].0), el]:u32]
00012b91: R30 := pad:64[31:0[R30] ^ 31:0[R21]]
00012b99: R18 := pad:64[mem[R1 + (61:0[R18].0), el]:u32]
00012ba0: R3 := pad:64[31:0[R3] ^ 31:0[R30]]
00012ba7: R17 := pad:64[31:0[R17] ^ 31:0[R19]]
00012bae: R3 := pad:64[31:0[R3] ^ 31:0[R17]]
00012bb5: R17 := pad:64[31:0[R3] ^ 31:0[R18]]
00012bbc: R16 := pad:64[31:0[R17] ^ 31:0[R16]]
00012bc2: R19 := pad:64[5:0[R16]]
00012bca: R15 := pad:64[31:0[R15] ^ (3:0[R17].31:4[R17])]
00012bd0: R18 := pad:64[21:16[R16]]
00012bd6: R3 := pad:64[13:8[R16]]
00012bdc: R20 := pad:64[5:0[R15]]
00012be2: R16 := pad:64[29:24[R16]]
00012bea: R30 := pad:64[mem[R11 + (61:0[R19].0), el]:u32]
00012bf0: R21 := pad:64[13:8[R15]]
00012bf6: R19 := pad:64[21:16[R15]]
00012bfe: R22 := pad:64[mem[R9 + (61:0[R18].0), el]:u32]
00012c06: R3 := pad:64[mem[R10 + (61:0[R3].0), el]:u32]
00012c0c: R15 := pad:64[29:24[R15]]
00012c14: R18 := pad:64[mem[R8 + (61:0[R16].0), el]:u32]
00012c1b: R4 := pad:64[31:0[R4] ^ 31:0[R30]]
00012c23: R20 := pad:64[mem[R7 + (61:0[R20].0), el]:u32]
00012c2a: R3 := pad:64[31:0[R3] ^ 31:0[R22]]
00012c32: R16 := pad:64[mem[R6 + (61:0[R21].0), el]:u32]
00012c39: R3 := pad:64[31:0[R3] ^ 31:0[R4]]
00012c41: R19 := pad:64[mem[R5 + (61:0[R19].0), el]:u32]
00012c48: R4 := pad:64[31:0[R18] ^ 31:0[R20]]
00012c50: R15 := pad:64[mem[R1 + (61:0[R15].0), el]:u32]
00012c57: R3 := pad:64[31:0[R3] ^ 31:0[R4]]
00012c5e: R4 := pad:64[31:0[R16] ^ 31:0[R19]]
00012c65: R3 := pad:64[31:0[R3] ^ 31:0[R4]]
00012c6c: R16 := pad:64[31:0[R3] ^ 31:0[R15]]
00012c73: R14 := pad:64[31:0[R16] ^ 31:0[R14]]
00012c7b: R13 := pad:64[31:0[R13] ^ (3:0[R16].31:4[R16])]
00012c81: R20 := pad:64[5:0[R14]]
00012c87: R3 := pad:64[13:8[R14]]
00012c8d: R19 := pad:64[21:16[R14]]
00012c93: R18 := pad:64[5:0[R13]]
00012c99: R14 := pad:64[29:24[R14]]
00012c9f: R4 := pad:64[13:8[R13]]
00012ca5: R15 := pad:64[21:16[R13]]
00012cad: R20 := pad:64[mem[R11 + (61:0[R20].0), el]:u32]
00012cb3: R13 := pad:64[29:24[R13]]
00012cbb: R19 := pad:64[mem[R9 + (61:0[R19].0), el]:u32]
00012cc3: R3 := pad:64[mem[R10 + (61:0[R3].0), el]:u32]
00012cca: R17 := pad:64[31:0[R17] ^ 31:0[R20]]
00012cd2: R18 := pad:64[mem[R7 + (61:0[R18].0), el]:u32]
00012cda: R14 := pad:64[mem[R8 + (61:0[R14].0), el]:u32]
00012ce1: R3 := pad:64[31:0[R3] ^ 31:0[R19]]
00012ce9: R15 := pad:64[mem[R5 + (61:0[R15].0), el]:u32]
00012cf0: R3 := pad:64[31:0[R3] ^ 31:0[R17]]
00012cf8: R4 := pad:64[mem[R6 + (61:0[R4].0), el]:u32]
00012cff: R14 := pad:64[31:0[R14] ^ 31:0[R18]]
00012d07: R17 := pad:64[mem[R1 + (61:0[R13].0), el]:u32]
00012d0e: R3 := pad:64[31:0[R3] ^ 31:0[R14]]
00012d15: R13 := pad:64[31:0[R4] ^ 31:0[R15]]
00012d1b: #107 := R0 + 0x18
00012d20: R12 := pad:64[mem[#107, el]:u32]
00012d25: R4 := pad:64[mem[#107 + 4, el]:u32]
00012d2c: R3 := pad:64[31:0[R3] ^ 31:0[R13]]
00012d33: R17 := pad:64[31:0[R3] ^ 31:0[R17]]
00012d3a: R14 := pad:64[mem[R0 + 0x28, el]:u32]
00012d41: R12 := pad:64[31:0[R17] ^ 31:0[R12]]
00012d47: R19 := pad:64[5:0[R12]]
00012d4f: R4 := pad:64[31:0[R4] ^ (3:0[R17].31:4[R17])]
00012d55: R13 := pad:64[21:16[R12]]
00012d5b: R3 := pad:64[13:8[R12]]
00012d61: R20 := pad:64[5:0[R4]]
00012d67: R12 := pad:64[29:24[R12]]
00012d6f: R30 := pad:64[mem[R11 + (61:0[R19].0), el]:u32]
00012d75: R21 := pad:64[13:8[R4]]
00012d7b: R19 := pad:64[21:16[R4]]
00012d83: R22 := pad:64[mem[R9 + (61:0[R13].0), el]:u32]
00012d8b: R3 := pad:64[mem[R10 + (61:0[R3].0), el]:u32]
00012d91: R13 := pad:64[29:24[R4]]
00012d99: R20 := pad:64[mem[R7 + (61:0[R20].0), el]:u32]
00012da0: R16 := pad:64[31:0[R16] ^ 31:0[R30]]
00012da8: R12 := pad:64[mem[R8 + (61:0[R12].0), el]:u32]
00012daf: R3 := pad:64[31:0[R3] ^ 31:0[R22]]
00012db7: R4 := pad:64[mem[R6 + (61:0[R21].0), el]:u32]
00012dbe: R3 := pad:64[31:0[R3] ^ 31:0[R16]]
00012dc6: R19 := pad:64[mem[R5 + (61:0[R19].0), el]:u32]
00012dcd: R12 := pad:64[31:0[R12] ^ 31:0[R20]]
00012dd3: #108 := R0 + 0x20
00012dd8: R15 := pad:64[mem[#108, el]:u32]
00012ddd: R18 := pad:64[mem[#108 + 4, el]:u32]
00012de4: R4 := pad:64[31:0[R4] ^ 31:0[R19]]
00012dec: R16 := pad:64[mem[R1 + (61:0[R13].0), el]:u32]
00012df3: R3 := pad:64[31:0[R3] ^ 31:0[R12]]
00012dfa: R3 := pad:64[31:0[R3] ^ 31:0[R4]]
00012e01: R4 := pad:64[mem[R0 + 0x34, el]:u32]
00012e08: R16 := pad:64[31:0[R3] ^ 31:0[R16]]
00012e0f: R15 := pad:64[31:0[R16] ^ 31:0[R15]]
00012e15: R20 := pad:64[5:0[R15]]
00012e1d: R18 := pad:64[31:0[R18] ^ (3:0[R16].31:4[R16])]
00012e23: R3 := pad:64[13:8[R15]]
00012e29: R21 := pad:64[21:16[R15]]
00012e2f: R19 := pad:64[5:0[R18]]
00012e35: R15 := pad:64[29:24[R15]]
00012e3d: R20 := pad:64[mem[R11 + (61:0[R20].0), el]:u32]
00012e43: R22 := pad:64[13:8[R18]]
00012e4b: R21 := pad:64[mem[R9 + (61:0[R21].0), el]:u32]
00012e52: R17 := pad:64[31:0[R17] ^ 31:0[R20]]
00012e58: R20 := pad:64[21:16[R18]]
00012e60: R3 := pad:64[mem[R10 + (61:0[R3].0), el]:u32]
00012e68: R30 := pad:64[mem[R8 + (61:0[R15].0), el]:u32]
00012e6e: R15 := pad:64[29:24[R18]]
00012e76: R19 := pad:64[mem[R7 + (61:0[R19].0), el]:u32]
00012e7d: R3 := pad:64[31:0[R3] ^ 31:0[R21]]
00012e85: R18 := pad:64[mem[R6 + (61:0[R22].0), el]:u32]
00012e8c: R3 := pad:64[31:0[R3] ^ 31:0[R17]]
00012e94: R20 := pad:64[mem[R5 + (61:0[R20].0), el]:u32]
00012e9b: R17 := pad:64[31:0[R30] ^ 31:0[R19]]
00012ea2: R3 := pad:64[31:0[R3] ^ 31:0[R17]]
00012eaa: R19 := pad:64[mem[R1 + (61:0[R15].0), el]:u32]
00012eb1: R15 := pad:64[31:0[R18] ^ 31:0[R20]]
00012eb7: #109 := R0 + 0x2C
00012ebc: R13 := pad:64[mem[#109, el]:u32]
00012ec1: R12 := pad:64[mem[#109 + 4, el]:u32]
00012ec8: R3 := pad:64[31:0[R3] ^ 31:0[R15]]
00012ecf: R15 := pad:64[31:0[R3] ^ 31:0[R19]]
00012ed6: R14 := pad:64[31:0[R15] ^ 31:0[R14]]
00012edc: R18 := pad:64[5:0[R14]]
00012ee4: R13 := pad:64[31:0[R13] ^ (3:0[R15].31:4[R15])]
00012eea: R17 := pad:64[21:16[R14]]
00012ef0: R3 := pad:64[13:8[R14]]
00012ef6: R19 := pad:64[5:0[R13]]
00012efc: R14 := pad:64[29:24[R14]]
00012f04: R30 := pad:64[mem[R11 + (61:0[R18].0), el]:u32]
00012f0a: R20 := pad:64[13:8[R13]]
00012f10: R18 := pad:64[21:16[R13]]
00012f18: R21 := pad:64[mem[R9 + (61:0[R17].0), el]:u32]
00012f20: R3 := pad:64[mem[R10 + (61:0[R3].0), el]:u32]
00012f26: R13 := pad:64[29:24[R13]]
00012f2e: R17 := pad:64[mem[R8 + (61:0[R14].0), el]:u32]
00012f35: R16 := pad:64[31:0[R16] ^ 31:0[R30]]
00012f3d: R19 := pad:64[mem[R7 + (61:0[R19].0), el]:u32]
00012f44: R3 := pad:64[31:0[R3] ^ 31:0[R21]]
00012f4c: R14 := pad:64[mem[R6 + (61:0[R20].0), el]:u32]
00012f53: R3 := pad:64[31:0[R3] ^ 31:0[R16]]
00012f5b: R18 := pad:64[mem[R5 + (61:0[R18].0), el]:u32]
00012f62: R16 := pad:64[31:0[R17] ^ 31:0[R19]]
00012f69: R3 := pad:64[31:0[R3] ^ 31:0[R16]]
00012f71: R17 := pad:64[mem[R1 + (61:0[R13].0), el]:u32]
00012f78: R13 := pad:64[31:0[R14] ^ 31:0[R18]]
00012f7f: R3 := pad:64[31:0[R3] ^ 31:0[R13]]
00012f86: R3 := pad:64[31:0[R3] ^ 31:0[R17]]
00012f8d: R12 := pad:64[31:0[R3] ^ 31:0[R12]]
00012f93: R14 := pad:64[5:0[R12]]
00012f9b: R4 := pad:64[31:0[R4] ^ (3:0[R3].31:4[R3])]
00012fa1: R19 := pad:64[21:16[R12]]
00012fa7: R20 := pad:64[13:8[R12]]
00012fad: R13 := pad:64[29:24[R12]]
00012fb3: R16 := pad:64[5:0[R4]]
00012fb9: R18 := pad:64[13:8[R4]]
00012fbf: R17 := pad:64[21:16[R4]]
00012fc7: R12 := pad:64[mem[R10 + (61:0[R20].0), el]:u32]
00012fcd: R4 := pad:64[29:24[R4]]
00012fd5: R20 := pad:64[mem[R9 + (61:0[R19].0), el]:u32]
00012fdd: R19 := pad:64[mem[R11 + (61:0[R14].0), el]:u32]
00012fe5: R16 := pad:64[mem[R7 + (61:0[R16].0), el]:u32]
00012fec: R12 := pad:64[31:0[R12] ^ 31:0[R20]]
00012ff4: R14 := pad:64[mem[R8 + (61:0[R13].0), el]:u32]
00012ffb: R15 := pad:64[31:0[R15] ^ 31:0[R19]]
00013003: R13 := pad:64[mem[R6 + (61:0[R18].0), el]:u32]
0001300a: R12 := pad:64[31:0[R12] ^ 31:0[R15]]
00013012: R15 := pad:64[mem[R5 + (61:0[R17].0), el]:u32]
00013019: R14 := pad:64[31:0[R14] ^ 31:0[R16]]
00013020: R12 := pad:64[31:0[R12] ^ 31:0[R14]]
00013028: R16 := pad:64[mem[R1 + (61:0[R4].0), el]:u32]
0001302f: R13 := pad:64[31:0[R13] ^ 31:0[R15]]
00013035: #110 := R0 + 0x38
0001303a: R4 := pad:64[mem[#110, el]:u32]
0001303f: R15 := pad:64[mem[#110 + 4, el]:u32]
00013046: R12 := pad:64[31:0[R12] ^ 31:0[R13]]
0001304d: R12 := pad:64[31:0[R12] ^ 31:0[R16]]
00013054: R4 := pad:64[31:0[R12] ^ 31:0[R4]]
0001305c: R15 := pad:64[31:0[R15] ^ (3:0[R12].31:4[R12])]
00013062: R21 := pad:64[5:0[R4]]
00013068: R18 := pad:64[13:8[R4]]
0001306e: R17 := pad:64[21:16[R4]]
00013074: R16 := pad:64[29:24[R4]]
0001307a: R19 := pad:64[5:0[R15]]
00013080: R20 := pad:64[13:8[R15]]
00013088: R30 := pad:64[mem[R11 + (61:0[R21].0), el]:u32]
00013090: R4 := pad:64[mem[R10 + (61:0[R18].0), el]:u32]
00013096: R18 := pad:64[21:16[R15]]
0001309e: R21 := pad:64[mem[R9 + (61:0[R17].0), el]:u32]
000130a4: R15 := pad:64[29:24[R15]]
000130ac: R17 := pad:64[mem[R8 + (61:0[R16].0), el]:u32]
000130b3: R16 := pad:64[31:0[R3] ^ 31:0[R30]]
000130bb: R19 := pad:64[mem[R7 + (61:0[R19].0), el]:u32]
000130c2: R3 := pad:64[31:0[R4] ^ 31:0[R21]]
000130ca: R18 := pad:64[mem[R5 + (61:0[R18].0), el]:u32]
000130d1: R3 := pad:64[31:0[R3] ^ 31:0[R16]]
000130d9: R4 := pad:64[mem[R6 + (61:0[R20].0), el]:u32]
000130e0: R16 := pad:64[31:0[R17] ^ 31:0[R19]]
000130e6: #111 := R0 + 0x40
000130eb: R13 := pad:64[mem[#111, el]:u32]
000130f0: R14 := pad:64[mem[#111 + 4, el]:u32]
000130f7: R4 := pad:64[31:0[R4] ^ 31:0[R18]]
000130ff: R15 := pad:64[mem[R1 + (61:0[R15].0), el]:u32]
00013106: R3 := pad:64[31:0[R3] ^ 31:0[R16]]
0001310d: R3 := pad:64[31:0[R3] ^ 31:0[R4]]
00013114: R3 := pad:64[31:0[R3] ^ 31:0[R15]]
0001311b: R13 := pad:64[31:0[R3] ^ 31:0[R13]]
00013123: R14 := pad:64[31:0[R14] ^ (3:0[R3].31:4[R3])]
00013129: R21 := pad:64[5:0[R13]]
0001312f: R18 := pad:64[13:8[R13]]
00013135: R17 := pad:64[21:16[R13]]
0001313b: R15 := pad:64[29:24[R13]]
00013141: R19 := pad:64[5:0[R14]]
00013147: R20 := pad:64[13:8[R14]]
0001314f: R30 := pad:64[mem[R11 + (61:0[R21].0), el]:u32]
00013157: R13 := pad:64[mem[R10 + (61:0[R18].0), el]:u32]
0001315d: R18 := pad:64[21:16[R14]]
00013165: R21 := pad:64[mem[R9 + (61:0[R17].0), el]:u32]
0001316b: R14 := pad:64[29:24[R14]]
00013173: R17 := pad:64[mem[R8 + (61:0[R15].0), el]:u32]
0001317a: R12 := pad:64[31:0[R12] ^ 31:0[R30]]
00013182: R19 := pad:64[mem[R7 + (61:0[R19].0), el]:u32]
00013189: R13 := pad:64[31:0[R13] ^ 31:0[R21]]
00013191: R15 := pad:64[mem[R6 + (61:0[R20].0), el]:u32]
00013198: R13 := pad:64[31:0[R13] ^ 31:0[R12]]
000131a0: R18 := pad:64[mem[R5 + (61:0[R18].0), el]:u32]
000131a7: R12 := pad:64[31:0[R17] ^ 31:0[R19]]
000131ad: #112 := R0 + 0x48
000131b2: R16 := pad:64[mem[#112, el]:u32]
000131b7: R4 := pad:64[mem[#112 + 4, el]:u32]
000131be: R13 := pad:64[31:0[R13] ^ 31:0[R12]]
000131c6: R14 := pad:64[mem[R1 + (61:0[R14].0), el]:u32]
000131cd: R12 := pad:64[31:0[R15] ^ 31:0[R18]]
000131d4: R13 := pad:64[31:0[R13] ^ 31:0[R12]]
000131db: R13 := pad:64[31:0[R13] ^ 31:0[R14]]
000131e2: R12 := pad:64[31:0[R13] ^ 31:0[R16]]
000131e8: R15 := pad:64[5:0[R12]]
000131f0: R4 := pad:64[31:0[R4] ^ (3:0[R13].31:4[R13])]
000131f6: R20 := pad:64[13:8[R12]]
000131fc: R19 := pad:64[21:16[R12]]
00013202: R14 := pad:64[29:24[R12]]
00013208: R16 := pad:64[5:0[R4]]
00013210: R15 := pad:64[mem[R11 + (61:0[R15].0), el]:u32]
00013216: R18 := pad:64[13:8[R4]]
0001321c: R17 := pad:64[21:16[R4]]
00013224: R12 := pad:64[mem[R10 + (61:0[R20].0), el]:u32]
0001322c: R19 := pad:64[mem[R9 + (61:0[R19].0), el]:u32]
00013233: R3 := pad:64[31:0[R3] ^ 31:0[R15]]
00013239: R4 := pad:64[29:24[R4]]
00013241: R15 := pad:64[mem[R8 + (61:0[R14].0), el]:u32]
00013249: R16 := pad:64[mem[R7 + (61:0[R16].0), el]:u32]
00013250: R12 := pad:64[31:0[R12] ^ 31:0[R19]]
00013258: R14 := pad:64[mem[R6 + (61:0[R18].0), el]:u32]
0001325f: R12 := pad:64[31:0[R12] ^ 31:0[R3]]
00013267: R17 := pad:64[mem[R5 + (61:0[R17].0), el]:u32]
0001326e: R3 := pad:64[31:0[R15] ^ 31:0[R16]]
00013275: R12 := pad:64[31:0[R12] ^ 31:0[R3]]
0001327d: R16 := pad:64[mem[R1 + (61:0[R4].0), el]:u32]
00013284: R3 := pad:64[31:0[R14] ^ 31:0[R17]]
0001328a: #113 := R0 + 0x50
0001328f: R4 := pad:64[mem[#113, el]:u32]
00013294: R15 := pad:64[mem[#113 + 4, el]:u32]
0001329b: R12 := pad:64[31:0[R12] ^ 31:0[R3]]
000132a2: R12 := pad:64[31:0[R12] ^ 31:0[R16]]
000132a9: R4 := pad:64[31:0[R12] ^ 31:0[R4]]
000132b1: R15 := pad:64[31:0[R15] ^ (3:0[R12].31:4[R12])]
000132b7: R21 := pad:64[5:0[R4]]
000132bd: R18 := pad:64[13:8[R4]]
000132c3: R17 := pad:64[21:16[R4]]
000132c9: R16 := pad:64[29:24[R4]]
000132cf: R19 := pad:64[5:0[R15]]
000132d5: R20 := pad:64[13:8[R15]]
000132dd: R30 := pad:64[mem[R11 + (61:0[R21].0), el]:u32]
000132e5: R4 := pad:64[mem[R10 + (61:0[R18].0), el]:u32]
000132eb: R18 := pad:64[21:16[R15]]
000132f3: R21 := pad:64[mem[R9 + (61:0[R17].0), el]:u32]
000132f9: R15 := pad:64[29:24[R15]]
00013301: R17 := pad:64[mem[R8 + (61:0[R16].0), el]:u32]
00013308: R13 := pad:64[31:0[R13] ^ 31:0[R30]]
00013310: R19 := pad:64[mem[R7 + (61:0[R19].0), el]:u32]
00013317: R4 := pad:64[31:0[R4] ^ 31:0[R21]]
0001331f: R16 := pad:64[mem[R6 + (61:0[R20].0), el]:u32]
00013326: R4 := pad:64[31:0[R4] ^ 31:0[R13]]
0001332e: R18 := pad:64[mem[R5 + (61:0[R18].0), el]:u32]
00013335: R13 := pad:64[31:0[R17] ^ 31:0[R19]]
0001333b: #114 := R0 + 0x58
00013340: R3 := pad:64[mem[#114, el]:u32]
00013345: R14 := pad:64[mem[#114 + 4, el]:u32]
0001334c: R4 := pad:64[31:0[R4] ^ 31:0[R13]]
00013354: R17 := pad:64[mem[R1 + (61:0[R15].0), el]:u32]
0001335b: R15 := pad:64[31:0[R16] ^ 31:0[R18]]
00013362: R4 := pad:64[31:0[R4] ^ 31:0[R15]]
00013369: R4 := pad:64[31:0[R4] ^ 31:0[R17]]
00013370: R3 := pad:64[31:0[R4] ^ 31:0[R3]]
00013378: R14 := pad:64[31:0[R14] ^ (3:0[R4].31:4[R4])]
0001337e: R21 := pad:64[5:0[R3]]
00013384: R18 := pad:64[13:8[R3]]
0001338a: R17 := pad:64[21:16[R3]]
00013390: R15 := pad:64[29:24[R3]]
00013396: R19 := pad:64[5:0[R14]]
0001339c: R20 := pad:64[13:8[R14]]
000133a4: R30 := pad:64[mem[R11 + (61:0[R21].0), el]:u32]
000133ac: R3 := pad:64[mem[R10 + (61:0[R18].0), el]:u32]
000133b2: R18 := pad:64[21:16[R14]]
000133ba: R21 := pad:64[mem[R9 + (61:0[R17].0), el]:u32]
000133c0: R14 := pad:64[29:24[R14]]
000133c8: R17 := pad:64[mem[R8 + (61:0[R15].0), el]:u32]
000133cf: R12 := pad:64[31:0[R12] ^ 31:0[R30]]
000133d7: R19 := pad:64[mem[R7 + (61:0[R19].0), el]:u32]
000133de: R3 := pad:64[31:0[R3] ^ 31:0[R21]]
000133e6: R15 := pad:64[mem[R6 + (61:0[R20].0), el]:u32]
000133ed: R3 := pad:64[31:0[R3] ^ 31:0[R12]]
000133f5: R18 := pad:64[mem[R5 + (61:0[R18].0), el]:u32]
000133fc: R12 := pad:64[31:0[R17] ^ 31:0[R19]]
00013402: #115 := R0 + 0x60
00013407: R13 := pad:64[mem[#115, el]:u32]
0001340c: R16 := pad:64[mem[#115 + 4, el]:u32]
00013413: R3 := pad:64[31:0[R3] ^ 31:0[R12]]
0001341b: R14 := pad:64[mem[R1 + (61:0[R14].0), el]:u32]
00013422: R12 := pad:64[31:0[R15] ^ 31:0[R18]]
00013429: R3 := pad:64[31:0[R3] ^ 31:0[R12]]
00013430: R3 := pad:64[31:0[R3] ^ 31:0[R14]]
00013437: R13 := pad:64[31:0[R3] ^ 31:0[R13]]
0001343d: R15 := pad:64[5:0[R13]]
00013445: R12 := pad:64[31:0[R16] ^ (3:0[R3].31:4[R3])]
0001344b: R20 := pad:64[13:8[R13]]
00013451: R19 := pad:64[21:16[R13]]
00013457: R14 := pad:64[29:24[R13]]
0001345d: R17 := pad:64[5:0[R12]]
00013465: R15 := pad:64[mem[R11 + (61:0[R15].0), el]:u32]
0001346b: R18 := pad:64[13:8[R12]]
00013471: R16 := pad:64[21:16[R12]]
00013479: R19 := pad:64[mem[R9 + (61:0[R19].0), el]:u32]
0001347f: R13 := pad:64[29:24[R12]]
00013487: R12 := pad:64[mem[R10 + (61:0[R20].0), el]:u32]
0001348f: R17 := pad:64[mem[R7 + (61:0[R17].0), el]:u32]
00013496: R4 := pad:64[31:0[R4] ^ 31:0[R15]]
0001349e: R15 := pad:64[mem[R8 + (61:0[R14].0), el]:u32]
000134a5: R12 := pad:64[31:0[R12] ^ 31:0[R19]]
000134ad: R14 := pad:64[mem[R6 + (61:0[R18].0), el]:u32]
000134b4: R12 := pad:64[31:0[R12] ^ 31:0[R4]]
000134bc: R16 := pad:64[mem[R5 + (61:0[R16].0), el]:u32]
000134c3: R4 := pad:64[31:0[R15] ^ 31:0[R17]]
000134ca: R12 := pad:64[31:0[R12] ^ 31:0[R4]]
000134d2: R15 := pad:64[mem[R1 + (61:0[R13].0), el]:u32]
000134d9: R13 := pad:64[31:0[R14] ^ 31:0[R16]]
000134e0: R12 := pad:64[31:0[R12] ^ 31:0[R13]]
000134e6: #116 := R0 + 0x68
000134eb: R4 := pad:64[mem[#116, el]:u32]
000134f0: R13 := pad:64[mem[#116 + 4, el]:u32]
000134f7: R12 := pad:64[31:0[R12] ^ 31:0[R15]]
000134fd: #117 := R0 + 0x70
00013502: R16 := pad:64[mem[#117, el]:u32]
00013507: R15 := pad:64[mem[#117 + 4, el]:u32]
0001350e: R4 := pad:64[31:0[R12] ^ 31:0[R4]]
00013516: R13 := pad:64[31:0[R13] ^ (3:0[R12].31:4[R12])]
0001351c: R21 := pad:64[5:0[R4]]
00013522: R18 := pad:64[13:8[R4]]
00013528: R17 := pad:64[21:16[R4]]
0001352e: R14 := pad:64[29:24[R4]]
00013534: R19 := pad:64[5:0[R13]]
0001353a: R20 := pad:64[13:8[R13]]
00013542: R21 := pad:64[mem[R11 + (61:0[R21].0), el]:u32]
0001354a: R4 := pad:64[mem[R10 + (61:0[R18].0), el]:u32]
00013550: R18 := pad:64[21:16[R13]]
00013558: R30 := pad:64[mem[R9 + (61:0[R17].0), el]:u32]
0001355e: R13 := pad:64[29:24[R13]]
00013566: R17 := pad:64[mem[R8 + (61:0[R14].0), el]:u32]
0001356d: R3 := pad:64[31:0[R3] ^ 31:0[R21]]
00013575: R19 := pad:64[mem[R7 + (61:0[R19].0), el]:u32]
0001357c: R4 := pad:64[31:0[R4] ^ 31:0[R30]]
00013584: R14 := pad:64[mem[R6 + (61:0[R20].0), el]:u32]
0001358b: R4 := pad:64[31:0[R4] ^ 31:0[R3]]
00013593: R18 := pad:64[mem[R5 + (61:0[R18].0), el]:u32]
0001359a: R3 := pad:64[31:0[R17] ^ 31:0[R19]]
000135a1: R4 := pad:64[31:0[R4] ^ 31:0[R3]]
000135a9: R17 := pad:64[mem[R1 + (61:0[R13].0), el]:u32]
000135b0: R3 := pad:64[31:0[R14] ^ 31:0[R18]]
000135b7: R4 := pad:64[31:0[R4] ^ 31:0[R3]]
000135be: R4 := pad:64[31:0[R4] ^ 31:0[R17]]
000135c5: R3 := pad:64[31:0[R4] ^ 31:0[R16]]
000135cb: R16 := pad:64[5:0[R3]]
000135d3: R15 := pad:64[31:0[R15] ^ (3:0[R4].31:4[R4])]
000135d9: R20 := pad:64[13:8[R3]]
000135df: R30 := pad:64[21:16[R3]]
000135e5: R14 := pad:64[29:24[R3]]
000135eb: R18 := pad:64[5:0[R15]]
000135f3: R16 := pad:64[mem[R11 + (61:0[R16].0), el]:u32]
000135f9: R19 := pad:64[13:8[R15]]
000135ff: R17 := pad:64[21:16[R15]]
00013607: R3 := pad:64[mem[R10 + (61:0[R20].0), el]:u32]
0001360f: R30 := pad:64[mem[R9 + (61:0[R30].0), el]:u32]
00013616: R12 := pad:64[31:0[R12] ^ 31:0[R16]]
0001361e: R18 := pad:64[mem[R7 + (61:0[R18].0), el]:u32]
00013624: R15 := pad:64[29:24[R15]]
0001362c: R16 := pad:64[mem[R8 + (61:0[R14].0), el]:u32]
00013633: R3 := pad:64[31:0[R3] ^ 31:0[R30]]
0001363b: R14 := pad:64[mem[R6 + (61:0[R19].0), el]:u32]
00013642: R3 := pad:64[31:0[R3] ^ 31:0[R12]]
0001364a: R17 := pad:64[mem[R5 + (61:0[R17].0), el]:u32]
00013651: R12 := pad:64[31:0[R16] ^ 31:0[R18]]
00013659: R15 := pad:64[mem[R1 + (61:0[R15].0), el]:u32]
00013660: R3 := pad:64[31:0[R3] ^ 31:0[R12]]
00013666: #118 := R0 + 0x78
0001366b: R13 := pad:64[mem[#118, el]:u32]
00013670: R0 := pad:64[mem[#118 + 4, el]:u32]
00013677: R12 := pad:64[31:0[R14] ^ 31:0[R17]]
0001367e: R3 := pad:64[31:0[R3] ^ 31:0[R12]]
00013685: R3 := pad:64[31:0[R3] ^ 31:0[R15]]
0001368c: R12 := pad:64[31:0[R3] ^ 31:0[R13]]
00013694: R0 := pad:64[31:0[R0] ^ (3:0[R3].31:4[R3])]
0001369a: R16 := pad:64[5:0[R12]]
000136a0: R18 := pad:64[13:8[R12]]
000136a6: R17 := pad:64[21:16[R12]]
000136ac: R15 := pad:64[5:0[R0]]
000136b2: R12 := pad:64[29:24[R12]]
000136b8: R14 := pad:64[13:8[R0]]
000136be: R13 := pad:64[21:16[R0]]
000136c6: R16 := pad:64[mem[R11 + (61:0[R16].0), el]:u32]
000136cc: R11 := pad:64[29:24[R0]]
000136d4: R0 := pad:64[mem[R10 + (61:0[R18].0), el]:u32]
000136dc: R10 := pad:64[mem[R9 + (61:0[R17].0), el]:u32]
000136e3: R4 := pad:64[31:0[R4] ^ 31:0[R16]]
000136eb: R9 := pad:64[mem[R7 + (61:0[R15].0), el]:u32]
000136f3: R8 := pad:64[mem[R8 + (61:0[R12].0), el]:u32]
000136fa: R0 := pad:64[31:0[R0] ^ 31:0[R10]]
00013702: R6 := pad:64[mem[R6 + (61:0[R14].0), el]:u32]
00013709: R0 := pad:64[31:0[R0] ^ 31:0[R4]]
00013711: R7 := pad:64[mem[R5 + (61:0[R13].0), el]:u32]
00013718: R4 := pad:64[31:0[R8] ^ 31:0[R9]]
00013720: R5 := pad:64[mem[R1 + (61:0[R11].0), el]:u32]
00013727: R0 := pad:64[31:0[R0] ^ 31:0[R4]]
0001372e: R1 := pad:64[31:0[R6] ^ 31:0[R7]]
00013735: R0 := pad:64[31:0[R0] ^ 31:0[R1]]
0001373c: R0 := pad:64[31:0[R0] ^ 31:0[R5]]
00013742: #119 := R31 + 0x10
00013747: R19 := mem[#119, el]:u64
0001374c: R20 := mem[#119 + 8, el]:u64
00013753: R0 := pad:64[0:0[R0].31:1[R0]]
0001375a: R1 := pad:64[31:0[R3] ^ 31:0[R0]]
00013760: R1 := pad:64[31:0[R1] & 0xAAAAAAAA]
00013767: R3 := pad:64[31:0[R3] ^ 31:0[R1]]
0001376e: R0 := pad:64[31:0[R0] ^ 31:0[R1]]
00013774: #120 := R31 + 0x20
00013779: R21 := mem[#120, el]:u64
0001377e: R22 := mem[#120 + 8, el]:u64
00013785: R3 := pad:64[0:0[R3].31:1[R3]]
0001378c: R23 := mem[R31 + 0x30, el]:u64
00013793: R1 := pad:64[31:0[R0] ^ pad:32[31:8[R3]]]
00013799: R1 := pad:64[31:0[R1] & 0xFF00FF]
000137a0: R0 := pad:64[31:0[R0] ^ 31:0[R1]]
000137a7: R3 := pad:64[31:0[R3] ^ (23:0[R1].0)]
000137ae: R29 := mem[R31, el]:u64
000137b3: R30 := mem[R31 + 8, el]:u64
000137b7: R31 := R31 + 0x40
000137be: R1 := pad:64[31:0[R0] ^ pad:32[31:2[R3]]]
000137c4: R1 := pad:64[31:0[R1] & 0x33333333]
000137cb: R0 := pad:64[31:0[R0] ^ 31:0[R1]]
000137d2: R1 := pad:64[31:0[R3] ^ (29:0[R1].0)]
000137d9: R3 := pad:64[31:0[R1] ^ pad:32[31:16[R0]]]
000137df: R3 := pad:64[15:0[R3]]
000137e6: R1 := pad:64[31:0[R1] ^ 31:0[R3]]
000137ed: R3 := pad:64[31:0[R0] ^ (15:0[R3].0)]
000137f4: R0 := pad:64[31:0[R1] ^ pad:32[31:4[R3]]]
000137fa: R0 := pad:64[31:0[R0] & 0xF0F0F0F]
00013801: R1 := pad:64[31:0[R1] ^ 31:0[R0]]
00013807: V1 := pad:128[31:0[R1]]
0001380e: R0 := pad:64[31:0[R3] ^ (27:0[R0].0)]
00013814: V2 := pad:128[31:0[R0]]
0001381a: V0 := pad:128[31:0[R0]]
00013821: V4 := pad:128[31:0[pad:64[63:32[V1]] ~>>
          0x18].31:0[pad:64[31:0[V1]] ~>> 0x18]]
00013828: V6 := pad:128[31:0[pad:64[63:32[V2]] ~>>
          0x10].31:0[pad:64[31:0[V2]] ~>> 0x10]]
0001382f: V5 := pad:128[31:0[pad:64[63:32[V2]] ~>> 8].31:0[pad:64[31:0[V2]]
          ~>> 8]]
00013836: V0 := pad:128[31:0[pad:64[63:32[V0]] ~>>
          0x18].31:0[pad:64[31:0[V0]] ~>> 0x18]]
0001383d: V3 := pad:128[31:0[pad:64[63:32[V1]] ~>>
          0x10].31:0[pad:64[31:0[V1]] ~>> 0x10]]
00013844: V2 := pad:128[31:0[pad:64[63:32[V1]] ~>> 8].31:0[pad:64[31:0[V1]]
          ~>> 8]]
0001384c: V0 := 127:16[V0].7:0[V6].7:0[V0]
00013854: V0 := 127:24[V0].7:0[V5].15:0[V0]
0001385c: V0 := 127:32[V0].7:0[R0].23:0[V0]
00013864: V0 := 127:40[V0].7:0[V4].31:0[V0]
0001386c: V0 := 127:48[V0].7:0[V3].39:0[V0]
00013874: V0 := 127:56[V0].7:0[V2].47:0[V0]
0001387c: V0 := 127:64[V0].7:0[V1].55:0[V0]
00013884: mem := mem with [R2, el]:u64 <- 63:0[V0]
00013889: R0 := 0
0001388e: R1 := 0
00013893: R2 := 0
00013898: R3 := 0
0001389d: R4 := 0
000138a2: R5 := 0
000138a7: R6 := 0
000138ac: R7 := 0
000138b1: R8 := 0
000138b6: R9 := 0
000138bb: R10 := 0
000138c0: R11 := 0
000138c5: R12 := 0
000138ca: R13 := 0
000138cf: R14 := 0
000138d4: R15 := 0
000138d9: R16 := 0
000138de: R17 := 0
000138e3: R18 := 0
000138e8: call R30 with noreturn

00035901: sub gl_des_is_weak_key(gl_des_is_weak_key_result)
00035e94: gl_des_is_weak_key_result :: out u32 = low:32[R0]

0001212e:
00012132: R31 := R31 - 0x50
00012137: V1 := 0xFEFEFEFEFEFEFEFE
0001213c: R1 := 0x42F000
00012143: R1 := mem[R1 + 0xFB8, el]:u64
00012149: #83 := R31 + 0x10
0001214f: mem := mem with [#83, el]:u64 <- R29
00012155: mem := mem with [#83 + 8, el]:u64 <- R30
0001215b: R29 := R31 + 0x10
00012161: #84 := R31 + 0x20
00012167: mem := mem with [#84, el]:u64 <- R19
0001216d: mem := mem with [#84 + 8, el]:u64 <- R20
00012172: R20 := 0
00012178: #85 := R31 + 0x30
0001217e: mem := mem with [#85, el]:u64 <- R21
00012184: mem := mem with [#85 + 8, el]:u64 <- R22
00012189: R22 := 0x417000
0001218e: R21 := 0x3F
00012196: mem := mem with [R31 + 0x40, el]:u64 <- R23
0001219c: R22 := R22 + 0x8F0
000121a2: R23 := R31
000121a9: V0 := pad:128[mem[R0, el]:u64]
000121b0: R0 := mem[R1, el]:u64
000121b8: mem := mem with [R31 + 8, el]:u64 <- R0
000121bd: R0 := 0
000121c4: V0 := pad:128[63:0[V0] & 63:0[V1]]
000121cc: mem := mem with [R31, el]:u64 <- 63:0[V0]
000121d1: goto %000121cf

000121cf:
000121d7: R1 := pad:64[31:0[R20] + 31:0[R21]]
000121dd: R0 := R23
000121e2: R2 := 8
000121e9: R1 := pad:64[31:0[R1] + pad:32[31:31[R1]]]
000121ef: R19 := pad:64[extend:32[31:1[R1]]]
000121f6: R1 := R22 + extend:64[31:0[R19].0]
000121fb: R30 := 0x410A0C
000121fe: call @memcmp with return %00012200

00012200:
00012203: VF := 0
00012206: CF := 1
0001220a: ZF := 31:0[R0] = 0
0001220e: NF := 31:31[R0]
00012214: when 31:0[R0] = 0 goto %00012212
00035902: goto %000174bf

00012212:
0001221a: R0 := 1
00035903: goto %0001221c

000174bf:
000174c5: when NF = VF & ~ZF goto %000174c3
00035904: goto %000174fe

000174fe:
00017502: R21 := pad:64[31:0[R19] - 1]
00017508: #312 := ~31:0[R20]
0001750d: #313 := 31:0[R21] + ~31:0[R20]
00017513: VF := extend:64[#313 + 1] <> extend:64[31:0[R21]] + extend:64[#312]
          + 1
00017519: CF := pad:64[#313 + 1] <> pad:64[31:0[R21]] + pad:64[#312] + 1
0001751d: ZF := #313 + 1 = 0
00017521: NF := 31:31[#313 + 1]
00017527: when NF = VF goto %000121cf
00035905: goto %000174f0

000174c3:
000174cc: R20 := pad:64[31:0[R19] + 1]
000174d2: #310 := ~31:0[R20]
000174d7: #311 := 31:0[R21] + ~31:0[R20]
000174dd: VF := extend:64[#311 + 1] <> extend:64[31:0[R21]] + extend:64[#310]
          + 1
000174e3: CF := pad:64[#311 + 1] <> pad:64[31:0[R21]] + pad:64[#310] + 1
000174e7: ZF := #311 + 1 = 0
000174eb: NF := 31:31[#311 + 1]
000174f2: when NF <> VF goto %000174f0
00035906: goto %000121cf

000174f0:
000174f8: R0 := 0
000174fc: goto %0001221c

0001221c:
0001221f: R1 := 0x42F000
00012226: R1 := mem[R1 + 0xFB8, el]:u64
0001222d: R3 := mem[R31 + 8, el]:u64
00012234: R2 := mem[R1, el]:u64
0001223a: #86 := ~R2
0001223f: #87 := R3 + ~R2
00012245: VF := extend:128[#87 + 1] <> extend:128[R3] + extend:128[#86] + 1
0001224b: CF := pad:128[#87 + 1] <> pad:128[R3] + pad:128[#86] + 1
0001224f: ZF := #87 + 1 = 0
00012253: NF := 63:63[#87 + 1]
00012257: R3 := #87 + 1
0001225c: R2 := 0
00012262: when ZF <> 1 goto %00012260
00035907: goto %00017464

00012260:
00012268: R30 := 0x410A7C
0001226a: call @__stack_chk_fail with return %0001226c

0001226c:
00035908: call @gl_des_setkey with noreturn

00017464:
00017468: #307 := R31 + 0x10
0001746d: R29 := mem[#307, el]:u64
00017472: R30 := mem[#307 + 8, el]:u64
00017478: #308 := R31 + 0x20
0001747d: R19 := mem[#308, el]:u64
00017482: R20 := mem[#308 + 8, el]:u64
00017488: #309 := R31 + 0x30
0001748d: R21 := mem[#309, el]:u64
00017492: R22 := mem[#309 + 8, el]:u64
00017499: R23 := mem[R31 + 0x40, el]:u64
0001749f: R31 := R31 + 0x50
000174a4: R1 := 0
000174a9: R2 := 0
000174ae: R3 := 0
000174b3: R16 := 0
000174b8: R17 := 0
000174bd: call R30 with noreturn

00035909: sub gl_des_makekey(gl_des_makekey_result)
00035e95: gl_des_makekey_result :: out u32 = low:32[R0]

000128fe:
00012902: #100 := R2 - 8
00012907: VF := extend:128[#100] <> extend:128[R2] - 8
0001290c: CF := pad:128[#100] <> pad:128[R2] + 0xFFFFFFFFFFFFFFF8
00012910: ZF := #100 = 0
00012914: NF := 63:63[#100]
0001291a: when ZF goto %00012918
0003590a: goto %00017446

00012918:
00012921: #101 := R31 - 0x20
00012927: mem := mem with [#101, el]:u64 <- R29
0001292d: mem := mem with [#101 + 8, el]:u64 <- R30
00012931: R31 := #101
00012937: R29 := R31
0001293f: mem := mem with [R31 + 0x10, el]:u64 <- R19
00012945: R19 := R1
0001294a: R30 := 0x410E68
0001294c: call @gl_des_setkey with return %0001294e

0001294e:
00012952: R0 := R19
00012957: R30 := 0x410E70
00012959: call @gl_des_is_weak_key with return %0001295b

0001295b:
0001295f: R0 := pad:64[7:0[R0]]
00012966: R19 := mem[R31 + 0x10, el]:u64
0001296c: R0 := pad:64[31:0[R0] ^ 1]
00012973: R29 := mem[R31, el]:u64
00012978: R30 := mem[R31 + 8, el]:u64
0001297c: R31 := R31 + 0x20
00012981: R1 := 0
00012986: R2 := 0
0001298b: R16 := 0
00012990: R17 := 0
00012995: call R30 with noreturn

00017446:
00017449: R0 := 0
0001744e: R1 := 0
00017453: R2 := 0
00017458: R16 := 0
0001745d: R17 := 0
00017462: call R30 with noreturn

0003590b: sub gl_des_setkey(gl_des_setkey_result)
00035e96: gl_des_setkey_result :: out u32 = low:32[R0]

0001226e:
00012272: #88 := R31 - 0x40
00012278: mem := mem with [#88, el]:u64 <- R29
0001227e: mem := mem with [#88 + 8, el]:u64 <- R30
00012282: R31 := #88
00012287: R6 := 0x417000
0001228d: R6 := R6 + 0x8F0
00012293: R29 := R31
00012299: #89 := R31 + 0x10
0001229f: mem := mem with [#89, el]:u64 <- R19
000122a5: mem := mem with [#89 + 8, el]:u64 <- R20
000122ab: R4 := R6 + 0x200
000122b1: R3 := R6 + 0x240
000122b7: #90 := R31 + 0x20
000122bd: mem := mem with [#90, el]:u64 <- R21
000122c3: mem := mem with [#90 + 8, el]:u64 <- R22
000122c9: R6 := R6 + 0x280
000122cf: R5 := R0
000122d5: #91 := R31 + 0x30
000122db: mem := mem with [#91, el]:u64 <- R23
000122e1: mem := mem with [#91 + 8, el]:u64 <- R24
000122e7: R12 := R0 + 0x80
000122ec: R11 := 0x1C
000122f3: R2 := pad:64[mem[R1, el]:u32]
000122f8: R7 := pad:64[mem[R1 + 4, el]:u32]
000122fd: R10 := 0x24000000
00012302: R9 := 0x2080000
00012307: R8 := 0x808
00012310: R7 := pad:64[7:0[R7].15:8[R7].23:16[R7].31:24[R7]]
00012319: R2 := pad:64[7:0[R2].15:8[R2].23:16[R2].31:24[R2]]
00012320: R1 := pad:64[31:0[R2] ^ pad:32[31:4[R7]]]
00012326: R1 := pad:64[31:0[R1] & 0xF0F0F0F]
0001232d: R2 := pad:64[31:0[R1] ^ 31:0[R2]]
00012334: R1 := pad:64[31:0[R7] ^ (27:0[R1].0)]
00012339: R7 := 0x11
00012340: R13 := pad:64[31:0[R2] ^ 31:0[R1]]
00012346: R13 := pad:64[31:0[R13] & 0x10101010]
0001234d: R2 := pad:64[31:0[R2] ^ 31:0[R13]]
00012354: R1 := pad:64[31:0[R1] ^ 31:0[R13]]
0001235a: R22 := pad:64[3:0[R2]]
00012360: R13 := pad:64[19:16[R2]]
00012366: R14 := pad:64[11:8[R2]]
0001236c: R15 := pad:64[12:9[R1]]
00012372: R17 := pad:64[4:1[R1]]
00012378: R19 := pad:64[27:24[R2]]
0001237e: R16 := pad:64[7:4[R1]]
00012386: R13 := pad:64[mem[R4 + (61:0[R13].0), el]:u32]
0001238c: R21 := pad:64[16:13[R2]]
00012394: R14 := pad:64[mem[R4 + (61:0[R14].0), el]:u32]
0001239a: R20 := pad:64[31:28[R1]]
000123a2: R15 := pad:64[mem[R3 + (61:0[R15].0), el]:u32]
000123a8: R23 := pad:64[28:25[R1]]
000123ae: R13 := pad:64[30:0[R13].0]
000123b6: R19 := pad:64[mem[R4 + (61:0[R19].0), el]:u32]
000123bd: R14 := pad:64[31:0[R13] | (29:0[R14].0)]
000123c5: R22 := pad:64[mem[R4 + (61:0[R22].0), el]:u32]
000123cd: R13 := pad:64[mem[R3 + (61:0[R17].0), el]:u32]
000123d3: R15 := pad:64[29:0[R15].0]
000123d9: R18 := pad:64[8:5[R2]]
000123df: R17 := pad:64[31:29[R2]]
000123e6: R22 := pad:64[31:0[R19] | (28:0[R22].0)]
000123ee: R19 := pad:64[mem[R3 + (61:0[R16].0), el]:u32]
000123f5: R13 := pad:64[31:0[R15] | (28:0[R13].0)]
000123fb: R16 := pad:64[20:17[R1]]
00012401: R15 := pad:64[23:20[R1]]
00012407: R2 := pad:64[24:21[R2]]
0001240d: R1 := pad:64[15:12[R1]]
00012415: R21 := pad:64[mem[R4 + (61:0[R21].0), el]:u32]
0001241d: R20 := pad:64[mem[R3 + (61:0[R20].0), el]:u32]
00012423: R19 := pad:64[24:0[R19].0]
0001242b: R23 := pad:64[mem[R3 + (61:0[R23].0), el]:u32]
00012433: R18 := pad:64[mem[R4 + (61:0[R18].0), el]:u32]
00012439: R21 := pad:64[25:0[R21].0]
00012441: R17 := pad:64[mem[R4 + (61:0[R17].0), el]:u32]
00012449: R16 := pad:64[mem[R3 + (61:0[R16].0), el]:u32]
00012450: R20 := pad:64[31:0[R23] | (27:0[R20].0)]
00012458: R15 := pad:64[mem[R3 + (61:0[R15].0), el]:u32]
0001245f: R18 := pad:64[31:0[R21] | (24:0[R18].0)]
00012467: R2 := pad:64[mem[R4 + (61:0[R2].0), el]:u32]
0001246d: R17 := pad:64[27:0[R17].0]
00012475: R1 := pad:64[mem[R3 + (61:0[R1].0), el]:u32]
0001247c: R4 := pad:64[31:0[R14] | 31:0[R22]]
00012483: R3 := pad:64[31:0[R13] | 31:0[R20]]
0001248a: R14 := pad:64[31:0[R19] | (30:0[R16].0)]
00012490: R13 := pad:64[26:0[R15].0]
00012497: R4 := pad:64[31:0[R4] | 31:0[R18]]
0001249e: R2 := pad:64[31:0[R17] | (26:0[R2].0)]
000124a5: R3 := pad:64[31:0[R3] | 31:0[R14]]
000124ac: R1 := pad:64[31:0[R13] | (25:0[R1].0)]
000124b3: R2 := pad:64[31:0[R2] | 31:0[R4]]
000124ba: R1 := pad:64[31:0[R1] | 31:0[R3]]
000124c0: R2 := pad:64[27:0[R2]]
000124c6: R1 := pad:64[27:0[R1]]
0003590c: goto %000124c8

000124c8:
000124cd: R15 := pad:64[mem[R6]]
000124d1: R6 := R6 + 1
000124d8: R3 := pad:64[31:0[R11] + ~31:0[R15] + 1]
000124df: R4 := pad:64[31:0[R2] << pad:10[4:0[R15]]]
000124e6: R2 := pad:64[31:0[R2] >> pad:10[4:0[R3]]]
000124ed: R2 := pad:64[31:0[R4] | 31:0[R2]]
000124f4: R13 := pad:64[31:0[R1] >> pad:10[4:0[R3]]]
000124fa: R17 := pad:64[21:21[R2].0]
00012500: R4 := pad:64[17:0[R2].0]
00012507: R19 := pad:64[31:0[R9] & (13:0[R2].0)]
0001250d: R18 := pad:64[0:0[R2].0]
00012514: R14 := pad:64[31:0[R10] & (27:0[R2].0)]
0001251a: R3 := pad:64[25:0[R2].0]
00012520: R16 := pad:64[22:0[R2].0]
00012526: R4 := pad:64[27:27[R4].0]
0001252c: R30 := pad:64[16:0[R2].0]
00012533: R4 := pad:64[31:0[R4] | 31:0[R19]]
0001253a: R14 := pad:64[31:0[R14] | 31:0[R18]]
00012540: R16 := pad:64[21:21[R16].0]
00012546: R18 := pad:64[21:0[R2].0]
0001254d: R1 := pad:64[31:0[R1] << pad:10[4:0[R15]]]
00012553: R3 := pad:64[24:24[R3].0]
0001255a: R1 := pad:64[31:0[R1] | 31:0[R13]]
00012560: R15 := pad:64[14:0[R2].0]
00012566: R13 := pad:64[9:0[R2].0]
0001256d: R3 := pad:64[31:0[R3] | 31:0[R16]]
00012573: R21 := pad:64[27:27[R18].0]
00012579: R19 := pad:64[26:26[R2].0]
0001257f: R23 := pad:64[29:29[R30].0]
00012585: R20 := pad:64[27:27[R2].0]
0001258c: R14 := pad:64[31:0[R14] | 31:0[R4]]
00012592: R16 := pad:64[27:0[R2].0]
00012598: R4 := pad:64[18:18[R18].0]
0001259e: R13 := pad:64[26:26[R13].0]
000125a4: R18 := pad:64[27:0[R2].0]
000125aa: R15 := pad:64[28:28[R15].0]
000125b1: R17 := pad:64[31:0[R4] | pad:32[31:1[R17]]]
000125b7: R22 := pad:64[27:4[R1]]
000125be: R15 := pad:64[31:0[R15] | 31:0[R23]]
000125c5: R14 := pad:64[31:0[R14] | 31:0[R3]]
000125cb: R4 := pad:64[26:26[R1].0]
000125d2: R13 := pad:64[31:0[R13] | 31:0[R21]]
000125d8: R18 := pad:64[24:24[R18].0]
000125de: R3 := pad:64[15:0[R2].0]
000125e4: R23 := pad:64[20:0[R2].0]
000125ea: R16 := pad:64[17:17[R16].0]
000125f1: R16 := pad:64[31:0[R16] | pad:32[31:10[R19]]]
000125f7: R21 := pad:64[12:12[R22].0]
000125fe: R14 := pad:64[31:0[R14] | 31:0[R17]]
00012604: R22 := pad:64[24:24[R2].0]
0001260a: R19 := pad:64[25:0[R1].0]
00012610: R17 := pad:64[11:11[R1].0]
00012617: R13 := pad:64[31:0[R13] | 31:0[R15]]
0001261d: R23 := pad:64[20:20[R23].0]
00012624: R15 := pad:64[31:0[R18] | pad:32[31:2[R20]]]
0001262a: R3 := pad:64[21:21[R3].0]
00012630: R18 := pad:64[27:0[R2].0]
00012637: R14 := pad:64[31:0[R14] | 31:0[R16]]
0001263e: R13 := pad:64[31:0[R13] | 31:0[R15]]
00012645: R4 := pad:64[31:0[R21] | pad:32[31:13[R4]]]
0001264b: R19 := pad:64[11:11[R19].0]
00012651: R21 := pad:64[27:14[R1]]
00012657: R20 := pad:64[10:10[R1].0]
0001265e: R3 := pad:64[31:0[R3] | 31:0[R23]]
00012664: R18 := pad:64[19:19[R18].0]
0001266a: R16 := pad:64[20:20[R2].0]
00012671: R15 := pad:64[31:0[R18] | pad:32[31:6[R22]]]
00012678: R17 := pad:64[31:0[R19] | pad:32[31:1[R17]]]
0001267f: R4 := pad:64[31:0[R14] | 31:0[R4]]
00012685: R24 := pad:64[9:9[R21].0]
0001268b: R14 := pad:64[27:3[R1]]
00012691: R19 := pad:64[14:14[R1].0]
00012697: R23 := pad:64[17:17[R30].0]
0001269e: R3 := pad:64[31:0[R13] | 31:0[R3]]
000126a4: R30 := pad:64[15:15[R1].0]
000126aa: R13 := pad:64[23:0[R1].0]
000126b1: R4 := pad:64[31:0[R4] | 31:0[R17]]
000126b7: R22 := pad:64[3:3[R14].0]
000126bd: R17 := pad:64[27:26[R1]]
000126c3: R18 := pad:64[20:20[R1].0]
000126ca: R3 := pad:64[31:0[R3] | 31:0[R15]]
000126d1: R16 := pad:64[31:0[R23] | pad:32[31:4[R16]]]
000126d7: R13 := pad:64[12:12[R13].0]
000126dd: R15 := pad:64[19:19[R1].0]
000126e4: R20 := pad:64[31:0[R24] | pad:32[31:5[R20]]]
000126eb: R19 := pad:64[31:0[R22] | pad:32[31:10[R19]]]
000126f1: R17 := pad:64[1:1[R17].0]
000126f8: R3 := pad:64[31:0[R3] | 31:0[R16]]
000126ff: R30 := pad:64[31:0[R13] | pad:32[31:2[R30]]]
00012705: R16 := pad:64[12:12[R1].0]
0001270b: R13 := pad:64[24:0[R1].0]
00012712: R21 := pad:64[31:0[R21] & 31:0[R8]]
00012719: R4 := pad:64[31:0[R4] | 31:0[R20]]
00012720: R18 := pad:64[31:0[R17] | pad:32[31:18[R18]]]
00012727: R4 := pad:64[31:0[R4] | 31:0[R19]]
0001272d: R17 := pad:64[24:24[R1]]
00012733: R19 := pad:64[8:8[R1].0]
0001273a: R15 := pad:64[31:0[R21] | pad:32[31:9[R15]]]
00012740: R13 := pad:64[8:8[R13].0]
00012747: R3 := pad:64[31:0[R3] | 31:0[R30]]
0001274e: R3 := pad:64[31:0[R3] | 31:0[R15]]
00012755: R16 := pad:64[31:0[R13] | pad:32[31:7[R16]]]
0001275b: R15 := pad:64[0:0[R1].0]
00012761: R13 := pad:64[22:22[R1].0]
00012768: R14 := pad:64[31:0[R14] & 31:0[R7]]
0001276f: R4 := pad:64[31:0[R4] | 31:0[R18]]
00012776: R17 := pad:64[31:0[R17] | 31:0[R19]]
0001277d: R14 := pad:64[31:0[R15] | 31:0[R14]]
00012784: R4 := pad:64[31:0[R4] | 31:0[R17]]
0001278a: R15 := pad:64[9:9[R1].0]
00012791: R3 := pad:64[31:0[R3] | 31:0[R16]]
00012799: mem := mem with [R5, el]:u32 <- 31:0[R4]
0001279d: R5 := R5 + 8
000127a4: R3 := pad:64[31:0[R3] | 31:0[R14]]
000127ab: R4 := pad:64[31:0[R15] | pad:32[31:21[R13]]]
000127b2: R3 := pad:64[31:0[R3] | 31:0[R4]]
000127ba: mem := mem with [R5 - 4, el]:u32 <- 31:0[R3]
000127c0: R2 := pad:64[27:0[R2]]
000127c6: R1 := pad:64[27:0[R1]]
000127cc: #92 := ~R5
000127d1: #93 := R12 + ~R5
000127d7: VF := extend:128[#93 + 1] <> extend:128[R12] + extend:128[#92] + 1
000127dd: CF := pad:128[#93 + 1] <> pad:128[R12] + pad:128[#92] + 1
000127e1: ZF := #93 + 1 = 0
000127e5: NF := 63:63[#93 + 1]
000127ea: when ZF <> 1 goto %000124c8
0003590d: goto %000127ee

000127ee:
000127f2: R1 := R0 + 0x78
000127f8: R4 := R0 - 8
000127fe: R0 := 62:0[R0].0
00012803: R3 := 0xF8
0003590e: goto %00012807

00012807:
0001280b: #94 := R1 - 8
00012810: V1 := pad:128[mem[#94, el]:u64]
00012815: V0 := pad:128[mem[#94 + 8, el]:u64]
0001281c: R2 := R3 + ~R1 + 1
00012822: R1 := R1 - 0x10
00012829: V0 := 63:0[V1].63:0[V0]
00012832: mem := mem with [R2 + R0, el]:u128 <- V0
00012838: #95 := ~R1
0001283d: #96 := R4 + ~R1
00012843: VF := extend:128[#96 + 1] <> extend:128[R4] + extend:128[#95] + 1
00012849: CF := pad:128[#96 + 1] <> pad:128[R4] + pad:128[#95] + 1
0001284d: ZF := #96 + 1 = 0
00012851: NF := 63:63[#96 + 1]
00012856: when ZF <> 1 goto %00012807
0003590f: goto %0001285a

0001285a:
0001285e: #97 := R31 + 0x10
00012863: R19 := mem[#97, el]:u64
00012868: R20 := mem[#97 + 8, el]:u64
0001286e: #98 := R31 + 0x20
00012873: R21 := mem[#98, el]:u64
00012878: R22 := mem[#98 + 8, el]:u64
0001287e: #99 := R31 + 0x30
00012883: R23 := mem[#99, el]:u64
00012888: R24 := mem[#99 + 8, el]:u64
0001288f: R29 := mem[R31, el]:u64
00012894: R30 := mem[R31 + 8, el]:u64
00012898: R31 := R31 + 0x40
0001289d: R0 := 0
000128a2: R1 := 0
000128a7: R2 := 0
000128ac: R3 := 0
000128b1: R4 := 0
000128b6: R5 := 0
000128bb: R6 := 0
000128c0: R7 := 0
000128c5: R8 := 0
000128ca: R9 := 0
000128cf: R10 := 0
000128d4: R11 := 0
000128d9: R12 := 0
000128de: R13 := 0
000128e3: R14 := 0
000128e8: R15 := 0
000128ed: R16 := 0
000128f2: R17 := 0
000128f7: R18 := 0
000128fc: call R30 with noreturn

00035910: sub headers_recv(headers_recv_result)
00035e97: headers_recv_result :: out u32 = low:32[R0]

0001faf5:
0001fafc: R31 := R31 - 0x90
0001fb01: R2 := 0x42F000
0001fb08: R2 := mem[R2 + 0xFB8, el]:u64
0001fb0e: #841 := R31 + 0x30
0001fb14: mem := mem with [#841, el]:u64 <- R29
0001fb1a: mem := mem with [#841 + 8, el]:u64 <- R30
0001fb20: R29 := R31 + 0x30
0001fb26: #842 := R31 + 0x40
0001fb2c: mem := mem with [#842, el]:u64 <- R19
0001fb32: mem := mem with [#842 + 8, el]:u64 <- R20
0001fb38: R20 := R1
0001fb3d: R1 := 0x1000
0001fb43: #843 := R31 + 0x50
0001fb49: mem := mem with [#843, el]:u64 <- R21
0001fb4f: mem := mem with [#843 + 8, el]:u64 <- R22
0001fb55: R21 := pad:64[31:0[R0]]
0001fb5b: R22 := R31 + 0x14
0001fb61: #844 := R31 + 0x60
0001fb67: mem := mem with [#844, el]:u64 <- R23
0001fb6d: mem := mem with [#844 + 8, el]:u64 <- R24
0001fb73: R23 := R31 + 0x18
0001fb79: #845 := R31 + 0x70
0001fb7f: mem := mem with [#845, el]:u64 <- R25
0001fb85: mem := mem with [#845 + 8, el]:u64 <- R26
0001fb8c: R0 := mem[R2, el]:u64
0001fb94: mem := mem with [R31 + 0x28, el]:u64 <- R0
0001fb99: R0 := 0
0001fba1: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R1]
0001fba6: R0 := 0x1000
0001fbad: mem := mem with [R31 + 0x20, el]:u64 <- 0
0001fbb2: R30 := 0x408858
0001fbb4: call @zmalloc with return %0001fbb6

0001fbb6:
0001fbba: R3 := R0
0001fbc0: R2 := R22
0001fbc6: R1 := R23
0001fbcc: R0 := pad:64[31:0[R21]]
0001fbd4: mem := mem with [R31 + 0x18, el]:u64 <- R3
0001fbd9: R30 := 0x408870
0001fbdb: call @so_recvln with return %0001fbdd

0001fbdd:
0001fbe0: VF := 0
0001fbe3: CF := 1
0001fbe7: ZF := 31:0[R0] = 0
0001fbeb: NF := 31:31[R0]
0001fbf3: when ~(NF = VF & ~ZF) goto %0001fbf1
00035911: goto %0002101b

0001fbf1:
0001fbfa: R19 := pad:64[31:0[R0]]
0001fc01: R0 := mem[R31 + 0x18, el]:u64
0001fc06: R26 := 0x42F000
0001fc0d: R26 := mem[R26 + 0xF30, el]:u64
0001fc12: R30 := 0x408A4C
0001fc14: call @free with return %0001fc16

0002101b:
0002101e: R26 := 0x42F000
00021025: R26 := mem[R26 + 0xF30, el]:u64
0002102b: #900 := R31 + 0x80
00021031: mem := mem with [#900, el]:u64 <- R27
00021037: mem := mem with [#900 + 8, el]:u64 <- R28
0002103e: R0 := pad:64[mem[R26, el]:u32]
00021043: when 31:0[R0] <> 0 goto %00020d3b
00035912: goto %00020d5a

00020d3b:
00020d40: R2 := mem[R31 + 0x18, el]:u64
00020d45: R1 := 0x414000
00020d4a: R0 := 2
00020d50: R1 := R1 + 0x408
00020d55: R30 := 0x408A34
00020d57: call @__printf_chk with return %00020d59

00020d59:
00020d5c: goto %00020d5a

00020d5a:
00020d62: R0 := mem[R31 + 0x18, el]:u64
00020d68: R19 := R31 + 0x20
00020d6d: R25 := 0x414000
00020d73: R28 := R25 + 0x138
00020d78: R30 := 0x4088A0
00020d7a: call @trimr with return %00020d7c

00020d7c:
00020d81: R0 := mem[R31 + 0x18, el]:u64
00020d86: R30 := 0x4088A8
00020d88: call @strdup with return %00020d8a

00020d8a:
00020d8e: R24 := R0
00020d95: R27 := mem[R31 + 0x18, el]:u64
00020d9b: R0 := R27
00020da0: R30 := 0x4088B8
00020da2: call @strlen with return %00020da4

00020da4:
00020da8: R1 := R0
00020dae: R2 := R19
00020db4: R0 := R27
00020dbc: mem := mem with [R31 + 8, el]:u64 <- R1
00020dc2: R1 := R28
00020dc7: R30 := 0x4088D0
00020dc9: call @strtok_r with return %00020dcb

00020dcb:
00020dcf: R27 := R0
00020dd4: when R0 = 0 goto %00020293
00035913: goto %00020dd8

00020293:
00020298: R0 := pad:64[mem[R26, el]:u32]
0002029e: when 31:0[R0] <> 0 goto %0002029c
00035914: goto %000202bf

0002029c:
000202a5: R2 := R24
000202aa: R1 := 0x414000
000202af: R0 := 2
000202b5: R1 := R1 + 0x430
000202ba: R30 := 0x408DA4
000202bc: call @__printf_chk with return %000202be

000202be:
000202c1: goto %000202bf

000202bf:
000202c6: when R24 <> 0 goto %000202c4
00035915: goto %00020c34

00020c34:
00020c39: R0 := mem[R31 + 0x18, el]:u64
00020c3e: R30 := 0x408D14
00020c40: call @free with return %000202e5

00020dd8:
00020ddb: R1 := 0x414000
00020de0: R2 := 5
00020de6: R1 := R1 + 0x418
00020deb: R30 := 0x4088E8
00020ded: call @strncasecmp with return %00020def

00020def:
00020df2: when 31:0[R0] = 0 goto %000203f8
00035916: goto %00020df6

000203f8:
000203fd: mem := mem with [R20, el]:u32 <- 0
00020403: R0 := R27
0002040a: mem := mem with [R20 + 0x1C, el]:u32 <- 0
0002040f: R30 := 0x408B60
00020411: call @strdup with return %00020413

00020413:
00020417: #875 := R20 + 0x48
0002041d: mem := mem with [#875, el]:u64 <- R0
00020422: mem := mem with [#875 + 8, el]:u64 <- 0
00020427: R1 := 0x2F
0002042c: R30 := 0x408B6C
0002042f: call @strchr with return %00020431

00020431:
00020435: R28 := R0
0002043a: when R0 = 0 goto %000201fd
00035917: goto %0002043e

0002043e:
00020441: R30 := 0x408B78
00020443: call @strlen with return %00020445

00020445:
00020449: #876 := R0 - 3
0002044e: VF := extend:128[#876] <> extend:128[R0] - 3
00020453: CF := pad:128[#876] <> pad:128[R0] + 0xFFFFFFFFFFFFFFFD
00020457: ZF := #876 = 0
0002045b: NF := 63:63[#876]
00020461: when ~(CF & ~ZF) goto %000201fd
00035918: goto %00020465

00020465:
00020468: R30 := 0x408B84
0002046a: call @__ctype_b_loc with return %0002046c

0002046c:
00020471: R1 := pad:64[mem[R28 + 1]]
00020478: R0 := mem[R0, el]:u64
0002047e: R2 := pad:64[7:0[R1].0]
00020486: R2 := pad:64[mem[R0 + R2, el]:u16]
0002048b: when ~11:11[R2] goto %000201fd
00035919: goto %0002048f

0002048f:
00020494: R2 := pad:64[mem[R28 + 3]]
0002049a: R3 := pad:64[7:0[R2].0]
000204a2: R0 := pad:64[mem[R0 + R3, el]:u16]
000204a7: when ~11:11[R0] goto %000201fd
0003591a: goto %000204ab

000204ab:
000204b0: R1 := pad:64[31:0[R1] + (29:0[R1].0)]
000204b6: R2 := pad:64[31:0[R2] - 0x210]
000204bd: R0 := pad:64[31:0[R2] + (30:0[R1].0)]
000204c1: goto %00020202

00020df6:
00020df9: R1 := 0x414000
00020dff: R0 := R27
00020e05: R1 := R1 + 0x420
00020e0a: R2 := 3
00020e0f: R30 := 0x408900
00020e11: call @strncasecmp with return %00020e13

00020e13:
00020e16: when 31:0[R0] = 0 goto %000201d1
0003591b: goto %00020e1a

000201d1:
000201d6: mem := mem with [R20, el]:u32 <- 0
000201dc: R0 := R27
000201e3: mem := mem with [R20 + 0x1C, el]:u32 <- 0
000201e8: R30 := 0x408AB8
000201ea: call @strdup with return %000201ec

000201ec:
000201f0: #870 := R20 + 0x48
000201f6: mem := mem with [#870, el]:u64 <- R0
000201fb: mem := mem with [#870 + 8, el]:u64 <- 0
0003591c: goto %000201fd

000201fd:
00020200: R0 := 0xFFFFFFFF
0003591d: goto %00020202

00020202:
00020208: mem := mem with [R20 + 0x24, el]:u32 <- 31:0[R0]
0002020e: R2 := R19
00020214: R1 := R25 + 0x138
00020219: R0 := 0
0002021e: R30 := 0x408AD4
00020220: call @strtok_r with return %00020222

00020222:
00020226: R19 := R0
0002022c: when R0 = 0 goto %0002022a
0003591e: goto %00020f7f

0002022a:
00020234: R0 := mem[R20 + 0x50, el]:u64
0002023a: when R0 = 0 goto %00020238
0003591f: goto %00020258

00020238:
00020240: R0 := 0x413000
00020246: R0 := R0 + 0x778
0002024b: R30 := 0x408EFC
0002024d: call @strdup with return %0002024f

0002024f:
00020255: mem := mem with [R20 + 0x50, el]:u64 <- R0
0002025a: goto %00020258

00020258:
00020260: R19 := mem[R31 + 0x18, el]:u64
00020266: when R24 = 0 goto %00020264
00035920: goto %00020f65

00020264:
0002026d: R0 := R19
00020272: R30 := 0x408E68
00020274: call @free with return %00020276

00020276:
00020279: goto %00020277

00020f65:
00020f69: R0 := R24
00020f6e: R30 := 0x408CEC
00020f70: call @free with return %00020f72

00020f72:
00020f76: R0 := R19
00020f7b: R30 := 0x408CF4
00020f7d: call @free with return %00020277

00020277:
0002027e: #871 := R31 + 0x80
00020283: R27 := mem[#871, el]:u64
00020288: R28 := mem[#871 + 8, el]:u64
0002028d: R19 := 0xFFFFFFFE
00020291: goto %0001fc16

00020f7f:
00020f82: R30 := 0x408AE0
00020f84: call @strdup with return %00020f86

00020f86:
00020f8a: R25 := R0
00020f8f: R30 := 0x408AE8
00020f91: call @strlen with return %00020f93

00020f93:
00020f98: R19 := R19 + R0
00020f9f: R2 := mem[R31 + 0x18, el]:u64
00020fa6: R0 := pad:64[mem[R31 + 8, el]:u32]
00020fad: R27 := R2 + extend:64[31:0[R0]]
00020fb2: goto %00020fb0

00020fb0:
00020fb8: R0 := pad:64[mem[R19]]
00020fbe: #897 := ~R19
00020fc3: #898 := R27 + ~R19
00020fc9: VF := extend:128[#898 + 1] <> extend:128[R27] + extend:128[#897] +
          1
00020fcf: CF := pad:128[#898 + 1] <> pad:128[R27] + pad:128[#897] + 1
00020fd3: ZF := #898 + 1 = 0
00020fd7: NF := 63:63[#898 + 1]
00020fde: when CF & ~ZF goto %00020fdc
00035921: goto %00021001

00020fdc:
00020fe5: R19 := R19 + 1
00020feb: #899 := 31:0[R0] - 0x20
00020ff0: VF := extend:64[#899] <> extend:64[31:0[R0]] - 0x20
00020ff5: CF := pad:64[#899] <> pad:64[31:0[R0]] + 0xFFFFFFE0
00020ff9: ZF := #899 = 0
00020ffd: NF := 31:31[#899]
00021003: when ZF <> 1 goto %00021001
00035922: goto %00020fb0

00021001:
0002100b: R0 := pad:64[mem[R19]]
00021010: when 31:0[R0] <> 0 goto %00020339
00035923: goto %00021014

00020339:
0002033d: R0 := R19
00020342: R30 := 0x408D88
00020344: call @strdup with return %00020346

00020346:
0002034c: mem := mem with [R20 + 0x50, el]:u64 <- R0
00020351: goto %0002034f

00021014:
00021019: R0 := mem[R20 + 0x50, el]:u64
00035924: goto %0002034f

0002034f:
00020356: when R0 = 0 goto %00020354
00035925: goto %00020374

00020354:
0002035c: R0 := 0x413000
00020362: R0 := R0 + 0x778
00020367: R30 := 0x408EE8
00020369: call @strdup with return %0002036b

0002036b:
00020371: mem := mem with [R20 + 0x50, el]:u64 <- R0
00020376: goto %00020374

00020374:
0002037b: R0 := R25
00020380: R30 := 0x408B2C
00020382: call @strlen with return %00020384

00020384:
00020388: #874 := R0 - 3
0002038d: VF := extend:128[#874] <> extend:128[R0] - 3
00020392: CF := pad:128[#874] <> pad:128[R0] + 0xFFFFFFFFFFFFFFFD
00020396: ZF := #874 = 0
0002039a: NF := 63:63[#874]
000203a0: when ZF goto %0002039e
00035926: goto %000203c9

0002039e:
000203a7: R0 := R25
000203ac: R2 := 0xA
000203b1: R1 := 0
000203b6: R30 := 0x408BC8
000203b8: call @strtol with return %000203ba

000203ba:
000203c0: mem := mem with [R20 + 0x10, el]:u32 <- 31:0[R0]
000203c5: R27 := 0
000203cb: when 31:0[R0] = 0 goto %000203c9
00035927: goto %000204c3

000204c3:
00035928: goto %000204c5

000203c9:
000203d1: when R24 = 0 goto %00020301
00035929: goto %000203d5

00020301:
00020305: R0 := R25
0002030a: R19 := 0xFFFFFFFE
0002030f: R30 := 0x408D2C
00020311: call @free with return %00020313

00020313:
00020316: goto %00020314

000203d5:
000203d9: R0 := R24
000203de: R30 := 0x408B40
000203e0: call @free with return %000203e2

000203e2:
000203e6: R0 := R25
000203eb: R19 := 0xFFFFFFFE
000203f0: R30 := 0x408B4C
000203f2: call @free with return %000203f4

000203f4:
000203f6: goto %00020314

00020e1a:
00020e1d: R1 := 0x414000
00020e23: R0 := R24
00020e29: R1 := R1 + 0x428
00020e2e: R30 := 0x408914
00020e30: call @strstr with return %00020e32

00020e32:
00020e35: when R0 = 0 goto %00020bf5
0003592a: goto %00020e39

00020bf5:
00020bfa: R0 := pad:64[mem[R26, el]:u32]
00020bff: when 31:0[R0] = 0 goto %000202c4
0003592b: goto %00020c03

00020c03:
00020c06: R1 := 0x414000
00020c0c: R2 := R24
00020c12: R1 := R1 + 0x430
00020c17: R0 := 2
00020c1c: R30 := 0x408D4C
00020c1e: call @__printf_chk with return %00020c20

00020c20:
0003592c: goto %000202c4

000202c4:
000202cd: R0 := R24
000202d2: R30 := 0x408D58
000202d4: call @free with return %000202d6

000202d6:
000202db: R0 := mem[R31 + 0x18, el]:u64
000202e0: R30 := 0x408D60
000202e2: call @free with return %000202e4

000202e4:
000202e7: goto %000202e5

000202e5:
000202ec: #872 := R31 + 0x80
000202f1: R27 := mem[#872, el]:u64
000202f6: R28 := mem[#872 + 8, el]:u64
000202fb: R19 := 0xFFFFFFFC
000202ff: goto %0001fc16

00020e39:
00020e3c: V0 := 0
00020e41: R0 := 1
00020e49: mem := mem with [R20, el]:u32 <- 31:0[R0]
00020e4f: R0 := R27
00020e56: mem := mem with [R20 + 0x1C, el]:u32 <- 0
00020e5d: mem := mem with [R20 + 0x48, el]:u64 <- 0
00020e65: mem := mem with [R20 + 0x28, el]:u128 <- V0
00020e6d: mem := mem with [R20 + 0x38, el]:u128 <- V0
00020e72: R30 := 0x40893C
00020e74: call @strdup with return %00020e76

00020e76:
00020e7a: R1 := R28
00020e82: mem := mem with [R20 + 0x28, el]:u64 <- R0
00020e88: R2 := R19
00020e8d: R0 := 0
00020e92: R30 := 0x408950
00020e94: call @strtok_r with return %00020e96

00020e96:
00020e9a: when R0 = 0 goto %00020e98
0003592d: goto %00020f56

00020f56:
00020f59: R30 := 0x408958
00020f5b: call @strdup with return %00020f5d

00020f5d:
00020f63: mem := mem with [R20 + 0x30, el]:u64 <- R0
0003592e: goto %00020e98

00020e98:
00020ea1: R2 := R19
00020ea7: R1 := R25 + 0x138
00020eac: R0 := 0
00020eb1: R30 := 0x40896C
00020eb3: call @strtok_r with return %00020eb5

00020eb5:
00020eb9: when R0 = 0 goto %00020eb7
0003592f: goto %00020f47

00020f47:
00020f4a: R30 := 0x408974
00020f4c: call @strdup with return %00020f4e

00020f4e:
00020f54: mem := mem with [R20 + 0x48, el]:u64 <- R0
00035930: goto %00020eb7

00020eb7:
00020ec1: R19 := mem[R20 + 0x30, el]:u64
00020ec6: when R19 = 0 goto %00020c22
00035931: goto %00020eca

00020eca:
00020ecf: R0 := mem[R20 + 0x48, el]:u64
00020ed4: when R0 = 0 goto %00020c22
00035932: goto %00020ed8

00020c22:
00020c25: R19 := 0xFFFFFFFD
00020c2b: R0 := R24
00020c30: R30 := 0x408D70
00020c32: call @free with return %00020314

00020314:
0002031c: R0 := mem[R31 + 0x18, el]:u64
00020321: R30 := 0x408D78
00020323: call @free with return %00020325

00020325:
00020329: #873 := R31 + 0x80
0002032e: R27 := mem[#873, el]:u64
00020333: R28 := mem[#873 + 8, el]:u64
00020337: goto %0001fc16

00020ed8:
00020edb: R1 := 0x2F
00020ee0: R27 := 0xFFFFFFFF
00020ee5: R30 := 0x408994
00020ee7: call @strchr with return %00020ee9

00020ee9:
00020eed: R25 := R0
00020ef2: when R0 = 0 goto %00020c8c
00035933: goto %00020ef6

00020ef6:
00020ef9: R30 := 0x4089A0
00020efb: call @strlen with return %00020efd

00020efd:
00020f01: #896 := R0 - 3
00020f06: VF := extend:128[#896] <> extend:128[R0] - 3
00020f0b: CF := pad:128[#896] <> pad:128[R0] + 0xFFFFFFFFFFFFFFFD
00020f0f: ZF := #896 = 0
00020f13: NF := 63:63[#896]
00020f19: when ~(CF & ~ZF) goto %00020c8c
00035934: goto %00020f1d

00020f1d:
00020f20: R30 := 0x4089AC
00020f22: call @__ctype_b_loc with return %00020f24

00020f24:
00020f29: R1 := pad:64[mem[R25 + 1]]
00020f30: R3 := mem[R0, el]:u64
00020f36: R0 := pad:64[7:0[R1].0]
00020f3e: R0 := pad:64[mem[R3 + R0, el]:u16]
00020f43: when 11:11[R0] goto %00020c42
00035935: goto %00020c8c

00020c42:
00020c47: R0 := pad:64[mem[R25 + 3]]
00020c4e: R1 := pad:64[31:0[R1] + (29:0[R1].0)]
00020c54: R4 := pad:64[31:0[R0] - 0x210]
00020c5a: R2 := pad:64[7:0[R0].0]
00020c61: R0 := pad:64[31:0[R4] + (30:0[R1].0)]
00020c69: R1 := pad:64[mem[R3 + R2, el]:u16]
00020c6e: VF := 0
00020c71: CF := 0
00020c75: ZF := pad:64[11:11[R1].0] = 0
00020c78: NF := 0
00020c86: when ZF <> 1 goto %00020c7e
00020c87: goto %00020c82

00020c82:
00020c83: R27 := pad:64[31:0[R27]]
00020c89: goto %00020c85

00020c7e:
00020c7f: R27 := pad:64[31:0[R0]]
00020c88: goto %00020c85

00020c85:
00020c8e: goto %00020c8c

00020c8c:
00020c95: mem := mem with [R20 + 0x24, el]:u32 <- 31:0[R27]
00020c9b: R0 := R19
00020ca0: R1 := 0x414000
00020ca6: R1 := R1 + 0xF0
00020cab: R30 := 0x4089D4
00020cad: call @strstr with return %00020caf

00020caf:
00020cb2: VF := 0
00020cb5: CF := 1
00020cb9: ZF := R0 = 0
00020cbd: NF := 63:63[R0]
00020cc3: R0 := R0 + 3
00020cc8: R1 := 0x2F
00020cd6: when ZF <> 1 goto %00020cce
00020cd7: goto %00020cd2

00020cd2:
00020cd3: R19 := R19
00020cd9: goto %00020cd5

00020cce:
00020ccf: R19 := R0
00020cd8: goto %00020cd5

00020cd5:
00020cdf: R0 := R19
00020ce4: R30 := 0x4089EC
00020ce6: call @strchr with return %00020ce8

00020ce8:
00020cee: mem := mem with [R31 + 0x20, el]:u64 <- R0
00020cf4: R25 := R0
00020cf9: when R0 = 0 goto %000208dc
00035936: goto %00020cfd

000208dc:
000208e0: R0 := R19
000208e5: R30 := 0x408EB4
000208e7: call @strlen with return %000208e9

000208e9:
000208ed: R2 := pad:64[31:0[R0]]
000208f2: R1 := 0
000208f8: R0 := R19
000208fd: R30 := 0x408EC4
000208ff: call @substr with return %00020901

00020901:
00020905: R27 := R0
0002090a: R0 := 0x413000
00020910: R0 := R0 + 0x5C8
00020915: R30 := 0x408ED4
00020917: call @strdup with return %00020919

00020919:
0002091f: mem := mem with [R20 + 0x38, el]:u64 <- R0
00020923: goto %000204c5

00020cfd:
00020d02: R2 := pad:64[31:0[R0] + ~31:0[R19] + 1]
00020d07: R1 := 0
00020d0d: R0 := R19
00020d12: R30 := 0x408A08
00020d14: call @substr with return %00020d16

00020d16:
00020d1a: R27 := R0
00020d1f: R25 := 0
00020d26: R0 := mem[R31 + 0x20, el]:u64
00020d2b: R30 := 0x408A18
00020d2d: call @strdup with return %00020d2f

00020d2f:
00020d35: mem := mem with [R20 + 0x38, el]:u64 <- R0
00020d39: goto %000204c5

000204c5:
000204c9: R2 := R22
000204cf: R1 := R23
000204d5: R0 := pad:64[31:0[R21]]
000204da: R30 := 0x408BE8
000204dc: call @so_recvln with return %000204de

000204de:
000204e2: R19 := pad:64[31:0[R0]]
000204e9: R0 := mem[R31 + 0x18, el]:u64
000204ee: R30 := 0x408BF4
000204f0: call @trimr with return %000204f2

000204f2:
000204f5: VF := 0
000204f8: CF := 1
000204fc: ZF := 31:0[R19] = 0
00020500: NF := 31:31[R19]
00020508: when NF = VF & ~ZF goto %00020506
00035937: goto %00020814

00020506:
00020510: R0 := mem[R31 + 0x18, el]:u64
00020515: R30 := 0x408C84
00020518: call @is_http_header with return %00020796

00020796:
0002079a: when 31:0[R0] <> 0 goto %00020798
00035938: goto %000207fb

00020798:
000207a2: R0 := mem[R31 + 0x18, el]:u64
000207a9: R28 := mem[R20 + 8, el]:u64
000207ae: R30 := 0x408CA4
000207b0: call @get_http_header_name with return %000207b2

000207b2:
000207b6: R1 := R0
000207bd: R0 := mem[R31 + 0x18, el]:u64
000207c5: mem := mem with [R31 + 8, el]:u64 <- R1
000207ca: R30 := 0x408CB4
000207cc: call @get_http_header_value with return %000207ce

000207ce:
000207d2: R2 := R0
000207d9: R1 := mem[R31 + 8, el]:u64
000207df: R0 := R28
000207e4: R4 := 0
000207e9: R3 := 0
000207ee: R30 := 0x408CCC
000207f0: call @hlist_add with return %000207f2

000207f2:
000207f8: mem := mem with [R20 + 8, el]:u64 <- R0
000207fd: goto %000207fb

000207fb:
00020803: R0 := mem[R31 + 0x18, el]:u64
0002080a: R0 := pad:64[mem[R0]]
0002080f: when 31:0[R0] <> 0 goto %000204c5
00035939: goto %00020813

00020813:
00020816: goto %00020814

00020814:
0002081c: R0 := pad:64[mem[R20, el]:u32]
00020822: when 31:0[R0] = 0 goto %00020820
0003593a: goto %000208a1

000208a1:
000208a5: when R27 = 0 goto %000208a3
0003593b: goto %0002092c

0002092c:
00020931: R0 := pad:64[mem[R27]]
00020937: when 31:0[R0] <> 0 goto %00020935
0003593c: goto %000208a3

00020935:
0002093f: R0 := mem[R20 + 8, el]:u64
00020944: R22 := 0x414000
0002094a: R22 := R22 + 0x118
00020950: R1 := R22
00020955: R30 := 0x408DBC
00020957: call @hlist_get with return %00020959

00020959:
0002095d: when R0 = 0 goto %0002095b
0003593d: goto %0002098e

0002095b:
00020965: R0 := mem[R20 + 8, el]:u64
0002096a: R4 := 1
00020970: R1 := R22
00020976: R2 := R27
0002097c: R3 := pad:64[31:0[R4]]
00020981: R30 := 0x408FB8
00020983: call @hlist_add with return %00020985

00020985:
0002098b: mem := mem with [R20 + 8, el]:u64 <- R0
00020990: goto %0002098e

0002098e:
00020996: R0 := pad:64[mem[R27]]
0002099c: #893 := 31:0[R0] - 0x5B
000209a1: VF := extend:64[#893] <> extend:64[31:0[R0]] - 0x5B
000209a6: CF := pad:64[#893] <> pad:64[31:0[R0]] + 0xFFFFFFA5
000209aa: ZF := #893 = 0
000209ae: NF := 31:31[#893]
000209b4: when ZF goto %000209b2
0003593e: goto %00020bb0

000209b2:
000209ba: R1 := 0x5D
000209c0: R0 := R27
000209c5: R30 := 0x408F64
000209c7: call @strchr with return %000209c9

000209c9:
000209cd: R23 := R0
000209d3: R0 := R27 + 1
000209da: mem := mem with [R23] <- 0
000209df: R30 := 0x408F74
000209e1: call @strdup with return %000209e3

000209e3:
000209e9: mem := mem with [R20 + 0x40, el]:u64 <- R0
000209ef: R22 := R0
000209f6: R0 := pad:64[mem[R23 + 1]]
000209fc: #894 := 31:0[R0] - 0x3A
00020a01: VF := extend:64[#894] <> extend:64[31:0[R0]] - 0x3A
00020a06: CF := pad:64[#894] <> pad:64[31:0[R0]] + 0xFFFFFFC6
00020a0a: ZF := #894 = 0
00020a0e: NF := 31:31[#894]
00020a14: when ZF goto %00020a12
0003593f: goto %00020ba5

00020a12:
00020a1b: R0 := R23 + 2
00020a20: goto %00020a1e

00020ba5:
00020baa: R1 := pad:64[mem[R20 + 0x20, el]:u32]
00020bae: goto %00020a47

00020bb0:
00020bb4: R0 := R27
00020bb9: R1 := 0x3A
00020bbe: R30 := 0x408DD8
00020bc0: call @strchr with return %00020bc2

00020bc2:
00020bc6: R22 := R0
00020bcc: R0 := R27
00020bd1: when R22 = 0 goto %00020aa9
00035940: goto %00020bd5

00020aa9:
00020aac: R30 := 0x408F48
00020aae: call @strdup with return %00020ab0

00020ab0:
00020ab4: R22 := R0
00020abb: R1 := pad:64[mem[R20 + 0x20, el]:u32]
00020ac3: mem := mem with [R20 + 0x40, el]:u64 <- R0
00020ac7: goto %00020a47

00020bd5:
00020bda: mem := mem with [R22] <- 0
00020bde: R22 := R22 + 1
00020be3: R30 := 0x408DEC
00020be5: call @strdup with return %00020be7

00020be7:
00020bed: mem := mem with [R20 + 0x40, el]:u64 <- R0
00020bf3: R0 := R22
00035941: goto %00020a1e

00020a1e:
00020a24: R1 := 0
00020a29: R2 := 0xA
00020a2e: R30 := 0x408E00
00020a30: call @strtol with return %00020a32

00020a32:
00020a36: R1 := R0
00020a3d: R22 := mem[R20 + 0x40, el]:u64
00020a45: mem := mem with [R20 + 0x20, el]:u32 <- 31:0[R0]
00035942: goto %00020a47

00020a47:
00020a4b: when 31:0[R1] <> 0 goto %00020a49
00035943: goto %00020b53

00020b53:
00020b58: R0 := mem[R20 + 0x30, el]:u64
00020b5d: R1 := 0x414000
00020b62: R2 := 5
00020b68: R1 := R1 + 0x480
00020b6d: R30 := 0x408E24
00020b70: call @strncasecmp with return %00020b72

00020b72:
00020b75: VF := 0
00020b78: CF := 1
00020b7c: ZF := 31:0[R0] = 0
00020b80: NF := 31:31[R0]
00020b85: R1 := 0x50
00020b8a: R0 := 0x1BB
00020b98: when ZF goto %00020b90
00020b99: goto %00020b94

00020b94:
00020b95: R0 := pad:64[31:0[R1]]
00020b9b: goto %00020b97

00020b90:
00020b91: R0 := pad:64[31:0[R0]]
00020b9a: goto %00020b97

00020b97:
00020ba3: mem := mem with [R20 + 0x20, el]:u32 <- 31:0[R0]
00035944: goto %00020a49

00020a49:
00020a51: when R22 = 0 goto %0001fcb2
00035945: goto %00020a55

00020a55:
00020a5a: R0 := pad:64[mem[R22]]
00020a60: when 31:0[R0] = 0 goto %00020a5e
00035946: goto %00020b0e

00020b0e:
00020b13: R0 := pad:64[mem[R20 + 0x20, el]:u32]
00020b18: when 31:0[R0] = 0 goto %00020a5e
00035947: goto %00020b1c

00020a5e:
00020a67: when R24 = 0 goto %00020a65
00035948: goto %00020af1

00020a65:
00020a6e: when R25 = 0 goto %00020a6c
00035949: goto %00020ac9

00020a6c:
00020a75: R0 := R27
00020a7a: R30 := 0x408FC8
00020a7c: call @free with return %00020a7e

00020a7e:
00020a83: R0 := mem[R31 + 0x18, el]:u64
00020a88: R30 := 0x408FD0
00020a8a: call @free with return %00020a8c

00020a8c:
00020a8f: goto %00020a8d

00020ac9:
00020acd: R0 := R25
00020ad2: R30 := 0x408F28
00020ad4: call @free with return %00020ad6

00020ad6:
00020ada: R0 := R27
00020adf: R30 := 0x408F30
00020ae1: call @free with return %00020ae3

00020ae3:
00020ae8: R0 := mem[R31 + 0x18, el]:u64
00020aed: R30 := 0x408F38
00020aef: call @free with return %00020a8d

00020a8d:
00020a94: #895 := R31 + 0x80
00020a99: R27 := mem[#895, el]:u64
00020a9e: R28 := mem[#895 + 8, el]:u64
00020aa3: R19 := 0xFFFFFFFB
00020aa7: goto %0001fc16

00020af1:
00020af5: R0 := R24
00020afa: R19 := 0xFFFFFFFB
00020aff: R30 := 0x408F14
00020b01: call @free with return %00020b03

00020b03:
00020b06: when R25 <> 0 goto %00020887
0003594a: goto %00020b0a

00020b0a:
00020b0c: goto %0002087a

00020b1c:
00020b20: when R24 = 0 goto %00020b1e
0003594b: goto %00020b3b

00020b1e:
00020b26: when R25 = 0 goto %0002087a
0003594c: goto %00020b2a

00020b2a:
00020b2e: R0 := R25
00020b33: R30 := 0x408F9C
00020b35: call @free with return %00020b37

00020b37:
00020b39: goto %0002087a

00020b3b:
00020b3f: R0 := R24
00020b44: R30 := 0x408E58
00020b46: call @free with return %00020b48

00020b48:
00020b4b: when R25 <> 0 goto %00020887
0003594d: goto %00020b4f

00020b4f:
00020b51: goto %0002087a

000208a3:
000208ad: R0 := pad:64[mem[R26, el]:u32]
000208b3: when 31:0[R0] <> 0 goto %000208b1
0003594e: goto %00020925

000208b1:
000208ba: R2 := R24
000208bf: R1 := 0x414000
000208c4: R0 := 2
000208ca: R1 := R1 + 0x458
000208cf: R19 := 0xFFFFFFFA
000208d4: R30 := 0x408EA8
000208d6: call @__printf_chk with return %000208d8

000208d8:
000208da: goto %00020820

00020925:
00020928: R19 := 0xFFFFFFFA
0003594f: goto %00020820

00020820:
00020829: when R24 = 0 goto %00020827
00035950: goto %00020894

00020894:
00020898: R0 := R24
0002089d: R30 := 0x408C2C
0002089f: call @free with return %00020827

00020827:
00020830: when R25 = 0 goto %0002082e
00035951: goto %00020887

00020887:
0002088b: R0 := R25
00020890: R30 := 0x408C38
00020892: call @free with return %0002082e

0002082e:
00020837: when R27 = 0 goto %00020835
00035952: goto %0002087a

0002087a:
0002087e: R0 := R27
00020883: R30 := 0x408C44
00020885: call @free with return %00020835

00020835:
0002083f: R0 := mem[R31 + 0x18, el]:u64
00020844: R30 := 0x408C4C
00020846: call @free with return %00020848

00020848:
0002084c: #892 := R31 + 0x80
00020851: R27 := mem[#892, el]:u64
00020856: R28 := mem[#892 + 8, el]:u64
0002085b: R0 := 1
00020860: VF := 0
00020863: CF := 1
00020867: ZF := 31:0[R19] = 0
0002086b: NF := 31:31[R19]
00020872: when NF = VF & ~ZF goto %0001fc50
00035953: goto %00020876

00020876:
00020878: goto %0001fc16

0001fc16:
0001fc1b: R0 := pad:64[mem[R26, el]:u32]
0001fc21: when 31:0[R0] <> 0 goto %0001fc1f
00035954: goto %0001fc48

0001fc1f:
0001fc28: R3 := pad:64[31:0[R19]]
0001fc2e: R2 := pad:64[31:0[R21]]
0001fc33: R1 := 0x414000
0001fc38: R0 := 2
0001fc3e: R1 := R1 + 0x4D8
0001fc43: R30 := 0x408C78
0001fc45: call @__printf_chk with return %0001fc47

0001fc47:
0001fc4a: goto %0001fc48

0001fc48:
0001fc4e: R0 := 0
00035955: goto %0001fc50

0001fc50:
0001fc53: R1 := 0x42F000
0001fc5a: R1 := mem[R1 + 0xFB8, el]:u64
0001fc61: R3 := mem[R31 + 0x28, el]:u64
0001fc68: R2 := mem[R1, el]:u64
0001fc6e: #846 := ~R2
0001fc73: #847 := R3 + ~R2
0001fc79: VF := extend:128[#847 + 1] <> extend:128[R3] + extend:128[#846] + 1
0001fc7f: CF := pad:128[#847 + 1] <> pad:128[R3] + pad:128[#846] + 1
0001fc83: ZF := #847 + 1 = 0
0001fc87: NF := 63:63[#847 + 1]
0001fc8b: R3 := #847 + 1
0001fc90: R2 := 0
0001fc96: when ZF <> 1 goto %0001fc94
00035956: goto %00020158

0001fc94:
0001fc9d: #848 := R31 + 0x80
0001fca3: mem := mem with [#848, el]:u64 <- R27
0001fca9: mem := mem with [#848 + 8, el]:u64 <- R28
0001fcae: R30 := 0x408FE4
0001fcb0: call @__stack_chk_fail with return %0001fcb2

0001fcb2:
0001fcb5: R3 := 0x417000
0001fcba: R1 := 0x414000
0001fcbf: R0 := 0x414000
0001fcc5: R3 := R3 + 0x308
0001fccb: R1 := R1 + 0x488
0001fcd1: R0 := R0 + 0x4C0
0001fcd6: R2 := 0xFF
0001fcdb: R30 := 0x409004
0001fcdd: call @__assert_fail with return %00035957

00035957:
00035958: call @headers_send with noreturn

00020158:
0002015c: #865 := R31 + 0x30
00020161: R29 := mem[#865, el]:u64
00020166: R30 := mem[#865 + 8, el]:u64
0002016c: #866 := R31 + 0x40
00020171: R19 := mem[#866, el]:u64
00020176: R20 := mem[#866 + 8, el]:u64
0002017c: #867 := R31 + 0x50
00020181: R21 := mem[#867, el]:u64
00020186: R22 := mem[#867 + 8, el]:u64
0002018c: #868 := R31 + 0x60
00020191: R23 := mem[#868, el]:u64
00020196: R24 := mem[#868 + 8, el]:u64
0002019c: #869 := R31 + 0x70
000201a1: R25 := mem[#869, el]:u64
000201a6: R26 := mem[#869 + 8, el]:u64
000201ac: R31 := R31 + 0x90
000201b1: R1 := 0
000201b6: R2 := 0
000201bb: R3 := 0
000201c0: R4 := 0
000201c5: R16 := 0
000201ca: R17 := 0
000201cf: call R30 with noreturn

00035959: sub headers_send(headers_send_result)
00035e98: headers_send_result :: out u32 = low:32[R0]

0001fcdf:
0001fce3: #849 := R31 - 0x50
0001fce9: mem := mem with [#849, el]:u64 <- R29
0001fcef: mem := mem with [#849 + 8, el]:u64 <- R30
0001fcf3: R31 := #849
0001fcf9: R29 := R31
0001fcff: #850 := R31 + 0x20
0001fd05: mem := mem with [#850, el]:u64 <- R21
0001fd0b: mem := mem with [#850 + 8, el]:u64 <- R22
0001fd11: R22 := pad:64[31:0[R0]]
0001fd18: R0 := mem[R1 + 0x48, el]:u64
0001fd1e: #851 := R31 + 0x30
0001fd24: mem := mem with [#851, el]:u64 <- R23
0001fd2a: mem := mem with [#851 + 8, el]:u64 <- R24
0001fd30: R23 := R1
0001fd36: #852 := R31 + 0x10
0001fd3c: mem := mem with [#852, el]:u64 <- R19
0001fd42: mem := mem with [#852 + 8, el]:u64 <- R20
0001fd4a: mem := mem with [R31 + 0x40, el]:u64 <- R25
0001fd4f: R30 := 0x40902C
0001fd51: call @strlen with return %0001fd53

0001fd53:
0001fd58: R1 := pad:64[mem[R23, el]:u32]
0001fd5e: R20 := pad:64[31:0[R0] + 0x14]
0001fd64: when 31:0[R1] = 0 goto %0001fd62
0003595a: goto %00020128

0001fd62:
0001fd6c: R0 := mem[R23 + 0x50, el]:u64
0001fd71: R30 := 0x409174
0001fd73: call @strlen with return %0001fd75

0001fd75:
0001fd7a: R20 := pad:64[31:0[R20] + 31:0[R0]]
0001fd7f: goto %0001fd7d

00020128:
0002012d: R0 := mem[R23 + 0x28, el]:u64
00020132: R30 := 0x409040
00020134: call @strlen with return %00020136

00020136:
0002013a: R19 := R0
00020141: R0 := mem[R23 + 0x30, el]:u64
00020146: R30 := 0x40904C
00020148: call @strlen with return %0002014a

0002014a:
0002014f: R19 := pad:64[31:0[R19] + 31:0[R0]]
00020156: R20 := pad:64[31:0[R19] + 31:0[R20]]
0003595b: goto %0001fd7d

0001fd7d:
0001fd85: R21 := mem[R23 + 8, el]:u64
0001fd8b: when R21 = 0 goto %0001fd89
0003595c: goto %000200e2

000200e2:
0003595d: goto %000200e4

000200e4:
000200e9: R0 := mem[R21, el]:u64
000200ef: R20 := pad:64[31:0[R20] + 0x14]
000200f4: R30 := 0x40906C
000200f6: call @strlen with return %000200f8

000200f8:
000200fc: R19 := R0
00020103: R0 := mem[R21 + 8, el]:u64
00020108: R30 := 0x409078
0002010a: call @strlen with return %0002010c

0002010c:
00020111: R19 := pad:64[31:0[R19] + 31:0[R0]]
00020118: R21 := mem[R21 + 0x18, el]:u64
0002011f: R20 := pad:64[31:0[R20] + 31:0[R19]]
00020124: when R21 <> 0 goto %000200e4
0003595e: goto %0001fd89

0001fd89:
0001fd92: R25 := extend:64[31:0[R20]]
0001fd98: R0 := R25
0001fd9d: R30 := 0x409094
0001fd9f: call @zmalloc with return %0001fda1

0001fda1:
0001fda6: R21 := pad:64[mem[R23, el]:u32]
0001fdac: R24 := R0
0001fdb2: when 31:0[R21] <> 0 goto %0001fdb0
0003595f: goto %00020090

0001fdb0:
0001fdb9: #853 := R23 + 0x28
0001fdbe: R5 := mem[#853, el]:u64
0001fdc3: R6 := mem[#853 + 8, el]:u64
0001fdc9: R3 := R25
0001fdd0: R7 := mem[R23 + 0x48, el]:u64
0001fdd6: R1 := R25
0001fddb: R4 := 0x414000
0001fde0: R2 := 2
0001fde6: R4 := R4 + 0x4F8
0001fdeb: R30 := 0x4091E0
0001fded: call @__snprintf_chk with return %0001fdef

0001fdef:
0001fdf3: R21 := pad:64[31:0[R0]]
0001fdf8: goto %0001fdf6

00020090:
00020095: R1 := pad:64[mem[R23 + 0x14, el]:u32]
0002009b: when 31:0[R1] = 0 goto %00020099
00035960: goto %0001fdf6

00020099:
000200a2: #864 := R23 + 0x48
000200a7: R5 := mem[#864, el]:u64
000200ac: R7 := mem[#864 + 8, el]:u64
000200b2: R3 := R25
000200b9: R6 := pad:64[mem[R23 + 0x10, el]:u32]
000200bf: R1 := R25
000200c4: R4 := 0x414000
000200c9: R2 := 2
000200cf: R4 := R4 + 0x508
000200d4: R30 := 0x40919C
000200d6: call @__snprintf_chk with return %000200d8

000200d8:
000200dc: R21 := pad:64[31:0[R0]]
000200e0: goto %0001fdf6

0001fdf6:
0001fdfe: R19 := mem[R23 + 8, el]:u64
0001fe04: when R19 = 0 goto %0001fe02
00035961: goto %00020001

00020001:
00020004: R23 := 0x414000
0002000a: R23 := R23 + 0x518
00035962: goto %0002000c

0002000c:
00020011: R5 := mem[R19, el]:u64
00020016: R6 := mem[R19 + 8, el]:u64
0002001c: R0 := extend:64[31:0[R21]]
00020022: #862 := ~R0
00020027: #863 := R25 + ~R0
0002002d: VF := extend:128[#863 + 1] <> extend:128[R25] + extend:128[#862] +
          1
00020033: CF := pad:128[#863 + 1] <> pad:128[R25] + pad:128[#862] + 1
00020037: ZF := #863 + 1 = 0
0002003b: NF := 63:63[#863 + 1]
00020042: R1 := pad:64[31:0[R20] + ~31:0[R21] + 1]
00020050: when CF goto %00020048
00020051: goto %0002004c

0002004c:
0002004d: R3 := R0
00020053: goto %0002004f

00020048:
00020049: R3 := R25
00020052: goto %0002004f

0002004f:
00020059: R4 := R23
00020060: R3 := R3 + ~R0 + 1
00020066: R1 := extend:64[31:0[R1]]
0002006d: R0 := R24 + R0
00020072: R2 := 2
00020077: R30 := 0x4090E4
00020079: call @__snprintf_chk with return %0002007b

0002007b:
00020080: R21 := pad:64[31:0[R21] + 31:0[R0]]
00020087: R19 := mem[R19 + 0x18, el]:u64
0002008c: when R19 <> 0 goto %0002000c
00035963: goto %0001fe02

0001fe02:
0001fe0b: R2 := R25
0001fe10: R1 := 0x414000
0001fe16: R1 := R1 + 0x500
0001fe1c: R0 := R24
0001fe21: R30 := 0x409104
0001fe23: call @strlcat with return %0001fe25

0001fe25:
0001fe29: R0 := pad:64[31:0[R22]]
0001fe2e: R30 := 0x40910C
0001fe30: call @so_closed with return %0001fe32

0001fe32:
0001fe36: when 31:0[R0] = 0 goto %0001fe34
00035964: goto %0001ffef

0001fe34:
0001fe3d: R21 := pad:64[31:0[R21] + 2]
0001fe43: R1 := R24
0001fe49: R0 := pad:64[31:0[R22]]
0001fe4f: R2 := extend:64[31:0[R21]]
0001fe54: R30 := 0x4091FC
0001fe56: call @write_wrapper with return %0001fe58

0001fe58:
0001fe5c: R19 := R0
0001fe62: R0 := R24
0001fe68: R20 := pad:64[31:0[R19]]
0001fe6d: R30 := 0x40920C
0001fe6f: call @free with return %0001fe71

0001fe71:
0001fe74: VF := 0
0001fe77: CF := 1
0001fe7b: ZF := 31:0[R19] = 0
0001fe7f: NF := 31:31[R19]
0001fe87: when ~(NF = VF & ~ZF) goto %0001fe85
00035965: goto %0001ff49

0001ff49:
0001ff4c: R0 := 1
0001ff52: #857 := ~31:0[R19]
0001ff57: #858 := 31:0[R21] + ~31:0[R19]
0001ff5d: VF := extend:64[#858 + 1] <> extend:64[31:0[R21]] + extend:64[#857]
          + 1
0001ff63: CF := pad:64[#858 + 1] <> pad:64[31:0[R21]] + pad:64[#857] + 1
0001ff67: ZF := #858 + 1 = 0
0001ff6b: NF := 31:31[#858 + 1]
0001ff70: when ZF <> 1 goto %0001fe85
00035966: goto %0001ff74

0001ff74:
0001ff78: #859 := R31 + 0x10
0001ff7d: R19 := mem[#859, el]:u64
0001ff82: R20 := mem[#859 + 8, el]:u64
0001ff88: #860 := R31 + 0x20
0001ff8d: R21 := mem[#860, el]:u64
0001ff92: R22 := mem[#860 + 8, el]:u64
0001ff98: #861 := R31 + 0x30
0001ff9d: R23 := mem[#861, el]:u64
0001ffa2: R24 := mem[#861 + 8, el]:u64
0001ffa9: R25 := mem[R31 + 0x40, el]:u64
0001ffb0: R29 := mem[R31, el]:u64
0001ffb5: R30 := mem[R31 + 8, el]:u64
0001ffb9: R31 := R31 + 0x50
0001ffbe: R1 := 0
0001ffc3: R2 := 0
0001ffc8: R3 := 0
0001ffcd: R4 := 0
0001ffd2: R5 := 0
0001ffd7: R6 := 0
0001ffdc: R7 := 0
0001ffe1: R16 := 0
0001ffe6: R17 := 0
0001ffeb: call R30 with noreturn

0001ffef:
0001fff2: R20 := 0xFFFFFC19
0001fff8: R0 := R24
0001fffd: R30 := 0x40911C
0001ffff: call @free with return %0001fe85

0001fe85:
0001fe8d: R0 := 0x42F000
0001fe94: R0 := mem[R0 + 0xF30, el]:u64
0001fe9b: R0 := pad:64[mem[R0, el]:u32]
0001fea1: when 31:0[R0] <> 0 goto %0001fe9f
00035967: goto %0001fec8

0001fe9f:
0001fea8: R3 := pad:64[31:0[R20]]
0001feae: R2 := pad:64[31:0[R22]]
0001feb3: R1 := 0x414000
0001feb8: R0 := 2
0001febe: R1 := R1 + 0x528
0001fec3: R30 := 0x4091BC
0001fec5: call @__printf_chk with return %0001fec7

0001fec7:
0001feca: goto %0001fec8

0001fec8:
0001fecf: #854 := R31 + 0x10
0001fed4: R19 := mem[#854, el]:u64
0001fed9: R20 := mem[#854 + 8, el]:u64
0001fede: R0 := 0
0001fee4: #855 := R31 + 0x20
0001fee9: R21 := mem[#855, el]:u64
0001feee: R22 := mem[#855 + 8, el]:u64
0001fef4: #856 := R31 + 0x30
0001fef9: R23 := mem[#856, el]:u64
0001fefe: R24 := mem[#856 + 8, el]:u64
0001ff05: R25 := mem[R31 + 0x40, el]:u64
0001ff0c: R29 := mem[R31, el]:u64
0001ff11: R30 := mem[R31 + 8, el]:u64
0001ff15: R31 := R31 + 0x50
0001ff1a: R1 := 0
0001ff1f: R2 := 0
0001ff24: R3 := 0
0001ff29: R4 := 0
0001ff2e: R5 := 0
0001ff33: R6 := 0
0001ff38: R7 := 0
0001ff3d: R16 := 0
0001ff42: R17 := 0
0001ff47: call R30 with noreturn

00035968: sub hlist_add(hlist_add_result)
00035e99: hlist_add_result :: out u32 = low:32[R0]

000187f1:
000187f8: #390 := R31 - 0x40
000187fe: mem := mem with [#390, el]:u64 <- R29
00018804: mem := mem with [#390 + 8, el]:u64 <- R30
00018808: R31 := #390
0001880d: VF := 0
00018810: CF := 1
00018814: ZF := R1 = 0
00018818: NF := 63:63[R1]
0001881e: #391 := ZF <> 1
00018821: VF := 0
00018825: CF := #391
0001882a: ZF := R2 = 0 | ~#391
0001882f: NF := #391 & 63:63[R2]
00018835: R29 := R31
0001883b: #392 := R31 + 0x10
00018841: mem := mem with [#392, el]:u64 <- R19
00018847: mem := mem with [#392 + 8, el]:u64 <- R20
0001884d: #393 := R31 + 0x20
00018853: mem := mem with [#393, el]:u64 <- R21
00018859: mem := mem with [#393 + 8, el]:u64 <- R22
0001885f: R22 := R0
00018865: when ZF <> 1 goto %00018863
00035969: goto %000189d9

00018863:
0001886c: R21 := R1
00018872: R20 := R2
00018877: R0 := 0x20
0001887d: #394 := R31 + 0x30
00018883: mem := mem with [#394, el]:u64 <- R23
00018889: mem := mem with [#394 + 8, el]:u64 <- R24
0001888f: R24 := pad:64[31:0[R3]]
00018895: R23 := pad:64[31:0[R4]]
0001889a: R30 := 0x40F34C
0001889c: call @malloc with return %0001889e

0001889e:
000188a2: R19 := R0
000188a8: #395 := 31:0[R24] - 1
000188ad: VF := extend:64[#395] <> extend:64[31:0[R24]] - 1
000188b2: CF := pad:64[#395] <> pad:64[31:0[R24]] + 0xFFFFFFFF
000188b6: ZF := #395 = 0
000188ba: NF := 31:31[#395]
000188c0: when ZF goto %000188be
0003596a: goto %000188d7

000188be:
000188c7: R0 := R21
000188cc: R30 := 0x40F398
000188ce: call @strdup with return %000188d0

000188d0:
000188d4: R21 := R0
000188d9: goto %000188d7

000188d7:
000188e0: mem := mem with [R19, el]:u64 <- R21
000188e6: #396 := 31:0[R23] - 1
000188eb: VF := extend:64[#396] <> extend:64[31:0[R23]] - 1
000188f0: CF := pad:64[#396] <> pad:64[31:0[R23]] + 0xFFFFFFFF
000188f4: ZF := #396 = 0
000188f8: NF := 31:31[#396]
000188fe: when ZF goto %000188fc
0003596b: goto %00018915

000188fc:
00018905: R0 := R20
0001890a: R30 := 0x40F3A8
0001890c: call @strdup with return %0001890e

0001890e:
00018912: R20 := R0
00018917: goto %00018915

00018915:
0001891e: mem := mem with [R19 + 8, el]:u64 <- R20
00018925: mem := mem with [R19 + 0x10, el]:u32 <- 0
0001892c: mem := mem with [R19 + 0x18, el]:u64 <- 0
00018932: when R22 = 0 goto %00018930
0003596c: goto %000189a6

00018930:
00018939: #397 := R31 + 0x30
0001893e: R23 := mem[#397, el]:u64
00018943: R24 := mem[#397 + 8, el]:u64
00018948: goto %00018946

000189a6:
000189aa: R1 := R22
0003596d: goto %000189ac

000189ac:
000189b0: R0 := R1
000189b7: R1 := mem[R1 + 0x18, el]:u64
000189bc: when R1 <> 0 goto %000189ac
0003596e: goto %000189c0

000189c0:
000189c4: #400 := R31 + 0x30
000189c9: R23 := mem[#400, el]:u64
000189ce: R24 := mem[#400 + 8, el]:u64
000189d6: mem := mem with [R0 + 0x18, el]:u64 <- R19
000189db: goto %000189d9

000189d9:
000189e0: R19 := R22
0003596f: goto %00018946

00018946:
0001894d: #398 := R31 + 0x20
00018952: R21 := mem[#398, el]:u64
00018957: R22 := mem[#398 + 8, el]:u64
0001895d: R0 := R19
00018963: #399 := R31 + 0x10
00018968: R19 := mem[#399, el]:u64
0001896d: R20 := mem[#399 + 8, el]:u64
00018974: R29 := mem[R31, el]:u64
00018979: R30 := mem[R31 + 8, el]:u64
0001897d: R31 := R31 + 0x40
00018982: R1 := 0
00018987: R2 := 0
0001898c: R3 := 0
00018991: R4 := 0
00018996: R16 := 0
0001899b: R17 := 0
000189a0: call R30 with noreturn

00035970: sub hlist_count(hlist_count_result)
00035e9a: hlist_count_result :: out u32 = low:32[R0]

00018a06:
00018a0a: R1 := R0
00018a0f: R0 := 0
00018a15: when R1 = 0 goto %00018a13
00035971: goto %00018a22

00018a22:
00035972: goto %00018a24

00018a24:
00018a29: R1 := mem[R1 + 0x18, el]:u64
00018a2f: R0 := pad:64[31:0[R0] + 1]
00018a34: when R1 <> 0 goto %00018a24
00035973: goto %00018a13

00018a13:
00018a1b: R1 := 0
00018a20: call R30 with noreturn

00035974: sub hlist_del(hlist_del_result)
00035e9b: hlist_del_result :: out u32 = low:32[R0]

00018632:
00018636: #379 := R31 - 0x40
0001863c: mem := mem with [#379, el]:u64 <- R29
00018642: mem := mem with [#379 + 8, el]:u64 <- R30
00018646: R31 := #379
0001864c: R29 := R31
00018652: #380 := R31 + 0x20
00018658: mem := mem with [#380, el]:u64 <- R21
0001865e: mem := mem with [#380 + 8, el]:u64 <- R22
00018664: when R0 = 0 goto %00018662
00035975: goto %00018b67

00018662:
0001866a: R21 := 0
0001866f: goto %0001866d

00018b67:
00018b6b: R21 := R1
00018b70: R22 := 0
00018b76: #405 := R31 + 0x10
00018b7c: mem := mem with [#405, el]:u64 <- R19
00018b82: mem := mem with [#405 + 8, el]:u64 <- R20
00018b88: R19 := R0
00018b90: mem := mem with [R31 + 0x30, el]:u64 <- R23
00018b96: R23 := R0
00018b9b: goto %00018b99

00018b99:
00018ba1: R20 := mem[R19, el]:u64
00018ba7: R1 := R21
00018bad: R0 := R20
00018bb2: R30 := 0x40F480
00018bb4: call @strcasecmp with return %00018bb6

00018bb6:
00018bba: when 31:0[R0] <> 0 goto %00018bb8
00035976: goto %00018bf4

00018bf4:
00018bf9: R21 := mem[R19 + 0x18, el]:u64
00018bff: R0 := R20
00018c04: R30 := 0x40F490
00018c06: call @free with return %00018c08

00018c08:
00018c0d: R0 := mem[R19 + 8, el]:u64
00018c12: R30 := 0x40F498
00018c14: call @free with return %00018c16

00018c16:
00018c1a: R0 := R19
00018c1f: R30 := 0x40F4A0
00018c21: call @free with return %00018c23

00018c23:
00018c26: when R22 = 0 goto %000186af
00035977: goto %00018c2a

000186af:
000186b3: #382 := R31 + 0x10
000186b8: R19 := mem[#382, el]:u64
000186bd: R20 := mem[#382 + 8, el]:u64
000186c4: R23 := mem[R31 + 0x30, el]:u64
000186c8: goto %0001866d

00018c2a:
00018c30: mem := mem with [R22 + 0x18, el]:u64 <- R21
00035978: goto %00018bd2

00018bb8:
00018bc2: R2 := mem[R19 + 0x18, el]:u64
00018bc8: R22 := R19
00018bce: R19 := R2
00018bd4: when R2 = 0 goto %00018bd2
00035979: goto %00018b99

00018bd2:
00018bdb: #406 := R31 + 0x10
00018be0: R19 := mem[#406, el]:u64
00018be5: R20 := mem[#406 + 8, el]:u64
00018beb: R21 := R23
00018bf2: R23 := mem[R31 + 0x30, el]:u64
0003597a: goto %0001866d

0001866d:
00018674: R0 := R21
0001867a: #381 := R31 + 0x20
0001867f: R21 := mem[#381, el]:u64
00018684: R22 := mem[#381 + 8, el]:u64
0001868b: R29 := mem[R31, el]:u64
00018690: R30 := mem[R31 + 8, el]:u64
00018694: R31 := R31 + 0x40
00018699: R1 := 0
0001869e: R2 := 0
000186a3: R16 := 0
000186a8: R17 := 0
000186ad: call R30 with noreturn

0003597b: sub hlist_dump(hlist_dump_result)
00035e9c: hlist_dump_result :: out u32 = low:32[R0]

00011070:
00011074: when R0 = 0 goto %00011072
0003597c: goto %0001160d

00011072:
0001107a: R0 := 0
0001107f: R1 := 0
00011084: R2 := 0
00011089: R3 := 0
0001108e: R16 := 0
00011093: R17 := 0
00011098: call R30 with noreturn

0001160d:
00011611: #29 := R31 - 0x20
00011617: mem := mem with [#29, el]:u64 <- R29
0001161d: mem := mem with [#29 + 8, el]:u64 <- R30
00011621: R31 := #29
00011627: R29 := R31
0001162d: #30 := R31 + 0x10
00011633: mem := mem with [#30, el]:u64 <- R19
00011639: mem := mem with [#30 + 8, el]:u64 <- R20
0001163e: R20 := 0x416000
00011644: R19 := R0
0001164a: R20 := R20 + 0xF10
0003597d: goto %0001164c

0001164c:
00011651: R2 := mem[R19, el]:u64
00011656: R3 := mem[R19 + 8, el]:u64
0001165c: R1 := R20
00011661: R0 := 2
00011666: R30 := 0x40F760
00011669: call @__printf_chk with return %0001166b

0001166b:
00011670: R19 := mem[R19 + 0x18, el]:u64
00011675: when R19 <> 0 goto %0001164c
0003597e: goto %00011679

00011679:
0001167d: #31 := R31 + 0x10
00011682: R19 := mem[#31, el]:u64
00011687: R20 := mem[#31 + 8, el]:u64
0001168e: R29 := mem[R31, el]:u64
00011693: R30 := mem[R31 + 8, el]:u64
00011697: R31 := R31 + 0x20
0001169c: R0 := 0
000116a1: R1 := 0
000116a6: R2 := 0
000116ab: R3 := 0
000116b0: R16 := 0
000116b5: R17 := 0
000116ba: call R30 with noreturn

0003597f: sub hlist_dup(hlist_dup_result)
00035e9d: hlist_dup_result :: out u32 = low:32[R0]

00018600:
00018607: when R0 = 0 goto %00018605
00035980: goto %00018c32

00018605:
0001860d: R0 := 0
00018612: R1 := 0
00018617: R2 := 0
0001861c: R3 := 0
00018621: R4 := 0
00018626: R16 := 0
0001862b: R17 := 0
00018630: call R30 with noreturn

00018c32:
00018c36: #407 := R31 - 0x20
00018c3c: mem := mem with [#407, el]:u64 <- R29
00018c42: mem := mem with [#407 + 8, el]:u64 <- R30
00018c46: R31 := #407
00018c4c: R29 := R31
00018c54: mem := mem with [R31 + 0x10, el]:u64 <- R19
00018c5a: R19 := R0
00018c5f: R0 := 0
00035981: goto %00018c61

00018c61:
00018c66: R1 := mem[R19, el]:u64
00018c6b: R2 := mem[R19 + 8, el]:u64
00018c70: R4 := 1
00018c76: R3 := pad:64[31:0[R4]]
00018c7b: R30 := 0x40F3E8
00018c7d: call @hlist_add with return %00018c7f

00018c7f:
00018c84: R19 := mem[R19 + 0x18, el]:u64
00018c89: when R19 <> 0 goto %00018c61
00035982: goto %00018c8d

00018c8d:
00018c92: R19 := mem[R31 + 0x10, el]:u64
00018c99: R29 := mem[R31, el]:u64
00018c9e: R30 := mem[R31 + 8, el]:u64
00018ca2: R31 := R31 + 0x20
00018ca7: R1 := 0
00018cac: R2 := 0
00018cb1: R3 := 0
00018cb6: R4 := 0
00018cbb: R16 := 0
00018cc0: R17 := 0
00018cc5: call R30 with noreturn

00035983: sub hlist_free(hlist_free_result)
00035e9e: hlist_free_result :: out u32 = low:32[R0]

00011055:
00011059: when R0 = 0 goto %00011057
00035984: goto %000116bc

00011057:
0001105f: R0 := 0
00011064: R16 := 0
00011069: R17 := 0
0001106e: call R30 with noreturn

000116bc:
000116c0: #32 := R31 - 0x20
000116c6: mem := mem with [#32, el]:u64 <- R29
000116cc: mem := mem with [#32 + 8, el]:u64 <- R30
000116d0: R31 := #32
000116d6: R29 := R31
000116dc: #33 := R31 + 0x10
000116e2: mem := mem with [#33, el]:u64 <- R19
000116e8: mem := mem with [#33 + 8, el]:u64 <- R20
000116ee: R19 := R0
00035985: goto %000116f0

000116f0:
000116f4: R20 := R19
000116fb: R19 := mem[R19 + 0x18, el]:u64
00011702: R0 := mem[R20, el]:u64
00011707: R30 := 0x40F6F8
00011709: call @free with return %0001170b

0001170b:
00011710: R0 := mem[R20 + 8, el]:u64
00011715: R30 := 0x40F700
00011717: call @free with return %00011719

00011719:
0001171d: R0 := R20
00011722: R30 := 0x40F708
00011724: call @free with return %00011726

00011726:
00011729: when R19 <> 0 goto %000116f0
00035986: goto %0001172d

0001172d:
00011731: #34 := R31 + 0x10
00011736: R19 := mem[#34, el]:u64
0001173b: R20 := mem[#34 + 8, el]:u64
00011740: R0 := 0
00011747: R29 := mem[R31, el]:u64
0001174c: R30 := mem[R31 + 8, el]:u64
00011750: R31 := R31 + 0x20
00011755: R16 := 0
0001175a: R17 := 0
0001175f: call R30 with noreturn

00035987: sub hlist_get(hlist_get_result)
00035e9f: hlist_get_result :: out u32 = low:32[R0]

00011032:
00011039: when R0 = 0 goto %00011037
00035988: goto %00011761

00011037:
0001103f: R0 := 0
00011044: R1 := 0
00011049: R16 := 0
0001104e: R17 := 0
00011053: call R30 with noreturn

00011761:
00011765: #35 := R31 - 0x20
0001176b: mem := mem with [#35, el]:u64 <- R29
00011771: mem := mem with [#35 + 8, el]:u64 <- R30
00011775: R31 := #35
0001177b: R29 := R31
00011781: #36 := R31 + 0x10
00011787: mem := mem with [#36, el]:u64 <- R19
0001178d: mem := mem with [#36 + 8, el]:u64 <- R20
00011793: R19 := R0
00011799: R20 := R1
0001179e: goto %0001179c

0001179c:
000117a4: R0 := mem[R19, el]:u64
000117aa: R1 := R20
000117af: R30 := 0x40F684
000117b2: call @strcasecmp with return %000117b4

000117b4:
000117b8: when 31:0[R0] <> 0 goto %000117b6
00035989: goto %00011802

00011802:
00011807: R0 := mem[R19 + 8, el]:u64
0001180d: #38 := R31 + 0x10
00011812: R19 := mem[#38, el]:u64
00011817: R20 := mem[#38 + 8, el]:u64
0001181e: R29 := mem[R31, el]:u64
00011823: R30 := mem[R31 + 8, el]:u64
00011827: R31 := R31 + 0x20
0001182c: R1 := 0
00011831: R16 := 0
00011836: R17 := 0
0001183b: call R30 with noreturn

000117b6:
000117c0: R19 := mem[R19 + 0x18, el]:u64
000117c6: when R19 = 0 goto %000117c4
0003598a: goto %0001179c

000117c4:
000117cd: #37 := R31 + 0x10
000117d2: R19 := mem[#37, el]:u64
000117d7: R20 := mem[#37 + 8, el]:u64
000117dc: R0 := 0
000117e3: R29 := mem[R31, el]:u64
000117e8: R30 := mem[R31 + 8, el]:u64
000117ec: R31 := R31 + 0x20
000117f1: R1 := 0
000117f6: R16 := 0
000117fb: R17 := 0
00011800: call R30 with noreturn

0003598b: sub hlist_in(hlist_in_result)
00035ea0: hlist_in_result :: out u32 = low:32[R0]

000189e6:
000189ea: when R0 = 0 goto %000189e8
0003598c: goto %00018a38

000189e8:
000189f0: R0 := 0
000189f5: R1 := 0
000189fa: R16 := 0
000189ff: R17 := 0
00018a04: call R30 with noreturn

00018a38:
00018a3c: #401 := R31 - 0x20
00018a42: mem := mem with [#401, el]:u64 <- R29
00018a48: mem := mem with [#401 + 8, el]:u64 <- R30
00018a4c: R31 := #401
00018a52: R29 := R31
00018a58: #402 := R31 + 0x10
00018a5e: mem := mem with [#402, el]:u64 <- R19
00018a64: mem := mem with [#402 + 8, el]:u64 <- R20
00018a6a: R19 := R0
00018a70: R20 := R1
00018a75: goto %00018a73

00018a73:
00018a7b: R0 := mem[R19, el]:u64
00018a81: R1 := R20
00018a86: R30 := 0x40F5E0
00018a88: call @strcasecmp with return %00018a8a

00018a8a:
00018a8e: when 31:0[R0] <> 0 goto %00018a8c
0003598d: goto %00018ad8

00018ad8:
00018adc: #404 := R31 + 0x10
00018ae1: R19 := mem[#404, el]:u64
00018ae6: R20 := mem[#404 + 8, el]:u64
00018aeb: R0 := 1
00018af2: R29 := mem[R31, el]:u64
00018af7: R30 := mem[R31 + 8, el]:u64
00018afb: R31 := R31 + 0x20
00018b00: R1 := 0
00018b05: R16 := 0
00018b0a: R17 := 0
00018b0f: call R30 with noreturn

00018a8c:
00018a96: R19 := mem[R19 + 0x18, el]:u64
00018a9c: when R19 = 0 goto %00018a9a
0003598e: goto %00018a73

00018a9a:
00018aa3: #403 := R31 + 0x10
00018aa8: R19 := mem[#403, el]:u64
00018aad: R20 := mem[#403 + 8, el]:u64
00018ab2: R0 := 0
00018ab9: R29 := mem[R31, el]:u64
00018abe: R30 := mem[R31 + 8, el]:u64
00018ac2: R31 := R31 + 0x20
00018ac7: R1 := 0
00018acc: R16 := 0
00018ad1: R17 := 0
00018ad6: call R30 with noreturn

0003598f: sub hlist_mod(hlist_mod_result)
00035ea1: hlist_mod_result :: out u32 = low:32[R0]

000186ce:
000186d2: #383 := R31 - 0x40
000186d8: mem := mem with [#383, el]:u64 <- R29
000186de: mem := mem with [#383 + 8, el]:u64 <- R30
000186e2: R31 := #383
000186e8: R29 := R31
000186ee: #384 := R31 + 0x10
000186f4: mem := mem with [#384, el]:u64 <- R19
000186fa: mem := mem with [#384 + 8, el]:u64 <- R20
00018700: R20 := R1
00018706: #385 := R31 + 0x20
0001870c: mem := mem with [#385, el]:u64 <- R21
00018712: mem := mem with [#385 + 8, el]:u64 <- R22
00018718: R21 := R0
0001871e: R22 := R2
00018726: mem := mem with [R31 + 0x30, el]:u64 <- R23
0001872c: R23 := pad:64[31:0[R3]]
00018732: when R0 = 0 goto %00018730
00035990: goto %00018b11

00018b11:
00018b15: R19 := R0
00018b1a: goto %00018b18

00018b18:
00018b20: R0 := mem[R19, el]:u64
00018b26: R1 := R20
00018b2b: R30 := 0x40F534
00018b2d: call @strcasecmp with return %00018b2f

00018b2f:
00018b33: when 31:0[R0] <> 0 goto %00018b31
00035991: goto %00018b44

00018b44:
00018b49: R0 := mem[R19 + 8, el]:u64
00018b4e: R30 := 0x40F540
00018b50: call @free with return %00018b52

00018b52:
00018b56: R0 := R22
00018b5b: R30 := 0x40F548
00018b5d: call @strdup with return %00018b5f

00018b5f:
00018b65: mem := mem with [R19 + 8, el]:u64 <- R0
00035992: goto %00018737

00018b31:
00018b3b: R19 := mem[R19 + 0x18, el]:u64
00018b40: when R19 = 0 goto %00018730
00035993: goto %00018b18

00018730:
00018739: when 31:0[R23] = 0 goto %00018737
00035994: goto %0001879c

0001879c:
000187a1: R23 := mem[R31 + 0x30, el]:u64
000187a7: R2 := R22
000187ad: R1 := R20
000187b3: R0 := R21
000187b9: #388 := R31 + 0x10
000187be: R19 := mem[#388, el]:u64
000187c3: R20 := mem[#388 + 8, el]:u64
000187c8: R4 := 1
000187ce: #389 := R31 + 0x20
000187d3: R21 := mem[#389, el]:u64
000187d8: R22 := mem[#389 + 8, el]:u64
000187de: R3 := pad:64[31:0[R4]]
000187e5: R29 := mem[R31, el]:u64
000187ea: R30 := mem[R31 + 8, el]:u64
000187ee: R31 := R31 + 0x40
000187f3: call @hlist_add with noreturn

00018737:
00018740: #386 := R31 + 0x10
00018745: R19 := mem[#386, el]:u64
0001874a: R20 := mem[#386 + 8, el]:u64
00018750: R0 := R21
00018756: #387 := R31 + 0x20
0001875b: R21 := mem[#387, el]:u64
00018760: R22 := mem[#387 + 8, el]:u64
00018767: R23 := mem[R31 + 0x30, el]:u64
0001876e: R29 := mem[R31, el]:u64
00018773: R30 := mem[R31 + 8, el]:u64
00018777: R31 := R31 + 0x40
0001877c: R1 := 0
00018781: R2 := 0
00018786: R3 := 0
0001878b: R4 := 0
00018790: R16 := 0
00018795: R17 := 0
0001879a: call R30 with noreturn

00035995: sub hlist_subcmp(hlist_subcmp_result)
00035ea2: hlist_subcmp_result :: out u32 = low:32[R0]

00010fc0:
00010fc4: #16 := R31 - 0x30
00010fca: mem := mem with [#16, el]:u64 <- R29
00010fd0: mem := mem with [#16 + 8, el]:u64 <- R30
00010fd4: R31 := #16
00010fda: R29 := R31
00010fe0: #17 := R31 + 0x10
00010fe6: mem := mem with [#17, el]:u64 <- R19
00010fec: mem := mem with [#17 + 8, el]:u64 <- R20
00010ff2: R20 := R0
00010ff8: R0 := R2
00011000: mem := mem with [R31 + 0x20, el]:u64 <- R21
00011006: R21 := R1
0001100b: R30 := 0x40FE90
0001100e: call @strdup with return %00011010

00011010:
00011014: R19 := R0
00011019: R30 := 0x40FE98
0001101b: call @lowercase with return %0001101d

0001101d:
00011021: R0 := R20
00011027: R1 := R21
0001102c: R20 := 0
00011031: R30 := 0x40FEA8
00011034: call @hlist_get with return %0001183d

0001183d:
00011841: when R0 = 0 goto %0001183f
00035996: goto %00018264

00018264:
00018267: R30 := 0x40FEB0
00018269: call @strdup with return %0001826b

0001826b:
0001826f: R20 := R0
00018274: R30 := 0x40FEB8
00018276: call @lowercase with return %00018278

00018278:
0001827c: R0 := R20
00018282: R1 := R19
00018287: R30 := 0x40FEC4
00018289: call @strstr with return %0001828b

0001828b:
0001828e: VF := 0
00018291: CF := 1
00018295: ZF := R0 = 0
00018299: NF := 63:63[R0]
0001829f: R0 := R20
000182ab: when ZF goto %000182a4
000182ac: goto %000182a7

000182a7:
000182a8: R20 := 1
000182ae: goto %000182aa

000182a4:
000182a5: R20 := 0
000182ad: goto %000182aa

000182aa:
000182b3: R30 := 0x40FED4
000182b5: call @free with return %0001183f

0001183f:
00011848: R0 := R19
0001184d: R30 := 0x40FEDC
0001184f: call @free with return %00011851

00011851:
00011856: R21 := mem[R31 + 0x20, el]:u64
0001185c: R0 := pad:64[31:0[R20]]
00011862: #39 := R31 + 0x10
00011867: R19 := mem[#39, el]:u64
0001186c: R20 := mem[#39 + 8, el]:u64
00011873: R29 := mem[R31, el]:u64
00011878: R30 := mem[R31 + 8, el]:u64
0001187c: R31 := R31 + 0x30
00011881: R1 := 0
00011886: R2 := 0
0001188b: R16 := 0
00011890: R17 := 0
00011895: call R30 with noreturn

00035997: sub hlist_subcmp_all(hlist_subcmp_all_result)
00035ea3: hlist_subcmp_all_result :: out u32 = low:32[R0]

00011897:
0001189b: #40 := R31 - 0x40
000118a1: mem := mem with [#40, el]:u64 <- R29
000118a7: mem := mem with [#40 + 8, el]:u64 <- R30
000118ab: R31 := #40
000118b1: R29 := R31
000118b7: #41 := R31 + 0x10
000118bd: mem := mem with [#41, el]:u64 <- R19
000118c3: mem := mem with [#41 + 8, el]:u64 <- R20
000118c9: #42 := R31 + 0x20
000118cf: mem := mem with [#42, el]:u64 <- R21
000118d5: mem := mem with [#42 + 8, el]:u64 <- R22
000118db: #43 := R31 + 0x30
000118e1: mem := mem with [#43, el]:u64 <- R23
000118e7: mem := mem with [#43 + 8, el]:u64 <- R24
000118ed: when R1 = 0 goto %000118eb
00035998: goto %0001811d

000118eb:
000118f3: R3 := 0x417000
000118f9: R3 := R3 + 0x3F0
000118fe: R1 := 0x416000
00011903: R0 := 0x417000
00011909: R3 := R3 + 0x60
0001190f: R1 := R1 + 0xF58
00011915: R0 := R0 + 0xC0
0001191a: R2 := 0x1BA
0001191f: R30 := 0x40FFE8
00011921: call @__assert_fail with return %00011923

0001811d:
00018121: R19 := R0
00018127: R0 := R2
0001812c: when R2 = 0 goto %00011923
00035999: goto %00018130

00011923:
00011926: R3 := 0x417000
0001192c: R3 := R3 + 0x3F0
00011931: R1 := 0x416000
00011936: R0 := 0x417000
0001193c: R3 := R3 + 0x60
00011942: R1 := R1 + 0xF58
00011948: R0 := R0 + 0xD0
0001194d: R2 := 0x1BB
00011952: R30 := 0x41000C
00011954: call @__assert_fail with return %00011956

00011956:
0003599a: call @uppercase with noreturn

00018130:
00018134: R21 := R1
00018139: R22 := 0
0001813e: R30 := 0x40FF30
00018140: call @strdup with return %00018142

00018142:
00018146: R23 := R0
0001814b: R30 := 0x40FF38
0001814d: call @lowercase with return %0001814f

0001814f:
00018153: when R19 = 0 goto %00018151
0003599b: goto %000181c7

000181c7:
000181ca: R24 := 1
000181cf: goto %000181cd

000181cd:
000181d5: R0 := mem[R19, el]:u64
000181db: R1 := R21
000181e0: R30 := 0x40FF58
000181e2: call @strcasecmp with return %000181e4

000181e4:
000181e8: when 31:0[R0] <> 0 goto %000181e6
0003599c: goto %000181f9

000181f9:
000181fe: R0 := mem[R19 + 8, el]:u64
00018203: R30 := 0x40FF64
00018205: call @strdup with return %00018207

00018207:
0001820b: R20 := R0
00018210: R30 := 0x40FF6C
00018212: call @lowercase with return %00018214

00018214:
00018218: R1 := R23
0001821e: R0 := R20
00018223: R30 := 0x40FF78
00018226: call @strstr with return %00018228

00018228:
0001822b: VF := 0
0001822e: CF := 1
00018232: ZF := R0 = 0
00018236: NF := 63:63[R0]
00018244: when ZF goto %0001823c
00018245: goto %00018240

00018240:
00018241: R22 := pad:64[31:0[R24]]
00018247: goto %00018243

0001823c:
0001823d: R22 := pad:64[31:0[R22]]
00018246: goto %00018243

00018243:
0001824d: R0 := R20
00018252: R30 := 0x40FF88
00018254: call @free with return %00018256

00018256:
0001825b: R19 := mem[R19 + 0x18, el]:u64
00018260: when R19 <> 0 goto %000181cd
0003599d: goto %00018151

000181e6:
000181f0: R19 := mem[R19 + 0x18, el]:u64
000181f5: when R19 = 0 goto %00018151
0003599e: goto %000181cd

00018151:
0001815a: R0 := R23
0001815f: R30 := 0x40FF98
00018161: call @free with return %00018163

00018163:
00018167: #371 := R31 + 0x10
0001816c: R19 := mem[#371, el]:u64
00018171: R20 := mem[#371 + 8, el]:u64
00018177: R0 := pad:64[31:0[R22]]
0001817d: #372 := R31 + 0x20
00018182: R21 := mem[#372, el]:u64
00018187: R22 := mem[#372 + 8, el]:u64
0001818d: #373 := R31 + 0x30
00018192: R23 := mem[#373, el]:u64
00018197: R24 := mem[#373 + 8, el]:u64
0001819e: R29 := mem[R31, el]:u64
000181a3: R30 := mem[R31 + 8, el]:u64
000181a7: R31 := R31 + 0x40
000181ac: R1 := 0
000181b1: R2 := 0
000181b6: R3 := 0
000181bb: R16 := 0
000181c0: R17 := 0
000181c5: call R30 with noreturn

0003599f: sub hmac_md5(hmac_md5_result)
00035ea4: hmac_md5_result :: out u32 = low:32[R0]

00014a6b:
00014a6f: #209 := R31 - 0x50
00014a75: mem := mem with [#209, el]:u64 <- R29
00014a7b: mem := mem with [#209 + 8, el]:u64 <- R30
00014a7f: R31 := #209
00014a84: R5 := 0x42F000
00014a8b: R5 := mem[R5 + 0xFB8, el]:u64
00014a91: R29 := R31
00014a97: #210 := R31 + 0x10
00014a9d: mem := mem with [#210, el]:u64 <- R19
00014aa3: mem := mem with [#210 + 8, el]:u64 <- R20
00014aa9: R20 := R0
00014aaf: #211 := R31 + 0x20
00014ab5: mem := mem with [#211, el]:u64 <- R21
00014abb: mem := mem with [#211 + 8, el]:u64 <- R22
00014ac1: R21 := R1
00014ac7: #212 := R31 + 0x30
00014acd: mem := mem with [#212, el]:u64 <- R23
00014ad3: mem := mem with [#212 + 8, el]:u64 <- R24
00014ad9: R23 := R3
00014adf: #213 := R31 + 0x40
00014ae5: mem := mem with [#213, el]:u64 <- R25
00014aeb: mem := mem with [#213 + 8, el]:u64 <- R26
00014af1: R31 := R31 - 0x1B0
00014af7: R26 := R2
00014afe: R1 := mem[R5, el]:u64
00014b06: mem := mem with [R31 + 0x1A8, el]:u64 <- R1
00014b0b: R1 := 0
00014b11: R25 := R4
00014b17: R22 := R31 + 0xA8
00014b1d: #214 := R21 - 0x40
00014b22: VF := extend:128[#214] <> extend:128[R21] - 0x40
00014b27: CF := pad:128[#214] <> pad:128[R21] + 0xFFFFFFFFFFFFFFC0
00014b2b: ZF := #214 = 0
00014b2f: NF := 63:63[#214]
00014b36: when CF & ~ZF goto %00014b34
000359a0: goto %00014b7e

00014b34:
00014b3d: R0 := R22
00014b42: R30 := 0x413420
00014b44: call @md5_init_ctx with return %00014b46

00014b46:
00014b4a: R2 := R22
00014b50: R1 := R21
00014b56: R0 := R20
00014b5c: R20 := R31 + 0x148
00014b61: R30 := 0x413434
00014b63: call @md5_process_bytes with return %00014b65

00014b65:
00014b68: R21 := 0x10
00014b6e: R0 := R22
00014b74: R1 := R20
00014b79: R30 := 0x413444
00014b7b: call @md5_finish_ctx with return %00014b7d

00014b7d:
00014b80: goto %00014b7e

00014b7e:
00014b85: R24 := R31 + 8
00014b8b: R19 := R31 + 0x168
00014b91: R0 := R24
00014b96: R30 := 0x413324
00014b98: call @md5_init_ctx with return %00014b9a

00014b9a:
00014b9d: V0 := 0x36363636363636363636363636363636
00014ba3: R2 := R21
00014ba9: R1 := R20
00014baf: R0 := R19
00014bb7: mem := mem with [R19, el]:u128 <- V0
00014bbd: mem := mem with [R19 + 0x10, el]:u128 <- V0
00014bc3: #215 := R19 + 0x20
00014bc9: mem := mem with [#215, el]:u128 <- V0
00014bcf: mem := mem with [#215 + 0x10, el]:u128 <- V0
00014bd4: R30 := 0x413340
00014bd6: call @memxor with return %00014bd8

00014bd8:
00014bdc: R2 := R24
00014be2: R0 := R19
00014be7: R1 := 0x40
00014bec: R30 := 0x413350
00014bee: call @md5_process_block with return %00014bf0

00014bf0:
00014bf4: R2 := R24
00014bfa: R1 := R23
00014c00: R0 := R26
00014c06: R23 := R31 + 0x158
00014c0b: R30 := 0x413364
00014c0d: call @md5_process_bytes with return %00014c0f

00014c0f:
00014c13: R1 := R23
00014c19: R0 := R24
00014c1e: R30 := 0x413370
00014c20: call @md5_finish_ctx with return %00014c22

00014c22:
00014c26: R0 := R22
00014c2b: R30 := 0x413378
00014c2d: call @md5_init_ctx with return %00014c2f

00014c2f:
00014c32: V0 := 0x5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C
00014c38: R2 := R21
00014c3e: R1 := R20
00014c44: R0 := R19
00014c4c: mem := mem with [R19, el]:u128 <- V0
00014c52: mem := mem with [R19 + 0x10, el]:u128 <- V0
00014c58: #216 := R19 + 0x20
00014c5e: mem := mem with [#216, el]:u128 <- V0
00014c64: mem := mem with [#216 + 0x10, el]:u128 <- V0
00014c69: R30 := 0x413394
00014c6b: call @memxor with return %00014c6d

00014c6d:
00014c71: R2 := R22
00014c77: R0 := R19
00014c7c: R1 := 0x40
00014c81: R30 := 0x4133A4
00014c83: call @md5_process_block with return %00014c85

00014c85:
00014c89: R2 := R22
00014c8f: R0 := R23
00014c94: R1 := 0x10
00014c99: R30 := 0x4133B4
00014c9b: call @md5_process_bytes with return %00014c9d

00014c9d:
00014ca1: R1 := R25
00014ca7: R0 := R22
00014cac: R30 := 0x4133C0
00014cae: call @md5_finish_ctx with return %00014cb0

00014cb0:
00014cb3: R0 := 0x42F000
00014cba: R0 := mem[R0 + 0xFB8, el]:u64
00014cc1: R2 := mem[R31 + 0x1A8, el]:u64
00014cc8: R1 := mem[R0, el]:u64
00014cce: #217 := ~R1
00014cd3: #218 := R2 + ~R1
00014cd9: VF := extend:128[#218 + 1] <> extend:128[R2] + extend:128[#217] + 1
00014cdf: CF := pad:128[#218 + 1] <> pad:128[R2] + pad:128[#217] + 1
00014ce3: ZF := #218 + 1 = 0
00014ce7: NF := 63:63[#218 + 1]
00014ceb: R2 := #218 + 1
00014cf0: R1 := 0
00014cf6: when ZF <> 1 goto %00014cf4
000359a1: goto %00014f9c

00014cf4:
00014cfc: R30 := 0x41344C
00014cfe: call @__stack_chk_fail with return %00014d00

00014d00:
000359a2: call @md5_stream with noreturn

00014f9c:
00014fa0: R31 := R31 + 0x1B0
00014fa5: R0 := 0
00014fab: #231 := R31 + 0x10
00014fb0: R19 := mem[#231, el]:u64
00014fb5: R20 := mem[#231 + 8, el]:u64
00014fbb: #232 := R31 + 0x20
00014fc0: R21 := mem[#232, el]:u64
00014fc5: R22 := mem[#232 + 8, el]:u64
00014fcb: #233 := R31 + 0x30
00014fd0: R23 := mem[#233, el]:u64
00014fd5: R24 := mem[#233 + 8, el]:u64
00014fdb: #234 := R31 + 0x40
00014fe0: R25 := mem[#234, el]:u64
00014fe5: R26 := mem[#234 + 8, el]:u64
00014fec: R29 := mem[R31, el]:u64
00014ff1: R30 := mem[R31 + 8, el]:u64
00014ff5: R31 := R31 + 0x50
00014ffa: R1 := 0
00014fff: R2 := 0
00015004: R3 := 0
00015009: R4 := 0
0001500e: R5 := 0
00015013: R16 := 0
00015018: R17 := 0
0001501d: call R30 with noreturn

000359a3: sub host_connect(host_connect_result)
00035ea5: host_connect_result :: out u32 = low:32[R0]

00019bda:
00019bde: R31 := R31 - 0x30
00019be3: R2 := 0x42F000
00019bea: R2 := mem[R2 + 0xFB8, el]:u64
00019bf0: #479 := R31 + 0x10
00019bf6: mem := mem with [#479, el]:u64 <- R29
00019bfc: mem := mem with [#479 + 8, el]:u64 <- R30
00019c02: R29 := R31 + 0x10
00019c08: #480 := R31 + 0x20
00019c0e: mem := mem with [#480, el]:u64 <- R19
00019c14: mem := mem with [#480 + 8, el]:u64 <- R20
00019c1a: R19 := R0
00019c20: R20 := pad:64[31:0[R1]]
00019c27: R0 := mem[R2, el]:u64
00019c2f: mem := mem with [R31 + 8, el]:u64 <- R0
00019c34: R0 := 0
00019c39: R30 := 0x405CC0
00019c3b: call @__errno_location with return %00019c3d

00019c3d:
00019c41: R3 := R0
00019c47: R2 := pad:64[31:0[R20]]
00019c4d: R1 := R19
00019c53: R0 := R31
00019c5a: mem := mem with [R3, el]:u32 <- 0
00019c5f: R30 := 0x405CD8
00019c62: call @so_resolv with return %0001b8b2

0001b8b2:
0001b8b6: when 31:0[R0] = 0 goto %0001b8b4
000359a4: goto %0002b624

0001b8b4:
0001b8bc: R19 := 0xFFFFFFFF
0001b8c1: goto %0001b8bf

0002b624:
0002b629: R0 := mem[R31, el]:u64
0002b62e: R30 := 0x405CE4
0002b630: call @so_connect with return %0002b632

0002b632:
0002b636: R19 := pad:64[31:0[R0]]
0002b63d: R0 := mem[R31, el]:u64
0002b642: R30 := 0x405CF0
0002b644: call @freeaddrinfo with return %0001b8bf

0001b8bf:
0001b8c5: R0 := 0x42F000
0001b8cc: R0 := mem[R0 + 0xFB8, el]:u64
0001b8d3: R2 := mem[R31 + 8, el]:u64
0001b8da: R1 := mem[R0, el]:u64
0001b8e0: #606 := ~R1
0001b8e5: #607 := R2 + ~R1
0001b8eb: VF := extend:128[#607 + 1] <> extend:128[R2] + extend:128[#606] + 1
0001b8f1: CF := pad:128[#607 + 1] <> pad:128[R2] + pad:128[#606] + 1
0001b8f5: ZF := #607 + 1 = 0
0001b8f9: NF := 63:63[#607 + 1]
0001b8fd: R2 := #607 + 1
0001b902: R1 := 0
0001b908: when ZF <> 1 goto %0001b906
000359a5: goto %0002b5da

0001b906:
0001b90e: R30 := 0x405D40
0001b910: call @__stack_chk_fail with return %000359a6

000359a6:
000359a7: call @www_authenticate with noreturn

0002b5da:
0002b5de: #1319 := R31 + 0x10
0002b5e3: R29 := mem[#1319, el]:u64
0002b5e8: R30 := mem[#1319 + 8, el]:u64
0002b5ee: R0 := pad:64[31:0[R19]]
0002b5f4: #1320 := R31 + 0x20
0002b5f9: R19 := mem[#1320, el]:u64
0002b5fe: R20 := mem[#1320 + 8, el]:u64
0002b604: R31 := R31 + 0x30
0002b609: R1 := 0
0002b60e: R2 := 0
0002b613: R3 := 0
0002b618: R16 := 0
0002b61d: R17 := 0
0002b622: call R30 with noreturn

000359a8: sub http_body_drop(http_body_drop_result)
00035ea6: http_body_drop_result :: out u32 = low:32[R0]

0001f193:
0001f197: #809 := R31 - 0x30
0001f19d: mem := mem with [#809, el]:u64 <- R29
0001f1a3: mem := mem with [#809 + 8, el]:u64 <- R30
0001f1a7: R31 := #809
0001f1ad: R29 := R31
0001f1b3: #810 := R31 + 0x10
0001f1b9: mem := mem with [#810, el]:u64 <- R19
0001f1bf: mem := mem with [#810 + 8, el]:u64 <- R20
0001f1c5: R20 := R1
0001f1cd: mem := mem with [R31 + 0x20, el]:u64 <- R21
0001f1d3: R21 := pad:64[31:0[R0]]
0001f1d8: R0 := 0
0001f1dd: R30 := 0x409D30
0001f1df: call @http_has_body with return %0001f1e1

0001f1e1:
0001f1e5: when R0 <> 0 goto %0001f1e3
000359a9: goto %00028a85

0001f1e3:
0001f1ec: R19 := R0
0001f1f1: R2 := 0x414000
0001f1f8: R0 := mem[R20 + 8, el]:u64
0001f1fd: R1 := 0x413000
0001f203: R2 := R2 + 0x748
0001f209: R1 := R1 + 0x7F8
0001f20e: R30 := 0x409D74
0001f210: call @hlist_subcmp with return %0001f212

0001f212:
0001f216: when 31:0[R0] = 0 goto %0001f214
000359aa: goto %00028a6b

0001f214:
0001f21c: R0 := 0x42F000
0001f223: R0 := mem[R0 + 0xF30, el]:u64
0001f22a: R0 := pad:64[mem[R0, el]:u32]
0001f230: when 31:0[R0] <> 0 goto %0001f22e
000359ab: goto %0001f251

0001f22e:
0001f237: R2 := R19
0001f23c: R1 := 0x414000
0001f241: R0 := 2
0001f247: R1 := R1 + 0x830
0001f24c: R30 := 0x409DE0
0001f24e: call @__printf_chk with return %0001f250

0001f250:
0001f253: goto %0001f251

0001f251:
0001f258: R2 := R19
0001f25e: R1 := pad:64[31:0[R21]]
0001f264: #811 := R31 + 0x10
0001f269: R19 := mem[#811, el]:u64
0001f26e: R20 := mem[#811 + 8, el]:u64
0001f273: R0 := 0xFFFFFFFF
0001f27a: R21 := mem[R31 + 0x20, el]:u64
0001f281: R29 := mem[R31, el]:u64
0001f286: R30 := mem[R31 + 8, el]:u64
0001f28a: R31 := R31 + 0x30
0001f28e: call @data_send with noreturn

00028a6b:
00028a6e: R0 := 0x42F000
00028a75: R0 := mem[R0 + 0xF30, el]:u64
00028a7c: R0 := pad:64[mem[R0, el]:u32]
00028a81: when 31:0[R0] <> 0 goto %0001f290
000359ac: goto %0001f2a8

0001f290:
0001f293: R1 := 0x414000
0001f298: R0 := 2
0001f29e: R1 := R1 + 0x810
0001f2a3: R30 := 0x409DF4
0001f2a5: call @__printf_chk with return %0001f2a7

0001f2a7:
0001f2aa: goto %0001f2a8

0001f2a8:
0001f2af: #812 := R31 + 0x10
0001f2b4: R19 := mem[#812, el]:u64
0001f2b9: R20 := mem[#812 + 8, el]:u64
0001f2bf: R1 := pad:64[31:0[R21]]
0001f2c6: R21 := mem[R31 + 0x20, el]:u64
0001f2cb: R0 := 0xFFFFFFFF
0001f2d2: R29 := mem[R31, el]:u64
0001f2d7: R30 := mem[R31 + 8, el]:u64
0001f2db: R31 := R31 + 0x30
0001f2df: call @chunked_data_send with noreturn

00028a85:
00028a89: #1205 := R31 + 0x10
00028a8e: R19 := mem[#1205, el]:u64
00028a93: R20 := mem[#1205 + 8, el]:u64
00028a98: R0 := 1
00028a9f: R21 := mem[R31 + 0x20, el]:u64
00028aa6: R29 := mem[R31, el]:u64
00028aab: R30 := mem[R31 + 8, el]:u64
00028aaf: R31 := R31 + 0x30
00028ab4: R1 := 0
00028ab9: R2 := 0
00028abe: R16 := 0
00028ac3: R17 := 0
00028ac8: call R30 with noreturn

000359ad: sub http_body_send(http_body_send_result)
00035ea7: http_body_send_result :: out u32 = low:32[R0]

0001e008:
0001e00c: #740 := R31 - 0x30
0001e012: mem := mem with [#740, el]:u64 <- R29
0001e018: mem := mem with [#740 + 8, el]:u64 <- R30
0001e01c: R31 := #740
0001e022: R29 := R31
0001e029: R4 := pad:64[mem[R3 + 0x1C, el]:u32]
0001e02f: #741 := R31 + 0x10
0001e035: mem := mem with [#741, el]:u64 <- R19
0001e03b: mem := mem with [#741 + 8, el]:u64 <- R20
0001e040: VF := 0
0001e043: CF := 1
0001e047: ZF := 31:0[R4] = 0
0001e04b: NF := 31:31[R4]
0001e059: when ZF goto %0001e051
0001e05a: goto %0001e055

0001e055:
0001e056: R19 := R2
0001e05c: goto %0001e058

0001e051:
0001e052: R19 := R3
0001e05b: goto %0001e058

0001e058:
0001e062: #742 := R31 + 0x20
0001e068: mem := mem with [#742, el]:u64 <- R21
0001e06e: mem := mem with [#742 + 8, el]:u64 <- R22
0001e074: R22 := pad:64[31:0[R0]]
0001e07a: R21 := pad:64[31:0[R1]]
0001e080: R0 := R2
0001e086: R1 := R3
0001e08b: R30 := 0x409BB4
0001e08d: call @http_has_body with return %0001e08f

0001e08f:
0001e093: when R0 <> 0 goto %0001e091
000359ae: goto %00028ad8

0001e091:
0001e09a: R20 := R0
0001e09f: R2 := 0x414000
0001e0a6: R0 := mem[R19 + 8, el]:u64
0001e0ac: R2 := R2 + 0x748
0001e0b1: R1 := 0x413000
0001e0b7: R1 := R1 + 0x7F8
0001e0bc: R19 := 0x42F000
0001e0c3: R19 := mem[R19 + 0xF30, el]:u64
0001e0c8: R30 := 0x409C30
0001e0ca: call @hlist_subcmp with return %0001e0cc

0001e0cc:
0001e0d0: when 31:0[R0] <> 0 goto %0001e0ce
000359af: goto %00028aca

0001e0ce:
0001e0d8: R0 := pad:64[mem[R19, el]:u32]
0001e0de: when 31:0[R0] <> 0 goto %0001e0dc
000359b0: goto %0001e0f9

0001e0dc:
0001e0e4: R1 := 0x414000
0001e0e9: R0 := 2
0001e0ef: R1 := R1 + 0x7C0
0001e0f4: R30 := 0x409D0C
0001e0f6: call @__printf_chk with return %0001e0f8

0001e0f8:
0001e0fb: goto %0001e0f9

0001e0f9:
0001e100: R1 := pad:64[31:0[R21]]
0001e106: R0 := pad:64[31:0[R22]]
0001e10b: R30 := 0x409CC0
0001e10e: call @chunked_data_send with return %0001efe7

0001efe7:
0001efec: R1 := pad:64[mem[R19, el]:u32]
0001eff2: R19 := pad:64[31:0[R0]]
0001eff8: when 31:0[R1] = 0 goto %0001eff6
000359b1: goto %0001f074

0001f074:
0001f077: VF := 0
0001f07a: CF := 1
0001f07e: ZF := 31:0[R0] = 0
0001f082: NF := 31:31[R0]
0001f087: R2 := 0x414000
0001f08c: R0 := 0x414000
0001f092: R2 := R2 + 0x768
0001f098: R0 := R0 + 0x750
0001f09d: goto %0001f09b

00028aca:
00028acf: R0 := pad:64[mem[R19, el]:u32]
00028ad4: when 31:0[R0] <> 0 goto %0001f11f
000359b2: goto %0001f13d

0001f11f:
0001f123: R2 := R20
0001f128: R1 := 0x414000
0001f12d: R0 := 2
0001f133: R1 := R1 + 0x7E0
0001f138: R30 := 0x409CF8
0001f13a: call @__printf_chk with return %0001f13c

0001f13c:
0001f13f: goto %0001f13d

0001f13d:
0001f144: R1 := pad:64[31:0[R21]]
0001f14a: R2 := R20
0001f150: R0 := pad:64[31:0[R22]]
0001f155: R30 := 0x409C4C
0001f157: call @data_send with return %0001f159

0001f159:
0001f15e: R1 := pad:64[mem[R19, el]:u32]
0001f164: R19 := pad:64[31:0[R0]]
0001f169: when 31:0[R1] = 0 goto %0001eff6
000359b3: goto %0001f16d

0001f16d:
0001f170: VF := 0
0001f173: CF := 1
0001f177: ZF := 31:0[R0] = 0
0001f17b: NF := 31:31[R0]
0001f180: R2 := 0x414000
0001f185: R0 := 0x414000
0001f18b: R2 := R2 + 0x7A0
0001f191: R0 := R0 + 0x790
000359b4: goto %0001f09b

0001f09b:
0001f0aa: when ZF goto %0001f0a2
0001f0ab: goto %0001f0a6

0001f0a6:
0001f0a7: R2 := R0
0001f0ad: goto %0001f0a9

0001f0a2:
0001f0a3: R2 := R2
0001f0ac: goto %0001f0a9

0001f0a9:
0001f0b2: R1 := 0x414000
0001f0b7: R0 := 2
0001f0bd: R1 := R1 + 0x7D8
0001f0c2: R30 := 0x409C80
0001f0c4: call @__printf_chk with return %0001f0c6

0001f0c6:
0001f0ca: #807 := R31 + 0x20
0001f0cf: R21 := mem[#807, el]:u64
0001f0d4: R22 := mem[#807 + 8, el]:u64
0001f0da: R0 := pad:64[31:0[R19]]
0001f0e0: #808 := R31 + 0x10
0001f0e5: R19 := mem[#808, el]:u64
0001f0ea: R20 := mem[#808 + 8, el]:u64
0001f0f1: R29 := mem[R31, el]:u64
0001f0f6: R30 := mem[R31 + 8, el]:u64
0001f0fa: R31 := R31 + 0x30
0001f0ff: R1 := 0
0001f104: R2 := 0
0001f109: R3 := 0
0001f10e: R4 := 0
0001f113: R16 := 0
0001f118: R17 := 0
0001f11d: call R30 with noreturn

00028ad8:
00028adb: R0 := 0x42F000
00028ae2: R0 := mem[R0 + 0xF30, el]:u64
00028ae9: R0 := pad:64[mem[R0, el]:u32]
00028aee: when 31:0[R0] <> 0 goto %0001f054
000359b5: goto %0001f06c

0001f054:
0001f057: R1 := 0x414000
0001f05c: R0 := 2
0001f062: R1 := R1 + 0x800
0001f067: R30 := 0x409C08
0001f069: call @__printf_chk with return %0001f06b

0001f06b:
0001f06e: goto %0001f06c

0001f06c:
0001f072: R19 := 1
000359b6: goto %0001eff6

0001eff6:
0001efff: #805 := R31 + 0x20
0001f004: R21 := mem[#805, el]:u64
0001f009: R22 := mem[#805 + 8, el]:u64
0001f00f: R0 := pad:64[31:0[R19]]
0001f015: #806 := R31 + 0x10
0001f01a: R19 := mem[#806, el]:u64
0001f01f: R20 := mem[#806 + 8, el]:u64
0001f026: R29 := mem[R31, el]:u64
0001f02b: R30 := mem[R31 + 8, el]:u64
0001f02f: R31 := R31 + 0x30
0001f034: R1 := 0
0001f039: R2 := 0
0001f03e: R3 := 0
0001f043: R4 := 0
0001f048: R16 := 0
0001f04d: R17 := 0
0001f052: call R30 with noreturn

000359b7: sub http_has_body(http_has_body_result)
00035ea8: http_has_body_result :: out u32 = low:32[R0]

0001dd71:
0001dd78: #730 := R31 - 0x30
0001dd7e: mem := mem with [#730, el]:u64 <- R29
0001dd84: mem := mem with [#730 + 8, el]:u64 <- R30
0001dd88: R31 := #730
0001dd8e: R29 := R31
0001dd94: #731 := R31 + 0x10
0001dd9a: mem := mem with [#731, el]:u64 <- R19
0001dda0: mem := mem with [#731 + 8, el]:u64 <- R20
0001dda6: R19 := R1
0001ddac: #732 := R31 + 0x20
0001ddb2: mem := mem with [#732, el]:u64 <- R21
0001ddb8: mem := mem with [#732 + 8, el]:u64 <- R22
0001ddbe: R21 := R0
0001ddc4: when R1 = 0 goto %0001ddc2
000359b8: goto %00028c9e

0001ddc2:
0001ddcb: when R0 = 0 goto %0001ddc9
000359b9: goto %0001de79

00028c9e:
00028ca3: R0 := pad:64[mem[R1 + 0x1C, el]:u32]
00028ca8: when 31:0[R0] <> 0 goto %0001de51
000359ba: goto %00028cac

0001de51:
0001de54: when R21 = 0 goto %0001ddc9
000359bb: goto %0001de58

0001ddc9:
0001ddd2: R4 := R19
0001ddd7: R2 := 0x414000
0001dddc: R3 := 0
0001dde2: R2 := R2 + 0x6B8
0001dde7: R1 := 2
0001ddec: R0 := 3
0001ddf1: R30 := 0x409B60
0001ddf3: call @__syslog_chk with return %0001ddf5

0001ddf5:
0001ddf8: goto %0001ddf6

0001de58:
0001de5c: #735 := ~R21
0001de61: #736 := R1 + ~R21
0001de67: VF := extend:128[#736 + 1] <> extend:128[R1] + extend:128[#735] + 1
0001de6d: CF := pad:128[#736 + 1] <> pad:128[R1] + pad:128[#735] + 1
0001de71: ZF := #736 + 1 = 0
0001de75: NF := 63:63[#736 + 1]
0001de7b: when ZF <> 1 goto %0001de79
000359bc: goto %00028bdd

0001de79:
0001de83: R0 := pad:64[mem[R21, el]:u32]
0001de89: when 31:0[R0] = 0 goto %0001de87
000359bd: goto %00028b59

0001de87:
0001de90: R19 := R21
0001de95: R20 := 1
0001de9a: goto %0001de98

00028b59:
00028b5e: R19 := mem[R21 + 0x28, el]:u64
00028b63: R0 := 0x414000
00028b69: R0 := R0 + 0x110
00028b6f: R1 := R19
00028b74: R30 := 0x409AA4
00028b76: call @strcasecmp with return %00028b78

00028b78:
00028b7c: when 31:0[R0] = 0 goto %00028b7a
000359be: goto %00028b9c

00028b9c:
00028ba0: R1 := R19
00028ba5: R0 := 0x413000
00028bab: R0 := R0 + 0xBF0
00028bb0: R30 := 0x409AB8
00028bb2: call @strcasecmp with return %00028bb4

00028bb4:
00028bb7: VF := 0
00028bba: CF := 1
00028bbe: ZF := 31:0[R0] = 0
00028bc2: NF := 31:31[R0]
00028bc8: R19 := R21
00028bd4: when ZF goto %00028bcd
00028bd5: goto %00028bd0

00028bd0:
00028bd1: R20 := 1
00028bd7: goto %00028bd3

00028bcd:
00028bce: R20 := 0
00028bd6: goto %00028bd3

00028bd3:
00028bdb: goto %0001de98

00028cac:
00028caf: when R21 <> 0 goto %00028bdd
000359bf: goto %00028be6

00028bdd:
00028be2: R0 := pad:64[mem[R21, el]:u32]
00028be8: when 31:0[R0] = 0 goto %00028be6
000359c0: goto %00028c78

00028c78:
00028c7d: R1 := mem[R21 + 0x28, el]:u64
00028c82: R0 := 0x413000
00028c88: R0 := R0 + 0xBF0
00028c8d: R30 := 0x409A68
00028c8f: call @strcasecmp with return %00028c91

00028c91:
00028c94: when 31:0[R0] <> 0 goto %00028be6
000359c1: goto %00028c98

00028c98:
00028c9c: R21 := R19
000359c2: goto %00028b7a

00028b7a:
00028b84: R0 := mem[R21 + 8, el]:u64
00028b89: R1 := 0x413000
00028b8f: R1 := R1 + 0x7E8
00028b94: R30 := 0x409A80
00028b96: call @hlist_get with return %00028b98

00028b98:
00028b9a: goto %0001ddf6

00028be6:
00028bf0: R0 := pad:64[mem[R19 + 0x10, el]:u32]
00028bf5: R3 := 0x130
00028bfa: R1 := 0x63
00028c00: #1208 := 31:0[R0] - 0xCC
00028c05: VF := extend:64[#1208] <> extend:64[31:0[R0]] - 0xCC
00028c0a: CF := pad:64[#1208] <> pad:64[31:0[R0]] + 0xFFFFFF34
00028c0e: ZF := #1208 = 0
00028c12: NF := 31:31[#1208]
00028c18: R2 := pad:64[31:0[R0] - 0x64]
00028c1e: #1209 := ~31:0[R3]
00028c23: #1210 := 31:0[R0] + ~31:0[R3]
00028c27: #1211 := ZF <> 1
00028c2e: VF := #1211 & extend:64[#1210 + 1] <> extend:64[31:0[R0]] +
          extend:64[#1209] + 1
00028c35: CF := #1211 & pad:64[#1210 + 1] <> pad:64[31:0[R0]] + pad:64[#1209]
          + 1
00028c3a: ZF := #1210 + 1 = 0 | ~#1211
00028c3f: NF := #1211 & 31:31[#1210 + 1]
00028c45: #1212 := ~31:0[R1]
00028c4a: #1213 := 31:0[R2] + ~31:0[R1]
00028c4e: #1214 := ZF <> 1
00028c55: VF := #1214 & extend:64[#1213 + 1] <> extend:64[31:0[R2]] +
          extend:64[#1212] + 1
00028c5c: CF := #1214 & pad:64[#1213 + 1] <> pad:64[31:0[R2]] + pad:64[#1212]
          + 1
00028c61: ZF := #1214 & #1213 + 1 = 0
00028c66: NF := #1214 & 31:31[#1213 + 1]
00028c73: when ~(CF & ~ZF) goto %00028c6c
00028c74: goto %00028c6f

00028c6f:
00028c70: R20 := 1
00028c76: goto %00028c72

00028c6c:
00028c6d: R20 := 0
00028c75: goto %00028c72

00028c72:
000359c3: goto %0001de98

0001de98:
0001dea0: R0 := mem[R19 + 8, el]:u64
0001dea5: R1 := 0x413000
0001deab: R1 := R1 + 0x7E8
0001deb0: R30 := 0x4099D8
0001deb2: call @hlist_get with return %0001deb4

0001deb4:
0001deb7: VF := 0
0001deba: CF := 1
0001debe: ZF := R0 = 0
0001dec2: NF := 63:63[R0]
0001dece: when ZF <> 1 goto %0001dec7
0001decf: goto %0001deca

0001deca:
0001decb: R2 := 1
0001ded1: goto %0001decd

0001dec7:
0001dec8: R2 := 0
0001ded0: goto %0001decd

0001decd:
0001ded8: R22 := pad:64[31:0[R20] & 31:0[R2]]
0001dedd: VF := 0
0001dee0: CF := 0
0001dee5: ZF := (31:0[R20] & 31:0[R2]) = 0
0001deea: NF := 31:31[R20] & 31:31[R2]
0001def0: when ZF <> 1 goto %0001deee
000359c4: goto %00028af2

0001deee:
0001def8: R0 := mem[R19 + 8, el]:u64
0001defd: R1 := 0x414000
0001df03: R1 := R1 + 0x738
0001df08: R30 := 0x409AD8
0001df0a: call @hlist_in with return %0001df0c

0001df0c:
0001df10: when 31:0[R0] <> 0 goto %0001df0e
000359c5: goto %0001dfb9

0001df0e:
0001df16: R20 := 0x413000
0001df1b: goto %0001df19

0001dfb9:
0001dfbe: R0 := mem[R19 + 8, el]:u64
0001dfc3: R20 := 0x413000
0001dfc9: R1 := R20 + 0x7F8
0001dfce: R30 := 0x409AEC
0001dfd0: call @hlist_in with return %0001dfd2

0001dfd2:
0001dfd6: when 31:0[R0] = 0 goto %0001dfd4
000359c6: goto %0001df19

0001dfd4:
0001dfde: R0 := mem[R19 + 8, el]:u64
0001dfe3: R2 := 0x413000
0001dfe8: R1 := 0x413000
0001dfee: R2 := R2 + 0xAF0
0001dff4: R1 := R1 + 0x7C0
0001dff9: R30 := 0x409B7C
0001dffb: call @hlist_subcmp with return %0001dffd

0001dffd:
0001e000: when 31:0[R0] <> 0 goto %0001df19
000359c7: goto %0001e004

0001e004:
0001e006: goto %0001ddf6

0001df19:
0001df21: R0 := mem[R19 + 8, el]:u64
0001df27: R20 := R20 + 0x7F8
0001df2d: R1 := R20
0001df32: R30 := 0x409B00
0001df34: call @hlist_in with return %0001df36

0001df36:
0001df3a: when 31:0[R0] <> 0 goto %0001df38
000359c8: goto %0001df6f

0001df38:
0001df42: R0 := mem[R19 + 8, el]:u64
0001df48: R1 := R20
0001df4d: R2 := 0x414000
0001df53: R2 := R2 + 0x748
0001df58: R30 := 0x409B34
0001df5a: call @hlist_subcmp with return %0001df5c

0001df5c:
0001df60: R1 := pad:64[31:0[R0]]
0001df65: R0 := 1
0001df6a: when 31:0[R1] <> 0 goto %0001ddfe
000359c9: goto %0001df6e

0001df6e:
0001df71: goto %0001df6f

0001df6f:
0001df75: R0 := 0xFFFFFFFFFFFFFFFF
0001df7a: goto %0001df78

00028af2:
00028af5: VF := 0
00028af8: CF := 1
00028afc: ZF := R0 = 0
00028b00: NF := 63:63[R0]
00028b06: #1206 := ZF <> 1
00028b09: VF := 0
00028b0d: CF := #1206
00028b12: ZF := 31:0[R20] = 0 | ~#1206
00028b17: NF := #1206 & 31:31[R20]
00028b1c: when ZF goto %0001ddf6
000359ca: goto %00028b20

00028b20:
00028b23: R2 := 0xA
00028b28: R1 := 0
00028b2d: R30 := 0x409A04
00028b30: call @strtoll with return %00028b32

00028b32:
00028b36: #1207 := R0 + 1
00028b3b: VF := extend:128[#1207] <> extend:128[R0] + 1
00028b40: CF := pad:128[#1207] <> pad:128[R0] + 1
00028b44: ZF := #1207 = 0
00028b48: NF := 63:63[#1207]
00028b54: when ZF <> 1 goto %00028b4d
00028b55: goto %00028b50

00028b50:
00028b51: R22 := 1
00028b57: goto %00028b53

00028b4d:
00028b4e: R22 := 0
00028b56: goto %00028b53

00028b53:
000359cb: goto %0001df78

0001df78:
0001df7e: VF := 0
0001df81: CF := 1
0001df85: ZF := 31:0[R22] = 0
0001df89: NF := 31:31[R22]
0001df8f: #737 := ~R19
0001df94: #738 := R21 + ~R19
0001df98: #739 := ZF <> 1
0001df9f: VF := #739 & extend:128[#738 + 1] <> extend:128[R21] +
          extend:128[#737] + 1
0001dfa6: CF := #739 & pad:128[#738 + 1] <> pad:128[R21] + pad:128[#737] + 1
0001dfab: ZF := #739 & #738 + 1 = 0
0001dfb0: NF := #739 & 63:63[#738 + 1]
0001dfb5: when ZF <> 1 goto %0001ddfe
000359cc: goto %0001ddf6

0001ddf6:
0001ddfc: R0 := 0
000359cd: goto %0001ddfe

0001ddfe:
0001de02: #733 := R31 + 0x10
0001de07: R19 := mem[#733, el]:u64
0001de0c: R20 := mem[#733 + 8, el]:u64
0001de12: #734 := R31 + 0x20
0001de17: R21 := mem[#734, el]:u64
0001de1c: R22 := mem[#734 + 8, el]:u64
0001de23: R29 := mem[R31, el]:u64
0001de28: R30 := mem[R31 + 8, el]:u64
0001de2c: R31 := R31 + 0x30
0001de31: R1 := 0
0001de36: R2 := 0
0001de3b: R3 := 0
0001de40: R4 := 0
0001de45: R16 := 0
0001de4a: R17 := 0
0001de4f: call R30 with noreturn

000359ce: sub http_parse_basic(http_parse_basic_result)
00035ea9: http_parse_basic_result :: out u32 = low:32[R0]

0001f2e5:
0001f2e9: #813 := R31 - 0x30
0001f2ef: mem := mem with [#813, el]:u64 <- R29
0001f2f5: mem := mem with [#813 + 8, el]:u64 <- R30
0001f2f9: R31 := #813
0001f2ff: R29 := R31
0001f305: #814 := R31 + 0x10
0001f30b: mem := mem with [#814, el]:u64 <- R19
0001f311: mem := mem with [#814 + 8, el]:u64 <- R20
0001f317: R20 := R2
0001f31d: R19 := R0
0001f322: R2 := 0x414000
0001f328: R2 := R2 + 0x848
0001f32e: #815 := R31 + 0x20
0001f334: mem := mem with [#815, el]:u64 <- R21
0001f33a: mem := mem with [#815 + 8, el]:u64 <- R22
0001f340: R21 := R1
0001f345: R30 := 0x409E28
0001f347: call @hlist_subcmp with return %0001f349

0001f349:
0001f34d: when 31:0[R0] <> 0 goto %0001f34b
000359cf: goto %000287cf

0001f34b:
0001f354: R0 := R19
0001f35a: R1 := R21
0001f35f: R30 := 0x409E60
0001f361: call @hlist_get with return %0001f363

0001f363:
0001f367: R19 := R0
0001f36d: when R0 = 0 goto %0001f36b
000359d0: goto %00028705

0001f36b:
0001f373: R3 := 0x417000
0001f379: R3 := R3 + 0x308
0001f37e: R1 := 0x414000
0001f383: R0 := 0x414000
0001f389: R3 := R3 + 0x10
0001f38f: R1 := R1 + 0x488
0001f395: R0 := R0 + 0x850
0001f39a: R2 := 0x297
0001f39f: R30 := 0x40A038
0001f3a1: call @__assert_fail with return %0001f3a3

0001f3a3:
000359d1: call @sighandler with noreturn

00028705:
00028708: R30 := 0x409E6C
0002870a: call @strlen with return %0002870c

0002870c:
00028710: R0 := R0 + 1
00028715: R30 := 0x409E74
00028717: call @zmalloc with return %00028719

00028719:
0002871d: R21 := R0
00028723: R0 := R19
00028728: R30 := 0x409E80
0002872a: call @strlen with return %0002872c

0002872c:
0002872f: R3 := 5
00028734: goto %00028732

00028732:
00028739: #1197 := ~R3
0002873e: #1198 := R0 + ~R3
00028744: VF := extend:128[#1198 + 1] <> extend:128[R0] + extend:128[#1197] +
          1
0002874a: CF := pad:128[#1198 + 1] <> pad:128[R0] + pad:128[#1197] + 1
0002874e: ZF := #1198 + 1 = 0
00028752: NF := 63:63[#1198 + 1]
00028759: when CF & ~ZF goto %00028757
000359d2: goto %00028784

00028757:
00028760: R3 := R3 + 1
00028768: R4 := pad:64[mem[R19 + R3]]
0002876e: #1199 := 31:0[R4] - 0x20
00028773: VF := extend:64[#1199] <> extend:64[31:0[R4]] - 0x20
00028778: CF := pad:64[#1199] <> pad:64[31:0[R4]] + 0xFFFFFFE0
0002877c: ZF := #1199 = 0
00028780: NF := 31:31[#1199]
00028786: when ZF <> 1 goto %00028784
000359d3: goto %00028732

00028784:
0002878e: R1 := R19 + R3
00028794: R0 := R21
00028799: R30 := 0x409EAC
0002879b: call @from_base64 with return %0002879d

0002879d:
000287a1: R0 := R21
000287a6: R1 := 0x3A
000287ab: R30 := 0x409EB8
000287ad: call @strchr with return %000287af

000287af:
000287b3: R19 := R0
000287b9: when R0 = 0 goto %000287b7
000359d4: goto %00028825

000287b7:
000287c0: R0 := R21
000287c5: R30 := 0x40A00C
000287c7: call @free with return %000287c9

000287c9:
000287cc: R0 := 0xFFFFFFFF
000287d1: goto %000287cf

00028825:
0002882a: mem := mem with [R0] <- 0
0002882f: R1 := 0x5C
00028835: R0 := R21
0002883a: R30 := 0x409ED0
0002883c: call @strchr with return %0002883e

0002883e:
00028842: when R0 = 0 goto %00028840
000359d5: goto %00028a5d

00028840:
00028849: when R20 = 0 goto %00028847
000359d6: goto %00028a41

00028a41:
00028a45: R1 := R21
00028a4b: R0 := R20
00028a50: R2 := 0x32
00028a55: R30 := 0x409FB8
00028a57: call @strlcpy with return %00028a59

00028a59:
00028a5b: goto %00028847

00028a5d:
00028a62: mem := mem with [R0] <- 0
00028a67: when R20 <> 0 goto %00028974
000359d7: goto %00028847

00028974:
00028978: R22 := R0 + 1
0002897d: R2 := 0x32
00028983: R1 := R21
0002898a: R0 := R20 + R2
0002898f: R30 := 0x409F3C
00028991: call @strlcpy with return %00028993

00028993:
00028996: when R22 = 0 goto %00028847
000359d8: goto %0002899a

0002899a:
0002899e: R1 := R22
000289a4: R0 := R20
000289a9: R2 := 0x32
000289ae: R30 := 0x409F50
000289b0: call @strlcpy with return %000289b2

000289b2:
000289b7: R0 := pad:64[mem[R20 + 0x12C, el]:u32]
000289bd: when 31:0[R0] = 0 goto %000289bb
000359d9: goto %00028855

00028847:
00028851: R0 := pad:64[mem[R20 + 0x12C, el]:u32]
00028857: when 31:0[R0] <> 0 goto %00028855
000359da: goto %000289bb

00028855:
0002885e: R2 := R19 + 1
00028864: R1 := R20 + 0x32
0002886a: R0 := R20
0002886f: R30 := 0x409F68
00028871: call @ntlm2_hash_password with return %00028873

00028873:
00028877: when R0 <> 0 goto %00028875
000359db: goto %00028a3a

00028875:
0002887f: R2 := mem[R0, el]:u64
00028884: R3 := mem[R0 + 8, el]:u64
0002888a: R1 := R20 + 0xFA
00028892: mem := mem with [R1, el]:u64 <- R2
00028898: mem := mem with [R1 + 8, el]:u64 <- R3
0002889d: R30 := 0x409FCC
0002889f: call @free with return %000288a1

000288a1:
000288a4: goto %000288a2

00028a3a:
00028a3d: R30 := 0x409F70
00028a3f: call @free with return %000288a2

000288a2:
000288aa: R0 := pad:64[mem[R20 + 0x130, el]:u32]
000288b0: when 31:0[R0] = 0 goto %000288ae
000359dc: goto %000289c9

000289bb:
000289c5: R0 := pad:64[mem[R20 + 0x130, el]:u32]
000289cb: when 31:0[R0] <> 0 goto %000289c9
000359dd: goto %000288ae

000289c9:
000289d2: R0 := R19 + 1
000289d7: R30 := 0x409F80
000289d9: call @ntlm_hash_nt_password with return %000289db

000289db:
000289df: when R0 <> 0 goto %000289dd
000359de: goto %00028a28

000289dd:
000289e7: R2 := mem[R0, el]:u64
000289ec: R3 := mem[R0 + 8, el]:u64
000289f2: #1204 := R20 + 0xC8
000289f8: mem := mem with [#1204, el]:u64 <- R2
000289fe: mem := mem with [#1204 + 8, el]:u64 <- R3
00028a05: R1 := mem[R0 + 0xD, el]:u64
00028a0d: mem := mem with [R20 + 0xD5, el]:u64 <- R1
00028a12: R30 := 0x409FE4
00028a14: call @free with return %00028a16

00028a16:
00028a19: goto %00028a17

00028a28:
00028a2b: R30 := 0x409F88
00028a2d: call @free with return %00028a17

00028a17:
00028a1f: R0 := pad:64[mem[R20 + 0x134, el]:u32]
00028a24: when 31:0[R0] = 0 goto %0002890c
000359df: goto %000288bc

000288ae:
000288b8: R0 := pad:64[mem[R20 + 0x134, el]:u32]
000288be: when 31:0[R0] <> 0 goto %000288bc
000359e0: goto %0002890c

000288bc:
000288c5: R0 := R19 + 1
000288ca: R30 := 0x409F98
000288cc: call @ntlm_hash_lm_password with return %000288ce

000288ce:
000288d2: when R0 <> 0 goto %000288d0
000359e1: goto %00028a2f

000288d0:
000288d9: R1 := R20 + 0x96
000288e0: R2 := mem[R0, el]:u64
000288e5: R3 := mem[R0 + 8, el]:u64
000288ed: mem := mem with [R1, el]:u64 <- R2
000288f3: mem := mem with [R1 + 8, el]:u64 <- R3
000288fa: R1 := mem[R0 + 0xD, el]:u64
00028902: mem := mem with [R20 + 0xA3, el]:u64 <- R1
00028907: R30 := 0x40A000
00028909: call @free with return %0002890b

0002890b:
0002890e: goto %0002890c

00028a2f:
00028a32: R30 := 0x409FA0
00028a34: call @free with return %00028a36

00028a36:
00028a38: goto %0002890c

0002890c:
00028913: R0 := R21
00028918: R30 := 0x409EFC
0002891a: call @free with return %0002891c

0002891c:
00028920: #1202 := R31 + 0x10
00028925: R19 := mem[#1202, el]:u64
0002892a: R20 := mem[#1202 + 8, el]:u64
0002892f: R0 := 1
00028935: #1203 := R31 + 0x20
0002893a: R21 := mem[#1203, el]:u64
0002893f: R22 := mem[#1203 + 8, el]:u64
00028946: R29 := mem[R31, el]:u64
0002894b: R30 := mem[R31 + 8, el]:u64
0002894f: R31 := R31 + 0x30
00028954: R1 := 0
00028959: R2 := 0
0002895e: R3 := 0
00028963: R4 := 0
00028968: R16 := 0
0002896d: R17 := 0
00028972: call R30 with noreturn

000287cf:
000287d6: #1200 := R31 + 0x10
000287db: R19 := mem[#1200, el]:u64
000287e0: R20 := mem[#1200 + 8, el]:u64
000287e6: #1201 := R31 + 0x20
000287eb: R21 := mem[#1201, el]:u64
000287f0: R22 := mem[#1201 + 8, el]:u64
000287f7: R29 := mem[R31, el]:u64
000287fc: R30 := mem[R31 + 8, el]:u64
00028800: R31 := R31 + 0x30
00028805: R1 := 0
0002880a: R2 := 0
0002880f: R3 := 0
00028814: R4 := 0
00028819: R16 := 0
0002881e: R17 := 0
00028823: call R30 with noreturn

000359e2: sub inet_ntoa(inet_ntoa_result)
00035eaa: inet_ntoa_result :: out u32 = low:32[R0]

0002d3e0:
00030a71: R16 := 0x42F000
00030a78: R17 := mem[R16 + 0xC28, el]:u64
00030a7e: R16 := R16 + 0xC28
00030a83: call R17 with noreturn

000359e3: sub inet_ntop(inet_ntop_result)
00035eab: inet_ntop_result :: out u32 = low:32[R0]

0001b0aa:
000311bf: R16 := 0x42F000
000311c6: R17 := mem[R16 + 0xED0, el]:u64
000311cc: R16 := R16 + 0xED0
000311d1: call R17 with noreturn

000359e4: sub is_http_header(is_http_header_result)
00035eac: is_http_header_result :: out u32 = low:32[R0]

00020516:
0002051d: #877 := R31 - 0x20
00020523: mem := mem with [#877, el]:u64 <- R29
00020529: mem := mem with [#877 + 8, el]:u64 <- R30
0002052d: R31 := #877
00020532: R1 := 0x414000
00020538: R1 := R1 + 0x400
0002053e: R29 := R31
00020544: #878 := R31 + 0x10
0002054a: mem := mem with [#878, el]:u64 <- R19
00020550: mem := mem with [#878 + 8, el]:u64 <- R20
00020556: R20 := R0
0002055b: R30 := 0x40870C
0002055d: call @strcspn with return %0002055f

0002055f:
00020563: R19 := R0
00020569: R0 := R20
0002056e: R30 := 0x408718
00020570: call @strlen with return %00020572

00020572:
00020576: #879 := ~R0
0002057b: #880 := R19 + ~R0
00020581: VF := extend:128[#880 + 1] <> extend:128[R19] + extend:128[#879] +
          1
00020587: CF := pad:128[#880 + 1] <> pad:128[R19] + pad:128[#879] + 1
0002058b: ZF := #880 + 1 = 0
0002058f: NF := 63:63[#880 + 1]
00020595: #881 := R31 + 0x10
0002059a: R19 := mem[#881, el]:u64
0002059f: R20 := mem[#881 + 8, el]:u64
000205ab: when ZF goto %000205a4
000205ac: goto %000205a7

000205a7:
000205a8: R0 := 1
000205ae: goto %000205aa

000205a4:
000205a5: R0 := 0
000205ad: goto %000205aa

000205aa:
000205b5: R29 := mem[R31, el]:u64
000205ba: R30 := mem[R31 + 8, el]:u64
000205be: R31 := R31 + 0x20
000205c3: R1 := 0
000205c8: R16 := 0
000205cd: R17 := 0
000205d2: call R30 with noreturn

000359e5: sub is_memory_all_zero(is_memory_all_zero_result)
00035ead: is_memory_all_zero_result :: out u32 = low:32[R0]

00011d21:
00011d25: when R1 = 0 goto %00011d23
000359e6: goto %00017af4

00017af4:
00017af9: R2 := R0 + R1
00017afe: goto %00017afc

00017afc:
00017b04: R1 := pad:64[mem[R0]]
00017b0a: R0 := R0 + 1
00017b10: when 31:0[R1] = 0 goto %00017b0e
000359e7: goto %00017b39

00017b39:
00017b3c: R0 := 0
00017b41: R1 := 0
00017b46: R2 := 0
00017b4b: call R30 with noreturn

00017b0e:
00017b17: #338 := ~R2
00017b1c: #339 := R0 + ~R2
00017b22: VF := extend:128[#339 + 1] <> extend:128[R0] + extend:128[#338] + 1
00017b28: CF := pad:128[#339 + 1] <> pad:128[R0] + pad:128[#338] + 1
00017b2c: ZF := #339 + 1 = 0
00017b30: NF := 63:63[#339 + 1]
00017b35: when ZF goto %00011d23
000359e8: goto %00017afc

00011d23:
00011d2b: R0 := 1
00011d30: R1 := 0
00011d35: R2 := 0
00011d3a: call R30 with noreturn

000359e9: sub listen(listen_fd, listen_n, listen_result)
00035eae: listen_fd :: in u32 = low:32[R0]
00035eaf: listen_n :: in u32 = low:32[R1]
00035eb0: listen_result :: out u32 = low:32[R0]

0001b2b6:
000309d7: R16 := 0x42F000
000309de: R17 := mem[R16 + 0xBF0, el]:u64
000309e4: R16 := R16 + 0xBF0
000309e9: call R17 with noreturn

000359ea: sub listen_add(listen_add_result)
00035eb1: listen_add_result :: out u32 = low:32[R0]

0001f495:
0001f499: R31 := R31 - 0x50
0001f49e: R4 := 0x42F000
0001f4a5: R4 := mem[R4 + 0xFB8, el]:u64
0001f4ab: #817 := R31 + 0x10
0001f4b1: mem := mem with [#817, el]:u64 <- R29
0001f4b7: mem := mem with [#817 + 8, el]:u64 <- R30
0001f4bd: R29 := R31 + 0x10
0001f4c3: #818 := R31 + 0x20
0001f4c9: mem := mem with [#818, el]:u64 <- R19
0001f4cf: mem := mem with [#818 + 8, el]:u64 <- R20
0001f4d5: R20 := R2
0001f4db: R19 := pad:64[31:0[R3]]
0001f4e1: #819 := R31 + 0x30
0001f4e7: mem := mem with [#819, el]:u64 <- R21
0001f4ed: mem := mem with [#819 + 8, el]:u64 <- R22
0001f4f3: R22 := R1
0001f4fb: mem := mem with [R31 + 0x40, el]:u64 <- R23
0001f501: R23 := R0
0001f507: R0 := R2
0001f50e: R1 := mem[R4, el]:u64
0001f516: mem := mem with [R31 + 8, el]:u64 <- R1
0001f51b: R1 := 0
0001f520: R1 := 0x3A
0001f525: R30 := 0x40A11C
0001f527: call @strrchr with return %0001f529

0001f529:
0001f52d: when R0 = 0 goto %0001f52b
000359eb: goto %00028671

0001f52b:
0001f533: R1 := 0
0001f539: R0 := R20
0001f53e: R2 := 0xA
0001f543: R30 := 0x40A240
0001f545: call @strtol with return %0001f547

0001f547:
0001f54b: R1 := R0
0001f551: when 31:0[R0] = 0 goto %0001f54f
000359ec: goto %000284ca

000284ca:
000284ce: R2 := pad:64[31:0[R19]]
000284d4: R0 := R31
000284d9: R30 := 0x40A254
000284db: call @so_resolv_wildcard with return %000284dd

000284dd:
000284e0: goto %000284de

00028671:
00028676: R1 := pad:64[mem[R20]]
0002867d: R19 := R0 + ~R20 + 1
00028683: #1195 := 31:0[R1] - 0x5B
00028688: VF := extend:64[#1195] <> extend:64[31:0[R1]] - 0x5B
0002868d: CF := pad:64[#1195] <> pad:64[31:0[R1]] + 0xFFFFFFA5
00028691: ZF := #1195 = 0
00028695: NF := 31:31[#1195]
0002869b: when ZF <> 1 goto %00028699
000359ed: goto %000286bc

000286bc:
000286c0: R0 := pad:64[31:0[R19] - 1]
000286c8: R0 := pad:64[mem[R20 + extend:64[31:0[R0]]]]
000286ce: #1196 := 31:0[R0] - 0x5D
000286d3: VF := extend:64[#1196] <> extend:64[31:0[R0]] - 0x5D
000286d8: CF := pad:64[#1196] <> pad:64[31:0[R0]] + 0xFFFFFFA3
000286dc: ZF := #1196 = 0
000286e0: NF := 31:31[#1196]
000286e5: when ZF goto %000285cf
000359ee: goto %00028699

000285cf:
000285d3: R2 := pad:64[31:0[R19] - 2]
000285d9: R0 := R20
000285de: R1 := 1
000285e3: R30 := 0x40A228
000285e5: call @substr with return %000285e7

000285e7:
000285eb: R21 := R0
000285f0: goto %000285ee

00028699:
000286a2: R2 := pad:64[31:0[R19]]
000286a8: R0 := R20
000286ad: R1 := 0
000286b2: R30 := 0x40A150
000286b4: call @substr with return %000286b6

000286b6:
000286ba: R21 := R0
000359ef: goto %000285ee

000285ee:
000285f5: R19 := extend:64[31:0[R19]]
000285fa: R2 := 0xA
00028600: R19 := R19 + 1
00028605: R1 := 0
0002860c: R0 := R20 + R19
00028611: R30 := 0x40A16C
00028613: call @strtol with return %00028615

00028615:
00028619: R2 := R0
0002861e: when 31:0[R0] = 0 goto %0001f54f
000359f0: goto %00028622

00028622:
00028626: R1 := R21
0002862c: R0 := R31
00028631: R30 := 0x40A180
00028633: call @so_resolv with return %00028635

00028635:
00028638: when 31:0[R0] = 0 goto %0001f54f
000359f1: goto %0002863c

0001f54f:
0001f558: R3 := R20
0001f55d: R2 := 0x414000
0001f563: R2 := R2 + 0x8B8
0001f568: R1 := 2
0001f56d: R0 := 3
0001f572: R30 := 0x40A270
0001f574: call @__syslog_chk with return %0001f576

0001f576:
0001f579: R0 := 1
0001f57e: R30 := 0x40A278
0001f580: call @myexit with return %0001f582

0002863c:
00028640: R0 := R21
00028645: R30 := 0x40A18C
00028647: call @free with return %000284de

000284de:
000284e6: R1 := mem[R31, el]:u64
000284ec: R0 := R22
000284f1: R2 := 0
000284f6: R30 := 0x40A19C
000284f8: call @so_listen with return %000284fa

000284fa:
000284fd: VF := 0
00028500: CF := 1
00028504: ZF := 31:0[R0] = 0
00028508: NF := 31:31[R0]
00028510: when ~(NF = VF & ~ZF) goto %0002850e
000359f2: goto %00028649

00028649:
0002864c: R2 := 0x414000
00028652: R4 := R20
00028658: R3 := R23
0002865e: R2 := R2 + 0x8E0
00028663: R1 := 2
00028668: R0 := 6
0002866d: R30 := 0x40A1C0
0002866f: call @__syslog_chk with return %0002850e

0002850e:
00028518: R0 := mem[R31, el]:u64
0002851d: R30 := 0x40A1C8
0002851f: call @freeaddrinfo with return %00028521

00028521:
00028524: R0 := 0x42F000
0002852b: R0 := mem[R0 + 0xFB8, el]:u64
00028532: R2 := mem[R31 + 8, el]:u64
00028539: R1 := mem[R0, el]:u64
0002853f: #1190 := ~R1
00028544: #1191 := R2 + ~R1
0002854a: VF := extend:128[#1191 + 1] <> extend:128[R2] + extend:128[#1190] +
          1
00028550: CF := pad:128[#1191 + 1] <> pad:128[R2] + pad:128[#1190] + 1
00028554: ZF := #1191 + 1 = 0
00028558: NF := 63:63[#1191 + 1]
0002855c: R2 := #1191 + 1
00028561: R1 := 0
00028566: when ZF <> 1 goto %0001f582
000359f3: goto %0002856a

0001f582:
0001f585: R30 := 0x40A27C
0001f587: call @__stack_chk_fail with return %0001f589

0001f589:
000359f4: call @tunnel_add with noreturn

0002856a:
0002856e: #1192 := R31 + 0x10
00028573: R29 := mem[#1192, el]:u64
00028578: R30 := mem[#1192 + 8, el]:u64
0002857e: #1193 := R31 + 0x20
00028583: R19 := mem[#1193, el]:u64
00028588: R20 := mem[#1193 + 8, el]:u64
0002858e: #1194 := R31 + 0x30
00028593: R21 := mem[#1194, el]:u64
00028598: R22 := mem[#1194 + 8, el]:u64
0002859f: R23 := mem[R31 + 0x40, el]:u64
000285a5: R31 := R31 + 0x50
000285aa: R0 := 0
000285af: R1 := 0
000285b4: R2 := 0
000285b9: R3 := 0
000285be: R4 := 0
000285c3: R16 := 0
000285c8: R17 := 0
000285cd: call R30 with noreturn

000359f5: sub lowercase(lowercase_result)
00035eb2: lowercase_result :: out u32 = low:32[R0]

00010f56:
00010f5a: #14 := R31 - 0x20
00010f60: mem := mem with [#14, el]:u64 <- R29
00010f66: mem := mem with [#14 + 8, el]:u64 <- R30
00010f6a: R31 := #14
00010f70: R29 := R31
00010f76: #15 := R31 + 0x10
00010f7c: mem := mem with [#15, el]:u64 <- R19
00010f82: mem := mem with [#15 + 8, el]:u64 <- R20
00010f88: when R0 = 0 goto %00010f86
000359f6: goto %000182b7

00010f86:
00010f8e: R3 := 0x417000
00010f94: R3 := R3 + 0x3F0
00010f99: R1 := 0x416000
00010f9e: R0 := 0x417000
00010fa4: R3 := R3 + 0x50
00010faa: R1 := R1 + 0xF58
00010fb0: R0 := R0 + 0xB0
00010fb5: R2 := 0x318
00010fba: R30 := 0x40FE6C
00010fbc: call @__assert_fail with return %00010fbe

00010fbe:
000359f7: call @hlist_subcmp with noreturn

000182b7:
000182bb: R20 := R0
000182c0: R19 := 0
000182c5: goto %000182c3

000182c3:
000182ca: R0 := R20
000182cf: R30 := 0x40FE1C
000182d1: call @strlen with return %000182d3

000182d3:
000182d7: #374 := ~R0
000182dc: #375 := R19 + ~R0
000182e2: VF := extend:128[#375 + 1] <> extend:128[R19] + extend:128[#374] +
          1
000182e8: CF := pad:128[#375 + 1] <> pad:128[R19] + pad:128[#374] + 1
000182ec: ZF := #375 + 1 = 0
000182f0: NF := 63:63[#375 + 1]
000182f6: when CF <> 1 goto %000182f4
000359f8: goto %00018326

00018326:
0001832a: R0 := R20
00018330: #376 := R31 + 0x10
00018335: R19 := mem[#376, el]:u64
0001833a: R20 := mem[#376 + 8, el]:u64
00018341: R29 := mem[R31, el]:u64
00018346: R30 := mem[R31 + 8, el]:u64
0001834a: R31 := R31 + 0x20
0001834f: R1 := 0
00018354: R2 := 0
00018359: R3 := 0
0001835e: R16 := 0
00018363: R17 := 0
00018368: call R30 with noreturn

000182f4:
000182fc: R30 := 0x40FE00
000182fe: call @__ctype_tolower_loc with return %00018300

00018300:
00018305: R0 := mem[R0, el]:u64
0001830d: R1 := pad:64[mem[R20 + R19]]
00018315: R0 := pad:64[mem[R0 + (61:0[R1].0), el]:u32]
0001831e: mem := mem with [R20 + R19] <- 7:0[R0]
00018324: R19 := R19 + 1
000359f9: goto %000182c3

000359fa: sub magic_auth_detect(magic_auth_detect_result)
00035eb3: magic_auth_detect_result :: out u32 = low:32[R0]

00023ebf:
00023ec3: R31 := R31 - 0x140
00023ec8: R2 := 0x42F000
00023ecf: R2 := mem[R2 + 0xFB8, el]:u64
00023ed5: #998 := R31 + 0xE0
00023edb: mem := mem with [#998, el]:u64 <- R29
00023ee1: mem := mem with [#998 + 8, el]:u64 <- R30
00023ee7: R29 := R31 + 0xE0
00023eed: #999 := R31 + 0x100
00023ef3: mem := mem with [#999, el]:u64 <- R21
00023ef9: mem := mem with [#999 + 8, el]:u64 <- R22
00023efe: R21 := 0x417000
00023f04: R21 := R21 + 0x268
00023f0a: R1 := R21 + 0x20
00023f10: #1000 := R31 + 0xF0
00023f16: mem := mem with [#1000, el]:u64 <- R19
00023f1c: mem := mem with [#1000 + 8, el]:u64 <- R20
00023f22: R19 := R31 + 0x70
00023f28: #1001 := R31 + 0x110
00023f2e: mem := mem with [#1001, el]:u64 <- R23
00023f34: mem := mem with [#1001 + 8, el]:u64 <- R24
00023f3a: R24 := R0
00023f41: R0 := mem[R2, el]:u64
00023f49: mem := mem with [R31 + 0xD8, el]:u64 <- R0
00023f4e: R0 := 0
00023f55: V4 := mem[R1, el]:u128
00023f5a: V5 := mem[R1 + 0x10, el]:u128
00023f60: #1002 := R1 + 0x20
00023f65: V2 := mem[#1002, el]:u128
00023f6a: V3 := mem[#1002 + 0x10, el]:u128
00023f70: #1003 := R1 + 0x40
00023f75: V0 := mem[#1003, el]:u128
00023f7a: V1 := mem[#1003 + 0x10, el]:u128
00023f82: mem := mem with [R19, el]:u128 <- V4
00023f88: mem := mem with [R19 + 0x10, el]:u128 <- V5
00023f8f: R0 := pad:64[mem[R1 + 0x60, el]:u32]
00023f95: #1004 := R19 + 0x20
00023f9b: mem := mem with [#1004, el]:u128 <- V2
00023fa1: mem := mem with [#1004 + 0x10, el]:u128 <- V3
00023fa7: #1005 := R19 + 0x40
00023fad: mem := mem with [#1005, el]:u128 <- V0
00023fb3: mem := mem with [#1005 + 0x10, el]:u128 <- V1
00023fbb: mem := mem with [R19 + 0x60, el]:u32 <- 31:0[R0]
00023fc0: R30 := 0x408148
00023fc2: call @new_auth with return %00023fc4

00023fc4:
00023fc7: R1 := 0x42F000
00023fce: R1 := mem[R1 + 0xF38, el]:u64
00023fd3: R2 := 1
00023fd9: R20 := R0
00023fe0: R1 := mem[R1, el]:u64
00023fe5: R30 := 0x408160
00023fe7: call @copy_auth with return %00023fe9

00023fe9:
00023fed: R0 := R20 + 0xC8
00023ff2: R1 := 0x32
00023ffa: mem := mem with [R31 + 0x18, el]:u64 <- R0
00023fff: R30 := 0x408170
00024001: call @is_memory_all_zero with return %00024003

00024003:
00024007: when 31:0[R0] <> 0 goto %00024005
000359fb: goto %000240d5

000240d5:
000240d9: R0 := R20 + 0x96
000240de: R1 := 0x32
000240e6: mem := mem with [R31 + 0x20, el]:u64 <- R0
000240eb: R30 := 0x408184
000240ed: call @is_memory_all_zero with return %000240ef

000240ef:
000240f2: when 31:0[R0] <> 0 goto %00024005
000359fc: goto %000240f6

000240f6:
000240fa: R0 := R20 + 0xFA
000240ff: R1 := 0x32
00024107: mem := mem with [R31 + 0x28, el]:u64 <- R0
0002410c: R30 := 0x408198
0002410e: call @is_memory_all_zero with return %00024110

00024110:
00024114: R23 := pad:64[31:0[R0]]
00024119: when 31:0[R0] <> 0 goto %00024005
000359fd: goto %0002411d

00024005:
0002400d: R1 := 0x414000
00024013: R1 := R1 + 0x88
00024018: R0 := 2
0002401e: #1006 := R31 + 0x120
00024024: mem := mem with [#1006, el]:u64 <- R25
0002402a: mem := mem with [#1006 + 8, el]:u64 <- R26
00024030: #1007 := R31 + 0x130
00024036: mem := mem with [#1007, el]:u64 <- R27
0002403c: mem := mem with [#1007 + 8, el]:u64 <- R28
00024041: R30 := 0x4086A8
00024043: call @__printf_chk with return %00024045

00024045:
00024048: R0 := 1
0002404d: R30 := 0x4086B0
0002404f: call @exit with return %00024051

0002411d:
00024120: when R24 = 0 goto %00024051
000359fe: goto %00024124

00024051:
00024054: R1 := 0x413000
00024059: R0 := 0x414000
0002405f: R3 := R21 + 0x88
00024065: R1 := R1 + 0xC40
0002406b: R0 := R0 + 0xE0
00024070: R2 := 0x295
00024076: #1008 := R31 + 0x120
0002407c: mem := mem with [#1008, el]:u64 <- R25
00024082: mem := mem with [#1008 + 8, el]:u64 <- R26
00024088: #1009 := R31 + 0x130
0002408e: mem := mem with [#1009, el]:u64 <- R27
00024094: mem := mem with [#1009 + 8, el]:u64 <- R28
00024099: R30 := 0x4086D4
0002409b: call @__assert_fail with return %0002409d

00024124:
00024128: R0 := R24
0002412d: R1 := 0x414000
00024133: R1 := R1 + 0xF0
00024138: R30 := 0x4081B4
0002413a: call @strstr with return %0002413c

0002413c:
00024140: R21 := R0
00024146: when R0 = 0 goto %00024144
000359ff: goto %00024212

00024144:
0002414c: R0 := 0x42F000
00024153: R0 := mem[R0 + 0xF18, el]:u64
00024158: R1 := 2
0002415e: R3 := R24
00024163: R2 := 0x414000
00024169: R2 := R2 + 0xF8
00024170: R0 := mem[R0, el]:u64
00024175: R30 := 0x408658
00024177: call @__fprintf_chk with return %00024179

00024179:
0002417c: R0 := 0x42F000
00024183: R0 := mem[R0 + 0xFB8, el]:u64
0002418a: R2 := mem[R31 + 0xD8, el]:u64
00024191: R1 := mem[R0, el]:u64
00024197: #1012 := ~R1
0002419c: #1013 := R2 + ~R1
000241a2: VF := extend:128[#1013 + 1] <> extend:128[R2] + extend:128[#1012] +
          1
000241a8: CF := pad:128[#1013 + 1] <> pad:128[R2] + pad:128[#1012] + 1
000241ac: ZF := #1013 + 1 = 0
000241b0: NF := 63:63[#1013 + 1]
000241b4: R2 := #1013 + 1
000241b9: R1 := 0
000241be: when ZF <> 1 goto %000240a4
00035a00: goto %000241c2

000241c2:
000241c6: #1014 := R31 + 0xE0
000241cb: R29 := mem[#1014, el]:u64
000241d0: R30 := mem[#1014 + 8, el]:u64
000241d6: R0 := R20
000241dc: #1015 := R31 + 0xF0
000241e1: R19 := mem[#1015, el]:u64
000241e6: R20 := mem[#1015 + 8, el]:u64
000241ec: #1016 := R31 + 0x100
000241f1: R21 := mem[#1016, el]:u64
000241f6: R22 := mem[#1016 + 8, el]:u64
000241fc: #1017 := R31 + 0x110
00024201: R23 := mem[#1017, el]:u64
00024206: R24 := mem[#1017 + 8, el]:u64
0002420c: R31 := R31 + 0x140
00024210: call @free with noreturn

00024212:
00024216: R22 := R0 + 3
0002421b: R1 := 0x2F
00024221: R0 := R22
00024227: #1018 := R31 + 0x120
0002422d: mem := mem with [#1018, el]:u64 <- R25
00024233: mem := mem with [#1018 + 8, el]:u64 <- R26
00024239: #1019 := R31 + 0x130
0002423f: mem := mem with [#1019, el]:u64 <- R27
00024245: mem := mem with [#1019 + 8, el]:u64 <- R28
0002424a: R30 := 0x4081D4
0002424c: call @strchr with return %0002424e

0002424e:
00024252: R3 := R0
00024257: VF := 0
0002425a: CF := 1
0002425e: ZF := R3 = 0
00024262: NF := 63:63[R3]
00024269: R2 := R3 + ~R21 + 1
0002426f: R2 := pad:64[31:0[R2] - 3]
00024275: R0 := R22
0002427a: R1 := 0
00024287: when ZF <> 1 goto %00024280
00024288: goto %00024283

00024283:
00024284: R2 := 0
0002428a: goto %00024286

00024280:
00024281: R2 := pad:64[31:0[R2]]
00024289: goto %00024286

00024286:
0002428f: R30 := 0x4081F4
00024291: call @substr with return %00024293

00024293:
00024297: R22 := R0
0002429c: R1 := 0x414000
000242a1: R0 := 0x414000
000242a7: R1 := R1 + 0x118
000242ad: R0 := R0 + 0x198
000242b5: mem := mem with [R31, el]:u64 <- R0
000242bb: mem := mem with [R31 + 8, el]:u64 <- R1
000242c2: mem := mem with [R31 + 0x14, el]:u32 <- 0
00035a01: goto %000242c4

000242c4:
000242c7: R30 := 0x408214
000242c9: call @new_rr_data with return %000242cb

000242cb:
000242d1: mem := mem with [R31 + 0x40, el]:u64 <- R0
000242d6: R30 := 0x40821C
000242d8: call @new_rr_data with return %000242da

000242da:
000242de: R21 := R0
000242e6: mem := mem with [R31 + 0x38, el]:u64 <- R21
000242eb: R1 := 1
000242f0: R0 := 0x414000
000242f6: R0 := R0 + 0x110
000242fe: mem := mem with [R21, el]:u32 <- 31:0[R1]
00024303: R30 := 0x408238
00024305: call @strdup with return %00024307

00024307:
0002430d: mem := mem with [R21 + 0x28, el]:u64 <- R0
00024314: R21 := mem[R31 + 0x38, el]:u64
0002431a: R0 := R24
0002431f: R30 := 0x408248
00024321: call @strdup with return %00024323

00024323:
00024328: R25 := mem[R31 + 0x38, el]:u64
00024330: mem := mem with [R21 + 0x30, el]:u64 <- R0
00024335: R0 := 0x413000
0002433b: R0 := R0 + 0xF38
00024340: R30 := 0x40825C
00024342: call @strdup with return %00024344

00024344:
00024349: R21 := mem[R31 + 0x38, el]:u64
00024351: mem := mem with [R25 + 0x48, el]:u64 <- R0
00024356: R0 := 0x413000
0002435c: R2 := R0 + 0x7B0
00024361: R0 := 0x413000
00024367: R1 := R0 + 0xBA8
0002436e: R0 := mem[R21 + 8, el]:u64
00024373: R4 := 1
00024379: R3 := pad:64[31:0[R4]]
0002437e: R30 := 0x408284
00024380: call @hlist_add with return %00024382

00024382:
00024388: mem := mem with [R21 + 8, el]:u64 <- R0
0002438e: when R22 = 0 goto %0002438c
00035a02: goto %000249d1

000249d1:
000249d6: R21 := mem[R31 + 0x38, el]:u64
000249db: R4 := 1
000249e2: R1 := mem[R31 + 8, el]:u64
000249e8: R2 := R22
000249ef: R0 := mem[R21 + 8, el]:u64
000249f5: R3 := pad:64[31:0[R4]]
000249fa: R30 := 0x4082A8
000249fc: call @hlist_add with return %000249fe

000249fe:
00024a04: mem := mem with [R21 + 8, el]:u64 <- R0
00035a03: goto %0002438c

0002438c:
00024395: R4 := R20 + 0x134
0002439a: R3 := 5
000243a1: R28 := pad:64[mem[R19, el]:u32]
000243a6: R27 := pad:64[mem[R19 + 4, el]:u32]
000243ab: R0 := 0x414000
000243b1: #1020 := R19 + 8
000243b6: R26 := pad:64[mem[#1020, el]:u32]
000243bb: R25 := pad:64[mem[#1020 + 4, el]:u32]
000243c1: #1021 := R4 - 8
000243c7: mem := mem with [#1021, el]:u32 <- 31:0[R26]
000243cd: mem := mem with [#1021 + 4, el]:u32 <- 31:0[R28]
000243d5: mem := mem with [R4, el]:u32 <- 31:0[R27]
000243db: mem := mem with [R4 + 4, el]:u32 <- 31:0[R25]
000243e1: R21 := pad:64[31:0[R23] + 1]
000243e7: R1 := R0 + 0x120
000243ed: R2 := pad:64[31:0[R21]]
000243f2: R0 := 2
000243f7: R30 := 0x4082DC
000243f9: call @__printf_chk with return %000243fb

000243fb:
000243ff: R2 := R22
00024405: R1 := R24
0002440a: R0 := 0
0002440f: R30 := 0x4082EC
00024411: call @proxy_connect with return %00024413

00024413:
00024419: mem := mem with [R31 + 0x34, el]:u32 <- 31:0[R0]
0002441f: when 31:31[R0] goto %0002441d
00035a04: goto %00024781

0002441d:
00024425: R1 := 0x414000
0002442b: R1 := R1 + 0x140
00024430: R0 := 2
00024435: R30 := 0x408620
00024437: call @__printf_chk with return %00024439

00024439:
0002443d: R0 := R31 + 0x40
00024442: R30 := 0x408628
00024444: call @free_rr_data with return %00024446

00024446:
0002444a: R0 := R31 + 0x38
0002444f: R30 := 0x408630
00024451: call @free_rr_data with return %00024453

00024453:
00024457: when R22 <> 0 goto %00024455
00035a05: goto %0002477d

0002477d:
0002477f: goto %00024467

00024781:
00024785: #1030 := R31 + 0x38
0002478a: R1 := mem[#1030, el]:u64
0002478f: R2 := mem[#1030 + 8, el]:u64
00024795: R3 := R20
0002479b: R0 := R31 + 0x34
000247a0: R30 := 0x408304
000247a2: call @proxy_authenticate with return %000247a4

000247a4:
000247a8: when 31:0[R0] = 0 goto %000247a6
00035a06: goto %000249a4

000247a6:
000247b0: R0 := mem[R31 + 0x40, el]:u64
000247b5: goto %000247b3

000249a4:
000249a9: R0 := mem[R31 + 0x40, el]:u64
000249b0: R2 := pad:64[mem[R0 + 0x10, el]:u32]
000249b6: #1034 := 31:0[R2] - 0x197
000249bb: VF := extend:64[#1034] <> extend:64[31:0[R2]] - 0x197
000249c0: CF := pad:64[#1034] <> pad:64[31:0[R2]] + 0xFFFFFE69
000249c4: ZF := #1034 = 0
000249c8: NF := 31:31[#1034]
000249cd: when ZF <> 1 goto %00024974
00035a07: goto %000247b3

00024974:
00024979: R0 := pad:64[mem[R31 + 0x14, el]:u32]
0002497e: R1 := 0x414000
00024984: R1 := R1 + 0x170
0002498a: R0 := pad:64[31:0[R0] + 1]
00024992: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R0]
00024997: R0 := 2
0002499c: R30 := 0x4083F8
0002499e: call @__printf_chk with return %000249a0

000249a0:
000249a2: goto %000247ec

000247b3:
000247b9: R30 := 0x40831C
000247bb: call @reset_rr_data with return %000247bd

000247bd:
000247c2: R1 := mem[R31 + 0x38, el]:u64
000247c9: R0 := pad:64[mem[R31 + 0x34, el]:u32]
000247ce: R30 := 0x408328
000247d0: call @headers_send with return %000247d2

000247d2:
000247d6: when 31:0[R0] = 0 goto %000247d4
00035a08: goto %00024880

00024880:
00024885: R1 := mem[R31 + 0x40, el]:u64
0002488c: R0 := pad:64[mem[R31 + 0x34, el]:u32]
00024891: R30 := 0x408338
00024893: call @headers_recv with return %00024895

00024895:
00024898: when 31:0[R0] = 0 goto %000247d4
00035a09: goto %0002489c

000247d4:
000247de: R1 := mem[R31, el]:u64
000247e3: R0 := 2
000247e8: R30 := 0x4083A8
000247ea: call @__printf_chk with return %000247ec

0002489c:
000248a1: R0 := mem[R31 + 0x40, el]:u64
000248a8: R2 := pad:64[mem[R0 + 0x10, el]:u32]
000248ae: #1033 := 31:0[R2] - 0x197
000248b3: VF := extend:64[#1033] <> extend:64[31:0[R2]] - 0x197
000248b8: CF := pad:64[#1033] <> pad:64[31:0[R2]] + 0xFFFFFE69
000248bc: ZF := #1033 = 0
000248c0: NF := 31:31[#1033]
000248c5: when ZF <> 1 goto %0002453e
00035a0a: goto %000248c9

0002453e:
00024541: R1 := 0x414000
00024547: R1 := R1 + 0x268
0002454c: R0 := 2
00024551: R30 := 0x4084B0
00024553: call @__printf_chk with return %00024555

00024555:
00024559: R0 := R31 + 0x40
0002455f: R19 := R31 + 0x48
00024564: R30 := 0x4084BC
00024566: call @free_rr_data with return %00024568

00024568:
0002456c: R0 := R31 + 0x38
00024571: R30 := 0x4084C4
00024573: call @free_rr_data with return %00024575

00024575:
0002457a: R0 := pad:64[mem[R31 + 0x34, el]:u32]
0002457f: R30 := 0x4084CC
00024581: call @close with return %00024583

00024583:
00024586: R3 := 0x430000
0002458c: R3 := R3 + 0x10
00024592: R2 := pad:64[31:0[R23]]
00024597: R1 := 0x414000
0002459c: R0 := 2
000245a2: R1 := R1 + 0x280
000245a9: V0 := mem[R3, el]:u128
000245ae: V1 := mem[R3 + 0x10, el]:u128
000245b5: R3 := mem[R3 + 0x20, el]:u64
000245bd: mem := mem with [R31 + 0x68, el]:u64 <- R3
000245c5: mem := mem with [R19, el]:u128 <- V0
000245cb: mem := mem with [R19 + 0x10, el]:u128 <- V1
000245d0: R30 := 0x4084F8
000245d2: call @__printf_chk with return %000245d4

000245d4:
000245d8: R0 := extend:64[31:0[R23].0]
000245de: R2 := R31 + 0x80
000245e5: R23 := R0 + extend:64[31:0[R23]]
000245ea: R1 := 0x414000
000245ef: R0 := 2
000245f5: R1 := R1 + 0x2B8
000245fd: R2 := extend:64[mem[R2 + (61:0[R23].0), el]:u32]
00024605: R2 := mem[R19 + (60:0[R2].0), el]:u64
0002460a: R30 := 0x40851C
0002460c: call @__printf_chk with return %0002460e

0002460e:
00024612: when 31:0[R25] <> 0 goto %00024610
00035a0b: goto %00024776

00024610:
00024618: R1 := 0x414000
0002461e: R2 := pad:64[31:0[R25]]
00024624: R1 := R1 + 0x2D0
00024629: R0 := 2
0002462e: R30 := 0x4085F4
00024630: call @__printf_chk with return %00024632

00024632:
00024636: when 31:0[R28] = 0 goto %00024634
00035a0c: goto %00024757

00024757:
00024759: goto %000246fd

00024776:
00024779: when 31:0[R28] <> 0 goto %000246fd
00035a0d: goto %00024634

000246fd:
00024702: R0 := mem[R31 + 0x18, el]:u64
00024707: R2 := 8
0002470c: R1 := 0x10
00024711: R30 := 0x4085B8
00024713: call @printmem with return %00024715

00024715:
00024719: R2 := R0
0002471e: R1 := 0x414000
00024724: R1 := R1 + 0x2E8
0002472a: R19 := R0
0002472f: R0 := 2
00024734: R30 := 0x4085D0
00024736: call @__printf_chk with return %00024738

00024738:
0002473c: R0 := R19
00024741: R30 := 0x4085D8
00024743: call @free with return %00024745

00024745:
00024749: when 31:0[R27] = 0 goto %00024747
00035a0e: goto %00024753

00024753:
00024755: goto %0002463b

00024634:
0002463d: when 31:0[R27] <> 0 goto %0002463b
00035a0f: goto %00024747

0002463b:
00024645: R0 := mem[R31 + 0x20, el]:u64
0002464a: R2 := 8
0002464f: R1 := 0x10
00024654: R30 := 0x408550
00024656: call @printmem with return %00024658

00024658:
0002465c: R2 := R0
00024661: R1 := 0x414000
00024667: R1 := R1 + 0x300
0002466d: R19 := R0
00024672: R0 := 2
00024677: R30 := 0x408568
00024679: call @__printf_chk with return %0002467b

0002467b:
0002467f: R0 := R19
00024684: R30 := 0x408570
00024686: call @free with return %00024688

00024688:
0002468c: when 31:0[R26] = 0 goto %0002468a
00035a10: goto %000246b1

00024747:
0002474f: when 31:0[R26] <> 0 goto %000246b1
00035a11: goto %0002468a

000246b1:
000246b6: R0 := mem[R31 + 0x28, el]:u64
000246bb: R2 := 8
000246c0: R1 := 0x10
000246c5: R30 := 0x408584
000246c7: call @printmem with return %000246c9

000246c9:
000246cd: R2 := R0
000246d2: R1 := 0x414000
000246d8: R1 := R1 + 0x318
000246de: R19 := R0
000246e3: R0 := 2
000246e8: R30 := 0x40859C
000246ea: call @__printf_chk with return %000246ec

000246ec:
000246f0: R0 := R19
000246f5: R30 := 0x4085A4
000246f7: call @free with return %000246f9

000246f9:
000246fb: goto %0002468a

0002468a:
00024692: R1 := 0x414000
00024697: R0 := 2
0002469d: R1 := R1 + 0x330
000246a2: R30 := 0x40853C
000246a4: call @__printf_chk with return %000246a6

000246a6:
000246a9: goto %000246a7

000248c9:
000248ce: R0 := mem[R0 + 8, el]:u64
000248d3: R23 := 0x413000
000248d9: R23 := R23 + 0xE10
000248de: R2 := 0x413000
000248e4: R1 := R23
000248ea: R2 := R2 + 0xAE8
000248ef: R30 := 0x408368
000248f1: call @hlist_subcmp_all with return %000248f3

000248f3:
000248f7: when 31:0[R0] <> 0 goto %000248f5
00035a12: goto %0002492c

000248f5:
000248fd: R1 := 0x414000
00024902: R0 := 2
00024908: R1 := R1 + 0x1C8
0002490d: R30 := 0x40840C
0002490f: call @__printf_chk with return %00024911

00024911:
00024913: goto %000247ec

0002492c:
00024931: R0 := mem[R31 + 0x40, el]:u64
00024936: R2 := 0x414000
0002493c: R1 := R23
00024942: R2 := R2 + 0x1F0
00024949: R0 := mem[R0 + 8, el]:u64
0002494e: R30 := 0x408384
00024950: call @hlist_subcmp_all with return %00024952

00024952:
00024955: when 31:0[R0] = 0 goto %00024915
00035a13: goto %00024959

00024915:
00024918: R1 := 0x414000
0002491d: R0 := 2
00024923: R1 := R1 + 0x238
00024928: R30 := 0x408420
0002492a: call @__printf_chk with return %00024834

00024959:
0002495c: R1 := 0x414000
00024961: R0 := 2
00024967: R1 := R1 + 0x1F8
0002496c: R30 := 0x408398
0002496e: call @__printf_chk with return %00024970

00024970:
00024972: goto %000247ec

000247ec:
000247f0: R0 := R31 + 0x40
000247f5: R30 := 0x4083B0
000247f7: call @free_rr_data with return %000247f9

000247f9:
000247fd: R0 := R31 + 0x38
00024802: R30 := 0x4083B8
00024804: call @free_rr_data with return %00024806

00024806:
0002480b: R0 := pad:64[mem[R31 + 0x34, el]:u32]
00024811: R19 := R19 + 0x14
00024816: R30 := 0x4083C4
00024818: call @close with return %0002481a

0002481a:
0002481e: #1031 := 31:0[R21] - 5
00024823: VF := extend:64[#1031] <> extend:64[31:0[R21]] - 5
00024828: CF := pad:64[#1031] <> pad:64[31:0[R21]] + 0xFFFFFFFB
0002482c: ZF := #1031 = 0
00024830: NF := 31:31[#1031]
00024836: when ZF goto %00024834
00035a14: goto %00024876

00024834:
0002483e: R0 := pad:64[mem[R31 + 0x14, el]:u32]
00024844: #1032 := 31:0[R0] - 5
00024849: VF := extend:64[#1032] <> extend:64[31:0[R0]] - 5
0002484e: CF := pad:64[#1032] <> pad:64[31:0[R0]] + 0xFFFFFFFB
00024852: ZF := #1032 = 0
00024856: NF := 31:31[#1032]
0002485b: when ZF goto %0002475b
00035a15: goto %0002485f

0002475b:
0002475e: R1 := 0x414000
00024763: R0 := 2
00024769: R1 := R1 + 0x368
0002476e: R30 := 0x40860C
00024770: call @__printf_chk with return %00024772

00024772:
00024774: goto %000246a7

0002485f:
00024862: R1 := 0x414000
00024867: R0 := 2
0002486d: R1 := R1 + 0x3A0
00024872: R30 := 0x40843C
00024874: call @__printf_chk with return %000246a7

000246a7:
000246ad: when R22 = 0 goto %00024467
00035a16: goto %00024455

00024455:
0002445e: R0 := R22
00024463: R30 := 0x408448
00024465: call @free with return %00024467

00024467:
0002446a: R0 := 0x42F000
00024471: R0 := mem[R0 + 0xFB8, el]:u64
00024478: R2 := mem[R31 + 0xD8, el]:u64
0002447f: R1 := mem[R0, el]:u64
00024485: #1022 := ~R1
0002448a: #1023 := R2 + ~R1
00024490: VF := extend:128[#1023 + 1] <> extend:128[R2] + extend:128[#1022] +
          1
00024496: CF := pad:128[#1023 + 1] <> pad:128[R2] + pad:128[#1022] + 1
0002449a: ZF := #1023 + 1 = 0
0002449e: NF := 63:63[#1023 + 1]
000244a2: R2 := #1023 + 1
000244a7: R1 := 0
000244ac: when ZF <> 1 goto %0002409d
00035a17: goto %000244b0

0002409d:
000240a0: R30 := 0x4086D8
000240a2: call @__stack_chk_fail with return %000240a4

000240a4:
000240a8: #1010 := R31 + 0x120
000240ae: mem := mem with [#1010, el]:u64 <- R25
000240b4: mem := mem with [#1010 + 8, el]:u64 <- R26
000240ba: #1011 := R31 + 0x130
000240c0: mem := mem with [#1011, el]:u64 <- R27
000240c6: mem := mem with [#1011 + 8, el]:u64 <- R28
000240cb: R30 := 0x4086E4
000240cd: call @__stack_chk_fail with return %000240cf

000240cf:
00035a18: call @is_http_header with noreturn

000244b0:
000244b4: #1024 := R31 + 0xE0
000244b9: R29 := mem[#1024, el]:u64
000244be: R30 := mem[#1024 + 8, el]:u64
000244c4: #1025 := R31 + 0xF0
000244c9: R19 := mem[#1025, el]:u64
000244ce: R20 := mem[#1025 + 8, el]:u64
000244d4: #1026 := R31 + 0x100
000244d9: R21 := mem[#1026, el]:u64
000244de: R22 := mem[#1026 + 8, el]:u64
000244e4: #1027 := R31 + 0x110
000244e9: R23 := mem[#1027, el]:u64
000244ee: R24 := mem[#1027 + 8, el]:u64
000244f4: #1028 := R31 + 0x120
000244f9: R25 := mem[#1028, el]:u64
000244fe: R26 := mem[#1028 + 8, el]:u64
00024504: #1029 := R31 + 0x130
00024509: R27 := mem[#1029, el]:u64
0002450e: R28 := mem[#1029 + 8, el]:u64
00024514: R31 := R31 + 0x140
00024519: R0 := 0
0002451e: R1 := 0
00024523: R2 := 0
00024528: R3 := 0
0002452d: R4 := 0
00024532: R16 := 0
00024537: R17 := 0
0002453c: call R30 with noreturn

00024876:
0002487a: R23 := pad:64[31:0[R21]]
0002487e: goto %000242c4

00035a19: sub main(main_argc, main_argv, main_result)
00035eb4: main_argc :: in u32 = low:32[R0]
00035eb5: main_argv :: in out u64 = R1
00035eb6: main_result :: out u32 = low:32[R0]

00010ca9:
00010cad: #1 := R31 - 0x60
00010cb3: mem := mem with [#1, el]:u64 <- R29
00010cb9: mem := mem with [#1 + 8, el]:u64 <- R30
00010cbd: R31 := #1
00010cc2: R2 := 0x42F000
00010cc9: R2 := mem[R2 + 0xFB8, el]:u64
00010ccf: R29 := R31
00010cd5: #2 := R31 + 0x10
00010cdb: mem := mem with [#2, el]:u64 <- R19
00010ce1: mem := mem with [#2 + 8, el]:u64 <- R20
00010ce7: R20 := pad:64[31:0[R0]]
00010cec: R19 := 0x414000
00010cf2: #3 := R31 + 0x20
00010cf8: mem := mem with [#3, el]:u64 <- R21
00010cfe: mem := mem with [#3 + 8, el]:u64 <- R22
00010d04: R21 := R1
00010d0a: R19 := R19 + 0xC88
00010d10: #4 := R31 + 0x30
00010d16: mem := mem with [#4, el]:u64 <- R23
00010d1c: mem := mem with [#4 + 8, el]:u64 <- R24
00010d21: R24 := 0x417000
00010d27: R24 := R24 + 0x330
00010d2d: #5 := R31 + 0x40
00010d33: mem := mem with [#5, el]:u64 <- R25
00010d39: mem := mem with [#5 + 8, el]:u64 <- R26
00010d3e: R23 := 0
00010d43: R25 := 0
00010d49: #6 := R31 + 0x50
00010d4f: mem := mem with [#6, el]:u64 <- R27
00010d55: mem := mem with [#6 + 8, el]:u64 <- R28
00010d5b: R31 := R31 - 0x280
00010d60: R27 := 0
00010d67: R0 := mem[R2, el]:u64
00010d6f: mem := mem with [R31 + 0x278, el]:u64 <- R0
00010d74: R0 := 0
00010d79: R22 := 0x42F000
00010d80: R22 := mem[R22 + 0xF38, el]:u64
00010d85: R0 := 0x1000
00010d8b: #7 := R31 + 0xB0
00010d90: mem := mem with [#7, el]:u64 <- 0
00010d95: mem := mem with [#7 + 8, el]:u64 <- 0
00010d9b: #8 := R31 + 0xC0
00010da0: mem := mem with [#8, el]:u64 <- 0
00010da5: mem := mem with [#8 + 8, el]:u64 <- 0
00010daa: R30 := 0x4029B0
00010dad: call @zmalloc with return %00018e7e

00018e7e:
00018e84: mem := mem with [R31 + 0x88, el]:u64 <- R0
00018e89: R30 := 0x4029B8
00018e8c: call @new_auth with return %0002bc1c

0002bc1c:
0002bc20: R1 := R0
0002bc25: R0 := 0x32
0002bc2d: mem := mem with [R22, el]:u64 <- R1
0002bc32: R30 := 0x4029C8
0002bc34: call @zmalloc with return %0002bc36

0002bc36:
0002bc3a: R1 := R0
0002bc3f: R0 := 0x32
0002bc47: mem := mem with [R31 + 0x48, el]:u64 <- R1
0002bc4c: R30 := 0x4029D8
0002bc4e: call @zmalloc with return %0002bc50

0002bc50:
0002bc54: R1 := R0
0002bc59: R0 := 0x32
0002bc61: mem := mem with [R31 + 0x10, el]:u64 <- R1
0002bc66: R30 := 0x4029E8
0002bc68: call @zmalloc with return %0002bc6a

0002bc6a:
0002bc6e: R1 := R0
0002bc73: R0 := 0x32
0002bc7b: mem := mem with [R31 + 8, el]:u64 <- R1
0002bc80: R30 := 0x4029F8
0002bc82: call @zmalloc with return %0002bc84

0002bc84:
0002bc88: R1 := R0
0002bc8d: R0 := 0x32
0002bc95: mem := mem with [R31 + 0x68, el]:u64 <- R1
0002bc9a: R30 := 0x402A08
0002bc9c: call @zmalloc with return %0002bc9e

0002bc9e:
0002bca2: R1 := R0
0002bca7: R0 := 0x32
0002bcaf: mem := mem with [R31 + 0x70, el]:u64 <- R1
0002bcb4: R30 := 0x402A18
0002bcb6: call @zmalloc with return %0002bcb8

0002bcb8:
0002bcbc: R1 := R0
0002bcc1: R0 := 0x32
0002bcc9: mem := mem with [R31 + 0x78, el]:u64 <- R1
0002bcce: R30 := 0x402A28
0002bcd0: call @zmalloc with return %0002bcd2

0002bcd2:
0002bcd6: R1 := R0
0002bcdb: R0 := 0x32
0002bce3: mem := mem with [R31 + 0x28, el]:u64 <- R1
0002bce8: R30 := 0x402A38
0002bcea: call @zmalloc with return %0002bcec

0002bcec:
0002bcf0: R1 := R0
0002bcf5: R0 := 0x32
0002bcfd: mem := mem with [R31 + 0x50, el]:u64 <- R1
0002bd02: R30 := 0x402A48
0002bd04: call @zmalloc with return %0002bd06

0002bd06:
0002bd0a: R1 := R0
0002bd0f: R0 := 0x32
0002bd17: mem := mem with [R31 + 0x58, el]:u64 <- R1
0002bd1c: R30 := 0x402A58
0002bd1e: call @zmalloc with return %0002bd20

0002bd20:
0002bd26: mem := mem with [R31 + 0x30, el]:u64 <- R0
0002bd2b: R2 := 0x18
0002bd30: R1 := 0x22
0002bd35: R0 := 0x414000
0002bd3b: R0 := R0 + 0xB80
0002bd40: R30 := 0x402A70
0002bd43: call @openlog with return %0002bd45

0002bd45:
0002bd48: R0 := 6
0002bd4d: R2 := 0x414000
0002bd52: R1 := 2
0002bd58: R2 := R2 + 0xB88
0002bd5d: R30 := 0x402A84
0002bd5f: call @__syslog_chk with return %0002bd61

0002bd61:
0002bd66: mem := mem with [R31, el]:u32 <- 0
0002bd6b: R0 := 1
0002bd73: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
0002bd7a: mem := mem with [R31 + 0x20, el]:u64 <- 0
0002bd81: mem := mem with [R31 + 0x38, el]:u32 <- 0
0002bd88: mem := mem with [R31 + 0x40, el]:u32 <- 0
0002bd8f: mem := mem with [R31 + 0x64, el]:u32 <- 0
00035a1a: goto %0002bd91

0002bd91:
0002bd95: R2 := R19
0002bd9b: R1 := R21
0002bda1: R0 := pad:64[31:0[R20]]
0002bda6: R30 := 0x402AB0
0002bda9: call @__posix_getopt with return %0002bdab

0002bdab:
0002bdaf: #1328 := 31:0[R0] + 1
0002bdb4: VF := extend:64[#1328] <> extend:64[31:0[R0]] + 1
0002bdb9: CF := pad:64[#1328] <> pad:64[31:0[R0]] + 1
0002bdbd: ZF := #1328 = 0
0002bdc1: NF := 31:31[#1328]
0002bdc7: when ZF goto %0002bdc5
00035a1b: goto %000301d7

000301d7:
000301db: R1 := pad:64[31:0[R0] - 0x41]
000301e1: #1405 := 31:0[R1] - 0x36
000301e6: VF := extend:64[#1405] <> extend:64[31:0[R1]] - 0x36
000301eb: CF := pad:64[#1405] <> pad:64[31:0[R1]] + 0xFFFFFFCA
000301ef: ZF := #1405 = 0
000301f3: NF := 31:31[#1405]
000301f9: when ~(CF & ~ZF) goto %0002edd9
00035a1c: goto %000301fd

0002edd9:
0002eddf: R1 := pad:64[mem[R24 + pad:64[31:0[R1].0], el]:u16]
0002ede4: R2 := 0x402B3C
0002edeb: R1 := R2 + extend:64[15:0[R1].0]
0002edf0: call R1 with noreturn

000301fd:
00030201: R2 := R19
00030207: R1 := R21
0003020d: R0 := pad:64[31:0[R20]]
00030212: R27 := 2
00030217: R30 := 0x402AD8
00030219: call @__posix_getopt with return %0003021b

0003021b:
0003021f: #1406 := 31:0[R0] + 1
00030224: VF := extend:64[#1406] <> extend:64[31:0[R0]] + 1
00030229: CF := pad:64[#1406] <> pad:64[31:0[R0]] + 1
0003022d: ZF := #1406 = 0
00030231: NF := 31:31[#1406]
00030236: when ZF <> 1 goto %000301d7
00035a1d: goto %0002bdc5

0002bdc5:
0002bdce: when 31:0[R27] <> 0 goto %0002bdcc
00035a1e: goto %000301b6

0002bdcc:
0002bdd4: R1 := 0x414000
0002bdd9: R0 := 2
0002bddf: R1 := R1 + 0xCC8
0002bde4: R30 := 0x403654
0002bde6: call @__printf_chk with return %0002bde8

0002bde8:
0002bdeb: R1 := 0x414000
0002bdf0: R0 := 2
0002bdf6: R1 := R1 + 0xD10
0002bdfb: R30 := 0x403664
0002bdfd: call @__printf_chk with return %0002bdff

0002bdff:
0002be02: R0 := 0x42F000
0002be09: R0 := mem[R0 + 0xF70, el]:u64
0002be10: R19 := mem[R0, el]:u64
0002be16: #1329 := 31:0[R27] - 1
0002be1b: VF := extend:64[#1329] <> extend:64[31:0[R27]] - 1
0002be20: CF := pad:64[#1329] <> pad:64[31:0[R27]] + 0xFFFFFFFF
0002be24: ZF := #1329 = 0
0002be28: NF := 31:31[#1329]
0002be2e: when ZF goto %0002be2c
00035a1f: goto %0003019e

0002be2c:
0002be34: R20 := 0
0002be39: goto %0002be37

0003019e:
000301a1: R0 := 0x42F000
000301a8: R0 := mem[R0 + 0xF18, el]:u64
000301ad: R20 := 1
000301b4: R19 := mem[R0, el]:u64
00035a20: goto %0002be37

0002be37:
0002be3d: R1 := 2
0002be44: R3 := mem[R21, el]:u64
0002be4a: R0 := R19
0002be4f: R2 := 0x414000
0002be55: R2 := R2 + 0xE58
0002be5a: R30 := 0x4036A0
0002be5c: call @__fprintf_chk with return %0002be5e

0002be5e:
0002be61: R1 := 2
0002be67: R0 := R19
0002be6c: R2 := 0x414000
0002be72: R2 := R2 + 0xEA8
0002be77: R30 := 0x4036B4
0002be79: call @__fprintf_chk with return %0002be7b

0002be7b:
0002be7e: R1 := 2
0002be84: R0 := R19
0002be89: R2 := 0x414000
0002be8f: R2 := R2 + 0xF10
0002be94: R30 := 0x4036C8
0002be96: call @__fprintf_chk with return %0002be98

0002be98:
0002be9b: R1 := 2
0002bea1: R0 := R19
0002bea6: R2 := 0x414000
0002beac: R2 := R2 + 0xFB8
0002beb1: R30 := 0x4036DC
0002beb3: call @__fprintf_chk with return %0002beb5

0002beb5:
0002beb8: R1 := 2
0002bebe: R0 := R19
0002bec3: R2 := 0x414000
0002bec9: R2 := R2 + 0xFE8
0002bece: R30 := 0x4036F0
0002bed0: call @__fprintf_chk with return %0002bed2

0002bed2:
0002bed5: R1 := 2
0002bedb: R0 := R19
0002bee0: R2 := 0x415000
0002bee6: R2 := R2 + 0x60
0002beeb: R30 := 0x403704
0002beed: call @__fprintf_chk with return %0002beef

0002beef:
0002bef2: R1 := 2
0002bef8: R0 := R19
0002befd: R2 := 0x415000
0002bf03: R2 := R2 + 0xA0
0002bf08: R30 := 0x403718
0002bf0a: call @__fprintf_chk with return %0002bf0c

0002bf0c:
0002bf0f: R1 := 2
0002bf15: R0 := R19
0002bf1a: R2 := 0x415000
0002bf20: R2 := R2 + 0xE0
0002bf25: R30 := 0x40372C
0002bf27: call @__fprintf_chk with return %0002bf29

0002bf29:
0002bf2c: R1 := 2
0002bf32: R0 := R19
0002bf37: R2 := 0x415000
0002bf3d: R2 := R2 + 0x110
0002bf42: R30 := 0x403740
0002bf44: call @__fprintf_chk with return %0002bf46

0002bf46:
0002bf49: R1 := 2
0002bf4f: R0 := R19
0002bf54: R2 := 0x415000
0002bf5a: R2 := R2 + 0x148
0002bf5f: R30 := 0x403754
0002bf61: call @__fprintf_chk with return %0002bf63

0002bf63:
0002bf66: R1 := 2
0002bf6c: R0 := R19
0002bf71: R2 := 0x415000
0002bf77: R2 := R2 + 0x190
0002bf7c: R30 := 0x403768
0002bf7e: call @__fprintf_chk with return %0002bf80

0002bf80:
0002bf83: R1 := 2
0002bf89: R0 := R19
0002bf8e: R2 := 0x415000
0002bf94: R2 := R2 + 0x1D8
0002bf99: R30 := 0x40377C
0002bf9b: call @__fprintf_chk with return %0002bf9d

0002bf9d:
0002bfa0: R1 := 2
0002bfa6: R0 := R19
0002bfab: R2 := 0x415000
0002bfb1: R2 := R2 + 0x228
0002bfb6: R30 := 0x403790
0002bfb8: call @__fprintf_chk with return %0002bfba

0002bfba:
0002bfbd: R1 := 2
0002bfc3: R0 := R19
0002bfc8: R2 := 0x415000
0002bfce: R2 := R2 + 0x260
0002bfd3: R30 := 0x4037A4
0002bfd5: call @__fprintf_chk with return %0002bfd7

0002bfd7:
0002bfda: R1 := 2
0002bfe0: R0 := R19
0002bfe5: R2 := 0x415000
0002bfeb: R2 := R2 + 0x290
0002bff0: R30 := 0x4037B8
0002bff2: call @__fprintf_chk with return %0002bff4

0002bff4:
0002bff7: R1 := 2
0002bffd: R0 := R19
0002c002: R2 := 0x415000
0002c008: R2 := R2 + 0x380
0002c00d: R30 := 0x4037CC
0002c00f: call @__fprintf_chk with return %0002c011

0002c011:
0002c014: R1 := 2
0002c01a: R0 := R19
0002c01f: R2 := 0x415000
0002c025: R2 := R2 + 0x3C8
0002c02a: R30 := 0x4037E0
0002c02c: call @__fprintf_chk with return %0002c02e

0002c02e:
0002c031: R1 := 2
0002c037: R0 := R19
0002c03c: R2 := 0x415000
0002c042: R2 := R2 + 0x410
0002c047: R30 := 0x4037F4
0002c049: call @__fprintf_chk with return %0002c04b

0002c04b:
0002c04e: R1 := 2
0002c054: R0 := R19
0002c059: R2 := 0x415000
0002c05f: R2 := R2 + 0x490
0002c064: R30 := 0x403808
0002c066: call @__fprintf_chk with return %0002c068

0002c068:
0002c06b: R1 := 2
0002c071: R0 := R19
0002c076: R2 := 0x415000
0002c07c: R2 := R2 + 0x4F0
0002c081: R30 := 0x40381C
0002c083: call @__fprintf_chk with return %0002c085

0002c085:
0002c088: R1 := 2
0002c08e: R0 := R19
0002c093: R2 := 0x415000
0002c099: R2 := R2 + 0x530
0002c09e: R30 := 0x403830
0002c0a0: call @__fprintf_chk with return %0002c0a2

0002c0a2:
0002c0a5: R1 := 2
0002c0ab: R0 := R19
0002c0b0: R2 := 0x415000
0002c0b6: R2 := R2 + 0x588
0002c0bb: R30 := 0x403844
0002c0bd: call @__fprintf_chk with return %0002c0bf

0002c0bf:
0002c0c2: R1 := 2
0002c0c8: R0 := R19
0002c0cd: R2 := 0x415000
0002c0d3: R2 := R2 + 0x5D0
0002c0d8: R30 := 0x403858
0002c0da: call @__fprintf_chk with return %0002c0dc

0002c0dc:
0002c0df: R1 := 2
0002c0e5: R0 := R19
0002c0ea: R2 := 0x415000
0002c0f0: R2 := R2 + 0x670
0002c0f5: R30 := 0x40386C
0002c0f7: call @__fprintf_chk with return %0002c0f9

0002c0f9:
0002c0fc: R1 := 2
0002c102: R0 := R19
0002c107: R2 := 0x415000
0002c10d: R2 := R2 + 0x6F8
0002c112: R30 := 0x403880
0002c114: call @__fprintf_chk with return %0002c116

0002c116:
0002c119: R1 := 2
0002c11f: R0 := R19
0002c124: R2 := 0x415000
0002c12a: R2 := R2 + 0x758
0002c12f: R30 := 0x403894
0002c131: call @__fprintf_chk with return %0002c133

0002c133:
0002c136: R1 := 2
0002c13c: R0 := R19
0002c141: R2 := 0x415000
0002c147: R2 := R2 + 0x7A0
0002c14c: R30 := 0x4038A8
0002c14e: call @__fprintf_chk with return %0002c150

0002c150:
0002c153: R1 := 2
0002c159: R0 := R19
0002c15e: R2 := 0x415000
0002c164: R2 := R2 + 0x840
0002c169: R30 := 0x4038BC
0002c16b: call @__fprintf_chk with return %0002c16d

0002c16d:
0002c170: R1 := 2
0002c176: R0 := R19
0002c17b: R2 := 0x415000
0002c181: R2 := R2 + 0x898
0002c186: R30 := 0x4038D0
0002c188: call @__fprintf_chk with return %0002c18a

0002c18a:
0002c18d: R1 := 2
0002c193: R0 := R19
0002c198: R2 := 0x415000
0002c19e: R2 := R2 + 0x8E0
0002c1a3: R30 := 0x4038E4
0002c1a5: call @__fprintf_chk with return %0002c1a7

0002c1a7:
0002c1aa: R1 := 2
0002c1b0: R0 := R19
0002c1b5: R2 := 0x415000
0002c1bb: R2 := R2 + 0x908
0002c1c0: R30 := 0x4038F8
0002c1c2: call @__fprintf_chk with return %0002c1c4

0002c1c4:
0002c1c7: R1 := 2
0002c1cd: R0 := R19
0002c1d2: R2 := 0x415000
0002c1d8: R2 := R2 + 0x950
0002c1dd: R30 := 0x40390C
0002c1df: call @__fprintf_chk with return %0002c1e1

0002c1e1:
0002c1e4: R2 := 0x416000
0002c1ea: R2 := R2 + 0xB18
0002c1ef: R1 := 2
0002c1f5: R0 := R19
0002c1fa: R30 := 0x403920
0002c1fc: call @__fprintf_chk with return %0002c1fe

0002c1fe:
0002c202: R0 := pad:64[31:0[R20]]
0002c207: R30 := 0x403928
0002c209: call @exit with return %0002c20b

000301b6:
000301b9: R28 := 0x42F000
000301c0: R28 := mem[R28 + 0xF30, el]:u64
000301c7: R0 := pad:64[mem[R28, el]:u32]
000301cc: when 31:0[R0] <> 0 goto %0002dd35
00035a21: goto %000301d0

0002dd35:
0002dd38: R1 := 0x415000
0002dd3d: R0 := 2
0002dd43: R1 := R1 + 0x9C8
0002dd48: R30 := 0x403E0C
0002dd4a: call @__printf_chk with return %0002dd4c

0002dd4c:
0002dd4f: R1 := 0x415000
0002dd54: R0 := 2
0002dd5a: R1 := R1 + 0x9F0
0002dd5f: R30 := 0x403E1C
0002dd61: call @__printf_chk with return %0002dd63

0002dd63:
0002dd66: VF := 0
0002dd69: CF := 1
0002dd6d: ZF := 31:0[R20] = 0
0002dd71: NF := 31:31[R20]
0002dd79: when ~(NF = VF & ~ZF) goto %0002dd77
00035a22: goto %0002ee44

0002ee44:
0002ee47: R19 := 0x415000
0002ee4d: R26 := R21
0002ee53: R19 := R19 + 0xA08
0002ee5a: R24 := R21 + extend:64[31:0[R20].0]
00035a23: goto %0002ee5e

0002ee5e:
0002ee63: R2 := mem[R26, el]:u64
0002ee67: R26 := R26 + 8
0002ee6d: R1 := R19
0002ee72: R0 := 2
0002ee77: R30 := 0x403E48
0002ee79: call @__printf_chk with return %0002ee7b

0002ee7b:
0002ee7f: #1387 := ~R24
0002ee84: #1388 := R26 + ~R24
0002ee8a: VF := extend:128[#1388 + 1] <> extend:128[R26] + extend:128[#1387]
          + 1
0002ee90: CF := pad:128[#1388 + 1] <> pad:128[R26] + pad:128[#1387] + 1
0002ee94: ZF := #1388 + 1 = 0
0002ee98: NF := 63:63[#1388 + 1]
0002ee9d: when ZF <> 1 goto %0002ee5e
00035a24: goto %0002dd77

0002dd77:
0002dd7f: R1 := 0x416000
0002dd84: R0 := 2
0002dd8a: R1 := R1 + 0xB18
0002dd8f: R30 := 0x403E60
0002dd91: call @__printf_chk with return %0002dd93

0002dd93:
0002dd97: when R23 <> 0 goto %0002dd95
00035a25: goto %0002ee40

0002ee40:
0002ee42: goto %0002ed2e

000301d0:
000301d3: when R23 = 0 goto %0002ed2e
00035a26: goto %0002dd95

0002ed2e:
0002ed31: R0 := 0x42F000
0002ed38: R0 := mem[R0 + 0xF50, el]:u64
0002ed3f: R19 := pad:64[mem[R0, el]:u32]
0002ed45: #1384 := ~31:0[R19]
0002ed4a: #1385 := 31:0[R20] + ~31:0[R19]
0002ed50: VF := extend:64[#1385 + 1] <> extend:64[31:0[R20]] +
          extend:64[#1384] + 1
0002ed56: CF := pad:64[#1385 + 1] <> pad:64[31:0[R20]] + pad:64[#1384] + 1
0002ed5a: ZF := #1385 + 1 = 0
0002ed5e: NF := 31:31[#1385 + 1]
0002ed65: when NF = VF & ~ZF goto %0002e8fe
00035a27: goto %0002c27f

0002dd95:
0002dd9e: R0 := R23
0002dda3: R30 := 0x402B00
0002dda5: call @config_open with return %0002dda7

0002dda7:
0002ddab: R19 := R0
0002ddb1: when R0 = 0 goto %0002ddaf
00035a28: goto %0002e8b6

0002e8b6:
0002e8ba: R0 := R23
0002e8bf: R30 := 0x402B10
0002e8c1: call @free with return %0002e8c3

0002e8c3:
0002e8c6: R0 := 0x42F000
0002e8cd: R0 := mem[R0 + 0xF50, el]:u64
0002e8d3: R23 := R19
0002e8da: R19 := pad:64[mem[R0, el]:u32]
0002e8e0: #1380 := ~31:0[R20]
0002e8e5: #1381 := 31:0[R19] + ~31:0[R20]
0002e8eb: VF := extend:64[#1381 + 1] <> extend:64[31:0[R19]] +
          extend:64[#1380] + 1
0002e8f1: CF := pad:64[#1381 + 1] <> pad:64[31:0[R19]] + pad:64[#1380] + 1
0002e8f5: ZF := #1381 + 1 = 0
0002e8f9: NF := 31:31[#1381 + 1]
0002e900: when NF <> VF goto %0002e8fe
00035a29: goto %0002e97f

0002e97f:
0002e982: goto %0002e980

0002e980:
0002e986: R0 := 0x32
0002e98b: R30 := 0x40311C
0002e98d: call @zmalloc with return %0002e98f

0002e98f:
0002e992: R1 := 0x415000
0002e998: R1 := R1 + 0xA40
0002e9a0: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002e9a6: R0 := R23
0002e9ab: R30 := 0x403130
0002e9ad: call @config_pop with return %0002e9af

0002e9af:
0002e9b3: R20 := R0
0002e9b9: when R0 = 0 goto %0002e9b7
00035a2a: goto %0002edc4

0002edc4:
0002edc9: R0 := mem[R31 + 0xA0, el]:u64
0002edd0: R1 := pad:64[mem[R0]]
0002edd5: when 31:0[R1] = 0 goto %0002eda1
00035a2b: goto %0002edb4

0002eda1:
0002eda5: R1 := R20
0002edaa: R2 := 0x32
0002edaf: R30 := 0x404040
0002edb1: call @strlcpy with return %0002edb3

0002edb3:
0002edb6: goto %0002edb4

0002edb4:
0002edbb: R0 := R20
0002edc0: R30 := 0x40314C
0002edc2: call @free with return %0002e9b7

0002e9b7:
0002e9c1: R21 := mem[R31 + 0xA0, el]:u64
0002e9c6: R20 := 0x415000
0002e9cc: R0 := R20 + 0xA48
0002e9d2: R1 := R21
0002e9d7: R30 := 0x403160
0002e9d9: call @strcasecmp with return %0002e9db

0002e9db:
0002e9df: R1 := pad:64[31:0[R0]]
0002e9e5: R0 := R21
0002e9ea: VF := 0
0002e9ed: CF := 1
0002e9f1: ZF := 31:0[R1] = 0
0002e9f5: NF := 31:31[R1]
0002ea02: when ZF <> 1 goto %0002e9fb
0002ea03: goto %0002e9fe

0002e9fe:
0002e9ff: R25 := 1
0002ea05: goto %0002ea01

0002e9fb:
0002e9fc: R25 := pad:64[31:0[R25]]
0002ea04: goto %0002ea01

0002ea01:
0002ea0a: R30 := 0x403174
0002ea0c: call @free with return %0002ea0e

0002ea0e:
0002ea11: R0 := 0x32
0002ea16: R30 := 0x40317C
0002ea18: call @zmalloc with return %0002ea1a

0002ea1a:
0002ea1e: R2 := R0
0002ea23: R1 := 0x415000
0002ea29: R0 := R23
0002ea2f: R1 := R1 + 0xA50
0002ea37: mem := mem with [R31 + 0xA0, el]:u64 <- R2
0002ea3c: R30 := 0x403194
0002ea3e: call @config_pop with return %0002ea40

0002ea40:
0002ea44: R21 := R0
0002ea4a: when R0 = 0 goto %0002ea48
00035a2c: goto %0002ed69

0002ed69:
0002ed6e: R0 := mem[R31 + 0xA0, el]:u64
0002ed75: R1 := pad:64[mem[R0]]
0002ed7b: when 31:0[R1] = 0 goto %0002ed79
00035a2d: goto %0002ed91

0002ed79:
0002ed82: R1 := R21
0002ed87: R2 := 0x32
0002ed8c: R30 := 0x404030
0002ed8e: call @strlcpy with return %0002ed90

0002ed90:
0002ed93: goto %0002ed91

0002ed91:
0002ed98: R0 := R21
0002ed9d: R30 := 0x4031B0
0002ed9f: call @free with return %0002ea48

0002ea48:
0002ea52: R21 := mem[R31 + 0xA0, el]:u64
0002ea58: R0 := R20 + 0xA48
0002ea5e: R1 := R21
0002ea63: R30 := 0x4031C0
0002ea65: call @strcasecmp with return %0002ea67

0002ea67:
0002ea6b: when 31:0[R0] = 0 goto %0002ea69
00035a2e: goto %0002ea88

0002ea69:
0002ea71: R0 := 0x42F000
0002ea78: R0 := mem[R0 + 0xF58, el]:u64
0002ea7d: R1 := 1
0002ea85: mem := mem with [R0, el]:u32 <- 31:0[R1]
0002ea8a: goto %0002ea88

0002ea88:
0002ea8f: R0 := R21
0002ea94: R20 := 0x415000
0002ea9a: R21 := R31 + 0xB0
0002eaa0: R20 := R20 + 0xA60
0002eaa5: R30 := 0x4031D8
0002eaa7: call @free with return %0002eaa9

0002eaa9:
0002eaac: goto %0002eaaa

0002eaaa:
0002eab1: R1 := R20
0002eab7: R0 := R23
0002eabc: R30 := 0x4031FC
0002eabe: call @config_pop with return %0002eac0

0002eac0:
0002eac6: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002eacc: R1 := R0
0002ead2: when R0 <> 0 goto %0002ead0
00035a2f: goto %0002eaf6

0002eaf6:
0002eaf9: R21 := 0x414000
0002eafe: R20 := 0x415000
0002eb04: R26 := R21 + 0xBC8
0002eb0a: R20 := R20 + 0xA68
0002eb10: R24 := R31 + 0xB8
0002eb15: goto %0002eb13

0002eb13:
0002eb1a: R1 := R20
0002eb20: R0 := R23
0002eb25: R30 := 0x403244
0002eb27: call @config_pop with return %0002eb29

0002eb29:
0002eb2f: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002eb35: R2 := R0
0002eb3b: when R0 <> 0 goto %0002eb39
00035a30: goto %0002eb65

0002eb65:
0002eb68: R20 := 0x415000
0002eb6d: R24 := 0x414000
0002eb73: R20 := R20 + 0xA70
0002eb79: R24 := R24 + 0xBD0
0002eb7f: R26 := R31 + 0xC0
0002eb84: goto %0002eb82

0002eb82:
0002eb89: R1 := R20
0002eb8f: R0 := R23
0002eb94: R30 := 0x40328C
0002eb96: call @config_pop with return %0002eb98

0002eb98:
0002eb9e: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002eba4: R2 := R0
0002ebaa: when R0 <> 0 goto %0002eba8
00035a31: goto %0002ebd4

0002ebd4:
0002ebd7: R24 := 0x415000
0002ebdc: R26 := 0x415000
0002ebe1: R25 := 0x42F000
0002ebe8: R25 := mem[R25 + 0xF00, el]:u64
0002ebee: R24 := R24 + 0xAA0
0002ebf4: R26 := R26 + 0xA80
0002ebf9: goto %0002ebf7

0002ebf7:
0002ebfe: R1 := R24
0002ec04: R0 := R23
0002ec09: R30 := 0x4032EC
0002ec0b: call @config_pop with return %0002ec0d

0002ec0d:
0002ec13: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002ec19: when R0 = 0 goto %0002ec17
00035a32: goto %0002ec70

0002ec17:
0002ec20: R21 := R21 + 0xBC8
0002ec25: goto %0002ec23

0002ec23:
0002ec2a: R1 := R21
0002ec30: R0 := R23
0002ec35: R30 := 0x403978
0002ec37: call @config_pop with return %0002ec39

0002ec39:
0002ec3f: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002ec45: when R0 <> 0 goto %0002ec43
00035a33: goto %0002ec62

0002ec62:
0002ec67: R0 := mem[R31 + 0xC8, el]:u64
0002ec6c: when R0 = 0 goto %0002d8b6
00035a34: goto %0002d935

0002d8b6:
0002d8bb: R25 := mem[R23, el]:u64
0002d8c0: R27 := 0x415000
0002d8c6: when R25 = 0 goto %0002d8c4
00035a35: goto %0002f2a5

0002f2a5:
0002f2a8: R21 := 0x415000
0002f2ae: R20 := R27 + 0xAA8
0002f2b4: R21 := R21 + 0xAB0
0002f2ba: R24 := R31 + 0xC8
00035a36: goto %0002f2be

0002f2be:
0002f2c3: R26 := mem[R25, el]:u64
0002f2c9: R0 := R20
0002f2cf: R1 := R26
0002f2d4: R30 := 0x403F70
0002f2d6: call @strcasecmp with return %0002f2d8

0002f2d8:
0002f2dc: R19 := pad:64[31:0[R0]]
0002f2e2: when 31:0[R0] = 0 goto %0002f2e0
00035a37: goto %0002f32d

0002f32d:
0002f331: R1 := R26
0002f337: R0 := R21
0002f33c: R30 := 0x403F84
0002f33e: call @strcasecmp with return %0002f340

0002f340:
0002f343: when 31:0[R0] <> 0 goto %0002f31f
00035a38: goto %0002f2e0

0002f2e0:
0002f2ea: R1 := mem[R25 + 8, el]:u64
0002f2ef: VF := 0
0002f2f2: CF := 1
0002f2f6: ZF := 31:0[R19] = 0
0002f2fa: NF := 31:31[R19]
0002f306: when ZF goto %0002f2ff
0002f307: goto %0002f302

0002f302:
0002f303: R2 := 1
0002f309: goto %0002f305

0002f2ff:
0002f300: R2 := 0
0002f308: goto %0002f305

0002f305:
0002f30f: R0 := R24
0002f314: R30 := 0x403F9C
0002f316: call @acl_add with return %0002f318

0002f318:
0002f31b: when 31:0[R0] = 0 goto %0002ddd7
00035a39: goto %0002f31f

0002f31f:
0002f324: R25 := mem[R25 + 0x18, el]:u64
0002f329: when R25 <> 0 goto %0002f2be
00035a3a: goto %0002d8c4

0002d8c4:
0002d8cd: R27 := R27 + 0xAA8
0002d8d2: goto %0002d8d0

0002d8d0:
0002d8d7: R1 := R27
0002d8dd: R0 := R23
0002d8e2: R30 := 0x403FC0
0002d8e4: call @config_pop with return %0002d8e6

0002d8e6:
0002d8ec: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002d8f2: when R0 <> 0 goto %0002d8f0
00035a3b: goto %0002d8fc

0002d8fc:
0002d8ff: R20 := 0x415000
0002d905: R20 := R20 + 0xAB0
0002d90a: goto %0002d908

0002d908:
0002d90f: R1 := R20
0002d915: R0 := R23
0002d91a: R30 := 0x403FE4
0002d91c: call @config_pop with return %0002d91e

0002d91e:
0002d924: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002d92a: when R0 <> 0 goto %0002d928
00035a3c: goto %0002d934

0002d934:
0002d937: goto %0002d935

0002d928:
0002d930: R30 := 0x403FD8
0002d932: call @free with return %0002d908

0002d8f0:
0002d8f8: R30 := 0x403FB4
0002d8fa: call @free with return %0002d8d0

0002d935:
0002d93c: R0 := R23
0002d941: R1 := 0x415000
0002d947: R1 := R1 + 0xAB8
0002d94c: R30 := 0x403998
0002d94e: call @config_pop with return %0002d950

0002d950:
0002d954: R20 := R0
0002d95a: when R0 = 0 goto %0002d958
00035a3d: goto %0002f26b

0002f26b:
0002f270: R3 := mem[R31 + 0x30, el]:u64
0002f277: R0 := pad:64[mem[R3]]
0002f27d: when 31:0[R0] <> 0 goto %0002f27b
00035a3e: goto %0002f28d

0002f28d:
0002f291: R1 := R20
0002f297: R0 := R3
0002f29c: R2 := 0x32
0002f2a1: R30 := 0x4039BC
0002f2a3: call @strlcpy with return %0002f27b

0002f27b:
0002f284: R0 := R20
0002f289: R30 := 0x4039C4
0002f28b: call @free with return %0002d958

0002d958:
0002d961: R0 := R23
0002d966: R1 := 0x415000
0002d96c: R1 := R1 + 0xAC0
0002d971: R30 := 0x4039D4
0002d973: call @config_pop with return %0002d975

0002d975:
0002d979: R20 := R0
0002d97f: when R0 = 0 goto %0002d97d
00035a3f: goto %0002f231

0002f231:
0002f236: R3 := mem[R31 + 0x10, el]:u64
0002f23d: R0 := pad:64[mem[R3]]
0002f243: when 31:0[R0] <> 0 goto %0002f241
00035a40: goto %0002f253

0002f253:
0002f257: R1 := R20
0002f25d: R0 := R3
0002f262: R2 := 0x32
0002f267: R30 := 0x4039F8
0002f269: call @strlcpy with return %0002f241

0002f241:
0002f24a: R0 := R20
0002f24f: R30 := 0x403A00
0002f251: call @free with return %0002d97d

0002d97d:
0002d986: R0 := R23
0002d98b: R1 := 0x415000
0002d991: R1 := R1 + 0xAC8
0002d996: R30 := 0x403A10
0002d998: call @config_pop with return %0002d99a

0002d99a:
0002d99e: R20 := R0
0002d9a4: when R0 = 0 goto %0002d9a2
00035a41: goto %0002f1f7

0002f1f7:
0002f1fc: R3 := mem[R31 + 8, el]:u64
0002f203: R0 := pad:64[mem[R3]]
0002f209: when 31:0[R0] <> 0 goto %0002f207
00035a42: goto %0002f219

0002f219:
0002f21d: R1 := R20
0002f223: R0 := R3
0002f228: R2 := 0x32
0002f22d: R30 := 0x403A34
0002f22f: call @strlcpy with return %0002f207

0002f207:
0002f210: R0 := R20
0002f215: R30 := 0x403A3C
0002f217: call @free with return %0002d9a2

0002d9a2:
0002d9ab: R0 := R23
0002d9b0: R1 := 0x415000
0002d9b6: R1 := R1 + 0xAD8
0002d9bb: R30 := 0x403A4C
0002d9bd: call @config_pop with return %0002d9bf

0002d9bf:
0002d9c3: R20 := R0
0002d9c9: when R0 = 0 goto %0002d9c7
00035a43: goto %0002f1bd

0002f1bd:
0002f1c2: R3 := mem[R31 + 0x68, el]:u64
0002f1c9: R0 := pad:64[mem[R3]]
0002f1cf: when 31:0[R0] <> 0 goto %0002f1cd
00035a44: goto %0002f1df

0002f1df:
0002f1e3: R1 := R20
0002f1e9: R0 := R3
0002f1ee: R2 := 0x32
0002f1f3: R30 := 0x403A70
0002f1f5: call @strlcpy with return %0002f1cd

0002f1cd:
0002f1d6: R0 := R20
0002f1db: R30 := 0x403A78
0002f1dd: call @free with return %0002d9c7

0002d9c7:
0002d9d0: R0 := R23
0002d9d5: R1 := 0x415000
0002d9db: R1 := R1 + 0xAE8
0002d9e0: R30 := 0x403A88
0002d9e2: call @config_pop with return %0002d9e4

0002d9e4:
0002d9e8: R20 := R0
0002d9ee: when R0 = 0 goto %0002d9ec
00035a45: goto %0002f183

0002f183:
0002f188: R3 := mem[R31 + 0x70, el]:u64
0002f18f: R0 := pad:64[mem[R3]]
0002f195: when 31:0[R0] <> 0 goto %0002f193
00035a46: goto %0002f1a5

0002f1a5:
0002f1a9: R1 := R20
0002f1af: R0 := R3
0002f1b4: R2 := 0x32
0002f1b9: R30 := 0x403AAC
0002f1bb: call @strlcpy with return %0002f193

0002f193:
0002f19c: R0 := R20
0002f1a1: R30 := 0x403AB4
0002f1a3: call @free with return %0002d9ec

0002d9ec:
0002d9f5: R0 := R23
0002d9fa: R1 := 0x415000
0002da00: R1 := R1 + 0xAF0
0002da05: R30 := 0x403AC4
0002da07: call @config_pop with return %0002da09

0002da09:
0002da0d: R20 := R0
0002da13: when R0 = 0 goto %0002da11
00035a47: goto %0002f149

0002f149:
0002f14e: R3 := mem[R31 + 0x78, el]:u64
0002f155: R0 := pad:64[mem[R3]]
0002f15b: when 31:0[R0] <> 0 goto %0002f159
00035a48: goto %0002f16b

0002f16b:
0002f16f: R1 := R20
0002f175: R0 := R3
0002f17a: R2 := 0x32
0002f17f: R30 := 0x403AE8
0002f181: call @strlcpy with return %0002f159

0002f159:
0002f162: R0 := R20
0002f167: R30 := 0x403AF0
0002f169: call @free with return %0002da11

0002da11:
0002da1a: R0 := R23
0002da1f: R1 := 0x415000
0002da25: R1 := R1 + 0xAF8
0002da2a: R30 := 0x403B00
0002da2c: call @config_pop with return %0002da2e

0002da2e:
0002da32: R20 := R0
0002da38: when R0 = 0 goto %0002da36
00035a49: goto %0002f10f

0002f10f:
0002f114: R3 := mem[R31 + 0x48, el]:u64
0002f11b: R0 := pad:64[mem[R3]]
0002f121: when 31:0[R0] <> 0 goto %0002f11f
00035a4a: goto %0002f131

0002f131:
0002f135: R1 := R20
0002f13b: R0 := R3
0002f140: R2 := 0x32
0002f145: R30 := 0x403B24
0002f147: call @strlcpy with return %0002f11f

0002f11f:
0002f128: R0 := R20
0002f12d: R30 := 0x403B2C
0002f12f: call @free with return %0002da36

0002da36:
0002da3f: R0 := R23
0002da44: R1 := 0x415000
0002da4a: R1 := R1 + 0xB08
0002da4f: R30 := 0x403B3C
0002da51: call @config_pop with return %0002da53

0002da53:
0002da57: R20 := R0
0002da5d: when R0 = 0 goto %0002da5b
00035a4b: goto %0002f0d5

0002f0d5:
0002f0da: R3 := mem[R31 + 0x28, el]:u64
0002f0e1: R0 := pad:64[mem[R3]]
0002f0e7: when 31:0[R0] <> 0 goto %0002f0e5
00035a4c: goto %0002f0f7

0002f0f7:
0002f0fb: R1 := R20
0002f101: R0 := R3
0002f106: R2 := 0x32
0002f10b: R30 := 0x403B60
0002f10d: call @strlcpy with return %0002f0e5

0002f0e5:
0002f0ee: R0 := R20
0002f0f3: R30 := 0x403B68
0002f0f5: call @free with return %0002da5b

0002da5b:
0002da63: R0 := 0x32
0002da68: R30 := 0x403B70
0002da6a: call @zmalloc with return %0002da6c

0002da6c:
0002da6f: R1 := 0x415000
0002da75: R1 := R1 + 0xB18
0002da7d: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002da83: R0 := R23
0002da88: R30 := 0x403B84
0002da8a: call @config_pop with return %0002da8c

0002da8c:
0002da90: R20 := R0
0002da96: when R0 = 0 goto %0002da94
00035a4d: goto %0002f0a1

0002f0a1:
0002f0a6: R0 := mem[R31 + 0xA0, el]:u64
0002f0ad: R1 := pad:64[mem[R0]]
0002f0b3: when 31:0[R1] <> 0 goto %0002f0b1
00035a4e: goto %0002f0c3

0002f0c3:
0002f0c7: R1 := R20
0002f0cc: R2 := 0x32
0002f0d1: R30 := 0x403BA4
0002f0d3: call @strlcpy with return %0002f0b1

0002f0b1:
0002f0ba: R0 := R20
0002f0bf: R30 := 0x403BAC
0002f0c1: call @free with return %0002da94

0002da94:
0002da9e: R0 := pad:64[mem[R31 + 0x40, el]:u32]
0002daa4: when 31:0[R0] = 0 goto %0002daa2
00035a4f: goto %0002db4a

0002daa2:
0002daac: R0 := mem[R31 + 0xA0, el]:u64
0002dab1: R2 := 0
0002dab6: R1 := 0
0002dabb: R30 := 0x404054
0002dabe: call @strtoul with return %0002dac0

0002dac0:
0002dac4: R21 := R0
0002dacb: R0 := mem[R31 + 0xA0, el]:u64
0002dad0: R2 := 0
0002dad5: R1 := 0
0002dada: R30 := 0x404068
0002dadc: call @strtoul with return %0002dade

0002dade:
0002dae2: R20 := R0
0002dae9: R0 := mem[R31 + 0xA0, el]:u64
0002daee: R2 := 0
0002daf3: R1 := 0
0002daf8: R30 := 0x40407C
0002dafa: call @strtoul with return %0002dafc

0002dafc:
0002db00: R3 := pad:64[23:0[R20].0]
0002db06: R20 := pad:64[23:16[R0].0]
0002db0d: R0 := mem[R31 + 0xA0, el]:u64
0002db13: R3 := pad:64[23:16[R3].0]
0002db1a: R20 := pad:64[31:0[R3] | pad:32[31:8[R20]]]
0002db1f: R2 := 0
0002db24: R1 := 0
0002db29: R30 := 0x40409C
0002db2b: call @strtoul with return %0002db2d

0002db2d:
0002db31: R0 := pad:64[31:24[R0]]
0002db38: R21 := pad:64[31:0[R0] | (7:0[R21].0)]
0002db3f: R0 := pad:64[31:0[R21] | 31:0[R20]]
0002db47: mem := mem with [R31 + 0x40, el]:u32 <- 31:0[R0]
0002db4c: goto %0002db4a

0002db4a:
0002db52: R0 := mem[R31 + 0xA0, el]:u64
0002db57: R30 := 0x403BBC
0002db59: call @free with return %0002db5b

0002db5b:
0002db5e: R0 := 0x32
0002db63: R30 := 0x403BC4
0002db65: call @zmalloc with return %0002db67

0002db67:
0002db6a: R1 := 0x415000
0002db70: R1 := R1 + 0xB20
0002db78: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002db7e: R0 := R23
0002db83: R30 := 0x403BD8
0002db85: call @config_pop with return %0002db87

0002db87:
0002db8b: R20 := R0
0002db91: when R0 = 0 goto %0002db8f
00035a50: goto %0002f06d

0002f06d:
0002f072: R0 := mem[R31 + 0xA0, el]:u64
0002f079: R1 := pad:64[mem[R0]]
0002f07f: when 31:0[R1] <> 0 goto %0002f07d
00035a51: goto %0002f08f

0002f08f:
0002f093: R1 := R20
0002f098: R2 := 0x32
0002f09d: R30 := 0x403BF8
0002f09f: call @strlcpy with return %0002f07d

0002f07d:
0002f086: R0 := R20
0002f08b: R30 := 0x403C00
0002f08d: call @free with return %0002db8f

0002db8f:
0002db97: R20 := 0x42F000
0002db9e: R20 := mem[R20 + 0xF80, el]:u64
0002dba5: R0 := mem[R20, el]:u64
0002dbab: when R0 = 0 goto %0002dba9
00035a52: goto %0002dbbe

0002dba9:
0002dbb3: R0 := mem[R31 + 0xA0, el]:u64
0002dbba: R1 := pad:64[mem[R0]]
0002dbc0: when 31:0[R1] = 0 goto %0002dbbe
00035a53: goto %0002f031

0002f031:
0002f034: R1 := 0x42F000
0002f03b: R1 := mem[R1 + 0xFF0, el]:u64
0002f040: R3 := 1
0002f045: R2 := 0xA
0002f04d: mem := mem with [R1, el]:u32 <- 31:0[R3]
0002f052: R1 := 0
0002f057: R30 := 0x404018
0002f059: call @strtol with return %0002f05b

0002f05b:
0002f05f: R0 := extend:64[31:0[R0]]
0002f067: mem := mem with [R20, el]:u64 <- R0
0002f06b: goto %0002dbbe

0002dbbe:
0002dbc8: R0 := mem[R31 + 0xA0, el]:u64
0002dbcd: R21 := 0x415000
0002dbd2: R24 := 0x42F000
0002dbd9: R24 := mem[R24 + 0xF78, el]:u64
0002dbdf: R21 := R21 + 0xB30
0002dbe4: R30 := 0x403C28
0002dbe6: call @free with return %0002dbe8

0002dbe8:
0002dbeb: goto %0002dbe9

0002dbe9:
0002dbf0: R1 := R21
0002dbf6: R0 := R23
0002dbfb: R30 := 0x403C40
0002dbfd: call @config_pop with return %0002dbff

0002dbff:
0002dc05: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002dc0b: R1 := R0
0002dc11: when R0 = 0 goto %0002dc0f
00035a54: goto %0002eff5

0002dc0f:
0002dc17: R21 := 0x42F000
0002dc1e: R21 := mem[R21 + 0xFC8, el]:u64
0002dc23: R24 := 0x415000
0002dc28: R25 := 0x415000
0002dc2e: R24 := R24 + 0xB70
0002dc34: R25 := R25 + 0xB38
00035a55: goto %0002dc36

0002dc36:
0002dc3a: R1 := R24
0002dc40: R0 := R23
0002dc45: R30 := 0x403C8C
0002dc47: call @config_pop with return %0002dc49

0002dc49:
0002dc4f: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002dc55: R26 := R0
0002dc5b: when R0 = 0 goto %0002dc59
00035a56: goto %0002ef81

0002ef81:
0002ef84: R1 := 0x3A
0002ef89: R30 := 0x403CA0
0002ef8b: call @strchr with return %0002ef8d

0002ef8d:
0002ef91: R2 := R0
0002ef96: when R0 = 0 goto %0002ef53
00035a57: goto %0002ef9a

0002ef53:
0002ef57: R3 := R26
0002ef5d: R2 := R25
0002ef62: R1 := 2
0002ef67: R0 := 3
0002ef6c: R30 := 0x403DA4
0002ef6e: call @__syslog_chk with return %0002ef70

0002ef70:
0002ef72: goto %0002dc36

0002ef9a:
0002ef9f: mem := mem with [R2] <- 0
0002efa3: R2 := R2 + 1
0002efa8: R4 := 1
0002efae: R3 := pad:64[31:0[R4]]
0002efb5: R0 := mem[R21, el]:u64
0002efbc: R1 := mem[R31 + 0xA0, el]:u64
0002efc1: R30 := 0x403CC0
0002efc3: call @hlist_add with return %0002efc5

0002efc5:
0002efcb: mem := mem with [R21, el]:u64 <- R0
0002efd1: R1 := R24
0002efd7: R0 := R23
0002efdc: R30 := 0x403CD0
0002efde: call @config_pop with return %0002efe0

0002efe0:
0002efe6: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002efec: R26 := R0
0002eff1: when R0 <> 0 goto %0002ef81
00035a58: goto %0002dc59

0002dc59:
0002dc61: R21 := 0x415000
0002dc66: R27 := 0x414000
0002dc6b: R25 := 0x42F000
0002dc72: R25 := mem[R25 + 0xFF0, el]:u64
0002dc78: R21 := R21 + 0xB80
0002dc7d: R26 := 0x42F000
0002dc84: R26 := mem[R26 + 0xFF8, el]:u64
0002dc8a: R27 := R27 + 0xBC0
0002dc8f: goto %0002dc8d

0002dc8d:
0002dc94: R1 := R21
0002dc9a: R0 := R23
0002dc9f: R30 := 0x403D14
0002dca1: call @config_pop with return %0002dca3

0002dca3:
0002dca9: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002dcaf: R24 := R0
0002dcb5: when R0 = 0 goto %0002dcb3
00035a59: goto %0002eea1

0002dcb3:
0002dcbd: R21 := mem[R23, el]:u64
0002dcc2: when R21 = 0 goto %0002c27f
00035a5a: goto %0002dcc6

0002dcc6:
0002dcc9: R20 := 0x415000
0002dccf: R20 := R20 + 0xB90
00035a5b: goto %0002dcd1

0002dcd1:
0002dcd6: R3 := mem[R21, el]:u64
0002dcdc: R2 := R20
0002dce1: R1 := 2
0002dce6: R0 := 6
0002dceb: R30 := 0x403DCC
0002dced: call @__syslog_chk with return %0002dcef

0002dcef:
0002dcf4: R21 := mem[R21 + 0x18, el]:u64
0002dcf9: when R21 <> 0 goto %0002dcd1
00035a5c: goto %0002dcfd

0002dcfd:
0002dcff: goto %0002c27f

0002c27f:
0002c288: R0 := R23
0002c28d: R30 := 0x403330
0002c28f: call @config_close with return %0002c291

0002c291:
0002c296: R0 := pad:64[mem[R31 + 0x38, el]:u32]
0002c29c: when 31:0[R0] = 0 goto %0002c29a
00035a5d: goto %0003016e

0002c29a:
0002c2a2: R30 := 0x4040C8
0002c2a4: call @parent_available with return %0002c2a6

0002c2a6:
0002c2aa: when 31:0[R0] = 0 goto %0002c2a8
00035a5e: goto %00030149

0002c2a8:
0002c2b2: R0 := mem[R31 + 0x20, el]:u64
0002c2b9: R2 := pad:64[mem[R31 + 0x64, el]:u32]
0002c2be: VF := 0
0002c2c1: CF := 1
0002c2c5: ZF := R0 = 0
0002c2c9: NF := 63:63[R0]
0002c2ce: R0 := 0x415000
0002c2da: when ZF goto %0002c2d3
0002c2db: goto %0002c2d6

0002c2d6:
0002c2d7: R1 := 1
0002c2dd: goto %0002c2d9

0002c2d3:
0002c2d4: R1 := 0
0002c2dc: goto %0002c2d9

0002c2d9:
0002c2e3: R0 := R0 + 0xBB8
0002c2ea: R1 := pad:64[31:0[R1] | 31:0[R2]]
0002c2ef: R30 := 0x404654
0002c2f1: call @croak with return %0002c2f3

00030149:
0003014e: R0 := mem[R31 + 0x20, el]:u64
00030153: when R0 <> 0 goto %0002c45a
00035a5f: goto %00030157

00030157:
0003015c: R0 := mem[R31 + 0xB8, el]:u64
00030161: when R0 = 0 goto %0002c2f3
00035a60: goto %00030165

0002c2f3:
0002c2f8: R1 := pad:64[mem[R31 + 0x64, el]:u32]
0002c2fd: R0 := 0x415000
0002c303: R0 := R0 + 0xBD8
0002c308: R30 := 0x404664
0002c30a: call @croak with return %0002c30c

00030165:
00030168: R20 := 1
0003016c: goto %0002c460

0003016e:
00030173: R0 := mem[R31 + 0x20, el]:u64
00030178: VF := 0
0003017b: CF := 1
0003017f: ZF := R0 = 0
00030183: NF := 63:63[R0]
0003018f: when ZF <> 1 goto %00030188
00030190: goto %0003018b

0003018b:
0003018c: R20 := 1
00030192: goto %0003018e

00030188:
00030189: R20 := 0
00030191: goto %0003018e

0003018e:
00035a61: goto %0002c460

0002c460:
0002c468: R21 := mem[R31 + 0x28, el]:u64
0002c46f: R0 := pad:64[mem[R21]]
0002c475: when 31:0[R0] <> 0 goto %0002c473
00035a62: goto %0002f5c0

0002f5c0:
0002f5c4: R0 := R21
0002f5c9: R1 := 0x32
0002f5ce: R30 := 0x40335C
0002f5d1: call @gethostname with return %0002f5d3

0002f5d3:
0002f5d8: R0 := pad:64[mem[R21]]
0002f5de: when 31:0[R0] <> 0 goto %0002f5dc
00035a63: goto %0002f604

0002f604:
0002f607: R0 := 0x414000
0002f60c: R2 := 0x32
0002f612: R1 := R0 + 0xB80
0002f618: R0 := R21
0002f61d: R30 := 0x403378
0002f61f: call @strlcpy with return %0002f5dc

0002f5dc:
0002f5e6: R3 := mem[R31 + 0x28, el]:u64
0002f5eb: R2 := 0x415000
0002f5f0: R1 := 2
0002f5f6: R2 := R2 + 0xC10
0002f5fb: R0 := 6
0002f600: R30 := 0x403390
0002f602: call @__syslog_chk with return %0002c473

0002c473:
0002c47d: R1 := mem[R31 + 0x30, el]:u64
0002c484: R0 := pad:64[mem[R1]]
0002c48a: when 31:0[R0] = 0 goto %0002c488
00035a64: goto %0002f579

0002f579:
0002f57c: R0 := 0x415000
0002f582: R0 := R0 + 0xC30
0002f587: R30 := 0x4033A8
0002f589: call @strcasecmp with return %0002f58b

0002f58b:
0002f58e: when 31:0[R0] <> 0 goto %0002e71c
00035a65: goto %0002f592

0002e71c:
0002e721: R1 := mem[R31 + 0x30, el]:u64
0002e726: R0 := 0x416000
0002e72c: R0 := R0 + 0x918
0002e731: R30 := 0x40435C
0002e733: call @strcasecmp with return %0002e735

0002e735:
0002e739: when 31:0[R0] = 0 goto %0002e737
00035a66: goto %0002e825

0002e737:
0002e741: R0 := mem[R22, el]:u64
0002e746: R1 := 0x417000
0002e74d: V0 := pad:128[mem[R1 + 0x250, el]:u64]
0002e753: R1 := R0 + 0x200
0002e75a: mem := mem with [R0 + 0x134, el]:u32 <- 0
0002e762: mem := mem with [R1 - 0xD4, el]:u64 <- 63:0[V0]
0002e766: goto %0002c488

0002e825:
0002e82a: R1 := mem[R31 + 0x30, el]:u64
0002e82f: R0 := 0x415000
0002e835: R0 := R0 + 0xC38
0002e83a: R30 := 0x404370
0002e83c: call @strcasecmp with return %0002e83e

0002e83e:
0002e842: when 31:0[R0] <> 0 goto %0002e840
00035a67: goto %0002e891

0002e891:
0002e896: R0 := mem[R22, el]:u64
0002e89b: R2 := 1
0002e8a1: R1 := R0 + 0x200
0002e8a9: mem := mem with [R0 + 0x134, el]:u32 <- 31:0[R2]
0002e8b0: mem := mem with [R1 - 0xD4, el]:u64 <- 0
0002e8b4: goto %0002c488

0002f592:
0002f597: R0 := mem[R22, el]:u64
0002f59c: R1 := 0x417000
0002f5a1: R2 := 1
0002f5a8: V0 := pad:128[mem[R1 + 0x250, el]:u64]
0002f5ae: R1 := R0 + 0x200
0002f5b6: mem := mem with [R0 + 0x134, el]:u32 <- 31:0[R2]
0002f5be: mem := mem with [R1 - 0xD4, el]:u64 <- 63:0[V0]
00035a68: goto %0002c488

0002c488:
0002c492: R0 := mem[R31 + 0xC0, el]:u64
0002c498: when R0 = 0 goto %0002c496
00035a69: goto %0002f55f

0002f55f:
0002f562: R0 := 0x42F000
0002f569: R0 := mem[R0 + 0xFC8, el]:u64
0002f570: R0 := mem[R0, el]:u64
0002f575: when R0 = 0 goto %0002e805
00035a6a: goto %0002c496

0002e805:
0002e808: R2 := 0x415000
0002e80d: R1 := 2
0002e813: R2 := R2 + 0xC70
0002e818: R0 := 4
0002e81d: R30 := 0x404530
0002e81f: call @__syslog_chk with return %0002e821

0002e821:
0002e823: goto %0002c496

0002c496:
0002c49f: when 31:0[R20] <> 0 goto %0002c49d
00035a6b: goto %0002c4db

0002c49d:
0002c4a7: R5 := mem[R22, el]:u64
0002c4ac: R2 := 0x415000
0002c4b1: R1 := 2
0002c4b7: R2 := R2 + 0xCA8
0002c4bc: R0 := 6
0002c4c3: R3 := pad:64[mem[R5 + 0x12C, el]:u32]
0002c4ca: R4 := pad:64[mem[R5 + 0x130, el]:u32]
0002c4d1: R5 := pad:64[mem[R5 + 0x134, el]:u32]
0002c4d6: R30 := 0x404440
0002c4d8: call @__syslog_chk with return %0002c4da

0002c4da:
0002c4dd: goto %0002c4db

0002c4db:
0002c4e3: R0 := pad:64[mem[R31 + 0x40, el]:u32]
0002c4e9: when 31:0[R0] <> 0 goto %0002c4e7
00035a6c: goto %0002c527

0002c527:
0002c52f: R0 := mem[R31 + 0x20, el]:u64
0002c536: R1 := pad:64[mem[R31 + 0x38, el]:u32]
0002c53b: VF := 0
0002c53e: CF := 1
0002c542: ZF := R0 = 0
0002c546: NF := 63:63[R0]
0002c552: when ZF goto %0002c54b
0002c553: goto %0002c54e

0002c54e:
0002c54f: R0 := 1
0002c555: goto %0002c551

0002c54b:
0002c54c: R0 := 0
0002c554: goto %0002c551

0002c551:
0002c55c: R20 := pad:64[31:0[R0] | 31:0[R1]]
0002c562: when 31:0[R20] <> 0 goto %0002c560
00035a6d: goto %0002f537

0002f537:
0002f53c: R0 := pad:64[mem[R31 + 0x64, el]:u32]
0002f541: when 31:0[R0] = 0 goto %0002c6ea
00035a6e: goto %0002f545

0002f545:
0002f548: R0 := 0x42F000
0002f54f: R0 := mem[R0 + 0xF58, el]:u64
0002f556: R0 := pad:64[mem[R0, el]:u32]
0002f55b: when 31:0[R0] <> 0 goto %0002c6ea
00035a6f: goto %0002c560

0002c560:
0002c569: R19 := R31 + 0x108
0002c56e: R1 := 0x415000
0002c573: R0 := 2
0002c579: R1 := R1 + 0xD00
0002c57e: R30 := 0x403430
0002c580: call @__printf_chk with return %0002c582

0002c582:
0002c586: R1 := R19
0002c58b: R0 := 0
0002c590: R30 := 0x40343C
0002c593: call @tcgetattr with return %0002c595

0002c595:
0002c59a: V2 := mem[R19, el]:u128
0002c59f: V3 := mem[R19 + 0x10, el]:u128
0002c5a5: R2 := R31 + 0x148
0002c5ac: V1 := mem[R19 + 0x20, el]:u128
0002c5b1: R1 := 0xFFFFFFF6
0002c5b8: V0 := mem[R19 + 0x2C, el]:u128
0002c5c0: mem := mem with [R2, el]:u128 <- V2
0002c5c6: mem := mem with [R2 + 0x10, el]:u128 <- V3
0002c5cd: R0 := pad:64[mem[R31 + 0x154, el]:u32]
0002c5d5: mem := mem with [R2 + 0x20, el]:u128 <- V1
0002c5dc: R0 := pad:64[31:0[R0] & 31:0[R1]]
0002c5e1: R1 := 1
0002c5e9: mem := mem with [R2 + 0x2C, el]:u128 <- V0
0002c5f1: mem := mem with [R31 + 0x154, el]:u32 <- 31:0[R0]
0002c5f6: R0 := 0
0002c5fb: R30 := 0x403474
0002c5fe: call @tcsetattr with return %0002c600

0002c600:
0002c603: R2 := 0x42F000
0002c60a: R2 := mem[R2 + 0xFA8, el]:u64
0002c60f: R1 := 0x32
0002c616: R21 := mem[R31 + 8, el]:u64
0002c61d: R2 := mem[R2, el]:u64
0002c623: R0 := R21
0002c628: R30 := 0x403490
0002c62a: call @fgets with return %0002c62c

0002c62c:
0002c630: R3 := R0
0002c636: R2 := R19
0002c63b: R1 := 1
0002c640: R0 := 0
0002c648: mem := mem with [R31 + 0xA0, el]:u64 <- R3
0002c64d: R30 := 0x4034A8
0002c64f: call @tcsetattr with return %0002c651

0002c651:
0002c655: R0 := R21
0002c65a: R30 := 0x4034B0
0002c65c: call @strlen with return %0002c65e

0002c65e:
0002c662: R19 := pad:64[31:0[R0] - 1]
0002c668: R2 := extend:64[31:0[R19]]
0002c670: R1 := pad:64[mem[R21 + extend:64[31:0[R19]]]]
0002c676: #1332 := 31:0[R1] - 0xA
0002c67b: VF := extend:64[#1332] <> extend:64[31:0[R1]] - 0xA
0002c680: CF := pad:64[#1332] <> pad:64[31:0[R1]] + 0xFFFFFFF6
0002c684: ZF := #1332 = 0
0002c688: NF := 31:31[#1332]
0002c68e: when ZF goto %0002c68c
00035a70: goto %0002c6ce

0002c68c:
0002c696: R3 := mem[R31 + 8, el]:u64
0002c69c: R0 := pad:64[31:0[R0] - 2]
0002c6a2: R1 := extend:64[31:0[R0]]
0002c6aa: mem := mem with [R3 + R2] <- 0
0002c6b2: R0 := pad:64[mem[R3 + extend:64[31:0[R0]]]]
0002c6b8: #1333 := 31:0[R0] - 0xD
0002c6bd: VF := extend:64[#1333] <> extend:64[31:0[R0]] - 0xD
0002c6c2: CF := pad:64[#1333] <> pad:64[31:0[R0]] + 0xFFFFFFF3
0002c6c6: ZF := #1333 = 0
0002c6ca: NF := 31:31[#1333]
0002c6d0: when ZF <> 1 goto %0002c6ce
00035a71: goto %0002f52b

0002f52b:
0002f531: mem := mem with [R3 + R1] <- 0
0002f535: goto %0002c6ce

0002c6ce:
0002c6d6: R1 := 0x416000
0002c6db: R0 := 2
0002c6e1: R1 := R1 + 0xB18
0002c6e6: R30 := 0x4034D4
0002c6e8: call @__printf_chk with return %0002c6ea

0002c6ea:
0002c6ef: R0 := mem[R31 + 8, el]:u64
0002c6f6: R0 := pad:64[mem[R0]]
0002c6fc: when 31:0[R0] <> 0 goto %0002c6fa
00035a72: goto %0002f438

0002c6fa:
0002c704: R0 := mem[R22, el]:u64
0002c70b: R0 := pad:64[mem[R0 + 0x130, el]:u32]
0002c710: VF := 0
0002c713: CF := 1
0002c717: ZF := 31:0[R0] = 0
0002c71b: NF := 31:31[R0]
0002c721: #1334 := ZF
0002c724: VF := 0
0002c728: CF := #1334
0002c72d: ZF := #1334 & 31:0[R20] = 0
0002c732: NF := #1334 & 31:31[R20]
0002c738: when ZF goto %0002c736
00035a73: goto %0002f3ed

0002f3ed:
0002f3f2: R0 := mem[R31 + 8, el]:u64
0002f3f7: R30 := 0x403E98
0002f3f9: call @ntlm_hash_nt_password with return %0002f3fb

0002f3fb:
0002f401: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002f408: R1 := mem[R22, el]:u64
0002f40d: VF := 0
0002f410: CF := 1
0002f414: ZF := R1 = 0
0002f418: NF := 63:63[R1]
0002f41e: #1392 := ZF <> 1
0002f421: VF := 0
0002f425: CF := #1392
0002f42a: ZF := R0 = 0 | ~#1392
0002f42f: NF := #1392 & 63:63[R0]
0002f434: when ZF <> 1 goto %0002e768
00035a74: goto %0002e796

0002e768:
0002e76d: R2 := mem[R0, el]:u64
0002e772: R3 := mem[R0 + 8, el]:u64
0002e778: #1379 := R1 + 0xC8
0002e77e: mem := mem with [#1379, el]:u64 <- R2
0002e784: mem := mem with [#1379 + 8, el]:u64 <- R3
0002e78b: R2 := mem[R0 + 0xD, el]:u64
0002e793: mem := mem with [R1 + 0xD5, el]:u64 <- R2
0002e798: goto %0002e796

0002e796:
0002e79c: R30 := 0x403EB0
0002e79e: call @free with return %0002c736

0002c736:
0002c740: R0 := mem[R22, el]:u64
0002c747: R0 := pad:64[mem[R0 + 0x134, el]:u32]
0002c74c: VF := 0
0002c74f: CF := 1
0002c753: ZF := 31:0[R0] = 0
0002c757: NF := 31:31[R0]
0002c75d: #1335 := ZF
0002c760: VF := 0
0002c764: CF := #1335
0002c769: ZF := #1335 & 31:0[R20] = 0
0002c76e: NF := #1335 & 31:31[R20]
0002c774: when ZF goto %0002c772
00035a75: goto %0002f3a2

0002f3a2:
0002f3a7: R0 := mem[R31 + 8, el]:u64
0002f3ac: R30 := 0x403ECC
0002f3ae: call @ntlm_hash_lm_password with return %0002f3b0

0002f3b0:
0002f3b6: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002f3bd: R1 := mem[R22, el]:u64
0002f3c2: VF := 0
0002f3c5: CF := 1
0002f3c9: ZF := R0 = 0
0002f3cd: NF := 63:63[R0]
0002f3d3: #1391 := ZF <> 1
0002f3d6: VF := 0
0002f3da: CF := #1391
0002f3df: ZF := R1 = 0 | ~#1391
0002f3e4: NF := #1391 & 63:63[R1]
0002f3e9: when ZF <> 1 goto %0002e7cb
00035a76: goto %0002e7fb

0002e7cb:
0002e7cf: R2 := R1 + 0x96
0002e7d6: R4 := mem[R0, el]:u64
0002e7db: R5 := mem[R0 + 8, el]:u64
0002e7e3: mem := mem with [R2, el]:u64 <- R4
0002e7e9: mem := mem with [R2 + 8, el]:u64 <- R5
0002e7f0: R2 := mem[R0 + 0xD, el]:u64
0002e7f8: mem := mem with [R1 + 0xA3, el]:u64 <- R2
0002e7fd: goto %0002e7fb

0002e7fb:
0002e801: R30 := 0x403EE4
0002e803: call @free with return %0002c772

0002c772:
0002c77c: R0 := mem[R22, el]:u64
0002c783: R0 := pad:64[mem[R0 + 0x12C, el]:u32]
0002c788: VF := 0
0002c78b: CF := 1
0002c78f: ZF := 31:0[R0] = 0
0002c793: NF := 31:31[R0]
0002c799: #1336 := ZF
0002c79c: VF := 0
0002c7a0: CF := #1336
0002c7a5: ZF := #1336 & 31:0[R20] = 0
0002c7aa: NF := #1336 & 31:31[R20]
0002c7b0: when ZF goto %0002c7ae
00035a77: goto %0002f347

0002f347:
0002f34b: #1389 := R31 + 8
0002f350: R2 := mem[#1389, el]:u64
0002f355: R1 := mem[#1389 + 8, el]:u64
0002f35c: R0 := mem[R31 + 0x48, el]:u64
0002f361: R30 := 0x403F04
0002f363: call @ntlm2_hash_password with return %0002f365

0002f365:
0002f36b: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002f372: R1 := mem[R22, el]:u64
0002f377: VF := 0
0002f37a: CF := 1
0002f37e: ZF := R0 = 0
0002f382: NF := 63:63[R0]
0002f388: #1390 := ZF <> 1
0002f38b: VF := 0
0002f38f: CF := #1390
0002f394: ZF := R1 = 0 | ~#1390
0002f399: NF := #1390 & 63:63[R1]
0002f39e: when ZF <> 1 goto %0002e7a0
00035a78: goto %0002e7c1

0002e7a0:
0002e7a4: R1 := R1 + 0xFA
0002e7ab: R2 := mem[R0, el]:u64
0002e7b0: R3 := mem[R0 + 8, el]:u64
0002e7b8: mem := mem with [R1, el]:u64 <- R2
0002e7be: mem := mem with [R1 + 8, el]:u64 <- R3
0002e7c3: goto %0002e7c1

0002e7c1:
0002e7c7: R30 := 0x403F1C
0002e7c9: call @free with return %0002c7ae

0002c7ae:
0002c7b8: R20 := mem[R31 + 8, el]:u64
0002c7be: R0 := R20
0002c7c3: R30 := 0x403F28
0002c7c5: call @strlen with return %0002c7c7

0002c7c7:
0002c7ca: R3 := 0x32
0002c7d0: R2 := R0
0002c7d5: R1 := 0
0002c7db: R0 := R20
0002c7e0: R30 := 0x403F3C
0002c7e2: call @__memset_chk with return %0002c7e4

0002c7e4:
0002c7e7: goto %0002c7e5

0002f438:
0002f43d: R0 := mem[R31 + 0x68, el]:u64
0002f444: R0 := pad:64[mem[R0]]
0002f44a: when 31:0[R0] <> 0 goto %0002f448
00035a79: goto %0002f485

0002f448:
0002f452: R0 := mem[R31 + 0x68, el]:u64
0002f457: R1 := 8
0002f45c: R30 := 0x404450
0002f45e: call @scanmem with return %0002f460

0002f460:
0002f466: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002f46b: when R0 = 0 goto %0002cbd9
00035a7a: goto %0002f46f

0002cbd9:
0002cbdc: R2 := 0x415000
0002cbe2: R2 := R2 + 0xD10
0002cbe7: R1 := 2
0002cbec: R0 := 3
0002cbf1: R30 := 0x4045E0
0002cbf3: call @__syslog_chk with return %0002cbf5

0002cbf5:
0002cbf8: R0 := 1
0002cbfd: R30 := 0x4045E8
0002cbff: call @exit with return %0002cc01

0002f46f:
0002f474: R1 := mem[R22, el]:u64
0002f47a: when R1 = 0 goto %0002f478
00035a7b: goto %0002f50b

0002f50b:
0002f50f: R1 := R1 + 0xFA
0002f516: R2 := mem[R0, el]:u64
0002f51b: R3 := mem[R0 + 8, el]:u64
0002f523: mem := mem with [R1, el]:u64 <- R2
0002f529: mem := mem with [R1 + 8, el]:u64 <- R3
00035a7c: goto %0002f478

0002f478:
0002f480: R30 := 0x404470
0002f482: call @free with return %0002f484

0002f484:
0002f487: goto %0002f485

0002f485:
0002f48d: R0 := mem[R31 + 0x70, el]:u64
0002f494: R0 := pad:64[mem[R0]]
0002f49a: when 31:0[R0] <> 0 goto %0002f498
00035a7d: goto %0002f4d5

0002f498:
0002f4a2: R0 := mem[R31 + 0x70, el]:u64
0002f4a7: R1 := 8
0002f4ac: R30 := 0x4044A4
0002f4ae: call @scanmem with return %0002f4b0

0002f4b0:
0002f4b6: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002f4bb: when R0 = 0 goto %0002cc01
00035a7e: goto %0002f4bf

0002cc01:
0002cc04: R2 := 0x415000
0002cc0a: R2 := R2 + 0xD38
0002cc0f: R1 := 2
0002cc14: R0 := 3
0002cc19: R30 := 0x4045FC
0002cc1b: call @__syslog_chk with return %0002cc1d

0002cc1d:
0002cc20: R0 := 1
0002cc25: R30 := 0x404604
0002cc27: call @exit with return %0002cc29

0002f4bf:
0002f4c4: R1 := mem[R22, el]:u64
0002f4ca: when R1 = 0 goto %0002f4c8
00035a7f: goto %0002f4ed

0002f4ed:
0002f4f2: R2 := mem[R0, el]:u64
0002f4f7: R3 := mem[R0 + 8, el]:u64
0002f4fd: #1393 := R1 + 0xC8
0002f503: mem := mem with [#1393, el]:u64 <- R2
0002f509: mem := mem with [#1393 + 8, el]:u64 <- R3
00035a80: goto %0002f4c8

0002f4c8:
0002f4d0: R30 := 0x4044C0
0002f4d2: call @free with return %0002f4d4

0002f4d4:
0002f4d7: goto %0002f4d5

0002f4d5:
0002f4dd: R0 := mem[R31 + 0x78, el]:u64
0002f4e4: R0 := pad:64[mem[R0]]
0002f4e9: when 31:0[R0] <> 0 goto %0002cc29
00035a81: goto %0002c7e5

0002cc29:
0002cc2e: R0 := mem[R31 + 0x78, el]:u64
0002cc33: R1 := 8
0002cc38: R30 := 0x404610
0002cc3a: call @scanmem with return %0002cc3c

0002cc3c:
0002cc42: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002cc48: when R0 = 0 goto %0002cc46
00035a82: goto %0002cc73

0002cc46:
0002cc4e: R2 := 0x415000
0002cc54: R2 := R2 + 0xD60
0002cc59: R1 := 2
0002cc5e: R0 := 3
0002cc63: R30 := 0x404D08
0002cc65: call @__syslog_chk with return %0002cc67

0002cc67:
0002cc6a: R0 := 1
0002cc6f: R30 := 0x404D10
0002cc71: call @exit with return %0002c3c0

0002cc73:
0002cc78: R1 := mem[R22, el]:u64
0002cc7e: when R1 = 0 goto %0002cc7c
00035a83: goto %0002cc8c

0002cc8c:
0002cc90: R1 := R1 + 0x96
0002cc97: R2 := mem[R0, el]:u64
0002cc9c: R3 := mem[R0 + 8, el]:u64
0002cca4: mem := mem with [R1, el]:u64 <- R2
0002ccaa: mem := mem with [R1 + 8, el]:u64 <- R3
00035a84: goto %0002cc7c

0002cc7c:
0002cc84: R30 := 0x404630
0002cc86: call @free with return %0002cc88

0002cc88:
0002cc8a: goto %0002c7e5

0002c7e5:
0002c7ed: R0 := mem[R22, el]:u64
0002c7f4: R1 := mem[R31 + 0x48, el]:u64
0002c7f9: VF := 0
0002c7fc: CF := 1
0002c800: ZF := R0 = 0
0002c804: NF := 63:63[R0]
0002c80a: #1337 := ZF <> 1
0002c80d: VF := 0
0002c811: CF := #1337
0002c816: ZF := R1 = 0 | ~#1337
0002c81b: NF := #1337 & 63:63[R1]
0002c821: when ZF goto %0002c81f
00035a85: goto %0002d8aa

0002d8aa:
0002d8ad: R2 := 0x32
0002d8b2: R30 := 0x403520
0002d8b4: call @strlcpy with return %0002c81f

0002c81f:
0002c829: R0 := mem[R22, el]:u64
0002c830: R1 := mem[R31 + 0x10, el]:u64
0002c835: VF := 0
0002c838: CF := 1
0002c83c: ZF := R0 = 0
0002c840: NF := 63:63[R0]
0002c846: #1338 := ZF <> 1
0002c849: VF := 0
0002c84d: CF := #1338
0002c852: ZF := R1 = 0 | ~#1338
0002c857: NF := #1338 & 63:63[R1]
0002c85d: when ZF goto %0002c85b
00035a86: goto %0002d898

0002d898:
0002d89c: R0 := R0 + 0x32
0002d8a1: R2 := 0x32
0002d8a6: R30 := 0x403540
0002d8a8: call @strlcpy with return %0002c85b

0002c85b:
0002c865: R0 := mem[R22, el]:u64
0002c86b: when R0 = 0 goto %0002c869
00035a87: goto %0002d87f

0002d87f:
0002d884: R1 := mem[R31 + 0x28, el]:u64
0002d88a: R0 := R0 + 0x64
0002d88f: R2 := 0x32
0002d894: R30 := 0x403558
0002d896: call @strlcpy with return %0002c869

0002c869:
0002c873: R0 := mem[R31 + 0x48, el]:u64
0002c878: R30 := 0x403560
0002c87a: call @free with return %0002c87c

0002c87c:
0002c881: R0 := mem[R31 + 0x10, el]:u64
0002c886: R30 := 0x403568
0002c888: call @free with return %0002c88a

0002c88a:
0002c88f: R0 := mem[R31 + 0x28, el]:u64
0002c894: R30 := 0x403570
0002c896: call @free with return %0002c898

0002c898:
0002c89d: R0 := mem[R31 + 8, el]:u64
0002c8a2: R30 := 0x403578
0002c8a4: call @free with return %0002c8a6

0002c8a6:
0002c8ab: R0 := mem[R31 + 0x68, el]:u64
0002c8b0: R30 := 0x403580
0002c8b2: call @free with return %0002c8b4

0002c8b4:
0002c8b9: R0 := mem[R31 + 0x70, el]:u64
0002c8be: R30 := 0x403588
0002c8c0: call @free with return %0002c8c2

0002c8c2:
0002c8c7: R0 := mem[R31 + 0x78, el]:u64
0002c8cc: R30 := 0x403590
0002c8ce: call @free with return %0002c8d0

0002c8d0:
0002c8d5: R0 := mem[R31 + 0x30, el]:u64
0002c8da: R30 := 0x403598
0002c8dc: call @free with return %0002c8de

0002c8de:
0002c8e3: R0 := mem[R31 + 0x20, el]:u64
0002c8e9: when R0 <> 0 goto %0002c8e7
00035a88: goto %0002ccac

0002c8e7:
0002c8ef: R30 := 0x4040F0
0002c8f1: call @magic_auth_detect with return %0002c8f3

0002ccac:
0002ccb1: R0 := pad:64[mem[R31 + 0x38, el]:u32]
0002ccb6: when 31:0[R0] <> 0 goto %0002ca70
00035a89: goto %0002ccba

0002ca70:
0002ca75: R19 := mem[R22, el]:u64
0002ca7a: R1 := 0x32
0002ca80: R19 := R19 + 0x96
0002ca86: R0 := R19
0002ca8b: R30 := 0x4043AC
0002ca8d: call @is_memory_all_zero with return %0002ca8f

0002ca8f:
0002ca93: when 31:0[R0] = 0 goto %0002ca91
00035a8a: goto %0002cae1

0002ca91:
0002ca9a: R0 := R19
0002ca9f: R2 := 8
0002caa4: R1 := 0x10
0002caa9: R30 := 0x4045A8
0002caab: call @printmem with return %0002caad

0002caad:
0002cab0: R1 := 0x414000
0002cab6: R2 := R0
0002cabc: R1 := R1 + 0x300
0002cac1: R0 := 2
0002cac9: mem := mem with [R31 + 0xA0, el]:u64 <- R2
0002cace: R30 := 0x4045C0
0002cad0: call @__printf_chk with return %0002cad2

0002cad2:
0002cad7: R0 := mem[R31 + 0xA0, el]:u64
0002cadc: R30 := 0x4045C8
0002cade: call @free with return %0002cae0

0002cae0:
0002cae3: goto %0002cae1

0002cae1:
0002cae9: R19 := mem[R22, el]:u64
0002caee: R1 := 0x32
0002caf4: R19 := R19 + 0xC8
0002cafa: R0 := R19
0002caff: R30 := 0x4043C4
0002cb01: call @is_memory_all_zero with return %0002cb03

0002cb03:
0002cb07: when 31:0[R0] = 0 goto %0002cb05
00035a8b: goto %0002cb55

0002cb05:
0002cb0e: R0 := R19
0002cb13: R2 := 8
0002cb18: R1 := 0x10
0002cb1d: R30 := 0x404574
0002cb1f: call @printmem with return %0002cb21

0002cb21:
0002cb24: R1 := 0x414000
0002cb2a: R2 := R0
0002cb30: R1 := R1 + 0x2E8
0002cb35: R0 := 2
0002cb3d: mem := mem with [R31 + 0xA0, el]:u64 <- R2
0002cb42: R30 := 0x40458C
0002cb44: call @__printf_chk with return %0002cb46

0002cb46:
0002cb4b: R0 := mem[R31 + 0xA0, el]:u64
0002cb50: R30 := 0x404594
0002cb52: call @free with return %0002cb54

0002cb54:
0002cb57: goto %0002cb55

0002cb55:
0002cb5d: R19 := mem[R22, el]:u64
0002cb62: R1 := 0x32
0002cb68: R19 := R19 + 0xFA
0002cb6e: R0 := R19
0002cb73: R30 := 0x4043DC
0002cb75: call @is_memory_all_zero with return %0002cb77

0002cb77:
0002cb7a: when 31:0[R0] <> 0 goto %0002c8f3
00035a8c: goto %0002cb7e

0002cb7e:
0002cb82: R0 := R19
0002cb87: R2 := 8
0002cb8c: R1 := 0x10
0002cb91: R30 := 0x4043F0
0002cb93: call @printmem with return %0002cb95

0002cb95:
0002cb9a: R3 := mem[R22, el]:u64
0002cba0: R2 := R0
0002cba5: R1 := 0x415000
0002cbaa: R0 := 2
0002cbb0: R1 := R1 + 0xD88
0002cbb6: R4 := R3 + 0x32
0002cbbe: mem := mem with [R31 + 0xA0, el]:u64 <- R2
0002cbc3: R30 := 0x404410
0002cbc5: call @__printf_chk with return %0002cbc7

0002cbc7:
0002cbcc: R0 := mem[R31 + 0xA0, el]:u64
0002cbd1: R30 := 0x404418
0002cbd3: call @free with return %0002cbd5

0002cbd5:
0002cbd7: goto %0002c8f3

0002c8f3:
0002c8f6: R26 := 0
0002c8fd: mem := mem with [R31, el]:u32 <- 0
00035a8d: goto %0002c8ff

0002ccba:
0002ccbd: R0 := 0x42F000
0002ccc4: R0 := mem[R0 + 0xF58, el]:u64
0002cccb: R0 := pad:64[mem[R0, el]:u32]
0002ccd1: when 31:0[R0] <> 0 goto %0002cccf
00035a8e: goto %0002d7d7

0002d7d7:
0002d7dc: R20 := mem[R22, el]:u64
0002d7e3: R0 := pad:64[mem[R20 + 0x130, el]:u32]
0002d7e9: when 31:0[R0] <> 0 goto %0002d7e7
00035a8f: goto %0002d82e

0002d7e7:
0002d7f0: R0 := R20 + 0xC8
0002d7f5: R1 := 0x32
0002d7fa: R30 := 0x404540
0002d7fc: call @is_memory_all_zero with return %0002d7fe

0002d7fe:
0002d802: when 31:0[R0] <> 0 goto %0002d800
00035a90: goto %0002d82d

0002d82d:
0002d830: goto %0002d82e

0002d82e:
0002d836: R0 := pad:64[mem[R20 + 0x134, el]:u32]
0002d83c: when 31:0[R0] = 0 goto %0002d83a
00035a91: goto %0002d866

0002d866:
0002d86a: R0 := R20 + 0x96
0002d86f: R1 := 0x32
0002d874: R30 := 0x4035D8
0002d876: call @is_memory_all_zero with return %0002d878

0002d878:
0002d87b: when 31:0[R0] <> 0 goto %0002d800
00035a92: goto %0002d83a

0002d83a:
0002d844: R0 := pad:64[mem[R20 + 0x12C, el]:u32]
0002d849: when 31:0[R0] = 0 goto %0002cccf
00035a93: goto %0002d84d

0002d84d:
0002d851: R0 := R20 + 0xFA
0002d856: R1 := 0x32
0002d85b: R30 := 0x4035F0
0002d85d: call @is_memory_all_zero with return %0002d85f

0002d85f:
0002d862: when 31:0[R0] = 0 goto %0002cccf
00035a94: goto %0002d800

0002cccf:
0002ccd9: R0 := pad:64[mem[R31 + 0x18, el]:u32]
0002ccde: when 31:0[R0] = 0 goto %0002c30c
00035a95: goto %0002cce2

0002c30c:
0002c30f: R2 := 0x18
0002c314: R1 := 0x23
0002c319: R0 := 0x414000
0002c31f: R0 := R0 + 0xB80
0002c324: R30 := 0x404678
0002c326: call @openlog with return %0002c328

0002c328:
0002c32b: R2 := 0x415000
0002c330: R1 := 2
0002c336: R2 := R2 + 0xE08
0002c33b: R0 := 6
0002c340: R30 := 0x40468C
0002c342: call @__syslog_chk with return %0002c344

0002c344:
0002c347: goto %0002c345

0002cce2:
0002cce7: R0 := pad:64[mem[R28, el]:u32]
0002cced: when 31:0[R0] <> 0 goto %0002cceb
00035a96: goto %0002cd08

0002cd08:
0002cd0e: R30 := 0x404208
0002cd11: call @fork with return %0002cd13

0002cd13:
0002cd17: #1339 := 31:0[R0] + 1
0002cd1c: VF := extend:64[#1339] <> extend:64[31:0[R0]] + 1
0002cd21: CF := pad:64[#1339] <> pad:64[31:0[R0]] + 1
0002cd25: ZF := #1339 = 0
0002cd29: NF := 31:31[#1339]
0002cd2f: when ZF goto %0002cd2d
00035a97: goto %0002d795

0002cd2d:
0002cd35: R0 := 0x415000
0002cd3b: R0 := R0 + 0xE58
0002cd40: R30 := 0x404E0C
0002cd43: call @perror with return %0002cd45

0002cd45:
0002cd48: R0 := 1
0002cd4d: R30 := 0x404E14
0002cd4f: call @myexit with return %0002cd51

0002d795:
0002d799: when 31:0[R0] <> 0 goto %0002d797
00035a98: goto %0002d7a8

0002d797:
0002d79f: R0 := 0
0002d7a4: R30 := 0x404550
0002d7a6: call @myexit with return %0002cceb

0002cceb:
0002ccf3: R1 := 0x415000
0002ccf8: R0 := 2
0002ccfe: R1 := R1 + 0xE30
0002cd03: R30 := 0x404560
0002cd05: call @__printf_chk with return %0002cd07

0002cd07:
0002cd0a: goto %0002cd08

0002d7a8:
0002d7ab: R30 := 0x404218
0002d7ae: call @setsid with return %0002d7b0

0002d7b0:
0002d7b3: R0 := 0
0002d7b8: R30 := 0x404220
0002d7bb: call @umask with return %0002d7bd

0002d7bd:
0002d7c0: R0 := 0x413000
0002d7c6: R0 := R0 + 0x5C8
0002d7cb: R30 := 0x40422C
0002d7ce: call @chdir with return %0002d7d0

0002d7d0:
0002d7d3: when 31:0[R0] <> 0 goto %0002cd51
00035a99: goto %0002cd64

0002cd51:
0002cd54: R0 := 0x415000
0002cd5a: R0 := R0 + 0xE78
0002cd5f: R30 := 0x404E20
0002cd61: call @perror with return %0002cd63

0002cd63:
0002cd66: goto %0002cd64

0002cd64:
0002cd6a: R0 := 0x415000
0002cd6f: R1 := 2
0002cd75: R0 := R0 + 0xE90
0002cd7a: R30 := 0x404240
0002cd7d: call @open with return %0002cd7f

0002cd7f:
0002cd83: R19 := pad:64[31:0[R0]]
0002cd89: when ~31:31[R0] goto %0002cd87
00035a9a: goto %0002cdd9

0002cd87:
0002cd8f: R1 := 0
0002cd94: R30 := 0x404C6C
0002cd97: call @dup2 with return %0002cd99

0002cd99:
0002cd9c: R1 := 1
0002cda2: R0 := pad:64[31:0[R19]]
0002cda7: R30 := 0x404C78
0002cda9: call @dup2 with return %0002cdab

0002cdab:
0002cdaf: R0 := pad:64[31:0[R19]]
0002cdb4: R1 := 2
0002cdb9: R30 := 0x404C84
0002cdbb: call @dup2 with return %0002cdbd

0002cdbd:
0002cdc1: #1340 := 31:0[R19] - 2
0002cdc6: VF := extend:64[#1340] <> extend:64[31:0[R19]] - 2
0002cdcb: CF := pad:64[#1340] <> pad:64[31:0[R19]] + 0xFFFFFFFE
0002cdcf: ZF := #1340 = 0
0002cdd3: NF := 31:31[#1340]
0002cddb: when ~(NF = VF & ~ZF) goto %0002cdd9
00035a9b: goto %0002ce16

0002ce16:
0002ce1a: R0 := pad:64[31:0[R19]]
0002ce1f: R30 := 0x404C94
0002ce21: call @close with return %0002ce23

0002ce23:
0002ce25: goto %0002cdd9

0002cdd9:
0002cde1: R2 := 0x18
0002cde6: R1 := 3
0002cdeb: R0 := 0x414000
0002cdf1: R0 := R0 + 0xB80
0002cdf6: R30 := 0x40425C
0002cdf8: call @openlog with return %0002cdfa

0002cdfa:
0002cdfd: R2 := 0x415000
0002ce02: R1 := 2
0002ce08: R2 := R2 + 0xEA0
0002ce0d: R0 := 6
0002ce12: R30 := 0x404270
0002ce14: call @__syslog_chk with return %0002c345

0002c345:
0002c34d: R0 := pad:64[mem[R31, el]:u32]
0002c353: when 31:0[R0] = 0 goto %0002c351
00035a9c: goto %0003013d

0003013d:
00030140: R0 := 0xFF
00030145: R30 := 0x404280
00030147: call @setlogmask with return %0002c364

0002c364:
0002c36c: R0 := mem[R31 + 0x58, el]:u64
0002c373: R0 := pad:64[mem[R0]]
0002c379: when 31:0[R0] <> 0 goto %0002c377
00035a9d: goto %0002f6a8

0002c377:
0002c37f: R30 := 0x404BAC
0002c382: call @getuid with return %0002c384

0002c384:
0002c388: when 31:0[R0] <> 0 goto %0002c386
00035a9e: goto %0002c395

0002c386:
0002c38e: R30 := 0x404D30
0002c391: call @geteuid with return %0002c393

0002c393:
0002c397: when 31:0[R0] = 0 goto %0002c395
00035a9f: goto %000300fc

000300fc:
000300ff: R30 := 0x404D38
00030101: call @getuid with return %00030103

00030103:
00030107: R20 := pad:64[31:0[R0]]
0003010c: R30 := 0x404D40
0003010f: call @getgid with return %00030111

00030111:
00030115: R4 := pad:64[31:0[R0]]
0003011b: R3 := pad:64[31:0[R20]]
00030120: R2 := 0x415000
00030125: R1 := 2
0003012b: R2 := R2 + 0xEB0
00030130: R0 := 4
00030135: R30 := 0x404D5C
00030137: call @__syslog_chk with return %00030139

00030139:
0003013b: goto %0002f6a8

0002c395:
0002c39d: R30 := 0x404BB4
0002c39f: call @__ctype_b_loc with return %0002c3a1

0002c3a1:
0002c3a6: R3 := mem[R31 + 0x58, el]:u64
0002c3ad: R0 := mem[R0, el]:u64
0002c3b4: R1 := pad:64[mem[R3]]
0002c3bc: R0 := pad:64[mem[R0 + (62:0[R1].0), el]:u16]
0002c3c2: when ~11:11[R0] goto %0002c3c0
00035aa0: goto %000300c0

0002c3c0:
0002c3ca: R0 := mem[R31 + 0x58, el]:u64
0002c3cf: R30 := 0x404D18
0002c3d2: call @getpwnam with return %0002c3d4

0002c3d4:
0002c3d8: when R0 = 0 goto %0002c3d6
00035aa1: goto %0002f621

0002f621:
0002f626: R21 := pad:64[mem[R0 + 0x10, el]:u32]
0002f62b: when 31:0[R21] = 0 goto %0002c3d6
00035aa2: goto %0002f62f

0002c3d6:
0002c3e0: R3 := mem[R31 + 0x58, el]:u64
0002c3e5: R2 := 0x415000
0002c3eb: R2 := R2 + 0xF08
0002c3f0: R1 := 2
0002c3f5: R0 := 3
0002c3fa: R30 := 0x404DB8
0002c3fc: call @__syslog_chk with return %0002c3fe

0002c3fe:
0002c401: R0 := 1
0002c406: R30 := 0x404DC0
0002c408: call @myexit with return %0002c40a

0002f62f:
0002f634: R20 := pad:64[mem[R0 + 0x14, el]:u32]
0002f639: goto %0002f637

000300c0:
000300c4: R0 := R3
000300c9: R2 := 0xA
000300ce: R1 := 0
000300d3: R30 := 0x404BD8
000300d5: call @strtol with return %000300d7

000300d7:
000300db: R20 := R0
000300e1: R21 := pad:64[31:0[R0]]
000300e6: VF := 0
000300e9: CF := 1
000300ed: ZF := 31:0[R0] = 0
000300f1: NF := 31:31[R0]
000300f8: when ~(NF = VF & ~ZF) goto %0002c432
00035aa3: goto %0002f637

0002f637:
0002f63e: R0 := pad:64[31:0[R20]]
0002f643: R30 := 0x404BF0
0002f646: call @setgid with return %0002f648

0002f648:
0002f64c: when 31:0[R0] = 0 goto %0002f64a
00035aa4: goto %00030089

0002f64a:
0002f653: R0 := pad:64[31:0[R21]]
0002f658: R30 := 0x404D68
0002f65b: call @setuid with return %0002f65d

0002f65d:
0002f661: R19 := pad:64[31:0[R0]]
0002f666: R30 := 0x404D70
0002f668: call @__errno_location with return %0002f66a

0002f66a:
0002f66f: R0 := pad:64[mem[R0, el]:u32]
0002f674: R30 := 0x404D78
0002f676: call @strerror with return %0002f678

0002f678:
0002f67c: R5 := R0
0002f681: R2 := 0x415000
0002f687: R4 := pad:64[31:0[R20]]
0002f68d: R3 := pad:64[31:0[R21]]
0002f693: R2 := R2 + 0xF60
0002f698: R1 := 2
0002f69d: R0 := 6
0002f6a2: R30 := 0x404D98
0002f6a4: call @__syslog_chk with return %0002f6a6

0002f6a6:
0002f6aa: when 31:0[R19] = 0 goto %0002f6a8
00035aa5: goto %0003005d

0003005d:
00030060: goto %0003005e

00030089:
0003008c: R30 := 0x404BF8
0003008e: call @__errno_location with return %00030090

00030090:
00030095: R0 := pad:64[mem[R0, el]:u32]
0003009a: R30 := 0x404C00
0003009c: call @strerror with return %0003009e

0003009e:
000300a2: R3 := R0
000300a7: R2 := 0x415000
000300ac: R1 := 2
000300b2: R2 := R2 + 0xF28
000300b7: R0 := 3
000300bc: R30 := 0x404C18
000300be: call @__syslog_chk with return %0003005e

0003005e:
00030064: R2 := 0x415000
0003006a: R2 := R2 + 0xF50
0003006f: R1 := 2
00030074: R0 := 3
00030079: R30 := 0x404C2C
0003007b: call @__syslog_chk with return %0003007d

0003007d:
00030080: R0 := 1
00030085: R30 := 0x404C34
00030087: call @myexit with return %0002e840

0002e840:
0002e84a: R1 := mem[R31 + 0x30, el]:u64
0002e84f: R0 := 0x415000
0002e855: R0 := R0 + 0xC40
0002e85a: R30 := 0x404C44
0002e85c: call @strcasecmp with return %0002e85e

0002e85e:
0002e861: when 31:0[R0] <> 0 goto %0002ce6a
00035aa6: goto %0002e865

0002e865:
0002e86a: R0 := mem[R22, el]:u64
0002e86f: R1 := 0x417000
0002e876: V0 := pad:128[mem[R1 + 0x3B0, el]:u64]
0002e87c: R1 := R0 + 0x200
0002e883: mem := mem with [R0 + 0x134, el]:u32 <- 0
0002e88b: mem := mem with [R1 - 0xD4, el]:u64 <- 63:0[V0]
0002e88f: goto %0002c488

0002f6a8:
0002f6b2: R20 := mem[R31 + 0x50, el]:u64
0002f6b9: R0 := pad:64[mem[R20]]
0002f6bf: when 31:0[R0] = 0 goto %0002f6bd
00035aa7: goto %0002ff41

0002ff41:
0002ff44: R0 := 0
0002ff49: R30 := 0x4042A0
0002ff4b: call @umask with return %0002ff4d

0002ff4d:
0002ff51: R0 := R20
0002ff56: R2 := 0x1A4
0002ff5b: R1 := 0x241
0002ff60: R30 := 0x4042B0
0002ff62: call @open with return %0002ff64

0002ff64:
0002ff68: R20 := pad:64[31:0[R0]]
0002ff6d: when 31:31[R0] goto %0002ce27
00035aa8: goto %0002ff71

0002ce27:
0002ce2a: R30 := 0x404C9C
0002ce2c: call @__errno_location with return %0002ce2e

0002ce2e:
0002ce33: R0 := pad:64[mem[R0, el]:u32]
0002ce38: R30 := 0x404CA4
0002ce3a: call @strerror with return %0002ce3c

0002ce3c:
0002ce40: R3 := R0
0002ce45: R2 := 0x415000
0002ce4b: R2 := R2 + 0xF80
0002ce50: R1 := 2
0002ce55: R0 := 3
0002ce5a: R30 := 0x404CBC
0002ce5c: call @__syslog_chk with return %0002ce5e

0002ce5e:
0002ce61: R0 := 1
0002ce66: R30 := 0x404CC4
0002ce68: call @myexit with return %0002ce6a

0002ce6a:
0002ce6f: R1 := mem[R31 + 0x30, el]:u64
0002ce74: R0 := 0x415000
0002ce7a: R0 := R0 + 0xC48
0002ce7f: R30 := 0x404CD4
0002ce81: call @strcasecmp with return %0002ce83

0002ce83:
0002ce86: when 31:0[R0] <> 0 goto %0002c40a
00035aa9: goto %0002ce8a

0002c40a:
0002c40d: R2 := 0x415000
0002c413: R2 := R2 + 0xC50
0002c418: R1 := 2
0002c41d: R0 := 3
0002c422: R30 := 0x404DD4
0002c424: call @__syslog_chk with return %0002c426

0002c426:
0002c429: R0 := 1
0002c42e: R30 := 0x404DDC
0002c430: call @myexit with return %0002c432

0002c432:
0002c435: R2 := 0x415000
0002c43b: R2 := R2 + 0xEE0
0002c440: R1 := 2
0002c445: R0 := 3
0002c44a: R30 := 0x404DF0
0002c44c: call @__syslog_chk with return %0002c44e

0002c44e:
0002c451: R0 := 1
0002c456: R30 := 0x404DF8
0002c458: call @myexit with return %0002c45a

0002c45a:
0002c45d: R20 := 0
0002c462: goto %0002c460

0002ce8a:
0002ce8f: R0 := mem[R22, el]:u64
0002ce94: R1 := 0x417000
0002ce9b: V0 := pad:128[mem[R1 + 0x258, el]:u64]
0002cea1: R1 := R0 + 0x200
0002cea8: mem := mem with [R0 + 0x134, el]:u32 <- 0
0002ceb0: mem := mem with [R1 - 0xD4, el]:u64 <- 63:0[V0]
0002ceb4: goto %0002c488

0002ff71:
0002ff74: R0 := 0x32
0002ff79: R30 := 0x4042C0
0002ff7b: call @zmalloc with return %0002ff7d

0002ff7d:
0002ff81: R21 := R0
0002ff89: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002ff8e: R30 := 0x4042CC
0002ff91: call @getpid with return %0002ff93

0002ff93:
0002ff97: R5 := pad:64[31:0[R0]]
0002ff9c: R3 := 0x32
0002ffa1: R2 := 2
0002ffa7: R1 := R3
0002ffad: R0 := R21
0002ffb2: R4 := 0x415000
0002ffb8: R4 := R4 + 0xED8
0002ffbd: R30 := 0x4042EC
0002ffbf: call @__snprintf_chk with return %0002ffc1

0002ffc1:
0002ffc6: R21 := mem[R31 + 0xA0, el]:u64
0002ffcc: R0 := R21
0002ffd1: R30 := 0x4042F8
0002ffd3: call @strlen with return %0002ffd5

0002ffd5:
0002ffd9: R1 := R21
0002ffdf: R21 := R0
0002ffe5: R0 := pad:64[31:0[R20]]
0002ffeb: R2 := extend:64[31:0[R21]]
0002fff0: R30 := 0x40430C
0002fff2: call @write_wrapper with return %0002fff4

0002fff4:
0002fff8: #1403 := ~31:0[R0]
0002fffd: #1404 := 31:0[R21] + ~31:0[R0]
00030003: VF := extend:64[#1404 + 1] <> extend:64[31:0[R21]] +
          extend:64[#1403] + 1
00030009: CF := pad:64[#1404 + 1] <> pad:64[31:0[R21]] + pad:64[#1403] + 1
0003000d: ZF := #1404 + 1 = 0
00030011: NF := 31:31[#1404 + 1]
00030017: when ZF goto %00030015
00035aaa: goto %00030035

00030015:
0003001f: R0 := mem[R31 + 0xA0, el]:u64
00030024: R30 := 0x4046C8
00030026: call @free with return %00030028

00030028:
0003002c: R0 := pad:64[31:0[R20]]
00030031: R30 := 0x4046D0
00030033: call @close with return %0002f6bd

0002f6bd:
0002f6c5: R1 := 1
0002f6ca: R0 := 0xD
0002f6cf: R30 := 0x4046DC
0002f6d2: call @signal with return %0002f6d4

0002f6d4:
0002f6d7: R26 := 0
0002f6dc: R1 := 0x42F000
0002f6e3: R1 := mem[R1 + 0xFD8, el]:u64
0002f6e8: R0 := 2
0002f6ed: R27 := 0x42F000
0002f6f4: R27 := mem[R27 + 0xFD0, el]:u64
0002f6f9: R30 := 0x4046F8
0002f6fb: call @signal with return %0002f6fd

0002f6fd:
0002f700: R1 := 0x42F000
0002f707: R1 := mem[R1 + 0xFD8, el]:u64
0002f70c: R0 := 0xF
0002f711: R30 := 0x404708
0002f713: call @signal with return %0002f715

0002f715:
0002f718: R1 := 0x42F000
0002f71f: R1 := mem[R1 + 0xFD8, el]:u64
0002f724: R0 := 1
0002f729: R30 := 0x404718
0002f72b: call @signal with return %0002f72d

0002f72d:
0002f730: R0 := 0
0002f735: R30 := 0x404720
0002f737: call @time with return %0002f739

0002f739:
0002f73c: R30 := 0x404724
0002f73f: call @srandom with return %0002f741

0002f741:
0002f746: mem := mem with [R31, el]:u32 <- 0
0002f74b: R0 := 0x42F000
0002f752: R0 := mem[R0 + 0xF60, el]:u64
0002f75a: mem := mem with [R31 + 0x18, el]:u64 <- R0
0002f75f: R0 := 0x42F000
0002f766: R0 := mem[R0 + 0xF68, el]:u64
0002f76e: mem := mem with [R31 + 0x28, el]:u64 <- R0
0002f773: R0 := 0x42F000
0002f77a: R0 := mem[R0 + 0xF08, el]:u64
0002f782: mem := mem with [R31 + 0x30, el]:u64 <- R0
0002f78a: mem := mem with [R31 + 0x38, el]:u64 <- R22
00035aab: goto %0002f78c

0002f78c:
0002f791: R0 := mem[R31 + 0x18, el]:u64
0002f798: R0 := pad:64[mem[R0, el]:u32]
0002f79e: when 31:0[R0] = 0 goto %0002f79c
00035aac: goto %0002fef2

0002fef2:
0002fef7: R1 := pad:64[mem[R31, el]:u32]
0002fefd: #1399 := ~31:0[R1]
0002ff02: #1400 := 31:0[R26] + ~31:0[R1]
0002ff08: VF := extend:64[#1400 + 1] <> extend:64[31:0[R26]] +
          extend:64[#1399] + 1
0002ff0e: CF := pad:64[#1400 + 1] <> pad:64[31:0[R26]] + pad:64[#1399] + 1
0002ff12: ZF := #1400 + 1 = 0
0002ff16: NF := 31:31[#1400 + 1]
0002ff1c: #1401 := 31:0[R0] - 1
0002ff20: #1402 := ZF <> 1
0002ff26: VF := #1402 & extend:64[#1401] <> extend:64[31:0[R0]] - 1
0002ff2c: CF := #1402 & pad:64[#1401] <> pad:64[31:0[R0]] + 0xFFFFFFFF
0002ff31: ZF := #1402 & #1401 = 0
0002ff36: NF := #1402 & 31:31[#1401]
0002ff3d: when NF = VF & ~ZF goto %0002f98d
00035aad: goto %0002f79c

0002f98d:
0002f992: R22 := mem[R31 + 0x38, el]:u64
0002f996: goto %0002c8ff

0002c8ff:
0002c904: R0 := mem[R31 + 0x88, el]:u64
0002c909: R30 := 0x404100
0002c90b: call @free with return %0002c90d

0002c90d:
0002c912: R0 := pad:64[mem[R31, el]:u32]
0002c917: R1 := 2
0002c91c: R2 := 0x416000
0002c922: R2 := R2 + 0x88
0002c929: R3 := pad:64[31:0[R26] + ~31:0[R0] + 1]
0002c92e: R0 := 6
0002c933: R30 := 0x40411C
0002c935: call @__syslog_chk with return %0002c937

0002c937:
0002c93a: R0 := 0x42F000
0002c941: R0 := mem[R0 + 0xF10, el]:u64
0002c946: R30 := 0x404128
0002c948: call @pthread_mutex_lock with return %0002c94a

0002c94a:
0002c94d: R0 := 0x42F000
0002c954: R0 := mem[R0 + 0xFC0, el]:u64
0002c95b: R0 := mem[R0, el]:u64
0002c960: R30 := 0x404138
0002c962: call @plist_free with return %0002c964

0002c964:
0002c967: R0 := 0x42F000
0002c96e: R0 := mem[R0 + 0xF10, el]:u64
0002c973: R30 := 0x404144
0002c975: call @pthread_mutex_unlock with return %0002c977

0002c977:
0002c97a: R0 := 0x42F000
0002c981: R0 := mem[R0 + 0xF00, el]:u64
0002c988: R0 := mem[R0, el]:u64
0002c98d: R30 := 0x404154
0002c98f: call @hlist_free with return %0002c991

0002c991:
0002c994: R0 := 0x42F000
0002c99b: R0 := mem[R0 + 0xFF8, el]:u64
0002c9a2: R0 := mem[R0, el]:u64
0002c9a7: R30 := 0x404164
0002c9a9: call @plist_free with return %0002c9ab

0002c9ab:
0002c9ae: R0 := 0x42F000
0002c9b5: R0 := mem[R0 + 0xF78, el]:u64
0002c9bc: R0 := mem[R0, el]:u64
0002c9c1: R30 := 0x404174
0002c9c3: call @plist_free with return %0002c9c5

0002c9c5:
0002c9ca: R0 := mem[R31 + 0xB0, el]:u64
0002c9cf: R30 := 0x40417C
0002c9d1: call @plist_free with return %0002c9d3

0002c9d3:
0002c9d8: R0 := mem[R31 + 0xB8, el]:u64
0002c9dd: R30 := 0x404184
0002c9df: call @plist_free with return %0002c9e1

0002c9e1:
0002c9e6: R0 := mem[R31 + 0xC0, el]:u64
0002c9eb: R30 := 0x40418C
0002c9ed: call @plist_free with return %0002c9ef

0002c9ef:
0002c9f4: R0 := mem[R31 + 0xC8, el]:u64
0002c9f9: R30 := 0x404194
0002c9fb: call @plist_free with return %0002c9fd

0002c9fd:
0002ca02: R0 := mem[R31 + 0x50, el]:u64
0002ca09: R0 := pad:64[mem[R0]]
0002ca0f: when 31:0[R0] <> 0 goto %0002ca0d
00035aae: goto %0002ca22

0002ca0d:
0002ca17: R0 := mem[R31 + 0x50, el]:u64
0002ca1c: R30 := 0x404394
0002ca1f: call @unlink with return %0002ca21

0002ca21:
0002ca24: goto %0002ca22

0002ca22:
0002ca2a: R0 := mem[R31 + 0x58, el]:u64
0002ca2f: R30 := 0x4041A8
0002ca31: call @free with return %0002ca33

0002ca33:
0002ca38: R0 := mem[R31 + 0x50, el]:u64
0002ca3d: R30 := 0x4041B0
0002ca3f: call @free with return %0002ca41

0002ca41:
0002ca46: R0 := mem[R31 + 0x20, el]:u64
0002ca4b: R30 := 0x4041B8
0002ca4d: call @free with return %0002ca4f

0002ca4f:
0002ca54: R0 := mem[R22, el]:u64
0002ca59: R30 := 0x4041C0
0002ca5b: call @free with return %0002ca5d

0002ca5d:
0002ca60: R30 := 0x4041C4
0002ca62: call @parent_free with return %0002ca64

0002ca64:
0002ca67: R0 := 0
0002ca6c: R30 := 0x4041CC
0002ca6e: call @exit with return %0002c4e7

0002c4e7:
0002c4f0: R20 := R0
0002c4f9: R3 := pad:64[7:0[R0].15:8[R0].23:16[R0].31:24[R0]]
0002c4fe: R2 := 0x415000
0002c503: R0 := 6
0002c509: R2 := R2 + 0xCE0
0002c50e: R1 := 2
0002c513: R30 := 0x4041E8
0002c515: call @__syslog_chk with return %0002c517

0002c517:
0002c51c: R0 := mem[R22, el]:u64
0002c524: mem := mem with [R0 + 0x138, el]:u32 <- 31:0[R20]
0002c529: goto %0002c527

0002f79c:
0002f7a4: V0 := 0
0002f7aa: R20 := R31 + 0x1C8
0002f7b1: R22 := mem[R31 + 0xB8, el]:u64
0002f7b6: R21 := 1
0002f7be: mem := mem with [R20, el]:u128 <- V0
0002f7c4: mem := mem with [R20 + 0x10, el]:u128 <- V0
0002f7ca: #1394 := R20 + 0x20
0002f7d0: mem := mem with [#1394, el]:u128 <- V0
0002f7d6: mem := mem with [#1394 + 0x10, el]:u128 <- V0
0002f7dc: #1395 := R20 + 0x40
0002f7e2: mem := mem with [#1395, el]:u128 <- V0
0002f7e8: mem := mem with [#1395 + 0x10, el]:u128 <- V0
0002f7ee: #1396 := R20 + 0x60
0002f7f4: mem := mem with [#1396, el]:u128 <- V0
0002f7fa: mem := mem with [#1396 + 0x10, el]:u128 <- V0
0002f800: when R22 = 0 goto %0002f7fe
00035aaf: goto %0002feb0

0002feb0:
0002feb5: R0 := mem[R22, el]:u64
0002feba: R30 := 0x404798
0002febc: call @__fdelt_chk with return %0002febe

0002febe:
0002fec3: R1 := mem[R22, el]:u64
0002fecb: R2 := mem[R20 + (60:0[R0].0), el]:u64
0002fed2: R22 := mem[R22 + 0x10, el]:u64
0002fed9: R1 := R21 << pad:12[5:0[R1]]
0002fee0: R1 := R1 | R2
0002fee9: mem := mem with [R20 + (60:0[R0].0), el]:u64 <- R1
0002feee: when R22 <> 0 goto %0002feb0
00035ab0: goto %0002f7fe

0002f7fe:
0002f808: R22 := mem[R31 + 0xC0, el]:u64
0002f80d: R21 := 1
0002f813: when R22 = 0 goto %0002f811
00035ab1: goto %0002fe6e

0002fe6e:
0002fe73: R0 := mem[R22, el]:u64
0002fe78: R30 := 0x4047C8
0002fe7a: call @__fdelt_chk with return %0002fe7c

0002fe7c:
0002fe81: R1 := mem[R22, el]:u64
0002fe89: R2 := mem[R20 + (60:0[R0].0), el]:u64
0002fe90: R22 := mem[R22 + 0x10, el]:u64
0002fe97: R1 := R21 << pad:12[5:0[R1]]
0002fe9e: R1 := R1 | R2
0002fea7: mem := mem with [R20 + (60:0[R0].0), el]:u64 <- R1
0002feac: when R22 <> 0 goto %0002fe6e
00035ab2: goto %0002f811

0002f811:
0002f81b: R22 := mem[R31 + 0xB0, el]:u64
0002f820: R21 := 1
0002f826: when R22 = 0 goto %0002f824
00035ab3: goto %0002fe2c

0002fe2c:
0002fe31: R0 := mem[R22, el]:u64
0002fe36: R30 := 0x4047F8
0002fe38: call @__fdelt_chk with return %0002fe3a

0002fe3a:
0002fe3f: R1 := mem[R22, el]:u64
0002fe47: R2 := mem[R20 + (60:0[R0].0), el]:u64
0002fe4e: R22 := mem[R22 + 0x10, el]:u64
0002fe55: R1 := R21 << pad:12[5:0[R1]]
0002fe5c: R1 := R1 | R2
0002fe65: mem := mem with [R20 + (60:0[R0].0), el]:u64 <- R1
0002fe6a: when R22 <> 0 goto %0002fe2c
00035ab4: goto %0002f824

0002f824:
0002f82c: R5 := 0x417000
0002f832: R4 := R31 + 0xD0
0002f838: R1 := R20
0002f83d: R3 := 0
0002f844: V0 := mem[R5 + 0x3B0, el]:u128
0002f849: R2 := 0
0002f84e: R0 := 0x400
0002f856: mem := mem with [R31 + 0xD0, el]:u128 <- V0
0002f85b: R30 := 0x404838
0002f85d: call @select with return %0002f85f

0002f85f:
0002f862: VF := 0
0002f865: CF := 1
0002f869: ZF := 31:0[R0] = 0
0002f86d: NF := 31:31[R0]
0002f875: when NF = VF & ~ZF goto %0002f873
00035ab5: goto %0002fe10

0002f873:
0002f87b: R0 := 0x42F000
0002f882: R0 := mem[R0 + 0xF88, el]:u64
0002f887: R25 := 0
0002f88c: R19 := 0
0002f891: R24 := 1
0002f899: mem := mem with [R31 + 0x10, el]:u64 <- R0
0002f89e: goto %0002f89c

0002f89c:
0002f8a3: R0 := R19
0002f8a8: R30 := 0x40497C
0002f8aa: call @__fdelt_chk with return %0002f8ac

0002f8ac:
0002f8b2: R0 := mem[R20 + (60:0[R0].0), el]:u64
0002f8b9: R1 := R24 << pad:12[5:0[R19]]
0002f8be: VF := 0
0002f8c1: CF := 0
0002f8c6: ZF := (R1 & R0) = 0
0002f8cb: NF := 63:63[R1] & 63:63[R0]
0002f8d1: when ZF goto %0002f8cf
00035ab6: goto %0002fa0e

0002fa0e:
0002fa11: R3 := 0x1C
0002fa17: R22 := R31 + 0xE8
0002fa1d: R1 := R22
0002fa23: R2 := R31 + 0x9C
0002fa29: R0 := pad:64[31:0[R19]]
0002fa31: mem := mem with [R31 + 0x9C, el]:u32 <- 31:0[R3]
0002fa36: R30 := 0x4049A8
0002fa39: call @accept with return %0002fa3b

0002fa3b:
0002fa3f: R21 := pad:64[31:0[R0]]
0002fa45: when 31:31[R0] goto %0002fa43
00035ab7: goto %0002fc1e

0002fa43:
0002fa4b: R30 := 0x404A58
0002fa4d: call @__errno_location with return %0002fa4f

0002fa4f:
0002fa54: R0 := pad:64[mem[R0, el]:u32]
0002fa59: R30 := 0x404A60
0002fa5b: call @strerror with return %0002fa5d

0002fa5d:
0002fa61: R3 := R0
0002fa66: R2 := 0x415000
0002fa6b: R1 := 2
0002fa71: R2 := R2 + 0xFC8
0002fa76: R0 := 3
0002fa7b: R30 := 0x404A78
0002fa7d: call @__syslog_chk with return %0002fa7f

0002fa7f:
0002fa81: goto %0002f8cf

0002fc1e:
0002fc23: R0 := mem[R31 + 0xC8, el]:u64
0002fc29: R1 := R22
0002fc2e: R30 := 0x4049BC
0002fc30: call @acl_check with return %0002fc32

0002fc32:
0002fc36: when 31:0[R0] <> 0 goto %0002fc34
00035ab8: goto %0002fd38

0002fd38:
0002fd3c: R23 := R31 + 0x188
0002fd42: R0 := R23
0002fd47: R30 := 0x4049CC
0002fd4a: call @pthread_attr_init with return %0002fd4c

0002fd4c:
0002fd4f: R1 := 0x20000
0002fd55: R0 := R23
0002fd5a: R30 := 0x4049D8
0002fd5d: call @pthread_attr_setstacksize with return %0002fd5f

0002fd5f:
0002fd62: R1 := 1
0002fd68: R0 := R23
0002fd6d: R30 := 0x4049E4
0002fd70: call @pthread_attr_setdetachstate with return %0002fd72

0002fd72:
0002fd75: R1 := 0x100
0002fd7b: R0 := R23
0002fd80: R30 := 0x4049F0
0002fd83: call @pthread_attr_setguardsize with return %0002fd85

0002fd85:
0002fd8a: R0 := mem[R31 + 0xB8, el]:u64
0002fd90: R1 := R19
0002fd95: R30 := 0x4049FC
0002fd97: call @plist_in with return %0002fd99

0002fd99:
0002fd9c: when 31:0[R0] = 0 goto %0002fa83
00035ab9: goto %0002fda0

0002fa83:
0002fa88: R0 := mem[R31 + 0xC0, el]:u64
0002fa8e: R1 := R19
0002fa93: R30 := 0x404A88
0002fa95: call @plist_in with return %0002fa97

0002fa97:
0002fa9b: when 31:0[R0] = 0 goto %0002fa99
00035aba: goto %0002fbaa

0002fa99:
0002faa1: R0 := 0x30
0002faa6: R30 := 0x404AFC
0002faa8: call @zmalloc with return %0002faaa

0002faaa:
0002faae: R2 := R0
0002fab4: R3 := R0
0002fabb: V1 := mem[R31 + 0xE8, el]:u128
0002fac1: R1 := R19
0002fac8: V0 := mem[R22 + 0xC, el]:u128
0002fad0: mem := mem with [R2, el]:u32 <- 31:0[R21]
0002fad4: R2 := R2 + 0x10
0002fadb: R0 := mem[R31 + 0xB0, el]:u64
0002fae3: mem := mem with [R3 + 0x10, el]:u128 <- V1
0002faeb: mem := mem with [R31 + 8, el]:u64 <- R3
0002faf3: mem := mem with [R2 + 0xC, el]:u128 <- V0
0002faf8: R30 := 0x404B28
0002fafa: call @plist_get with return %0002fafc

0002fafc:
0002fb01: R1 := pad:64[mem[R27, el]:u32]
0002fb08: R3 := mem[R31 + 8, el]:u64
0002fb10: mem := mem with [R3 + 8, el]:u64 <- R0
0002fb16: when 31:0[R1] <> 0 goto %0002fb14
00035abb: goto %0002fb7a

0002fb14:
0002fb1d: R0 := R3
0002fb22: R30 := 0x404B60
0002fb24: call @tunnel_thread with return %0002fb26

0002fb26:
0002fb29: goto %0002fb27

0002fb7a:
0002fb7f: R2 := mem[R31 + 0x28, el]:u64
0002fb85: R1 := R23
0002fb8b: R0 := R31 + 0xA8
0002fb90: R30 := 0x404B48
0002fb93: call @pthread_create with return %0002fb95

0002fb95:
0002fb99: R25 := pad:64[31:0[R0]]
0002fb9d: goto %0002fb27

0002fbaa:
0002fbad: R0 := 0x30
0002fbb2: R30 := 0x404A94
0002fbb4: call @zmalloc with return %0002fbb6

0002fbb6:
0002fbba: R1 := R0
0002fbc1: R2 := pad:64[mem[R27, el]:u32]
0002fbc8: V1 := mem[R31 + 0xE8, el]:u128
0002fbce: R3 := R0
0002fbd5: V0 := mem[R22 + 0xC, el]:u128
0002fbdd: mem := mem with [R1, el]:u32 <- 31:0[R21]
0002fbe1: R1 := R1 + 0x10
0002fbe9: mem := mem with [R0 + 0x10, el]:u128 <- V1
0002fbf1: mem := mem with [R1 + 0xC, el]:u128 <- V0
0002fbf6: when 31:0[R2] <> 0 goto %0002fb9f
00035abc: goto %0002fbfa

0002fb9f:
0002fba2: R30 := 0x404B54
0002fba4: call @socks5_thread with return %0002fba6

0002fba6:
0002fba8: goto %0002fb27

0002fbfa:
0002fbff: R2 := mem[R31 + 0x30, el]:u64
0002fc05: R1 := R23
0002fc0b: R0 := R31 + 0xA8
0002fc10: R30 := 0x404AC8
0002fc12: call @pthread_create with return %0002fc14

0002fc14:
0002fc18: R25 := pad:64[31:0[R0]]
0002fc1c: goto %0002fb27

0002fda0:
0002fda3: R0 := 0x30
0002fda8: R30 := 0x404A08
0002fdaa: call @zmalloc with return %0002fdac

0002fdac:
0002fdb0: R1 := R0
0002fdb7: R2 := pad:64[mem[R27, el]:u32]
0002fdbe: V1 := mem[R31 + 0xE8, el]:u128
0002fdc4: R3 := R0
0002fdcb: V0 := mem[R22 + 0xC, el]:u128
0002fdd3: mem := mem with [R1, el]:u32 <- 31:0[R21]
0002fdd7: R1 := R1 + 0x10
0002fddf: mem := mem with [R0 + 0x10, el]:u128 <- V1
0002fde7: mem := mem with [R1 + 0xC, el]:u128 <- V0
0002fdec: when 31:0[R2] <> 0 goto %0002fb65
00035abd: goto %0002fdf0

0002fb65:
0002fb68: R30 := 0x404AF0
0002fb6a: call @proxy_thread with return %0002fb6c

0002fb6c:
0002fb6e: goto %0002fb27

0002fdf0:
0002fdf5: R2 := mem[R31 + 0x10, el]:u64
0002fdfb: R1 := R23
0002fe01: R0 := R31 + 0xA8
0002fe06: R30 := 0x404A3C
0002fe08: call @pthread_create with return %0002fe0a

0002fe0a:
0002fe0e: R25 := pad:64[31:0[R0]]
00035abe: goto %0002fb27

0002fb27:
0002fb2e: R0 := R23
0002fb33: R30 := 0x404A48
0002fb36: call @pthread_attr_destroy with return %0002fb38

0002fb38:
0002fb3c: when 31:0[R25] <> 0 goto %0002fb3a
00035abf: goto %0002fb70

0002fb3a:
0002fb43: R3 := pad:64[31:0[R25]]
0002fb48: R2 := 0x416000
0002fb4d: R1 := 2
0002fb53: R2 := R2 + 0x10
0002fb58: R0 := 3
0002fb5d: R30 := 0x404AE8
0002fb5f: call @__syslog_chk with return %0002fb61

0002fb61:
0002fb63: goto %0002f8cf

0002fb70:
0002fb74: R26 := pad:64[31:0[R26] + 1]
0002fb78: goto %0002f8cf

0002fc34:
0002fc3c: V0 := 0
0002fc43: R0 := pad:64[mem[R31 + 0xE8, el]:u16]
0002fc49: R22 := R31 + 0x248
0002fc4f: R3 := R31 + 0xEC
0002fc55: #1398 := 31:0[R0] - 2
0002fc5a: VF := extend:64[#1398] <> extend:64[31:0[R0]] - 2
0002fc5f: CF := pad:64[#1398] <> pad:64[31:0[R0]] + 0xFFFFFFFE
0002fc63: ZF := #1398 = 0
0002fc67: NF := 31:31[#1398]
0002fc6d: R1 := R31 + 0xF0
0002fc7b: when ZF <> 1 goto %0002fc73
0002fc7c: goto %0002fc77

0002fc77:
0002fc78: R1 := R3
0002fc7e: goto %0002fc7a

0002fc73:
0002fc74: R1 := R1
0002fc7d: goto %0002fc7a

0002fc7a:
0002fc84: R2 := R22
0002fc8c: mem := mem with [R22, el]:u128 <- V0
0002fc92: mem := mem with [R22 + 0x10, el]:u128 <- V0
0002fc97: R3 := 0x2E
0002fc9f: mem := mem with [R22 + 0x1E, el]:u128 <- V0
0002fca4: R30 := 0x40490C
0002fca6: call @inet_ntop with return %0002fca8

0002fca8:
0002fcad: R4 := pad:64[mem[R31 + 0xEA, el]:u16]
0002fcb3: R3 := R22
0002fcb8: R2 := 0x415000
0002fcc1: R4 := pad:64[23:16[R4].31:24[R4].7:0[R4].15:8[R4]]
0002fcc7: R2 := R2 + 0xFF0
0002fccd: R4 := pad:64[15:0[R4]]
0002fcd2: R1 := 2
0002fcd7: R0 := 4
0002fcdc: R30 := 0x404930
0002fcde: call @__syslog_chk with return %0002fce0

0002fce0:
0002fce4: R0 := R22
0002fce9: R30 := 0x404938
0002fceb: call @gen_denied_page with return %0002fced

0002fced:
0002fcf1: R22 := R0
0002fcf9: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002fcfe: R30 := 0x404944
0002fd00: call @strlen with return %0002fd02

0002fd02:
0002fd06: R1 := R22
0002fd0c: R2 := R0
0002fd12: R0 := pad:64[31:0[R21]]
0002fd17: R30 := 0x404954
0002fd19: call @write_wrapper with return %0002fd1b

0002fd1b:
0002fd20: R0 := mem[R31 + 0xA0, el]:u64
0002fd25: R30 := 0x40495C
0002fd27: call @free with return %0002fd29

0002fd29:
0002fd2d: R0 := pad:64[31:0[R21]]
0002fd32: R30 := 0x404964
0002fd34: call @close with return %0002fd36

0002fd36:
00035ac0: goto %0002f8cf

0002f8cf:
0002f8d8: R19 := R19 + 1
0002f8de: #1397 := R19 - 0x400
0002f8e3: VF := extend:128[#1397] <> extend:128[R19] - 0x400
0002f8e8: CF := pad:128[#1397] <> pad:128[R19] + 0xFFFFFFFFFFFFFC00
0002f8ec: ZF := #1397 = 0
0002f8f0: NF := 63:63[#1397]
0002f8f6: when ZF goto %0002f8f4
00035ac1: goto %0002f89c

0002fe10:
0002fe13: when ZF goto %0002f8f4
00035ac2: goto %0002fe17

0002fe17:
0002fe1c: R0 := mem[R31 + 0x18, el]:u64
0002fe23: R0 := pad:64[mem[R0, el]:u32]
0002fe28: when 31:0[R0] = 0 goto %0002f952
00035ac3: goto %0002f8f4

0002f952:
0002f955: R30 := 0x404B7C
0002f957: call @__errno_location with return %0002f959

0002f959:
0002f95e: R0 := pad:64[mem[R0, el]:u32]
0002f963: R30 := 0x404B84
0002f965: call @strerror with return %0002f967

0002f967:
0002f96b: R3 := R0
0002f970: R2 := 0x416000
0002f975: R1 := 2
0002f97b: R2 := R2 + 0x40
0002f980: R0 := 3
0002f985: R30 := 0x404B9C
0002f987: call @__syslog_chk with return %0002f989

0002f989:
0002f98b: goto %0002f8f4

0002f8f4:
0002f8fc: R21 := 0x42F000
0002f903: R21 := mem[R21 + 0xF40, el]:u64
0002f90a: R0 := mem[R21, el]:u64
0002f90f: when R0 = 0 goto %0002f78c
00035ac4: goto %0002f913

0002f913:
0002f916: R0 := 0x42F000
0002f91d: R0 := mem[R0 + 0xEF0, el]:u64
0002f922: R30 := 0x40486C
0002f924: call @pthread_mutex_lock with return %0002f926

0002f926:
0002f92b: R20 := mem[R21, el]:u64
0002f931: when R20 = 0 goto %0002f92f
00035ac5: goto %0002f998

0002f998:
0002f99b: R22 := 0x416000
0002f9a1: R22 := R22 + 0x68
0002f9a6: goto %0002f9a4

0002f9a4:
0002f9ac: R1 := pad:64[mem[R31, el]:u32]
0002f9b2: R23 := R20
0002f9b9: R0 := pad:64[mem[R28, el]:u32]
0002f9bf: R1 := pad:64[31:0[R1] + 1]
0002f9c7: mem := mem with [R31, el]:u32 <- 31:0[R1]
0002f9ce: R20 := mem[R20 + 0x10, el]:u64
0002f9d4: when 31:0[R0] = 0 goto %0002f9d2
00035ac6: goto %0002f9eb

0002f9eb:
0002f9f0: R2 := mem[R23, el]:u64
0002f9f6: R3 := pad:64[31:0[R19]]
0002f9fc: R1 := R22
0002fa01: R0 := 2
0002fa06: R30 := 0x4048BC
0002fa08: call @__printf_chk with return %0002fa0a

0002fa0a:
0002fa0c: goto %0002f9d2

0002f9d2:
0002f9db: R0 := R23
0002f9e0: R30 := 0x404888
0002f9e2: call @free with return %0002f9e4

0002f9e4:
0002f9e7: when R20 = 0 goto %0002f92f
00035ac7: goto %0002f9a4

0002f92f:
0002f937: R0 := 0x42F000
0002f93e: R0 := mem[R0 + 0xEF0, el]:u64
0002f945: mem := mem with [R21, el]:u64 <- 0
0002f94a: R30 := 0x404B74
0002f94c: call @pthread_mutex_unlock with return %0002f94e

0002f94e:
0002f950: goto %0002f78c

00030035:
00030038: R2 := 0x415000
0003003e: R2 := R2 + 0xFA8
00030043: R1 := 2
00030048: R0 := 3
0003004d: R30 := 0x404328
0003004f: call @__syslog_chk with return %00030051

00030051:
00030054: R0 := 1
00030059: R30 := 0x404330
0003005b: call @myexit with return %0002ddaf

0002ddaf:
0002ddb8: R3 := R23
0002ddbd: R2 := 0x415000
0002ddc2: R1 := 2
0002ddc8: R2 := R2 + 0xA10
0002ddcd: R0 := 3
0002ddd2: R30 := 0x404348
0002ddd4: call @__syslog_chk with return %0002ddd6

0002ddd6:
0002ddd9: goto %0002ddd7

0002ddd7:
0002dddd: R0 := 1
0002dde2: R30 := 0x402B64
0002dde4: call @myexit with return %0002dde6

0002dde6:
0002dde9: R4 := 0x42F000
0002ddf0: R4 := mem[R4 + 0xF20, el]:u64
0002ddf5: R28 := 1
0002ddfa: R3 := 0x42F000
0002de01: R3 := mem[R3 + 0xF30, el]:u64
0002de06: R2 := 0x180
0002de0d: R0 := mem[R4, el]:u64
0002de12: R1 := 0x241
0002de1a: mem := mem with [R31, el]:u64 <- R4
0002de22: mem := mem with [R3, el]:u32 <- 31:0[R28]
0002de27: R30 := 0x402B90
0002de29: call @open with return %0002de2b

0002de2b:
0002de2f: R26 := pad:64[31:0[R0]]
0002de36: R4 := mem[R31, el]:u64
0002de3c: when 31:31[R0] goto %0002de3a
00035ac8: goto %0002de76

0002de3a:
0002de42: R0 := 0x42F000
0002de49: R0 := mem[R0 + 0xF18, el]:u64
0002de4e: R2 := 0x414000
0002de54: R2 := R2 + 0xC10
0002de59: R1 := 2
0002de60: R0 := mem[R0, el]:u64
0002de65: R30 := 0x4046AC
0002de67: call @__fprintf_chk with return %0002de69

0002de69:
0002de6d: R0 := pad:64[31:0[R28]]
0002de72: R30 := 0x4046B4
0002de74: call @myexit with return %0002c351

0002c351:
0002c359: R0 := 0x7F
0002c35e: R30 := 0x4046BC
0002c361: call @setlogmask with return %0002c363

0002c363:
0002c366: goto %0002c364

0002de76:
0002de7b: R2 := mem[R4, el]:u64
0002de80: R1 := 0x414000
0002de85: R0 := 2
0002de8b: R1 := R1 + 0xC30
0002de90: R30 := 0x402BB0
0002de92: call @__printf_chk with return %0002de94

0002de94:
0002de98: R1 := pad:64[31:0[R28]]
0002de9e: R0 := pad:64[31:0[R26]]
0002dea3: R30 := 0x402BBC
0002dea5: call @dup2 with return %0002dea7

0002dea7:
0002deab: R0 := pad:64[31:0[R26]]
0002deb0: R1 := 2
0002deb5: R30 := 0x402BC8
0002deb7: call @dup2 with return %0002deb9

0002deb9:
0002debf: mem := mem with [R31, el]:u32 <- 31:0[R28]
0002dec6: mem := mem with [R31 + 0x18, el]:u32 <- 0
0002deca: goto %0002bd91

0002d800:
0002d808: R2 := 0x415000
0002d80e: R2 := R2 + 0xDC8
0002d813: R1 := 2
0002d818: R0 := 3
0002d81d: R30 := 0x403608
0002d81f: call @__syslog_chk with return %0002d821

0002d821:
0002d824: R0 := 1
0002d829: R30 := 0x403610
0002d82b: call @myexit with return %0002c240

0002c240:
0002c248: R0 := 2
0002c24d: goto %0002c24b

0002c24b:
0002c253: R19 := pad:64[31:0[R19] + 31:0[R0]]
0002c259: #1330 := ~31:0[R19]
0002c25e: #1331 := 31:0[R20] + ~31:0[R19]
0002c264: VF := extend:64[#1331 + 1] <> extend:64[31:0[R20]] +
          extend:64[#1330] + 1
0002c26a: CF := pad:64[#1331 + 1] <> pad:64[31:0[R20]] + pad:64[#1330] + 1
0002c26e: ZF := #1331 + 1 = 0
0002c272: NF := 31:31[#1331 + 1]
0002c27a: when ~(NF = VF & ~ZF) goto %0002c278
00035ac9: goto %0002e8fe

0002e8fe:
0002e909: R24 := mem[R21 + extend:64[31:0[R19].0], el]:u64
0002e90e: R1 := 0x3A
0002e914: R0 := R24
0002e919: R30 := 0x4030E4
0002e91b: call @strchr with return %0002e91d

0002e91d:
0002e923: mem := mem with [R31 + 0xA0, el]:u64 <- R0
0002e928: when R0 <> 0 goto %0002e6e6
00035aca: goto %0002e92c

0002e92c:
0002e930: R26 := pad:64[31:0[R19] + 1]
0002e936: #1382 := ~31:0[R20]
0002e93b: #1383 := 31:0[R26] + ~31:0[R20]
0002e941: VF := extend:64[#1383 + 1] <> extend:64[31:0[R26]] +
          extend:64[#1382] + 1
0002e947: CF := pad:64[#1383 + 1] <> pad:64[31:0[R26]] + pad:64[#1382] + 1
0002e94b: ZF := #1383 + 1 = 0
0002e94f: NF := 31:31[#1383 + 1]
0002e955: when NF <> VF goto %0002c20b
00035acb: goto %0002e959

0002c20b:
0002c211: R0 := mem[R21 + extend:64[31:0[R26].0], el]:u64
0002c216: R2 := 0xA
0002c21b: R1 := 0
0002c220: R30 := 0x403938
0002c222: call @strtol with return %0002c224

0002c224:
0002c228: R1 := pad:64[31:0[R0]]
0002c22e: R0 := R24
0002c233: R30 := 0x403944
0002c235: call @parent_add with return %0002c237

0002c237:
0002c23c: R0 := mem[R31 + 0xA0, el]:u64
0002c242: when R0 = 0 goto %0002c240
00035acc: goto %00030194

00030194:
00030198: R19 := pad:64[31:0[R26]]
0003019c: goto %0002e8fe

0002e959:
0002e95d: R0 := R24
0002e962: R1 := 0
0002e967: R30 := 0x403104
0002e969: call @parent_add with return %0002e96b

0002e96b:
0002e970: R0 := mem[R31 + 0xA0, el]:u64
0002e975: when R0 = 0 goto %0002c240
00035acd: goto %0002e979

0002e979:
0002e97d: R19 := pad:64[31:0[R26]]
00035ace: goto %0002c278

0002c278:
0002c281: when R23 = 0 goto %0002c27f
00035acf: goto %0002e980

0002e6e6:
0002e6e9: R1 := 0
0002e6ef: R0 := R24
0002e6f4: R30 := 0x4030BC
0002e6f6: call @parent_add with return %0002e6f8

0002e6f8:
0002e6fd: R1 := mem[R31 + 0xA0, el]:u64
0002e702: R0 := 1
0002e707: when R1 = 0 goto %0002c240
00035ad0: goto %0002c24b

0002eea1:
0002eea6: R0 := mem[R20, el]:u64
0002eeab: R1 := 1
0002eeb3: mem := mem with [R25, el]:u32 <- 31:0[R1]
0002eeb9: when R0 <> 0 goto %0002eeb7
00035ad1: goto %0002ef74

0002ef74:
0002ef77: R0 := 1
0002ef7f: mem := mem with [R20, el]:u64 <- R0
00035ad2: goto %0002eeb7

0002eeb7:
0002eec0: R0 := R24
0002eec5: R30 := 0x403D40
0002eec7: call @strlen with return %0002eec9

0002eec9:
0002eecd: R19 := pad:64[31:0[R0]]
0002eed3: when 31:0[R0] = 0 goto %0002eed1
00035ad3: goto %0002eee3

0002eee3:
0002eee7: R0 := pad:64[31:0[R0] + 3]
0002eeed: R24 := extend:64[31:0[R0]]
0002eef3: R0 := R24
0002eef8: R30 := 0x403D58
0002eefa: call @zmalloc with return %0002eefc

0002eefc:
0002ef01: R5 := mem[R31 + 0xA0, el]:u64
0002ef07: R3 := R24
0002ef0d: R1 := R24
0002ef13: R4 := R27
0002ef19: R24 := R0
0002ef1e: R2 := 2
0002ef23: R30 := 0x403D74
0002ef25: call @__snprintf_chk with return %0002ef27

0002ef27:
0002ef2c: R0 := mem[R26, el]:u64
0002ef32: R2 := R24
0002ef37: R1 := 0
0002ef3c: R30 := 0x403D84
0002ef3e: call @plist_add with return %0002ef40

0002ef40:
0002ef46: mem := mem with [R26, el]:u64 <- R0
0002ef4d: R24 := mem[R31 + 0xA0, el]:u64
0002ef51: goto %0002eed1

0002eed1:
0002eeda: R0 := R24
0002eedf: R30 := 0x403D08
0002eee1: call @free with return %0002dc8d

0002eff5:
0002effa: R0 := pad:64[mem[R1]]
0002f000: when 31:0[R0] = 0 goto %0002effe
00035ad4: goto %0002f010

0002f010:
0002f015: R0 := mem[R24, el]:u64
0002f01a: R30 := 0x403C5C
0002f01c: call @noproxy_add with return %0002f01e

0002f01e:
0002f024: mem := mem with [R24, el]:u64 <- R0
0002f02b: R1 := mem[R31 + 0xA0, el]:u64
0002f02f: goto %0002effe

0002effe:
0002f007: R0 := R1
0002f00c: R30 := 0x403C34
0002f00e: call @free with return %0002dbe9

0002ec43:
0002ec4b: R1 := 0
0002ec50: R30 := 0x403964
0002ec52: call @parent_add with return %0002ec54

0002ec54:
0002ec59: R0 := mem[R31 + 0xA0, el]:u64
0002ec5e: R30 := 0x40396C
0002ec60: call @free with return %0002ec23

0002ec70:
0002ec73: R30 := 0x4032F8
0002ec75: call @is_http_header with return %0002ec77

0002ec77:
0002ec7b: when 31:0[R0] <> 0 goto %0002ec79
00035ad5: goto %0002ed0c

0002ed0c:
0002ed11: R3 := mem[R31 + 0xA0, el]:u64
0002ed17: R2 := R26
0002ed1c: R1 := 2
0002ed21: R0 := 3
0002ed26: R30 := 0x403310
0002ed28: call @__syslog_chk with return %0002ed2a

0002ed2a:
0002ed2c: goto %0002ecfe

0002ec79:
0002ec83: R0 := mem[R31 + 0xA0, el]:u64
0002ec88: R30 := 0x4032BC
0002ec8a: call @get_http_header_name with return %0002ec8c

0002ec8c:
0002ec90: R20 := R0
0002ec96: R1 := R0
0002ec9d: R0 := mem[R25, el]:u64
0002eca2: R30 := 0x4032CC
0002eca4: call @hlist_in with return %0002eca6

0002eca6:
0002ecaa: when 31:0[R0] = 0 goto %0002eca8
00035ad6: goto %0002ecee

0002eca8:
0002ecb2: R0 := mem[R31 + 0xA0, el]:u64
0002ecb9: R27 := mem[R25, el]:u64
0002ecbe: R30 := 0x403624
0002ecc0: call @get_http_header_value with return %0002ecc2

0002ecc2:
0002ecc6: R2 := R0
0002eccc: R1 := R20
0002ecd2: R0 := R27
0002ecd7: R4 := 0
0002ecdc: R3 := 1
0002ece1: R30 := 0x40363C
0002ece3: call @hlist_add with return %0002ece5

0002ece5:
0002eceb: mem := mem with [R25, el]:u64 <- R0
0002ecf0: goto %0002ecee

0002ecee:
0002ecf5: R0 := R20
0002ecfa: R30 := 0x4032D8
0002ecfc: call @free with return %0002ecfe

0002ecfe:
0002ed03: R0 := mem[R31 + 0xA0, el]:u64
0002ed08: R30 := 0x4032E0
0002ed0a: call @free with return %0002ebf7

0002eba8:
0002ebb1: R0 := R24
0002ebb7: R3 := pad:64[31:0[R25]]
0002ebbd: R1 := R26
0002ebc2: R30 := 0x403278
0002ebc4: call @listen_add with return %0002ebc6

0002ebc6:
0002ebcb: R0 := mem[R31 + 0xA0, el]:u64
0002ebd0: R30 := 0x403280
0002ebd2: call @free with return %0002eb82

0002eb39:
0002eb42: R0 := R26
0002eb48: R3 := pad:64[31:0[R25]]
0002eb4e: R1 := R24
0002eb53: R30 := 0x403230
0002eb55: call @listen_add with return %0002eb57

0002eb57:
0002eb5c: R0 := mem[R31 + 0xA0, el]:u64
0002eb61: R30 := 0x403238
0002eb63: call @free with return %0002eb13

0002ead0:
0002ead9: R0 := R21
0002eadf: R2 := pad:64[31:0[R25]]
0002eae4: R30 := 0x4031E8
0002eae6: call @tunnel_add with return %0002eae8

0002eae8:
0002eaed: R0 := mem[R31 + 0xA0, el]:u64
0002eaf2: R30 := 0x4031F0
0002eaf4: call @free with return %0002eaaa

00035ad7: sub malloc(malloc_size, malloc_result)
00035eb7: malloc_size :: in u64 = R0
00035eb8: malloc_result :: out u64 = R0

000110c3:
00030b79: R16 := 0x42F000
00030b80: R17 := mem[R16 + 0xC88, el]:u64
00030b86: R16 := R16 + 0xC88
00030b8b: call R17 with noreturn

00035ad8: sub md4_buffer(md4_buffer_result)
00035eb9: md4_buffer_result :: out u32 = low:32[R0]

00014147:
0001414b: R31 := R31 - 0xE0
00014150: R3 := 0x42F000
00014157: R3 := mem[R3 + 0xFB8, el]:u64
0001415d: #165 := R31 + 0xB0
00014163: mem := mem with [#165, el]:u64 <- R29
00014169: mem := mem with [#165 + 8, el]:u64 <- R30
0001416f: R29 := R31 + 0xB0
00014175: #166 := R31 + 0xC0
0001417b: mem := mem with [#166, el]:u64 <- R19
00014181: mem := mem with [#166 + 8, el]:u64 <- R20
00014187: R19 := R31 + 8
0001418d: R20 := R2
00014193: #167 := R31 + 0xD0
00014199: mem := mem with [#167, el]:u64 <- R21
0001419f: mem := mem with [#167 + 8, el]:u64 <- R22
000141a5: R21 := R0
000141ab: R22 := R1
000141b2: R0 := mem[R3, el]:u64
000141ba: mem := mem with [R31 + 0xA8, el]:u64 <- R0
000141bf: R0 := 0
000141c5: R0 := R19
000141ca: R30 := 0x412254
000141cc: call @md4_init_ctx with return %000141ce

000141ce:
000141d2: R2 := R19
000141d8: R1 := R22
000141de: R0 := R21
000141e3: R30 := 0x412264
000141e5: call @md4_process_bytes with return %000141e7

000141e7:
000141eb: R1 := R20
000141f1: R0 := R19
000141f6: R30 := 0x412270
000141f8: call @md4_finish_ctx with return %000141fa

000141fa:
000141fd: R1 := 0x42F000
00014204: R1 := mem[R1 + 0xFB8, el]:u64
0001420b: R3 := mem[R31 + 0xA8, el]:u64
00014212: R2 := mem[R1, el]:u64
00014218: #168 := ~R2
0001421d: #169 := R3 + ~R2
00014223: VF := extend:128[#169 + 1] <> extend:128[R3] + extend:128[#168] + 1
00014229: CF := pad:128[#169 + 1] <> pad:128[R3] + pad:128[#168] + 1
0001422d: ZF := #169 + 1 = 0
00014231: NF := 63:63[#169 + 1]
00014235: R3 := #169 + 1
0001423a: R2 := 0
00014240: when ZF <> 1 goto %0001423e
00035ad9: goto %000165ef

0001423e:
00014246: R30 := 0x4122B8
00014248: call @__stack_chk_fail with return %0001424a

0001424a:
00035ada: call @memxor with noreturn

000165ef:
000165f3: #270 := R31 + 0xB0
000165f8: R29 := mem[#270, el]:u64
000165fd: R30 := mem[#270 + 8, el]:u64
00016603: #271 := R31 + 0xC0
00016608: R19 := mem[#271, el]:u64
0001660d: R20 := mem[#271 + 8, el]:u64
00016613: #272 := R31 + 0xD0
00016618: R21 := mem[#272, el]:u64
0001661d: R22 := mem[#272 + 8, el]:u64
00016623: R31 := R31 + 0xE0
00016628: R1 := 0
0001662d: R2 := 0
00016632: R3 := 0
00016637: R16 := 0
0001663c: R17 := 0
00016641: call R30 with noreturn

00035adb: sub md4_finish_ctx(md4_finish_ctx_result)
00035eba: md4_finish_ctx_result :: out u32 = low:32[R0]

00013afd:
00013b01: #134 := R31 - 0x40
00013b07: mem := mem with [#134, el]:u64 <- R29
00013b0d: mem := mem with [#134 + 8, el]:u64 <- R30
00013b11: R31 := #134
00013b17: R29 := R31
00013b1d: #135 := R31 + 0x10
00013b23: mem := mem with [#135, el]:u64 <- R19
00013b29: mem := mem with [#135 + 8, el]:u64 <- R20
00013b2f: R19 := R0
00013b36: R2 := pad:64[mem[R0 + 0x10, el]:u32]
00013b3d: R0 := pad:64[mem[R0 + 0x18, el]:u32]
00013b43: #136 := R31 + 0x20
00013b49: mem := mem with [#136, el]:u64 <- R21
00013b4f: mem := mem with [#136 + 8, el]:u64 <- R22
00013b55: R22 := R1
00013b5c: #137 := 31:0[R2] + 31:0[R0]
00013b61: #138 := pad:64[31:0[R2] + 31:0[R0]]
00013b67: VF := extend:64[#137] <> extend:64[31:0[R2]] + extend:64[31:0[R0]]
00013b6d: CF := #138 <> pad:64[31:0[R2]] + pad:64[31:0[R0]]
00013b71: ZF := #137 = 0
00013b75: NF := 31:31[#137]
00013b79: R2 := #138
00013b81: mem := mem with [R31 + 0x30, el]:u64 <- R23
00013b89: mem := mem with [R19 + 0x10, el]:u32 <- 31:0[R2]
00013b8f: when CF <> 1 goto %00013b8d
00035adc: goto %000168c4

000168c4:
000168c9: R1 := pad:64[mem[R19 + 0x14, el]:u32]
000168cf: R1 := pad:64[31:0[R1] + 1]
000168d7: mem := mem with [R19 + 0x14, el]:u32 <- 31:0[R1]
00035add: goto %00013b8d

00013b8d:
00013b96: #139 := 31:0[R0] - 0x38
00013b9b: VF := extend:64[#139] <> extend:64[31:0[R0]] - 0x38
00013ba0: CF := pad:64[#139] <> pad:64[31:0[R0]] + 0xFFFFFFC8
00013ba4: ZF := #139 = 0
00013ba8: NF := 31:31[#139]
00013bad: R1 := 0x78
00013bb2: R21 := 0x38
00013bb9: R1 := pad:64[31:0[R1] + ~31:0[R0] + 1]
00013bc0: R21 := pad:64[31:0[R21] + ~31:0[R0] + 1]
00013bc6: R23 := R19 + 0x1C
00013bd4: when CF <> 1 goto %00013bcc
00013bd5: goto %00013bd0

00013bd0:
00013bd1: R21 := R1
00013bd7: goto %00013bd3

00013bcc:
00013bcd: R21 := R21
00013bd6: goto %00013bd3

00013bd3:
00013bdd: R20 := pad:64[31:0[R0]]
00013be2: R1 := 0x417000
00013be8: R1 := R1 + 0x8F0
00013bee: R2 := R21
00013bf5: R0 := R23 + R20
00013bfb: R1 := R1 + 0xA90
00013c02: R20 := R20 + R21
00013c07: R30 := 0x411E7C
00013c0a: call @memcpy with return %00013c0c

00013c0c:
00013c10: R3 := pad:64[32:2[R20].0]
00013c17: R5 := pad:64[mem[R19 + 0x10, el]:u32]
00013c1e: R3 := R19 + R3
00013c24: R0 := R23
00013c2a: R1 := R20 + 8
00013c30: R2 := R19
00013c36: R4 := pad:64[28:0[R5].0]
00013c3e: mem := mem with [R3 + 0x1C, el]:u32 <- 31:0[R4]
00013c45: R4 := pad:64[mem[R19 + 0x14, el]:u32]
00013c4c: R4 := pad:64[28:0[R4].31:29[R5]]
00013c54: mem := mem with [R3 + 0x20, el]:u32 <- 31:0[R4]
00013c59: R30 := 0x411EAC
00013c5b: call @md4_process_block with return %00013c5d

00013c5d:
00013c62: R23 := mem[R31 + 0x30, el]:u64
00013c68: R1 := R22
00013c6e: #140 := R31 + 0x20
00013c73: R21 := mem[#140, el]:u64
00013c78: R22 := mem[#140 + 8, el]:u64
00013c7e: R0 := R19
00013c84: #141 := R31 + 0x10
00013c89: R19 := mem[#141, el]:u64
00013c8e: R20 := mem[#141 + 8, el]:u64
00013c95: R29 := mem[R31, el]:u64
00013c9a: R30 := mem[R31 + 8, el]:u64
00013c9e: R31 := R31 + 0x40
00013ca2: call @md4_read_ctx with noreturn

00035ade: sub md4_init_ctx(md4_init_ctx_result)
00035ebb: md4_init_ctx_result :: out u32 = low:32[R0]

00013a75:
00013a78: R1 := 0x417000
00013a7f: mem := mem with [R0 + 0x10, el]:u64 <- 0
00013a86: mem := mem with [R0 + 0x18, el]:u32 <- 0
00013a8d: V0 := mem[R1 + 0x3D0, el]:u128
00013a95: mem := mem with [R0, el]:u128 <- V0
00013a9a: R0 := 0
00013a9f: R1 := 0
00013aa4: call R30 with noreturn

00035adf: sub md4_process_block(md4_process_block_result)
00035ebc: md4_process_block_result :: out u32 = low:32[R0]

000138ea:
000138ee: R31 := R31 - 0xD0
000138f3: R3 := 0x42F000
000138fa: R3 := mem[R3 + 0xFB8, el]:u64
00013900: #121 := R31 + 0x70
00013906: mem := mem with [#121, el]:u64 <- R29
0001390c: mem := mem with [#121 + 8, el]:u64 <- R30
00013912: R29 := R31 + 0x70
00013918: #122 := R31 + 0x80
0001391e: mem := mem with [#122, el]:u64 <- R19
00013924: mem := mem with [#122 + 8, el]:u64 <- R20
0001392a: R20 := R2
00013931: R2 := pad:64[mem[R2 + 0x10, el]:u32]
00013938: R4 := mem[R3, el]:u64
00013940: mem := mem with [R31 + 0x68, el]:u64 <- R4
00013945: R4 := 0
0001394b: R3 := 63:2[R1].0
00013952: R2 := pad:64[31:0[R2] + 31:0[R1]]
00013959: R3 := R0 + R3
00013961: mem := mem with [R20 + 0x10, el]:u32 <- 31:0[R2]
00013969: mem := mem with [R31 + 0x18, el]:u64 <- R3
00013970: R16 := pad:64[mem[R20, el]:u32]
00013975: R8 := pad:64[mem[R20 + 4, el]:u32]
0001397b: #123 := R20 + 8
00013980: R9 := pad:64[mem[#123, el]:u32]
00013985: R10 := pad:64[mem[#123 + 4, el]:u32]
0001398b: #124 := pad:64[31:0[R2]]
00013990: #125 := R1 + ~pad:64[31:0[R2]]
00013996: VF := extend:128[#125 + 1] <> extend:128[R1] + extend:128[~#124] +
          1
0001399c: CF := pad:128[#125 + 1] <> pad:128[R1] + pad:128[~#124] + 1
000139a0: ZF := #125 + 1 = 0
000139a4: NF := 63:63[#125 + 1]
000139ab: when ~(CF & ~ZF) goto %000139a9
00035ae0: goto %00017424

00017424:
00017429: R1 := pad:64[mem[R20 + 0x14, el]:u32]
0001742f: R1 := pad:64[31:0[R1] + 1]
00017437: mem := mem with [R20 + 0x14, el]:u32 <- 31:0[R1]
00035ae1: goto %000139a9

000139a9:
000139b3: R1 := mem[R31 + 0x18, el]:u64
000139b9: #126 := ~R1
000139be: #127 := R0 + ~R1
000139c4: VF := extend:128[#127 + 1] <> extend:128[R0] + extend:128[#126] + 1
000139ca: CF := pad:128[#127 + 1] <> pad:128[R0] + pad:128[#126] + 1
000139ce: ZF := #127 + 1 = 0
000139d2: NF := 63:63[#127 + 1]
000139d8: when CF goto %000139d6
00035ae2: goto %00016963

00016963:
00016966: R3 := 0x7999
0001696b: R2 := 0xEBA1
00016971: R14 := R31 + 0x28
00016977: R3 := pad:64[0x5A82.15:0[R3]]
0001697d: R2 := pad:64[0x6ED9.15:0[R2]]
00016983: #288 := R31 + 0x90
00016989: mem := mem with [#288, el]:u64 <- R21
0001698f: mem := mem with [#288 + 8, el]:u64 <- R22
00016995: #289 := R31 + 0xA0
0001699b: mem := mem with [#289, el]:u64 <- R23
000169a1: mem := mem with [#289 + 8, el]:u64 <- R24
000169a7: #290 := R31 + 0xB0
000169ad: mem := mem with [#290, el]:u64 <- R25
000169b3: mem := mem with [#290 + 8, el]:u64 <- R26
000169b9: #291 := R31 + 0xC0
000169bf: mem := mem with [#291, el]:u64 <- R27
000169c5: mem := mem with [#291 + 8, el]:u64 <- R28
00035ae3: goto %000169c7

000169c7:
000169cc: R1 := pad:64[31:0[R9] ^ 31:0[R10]]
000169d3: V0 := mem[R0, el]:u128
000169d8: V1 := mem[R0 + 0x10, el]:u128
000169df: R1 := pad:64[31:0[R1] & 31:0[R8]]
000169e6: R1 := pad:64[31:0[R1] ^ 31:0[R10]]
000169ed: R5 := pad:64[31:0[R8] ^ 31:0[R9]]
000169f5: mem := mem with [R14, el]:u128 <- V0
000169fb: mem := mem with [R14 + 0x10, el]:u128 <- V1
00016a02: R19 := pad:64[mem[R31 + 0x40, el]:u32]
00016a08: #292 := R31 + 0x28
00016a0d: R12 := pad:64[mem[#292, el]:u32]
00016a12: R17 := pad:64[mem[#292 + 4, el]:u32]
00016a18: #293 := R31 + 0x30
00016a1d: R22 := pad:64[mem[#293, el]:u32]
00016a22: R11 := pad:64[mem[#293 + 4, el]:u32]
00016a29: R1 := pad:64[31:0[R1] + 31:0[R12]]
00016a30: R1 := pad:64[31:0[R1] + 31:0[R16]]
00016a37: R6 := pad:64[31:0[R17] + 31:0[R10]]
00016a3e: R15 := pad:64[31:0[R22] + 31:0[R9]]
00016a45: R7 := pad:64[31:0[R11] + 31:0[R8]]
00016a4c: R1 := pad:64[28:0[R1].31:29[R1]]
00016a53: R5 := pad:64[31:0[R5] & 31:0[R1]]
00016a5a: R4 := pad:64[31:0[R1] ^ 31:0[R8]]
00016a61: R5 := pad:64[31:0[R5] ^ 31:0[R9]]
00016a68: R26 := pad:64[31:0[R12] + 31:0[R3]]
00016a6f: R5 := pad:64[31:0[R5] + 31:0[R6]]
00016a76: R12 := pad:64[31:0[R12] + 31:0[R2]]
00016a7c: #294 := R31 + 0x38
00016a81: R25 := pad:64[mem[#294, el]:u32]
00016a86: R13 := pad:64[mem[#294 + 4, el]:u32]
00016a8d: R5 := pad:64[24:0[R5].31:25[R5]]
00016a94: R4 := pad:64[31:0[R4] & 31:0[R5]]
00016a9b: R6 := pad:64[31:0[R1] ^ 31:0[R5]]
00016aa2: R4 := pad:64[31:0[R4] ^ 31:0[R8]]
00016aaa: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R12]
00016ab1: R4 := pad:64[31:0[R4] + 31:0[R15]]
00016ab8: R21 := pad:64[31:0[R25] + 31:0[R1]]
00016abf: R15 := pad:64[31:0[R13] + 31:0[R5]]
00016ac6: R4 := pad:64[20:0[R4].31:21[R4]]
00016acd: R6 := pad:64[31:0[R6] & 31:0[R4]]
00016ad4: R12 := pad:64[31:0[R5] ^ 31:0[R4]]
00016adb: R6 := pad:64[31:0[R6] ^ 31:0[R1]]
00016ae2: R23 := pad:64[31:0[R19] + 31:0[R4]]
00016ae9: R6 := pad:64[31:0[R6] + 31:0[R7]]
00016af0: R7 := pad:64[mem[R31 + 0x44, el]:u32]
00016af6: #295 := R0 + 0x20
00016afb: V0 := mem[#295, el]:u128
00016b00: V1 := mem[#295 + 0x10, el]:u128
00016b07: R6 := pad:64[12:0[R6].31:13[R6]]
00016b0e: R12 := pad:64[31:0[R12] & 31:0[R6]]
00016b15: R1 := pad:64[31:0[R4] ^ 31:0[R6]]
00016b1c: R12 := pad:64[31:0[R12] ^ 31:0[R5]]
00016b23: R18 := pad:64[31:0[R7] + 31:0[R6]]
00016b2a: R12 := pad:64[31:0[R12] + 31:0[R21]]
00016b30: #296 := R14 + 0x20
00016b36: mem := mem with [#296, el]:u128 <- V0
00016b3c: mem := mem with [#296 + 0x10, el]:u128 <- V1
00016b43: R24 := pad:64[mem[R31 + 0x48, el]:u32]
00016b49: R0 := R0 + 0x40
00016b50: R12 := pad:64[28:0[R12].31:29[R12]]
00016b57: R5 := pad:64[31:0[R1] & 31:0[R12]]
00016b5e: R1 := pad:64[31:0[R6] ^ 31:0[R12]]
00016b65: R4 := pad:64[31:0[R5] ^ 31:0[R4]]
00016b6c: R27 := pad:64[31:0[R24] + 31:0[R12]]
00016b73: R4 := pad:64[31:0[R4] + 31:0[R15]]
00016b79: #297 := R31 + 0x4C
00016b7e: R15 := pad:64[mem[#297, el]:u32]
00016b83: R21 := pad:64[mem[#297 + 4, el]:u32]
00016b8a: R4 := pad:64[24:0[R4].31:25[R4]]
00016b91: R1 := pad:64[31:0[R1] & 31:0[R4]]
00016b98: R5 := pad:64[31:0[R12] ^ 31:0[R4]]
00016b9f: R1 := pad:64[31:0[R1] ^ 31:0[R6]]
00016ba6: R30 := pad:64[31:0[R15] + 31:0[R4]]
00016bad: R1 := pad:64[31:0[R1] + 31:0[R23]]
00016bb4: R1 := pad:64[20:0[R1].31:21[R1]]
00016bbb: R5 := pad:64[31:0[R5] & 31:0[R1]]
00016bc2: R6 := pad:64[31:0[R4] ^ 31:0[R1]]
00016bc9: R5 := pad:64[31:0[R5] ^ 31:0[R12]]
00016bd0: R28 := pad:64[31:0[R21] + 31:0[R1]]
00016bd7: R5 := pad:64[31:0[R5] + 31:0[R18]]
00016bde: R18 := pad:64[mem[R31 + 0x60, el]:u32]
00016be4: #298 := R31 + 0x58
00016be9: R23 := pad:64[mem[#298, el]:u32]
00016bee: R12 := pad:64[mem[#298 + 4, el]:u32]
00016bf5: R5 := pad:64[12:0[R5].31:13[R5]]
00016bfc: R6 := pad:64[31:0[R6] & 31:0[R5]]
00016c03: R4 := pad:64[31:0[R6] ^ 31:0[R4]]
00016c0a: R6 := pad:64[31:0[R1] ^ 31:0[R5]]
00016c11: R4 := pad:64[31:0[R4] + 31:0[R27]]
00016c18: R27 := pad:64[mem[R31 + 0x54, el]:u32]
00016c1f: R27 := pad:64[31:0[R27] + 31:0[R5]]
00016c26: R4 := pad:64[28:0[R4].31:29[R4]]
00016c2d: R6 := pad:64[31:0[R6] & 31:0[R4]]
00016c34: R1 := pad:64[31:0[R6] ^ 31:0[R1]]
00016c3b: R6 := pad:64[31:0[R5] ^ 31:0[R4]]
00016c42: R1 := pad:64[31:0[R1] + 31:0[R30]]
00016c49: R30 := pad:64[31:0[R23] + 31:0[R4]]
00016c50: R1 := pad:64[24:0[R1].31:25[R1]]
00016c57: R6 := pad:64[31:0[R6] & 31:0[R1]]
00016c5e: R6 := pad:64[31:0[R6] ^ 31:0[R5]]
00016c65: R5 := pad:64[31:0[R4] ^ 31:0[R1]]
00016c6c: R6 := pad:64[31:0[R6] + 31:0[R28]]
00016c73: R28 := pad:64[31:0[R12] + 31:0[R1]]
00016c7a: R6 := pad:64[20:0[R6].31:21[R6]]
00016c81: R5 := pad:64[31:0[R5] & 31:0[R6]]
00016c88: R5 := pad:64[31:0[R5] ^ 31:0[R4]]
00016c8f: R4 := pad:64[31:0[R1] ^ 31:0[R6]]
00016c96: R5 := pad:64[31:0[R5] + 31:0[R27]]
00016c9d: R27 := pad:64[31:0[R18] + 31:0[R6]]
00016ca4: R5 := pad:64[12:0[R5].31:13[R5]]
00016cab: R4 := pad:64[31:0[R4] & 31:0[R5]]
00016cb2: R4 := pad:64[31:0[R4] ^ 31:0[R1]]
00016cb9: R1 := pad:64[31:0[R6] ^ 31:0[R5]]
00016cc0: R4 := pad:64[31:0[R4] + 31:0[R30]]
00016cc7: R30 := pad:64[mem[R31 + 0x64, el]:u32]
00016cce: R4 := pad:64[28:0[R4].31:29[R4]]
00016cd5: R1 := pad:64[31:0[R1] & 31:0[R4]]
00016cdc: R1 := pad:64[31:0[R1] ^ 31:0[R6]]
00016ce3: R6 := pad:64[31:0[R5] ^ 31:0[R4]]
00016cea: R1 := pad:64[31:0[R1] + 31:0[R28]]
00016cf1: R28 := pad:64[31:0[R30] + 31:0[R5]]
00016cf8: R1 := pad:64[24:0[R1].31:25[R1]]
00016cff: R6 := pad:64[31:0[R6] & 31:0[R1]]
00016d06: R6 := pad:64[31:0[R6] ^ 31:0[R5]]
00016d0d: R5 := pad:64[31:0[R4] ^ 31:0[R1]]
00016d14: R27 := pad:64[31:0[R6] + 31:0[R27]]
00016d1b: R6 := pad:64[31:0[R25] + 31:0[R3]]
00016d22: R25 := pad:64[31:0[R25] + 31:0[R2]]
00016d2a: mem := mem with [R31 + 0x10, el]:u32 <- 31:0[R25]
00016d31: R25 := pad:64[20:0[R27].31:21[R27]]
00016d38: R27 := pad:64[31:0[R5] & 31:0[R25]]
00016d3f: R5 := pad:64[31:0[R1] | 31:0[R25]]
00016d46: R27 := pad:64[31:0[R27] ^ 31:0[R4]]
00016d4d: R27 := pad:64[31:0[R27] + 31:0[R28]]
00016d54: R28 := pad:64[31:0[R1] & 31:0[R25]]
00016d5b: R27 := pad:64[12:0[R27].31:13[R27]]
00016d62: R5 := pad:64[31:0[R5] & 31:0[R27]]
00016d69: R5 := pad:64[31:0[R5] | 31:0[R28]]
00016d70: R28 := pad:64[31:0[R25] & 31:0[R27]]
00016d77: R5 := pad:64[31:0[R5] + 31:0[R4]]
00016d7e: R4 := pad:64[31:0[R25] | 31:0[R27]]
00016d85: R5 := pad:64[31:0[R5] + 31:0[R26]]
00016d8c: R5 := pad:64[28:0[R5].31:29[R5]]
00016d93: R26 := pad:64[31:0[R4] & 31:0[R5]]
00016d9a: R4 := pad:64[31:0[R27] | 31:0[R5]]
00016da1: R26 := pad:64[31:0[R26] | 31:0[R28]]
00016da8: R28 := pad:64[31:0[R24] + 31:0[R2]]
00016daf: R1 := pad:64[31:0[R26] + 31:0[R1]]
00016db6: R26 := pad:64[31:0[R27] & 31:0[R5]]
00016dbd: R1 := pad:64[31:0[R1] + 31:0[R6]]
00016dc4: R6 := pad:64[31:0[R24] + 31:0[R3]]
00016dcb: R1 := pad:64[26:0[R1].31:27[R1]]
00016dd2: R4 := pad:64[31:0[R4] & 31:0[R1]]
00016dd9: R24 := pad:64[31:0[R5] | 31:0[R1]]
00016de0: R4 := pad:64[31:0[R4] | 31:0[R26]]
00016de7: R26 := pad:64[mem[R31 + 0x54, el]:u32]
00016dee: R4 := pad:64[31:0[R4] + 31:0[R25]]
00016df5: R25 := pad:64[31:0[R5] & 31:0[R1]]
00016dfc: R4 := pad:64[31:0[R4] + 31:0[R6]]
00016e03: R6 := pad:64[31:0[R23] + 31:0[R3]]
00016e0a: R23 := pad:64[31:0[R23] + 31:0[R2]]
00016e12: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R23]
00016e19: R4 := pad:64[22:0[R4].31:23[R4]]
00016e20: R24 := pad:64[31:0[R24] & 31:0[R4]]
00016e27: R23 := pad:64[31:0[R1] | 31:0[R4]]
00016e2e: R25 := pad:64[31:0[R24] | 31:0[R25]]
00016e35: R24 := pad:64[31:0[R1] & 31:0[R4]]
00016e3c: R25 := pad:64[31:0[R25] + 31:0[R27]]
00016e43: R27 := pad:64[31:0[R30] + 31:0[R2]]
00016e4a: R6 := pad:64[31:0[R25] + 31:0[R6]]
00016e51: R25 := pad:64[31:0[R17] + 31:0[R3]]
00016e58: R17 := pad:64[31:0[R17] + 31:0[R2]]
00016e5f: R6 := pad:64[18:0[R6].31:19[R6]]
00016e66: R23 := pad:64[31:0[R23] & 31:0[R6]]
00016e6d: R23 := pad:64[31:0[R23] | 31:0[R24]]
00016e74: R24 := pad:64[31:0[R4] | 31:0[R6]]
00016e7b: R5 := pad:64[31:0[R23] + 31:0[R5]]
00016e82: R23 := pad:64[31:0[R4] & 31:0[R6]]
00016e89: R5 := pad:64[31:0[R5] + 31:0[R25]]
00016e90: R25 := pad:64[31:0[R13] + 31:0[R3]]
00016e97: R13 := pad:64[31:0[R13] + 31:0[R2]]
00016e9e: R5 := pad:64[28:0[R5].31:29[R5]]
00016ea5: R24 := pad:64[31:0[R24] & 31:0[R5]]
00016eac: R24 := pad:64[31:0[R24] | 31:0[R23]]
00016eb3: R23 := pad:64[31:0[R6] | 31:0[R5]]
00016eba: R1 := pad:64[31:0[R24] + 31:0[R1]]
00016ec1: R24 := pad:64[31:0[R6] & 31:0[R5]]
00016ec8: R1 := pad:64[31:0[R1] + 31:0[R25]]
00016ecf: R25 := pad:64[31:0[R15] + 31:0[R3]]
00016ed6: R15 := pad:64[31:0[R15] + 31:0[R2]]
00016edd: R1 := pad:64[26:0[R1].31:27[R1]]
00016ee4: R23 := pad:64[31:0[R23] & 31:0[R1]]
00016eeb: R23 := pad:64[31:0[R23] | 31:0[R24]]
00016ef2: R24 := pad:64[31:0[R5] | 31:0[R1]]
00016ef9: R4 := pad:64[31:0[R23] + 31:0[R4]]
00016f00: R23 := pad:64[31:0[R5] & 31:0[R1]]
00016f07: R4 := pad:64[31:0[R4] + 31:0[R25]]
00016f0e: R25 := pad:64[31:0[R12] + 31:0[R3]]
00016f15: R12 := pad:64[31:0[R12] + 31:0[R2]]
00016f1c: R4 := pad:64[22:0[R4].31:23[R4]]
00016f23: R24 := pad:64[31:0[R24] & 31:0[R4]]
00016f2a: R24 := pad:64[31:0[R24] | 31:0[R23]]
00016f31: R23 := pad:64[31:0[R1] | 31:0[R4]]
00016f38: R6 := pad:64[31:0[R24] + 31:0[R6]]
00016f3f: R24 := pad:64[31:0[R1] & 31:0[R4]]
00016f46: R6 := pad:64[31:0[R6] + 31:0[R25]]
00016f4d: R25 := pad:64[31:0[R22] + 31:0[R3]]
00016f54: R22 := pad:64[31:0[R22] + 31:0[R2]]
00016f5b: R6 := pad:64[18:0[R6].31:19[R6]]
00016f62: R23 := pad:64[31:0[R23] & 31:0[R6]]
00016f69: R23 := pad:64[31:0[R23] | 31:0[R24]]
00016f70: R24 := pad:64[31:0[R4] | 31:0[R6]]
00016f77: R5 := pad:64[31:0[R23] + 31:0[R5]]
00016f7e: R23 := pad:64[31:0[R4] & 31:0[R6]]
00016f85: R5 := pad:64[31:0[R5] + 31:0[R25]]
00016f8c: R25 := pad:64[31:0[R19] + 31:0[R3]]
00016f93: R19 := pad:64[31:0[R19] + 31:0[R2]]
00016f9a: R5 := pad:64[28:0[R5].31:29[R5]]
00016fa1: R24 := pad:64[31:0[R24] & 31:0[R5]]
00016fa8: R24 := pad:64[31:0[R24] | 31:0[R23]]
00016faf: R23 := pad:64[31:0[R6] | 31:0[R5]]
00016fb6: R1 := pad:64[31:0[R24] + 31:0[R1]]
00016fbd: R24 := pad:64[31:0[R6] & 31:0[R5]]
00016fc4: R1 := pad:64[31:0[R1] + 31:0[R25]]
00016fcb: R25 := pad:64[31:0[R21] + 31:0[R3]]
00016fd2: R21 := pad:64[31:0[R21] + 31:0[R2]]
00016fd9: R1 := pad:64[26:0[R1].31:27[R1]]
00016fe0: R23 := pad:64[31:0[R23] & 31:0[R1]]
00016fe7: R23 := pad:64[31:0[R23] | 31:0[R24]]
00016fee: R24 := pad:64[31:0[R5] | 31:0[R1]]
00016ff5: R4 := pad:64[31:0[R23] + 31:0[R4]]
00016ffc: R23 := pad:64[31:0[R5] & 31:0[R1]]
00017003: R4 := pad:64[31:0[R4] + 31:0[R25]]
0001700a: R25 := pad:64[31:0[R18] + 31:0[R3]]
00017011: R18 := pad:64[31:0[R18] + 31:0[R2]]
00017018: R4 := pad:64[22:0[R4].31:23[R4]]
0001701f: R24 := pad:64[31:0[R24] & 31:0[R4]]
00017026: R24 := pad:64[31:0[R24] | 31:0[R23]]
0001702d: R23 := pad:64[31:0[R1] | 31:0[R4]]
00017034: R6 := pad:64[31:0[R24] + 31:0[R6]]
0001703b: R24 := pad:64[31:0[R1] & 31:0[R4]]
00017042: R6 := pad:64[31:0[R6] + 31:0[R25]]
00017049: R25 := pad:64[31:0[R11] + 31:0[R3]]
00017050: R11 := pad:64[31:0[R11] + 31:0[R2]]
00017057: R6 := pad:64[18:0[R6].31:19[R6]]
0001705e: R23 := pad:64[31:0[R23] & 31:0[R6]]
00017065: R23 := pad:64[31:0[R23] | 31:0[R24]]
0001706c: R24 := pad:64[31:0[R4] | 31:0[R6]]
00017073: R5 := pad:64[31:0[R23] + 31:0[R5]]
0001707a: R23 := pad:64[31:0[R4] & 31:0[R6]]
00017081: R5 := pad:64[31:0[R5] + 31:0[R25]]
00017088: R25 := pad:64[31:0[R7] + 31:0[R3]]
0001708f: R7 := pad:64[31:0[R7] + 31:0[R2]]
00017096: R5 := pad:64[28:0[R5].31:29[R5]]
0001709d: R24 := pad:64[31:0[R24] & 31:0[R5]]
000170a4: R24 := pad:64[31:0[R24] | 31:0[R23]]
000170ab: R23 := pad:64[31:0[R6] | 31:0[R5]]
000170b2: R1 := pad:64[31:0[R24] + 31:0[R1]]
000170b9: R24 := pad:64[31:0[R6] & 31:0[R5]]
000170c0: R1 := pad:64[31:0[R1] + 31:0[R25]]
000170c7: R25 := pad:64[31:0[R26] + 31:0[R3]]
000170ce: R26 := pad:64[31:0[R26] + 31:0[R2]]
000170d5: R1 := pad:64[26:0[R1].31:27[R1]]
000170dc: R23 := pad:64[31:0[R23] & 31:0[R1]]
000170e3: R23 := pad:64[31:0[R23] | 31:0[R24]]
000170ea: R24 := pad:64[31:0[R5] | 31:0[R1]]
000170f1: R4 := pad:64[31:0[R23] + 31:0[R4]]
000170f8: R23 := pad:64[31:0[R5] & 31:0[R1]]
000170ff: R4 := pad:64[31:0[R4] + 31:0[R25]]
00017106: R25 := pad:64[31:0[R30] + 31:0[R3]]
0001710d: R4 := pad:64[22:0[R4].31:23[R4]]
00017114: R24 := pad:64[31:0[R24] & 31:0[R4]]
0001711b: R24 := pad:64[31:0[R24] | 31:0[R23]]
00017122: R23 := pad:64[31:0[R1] ^ 31:0[R4]]
00017129: R24 := pad:64[31:0[R24] + 31:0[R6]]
00017130: R24 := pad:64[31:0[R24] + 31:0[R25]]
00017137: R24 := pad:64[18:0[R24].31:19[R24]]
0001713e: R23 := pad:64[31:0[R23] ^ 31:0[R24]]
00017145: R6 := pad:64[31:0[R4] ^ 31:0[R24]]
0001714c: R23 := pad:64[31:0[R23] + 31:0[R5]]
00017153: R5 := pad:64[mem[R31 + 0xC, el]:u32]
0001715a: R23 := pad:64[31:0[R23] + 31:0[R5]]
00017161: R23 := pad:64[28:0[R23].31:29[R23]]
00017168: R6 := pad:64[31:0[R6] ^ 31:0[R23]]
0001716f: R5 := pad:64[31:0[R24] ^ 31:0[R23]]
00017176: R6 := pad:64[31:0[R6] + 31:0[R1]]
0001717d: R1 := pad:64[31:0[R6] + 31:0[R28]]
00017184: R1 := pad:64[22:0[R1].31:23[R1]]
0001718b: R25 := pad:64[31:0[R5] ^ 31:0[R1]]
00017192: R6 := pad:64[31:0[R23] ^ 31:0[R1]]
00017199: R25 := pad:64[31:0[R25] + 31:0[R4]]
0001719f: #299 := R31 + 0x10
000171a4: R4 := pad:64[mem[#299, el]:u32]
000171a9: R5 := pad:64[mem[#299 + 4, el]:u32]
000171b0: R25 := pad:64[31:0[R25] + 31:0[R4]]
000171b7: R25 := pad:64[20:0[R25].31:21[R25]]
000171be: R4 := pad:64[31:0[R6] ^ 31:0[R25]]
000171c5: R6 := pad:64[31:0[R1] ^ 31:0[R25]]
000171cc: R4 := pad:64[31:0[R4] + 31:0[R24]]
000171d3: R4 := pad:64[31:0[R4] + 31:0[R5]]
000171da: R4 := pad:64[16:0[R4].31:17[R4]]
000171e1: R6 := pad:64[31:0[R6] ^ 31:0[R4]]
000171e8: R5 := pad:64[31:0[R25] ^ 31:0[R4]]
000171ef: R6 := pad:64[31:0[R6] + 31:0[R23]]
000171f6: R6 := pad:64[31:0[R6] + 31:0[R22]]
000171fd: R6 := pad:64[28:0[R6].31:29[R6]]
00017204: R5 := pad:64[31:0[R5] ^ 31:0[R6]]
0001720b: R22 := pad:64[31:0[R4] ^ 31:0[R6]]
00017212: R5 := pad:64[31:0[R5] + 31:0[R1]]
00017219: R5 := pad:64[31:0[R5] + 31:0[R21]]
00017220: R5 := pad:64[22:0[R5].31:23[R5]]
00017227: R1 := pad:64[31:0[R22] ^ 31:0[R5]]
0001722e: R21 := pad:64[31:0[R6] ^ 31:0[R5]]
00017235: R1 := pad:64[31:0[R1] + 31:0[R25]]
0001723c: R1 := pad:64[31:0[R1] + 31:0[R19]]
00017243: R1 := pad:64[20:0[R1].31:21[R1]]
0001724a: R21 := pad:64[31:0[R21] ^ 31:0[R1]]
00017251: R19 := pad:64[31:0[R5] ^ 31:0[R1]]
00017258: R4 := pad:64[31:0[R21] + 31:0[R4]]
0001725f: R4 := pad:64[31:0[R4] + 31:0[R18]]
00017266: R4 := pad:64[16:0[R4].31:17[R4]]
0001726d: R19 := pad:64[31:0[R19] ^ 31:0[R4]]
00017274: R18 := pad:64[31:0[R1] ^ 31:0[R4]]
0001727b: R6 := pad:64[31:0[R19] + 31:0[R6]]
00017282: R6 := pad:64[31:0[R6] + 31:0[R17]]
00017289: R6 := pad:64[28:0[R6].31:29[R6]]
00017290: R18 := pad:64[31:0[R18] ^ 31:0[R6]]
00017297: R17 := pad:64[31:0[R4] ^ 31:0[R6]]
0001729e: R5 := pad:64[31:0[R18] + 31:0[R5]]
000172a5: R15 := pad:64[31:0[R5] + 31:0[R15]]
000172ac: R15 := pad:64[22:0[R15].31:23[R15]]
000172b3: R17 := pad:64[31:0[R17] ^ 31:0[R15]]
000172ba: R5 := pad:64[31:0[R6] ^ 31:0[R15]]
000172c1: R1 := pad:64[31:0[R17] + 31:0[R1]]
000172c8: R13 := pad:64[31:0[R1] + 31:0[R13]]
000172cf: R13 := pad:64[20:0[R13].31:21[R13]]
000172d6: R5 := pad:64[31:0[R5] ^ 31:0[R13]]
000172dd: R1 := pad:64[31:0[R15] ^ 31:0[R13]]
000172e4: R4 := pad:64[31:0[R5] + 31:0[R4]]
000172eb: R4 := pad:64[31:0[R4] + 31:0[R12]]
000172f2: R4 := pad:64[16:0[R4].31:17[R4]]
000172f9: R1 := pad:64[31:0[R1] ^ 31:0[R4]]
00017300: R5 := pad:64[31:0[R13] ^ 31:0[R4]]
00017307: R1 := pad:64[31:0[R1] + 31:0[R6]]
0001730e: R1 := pad:64[31:0[R1] + 31:0[R11]]
00017315: R1 := pad:64[28:0[R1].31:29[R1]]
0001731c: R5 := pad:64[31:0[R5] ^ 31:0[R1]]
00017323: R6 := pad:64[31:0[R4] ^ 31:0[R1]]
0001732a: R5 := pad:64[31:0[R5] + 31:0[R15]]
00017331: R16 := pad:64[31:0[R16] + 31:0[R1]]
00017338: R5 := pad:64[31:0[R5] + 31:0[R26]]
00017340: mem := mem with [R20, el]:u32 <- 31:0[R16]
00017347: R5 := pad:64[22:0[R5].31:23[R5]]
0001734e: R6 := pad:64[31:0[R6] ^ 31:0[R5]]
00017355: R1 := pad:64[31:0[R1] ^ 31:0[R5]]
0001735c: R6 := pad:64[31:0[R6] + 31:0[R13]]
00017363: R10 := pad:64[31:0[R10] + 31:0[R5]]
0001736a: R5 := pad:64[31:0[R6] + 31:0[R7]]
00017371: R5 := pad:64[20:0[R5].31:21[R5]]
00017378: R1 := pad:64[31:0[R1] ^ 31:0[R5]]
0001737f: R9 := pad:64[31:0[R9] + 31:0[R5]]
00017386: R1 := pad:64[31:0[R1] + 31:0[R4]]
0001738c: #300 := R20 + 8
00017392: mem := mem with [#300, el]:u32 <- 31:0[R9]
00017398: mem := mem with [#300 + 4, el]:u32 <- 31:0[R10]
0001739f: R1 := pad:64[31:0[R1] + 31:0[R27]]
000173a6: R1 := pad:64[16:0[R1].31:17[R1]]
000173ad: R8 := pad:64[31:0[R8] + 31:0[R1]]
000173b5: mem := mem with [R20 + 4, el]:u32 <- 31:0[R8]
000173bc: R1 := mem[R31 + 0x18, el]:u64
000173c2: #301 := ~R1
000173c7: #302 := R0 + ~R1
000173cd: VF := extend:128[#302 + 1] <> extend:128[R0] + extend:128[#301] + 1
000173d3: CF := pad:128[#302 + 1] <> pad:128[R0] + pad:128[#301] + 1
000173d7: ZF := #302 + 1 = 0
000173db: NF := 63:63[#302 + 1]
000173e0: when CF <> 1 goto %000169c7
00035ae4: goto %000173e4

000173e4:
000173e8: #303 := R31 + 0x90
000173ed: R21 := mem[#303, el]:u64
000173f2: R22 := mem[#303 + 8, el]:u64
000173f8: #304 := R31 + 0xA0
000173fd: R23 := mem[#304, el]:u64
00017402: R24 := mem[#304 + 8, el]:u64
00017408: #305 := R31 + 0xB0
0001740d: R25 := mem[#305, el]:u64
00017412: R26 := mem[#305 + 8, el]:u64
00017418: #306 := R31 + 0xC0
0001741d: R27 := mem[#306, el]:u64
00017422: R28 := mem[#306 + 8, el]:u64
00035ae5: goto %000139d6

000139d6:
000139de: R0 := 0x42F000
000139e5: R0 := mem[R0 + 0xFB8, el]:u64
000139ec: R2 := mem[R31 + 0x68, el]:u64
000139f3: R1 := mem[R0, el]:u64
000139f9: #128 := ~R1
000139fe: #129 := R2 + ~R1
00013a04: VF := extend:128[#129 + 1] <> extend:128[R2] + extend:128[#128] + 1
00013a0a: CF := pad:128[#129 + 1] <> pad:128[R2] + pad:128[#128] + 1
00013a0e: ZF := #129 + 1 = 0
00013a12: NF := 63:63[#129 + 1]
00013a16: R2 := #129 + 1
00013a1b: R1 := 0
00013a21: when ZF <> 1 goto %00013a1f
00035ae6: goto %000168d9

00013a1f:
00013a28: #130 := R31 + 0x90
00013a2e: mem := mem with [#130, el]:u64 <- R21
00013a34: mem := mem with [#130 + 8, el]:u64 <- R22
00013a3a: #131 := R31 + 0xA0
00013a40: mem := mem with [#131, el]:u64 <- R23
00013a46: mem := mem with [#131 + 8, el]:u64 <- R24
00013a4c: #132 := R31 + 0xB0
00013a52: mem := mem with [#132, el]:u64 <- R25
00013a58: mem := mem with [#132 + 8, el]:u64 <- R26
00013a5e: #133 := R31 + 0xC0
00013a64: mem := mem with [#133, el]:u64 <- R27
00013a6a: mem := mem with [#133 + 8, el]:u64 <- R28
00013a6f: R30 := 0x411DAC
00013a71: call @__stack_chk_fail with return %00013a73

00013a73:
00035ae7: call @md4_init_ctx with noreturn

000168d9:
000168dd: #286 := R31 + 0x70
000168e2: R29 := mem[#286, el]:u64
000168e7: R30 := mem[#286 + 8, el]:u64
000168ed: #287 := R31 + 0x80
000168f2: R19 := mem[#287, el]:u64
000168f7: R20 := mem[#287 + 8, el]:u64
000168fd: R31 := R31 + 0xD0
00016902: R0 := 0
00016907: R1 := 0
0001690c: R2 := 0
00016911: R3 := 0
00016916: R4 := 0
0001691b: R5 := 0
00016920: R6 := 0
00016925: R7 := 0
0001692a: R8 := 0
0001692f: R9 := 0
00016934: R10 := 0
00016939: R11 := 0
0001693e: R12 := 0
00016943: R13 := 0
00016948: R14 := 0
0001694d: R15 := 0
00016952: R16 := 0
00016957: R17 := 0
0001695c: R18 := 0
00016961: call R30 with noreturn

00035ae8: sub md4_process_bytes(md4_process_bytes_result)
00035ebd: md4_process_bytes_result :: out u32 = low:32[R0]

00013ca8:
00013cac: #142 := R31 - 0x40
00013cb2: mem := mem with [#142, el]:u64 <- R29
00013cb8: mem := mem with [#142 + 8, el]:u64 <- R30
00013cbc: R31 := #142
00013cc2: R29 := R31
00013cc8: #143 := R31 + 0x10
00013cce: mem := mem with [#143, el]:u64 <- R19
00013cd4: mem := mem with [#143 + 8, el]:u64 <- R20
00013cda: R19 := R0
00013ce1: R0 := pad:64[mem[R2 + 0x18, el]:u32]
00013ce7: #144 := R31 + 0x20
00013ced: mem := mem with [#144, el]:u64 <- R21
00013cf3: mem := mem with [#144 + 8, el]:u64 <- R22
00013cf9: R21 := R2
00013cff: R22 := R1
00013d05: when 31:0[R0] <> 0 goto %00013d03
00035ae9: goto %00013e2b

00013d03:
00013d0c: #145 := R31 + 0x30
00013d12: mem := mem with [#145, el]:u64 <- R23
00013d18: mem := mem with [#145 + 8, el]:u64 <- R24
00013d1e: R23 := pad:64[31:0[R0]]
00013d23: R24 := 0x80
00013d2a: R24 := R24 + ~R23 + 1
00013d30: R20 := R2 + 0x1C
00013d36: #146 := ~R1
00013d3b: #147 := R24 + ~R1
00013d41: VF := extend:128[#147 + 1] <> extend:128[R24] + extend:128[#146] +
          1
00013d47: CF := pad:128[#147 + 1] <> pad:128[R24] + pad:128[#146] + 1
00013d4b: ZF := #147 + 1 = 0
00013d4f: NF := 63:63[#147 + 1]
00013d56: R0 := R20 + R23
00013d65: when ~(CF & ~ZF) goto %00013d5d
00013d66: goto %00013d61

00013d61:
00013d62: R24 := R1
00013d68: goto %00013d64

00013d5d:
00013d5e: R24 := R24
00013d67: goto %00013d64

00013d64:
00013d6e: R1 := R19
00013d74: R2 := R24
00013d79: R30 := 0x412018
00013d7b: call @memcpy with return %00013d7d

00013d7d:
00013d82: R1 := pad:64[mem[R21 + 0x18, el]:u32]
00013d89: R1 := pad:64[31:0[R1] + 31:0[R24]]
00013d91: mem := mem with [R21 + 0x18, el]:u32 <- 31:0[R1]
00013d97: #148 := 31:0[R1] - 0x40
00013d9c: VF := extend:64[#148] <> extend:64[31:0[R1]] - 0x40
00013da1: CF := pad:64[#148] <> pad:64[31:0[R1]] + 0xFFFFFFC0
00013da5: ZF := #148 = 0
00013da9: NF := 31:31[#148]
00013db0: when CF & ~ZF goto %00013dae
00035aea: goto %00013e09

00013dae:
00013db7: R2 := R21
00013dbd: R0 := R20
00013dc3: R1 := pad:64[31:6[R1].0]
00013dc8: R30 := 0x412098
00013dca: call @md4_process_block with return %00013dcc

00013dcc:
00013dd1: R2 := pad:64[mem[R21 + 0x18, el]:u32]
00013dd8: R0 := R23 + R24
00013dde: R1 := 63:6[R0].0
00013de4: R0 := R20
00013dea: R2 := pad:64[5:0[R2]]
00013df2: mem := mem with [R21 + 0x18, el]:u32 <- 31:0[R2]
00013df9: R1 := R20 + R1
00013dff: R2 := pad:64[5:0[R2]]
00013e04: R30 := 0x4120BC
00013e06: call @memcpy with return %00013e08

00013e08:
00013e0b: goto %00013e09

00013e09:
00013e11: R19 := R19 + R24
00013e18: R22 := R22 + ~R24 + 1
00013e1e: #149 := R31 + 0x30
00013e23: R23 := mem[#149, el]:u64
00013e28: R24 := mem[#149 + 8, el]:u64
00013e2d: goto %00013e2b

00013e2b:
00013e32: #150 := R22 - 0x3F
00013e37: VF := extend:128[#150] <> extend:128[R22] - 0x3F
00013e3c: CF := pad:128[#150] <> pad:128[R22] + 0xFFFFFFFFFFFFFFC1
00013e40: ZF := #150 = 0
00013e44: NF := 63:63[#150]
00013e4b: when ~(CF & ~ZF) goto %00013e49
00035aeb: goto %00016779

00016779:
0001677c: VF := 0
0001677f: CF := 0
00016783: ZF := pad:64[1:0[R19]] = 0
00016786: NF := 0
0001678b: when ZF goto %00013f60
00035aec: goto %0001678f

00013f60:
00013f64: R20 := 63:6[R22].0
00013f6a: R0 := R19
00013f70: R22 := pad:64[5:0[R22]]
00013f77: R19 := R19 + R20
00013f7d: R2 := R21
00013f83: R1 := R20
00013f88: R30 := 0x411FC4
00013f8a: call @md4_process_block with return %00013e49

00013e49:
00013e52: when R22 <> 0 goto %00013e50
00035aed: goto %0001672b

00013e50:
00013e59: R20 := R21 + 0x1C
00013e5f: #151 := R31 + 0x30
00013e65: mem := mem with [#151, el]:u64 <- R23
00013e6b: mem := mem with [#151 + 8, el]:u64 <- R24
00013e71: R23 := R19
00013e76: goto %00013e74

0001672b:
0001672f: #276 := R31 + 0x10
00016734: R19 := mem[#276, el]:u64
00016739: R20 := mem[#276 + 8, el]:u64
0001673f: #277 := R31 + 0x20
00016744: R21 := mem[#277, el]:u64
00016749: R22 := mem[#277 + 8, el]:u64
00016750: R29 := mem[R31, el]:u64
00016755: R30 := mem[R31 + 8, el]:u64
00016759: R31 := R31 + 0x40
0001675e: R0 := 0
00016763: R1 := 0
00016768: R2 := 0
0001676d: R16 := 0
00016772: R17 := 0
00016777: call R30 with noreturn

0001678f:
00016793: #278 := R22 - 0x40
00016798: VF := extend:128[#278] <> extend:128[R22] - 0x40
0001679d: CF := pad:128[#278] <> pad:128[R22] + 0xFFFFFFFFFFFFFFC0
000167a1: ZF := #278 = 0
000167a5: NF := 63:63[#278]
000167ab: when ZF goto %000167a9
00035aee: goto %00016804

000167a9:
000167b3: R22 := pad:64[mem[R21 + 0x18, el]:u32]
000167b9: R20 := R21 + 0x1C
000167c0: V0 := mem[R19, el]:u128
000167c5: V1 := mem[R19 + 0x10, el]:u128
000167cc: R0 := R20 + R22
000167d2: R22 := R22 + 0x40
000167da: mem := mem with [R0, el]:u128 <- V0
000167e0: mem := mem with [R0 + 0x10, el]:u128 <- V1
000167e6: #279 := R19 + 0x20
000167eb: V0 := mem[#279, el]:u128
000167f0: V1 := mem[#279 + 0x10, el]:u128
000167f6: #280 := R0 + 0x20
000167fc: mem := mem with [#280, el]:u128 <- V0
00016802: mem := mem with [#280 + 0x10, el]:u128 <- V1
00035aef: goto %00013eca

00016804:
00016808: #281 := R31 + 0x30
0001680e: mem := mem with [#281, el]:u64 <- R23
00016814: mem := mem with [#281 + 8, el]:u64 <- R24
0001681a: R24 := R22 - 0x41
00016820: R20 := R21 + 0x1C
00016826: R24 := pad:64[63:6[R24]]
0001682c: R23 := R24 + 1
00016833: R23 := R19 + (57:0[R23].0)
00035af0: goto %00016837

00016837:
0001683c: V0 := mem[R19, el]:u128
00016841: V1 := mem[R19 + 0x10, el]:u128
00016847: R2 := R21
0001684d: R0 := R20
00016852: R1 := 0x40
0001685a: mem := mem with [R20, el]:u128 <- V0
00016860: mem := mem with [R20 + 0x10, el]:u128 <- V1
00016866: #282 := R19 + 0x20
0001686b: V0 := mem[#282, el]:u128
00016870: V1 := mem[#282 + 0x10, el]:u128
00016876: R19 := R19 + 0x40
0001687c: #283 := R20 + 0x20
00016882: mem := mem with [#283, el]:u128 <- V0
00016888: mem := mem with [#283 + 0x10, el]:u128 <- V1
0001688d: R30 := 0x411F4C
0001688f: call @md4_process_block with return %00016891

00016891:
00016895: #284 := ~R23
0001689a: #285 := R19 + ~R23
000168a0: VF := extend:128[#285 + 1] <> extend:128[R19] + extend:128[#284] +
          1
000168a6: CF := pad:128[#285 + 1] <> pad:128[R19] + pad:128[#284] + 1
000168aa: ZF := #285 + 1 = 0
000168ae: NF := 63:63[#285 + 1]
000168b3: when ZF <> 1 goto %00016837
00035af1: goto %000168b7

000168b7:
000168bb: R22 := R22 - 0x40
000168c2: R22 := R22 + ~(57:0[R24].0) + 1
00035af2: goto %00013e74

00013e74:
00013e7c: R19 := pad:64[mem[R21 + 0x18, el]:u32]
00013e82: R1 := R23
00013e88: R2 := R22
00013e8f: R0 := R20 + R19
00013e96: R22 := R19 + R22
00013e9b: R30 := 0x411F74
00013e9d: call @memcpy with return %00013e9f

00013e9f:
00013ea3: #152 := R31 + 0x30
00013ea8: R23 := mem[#152, el]:u64
00013ead: R24 := mem[#152 + 8, el]:u64
00013eb3: #153 := R22 - 0x3F
00013eb8: VF := extend:128[#153] <> extend:128[R22] - 0x3F
00013ebd: CF := pad:128[#153] <> pad:128[R22] + 0xFFFFFFFFFFFFFFC1
00013ec1: ZF := #153 = 0
00013ec5: NF := 63:63[#153]
00013ecc: when CF & ~ZF goto %00013eca
00035af3: goto %00013f8c

00013eca:
00013ed3: R2 := R21
00013ed9: R0 := R20
00013edf: R22 := R22 - 0x40
00013ee4: R1 := 0x40
00013ee9: R30 := 0x412070
00013eeb: call @md4_process_block with return %00013eed

00013eed:
00013ef1: R0 := R20
00013ef7: R2 := R22
00013efd: R1 := R21 + 0x5C
00013f02: R30 := 0x412080
00013f04: call @memcpy with return %00013f06

00013f06:
00013f0c: mem := mem with [R21 + 0x18, el]:u32 <- 31:0[R22]
00013f11: goto %00013f0f

00013f8c:
00013f92: mem := mem with [R21 + 0x18, el]:u32 <- 31:0[R22]
00035af4: goto %00013f0f

00013f0f:
00013f16: #154 := R31 + 0x10
00013f1b: R19 := mem[#154, el]:u64
00013f20: R20 := mem[#154 + 8, el]:u64
00013f26: #155 := R31 + 0x20
00013f2b: R21 := mem[#155, el]:u64
00013f30: R22 := mem[#155 + 8, el]:u64
00013f37: R29 := mem[R31, el]:u64
00013f3c: R30 := mem[R31 + 8, el]:u64
00013f40: R31 := R31 + 0x40
00013f45: R0 := 0
00013f4a: R1 := 0
00013f4f: R2 := 0
00013f54: R16 := 0
00013f59: R17 := 0
00013f5e: call R30 with noreturn

00035af5: sub md4_read_ctx(md4_read_ctx_result)
00035ebe: md4_read_ctx_result :: out u32 = low:32[R0]

00013aa6:
00013aaa: R2 := R0
00013ab0: R0 := R1
00013ab7: R1 := pad:64[mem[R2, el]:u32]
00013abf: mem := mem with [R0, el]:u32 <- 31:0[R1]
00013ac6: R1 := pad:64[mem[R2 + 4, el]:u32]
00013ace: mem := mem with [R0 + 4, el]:u32 <- 31:0[R1]
00013ad5: R1 := pad:64[mem[R2 + 8, el]:u32]
00013add: mem := mem with [R0 + 8, el]:u32 <- 31:0[R1]
00013ae4: R1 := pad:64[mem[R2 + 0xC, el]:u32]
00013aec: mem := mem with [R0 + 0xC, el]:u32 <- 31:0[R1]
00013af1: R1 := 0
00013af6: R2 := 0
00013afb: call R30 with noreturn

00035af6: sub md4_stream(md4_stream_result)
00035ebf: md4_stream_result :: out u32 = low:32[R0]

00013f94:
00013f98: #156 := R31 - 0x50
00013f9e: mem := mem with [#156, el]:u64 <- R29
00013fa4: mem := mem with [#156 + 8, el]:u64 <- R30
00013fa8: R31 := #156
00013fad: R13 := 0x10F0
00013fb3: R29 := R31
00013fb8: R2 := 0x42F000
00013fbf: R2 := mem[R2 + 0xFB8, el]:u64
00013fc5: #157 := R31 + 0x10
00013fcb: mem := mem with [#157, el]:u64 <- R19
00013fd1: mem := mem with [#157 + 8, el]:u64 <- R20
00013fd7: R20 := R0
00013fdd: #158 := R31 + 0x20
00013fe3: mem := mem with [#158, el]:u64 <- R21
00013fe9: mem := mem with [#158 + 8, el]:u64 <- R22
00013fee: R21 := 0x1048
00013ff4: #159 := R31 + 0x30
00013ffa: mem := mem with [#159, el]:u64 <- R23
00014000: mem := mem with [#159 + 8, el]:u64 <- R24
00014005: R23 := 0x1000
0001400b: R24 := R1
00014013: mem := mem with [R31 + 0x40, el]:u64 <- R25
0001401a: R31 := R31 + ~R13 + 1
00014020: R22 := R31 + 0xA0
00014026: R25 := R31
0001402d: R0 := mem[R2, el]:u64
00014035: mem := mem with [R31 + 0x10E8, el]:u64 <- R0
0001403a: R0 := 0
00014040: R0 := R25
00014045: R30 := 0x412124
00014047: call @md4_init_ctx with return %00014049

00014049:
0001404c: R19 := 0
00014051: goto %0001404f

0001404f:
00014056: #160 := ~R21
0001405b: #161 := R19 + ~R21
00014061: VF := extend:128[#161 + 1] <> extend:128[R19] + extend:128[#160] +
          1
00014067: CF := pad:128[#161 + 1] <> pad:128[R19] + pad:128[#160] + 1
0001406b: ZF := #161 + 1 = 0
0001406f: NF := 63:63[#161 + 1]
00014076: R3 := R23 + ~R19 + 1
00014084: when CF goto %0001407c
00014085: goto %00014080

00014080:
00014081: R1 := R21
00014087: goto %00014083

0001407c:
0001407d: R1 := R19
00014086: goto %00014083

00014083:
0001408e: R0 := R22 + R19
00014095: R1 := R1 + ~R19 + 1
0001409b: R4 := R20
000140a0: R2 := 1
000140a5: R30 := 0x41215C
000140a8: call @__fread_chk with return %000140aa

000140aa:
000140af: R19 := R19 + R0
000140b5: #162 := R19 - 0x1000
000140ba: VF := extend:128[#162] <> extend:128[R19] - 0x1000
000140bf: CF := pad:128[#162] <> pad:128[R19] + 0xFFFFFFFFFFFFF000
000140c3: ZF := #162 = 0
000140c7: NF := 63:63[#162]
000140cd: when ZF <> 1 goto %000140cb
00035af7: goto %0001670e

0001670e:
00016712: R1 := R19
00016718: R2 := R25
0001671e: R0 := R22
00016723: R30 := 0x412178
00016725: call @md4_process_block with return %00016727

00016727:
00016729: goto %00014049

000140cb:
000140d4: when R0 = 0 goto %000140d2
00035af8: goto %000166fa

000140d2:
000140db: R0 := R20
000140e0: R30 := 0x412184
000140e3: call @ferror with return %000140e5

000140e5:
000140e9: R1 := pad:64[31:0[R0]]
000140ee: R0 := 1
000140f4: when 31:0[R1] <> 0 goto %000140f2
00035af9: goto %000166f3

000166fa:
000166fe: R0 := R20
00016703: R30 := 0x412138
00016705: call @feof with return %00016707

00016707:
0001670a: when 31:0[R0] <> 0 goto %000166f3
00035afa: goto %0001404f

000166f3:
000166f6: when R19 <> 0 goto %000166be
00035afb: goto %000166d8

000166be:
000166c2: R1 := R19
000166c8: R0 := R22
000166ce: R2 := R25
000166d3: R30 := 0x41220C
000166d5: call @md4_process_bytes with return %000166d7

000166d7:
000166da: goto %000166d8

000166d8:
000166df: R1 := R24
000166e5: R0 := R25
000166ea: R30 := 0x4121A0
000166ec: call @md4_finish_ctx with return %000166ee

000166ee:
000166f1: R0 := 0
00035afc: goto %000140f2

000140f2:
000140fa: R1 := 0x42F000
00014101: R1 := mem[R1 + 0xFB8, el]:u64
00014108: R3 := mem[R31 + 0x10E8, el]:u64
0001410f: R2 := mem[R1, el]:u64
00014115: #163 := ~R2
0001411a: #164 := R3 + ~R2
00014120: VF := extend:128[#164 + 1] <> extend:128[R3] + extend:128[#163] + 1
00014126: CF := pad:128[#164 + 1] <> pad:128[R3] + pad:128[#163] + 1
0001412a: ZF := #164 + 1 = 0
0001412e: NF := 63:63[#164 + 1]
00014132: R3 := #164 + 1
00014137: R2 := 0
0001413d: when ZF <> 1 goto %0001413b
00035afd: goto %00016643

0001413b:
00014143: R30 := 0x412214
00014145: call @__stack_chk_fail with return %00035afe

00035afe:
00035aff: call @md4_buffer with noreturn

00016643:
00016646: R13 := 0x10F0
0001664d: R31 := R31 + R13
00016653: #273 := R31 + 0x10
00016658: R19 := mem[#273, el]:u64
0001665d: R20 := mem[#273 + 8, el]:u64
00016663: #274 := R31 + 0x20
00016668: R21 := mem[#274, el]:u64
0001666d: R22 := mem[#274 + 8, el]:u64
00016673: #275 := R31 + 0x30
00016678: R23 := mem[#275, el]:u64
0001667d: R24 := mem[#275 + 8, el]:u64
00016684: R25 := mem[R31 + 0x40, el]:u64
0001668b: R29 := mem[R31, el]:u64
00016690: R30 := mem[R31 + 8, el]:u64
00016694: R31 := R31 + 0x50
00016699: R1 := 0
0001669e: R2 := 0
000166a3: R3 := 0
000166a8: R4 := 0
000166ad: R13 := 0
000166b2: R16 := 0
000166b7: R17 := 0
000166bc: call R30 with noreturn

00035b00: sub md5_buffer(md5_buffer_result)
00035ec0: md5_buffer_result :: out u32 = low:32[R0]

00014968:
0001496c: R31 := R31 - 0xE0
00014971: R3 := 0x42F000
00014978: R3 := mem[R3 + 0xFB8, el]:u64
0001497e: #204 := R31 + 0xB0
00014984: mem := mem with [#204, el]:u64 <- R29
0001498a: mem := mem with [#204 + 8, el]:u64 <- R30
00014990: R29 := R31 + 0xB0
00014996: #205 := R31 + 0xC0
0001499c: mem := mem with [#205, el]:u64 <- R19
000149a2: mem := mem with [#205 + 8, el]:u64 <- R20
000149a8: R19 := R31 + 8
000149ae: R20 := R2
000149b4: #206 := R31 + 0xD0
000149ba: mem := mem with [#206, el]:u64 <- R21
000149c0: mem := mem with [#206 + 8, el]:u64 <- R22
000149c6: R21 := R0
000149cc: R22 := R1
000149d3: R0 := mem[R3, el]:u64
000149db: mem := mem with [R31 + 0xA8, el]:u64 <- R0
000149e0: R0 := 0
000149e6: R0 := R19
000149eb: R30 := 0x413260
000149ed: call @md5_init_ctx with return %000149ef

000149ef:
000149f3: R2 := R19
000149f9: R1 := R22
000149ff: R0 := R21
00014a04: R30 := 0x413270
00014a06: call @md5_process_bytes with return %00014a08

00014a08:
00014a0c: R1 := R20
00014a12: R0 := R19
00014a17: R30 := 0x41327C
00014a19: call @md5_finish_ctx with return %00014a1b

00014a1b:
00014a1e: R1 := 0x42F000
00014a25: R1 := mem[R1 + 0xFB8, el]:u64
00014a2c: R3 := mem[R31 + 0xA8, el]:u64
00014a33: R2 := mem[R1, el]:u64
00014a39: #207 := ~R2
00014a3e: #208 := R3 + ~R2
00014a44: VF := extend:128[#208 + 1] <> extend:128[R3] + extend:128[#207] + 1
00014a4a: CF := pad:128[#208 + 1] <> pad:128[R3] + pad:128[#207] + 1
00014a4e: ZF := #208 + 1 = 0
00014a52: NF := 63:63[#208 + 1]
00014a56: R3 := #208 + 1
00014a5b: R2 := 0
00014a61: when ZF <> 1 goto %00014a5f
00035b01: goto %0001501f

00014a5f:
00014a67: R30 := 0x4132C4
00014a69: call @__stack_chk_fail with return %00035b02

00035b02:
00035b03: call @hmac_md5 with noreturn

0001501f:
00015023: #235 := R31 + 0xB0
00015028: R29 := mem[#235, el]:u64
0001502d: R30 := mem[#235 + 8, el]:u64
00015033: #236 := R31 + 0xC0
00015038: R19 := mem[#236, el]:u64
0001503d: R20 := mem[#236 + 8, el]:u64
00015043: #237 := R31 + 0xD0
00015048: R21 := mem[#237, el]:u64
0001504d: R22 := mem[#237 + 8, el]:u64
00015053: R31 := R31 + 0xE0
00015058: R1 := 0
0001505d: R2 := 0
00015062: R3 := 0
00015067: R16 := 0
0001506c: R17 := 0
00015071: call R30 with noreturn

00035b04: sub md5_finish_ctx(md5_finish_ctx_result)
00035ec1: md5_finish_ctx_result :: out u32 = low:32[R0]

00014600:
00014604: #187 := R31 - 0x30
0001460a: mem := mem with [#187, el]:u64 <- R29
00014610: mem := mem with [#187 + 8, el]:u64 <- R30
00014614: R31 := #187
0001461a: R29 := R31
00014620: #188 := R31 + 0x10
00014626: mem := mem with [#188, el]:u64 <- R19
0001462c: mem := mem with [#188 + 8, el]:u64 <- R20
00014632: #189 := R31 + 0x20
00014638: mem := mem with [#189, el]:u64 <- R21
0001463e: mem := mem with [#189 + 8, el]:u64 <- R22
00014644: when R0 = 0 goto %00014642
00035b05: goto %0001520c

0001520c:
00015210: R21 := R1
00015216: when R1 = 0 goto %00015214
00035b06: goto %0001524c

00015214:
0001521c: R3 := 0x417000
00015222: R3 := R3 + 0x8F0
00015227: R1 := 0x417000
0001522c: R0 := 0x417000
00015232: R3 := R3 + 0xAF8
00015238: R1 := R1 + 0x1C0
0001523e: R0 := R0 + 0x238
00015243: R2 := 0x3AA
00015248: R30 := 0x412FF8
0001524a: call @__assert_fail with return %00014642

00014642:
0001464a: R3 := 0x417000
00014650: R3 := R3 + 0x8F0
00014655: R1 := 0x417000
0001465a: R0 := 0x417000
00014660: R3 := R3 + 0xAF8
00014666: R1 := R1 + 0x1C0
0001466c: R0 := R0 + 0x228
00014671: R2 := 0x3A9
00014676: R30 := 0x41301C
00014678: call @__assert_fail with return %0001467a

0001467a:
00035b07: call @md5_process_bytes with noreturn

0001524c:
00015250: #248 := R0 + 0x10
00015255: R3 := pad:64[mem[#248, el]:u32]
0001525a: R6 := pad:64[mem[#248 + 4, el]:u32]
00015260: R19 := R0
00015267: R0 := pad:64[mem[R0 + 0x18, el]:u32]
0001526c: R1 := 0x40
00015271: R20 := 0x80
00015276: R2 := 0x78
0001527c: #249 := 31:0[R0] - 0x37
00015281: VF := extend:64[#249] <> extend:64[31:0[R0]] - 0x37
00015286: CF := pad:64[#249] <> pad:64[31:0[R0]] + 0xFFFFFFC9
0001528a: ZF := #249 = 0
0001528e: NF := 31:31[#249]
00015293: R4 := 0x1F
000152a2: when CF & ~ZF goto %0001529a
000152a3: goto %0001529e

0001529e:
0001529f: R20 := R1
000152a5: goto %000152a1

0001529a:
0001529b: R20 := R20
000152a4: goto %000152a1

000152a1:
000152aa: R1 := 0x38
000152b9: when CF & ~ZF goto %000152b1
000152ba: goto %000152b5

000152b5:
000152b6: R2 := R1
000152bc: goto %000152b8

000152b1:
000152b2: R2 := R2
000152bb: goto %000152b8

000152b8:
000152c1: R1 := 0xF
000152c6: R5 := 0x1E
000152d5: when CF & ~ZF goto %000152cd
000152d6: goto %000152d1

000152d1:
000152d2: R4 := R1
000152d8: goto %000152d4

000152cd:
000152ce: R4 := R4
000152d7: goto %000152d4

000152d4:
000152dd: R1 := 0xE
000152ec: when CF & ~ZF goto %000152e4
000152ed: goto %000152e8

000152e8:
000152e9: R5 := R1
000152ef: goto %000152eb

000152e4:
000152e5: R5 := R5
000152ee: goto %000152eb

000152eb:
000152f6: #250 := 31:0[R3] + 31:0[R0]
000152fb: #251 := pad:64[31:0[R3] + 31:0[R0]]
00015301: VF := extend:64[#250] <> extend:64[31:0[R3]] + extend:64[31:0[R0]]
00015307: CF := #251 <> pad:64[31:0[R3]] + pad:64[31:0[R0]]
0001530b: ZF := #250 = 0
0001530f: NF := 31:31[#250]
00015313: R3 := #251
0001531b: mem := mem with [R19 + 0x10, el]:u32 <- 31:0[R3]
00015321: when CF <> 1 goto %0001531f
00035b08: goto %000153da

000153da:
000153de: R6 := pad:64[31:0[R6] + 1]
000153e6: mem := mem with [R19 + 0x14, el]:u32 <- 31:0[R6]
00035b09: goto %0001531f

0001531f:
00015329: R5 := R19 + (61:0[R5].0)
00015330: R4 := R19 + (61:0[R4].0)
00015336: R7 := pad:64[28:0[R3].0]
0001533d: R6 := pad:64[28:0[R6].31:29[R3]]
00015343: R22 := R19 + 0x1C
00015349: R0 := pad:64[31:0[R0]]
00015351: mem := mem with [R5 + 0x1C, el]:u32 <- 31:0[R7]
00015356: R1 := 0x417000
0001535e: mem := mem with [R4 + 0x1C, el]:u32 <- 31:0[R6]
00015364: R1 := R1 + 0x8F0
0001536b: R2 := R2 + ~R0 + 1
00015371: R1 := R1 + 0xA90
00015378: R0 := R22 + R0
0001537d: R30 := 0x412FAC
0001537f: call @memcpy with return %00015381

00015381:
00015385: R2 := R19
0001538b: R1 := R20
00015391: R0 := R22
00015396: R30 := 0x412FBC
00015398: call @md5_process_block with return %0001539a

0001539a:
0001539e: R1 := R21
000153a4: R0 := R19
000153aa: #252 := R31 + 0x10
000153af: R19 := mem[#252, el]:u64
000153b4: R20 := mem[#252 + 8, el]:u64
000153ba: #253 := R31 + 0x20
000153bf: R21 := mem[#253, el]:u64
000153c4: R22 := mem[#253 + 8, el]:u64
000153cb: R29 := mem[R31, el]:u64
000153d0: R30 := mem[R31 + 8, el]:u64
000153d4: R31 := R31 + 0x30
000153d8: call @md5_read_ctx with noreturn

00035b0a: sub md5_init_ctx(md5_init_ctx_result)
00035ec2: md5_init_ctx_result :: out u32 = low:32[R0]

000143c1:
000143c5: when R0 = 0 goto %000143c3
00035b0b: goto %000165a3

000143c3:
000143cc: #176 := R31 - 0x10
000143d2: mem := mem with [#176, el]:u64 <- R29
000143d8: mem := mem with [#176 + 8, el]:u64 <- R30
000143dc: R31 := #176
000143e1: R3 := 0x417000
000143e7: R3 := R3 + 0x8F0
000143ed: R29 := R31
000143f2: R1 := 0x417000
000143f7: R0 := 0x417000
000143fd: R3 := R3 + 0xAD8
00014403: R1 := R1 + 0x1C0
00014409: R0 := R0 + 0x228
0001440e: R2 := 0x385
00014413: R30 := 0x4123E0
00014415: call @__assert_fail with return %00035b0c

00035b0c:
00035b0d: call @md5_read_ctx with noreturn

000165a3:
000165a6: R1 := 0x417000
000165ad: mem := mem with [R0 + 0x10, el]:u64 <- 0
000165b4: mem := mem with [R0 + 0x18, el]:u32 <- 0
000165bb: V0 := mem[R1 + 0x3D0, el]:u128
000165c3: mem := mem with [R0, el]:u128 <- V0
000165c8: R0 := 0
000165cd: R1 := 0
000165d2: R2 := 0
000165d7: R3 := 0
000165dc: R16 := 0
000165e1: R17 := 0
000165e6: call R30 with noreturn

00035b0e: sub md5_process_block(md5_process_block_result)
00035ec3: md5_process_block_result :: out u32 = low:32[R0]

000144a2:
000144a6: #178 := R31 - 0x70
000144ac: mem := mem with [#178, el]:u64 <- R29
000144b2: mem := mem with [#178 + 8, el]:u64 <- R30
000144b6: R31 := #178
000144bc: R4 := 63:2[R1].0
000144c3: R4 := R0 + R4
000144c9: R29 := R31
000144d0: R3 := pad:64[mem[R2 + 0x10, el]:u32]
000144d6: #179 := R31 + 0x40
000144dc: mem := mem with [#179, el]:u64 <- R25
000144e2: mem := mem with [#179 + 8, el]:u64 <- R26
000144e9: R3 := pad:64[31:0[R3] + 31:0[R1]]
000144f1: mem := mem with [R2 + 0x10, el]:u32 <- 31:0[R3]
000144f8: R26 := pad:64[mem[R2, el]:u32]
000144fd: R8 := pad:64[mem[R2 + 4, el]:u32]
00014503: #180 := R2 + 8
00014508: R9 := pad:64[mem[#180, el]:u32]
0001450d: R10 := pad:64[mem[#180 + 4, el]:u32]
00014513: #181 := pad:64[31:0[R3]]
00014518: #182 := R1 + ~pad:64[31:0[R3]]
0001451e: VF := extend:128[#182 + 1] <> extend:128[R1] + extend:128[~#181] +
          1
00014524: CF := pad:128[#182 + 1] <> pad:128[R1] + pad:128[~#181] + 1
00014528: ZF := #182 + 1 = 0
0001452c: NF := 63:63[#182 + 1]
00014533: when ~(CF & ~ZF) goto %00014531
00035b0f: goto %00016511

00016511:
00016516: R1 := pad:64[mem[R2 + 0x14, el]:u32]
0001651c: R1 := pad:64[31:0[R1] + 1]
00016524: mem := mem with [R2 + 0x14, el]:u32 <- 31:0[R1]
00035b10: goto %00014531

00014531:
0001453a: #183 := ~R4
0001453f: #184 := R0 + ~R4
00014545: VF := extend:128[#184 + 1] <> extend:128[R0] + extend:128[#183] + 1
0001454b: CF := pad:128[#184 + 1] <> pad:128[R0] + pad:128[#183] + 1
0001454f: ZF := #184 + 1 = 0
00014553: NF := 63:63[#184 + 1]
00014559: when CF goto %00014557
00035b11: goto %000153e8

000153e8:
000153ec: #254 := R31 + 0x50
000153f2: mem := mem with [#254, el]:u64 <- R27
000153f8: mem := mem with [#254 + 8, el]:u64 <- R28
000153fe: R27 := R4
00015404: #255 := R31 + 0x10
0001540a: mem := mem with [#255, el]:u64 <- R19
00015410: mem := mem with [#255 + 8, el]:u64 <- R20
00015416: #256 := R31 + 0x20
0001541c: mem := mem with [#256, el]:u64 <- R21
00015422: mem := mem with [#256 + 8, el]:u64 <- R22
00015428: #257 := R31 + 0x30
0001542e: mem := mem with [#257, el]:u64 <- R23
00015434: mem := mem with [#257 + 8, el]:u64 <- R24
0001543c: mem := mem with [R31 + 0x68, el]:u64 <- R2
00035b12: goto %00015440

00015440:
00015445: R25 := pad:64[mem[R0, el]:u32]
0001544a: R19 := pad:64[mem[R0 + 4, el]:u32]
00015451: R5 := pad:64[31:0[R9] ^ 31:0[R10]]
00015458: R5 := pad:64[31:0[R5] & 31:0[R8]]
0001545d: R1 := 0xA478
00015464: R5 := pad:64[31:0[R5] ^ 31:0[R10]]
0001546a: R1 := pad:64[0xD76A.15:0[R1]]
00015471: R5 := pad:64[31:0[R5] + 31:0[R25]]
00015478: R1 := pad:64[31:0[R26] + 31:0[R1]]
0001547f: R5 := pad:64[31:0[R5] + 31:0[R1]]
00015486: R3 := pad:64[31:0[R8] ^ 31:0[R9]]
0001548b: R1 := 0xB756
00015490: R2 := 0x70DB
00015496: R1 := pad:64[0xE8C7.15:0[R1]]
0001549d: R5 := pad:64[24:0[R5].31:25[R5]]
000154a4: R5 := pad:64[31:0[R5] + 31:0[R8]]
000154ab: R1 := pad:64[31:0[R10] + 31:0[R1]]
000154b2: R3 := pad:64[31:0[R3] & 31:0[R5]]
000154b9: R21 := pad:64[31:0[R5] ^ 31:0[R8]]
000154c0: R3 := pad:64[31:0[R3] ^ 31:0[R9]]
000154c6: R2 := pad:64[0x2420.15:0[R2]]
000154cd: R3 := pad:64[31:0[R3] + 31:0[R19]]
000154d4: R2 := pad:64[31:0[R9] + 31:0[R2]]
000154db: R3 := pad:64[31:0[R3] + 31:0[R1]]
000154e0: R1 := 0xFAF
000154e6: #258 := R0 + 8
000154eb: R12 := pad:64[mem[#258, el]:u32]
000154f0: R20 := pad:64[mem[#258 + 4, el]:u32]
000154f7: R3 := pad:64[19:0[R3].31:20[R3]]
000154fe: R3 := pad:64[31:0[R5] + 31:0[R3]]
00015504: R1 := pad:64[0xF57C.15:0[R1]]
0001550b: R21 := pad:64[31:0[R21] & 31:0[R3]]
00015510: R4 := 0xCEEE
00015516: #259 := R0 + 0x10
0001551b: R14 := pad:64[mem[#259, el]:u32]
00015520: R22 := pad:64[mem[#259 + 4, el]:u32]
00015527: R21 := pad:64[31:0[R21] ^ 31:0[R8]]
0001552e: R21 := pad:64[31:0[R21] + 31:0[R12]]
00015534: R4 := pad:64[0xC1BD.15:0[R4]]
0001553b: R21 := pad:64[31:0[R21] + 31:0[R2]]
00015542: R15 := pad:64[31:0[R14] + 31:0[R1]]
00015547: R1 := 0xC62A
0001554e: R13 := pad:64[31:0[R8] + 31:0[R4]]
00015554: R1 := pad:64[0x4787.15:0[R1]]
0001555b: R21 := pad:64[14:0[R21].31:15[R21]]
00015562: R21 := pad:64[31:0[R3] + 31:0[R21]]
00015569: R23 := pad:64[31:0[R22] + 31:0[R1]]
00015570: R1 := pad:64[31:0[R5] ^ 31:0[R3]]
00015577: R28 := pad:64[31:0[R3] ^ 31:0[R21]]
0001557e: R1 := pad:64[31:0[R1] & 31:0[R21]]
00015583: R4 := 0x4613
0001558a: R1 := pad:64[31:0[R1] ^ 31:0[R5]]
00015590: R4 := pad:64[0xA830.15:0[R4]]
00015597: R1 := pad:64[31:0[R1] + 31:0[R20]]
0001559c: R2 := 0x9501
000155a3: R1 := pad:64[31:0[R1] + 31:0[R13]]
000155a9: R2 := pad:64[0xFD46.15:0[R2]]
000155af: #260 := R0 + 0x18
000155b4: R16 := pad:64[mem[#260, el]:u32]
000155b9: R24 := pad:64[mem[#260 + 4, el]:u32]
000155c0: R1 := pad:64[9:0[R1].31:10[R1]]
000155c7: R1 := pad:64[31:0[R21] + 31:0[R1]]
000155ce: R6 := pad:64[mem[R0 + 0x28, el]:u32]
000155d5: R28 := pad:64[31:0[R28] & 31:0[R1]]
000155dc: R17 := pad:64[31:0[R16] + 31:0[R4]]
000155e3: R28 := pad:64[31:0[R28] ^ 31:0[R3]]
000155ea: R4 := pad:64[31:0[R24] + 31:0[R2]]
000155f1: R5 := pad:64[31:0[R28] + 31:0[R5]]
000155f8: R28 := pad:64[31:0[R21] ^ 31:0[R1]]
000155ff: R15 := pad:64[31:0[R15] + 31:0[R5]]
00015604: R2 := 0x98D8
0001560a: #261 := R0 + 0x20
0001560f: R18 := pad:64[mem[#261, el]:u32]
00015614: R11 := pad:64[mem[#261 + 4, el]:u32]
0001561b: R15 := pad:64[24:0[R15].31:25[R15]]
00015622: R15 := pad:64[31:0[R1] + 31:0[R15]]
00015628: R2 := pad:64[0x6980.15:0[R2]]
0001562f: R28 := pad:64[31:0[R28] & 31:0[R15]]
00015636: R7 := pad:64[31:0[R18] + 31:0[R2]]
0001563d: R28 := pad:64[31:0[R28] ^ 31:0[R21]]
00015642: R2 := 0xF7AF
00015649: R3 := pad:64[31:0[R28] + 31:0[R3]]
00015650: R28 := pad:64[31:0[R1] ^ 31:0[R15]]
00015657: R23 := pad:64[31:0[R23] + 31:0[R3]]
0001565d: R2 := pad:64[0x8B44.15:0[R2]]
00015664: R2 := pad:64[31:0[R11] + 31:0[R2]]
00015669: R5 := 0xFFFF5BB1
00015670: R5 := pad:64[31:0[R6] + 31:0[R5]]
00015677: R23 := pad:64[19:0[R23].31:20[R23]]
0001567e: R23 := pad:64[31:0[R15] + 31:0[R23]]
00015683: R3 := 0xD7BE
0001568a: R28 := pad:64[31:0[R28] & 31:0[R23]]
00015690: R3 := pad:64[0x895C.15:0[R3]]
00015697: R28 := pad:64[31:0[R28] ^ 31:0[R1]]
0001569e: R21 := pad:64[31:0[R28] + 31:0[R21]]
000156a5: R28 := pad:64[31:0[R15] ^ 31:0[R23]]
000156ac: R17 := pad:64[31:0[R17] + 31:0[R21]]
000156b2: #262 := R0 + 0x2C
000156b7: R13 := pad:64[mem[#262, el]:u32]
000156bc: R21 := pad:64[mem[#262 + 4, el]:u32]
000156c3: R17 := pad:64[14:0[R17].31:15[R17]]
000156ca: R17 := pad:64[31:0[R23] + 31:0[R17]]
000156d1: R28 := pad:64[31:0[R28] & 31:0[R17]]
000156d8: R3 := pad:64[31:0[R13] + 31:0[R3]]
000156df: R28 := pad:64[31:0[R28] ^ 31:0[R15]]
000156e6: R1 := pad:64[31:0[R28] + 31:0[R1]]
000156ed: R28 := pad:64[31:0[R23] ^ 31:0[R17]]
000156f4: R1 := pad:64[31:0[R4] + 31:0[R1]]
000156f9: R4 := 0x1122
000156ff: R4 := pad:64[0x6B90.15:0[R4]]
00015706: R4 := pad:64[31:0[R21] + 31:0[R4]]
0001570d: R1 := pad:64[9:0[R1].31:10[R1]]
00015714: R1 := pad:64[31:0[R17] + 31:0[R1]]
0001571b: R28 := pad:64[31:0[R28] & 31:0[R1]]
00015722: R28 := pad:64[31:0[R28] ^ 31:0[R23]]
00015729: R15 := pad:64[31:0[R28] + 31:0[R15]]
00015730: R28 := pad:64[31:0[R17] ^ 31:0[R1]]
00015737: R7 := pad:64[31:0[R7] + 31:0[R15]]
0001573e: R7 := pad:64[24:0[R7].31:25[R7]]
00015745: R7 := pad:64[31:0[R1] + 31:0[R7]]
0001574c: R28 := pad:64[31:0[R28] & 31:0[R7]]
00015753: R28 := pad:64[31:0[R28] ^ 31:0[R17]]
0001575a: R28 := pad:64[31:0[R28] + 31:0[R23]]
00015761: R23 := pad:64[31:0[R1] ^ 31:0[R7]]
00015768: R2 := pad:64[31:0[R2] + 31:0[R28]]
0001576d: R28 := 0x7193
00015773: R28 := pad:64[0xFD98.15:0[R28]]
0001577a: R2 := pad:64[19:0[R2].31:20[R2]]
00015781: R2 := pad:64[31:0[R7] + 31:0[R2]]
00015788: R23 := pad:64[31:0[R23] & 31:0[R2]]
0001578f: R23 := pad:64[31:0[R23] ^ 31:0[R1]]
00015796: R23 := pad:64[31:0[R23] + 31:0[R17]]
0001579d: R17 := pad:64[31:0[R7] ^ 31:0[R2]]
000157a4: R5 := pad:64[31:0[R5] + 31:0[R23]]
000157aa: #263 := R0 + 0x34
000157af: R15 := pad:64[mem[#263, el]:u32]
000157b4: R23 := pad:64[mem[#263 + 4, el]:u32]
000157bb: R5 := pad:64[14:0[R5].31:15[R5]]
000157c2: R5 := pad:64[31:0[R2] + 31:0[R5]]
000157c8: R0 := R0 + 0x40
000157cf: R17 := pad:64[31:0[R17] & 31:0[R5]]
000157d6: R30 := pad:64[31:0[R15] + 31:0[R28]]
000157dd: R17 := pad:64[31:0[R17] ^ 31:0[R7]]
000157e4: R1 := pad:64[31:0[R17] + 31:0[R1]]
000157eb: R17 := pad:64[31:0[R2] ^ 31:0[R5]]
000157f2: R1 := pad:64[31:0[R3] + 31:0[R1]]
000157f7: R3 := 0x438E
000157fd: R3 := pad:64[0xA679.15:0[R3]]
00015804: R3 := pad:64[31:0[R23] + 31:0[R3]]
0001580b: R1 := pad:64[9:0[R1].31:10[R1]]
00015812: R1 := pad:64[31:0[R5] + 31:0[R1]]
00015819: R17 := pad:64[31:0[R17] & 31:0[R1]]
00015820: R17 := pad:64[31:0[R17] ^ 31:0[R2]]
00015827: R17 := pad:64[31:0[R17] + 31:0[R7]]
0001582e: R7 := pad:64[31:0[R5] ^ 31:0[R1]]
00015835: R4 := pad:64[31:0[R4] + 31:0[R17]]
0001583c: R17 := pad:64[mem[R0 - 4, el]:u32]
00015843: R4 := pad:64[24:0[R4].31:25[R4]]
0001584a: R4 := pad:64[31:0[R1] + 31:0[R4]]
00015851: R7 := pad:64[31:0[R7] & 31:0[R4]]
00015858: R7 := pad:64[31:0[R7] ^ 31:0[R5]]
0001585f: R2 := pad:64[31:0[R7] + 31:0[R2]]
00015866: R7 := pad:64[31:0[R1] ^ 31:0[R4]]
0001586d: R30 := pad:64[31:0[R30] + 31:0[R2]]
00015872: R2 := 0x821
00015878: R2 := pad:64[0x49B4.15:0[R2]]
0001587f: R2 := pad:64[31:0[R17] + 31:0[R2]]
00015886: R30 := pad:64[19:0[R30].31:20[R30]]
0001588d: R30 := pad:64[31:0[R4] + 31:0[R30]]
00015894: R7 := pad:64[31:0[R7] & 31:0[R30]]
0001589b: R7 := pad:64[31:0[R7] ^ 31:0[R1]]
000158a2: R7 := pad:64[31:0[R7] + 31:0[R5]]
000158a9: R5 := pad:64[31:0[R4] ^ 31:0[R30]]
000158b0: R3 := pad:64[31:0[R3] + 31:0[R7]]
000158b5: R7 := 0x2562
000158bb: R7 := pad:64[0xF61E.15:0[R7]]
000158c2: R7 := pad:64[31:0[R19] + 31:0[R7]]
000158c9: R3 := pad:64[14:0[R3].31:15[R3]]
000158d0: R3 := pad:64[31:0[R30] + 31:0[R3]]
000158d7: R5 := pad:64[31:0[R5] & 31:0[R3]]
000158de: R5 := pad:64[31:0[R5] ^ 31:0[R4]]
000158e5: R5 := pad:64[31:0[R5] + 31:0[R1]]
000158ea: R1 := 0xB340
000158f1: R2 := pad:64[31:0[R2] + 31:0[R5]]
000158f7: R1 := pad:64[0xC040.15:0[R1]]
000158fe: R28 := pad:64[31:0[R16] + 31:0[R1]]
00015903: R1 := 0x5A51
00015909: R1 := pad:64[0x265E.15:0[R1]]
00015910: R2 := pad:64[9:0[R2].31:10[R2]]
00015917: R2 := pad:64[31:0[R3] + 31:0[R2]]
0001591e: R1 := pad:64[31:0[R13] + 31:0[R1]]
00015925: R5 := pad:64[31:0[R3] ^ 31:0[R2]]
0001592c: R5 := pad:64[31:0[R5] & 31:0[R30]]
00015933: R5 := pad:64[31:0[R5] ^ 31:0[R3]]
0001593a: R5 := pad:64[31:0[R5] + 31:0[R4]]
0001593f: R4 := 0xC7AA
00015946: R7 := pad:64[31:0[R7] + 31:0[R5]]
0001594c: R4 := pad:64[0xE9B6.15:0[R4]]
00015953: R5 := pad:64[31:0[R25] + 31:0[R4]]
0001595a: R7 := pad:64[26:0[R7].31:27[R7]]
00015961: R7 := pad:64[31:0[R2] + 31:0[R7]]
00015968: R4 := pad:64[31:0[R2] ^ 31:0[R7]]
0001596f: R4 := pad:64[31:0[R4] & 31:0[R3]]
00015976: R4 := pad:64[31:0[R4] ^ 31:0[R2]]
0001597d: R4 := pad:64[31:0[R4] + 31:0[R30]]
00015984: R28 := pad:64[31:0[R28] + 31:0[R4]]
00015989: R4 := 0x105D
0001598f: R4 := pad:64[0xD62F.15:0[R4]]
00015996: R4 := pad:64[31:0[R22] + 31:0[R4]]
0001599d: R28 := pad:64[22:0[R28].31:23[R28]]
000159a4: R28 := pad:64[31:0[R7] + 31:0[R28]]
000159ab: R30 := pad:64[31:0[R7] ^ 31:0[R28]]
000159b2: R30 := pad:64[31:0[R30] & 31:0[R2]]
000159b9: R30 := pad:64[31:0[R30] ^ 31:0[R7]]
000159c0: R30 := pad:64[31:0[R30] + 31:0[R3]]
000159c5: R3 := 0x1453
000159cc: R1 := pad:64[31:0[R1] + 31:0[R30]]
000159d2: R3 := pad:64[0x244.15:0[R3]]
000159d9: R3 := pad:64[31:0[R6] + 31:0[R3]]
000159e0: R1 := pad:64[17:0[R1].31:18[R1]]
000159e7: R1 := pad:64[31:0[R28] + 31:0[R1]]
000159ee: R30 := pad:64[31:0[R28] ^ 31:0[R1]]
000159f5: R30 := pad:64[31:0[R30] & 31:0[R7]]
000159fc: R30 := pad:64[31:0[R30] ^ 31:0[R28]]
00015a03: R30 := pad:64[31:0[R30] + 31:0[R2]]
00015a08: R2 := 0xE681
00015a0f: R5 := pad:64[31:0[R5] + 31:0[R30]]
00015a15: R2 := pad:64[0xD8A1.15:0[R2]]
00015a1c: R2 := pad:64[31:0[R17] + 31:0[R2]]
00015a23: R5 := pad:64[11:0[R5].31:12[R5]]
00015a2a: R5 := pad:64[31:0[R1] + 31:0[R5]]
00015a31: R30 := pad:64[31:0[R1] ^ 31:0[R5]]
00015a38: R30 := pad:64[31:0[R30] & 31:0[R28]]
00015a3f: R30 := pad:64[31:0[R30] ^ 31:0[R1]]
00015a46: R30 := pad:64[31:0[R30] + 31:0[R7]]
00015a4b: R7 := 0xFBC8
00015a52: R4 := pad:64[31:0[R4] + 31:0[R30]]
00015a58: R7 := pad:64[0xE7D3.15:0[R7]]
00015a5f: R7 := pad:64[31:0[R14] + 31:0[R7]]
00015a66: R4 := pad:64[26:0[R4].31:27[R4]]
00015a6d: R4 := pad:64[31:0[R5] + 31:0[R4]]
00015a74: R30 := pad:64[31:0[R5] ^ 31:0[R4]]
00015a7b: R30 := pad:64[31:0[R30] & 31:0[R1]]
00015a82: R30 := pad:64[31:0[R30] ^ 31:0[R5]]
00015a89: R30 := pad:64[31:0[R30] + 31:0[R28]]
00015a8e: R28 := 0xCDE6
00015a95: R3 := pad:64[31:0[R3] + 31:0[R30]]
00015a9b: R28 := pad:64[0x21E1.15:0[R28]]
00015aa2: R28 := pad:64[31:0[R11] + 31:0[R28]]
00015aa9: R3 := pad:64[22:0[R3].31:23[R3]]
00015ab0: R3 := pad:64[31:0[R4] + 31:0[R3]]
00015ab7: R30 := pad:64[31:0[R4] ^ 31:0[R3]]
00015abe: R30 := pad:64[31:0[R30] & 31:0[R5]]
00015ac5: R30 := pad:64[31:0[R30] ^ 31:0[R4]]
00015acc: R30 := pad:64[31:0[R30] + 31:0[R1]]
00015ad1: R1 := 0x7D6
00015ad8: R2 := pad:64[31:0[R2] + 31:0[R30]]
00015ade: R1 := pad:64[0xC337.15:0[R1]]
00015ae5: R30 := pad:64[31:0[R23] + 31:0[R1]]
00015aec: R2 := pad:64[17:0[R2].31:18[R2]]
00015af3: R2 := pad:64[31:0[R3] + 31:0[R2]]
00015afa: R1 := pad:64[31:0[R3] ^ 31:0[R2]]
00015b01: R1 := pad:64[31:0[R1] & 31:0[R4]]
00015b08: R1 := pad:64[31:0[R1] ^ 31:0[R3]]
00015b0f: R1 := pad:64[31:0[R1] + 31:0[R5]]
00015b16: R1 := pad:64[31:0[R7] + 31:0[R1]]
00015b1b: R7 := 0xD87
00015b21: R7 := pad:64[0xF4D5.15:0[R7]]
00015b28: R7 := pad:64[31:0[R20] + 31:0[R7]]
00015b2f: R1 := pad:64[11:0[R1].31:12[R1]]
00015b36: R1 := pad:64[31:0[R2] + 31:0[R1]]
00015b3d: R5 := pad:64[31:0[R2] ^ 31:0[R1]]
00015b44: R5 := pad:64[31:0[R5] & 31:0[R3]]
00015b4b: R5 := pad:64[31:0[R5] ^ 31:0[R2]]
00015b52: R5 := pad:64[31:0[R5] + 31:0[R4]]
00015b59: R5 := pad:64[31:0[R28] + 31:0[R5]]
00015b5e: R28 := 0x14ED
00015b64: R28 := pad:64[0x455A.15:0[R28]]
00015b6b: R28 := pad:64[31:0[R18] + 31:0[R28]]
00015b72: R5 := pad:64[26:0[R5].31:27[R5]]
00015b79: R5 := pad:64[31:0[R1] + 31:0[R5]]
00015b80: R4 := pad:64[31:0[R1] ^ 31:0[R5]]
00015b87: R4 := pad:64[31:0[R4] & 31:0[R2]]
00015b8e: R4 := pad:64[31:0[R4] ^ 31:0[R1]]
00015b95: R4 := pad:64[31:0[R4] + 31:0[R3]]
00015b9c: R4 := pad:64[31:0[R30] + 31:0[R4]]
00015ba1: R30 := 0xE905
00015ba7: R30 := pad:64[0xA9E3.15:0[R30]]
00015bae: R30 := pad:64[31:0[R15] + 31:0[R30]]
00015bb5: R4 := pad:64[22:0[R4].31:23[R4]]
00015bbc: R4 := pad:64[31:0[R5] + 31:0[R4]]
00015bc3: R3 := pad:64[31:0[R5] ^ 31:0[R4]]
00015bca: R3 := pad:64[31:0[R3] & 31:0[R1]]
00015bd1: R3 := pad:64[31:0[R3] ^ 31:0[R5]]
00015bd8: R3 := pad:64[31:0[R3] + 31:0[R2]]
00015bdf: R3 := pad:64[31:0[R7] + 31:0[R3]]
00015be4: R7 := 0xA3F8
00015bea: R7 := pad:64[0xFCEF.15:0[R7]]
00015bf1: R7 := pad:64[31:0[R12] + 31:0[R7]]
00015bf8: R3 := pad:64[17:0[R3].31:18[R3]]
00015bff: R3 := pad:64[31:0[R4] + 31:0[R3]]
00015c06: R2 := pad:64[31:0[R4] ^ 31:0[R3]]
00015c0d: R2 := pad:64[31:0[R2] & 31:0[R5]]
00015c14: R2 := pad:64[31:0[R2] ^ 31:0[R4]]
00015c1b: R2 := pad:64[31:0[R2] + 31:0[R1]]
00015c22: R2 := pad:64[31:0[R28] + 31:0[R2]]
00015c27: R28 := 0x2D9
00015c2d: R28 := pad:64[0x676F.15:0[R28]]
00015c34: R28 := pad:64[31:0[R24] + 31:0[R28]]
00015c3b: R2 := pad:64[11:0[R2].31:12[R2]]
00015c42: R2 := pad:64[31:0[R3] + 31:0[R2]]
00015c49: R1 := pad:64[31:0[R3] ^ 31:0[R2]]
00015c50: R1 := pad:64[31:0[R1] & 31:0[R4]]
00015c57: R1 := pad:64[31:0[R1] ^ 31:0[R3]]
00015c5e: R1 := pad:64[31:0[R1] + 31:0[R5]]
00015c63: R5 := 0x4C8A
00015c6a: R1 := pad:64[31:0[R30] + 31:0[R1]]
00015c70: R5 := pad:64[0x8D2A.15:0[R5]]
00015c77: R5 := pad:64[31:0[R21] + 31:0[R5]]
00015c7e: R1 := pad:64[26:0[R1].31:27[R1]]
00015c85: R1 := pad:64[31:0[R2] + 31:0[R1]]
00015c8c: R30 := pad:64[31:0[R2] ^ 31:0[R1]]
00015c93: R30 := pad:64[31:0[R30] & 31:0[R3]]
00015c9a: R30 := pad:64[31:0[R30] ^ 31:0[R2]]
00015ca1: R30 := pad:64[31:0[R30] + 31:0[R4]]
00015ca7: R4 := pad:64[31:0[R22] - 0x5C000]
00015cae: R7 := pad:64[31:0[R7] + 31:0[R30]]
00015cb4: R4 := pad:64[31:0[R4] - 0x6BE]
00015cbb: R7 := pad:64[22:0[R7].31:23[R7]]
00015cc2: R7 := pad:64[31:0[R1] + 31:0[R7]]
00015cc9: R30 := pad:64[31:0[R1] ^ 31:0[R7]]
00015cd0: R30 := pad:64[31:0[R30] & 31:0[R2]]
00015cd7: R30 := pad:64[31:0[R30] ^ 31:0[R1]]
00015cde: R30 := pad:64[31:0[R30] + 31:0[R3]]
00015ce5: R28 := pad:64[31:0[R28] + 31:0[R30]]
00015cec: R28 := pad:64[17:0[R28].31:18[R28]]
00015cf3: R28 := pad:64[31:0[R7] + 31:0[R28]]
00015cfa: R3 := pad:64[31:0[R7] ^ 31:0[R28]]
00015d01: R30 := pad:64[31:0[R3] & 31:0[R1]]
00015d08: R30 := pad:64[31:0[R30] ^ 31:0[R7]]
00015d0f: R30 := pad:64[31:0[R30] + 31:0[R2]]
00015d14: R2 := 0xF681
00015d1b: R30 := pad:64[31:0[R5] + 31:0[R30]]
00015d21: R2 := pad:64[0x8771.15:0[R2]]
00015d28: R2 := pad:64[31:0[R18] + 31:0[R2]]
00015d2f: R30 := pad:64[11:0[R30].31:12[R30]]
00015d36: R30 := pad:64[31:0[R28] + 31:0[R30]]
00015d3d: R3 := pad:64[31:0[R3] ^ 31:0[R30]]
00015d44: R5 := pad:64[31:0[R28] ^ 31:0[R30]]
00015d4b: R3 := pad:64[31:0[R3] + 31:0[R1]]
00015d52: R1 := pad:64[31:0[R4] + 31:0[R3]]
00015d57: R4 := 0x6122
00015d5d: R4 := pad:64[0x6D9D.15:0[R4]]
00015d64: R4 := pad:64[31:0[R13] + 31:0[R4]]
00015d6b: R1 := pad:64[27:0[R1].31:28[R1]]
00015d72: R1 := pad:64[31:0[R30] + 31:0[R1]]
00015d79: R5 := pad:64[31:0[R5] ^ 31:0[R1]]
00015d80: R3 := pad:64[31:0[R30] ^ 31:0[R1]]
00015d87: R5 := pad:64[31:0[R5] + 31:0[R7]]
00015d8c: R7 := 0x380C
00015d93: R2 := pad:64[31:0[R2] + 31:0[R5]]
00015d99: R7 := pad:64[0xFDE5.15:0[R7]]
00015da0: R7 := pad:64[31:0[R23] + 31:0[R7]]
00015da7: R2 := pad:64[20:0[R2].31:21[R2]]
00015dae: R2 := pad:64[31:0[R1] + 31:0[R2]]
00015db5: R3 := pad:64[31:0[R3] ^ 31:0[R2]]
00015dbc: R5 := pad:64[31:0[R1] ^ 31:0[R2]]
00015dc3: R3 := pad:64[31:0[R3] + 31:0[R28]]
00015dca: R3 := pad:64[31:0[R4] + 31:0[R3]]
00015dcf: R4 := 0xEA44
00015dd5: R4 := pad:64[0xA4BE.15:0[R4]]
00015ddc: R4 := pad:64[31:0[R19] + 31:0[R4]]
00015de3: R3 := pad:64[15:0[R3].31:16[R3]]
00015dea: R3 := pad:64[31:0[R2] + 31:0[R3]]
00015df1: R5 := pad:64[31:0[R5] ^ 31:0[R3]]
00015df8: R28 := pad:64[31:0[R2] ^ 31:0[R3]]
00015dff: R5 := pad:64[31:0[R5] + 31:0[R30]]
00015e04: R30 := 0x4B60
00015e0b: R5 := pad:64[31:0[R7] + 31:0[R5]]
00015e10: R7 := 0xCFA9
00015e16: R7 := pad:64[0x4BDE.15:0[R7]]
00015e1d: R7 := pad:64[31:0[R14] + 31:0[R7]]
00015e23: R30 := pad:64[0xF6BB.15:0[R30]]
00015e2a: R5 := pad:64[8:0[R5].31:9[R5]]
00015e31: R5 := pad:64[31:0[R3] + 31:0[R5]]
00015e38: R30 := pad:64[31:0[R24] + 31:0[R30]]
00015e3f: R28 := pad:64[31:0[R28] ^ 31:0[R5]]
00015e46: R28 := pad:64[31:0[R28] + 31:0[R1]]
00015e4d: R1 := pad:64[31:0[R3] ^ 31:0[R5]]
00015e54: R4 := pad:64[31:0[R4] + 31:0[R28]]
00015e59: R28 := 0x7EC6
00015e5f: R28 := pad:64[0x289B.15:0[R28]]
00015e66: R28 := pad:64[31:0[R15] + 31:0[R28]]
00015e6d: R4 := pad:64[27:0[R4].31:28[R4]]
00015e74: R4 := pad:64[31:0[R5] + 31:0[R4]]
00015e7b: R1 := pad:64[31:0[R1] ^ 31:0[R4]]
00015e82: R1 := pad:64[31:0[R1] + 31:0[R2]]
00015e89: R2 := pad:64[31:0[R5] ^ 31:0[R4]]
00015e90: R1 := pad:64[31:0[R7] + 31:0[R1]]
00015e95: R7 := 0xBC70
00015e9b: R7 := pad:64[0xBEBF.15:0[R7]]
00015ea2: R7 := pad:64[31:0[R6] + 31:0[R7]]
00015ea8: R6 := pad:64[31:0[R6] - 0x100000]
00015eaf: R1 := pad:64[20:0[R1].31:21[R1]]
00015eb6: R1 := pad:64[31:0[R4] + 31:0[R1]]
00015ebc: R6 := pad:64[31:0[R6] - 0xB83]
00015ec3: R2 := pad:64[31:0[R2] ^ 31:0[R1]]
00015eca: R2 := pad:64[31:0[R2] + 31:0[R3]]
00015ed1: R3 := pad:64[31:0[R4] ^ 31:0[R1]]
00015ed8: R2 := pad:64[31:0[R30] + 31:0[R2]]
00015edf: R2 := pad:64[15:0[R2].31:16[R2]]
00015ee6: R2 := pad:64[31:0[R1] + 31:0[R2]]
00015eed: R3 := pad:64[31:0[R3] ^ 31:0[R2]]
00015ef4: R3 := pad:64[31:0[R3] + 31:0[R5]]
00015efb: R5 := pad:64[31:0[R1] ^ 31:0[R2]]
00015f02: R3 := pad:64[31:0[R7] + 31:0[R3]]
00015f07: R7 := 0x27FA
00015f0d: R7 := pad:64[0xEAA1.15:0[R7]]
00015f14: R7 := pad:64[31:0[R25] + 31:0[R7]]
00015f1b: R3 := pad:64[8:0[R3].31:9[R3]]
00015f22: R3 := pad:64[31:0[R2] + 31:0[R3]]
00015f29: R5 := pad:64[31:0[R5] ^ 31:0[R3]]
00015f30: R5 := pad:64[31:0[R5] + 31:0[R4]]
00015f37: R4 := pad:64[31:0[R2] ^ 31:0[R3]]
00015f3e: R5 := pad:64[31:0[R28] + 31:0[R5]]
00015f43: R28 := 0x3085
00015f49: R28 := pad:64[0xD4EF.15:0[R28]]
00015f50: R28 := pad:64[31:0[R20] + 31:0[R28]]
00015f57: R5 := pad:64[27:0[R5].31:28[R5]]
00015f5e: R5 := pad:64[31:0[R3] + 31:0[R5]]
00015f65: R4 := pad:64[31:0[R4] ^ 31:0[R5]]
00015f6c: R4 := pad:64[31:0[R4] + 31:0[R1]]
00015f73: R1 := pad:64[31:0[R3] ^ 31:0[R5]]
00015f7a: R4 := pad:64[31:0[R7] + 31:0[R4]]
00015f7f: R7 := 0x1D05
00015f85: R7 := pad:64[0x488.15:0[R7]]
00015f8c: R7 := pad:64[31:0[R16] + 31:0[R7]]
00015f93: R4 := pad:64[20:0[R4].31:21[R4]]
00015f9a: R4 := pad:64[31:0[R5] + 31:0[R4]]
00015fa1: R1 := pad:64[31:0[R1] ^ 31:0[R4]]
00015fa8: R1 := pad:64[31:0[R1] + 31:0[R2]]
00015faf: R2 := pad:64[31:0[R5] ^ 31:0[R4]]
00015fb6: R1 := pad:64[31:0[R28] + 31:0[R1]]
00015fbb: R28 := 0xD039
00015fc1: R28 := pad:64[0xD9D4.15:0[R28]]
00015fc8: R28 := pad:64[31:0[R11] + 31:0[R28]]
00015fcf: R1 := pad:64[15:0[R1].31:16[R1]]
00015fd6: R1 := pad:64[31:0[R4] + 31:0[R1]]
00015fdd: R2 := pad:64[31:0[R2] ^ 31:0[R1]]
00015fe4: R2 := pad:64[31:0[R2] + 31:0[R3]]
00015feb: R3 := pad:64[31:0[R4] ^ 31:0[R1]]
00015ff2: R2 := pad:64[31:0[R7] + 31:0[R2]]
00015ff7: R7 := 0x99E5
00015ffd: R7 := pad:64[0xE6DB.15:0[R7]]
00016004: R7 := pad:64[31:0[R21] + 31:0[R7]]
0001600b: R2 := pad:64[8:0[R2].31:9[R2]]
00016012: R2 := pad:64[31:0[R1] + 31:0[R2]]
00016019: R3 := pad:64[31:0[R3] ^ 31:0[R2]]
00016020: R3 := pad:64[31:0[R3] + 31:0[R5]]
00016027: R5 := pad:64[31:0[R1] ^ 31:0[R2]]
0001602e: R3 := pad:64[31:0[R28] + 31:0[R3]]
00016033: R28 := 0x7CF8
00016039: R28 := pad:64[0x1FA2.15:0[R28]]
00016040: R28 := pad:64[31:0[R17] + 31:0[R28]]
00016047: R3 := pad:64[27:0[R3].31:28[R3]]
0001604e: R3 := pad:64[31:0[R2] + 31:0[R3]]
00016055: R5 := pad:64[31:0[R5] ^ 31:0[R3]]
0001605c: R5 := pad:64[31:0[R5] + 31:0[R4]]
00016063: R4 := pad:64[31:0[R2] ^ 31:0[R3]]
0001606a: R5 := pad:64[31:0[R7] + 31:0[R5]]
0001606f: R7 := 0x5665
00016075: R7 := pad:64[0xC4AC.15:0[R7]]
0001607c: R7 := pad:64[31:0[R12] + 31:0[R7]]
00016083: R5 := pad:64[20:0[R5].31:21[R5]]
0001608a: R5 := pad:64[31:0[R3] + 31:0[R5]]
00016091: R4 := pad:64[31:0[R4] ^ 31:0[R5]]
00016098: R4 := pad:64[31:0[R4] + 31:0[R1]]
0001609f: R1 := pad:64[31:0[R3] ^ 31:0[R5]]
000160a6: R4 := pad:64[31:0[R28] + 31:0[R4]]
000160ab: R28 := 0x2244
000160b1: R28 := pad:64[0xF429.15:0[R28]]
000160b8: R28 := pad:64[31:0[R25] + 31:0[R28]]
000160bd: R25 := 0xFF97
000160c4: R4 := pad:64[15:0[R4].31:16[R4]]
000160cb: R4 := pad:64[31:0[R5] + 31:0[R4]]
000160d1: R25 := pad:64[0x432A.15:0[R25]]
000160d8: R1 := pad:64[31:0[R1] ^ 31:0[R4]]
000160df: R25 := pad:64[31:0[R24] + 31:0[R25]]
000160e6: R1 := pad:64[31:0[R1] + 31:0[R2]]
000160eb: R24 := 0x23A7
000160f2: R7 := pad:64[31:0[R7] + 31:0[R1]]
000160f7: R1 := 0xA039
000160fd: R1 := pad:64[0xFC93.15:0[R1]]
00016104: R22 := pad:64[31:0[R22] + 31:0[R1]]
00016109: R1 := 0x59C3
00016110: R7 := pad:64[8:0[R7].31:9[R7]]
00016117: R7 := pad:64[31:0[R4] + 31:0[R7]]
0001611d: R1 := pad:64[0x655B.15:0[R1]]
00016124: R21 := pad:64[31:0[R21] + 31:0[R1]]
0001612b: R1 := pad:64[31:0[R7] | ~31:0[R5]]
00016132: R1 := pad:64[31:0[R1] ^ 31:0[R4]]
00016138: R24 := pad:64[0xAB94.15:0[R24]]
0001613f: R1 := pad:64[31:0[R1] + 31:0[R3]]
00016146: R23 := pad:64[31:0[R23] + 31:0[R24]]
0001614d: R28 := pad:64[31:0[R28] + 31:0[R1]]
00016152: R1 := 0x7E4F
00016158: R1 := pad:64[0x6FA8.15:0[R1]]
0001615f: R18 := pad:64[31:0[R18] + 31:0[R1]]
00016164: R2 := 0xCC92
0001616b: R28 := pad:64[25:0[R28].31:26[R28]]
00016172: R28 := pad:64[31:0[R7] + 31:0[R28]]
00016178: R2 := pad:64[0x8F0C.15:0[R2]]
0001617f: R1 := pad:64[31:0[R28] | ~31:0[R4]]
00016186: R20 := pad:64[31:0[R20] + 31:0[R2]]
0001618d: R1 := pad:64[31:0[R1] ^ 31:0[R7]]
00016192: R2 := 0x5DD1
00016199: R1 := pad:64[31:0[R1] + 31:0[R5]]
0001619f: R2 := pad:64[0x8584.15:0[R2]]
000161a6: R25 := pad:64[31:0[R25] + 31:0[R1]]
000161ad: R19 := pad:64[31:0[R19] + 31:0[R2]]
000161b2: R2 := 0xE6E0
000161b7: R1 := 0x7E82
000161bd: R2 := pad:64[0xFE2C.15:0[R2]]
000161c4: R25 := pad:64[21:0[R25].31:22[R25]]
000161cb: R25 := pad:64[31:0[R28] + 31:0[R25]]
000161d2: R17 := pad:64[31:0[R17] + 31:0[R2]]
000161d9: R3 := pad:64[31:0[R25] | ~31:0[R7]]
000161de: R2 := 0x4314
000161e5: R3 := pad:64[31:0[R3] ^ 31:0[R28]]
000161eb: R2 := pad:64[0xA301.15:0[R2]]
000161f2: R4 := pad:64[31:0[R3] + 31:0[R4]]
000161f9: R5 := pad:64[31:0[R16] + 31:0[R2]]
00016200: R23 := pad:64[31:0[R23] + 31:0[R4]]
00016205: R4 := 0xD391
0001620b: R4 := pad:64[0xEB86.15:0[R4]]
00016212: R11 := pad:64[31:0[R11] + 31:0[R4]]
00016217: R2 := 0x11A1
0001621e: R23 := pad:64[16:0[R23].31:17[R23]]
00016225: R23 := pad:64[31:0[R25] + 31:0[R23]]
0001622b: R2 := pad:64[0x4E08.15:0[R2]]
00016232: R4 := pad:64[31:0[R23] | ~31:0[R28]]
00016239: R2 := pad:64[31:0[R15] + 31:0[R2]]
00016240: R4 := pad:64[31:0[R4] ^ 31:0[R25]]
00016246: R1 := pad:64[0xF753.15:0[R1]]
0001624d: R4 := pad:64[31:0[R4] + 31:0[R7]]
00016254: R1 := pad:64[31:0[R14] + 31:0[R1]]
0001625b: R22 := pad:64[31:0[R22] + 31:0[R4]]
00016260: R14 := 0xF235
00016266: R14 := pad:64[0xBD3A.15:0[R14]]
0001626d: R13 := pad:64[31:0[R13] + 31:0[R14]]
00016272: R3 := 0xD2BB
00016279: R22 := pad:64[10:0[R22].31:11[R22]]
00016280: R22 := pad:64[31:0[R23] + 31:0[R22]]
00016286: R3 := pad:64[0x2AD7.15:0[R3]]
0001628d: R4 := pad:64[31:0[R22] | ~31:0[R25]]
00016294: R3 := pad:64[31:0[R12] + 31:0[R3]]
0001629b: R4 := pad:64[31:0[R4] ^ 31:0[R23]]
000162a2: R4 := pad:64[31:0[R4] + 31:0[R28]]
000162a9: R21 := pad:64[31:0[R21] + 31:0[R4]]
000162b0: R21 := pad:64[25:0[R21].31:26[R21]]
000162b7: R21 := pad:64[31:0[R22] + 31:0[R21]]
000162be: R4 := pad:64[31:0[R21] | ~31:0[R23]]
000162c5: R4 := pad:64[31:0[R4] ^ 31:0[R22]]
000162cc: R4 := pad:64[31:0[R4] + 31:0[R25]]
000162d3: R20 := pad:64[31:0[R20] + 31:0[R4]]
000162da: R20 := pad:64[21:0[R20].31:22[R20]]
000162e1: R20 := pad:64[31:0[R21] + 31:0[R20]]
000162e8: R4 := pad:64[31:0[R20] | ~31:0[R22]]
000162ef: R4 := pad:64[31:0[R4] ^ 31:0[R21]]
000162f6: R4 := pad:64[31:0[R4] + 31:0[R23]]
000162fd: R6 := pad:64[31:0[R6] + 31:0[R4]]
00016304: R6 := pad:64[16:0[R6].31:17[R6]]
0001630b: R6 := pad:64[31:0[R20] + 31:0[R6]]
00016312: R4 := pad:64[31:0[R6] | ~31:0[R21]]
00016319: R4 := pad:64[31:0[R4] ^ 31:0[R20]]
00016320: R4 := pad:64[31:0[R4] + 31:0[R22]]
00016327: R19 := pad:64[31:0[R19] + 31:0[R4]]
0001632e: R19 := pad:64[10:0[R19].31:11[R19]]
00016335: R19 := pad:64[31:0[R6] + 31:0[R19]]
0001633c: R4 := pad:64[31:0[R19] | ~31:0[R20]]
00016343: R4 := pad:64[31:0[R4] ^ 31:0[R6]]
0001634a: R4 := pad:64[31:0[R4] + 31:0[R21]]
00016351: R18 := pad:64[31:0[R18] + 31:0[R4]]
00016358: R18 := pad:64[25:0[R18].31:26[R18]]
0001635f: R18 := pad:64[31:0[R19] + 31:0[R18]]
00016366: R4 := pad:64[31:0[R18] | ~31:0[R6]]
0001636d: R4 := pad:64[31:0[R4] ^ 31:0[R19]]
00016374: R4 := pad:64[31:0[R4] + 31:0[R20]]
0001637b: R17 := pad:64[31:0[R17] + 31:0[R4]]
00016382: R17 := pad:64[21:0[R17].31:22[R17]]
00016389: R17 := pad:64[31:0[R18] + 31:0[R17]]
00016390: R4 := pad:64[31:0[R17] | ~31:0[R19]]
00016397: R4 := pad:64[31:0[R4] ^ 31:0[R18]]
0001639e: R4 := pad:64[31:0[R4] + 31:0[R6]]
000163a5: R4 := pad:64[31:0[R5] + 31:0[R4]]
000163ac: R4 := pad:64[16:0[R4].31:17[R4]]
000163b3: R4 := pad:64[31:0[R17] + 31:0[R4]]
000163ba: R5 := pad:64[31:0[R4] | ~31:0[R18]]
000163c1: R5 := pad:64[31:0[R5] ^ 31:0[R17]]
000163c8: R5 := pad:64[31:0[R5] + 31:0[R19]]
000163cf: R2 := pad:64[31:0[R2] + 31:0[R5]]
000163d6: R2 := pad:64[10:0[R2].31:11[R2]]
000163dd: R2 := pad:64[31:0[R4] + 31:0[R2]]
000163e4: R5 := pad:64[31:0[R2] | ~31:0[R17]]
000163eb: R5 := pad:64[31:0[R5] ^ 31:0[R4]]
000163f2: R5 := pad:64[31:0[R5] + 31:0[R18]]
000163f9: R1 := pad:64[31:0[R1] + 31:0[R5]]
00016400: R1 := pad:64[25:0[R1].31:26[R1]]
00016407: R1 := pad:64[31:0[R2] + 31:0[R1]]
0001640e: R5 := pad:64[31:0[R1] | ~31:0[R4]]
00016415: R26 := pad:64[31:0[R26] + 31:0[R1]]
0001641c: R5 := pad:64[31:0[R5] ^ 31:0[R2]]
00016423: R5 := pad:64[31:0[R5] + 31:0[R17]]
0001642a: R13 := pad:64[31:0[R13] + 31:0[R5]]
00016431: R13 := pad:64[21:0[R13].31:22[R13]]
00016438: R13 := pad:64[31:0[R1] + 31:0[R13]]
0001643f: R5 := pad:64[31:0[R13] | ~31:0[R2]]
00016446: R10 := pad:64[31:0[R10] + 31:0[R13]]
0001644d: R5 := pad:64[31:0[R5] ^ 31:0[R1]]
00016454: R4 := pad:64[31:0[R5] + 31:0[R4]]
0001645b: R3 := pad:64[31:0[R3] + 31:0[R4]]
00016462: R3 := pad:64[16:0[R3].31:17[R3]]
00016469: R3 := pad:64[31:0[R13] + 31:0[R3]]
00016470: R1 := pad:64[31:0[R3] | ~31:0[R1]]
00016477: R8 := pad:64[31:0[R3] + 31:0[R8]]
0001647e: R1 := pad:64[31:0[R1] ^ 31:0[R13]]
00016485: R9 := pad:64[31:0[R9] + 31:0[R3]]
0001648c: R1 := pad:64[31:0[R1] + 31:0[R2]]
00016493: R11 := pad:64[31:0[R11] + 31:0[R1]]
0001649a: R11 := pad:64[10:0[R11].31:11[R11]]
000164a1: R8 := pad:64[31:0[R11] + 31:0[R8]]
000164a7: #264 := ~R0
000164ac: #265 := R27 + ~R0
000164b2: VF := extend:128[#265 + 1] <> extend:128[R27] + extend:128[#264] +
          1
000164b8: CF := pad:128[#265 + 1] <> pad:128[R27] + pad:128[#264] + 1
000164bc: ZF := #265 + 1 = 0
000164c0: NF := 63:63[#265 + 1]
000164c6: when CF & ~ZF goto %00015440
00035b13: goto %000164ca

000164ca:
000164ce: #266 := R31 + 0x10
000164d3: R19 := mem[#266, el]:u64
000164d8: R20 := mem[#266 + 8, el]:u64
000164de: #267 := R31 + 0x20
000164e3: R21 := mem[#267, el]:u64
000164e8: R22 := mem[#267 + 8, el]:u64
000164ee: #268 := R31 + 0x30
000164f3: R23 := mem[#268, el]:u64
000164f8: R24 := mem[#268 + 8, el]:u64
000164fe: #269 := R31 + 0x50
00016503: R27 := mem[#269, el]:u64
00016508: R28 := mem[#269 + 8, el]:u64
0001650f: R2 := mem[R31 + 0x68, el]:u64
00035b14: goto %00014557

00014557:
00014562: mem := mem with [R2, el]:u32 <- 31:0[R26]
00014568: mem := mem with [R2 + 4, el]:u32 <- 31:0[R8]
0001456e: #185 := R2 + 8
00014574: mem := mem with [#185, el]:u32 <- 31:0[R9]
0001457a: mem := mem with [#185 + 4, el]:u32 <- 31:0[R10]
00014580: #186 := R31 + 0x40
00014585: R25 := mem[#186, el]:u64
0001458a: R26 := mem[#186 + 8, el]:u64
00014591: R29 := mem[R31, el]:u64
00014596: R30 := mem[R31 + 8, el]:u64
0001459a: R31 := R31 + 0x70
0001459f: R0 := 0
000145a4: R1 := 0
000145a9: R2 := 0
000145ae: R3 := 0
000145b3: R4 := 0
000145b8: R5 := 0
000145bd: R6 := 0
000145c2: R7 := 0
000145c7: R8 := 0
000145cc: R9 := 0
000145d1: R10 := 0
000145d6: R11 := 0
000145db: R12 := 0
000145e0: R13 := 0
000145e5: R14 := 0
000145ea: R15 := 0
000145ef: R16 := 0
000145f4: R17 := 0
000145f9: R18 := 0
000145fe: call R30 with noreturn

00035b15: sub md5_process_bytes(md5_process_bytes_result)
00035ec4: md5_process_bytes_result :: out u32 = low:32[R0]

0001467c:
00014680: #190 := R31 - 0x40
00014686: mem := mem with [#190, el]:u64 <- R29
0001468c: mem := mem with [#190 + 8, el]:u64 <- R30
00014690: R31 := #190
00014696: R29 := R31
0001469c: #191 := R31 + 0x10
000146a2: mem := mem with [#191, el]:u64 <- R19
000146a8: mem := mem with [#191 + 8, el]:u64 <- R20
000146ae: R19 := R0
000146b5: R0 := pad:64[mem[R2 + 0x18, el]:u32]
000146bb: #192 := R31 + 0x20
000146c1: mem := mem with [#192, el]:u64 <- R21
000146c7: mem := mem with [#192 + 8, el]:u64 <- R22
000146cd: R21 := R2
000146d3: R22 := R1
000146d9: when 31:0[R0] <> 0 goto %000146d7
00035b16: goto %000147ff

000146d7:
000146e0: #193 := R31 + 0x30
000146e6: mem := mem with [#193, el]:u64 <- R23
000146ec: mem := mem with [#193 + 8, el]:u64 <- R24
000146f2: R23 := pad:64[31:0[R0]]
000146f7: R24 := 0x80
000146fe: R24 := R24 + ~R23 + 1
00014704: R20 := R2 + 0x1C
0001470a: #194 := ~R1
0001470f: #195 := R24 + ~R1
00014715: VF := extend:128[#195 + 1] <> extend:128[R24] + extend:128[#194] +
          1
0001471b: CF := pad:128[#195 + 1] <> pad:128[R24] + pad:128[#194] + 1
0001471f: ZF := #195 + 1 = 0
00014723: NF := 63:63[#195 + 1]
0001472a: R0 := R20 + R23
00014739: when ~(CF & ~ZF) goto %00014731
0001473a: goto %00014735

00014735:
00014736: R24 := R1
0001473c: goto %00014738

00014731:
00014732: R24 := R24
0001473b: goto %00014738

00014738:
00014742: R1 := R19
00014748: R2 := R24
0001474d: R30 := 0x413168
0001474f: call @memcpy with return %00014751

00014751:
00014756: R1 := pad:64[mem[R21 + 0x18, el]:u32]
0001475d: R1 := pad:64[31:0[R1] + 31:0[R24]]
00014765: mem := mem with [R21 + 0x18, el]:u32 <- 31:0[R1]
0001476b: #196 := 31:0[R1] - 0x40
00014770: VF := extend:64[#196] <> extend:64[31:0[R1]] - 0x40
00014775: CF := pad:64[#196] <> pad:64[31:0[R1]] + 0xFFFFFFC0
00014779: ZF := #196 = 0
0001477d: NF := 31:31[#196]
00014784: when CF & ~ZF goto %00014782
00035b17: goto %000147dd

00014782:
0001478b: R2 := R21
00014791: R0 := R20
00014797: R1 := pad:64[31:6[R1].0]
0001479c: R30 := 0x4131E8
0001479e: call @md5_process_block with return %000147a0

000147a0:
000147a5: R2 := pad:64[mem[R21 + 0x18, el]:u32]
000147ac: R0 := R23 + R24
000147b2: R1 := 63:6[R0].0
000147b8: R0 := R20
000147be: R2 := pad:64[5:0[R2]]
000147c6: mem := mem with [R21 + 0x18, el]:u32 <- 31:0[R2]
000147cd: R1 := R20 + R1
000147d3: R2 := pad:64[5:0[R2]]
000147d8: R30 := 0x41320C
000147da: call @memcpy with return %000147dc

000147dc:
000147df: goto %000147dd

000147dd:
000147e5: R19 := R19 + R24
000147ec: R22 := R22 + ~R24 + 1
000147f2: #197 := R31 + 0x30
000147f7: R23 := mem[#197, el]:u64
000147fc: R24 := mem[#197 + 8, el]:u64
00014801: goto %000147ff

000147ff:
00014806: #198 := R22 - 0x3F
0001480b: VF := extend:128[#198] <> extend:128[R22] - 0x3F
00014810: CF := pad:128[#198] <> pad:128[R22] + 0xFFFFFFFFFFFFFFC1
00014814: ZF := #198 = 0
00014818: NF := 63:63[#198]
0001481f: when ~(CF & ~ZF) goto %0001481d
00035b18: goto %000150c1

000150c1:
000150c4: VF := 0
000150c7: CF := 0
000150cb: ZF := pad:64[1:0[R19]] = 0
000150ce: NF := 0
000150d3: when ZF goto %00014934
00035b19: goto %000150d7

00014934:
00014938: R20 := 63:6[R22].0
0001493e: R0 := R19
00014944: R22 := pad:64[5:0[R22]]
0001494b: R19 := R19 + R20
00014951: R2 := R21
00014957: R1 := R20
0001495c: R30 := 0x413114
0001495e: call @md5_process_block with return %0001481d

0001481d:
00014826: when R22 <> 0 goto %00014824
00035b1a: goto %00015073

00014824:
0001482d: R20 := R21 + 0x1C
00014833: #199 := R31 + 0x30
00014839: mem := mem with [#199, el]:u64 <- R23
0001483f: mem := mem with [#199 + 8, el]:u64 <- R24
00014845: R23 := R19
0001484a: goto %00014848

00015073:
00015077: #238 := R31 + 0x10
0001507c: R19 := mem[#238, el]:u64
00015081: R20 := mem[#238 + 8, el]:u64
00015087: #239 := R31 + 0x20
0001508c: R21 := mem[#239, el]:u64
00015091: R22 := mem[#239 + 8, el]:u64
00015098: R29 := mem[R31, el]:u64
0001509d: R30 := mem[R31 + 8, el]:u64
000150a1: R31 := R31 + 0x40
000150a6: R0 := 0
000150ab: R1 := 0
000150b0: R2 := 0
000150b5: R16 := 0
000150ba: R17 := 0
000150bf: call R30 with noreturn

000150d7:
000150db: #240 := R22 - 0x40
000150e0: VF := extend:128[#240] <> extend:128[R22] - 0x40
000150e5: CF := pad:128[#240] <> pad:128[R22] + 0xFFFFFFFFFFFFFFC0
000150e9: ZF := #240 = 0
000150ed: NF := 63:63[#240]
000150f3: when ZF goto %000150f1
00035b1b: goto %0001514c

000150f1:
000150fb: R22 := pad:64[mem[R21 + 0x18, el]:u32]
00015101: R20 := R21 + 0x1C
00015108: V0 := mem[R19, el]:u128
0001510d: V1 := mem[R19 + 0x10, el]:u128
00015114: R0 := R20 + R22
0001511a: R22 := R22 + 0x40
00015122: mem := mem with [R0, el]:u128 <- V0
00015128: mem := mem with [R0 + 0x10, el]:u128 <- V1
0001512e: #241 := R19 + 0x20
00015133: V0 := mem[#241, el]:u128
00015138: V1 := mem[#241 + 0x10, el]:u128
0001513e: #242 := R0 + 0x20
00015144: mem := mem with [#242, el]:u128 <- V0
0001514a: mem := mem with [#242 + 0x10, el]:u128 <- V1
00035b1c: goto %0001489e

0001514c:
00015150: #243 := R31 + 0x30
00015156: mem := mem with [#243, el]:u64 <- R23
0001515c: mem := mem with [#243 + 8, el]:u64 <- R24
00015162: R24 := R22 - 0x41
00015168: R20 := R21 + 0x1C
0001516e: R24 := pad:64[63:6[R24]]
00015174: R23 := R24 + 1
0001517b: R23 := R19 + (57:0[R23].0)
00035b1d: goto %0001517f

0001517f:
00015184: V0 := mem[R19, el]:u128
00015189: V1 := mem[R19 + 0x10, el]:u128
0001518f: R2 := R21
00015195: R0 := R20
0001519a: R1 := 0x40
000151a2: mem := mem with [R20, el]:u128 <- V0
000151a8: mem := mem with [R20 + 0x10, el]:u128 <- V1
000151ae: #244 := R19 + 0x20
000151b3: V0 := mem[#244, el]:u128
000151b8: V1 := mem[#244 + 0x10, el]:u128
000151be: R19 := R19 + 0x40
000151c4: #245 := R20 + 0x20
000151ca: mem := mem with [#245, el]:u128 <- V0
000151d0: mem := mem with [#245 + 0x10, el]:u128 <- V1
000151d5: R30 := 0x41309C
000151d7: call @md5_process_block with return %000151d9

000151d9:
000151dd: #246 := ~R23
000151e2: #247 := R19 + ~R23
000151e8: VF := extend:128[#247 + 1] <> extend:128[R19] + extend:128[#246] +
          1
000151ee: CF := pad:128[#247 + 1] <> pad:128[R19] + pad:128[#246] + 1
000151f2: ZF := #247 + 1 = 0
000151f6: NF := 63:63[#247 + 1]
000151fb: when ZF <> 1 goto %0001517f
00035b1e: goto %000151ff

000151ff:
00015203: R22 := R22 - 0x40
0001520a: R22 := R22 + ~(57:0[R24].0) + 1
00035b1f: goto %00014848

00014848:
00014850: R19 := pad:64[mem[R21 + 0x18, el]:u32]
00014856: R1 := R23
0001485c: R2 := R22
00014863: R0 := R20 + R19
0001486a: R22 := R19 + R22
0001486f: R30 := 0x4130C4
00014871: call @memcpy with return %00014873

00014873:
00014877: #200 := R31 + 0x30
0001487c: R23 := mem[#200, el]:u64
00014881: R24 := mem[#200 + 8, el]:u64
00014887: #201 := R22 - 0x3F
0001488c: VF := extend:128[#201] <> extend:128[R22] - 0x3F
00014891: CF := pad:128[#201] <> pad:128[R22] + 0xFFFFFFFFFFFFFFC1
00014895: ZF := #201 = 0
00014899: NF := 63:63[#201]
000148a0: when CF & ~ZF goto %0001489e
00035b20: goto %00014960

0001489e:
000148a7: R2 := R21
000148ad: R0 := R20
000148b3: R22 := R22 - 0x40
000148b8: R1 := 0x40
000148bd: R30 := 0x4131C0
000148bf: call @md5_process_block with return %000148c1

000148c1:
000148c5: R0 := R20
000148cb: R2 := R22
000148d1: R1 := R21 + 0x5C
000148d6: R30 := 0x4131D0
000148d8: call @memcpy with return %000148da

000148da:
000148e0: mem := mem with [R21 + 0x18, el]:u32 <- 31:0[R22]
000148e5: goto %000148e3

00014960:
00014966: mem := mem with [R21 + 0x18, el]:u32 <- 31:0[R22]
00035b21: goto %000148e3

000148e3:
000148ea: #202 := R31 + 0x10
000148ef: R19 := mem[#202, el]:u64
000148f4: R20 := mem[#202 + 8, el]:u64
000148fa: #203 := R31 + 0x20
000148ff: R21 := mem[#203, el]:u64
00014904: R22 := mem[#203 + 8, el]:u64
0001490b: R29 := mem[R31, el]:u64
00014910: R30 := mem[R31 + 8, el]:u64
00014914: R31 := R31 + 0x40
00014919: R0 := 0
0001491e: R1 := 0
00014923: R2 := 0
00014928: R16 := 0
0001492d: R17 := 0
00014932: call R30 with noreturn

00035b22: sub md5_read_ctx(md5_read_ctx_result)
00035ec5: md5_read_ctx_result :: out u32 = low:32[R0]

00014417:
0001441b: #177 := R31 - 0x10
00014421: mem := mem with [#177, el]:u64 <- R29
00014427: mem := mem with [#177 + 8, el]:u64 <- R30
0001442b: R31 := #177
00014431: R29 := R31
00014437: when R0 = 0 goto %00014435
00035b23: goto %00016526

00014435:
0001443d: R3 := 0x417000
00014443: R3 := R3 + 0x8F0
00014448: R1 := 0x417000
0001444d: R0 := 0x417000
00014453: R3 := R3 + 0xAE8
00014459: R1 := R1 + 0x1C0
0001445f: R0 := R0 + 0x228
00014464: R2 := 0x397
00014469: R30 := 0x412458
0001446b: call @__assert_fail with return %0001446d

00016526:
00016529: when R1 = 0 goto %0001446d
00035b24: goto %0001652d

0001446d:
00014470: R3 := 0x417000
00014476: R3 := R3 + 0x8F0
0001447b: R1 := 0x417000
00014480: R0 := 0x417000
00014486: R3 := R3 + 0xAE8
0001448c: R1 := R1 + 0x1C0
00014492: R0 := R0 + 0x238
00014497: R2 := 0x398
0001449c: R30 := 0x41247C
0001449e: call @__assert_fail with return %000144a0

000144a0:
00035b25: call @md5_process_block with noreturn

0001652d:
00016531: R2 := R0
00016537: R0 := R1
0001653e: R3 := pad:64[mem[R2, el]:u32]
00016546: mem := mem with [R1, el]:u32 <- 31:0[R3]
0001654d: R3 := pad:64[mem[R2 + 4, el]:u32]
00016555: mem := mem with [R1 + 4, el]:u32 <- 31:0[R3]
0001655c: R3 := pad:64[mem[R2 + 8, el]:u32]
00016564: mem := mem with [R1 + 8, el]:u32 <- 31:0[R3]
0001656b: R2 := pad:64[mem[R2 + 0xC, el]:u32]
00016573: mem := mem with [R1 + 0xC, el]:u32 <- 31:0[R2]
0001657a: R29 := mem[R31, el]:u64
0001657f: R30 := mem[R31 + 8, el]:u64
00016583: R31 := R31 + 0x10
00016588: R1 := 0
0001658d: R2 := 0
00016592: R3 := 0
00016597: R16 := 0
0001659c: R17 := 0
000165a1: call R30 with noreturn

00035b26: sub md5_stream(md5_stream_result)
00035ec6: md5_stream_result :: out u32 = low:32[R0]

00014d02:
00014d06: #219 := R31 - 0x50
00014d0c: mem := mem with [#219, el]:u64 <- R29
00014d12: mem := mem with [#219 + 8, el]:u64 <- R30
00014d16: R31 := #219
00014d1b: R13 := 0x10F0
00014d21: R29 := R31
00014d26: R2 := 0x42F000
00014d2d: R2 := mem[R2 + 0xFB8, el]:u64
00014d33: #220 := R31 + 0x10
00014d39: mem := mem with [#220, el]:u64 <- R19
00014d3f: mem := mem with [#220 + 8, el]:u64 <- R20
00014d45: R20 := R0
00014d4b: #221 := R31 + 0x20
00014d51: mem := mem with [#221, el]:u64 <- R21
00014d57: mem := mem with [#221 + 8, el]:u64 <- R22
00014d5c: R21 := 0x1048
00014d62: #222 := R31 + 0x30
00014d68: mem := mem with [#222, el]:u64 <- R23
00014d6e: mem := mem with [#222 + 8, el]:u64 <- R24
00014d73: R23 := 0x1000
00014d79: R24 := R1
00014d81: mem := mem with [R31 + 0x40, el]:u64 <- R25
00014d88: R31 := R31 + ~R13 + 1
00014d8e: R22 := R31 + 0xA0
00014d94: R25 := R31
00014d9b: R0 := mem[R2, el]:u64
00014da3: mem := mem with [R31 + 0x10E8, el]:u64 <- R0
00014da8: R0 := 0
00014dae: R0 := R25
00014db3: R30 := 0x4134A4
00014db5: call @md5_init_ctx with return %00014db7

00014db7:
00014dba: R19 := 0
00014dbf: goto %00014dbd

00014dbd:
00014dc4: #223 := ~R21
00014dc9: #224 := R19 + ~R21
00014dcf: VF := extend:128[#224 + 1] <> extend:128[R19] + extend:128[#223] +
          1
00014dd5: CF := pad:128[#224 + 1] <> pad:128[R19] + pad:128[#223] + 1
00014dd9: ZF := #224 + 1 = 0
00014ddd: NF := 63:63[#224 + 1]
00014de4: R3 := R23 + ~R19 + 1
00014df2: when CF goto %00014dea
00014df3: goto %00014dee

00014dee:
00014def: R1 := R21
00014df5: goto %00014df1

00014dea:
00014deb: R1 := R19
00014df4: goto %00014df1

00014df1:
00014dfc: R0 := R22 + R19
00014e03: R1 := R1 + ~R19 + 1
00014e09: R4 := R20
00014e0e: R2 := 1
00014e13: R30 := 0x4134DC
00014e15: call @__fread_chk with return %00014e17

00014e17:
00014e1c: R19 := R19 + R0
00014e22: #225 := R19 - 0x1000
00014e27: VF := extend:128[#225] <> extend:128[R19] - 0x1000
00014e2c: CF := pad:128[#225] <> pad:128[R19] + 0xFFFFFFFFFFFFF000
00014e30: ZF := #225 = 0
00014e34: NF := 63:63[#225]
00014e3a: when ZF <> 1 goto %00014e38
00035b27: goto %00014f7f

00014f7f:
00014f83: R1 := R19
00014f89: R2 := R25
00014f8f: R0 := R22
00014f94: R30 := 0x4134F8
00014f96: call @md5_process_block with return %00014f98

00014f98:
00014f9a: goto %00014db7

00014e38:
00014e41: when R0 = 0 goto %00014e3f
00035b28: goto %00014f6a

00014e3f:
00014e48: R0 := R20
00014e4d: R30 := 0x413504
00014e4f: call @ferror with return %00014e51

00014e51:
00014e55: R1 := pad:64[31:0[R0]]
00014e5a: R0 := 1
00014e60: when 31:0[R1] <> 0 goto %00014e5e
00035b29: goto %00014f63

00014f6a:
00014f6e: R0 := R20
00014f73: R30 := 0x4134B8
00014f76: call @feof with return %00014f78

00014f78:
00014f7b: when 31:0[R0] <> 0 goto %00014f63
00035b2a: goto %00014dbd

00014f63:
00014f66: when R19 <> 0 goto %00014f2e
00035b2b: goto %00014f48

00014f2e:
00014f32: R1 := R19
00014f38: R0 := R22
00014f3e: R2 := R25
00014f43: R30 := 0x41358C
00014f45: call @md5_process_bytes with return %00014f47

00014f47:
00014f4a: goto %00014f48

00014f48:
00014f4f: R1 := R24
00014f55: R0 := R25
00014f5a: R30 := 0x413520
00014f5c: call @md5_finish_ctx with return %00014f5e

00014f5e:
00014f61: R0 := 0
00035b2c: goto %00014e5e

00014e5e:
00014e66: R1 := 0x42F000
00014e6d: R1 := mem[R1 + 0xFB8, el]:u64
00014e74: R3 := mem[R31 + 0x10E8, el]:u64
00014e7b: R2 := mem[R1, el]:u64
00014e81: #226 := ~R2
00014e86: #227 := R3 + ~R2
00014e8c: VF := extend:128[#227 + 1] <> extend:128[R3] + extend:128[#226] + 1
00014e92: CF := pad:128[#227 + 1] <> pad:128[R3] + pad:128[#226] + 1
00014e96: ZF := #227 + 1 = 0
00014e9a: NF := 63:63[#227 + 1]
00014e9e: R3 := #227 + 1
00014ea3: R2 := 0
00014ea9: when ZF <> 1 goto %00014ea7
00035b2d: goto %00014eb3

00014ea7:
00014eaf: R30 := 0x413594
00014eb1: call @__stack_chk_fail with return %00035b2e

00035b2e:
00035b2f: call @_fini with noreturn

00014eb3:
00014eb6: R13 := 0x10F0
00014ebd: R31 := R31 + R13
00014ec3: #228 := R31 + 0x10
00014ec8: R19 := mem[#228, el]:u64
00014ecd: R20 := mem[#228 + 8, el]:u64
00014ed3: #229 := R31 + 0x20
00014ed8: R21 := mem[#229, el]:u64
00014edd: R22 := mem[#229 + 8, el]:u64
00014ee3: #230 := R31 + 0x30
00014ee8: R23 := mem[#230, el]:u64
00014eed: R24 := mem[#230 + 8, el]:u64
00014ef4: R25 := mem[R31 + 0x40, el]:u64
00014efb: R29 := mem[R31, el]:u64
00014f00: R30 := mem[R31 + 8, el]:u64
00014f04: R31 := R31 + 0x50
00014f09: R1 := 0
00014f0e: R2 := 0
00014f13: R3 := 0
00014f18: R4 := 0
00014f1d: R13 := 0
00014f22: R16 := 0
00014f27: R17 := 0
00014f2c: call R30 with noreturn

00035b30: sub memcmp(memcmp_s1, memcmp_s2, memcmp_n, memcmp_result)
00035ec7: memcmp_s1 :: in out u64 = R0
00035ec8: memcmp_s2 :: in out u64 = R1
00035ec9: memcmp_n :: in u64 = R2
00035eca: memcmp_result :: out u32 = low:32[R0]

000121fc:
00030e23: R16 := 0x42F000
00030e2a: R17 := mem[R16 + 0xD80, el]:u64
00030e30: R16 := R16 + 0xD80
00030e35: call R17 with noreturn

00035b31: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
00035ecb: memcpy_dst :: in out u64 = R0
00035ecc: memcpy_src :: in out u64 = R1
00035ecd: memcpy_n :: in u64 = R2
00035ece: memcpy_result :: out u64 = R0

00013c08:
00030911: R16 := 0x42F000
00030918: R17 := mem[R16 + 0xBA8, el]:u64
0003091e: R16 := R16 + 0xBA8
00030923: call R17 with noreturn

00035b32: sub memset(memset_buf, memset_c, memset_n, memset_result)
00035ecf: memset_buf :: in out u64 = R0
00035ed0: memset_c :: in u32 = low:32[R1]
00035ed1: memset_n :: in u64 = R2
00035ed2: memset_result :: out u64 = R0

0001c8fa:
00030bfd: R16 := 0x42F000
00030c04: R17 := mem[R16 + 0xCB8, el]:u64
00030c0a: R16 := R16 + 0xCB8
00030c0f: call R17 with noreturn

00035b33: sub memxor(memxor_result)
00035ed3: memxor_result :: out u32 = low:32[R0]

0001424e:
00014251: VF := 0
00014254: CF := 1
00014258: ZF := R0 = 0
0001425c: NF := 63:63[R0]
00014262: #170 := ZF <> 1
00014265: VF := 0
00014269: CF := #170
0001426e: ZF := R1 = 0 | ~#170
00014273: NF := #170 & 63:63[R1]
00014279: when ZF <> 1 goto %00014277
00035b34: goto %000165e8

00014277:
0001427f: R3 := 0
00014285: when R2 = 0 goto %00014283
00035b35: goto %000142b0

000142b0:
000142b6: R4 := pad:64[mem[R0 + R3]]
000142be: R5 := pad:64[mem[R1 + R3]]
000142c5: R4 := pad:64[31:0[R4] ^ 31:0[R5]]
000142ce: mem := mem with [R0 + R3] <- 7:0[R4]
000142d4: R3 := R3 + 1
000142da: #171 := ~R3
000142df: #172 := R2 + ~R3
000142e5: VF := extend:128[#172 + 1] <> extend:128[R2] + extend:128[#171] + 1
000142eb: CF := pad:128[#172 + 1] <> pad:128[R2] + pad:128[#171] + 1
000142ef: ZF := #172 + 1 = 0
000142f3: NF := 63:63[#172 + 1]
000142f8: when ZF goto %00014283
00035b36: goto %000142fc

000142fc:
00014302: R4 := pad:64[mem[R0 + R3]]
0001430a: R5 := pad:64[mem[R1 + R3]]
00014311: R4 := pad:64[31:0[R4] ^ 31:0[R5]]
0001431a: mem := mem with [R0 + R3] <- 7:0[R4]
00014320: R3 := R3 + 1
00014326: #173 := ~R3
0001432b: #174 := R2 + ~R3
00014331: VF := extend:128[#174 + 1] <> extend:128[R2] + extend:128[#173] + 1
00014337: CF := pad:128[#174 + 1] <> pad:128[R2] + pad:128[#173] + 1
0001433b: ZF := #174 + 1 = 0
0001433f: NF := 63:63[#174 + 1]
00014344: when ZF <> 1 goto %000142b0
00035b37: goto %00014348

00014348:
0001434b: R1 := 0
00014350: R2 := 0
00014355: R3 := 0
0001435a: R4 := 0
0001435f: R5 := 0
00014364: R16 := 0
00014369: R17 := 0
0001436e: call R30 with noreturn

000165e8:
000165eb: when R2 <> 0 goto %00014370
00035b38: goto %00014283

00014370:
00014374: #175 := R31 - 0x10
0001437a: mem := mem with [#175, el]:u64 <- R29
00014380: mem := mem with [#175 + 8, el]:u64 <- R30
00014384: R31 := #175
00014389: R3 := 0x417000
0001438f: R3 := R3 + 0x8F0
00014395: R29 := R31
0001439a: R1 := 0x417000
0001439f: R0 := 0x417000
000143a5: R3 := R3 + 0xAD0
000143ab: R1 := R1 + 0x1C0
000143b1: R0 := R0 + 0x200
000143b6: R2 := 0x345
000143bb: R30 := 0x41237C
000143bd: call @__assert_fail with return %000143bf

000143bf:
00035b39: call @md5_init_ctx with noreturn

00014283:
0001428b: R1 := 0
00014290: R2 := 0
00014295: R3 := 0
0001429a: R4 := 0
0001429f: R5 := 0
000142a4: R16 := 0
000142a9: R17 := 0
000142ae: call R30 with noreturn

00035b3a: sub myexit(myexit_result)
00035ed4: myexit_result :: out u32 = low:32[R0]

0001a3e6:
0001a3ea: #520 := R31 - 0x20
0001a3f0: mem := mem with [#520, el]:u64 <- R29
0001a3f6: mem := mem with [#520 + 8, el]:u64 <- R30
0001a3fa: R31 := #520
0001a400: R29 := R31
0001a408: mem := mem with [R31 + 0x10, el]:u64 <- R19
0001a40e: R19 := pad:64[31:0[R0]]
0001a414: when 31:0[R0] <> 0 goto %0001a412
00035b3b: goto %0001a442

0001a442:
0001a449: R0 := pad:64[31:0[R19]]
0001a44e: R30 := 0x40EEEC
0001a451: call @exit with return %0001a412

0001a412:
0001a41a: R0 := 0x42F000
0001a421: R0 := mem[R0 + 0xF18, el]:u64
0001a426: R2 := 0x416000
0001a42b: R1 := 2
0001a431: R2 := R2 + 0xEB8
0001a438: R0 := mem[R0, el]:u64
0001a43d: R30 := 0x40EF08
0001a43f: call @__fprintf_chk with return %0001a441

0001a441:
0001a444: goto %0001a442

00035b3c: sub new_auth(new_auth_result)
00035ed5: new_auth_result :: out u32 = low:32[R0]

00018e8a:
00018e91: #412 := R31 - 0x10
00018e97: mem := mem with [#412, el]:u64 <- R29
00018e9d: mem := mem with [#412 + 8, el]:u64 <- R30
00018ea1: R31 := #412
00018ea6: R0 := 0x13C
00018eac: R29 := R31
00018eb1: R30 := 0x405330
00018eb3: call @malloc with return %00018eb5

00018eb5:
00018eb9: when R0 = 0 goto %00018eb7
00035b3d: goto %0002bb2a

0002bb2a:
0002bb2d: V0 := 0
0002bb33: R5 := R0 + 0x32
0002bb3a: mem := mem with [R0 + 0x30, el]:u16 <- 0
0002bb40: R4 := R0 + 0x64
0002bb46: R3 := R0 + 0xFA
0002bb4c: R2 := R0 + 0xC8
0002bb52: R1 := R0 + 0x96
0002bb58: R6 := R0 + 0x200
0002bb60: mem := mem with [R0, el]:u128 <- V0
0002bb66: mem := mem with [R0 + 0x10, el]:u128 <- V0
0002bb6b: R7 := 0x417000
0002bb73: mem := mem with [R0 + 0x20, el]:u128 <- V0
0002bb7a: V1 := pad:128[mem[R7 + 0x248, el]:u64]
0002bb82: mem := mem with [R5, el]:u128 <- V0
0002bb88: mem := mem with [R5 + 0x10, el]:u128 <- V0
0002bb90: mem := mem with [R5 + 0x20, el]:u128 <- V0
0002bb97: mem := mem with [R5 + 0x30, el]:u16 <- 0
0002bb9e: mem := mem with [R0 + 0x94, el]:u16 <- 0
0002bba6: mem := mem with [R4, el]:u128 <- V0
0002bbac: mem := mem with [R4 + 0x10, el]:u128 <- V0
0002bbb4: mem := mem with [R4 + 0x20, el]:u128 <- V0
0002bbbc: mem := mem with [R3, el]:u128 <- V0
0002bbc2: mem := mem with [R3 + 0x10, el]:u128 <- V0
0002bbca: mem := mem with [R3 + 0x20, el]:u128 <- V0
0002bbd1: mem := mem with [R3 + 0x30, el]:u16 <- 0
0002bbd8: mem := mem with [R0 + 0xF8, el]:u16 <- 0
0002bbe0: mem := mem with [R2, el]:u128 <- V0
0002bbe6: mem := mem with [R2 + 0x10, el]:u128 <- V0
0002bbee: mem := mem with [R2 + 0x20, el]:u128 <- V0
0002bbf6: mem := mem with [R1, el]:u128 <- V0
0002bbfc: mem := mem with [R1 + 0x10, el]:u128 <- V0
0002bc04: mem := mem with [R1 + 0x20, el]:u128 <- V0
0002bc0b: mem := mem with [R1 + 0x30, el]:u16 <- 0
0002bc12: mem := mem with [R6 - 0xCC, el]:u64 <- 0
0002bc1a: mem := mem with [R6 - 0xD4, el]:u64 <- 63:0[V1]
00035b3e: goto %00018eb7

00018eb7:
00018ec1: R29 := mem[R31, el]:u64
00018ec6: R30 := mem[R31 + 8, el]:u64
00018eca: R31 := R31 + 0x10
00018ecf: R1 := 0
00018ed4: R2 := 0
00018ed9: R3 := 0
00018ede: R4 := 0
00018ee3: R5 := 0
00018ee8: R6 := 0
00018eed: R7 := 0
00018ef2: R16 := 0
00018ef7: R17 := 0
00018efc: call R30 with noreturn

00035b3f: sub new_rr_data(new_rr_data_result)
00035ed6: new_rr_data_result :: out u32 = low:32[R0]

0001109e:
000110a2: #18 := R31 - 0x10
000110a8: mem := mem with [#18, el]:u64 <- R29
000110ae: mem := mem with [#18 + 8, el]:u64 <- R30
000110b2: R31 := #18
000110b7: R0 := 0x68
000110bd: R29 := R31
000110c2: R30 := 0x40F7C0
000110c5: call @malloc with return %000110c7

000110c7:
000110cb: R2 := R0 + 0x28
000110d0: R1 := 0x417000
000110d5: V1 := 0xFFFFFFFF00000000
000110da: V0 := 0
000110e1: mem := mem with [R0, el]:u32 <- 0
000110e8: V2 := mem[R1 + 0x3C0, el]:u128
000110ef: mem := mem with [R0 + 8, el]:u64 <- 0
000110f7: mem := mem with [R0 + 0x20, el]:u64 <- 63:0[V1]
000110ff: mem := mem with [R0 + 0x10, el]:u128 <- V2
00011107: mem := mem with [R2, el]:u128 <- V0
0001110d: mem := mem with [R2 + 0x10, el]:u128 <- V0
00011113: #19 := R2 + 0x20
00011119: mem := mem with [#19, el]:u128 <- V0
0001111f: mem := mem with [#19 + 0x10, el]:u128 <- V0
00011126: R29 := mem[R31, el]:u64
0001112b: R30 := mem[R31 + 8, el]:u64
0001112f: R31 := R31 + 0x10
00011134: R1 := 0
00011139: R2 := 0
0001113e: R16 := 0
00011143: R17 := 0
00011148: call R30 with noreturn

00035b40: sub noproxy_add(noproxy_add_result)
00035ed7: noproxy_add_result :: out u32 = low:32[R0]

0001f74b:
0001f74f: R31 := R31 - 0x50
0001f754: R2 := 0x42F000
0001f75b: R2 := mem[R2 + 0xFB8, el]:u64
0001f761: #824 := R31 + 0x10
0001f767: mem := mem with [#824, el]:u64 <- R29
0001f76d: mem := mem with [#824 + 8, el]:u64 <- R30
0001f773: R29 := R31 + 0x10
0001f779: #825 := R31 + 0x20
0001f77f: mem := mem with [#825, el]:u64 <- R19
0001f785: mem := mem with [#825 + 8, el]:u64 <- R20
0001f78b: R20 := R0
0001f791: R0 := R1
0001f797: #826 := R31 + 0x30
0001f79d: mem := mem with [#826, el]:u64 <- R21
0001f7a3: mem := mem with [#826 + 8, el]:u64 <- R22
0001f7a9: R22 := R31
0001f7ae: R21 := 0x414000
0001f7b5: R3 := mem[R2, el]:u64
0001f7bd: mem := mem with [R31 + 8, el]:u64 <- R3
0001f7c2: R3 := 0
0001f7c8: R21 := R21 + 0x9E0
0001f7ce: R1 := R21
0001f7d4: R2 := R22
0001f7d9: R30 := 0x40A5B8
0001f7dc: call @strtok_r with return %0001f7de

0001f7de:
0001f7e2: when R0 = 0 goto %0001f7e0
00035b41: goto %0002804f

0002804f:
00028053: R19 := R0
00028059: #1176 := R31 + 0x40
0002805f: mem := mem with [#1176, el]:u64 <- R23
00028065: mem := mem with [#1176 + 8, el]:u64 <- R24
0002806a: R24 := 0x414000
0002806f: R23 := 0x42F000
00028076: R23 := mem[R23 + 0xF30, el]:u64
0002807c: R24 := R24 + 0x9E8
00028081: goto %0002807f

0002807f:
00028087: R0 := pad:64[mem[R23, el]:u32]
0002808d: when 31:0[R0] = 0 goto %0002808b
00035b42: goto %000280f0

000280f0:
000280f4: R2 := R19
000280fa: R1 := R24
000280ff: R0 := 2
00028104: R30 := 0x40A624
00028106: call @__printf_chk with return %00028108

00028108:
0002810a: goto %0002808b

0002808b:
00028094: R0 := R19
00028099: R30 := 0x40A5E0
0002809b: call @strdup with return %0002809d

0002809d:
000280a0: R1 := 0
000280a6: R2 := R0
000280ac: R0 := R20
000280b1: R30 := 0x40A5F0
000280b3: call @plist_add with return %000280b5

000280b5:
000280b9: R2 := R22
000280bf: R20 := R0
000280c5: R1 := R21
000280ca: R0 := 0
000280cf: R30 := 0x40A604
000280d1: call @strtok_r with return %000280d3

000280d3:
000280d7: R19 := R0
000280dd: when R0 = 0 goto %000280db
00035b43: goto %0002807f

000280db:
000280e4: #1177 := R31 + 0x40
000280e9: R23 := mem[#1177, el]:u64
000280ee: R24 := mem[#1177 + 8, el]:u64
00035b44: goto %0001f7e0

0001f7e0:
0001f7e8: R0 := 0x42F000
0001f7ef: R0 := mem[R0 + 0xFB8, el]:u64
0001f7f6: R2 := mem[R31 + 8, el]:u64
0001f7fd: R1 := mem[R0, el]:u64
0001f803: #827 := ~R1
0001f808: #828 := R2 + ~R1
0001f80e: VF := extend:128[#828 + 1] <> extend:128[R2] + extend:128[#827] + 1
0001f814: CF := pad:128[#828 + 1] <> pad:128[R2] + pad:128[#827] + 1
0001f818: ZF := #828 + 1 = 0
0001f81c: NF := 63:63[#828 + 1]
0001f820: R2 := #828 + 1
0001f825: R1 := 0
0001f82b: when ZF <> 1 goto %0001f829
00035b45: goto %00027ff5

0001f829:
0001f832: #829 := R31 + 0x40
0001f838: mem := mem with [#829, el]:u64 <- R23
0001f83e: mem := mem with [#829 + 8, el]:u64 <- R24
0001f843: R30 := 0x40A67C
0001f845: call @__stack_chk_fail with return %0001f847

0001f847:
00035b46: call @noproxy_match with noreturn

00027ff5:
00027ff9: #1173 := R31 + 0x10
00027ffe: R29 := mem[#1173, el]:u64
00028003: R30 := mem[#1173 + 8, el]:u64
00028009: R0 := R20
0002800f: #1174 := R31 + 0x20
00028014: R19 := mem[#1174, el]:u64
00028019: R20 := mem[#1174 + 8, el]:u64
0002801f: #1175 := R31 + 0x30
00028024: R21 := mem[#1175, el]:u64
00028029: R22 := mem[#1175 + 8, el]:u64
0002802f: R31 := R31 + 0x50
00028034: R1 := 0
00028039: R2 := 0
0002803e: R3 := 0
00028043: R16 := 0
00028048: R17 := 0
0002804d: call R30 with noreturn

00035b47: sub noproxy_match(noproxy_match_result)
00035ed8: noproxy_match_result :: out u32 = low:32[R0]

0001f849:
0001f84c: R1 := 0x42F000
0001f853: R1 := mem[R1 + 0xF78, el]:u64
0001f859: #830 := R31 - 0x30
0001f85f: mem := mem with [#830, el]:u64 <- R29
0001f865: mem := mem with [#830 + 8, el]:u64 <- R30
0001f869: R31 := #830
0001f86f: R29 := R31
0001f875: #831 := R31 + 0x10
0001f87b: mem := mem with [#831, el]:u64 <- R19
0001f881: mem := mem with [#831 + 8, el]:u64 <- R20
0001f888: R19 := mem[R1, el]:u64
0001f88e: when R19 = 0 goto %0001f88c
00035b48: goto %00027fc2

00027fc2:
00027fc5: R20 := 0x42F000
00027fcc: R20 := mem[R20 + 0xF30, el]:u64
00027fd2: #1172 := R31 + 0x20
00027fd8: mem := mem with [#1172, el]:u64 <- R21
00027fde: mem := mem with [#1172 + 8, el]:u64 <- R22
00027fe3: R22 := 0x414000
00027fe9: R21 := R0
00027fef: R22 := R22 + 0xA18
00027ff3: goto %0001f91a

0001f91a:
0001f91f: R0 := mem[R19 + 8, el]:u64
0001f924: when R0 = 0 goto %0001f8e9
00035b49: goto %0001f928

0001f928:
0001f92d: R3 := pad:64[mem[R0]]
0001f932: when 31:0[R3] <> 0 goto %0001f8d4
00035b4a: goto %0001f8e9

0001f8d4:
0001f8d8: R1 := R21
0001f8dd: R2 := 0
0001f8e2: R30 := 0x40A728
0001f8e5: call @fnmatch with return %0001f8e7

0001f8e7:
0001f8eb: when 31:0[R0] <> 0 goto %0001f8e9
00035b4b: goto %0001f963

0001f963:
0001f968: R0 := pad:64[mem[R20, el]:u32]
0001f96e: when 31:0[R0] <> 0 goto %0001f96c
00035b4c: goto %0001f996

0001f96c:
0001f976: R3 := mem[R19 + 8, el]:u64
0001f97c: R2 := R21
0001f981: R1 := 0x414000
0001f986: R0 := 2
0001f98c: R1 := R1 + 0xA08
0001f991: R30 := 0x40A758
0001f993: call @__printf_chk with return %0001f995

0001f995:
0001f998: goto %0001f996

0001f996:
0001f99d: #834 := R31 + 0x20
0001f9a2: R21 := mem[#834, el]:u64
0001f9a7: R22 := mem[#834 + 8, el]:u64
0001f9ac: R0 := 1
0001f9b0: goto %0001f896

0001f8e9:
0001f8f3: R3 := pad:64[mem[R20, el]:u32]
0001f8f9: when 31:0[R3] = 0 goto %0001f8f7
00035b4d: goto %0001f936

0001f936:
0001f93b: R3 := mem[R19 + 8, el]:u64
0001f941: R2 := R21
0001f947: R1 := R22
0001f94c: R0 := 2
0001f951: R30 := 0x40A6EC
0001f953: call @__printf_chk with return %0001f955

0001f955:
0001f95a: R19 := mem[R19 + 0x10, el]:u64
0001f95f: when R19 <> 0 goto %0001f91a
00035b4e: goto %0001f905

0001f8f7:
0001f901: R19 := mem[R19 + 0x10, el]:u64
0001f907: when R19 = 0 goto %0001f905
00035b4f: goto %0001f91a

0001f905:
0001f90e: #833 := R31 + 0x20
0001f913: R21 := mem[#833, el]:u64
0001f918: R22 := mem[#833 + 8, el]:u64
00035b50: goto %0001f88c

0001f88c:
0001f894: R0 := 0
00035b51: goto %0001f896

0001f896:
0001f89a: #832 := R31 + 0x10
0001f89f: R19 := mem[#832, el]:u64
0001f8a4: R20 := mem[#832 + 8, el]:u64
0001f8ab: R29 := mem[R31, el]:u64
0001f8b0: R30 := mem[R31 + 8, el]:u64
0001f8b4: R31 := R31 + 0x30
0001f8b9: R1 := 0
0001f8be: R2 := 0
0001f8c3: R3 := 0
0001f8c8: R16 := 0
0001f8cd: R17 := 0
0001f8d2: call R30 with noreturn

00035b52: sub ntlm2_hash_password(ntlm2_hash_password_result)
00035ed9: ntlm2_hash_password_result :: out u32 = low:32[R0]

0001c95e:
0001c962: R31 := R31 - 0x50
0001c967: R3 := 0x42F000
0001c96e: R3 := mem[R3 + 0xFB8, el]:u64
0001c974: #662 := R31 + 0x10
0001c97a: mem := mem with [#662, el]:u64 <- R29
0001c980: mem := mem with [#662 + 8, el]:u64 <- R30
0001c986: R29 := R31 + 0x10
0001c98c: #663 := R31 + 0x20
0001c992: mem := mem with [#663, el]:u64 <- R19
0001c998: mem := mem with [#663 + 8, el]:u64 <- R20
0001c99e: #664 := R31 + 0x30
0001c9a4: mem := mem with [#664, el]:u64 <- R21
0001c9aa: mem := mem with [#664 + 8, el]:u64 <- R22
0001c9b0: R22 := R1
0001c9b8: mem := mem with [R31 + 0x40, el]:u64 <- R23
0001c9be: R23 := R0
0001c9c4: R0 := R2
0001c9cb: R1 := mem[R3, el]:u64
0001c9d3: mem := mem with [R31 + 8, el]:u64 <- R1
0001c9d8: R1 := 0
0001c9dd: R30 := 0x40B6EC
0001c9df: call @ntlm_hash_nt_password with return %0001c9e1

0001c9e1:
0001c9e5: R21 := R0
0001c9eb: R0 := R23
0001c9f0: R30 := 0x40B6F8
0001c9f2: call @strlen with return %0001c9f4

0001c9f4:
0001c9f8: R19 := R0
0001c9fe: R0 := R22
0001ca03: R30 := 0x40B704
0001ca05: call @strlen with return %0001ca07

0001ca07:
0001ca0c: R19 := R19 + R0
0001ca12: R19 := R19 + 1
0001ca18: R0 := R19
0001ca1d: R30 := 0x40B714
0001ca1f: call @zmalloc with return %0001ca21

0001ca21:
0001ca25: R2 := R19
0001ca2b: R20 := R0
0001ca31: R1 := R23
0001ca36: R30 := 0x40B724
0001ca39: call @strlcat with return %0001ca3b

0001ca3b:
0001ca3f: R2 := R19
0001ca45: R1 := R22
0001ca4b: R0 := R20
0001ca50: R30 := 0x40B734
0001ca52: call @strlcat with return %0001ca54

0001ca54:
0001ca58: R0 := R20
0001ca5d: R30 := 0x40B73C
0001ca5f: call @uppercase with return %0001ca61

0001ca61:
0001ca65: R1 := R20
0001ca6b: R0 := R31
0001ca70: R30 := 0x40B748
0001ca72: call @unicode with return %0001ca74

0001ca74:
0001ca78: R19 := pad:64[31:0[R0]]
0001ca7d: R0 := 0x11
0001ca82: R30 := 0x40B754
0001ca84: call @zmalloc with return %0001ca86

0001ca86:
0001ca8a: R4 := R0
0001ca91: R2 := mem[R31, el]:u64
0001ca97: R3 := extend:64[31:0[R19]]
0001ca9c: R1 := 0x10
0001caa2: R19 := R0
0001caa8: R0 := R21
0001caad: R30 := 0x40B770
0001caaf: call @hmac_md5 with return %0001cab1

0001cab1:
0001cab5: R0 := R21
0001caba: R30 := 0x40B778
0001cabc: call @free with return %0001cabe

0001cabe:
0001cac3: R0 := mem[R31, el]:u64
0001cac8: R30 := 0x40B780
0001caca: call @free with return %0001cacc

0001cacc:
0001cad0: R0 := R20
0001cad5: R30 := 0x40B788
0001cad7: call @free with return %0001cad9

0001cad9:
0001cadc: R0 := 0x42F000
0001cae3: R0 := mem[R0 + 0xFB8, el]:u64
0001caea: R2 := mem[R31 + 8, el]:u64
0001caf1: R1 := mem[R0, el]:u64
0001caf7: #665 := ~R1
0001cafc: #666 := R2 + ~R1
0001cb02: VF := extend:128[#666 + 1] <> extend:128[R2] + extend:128[#665] + 1
0001cb08: CF := pad:128[#666 + 1] <> pad:128[R2] + pad:128[#665] + 1
0001cb0c: ZF := #666 + 1 = 0
0001cb10: NF := 63:63[#666 + 1]
0001cb14: R2 := #666 + 1
0001cb19: R1 := 0
0001cb1f: when ZF <> 1 goto %0001cb1d
00035b53: goto %0001cb2b

0001cb1d:
0001cb25: R30 := 0x40B7DC
0001cb27: call @__stack_chk_fail with return %0001cb29

0001cb29:
00035b54: call @ntlm_request with noreturn

0001cb2b:
0001cb2f: #667 := R31 + 0x10
0001cb34: R29 := mem[#667, el]:u64
0001cb39: R30 := mem[#667 + 8, el]:u64
0001cb3f: R0 := R19
0001cb45: #668 := R31 + 0x20
0001cb4a: R19 := mem[#668, el]:u64
0001cb4f: R20 := mem[#668 + 8, el]:u64
0001cb55: #669 := R31 + 0x30
0001cb5a: R21 := mem[#669, el]:u64
0001cb5f: R22 := mem[#669 + 8, el]:u64
0001cb66: R23 := mem[R31 + 0x40, el]:u64
0001cb6c: R31 := R31 + 0x50
0001cb71: R1 := 0
0001cb76: R2 := 0
0001cb7b: R3 := 0
0001cb80: R4 := 0
0001cb85: R16 := 0
0001cb8a: R17 := 0
0001cb8f: call R30 with noreturn

00035b55: sub ntlm_calc_resp(ntlm_calc_resp_result)
00035eda: ntlm_calc_resp_result :: out u32 = low:32[R0]

0001c304:
0001c30b: R31 := R31 - 0x140
0001c310: R3 := 0x42F000
0001c317: R3 := mem[R3 + 0xFB8, el]:u64
0001c31d: #642 := R31 + 0x110
0001c323: mem := mem with [#642, el]:u64 <- R29
0001c329: mem := mem with [#642 + 8, el]:u64 <- R30
0001c32f: R29 := R31 + 0x110
0001c335: #643 := R31 + 0x120
0001c33b: mem := mem with [#643, el]:u64 <- R19
0001c341: mem := mem with [#643 + 8, el]:u64 <- R20
0001c347: R20 := R0
0001c34d: R19 := R31 + 8
0001c353: #644 := R31 + 0x130
0001c359: mem := mem with [#644, el]:u64 <- R21
0001c35f: mem := mem with [#644 + 8, el]:u64 <- R22
0001c365: R21 := R2
0001c36b: R22 := R1
0001c372: R0 := mem[R3, el]:u64
0001c37a: mem := mem with [R31 + 0x108, el]:u64 <- R0
0001c37f: R0 := 0
0001c384: R0 := 0x19
0001c389: R30 := 0x40B410
0001c38b: call @zmalloc with return %0001c38d

0001c38d:
0001c393: mem := mem with [R20, el]:u64 <- R0
0001c399: R1 := R19
0001c39f: R0 := R22
0001c3a4: R30 := 0x40B420
0001c3a7: call @ntlm_set_key with return %0001c56e

0001c56e:
0001c573: R2 := mem[R20, el]:u64
0001c578: R3 := 0
0001c57e: R1 := R21
0001c584: R0 := R19
0001c589: R30 := 0x40B434
0001c58b: call @gl_des_ecb_crypt with return %0001c58d

0001c58d:
0001c591: R1 := R19
0001c597: R0 := R22 + 7
0001c59c: R30 := 0x40B440
0001c59e: call @ntlm_set_key with return %0001c5a0

0001c5a0:
0001c5a5: R2 := mem[R20, el]:u64
0001c5aa: R3 := 0
0001c5b0: R1 := R21
0001c5b6: R0 := R19
0001c5bc: R2 := R2 + 8
0001c5c1: R30 := 0x40B458
0001c5c3: call @gl_des_ecb_crypt with return %0001c5c5

0001c5c5:
0001c5c9: R1 := R19
0001c5cf: R0 := R22 + 0xE
0001c5d4: R30 := 0x40B464
0001c5d6: call @ntlm_set_key with return %0001c5d8

0001c5d8:
0001c5dd: R2 := mem[R20, el]:u64
0001c5e3: R1 := R21
0001c5e9: R0 := R19
0001c5ee: R3 := 0
0001c5f4: R2 := R2 + 0x10
0001c5f9: R30 := 0x40B47C
0001c5fb: call @gl_des_ecb_crypt with return %0001c5fd

0001c5fd:
0001c600: R0 := 0x42F000
0001c607: R0 := mem[R0 + 0xFB8, el]:u64
0001c60e: R2 := mem[R31 + 0x108, el]:u64
0001c615: R1 := mem[R0, el]:u64
0001c61b: #649 := ~R1
0001c620: #650 := R2 + ~R1
0001c626: VF := extend:128[#650 + 1] <> extend:128[R2] + extend:128[#649] + 1
0001c62c: CF := pad:128[#650 + 1] <> pad:128[R2] + pad:128[#649] + 1
0001c630: ZF := #650 + 1 = 0
0001c634: NF := 63:63[#650 + 1]
0001c638: R2 := #650 + 1
0001c63d: R1 := 0
0001c643: when ZF <> 1 goto %0001c641
00035b56: goto %0001cc30

0001c641:
0001c649: R30 := 0x40B4C8
0001c64b: call @__stack_chk_fail with return %0001c64d

0001c64d:
00035b57: call @ntlm_hash_lm_password with noreturn

0001cc30:
0001cc34: #675 := R31 + 0x110
0001cc39: R29 := mem[#675, el]:u64
0001cc3e: R30 := mem[#675 + 8, el]:u64
0001cc43: R0 := 0x18
0001cc49: #676 := R31 + 0x120
0001cc4e: R19 := mem[#676, el]:u64
0001cc53: R20 := mem[#676 + 8, el]:u64
0001cc59: #677 := R31 + 0x130
0001cc5e: R21 := mem[#677, el]:u64
0001cc63: R22 := mem[#677 + 8, el]:u64
0001cc69: R31 := R31 + 0x140
0001cc6e: R1 := 0
0001cc73: R2 := 0
0001cc78: R3 := 0
0001cc7d: R16 := 0
0001cc82: R17 := 0
0001cc87: call R30 with noreturn

00035b58: sub ntlm_hash_lm_password(ntlm_hash_lm_password_result)
00035edb: ntlm_hash_lm_password_result :: out u32 = low:32[R0]

0001c651:
0001c655: R31 := R31 - 0x140
0001c65a: R2 := 0x474B
0001c65f: R1 := 0x42F000
0001c666: R1 := mem[R1 + 0xFB8, el]:u64
0001c66d: R2 := 63:32[R2].0x2153.15:0[R2]
0001c673: #651 := R31 + 0x110
0001c679: mem := mem with [#651, el]:u64 <- R29
0001c67f: mem := mem with [#651 + 8, el]:u64 <- R30
0001c685: R29 := R31 + 0x110
0001c68c: R2 := 63:48[R2].0x2340.31:0[R2]
0001c692: R2 := 0x2524.47:0[R2]
0001c698: #652 := R31 + 0x120
0001c69e: mem := mem with [#652, el]:u64 <- R19
0001c6a4: mem := mem with [#652 + 8, el]:u64 <- R20
0001c6aa: #653 := R31 + 0x130
0001c6b0: mem := mem with [#653, el]:u64 <- R21
0001c6b6: mem := mem with [#653 + 8, el]:u64 <- R22
0001c6bc: R21 := R0
0001c6c2: R22 := R31 + 0x100
0001c6c9: R0 := mem[R1, el]:u64
0001c6d1: mem := mem with [R31 + 0x108, el]:u64 <- R0
0001c6d6: R0 := 0
0001c6de: mem := mem with [R31 + 0x100, el]:u64 <- R2
0001c6e3: R0 := 0x16
0001c6e8: R30 := 0x40B51C
0001c6ea: call @zmalloc with return %0001c6ec

0001c6ec:
0001c6f0: R19 := R0
0001c6f5: R0 := 0xF
0001c6fa: R30 := 0x40B528
0001c6fc: call @zmalloc with return %0001c6fe

0001c6fe:
0001c702: R20 := R0
0001c708: R0 := R21
0001c70d: R30 := 0x40B534
0001c70f: call @strlen with return %0001c711

0001c711:
0001c714: R3 := 0xE
0001c71a: R2 := R0
0001c720: #654 := ~R3
0001c725: #655 := R0 + ~R3
0001c72b: VF := extend:128[#655 + 1] <> extend:128[R0] + extend:128[#654] + 1
0001c731: CF := pad:128[#655 + 1] <> pad:128[R0] + pad:128[#654] + 1
0001c735: ZF := #655 + 1 = 0
0001c739: NF := 63:63[#655 + 1]
0001c73f: R1 := R21
0001c74e: when ~(CF & ~ZF) goto %0001c746
0001c74f: goto %0001c74a

0001c74a:
0001c74b: R2 := R3
0001c751: goto %0001c74d

0001c746:
0001c747: R2 := R2
0001c750: goto %0001c74d

0001c74d:
0001c757: R21 := R31
0001c75d: R0 := R20
0001c762: R30 := 0x40B554
0001c765: call @strncpy with return %0001c767

0001c767:
0001c76a: R30 := 0x40B558
0001c76c: call @uppercase with return %0001c76e

0001c76e:
0001c772: R1 := R21
0001c778: R0 := R20
0001c77d: R30 := 0x40B564
0001c77f: call @ntlm_set_key with return %0001c781

0001c781:
0001c785: R2 := R19
0001c78a: R3 := 0
0001c790: R1 := R22
0001c796: R0 := R21
0001c79b: R30 := 0x40B578
0001c79d: call @gl_des_ecb_crypt with return %0001c79f

0001c79f:
0001c7a3: R1 := R21
0001c7a9: R0 := R20 + 7
0001c7ae: R30 := 0x40B584
0001c7b0: call @ntlm_set_key with return %0001c7b2

0001c7b2:
0001c7b6: R1 := R22
0001c7bc: R2 := R19 + 8
0001c7c2: R0 := R21
0001c7c7: R3 := 0
0001c7cc: R30 := 0x40B598
0001c7ce: call @gl_des_ecb_crypt with return %0001c7d0

0001c7d0:
0001c7d5: mem := mem with [R19 + 0x10, el]:u32 <- 0
0001c7dc: mem := mem with [R19 + 0x14] <- 0
0001c7e2: R0 := R20
0001c7e7: R30 := 0x40B5A8
0001c7e9: call @free with return %0001c7eb

0001c7eb:
0001c7ee: R0 := 0x42F000
0001c7f5: R0 := mem[R0 + 0xFB8, el]:u64
0001c7fc: R2 := mem[R31 + 0x108, el]:u64
0001c803: R1 := mem[R0, el]:u64
0001c809: #656 := ~R1
0001c80e: #657 := R2 + ~R1
0001c814: VF := extend:128[#657 + 1] <> extend:128[R2] + extend:128[#656] + 1
0001c81a: CF := pad:128[#657 + 1] <> pad:128[R2] + pad:128[#656] + 1
0001c81e: ZF := #657 + 1 = 0
0001c822: NF := 63:63[#657 + 1]
0001c826: R2 := #657 + 1
0001c82b: R1 := 0
0001c831: when ZF <> 1 goto %0001c82f
00035b59: goto %0001cbd6

0001c82f:
0001c837: R30 := 0x40B5F4
0001c839: call @__stack_chk_fail with return %00035b5a

00035b5a:
00035b5b: call @ntlm_hash_nt_password with noreturn

0001cbd6:
0001cbda: #672 := R31 + 0x110
0001cbdf: R29 := mem[#672, el]:u64
0001cbe4: R30 := mem[#672 + 8, el]:u64
0001cbea: R0 := R19
0001cbf0: #673 := R31 + 0x120
0001cbf5: R19 := mem[#673, el]:u64
0001cbfa: R20 := mem[#673 + 8, el]:u64
0001cc00: #674 := R31 + 0x130
0001cc05: R21 := mem[#674, el]:u64
0001cc0a: R22 := mem[#674 + 8, el]:u64
0001cc10: R31 := R31 + 0x140
0001cc15: R1 := 0
0001cc1a: R2 := 0
0001cc1f: R3 := 0
0001cc24: R16 := 0
0001cc29: R17 := 0
0001cc2e: call R30 with noreturn

00035b5c: sub ntlm_hash_nt_password(ntlm_hash_nt_password_result)
00035edc: ntlm_hash_nt_password_result :: out u32 = low:32[R0]

0001c83b:
0001c83f: R31 := R31 - 0x30
0001c844: R1 := 0x42F000
0001c84b: R1 := mem[R1 + 0xFB8, el]:u64
0001c851: #658 := R31 + 0x10
0001c857: mem := mem with [#658, el]:u64 <- R29
0001c85d: mem := mem with [#658 + 8, el]:u64 <- R30
0001c863: R29 := R31 + 0x10
0001c869: #659 := R31 + 0x20
0001c86f: mem := mem with [#659, el]:u64 <- R19
0001c875: mem := mem with [#659 + 8, el]:u64 <- R20
0001c87b: R19 := R0
0001c880: R0 := 0x16
0001c887: R2 := mem[R1, el]:u64
0001c88f: mem := mem with [R31 + 8, el]:u64 <- R2
0001c894: R2 := 0
0001c899: R30 := 0x40B624
0001c89b: call @zmalloc with return %0001c89d

0001c89d:
0001c8a1: R1 := R19
0001c8a7: R19 := R0
0001c8ad: R0 := R31
0001c8b2: R30 := 0x40B634
0001c8b4: call @unicode with return %0001c8b6

0001c8b6:
0001c8ba: R20 := extend:64[31:0[R0]]
0001c8c0: R2 := R19
0001c8c7: R0 := mem[R31, el]:u64
0001c8cd: R1 := R20
0001c8d2: R30 := 0x40B648
0001c8d4: call @md4_buffer with return %0001c8d6

0001c8d6:
0001c8db: mem := mem with [R19 + 0x10, el]:u32 <- 0
0001c8e2: R0 := mem[R31, el]:u64
0001c8e9: mem := mem with [R19 + 0x14] <- 0
0001c8ef: R2 := R20
0001c8f4: R1 := 0
0001c8f9: R30 := 0x40B660
0001c8fc: call @memset with return %0001c8fe

0001c8fe:
0001c903: R0 := mem[R31, el]:u64
0001c908: R30 := 0x40B668
0001c90a: call @free with return %0001c90c

0001c90c:
0001c90f: R0 := 0x42F000
0001c916: R0 := mem[R0 + 0xFB8, el]:u64
0001c91d: R2 := mem[R31 + 8, el]:u64
0001c924: R1 := mem[R0, el]:u64
0001c92a: #660 := ~R1
0001c92f: #661 := R2 + ~R1
0001c935: VF := extend:128[#661 + 1] <> extend:128[R2] + extend:128[#660] + 1
0001c93b: CF := pad:128[#661 + 1] <> pad:128[R2] + pad:128[#660] + 1
0001c93f: ZF := #661 + 1 = 0
0001c943: NF := 63:63[#661 + 1]
0001c947: R2 := #661 + 1
0001c94c: R1 := 0
0001c952: when ZF <> 1 goto %0001c950
00035b5d: goto %0001cb91

0001c950:
0001c958: R30 := 0x40B6AC
0001c95a: call @__stack_chk_fail with return %0001c95c

0001c95c:
00035b5e: call @ntlm2_hash_password with noreturn

0001cb91:
0001cb95: #670 := R31 + 0x10
0001cb9a: R29 := mem[#670, el]:u64
0001cb9f: R30 := mem[#670 + 8, el]:u64
0001cba5: R0 := R19
0001cbab: #671 := R31 + 0x20
0001cbb0: R19 := mem[#671, el]:u64
0001cbb5: R20 := mem[#671 + 8, el]:u64
0001cbbb: R31 := R31 + 0x30
0001cbc0: R1 := 0
0001cbc5: R2 := 0
0001cbca: R16 := 0
0001cbcf: R17 := 0
0001cbd4: call R30 with noreturn

00035b5f: sub ntlm_request(ntlm_request_result)
00035edd: ntlm_request_result :: out u32 = low:32[R0]

0001ba1b:
0001ba22: #615 := R31 - 0x50
0001ba28: mem := mem with [#615, el]:u64 <- R29
0001ba2e: mem := mem with [#615 + 8, el]:u64 <- R30
0001ba32: R31 := #615
0001ba38: R29 := R31
0001ba3e: #616 := R31 + 0x30
0001ba44: mem := mem with [#616, el]:u64 <- R23
0001ba4a: mem := mem with [#616 + 8, el]:u64 <- R24
0001ba50: R23 := R0
0001ba56: R24 := R1 + 0x64
0001ba5c: #617 := R31 + 0x10
0001ba62: mem := mem with [#617, el]:u64 <- R19
0001ba68: mem := mem with [#617 + 8, el]:u64 <- R20
0001ba6e: R19 := R1
0001ba74: #618 := R31 + 0x20
0001ba7a: mem := mem with [#618, el]:u64 <- R21
0001ba80: mem := mem with [#618 + 8, el]:u64 <- R22
0001ba86: #619 := R31 + 0x40
0001ba8c: mem := mem with [#619, el]:u64 <- R25
0001ba92: mem := mem with [#619 + 8, el]:u64 <- R26
0001ba98: R25 := R1 + 0x32
0001ba9e: R0 := R25
0001baa5: mem := mem with [R23, el]:u64 <- 0
0001baaa: R30 := 0x40B814
0001baac: call @strlen with return %0001baae

0001baae:
0001bab2: R22 := R0
0001bab8: R0 := R24
0001babd: R30 := 0x40B820
0001babf: call @strlen with return %0001bac1

0001bac1:
0001bac4: R1 := 0x42F000
0001bacb: R1 := mem[R1 + 0xF30, el]:u64
0001bad1: R20 := R0
0001bad8: R21 := pad:64[mem[R19 + 0x138, el]:u32]
0001badf: R0 := pad:64[mem[R1, el]:u32]
0001bae5: when 31:0[R21] <> 0 goto %0001bae3
00035b60: goto %0002aed6

0002aed6:
0002aedb: R1 := pad:64[mem[R19 + 0x12C, el]:u32]
0002aee0: when 31:0[R1] = 0 goto %0001bd6b
00035b61: goto %0002aee4

0001bd6b:
0001bd70: R1 := pad:64[mem[R19 + 0x130, el]:u32]
0001bd76: #628 := 31:0[R1] - 2
0001bd7b: VF := extend:64[#628] <> extend:64[31:0[R1]] - 2
0001bd80: CF := pad:64[#628] <> pad:64[31:0[R1]] + 0xFFFFFFFE
0001bd84: ZF := #628 = 0
0001bd88: NF := 31:31[#628]
0001bd8e: when ZF goto %0001bd8c
00035b62: goto %0002ae8d

0001bd8c:
0001bd94: R21 := 0xB207
0001bd9a: R21 := pad:64[0xA208.15:0[R21]]
0001bd9e: goto %0001bae3

0002ae8d:
0002ae92: R26 := pad:64[mem[R19 + 0x134, el]:u32]
0002ae97: when 31:0[R1] <> 0 goto %0001bda0
00035b63: goto %0002ae9b

0001bda0:
0001bda3: VF := 0
0001bda6: CF := 1
0001bdaa: ZF := 31:0[R26] = 0
0001bdae: NF := 31:31[R26]
0001bdb3: R21 := 0xB205
0001bdb8: R1 := 0xB207
0001bdc6: when ZF goto %0001bdbe
0001bdc7: goto %0001bdc2

0001bdc2:
0001bdc3: R21 := pad:64[31:0[R1]]
0001bdc9: goto %0001bdc5

0001bdbe:
0001bdbf: R21 := pad:64[31:0[R21]]
0001bdc8: goto %0001bdc5

0001bdc5:
0001bdcd: goto %0001bae3

0002ae9b:
0002ae9e: R21 := 0xB206
0002aea3: when 31:0[R26] <> 0 goto %0001bae3
00035b64: goto %0002aea7

0002aea7:
0002aeaa: when 31:0[R0] = 0 goto %0001bce8
00035b65: goto %0002aeae

0002aeae:
0002aeb1: R1 := 0x416000
0002aeb7: R1 := R1 + 0xB0
0002aebc: R0 := 2
0002aec1: R30 := 0x40B988
0002aec3: call @__printf_chk with return %0002aec5

0002aec5:
0002aec9: R0 := R19
0002aece: R30 := 0x40B990
0002aed0: call @dump_auth with return %0002aed2

0002aed2:
0002aed4: goto %0001bce8

0002aee4:
0002aee7: R21 := 0xB205
0002aeed: R21 := pad:64[0xA208.15:0[R21]]
00035b66: goto %0001bae3

0001bae3:
0001baec: when 31:0[R0] <> 0 goto %0001baea
00035b67: goto %0001bb5e

0001baea:
0001baf2: R1 := 0x416000
0001baf7: R0 := 2
0001bafd: R1 := R1 + 0xD8
0001bb02: R30 := 0x40B9A4
0001bb04: call @__printf_chk with return %0001bb06

0001bb06:
0001bb0a: R2 := R25
0001bb0f: R1 := 0x416000
0001bb14: R0 := 2
0001bb1a: R1 := R1 + 0xE8
0001bb1f: R30 := 0x40B9B8
0001bb21: call @__printf_chk with return %0001bb23

0001bb23:
0001bb27: R2 := R24
0001bb2c: R1 := 0x416000
0001bb31: R0 := 2
0001bb37: R1 := R1 + 0xF8
0001bb3c: R30 := 0x40B9CC
0001bb3e: call @__printf_chk with return %0001bb40

0001bb40:
0001bb44: R2 := pad:64[31:0[R21]]
0001bb49: R1 := 0x416000
0001bb4e: R0 := 2
0001bb54: R1 := R1 + 0x108
0001bb59: R30 := 0x40B9E0
0001bb5b: call @__printf_chk with return %0001bb5d

0001bb5d:
0001bb60: goto %0001bb5e

0001bb5e:
0001bb64: R0 := 0x400
0001bb69: R30 := 0x40B854
0001bb6b: call @zmalloc with return %0001bb6d

0001bb6d:
0001bb71: R3 := pad:64[15:0[R20]]
0001bb77: R4 := pad:64[15:0[R22]]
0001bb7c: R2 := 0
0001bb81: R1 := 0
0001bb87: R19 := R0
0001bb8e: R2 := pad:64[31:16[R2].15:0[R4]]
0001bb95: R1 := pad:64[31:16[R1].15:0[R3]]
0001bb9a: R6 := 0x544E
0001bba1: R6 := 63:32[R6].0x4D4C.15:0[R6]
0001bba8: R2 := pad:64[15:0[R4].15:0[R2]]
0001bbaf: R1 := pad:64[15:0[R3].15:0[R1]]
0001bbb5: R4 := pad:64[31:0[R20] + 0x20]
0001bbbc: R6 := 63:48[R6].0x5353.31:0[R6]
0001bbc1: R5 := 1
0001bbc7: R6 := 0x50.47:0[R6]
0001bbcc: R3 := 0x20
0001bbd4: mem := mem with [R19, el]:u64 <- R6
0001bbda: R0 := R24
0001bbe0: #620 := R19 + 8
0001bbe6: mem := mem with [#620, el]:u32 <- 31:0[R5]
0001bbec: mem := mem with [#620 + 4, el]:u32 <- 31:0[R21]
0001bbf2: R21 := extend:64[31:0[R20]]
0001bbf8: #621 := R19 + 0x10
0001bbfe: mem := mem with [#621, el]:u32 <- 31:0[R2]
0001bc04: mem := mem with [#621 + 4, el]:u32 <- 31:0[R4]
0001bc0b: R20 := pad:64[31:0[R20] + 31:0[R22]]
0001bc11: #622 := R19 + 0x18
0001bc17: mem := mem with [#622, el]:u32 <- 31:0[R1]
0001bc1d: mem := mem with [#622 + 4, el]:u32 <- 31:0[R3]
0001bc23: R26 := pad:64[31:0[R20] + 0x20]
0001bc28: R30 := 0x40B8B8
0001bc2a: call @strdup with return %0001bc2c

0001bc2c:
0001bc2f: R30 := 0x40B8BC
0001bc31: call @uppercase with return %0001bc33

0001bc33:
0001bc37: R24 := R0
0001bc3d: R2 := R21
0001bc43: R1 := R24
0001bc48: R3 := 0x3E0
0001bc4e: R0 := R19 + 0x20
0001bc53: R30 := 0x40B8D4
0001bc55: call @__memcpy_chk with return %0001bc57

0001bc57:
0001bc5b: R0 := R24
0001bc60: R30 := 0x40B8DC
0001bc62: call @free with return %0001bc64

0001bc64:
0001bc68: R0 := R25
0001bc6d: R30 := 0x40B8E4
0001bc6f: call @strdup with return %0001bc71

0001bc71:
0001bc74: R30 := 0x40B8E8
0001bc76: call @uppercase with return %0001bc78

0001bc78:
0001bc7c: R2 := R21 + 0x20
0001bc81: R3 := 0x400
0001bc87: #623 := R2 - 0x400
0001bc8c: VF := extend:128[#623] <> extend:128[R2] - 0x400
0001bc91: CF := pad:128[#623] <> pad:128[R2] + 0xFFFFFFFFFFFFFC00
0001bc95: ZF := #623 = 0
0001bc99: NF := 63:63[#623]
0001bc9f: R21 := R0
0001bcad: when CF goto %0001bca5
0001bcae: goto %0001bca9

0001bca9:
0001bcaa: R3 := R3
0001bcb0: goto %0001bcac

0001bca5:
0001bca6: R3 := R2
0001bcaf: goto %0001bcac

0001bcac:
0001bcb7: R0 := R19 + R2
0001bcbe: R3 := R3 + ~R2 + 1
0001bcc4: R1 := R21
0001bcca: R2 := extend:64[31:0[R22]]
0001bccf: R30 := 0x40B910
0001bcd1: call @__memcpy_chk with return %0001bcd3

0001bcd3:
0001bcd7: R0 := R21
0001bcdc: R30 := 0x40B918
0001bcde: call @free with return %0001bce0

0001bce0:
0001bce6: mem := mem with [R23, el]:u64 <- R19
00035b68: goto %0001bce8

0001bce8:
0001bcec: #624 := R31 + 0x10
0001bcf1: R19 := mem[#624, el]:u64
0001bcf6: R20 := mem[#624 + 8, el]:u64
0001bcfc: R0 := pad:64[31:0[R26]]
0001bd02: #625 := R31 + 0x20
0001bd07: R21 := mem[#625, el]:u64
0001bd0c: R22 := mem[#625 + 8, el]:u64
0001bd12: #626 := R31 + 0x30
0001bd17: R23 := mem[#626, el]:u64
0001bd1c: R24 := mem[#626 + 8, el]:u64
0001bd22: #627 := R31 + 0x40
0001bd27: R25 := mem[#627, el]:u64
0001bd2c: R26 := mem[#627 + 8, el]:u64
0001bd33: R29 := mem[R31, el]:u64
0001bd38: R30 := mem[R31 + 8, el]:u64
0001bd3c: R31 := R31 + 0x50
0001bd41: R1 := 0
0001bd46: R2 := 0
0001bd4b: R3 := 0
0001bd50: R4 := 0
0001bd55: R5 := 0
0001bd5a: R6 := 0
0001bd5f: R16 := 0
0001bd64: R17 := 0
0001bd69: call R30 with noreturn

00035b69: sub ntlm_response(ntlm_response_result)
00035ede: ntlm_response_result :: out u32 = low:32[R0]

0001bdcf:
0001bdd3: R31 := R31 - 0xB0
0001bdd8: R4 := 0x42F000
0001bddf: R4 := mem[R4 + 0xFB8, el]:u64
0001bde5: #629 := R31 + 0x50
0001bdeb: mem := mem with [#629, el]:u64 <- R29
0001bdf1: mem := mem with [#629 + 8, el]:u64 <- R30
0001bdf7: R29 := R31 + 0x50
0001bdfd: #630 := R31 + 0x90
0001be03: mem := mem with [#630, el]:u64 <- R25
0001be09: mem := mem with [#630 + 8, el]:u64 <- R26
0001be0e: R26 := 0x42F000
0001be15: R26 := mem[R26 + 0xF30, el]:u64
0001be1b: #631 := R31 + 0x60
0001be21: mem := mem with [#631, el]:u64 <- R19
0001be27: mem := mem with [#631 + 8, el]:u64 <- R20
0001be2d: R19 := R1
0001be33: #632 := R31 + 0x70
0001be39: mem := mem with [#632, el]:u64 <- R21
0001be3f: mem := mem with [#632 + 8, el]:u64 <- R22
0001be45: R21 := R3
0001be4c: R5 := pad:64[mem[R26, el]:u32]
0001be52: #633 := R31 + 0x80
0001be58: mem := mem with [#633, el]:u64 <- R23
0001be5e: mem := mem with [#633 + 8, el]:u64 <- R24
0001be64: R24 := pad:64[31:0[R2]]
0001be6a: #634 := R31 + 0xA0
0001be70: mem := mem with [#634, el]:u64 <- R27
0001be76: mem := mem with [#634 + 8, el]:u64 <- R28
0001be7d: R6 := mem[R4, el]:u64
0001be85: mem := mem with [R31 + 0x48, el]:u64 <- R6
0001be8a: R6 := 0
0001be92: mem := mem with [R31 + 0x10, el]:u64 <- R0
0001be98: #635 := R31 + 0x38
0001be9d: mem := mem with [#635, el]:u64 <- 0
0001bea2: mem := mem with [#635 + 8, el]:u64 <- 0
0001bea8: when 31:0[R5] <> 0 goto %0001bea6
00035b6a: goto %0001bf2e

0001bea6:
0001beae: R1 := 0x416000
0001beb3: R0 := 2
0001beb9: R1 := R1 + 0x120
0001bebe: R30 := 0x40C2C8
0001bec0: call @__printf_chk with return %0001bec2

0001bec2:
0001bec6: R0 := R19 + 0x18
0001becb: R2 := 7
0001bed0: R1 := 8
0001bed5: R30 := 0x40C2D8
0001bed7: call @printmem with return %0001bed9

0001bed9:
0001bedd: R3 := pad:64[31:0[R24]]
0001bee3: R2 := R0
0001bee8: R1 := 0x416000
0001beee: R1 := R1 + 0x138
0001bef4: R20 := R0
0001bef9: R0 := 2
0001befe: R30 := 0x40C2F4
0001bf00: call @__printf_chk with return %0001bf02

0001bf02:
0001bf06: R0 := R20
0001bf0b: R30 := 0x40C2FC
0001bf0d: call @free with return %0001bf0f

0001bf0f:
0001bf14: R2 := pad:64[mem[R19 + 0x14, el]:u32]
0001bf19: R1 := 0x416000
0001bf1e: R0 := 2
0001bf24: R1 := R1 + 0x108
0001bf29: R30 := 0x40C310
0001bf2b: call @__printf_chk with return %0001bf2d

0001bf2d:
0001bf30: goto %0001bf2e

0001bf2e:
0001bf35: #636 := 31:0[R24] - 0x27
0001bf3a: VF := extend:64[#636] <> extend:64[31:0[R24]] - 0x27
0001bf3f: CF := pad:64[#636] <> pad:64[31:0[R24]] + 0xFFFFFFD9
0001bf43: ZF := #636 = 0
0001bf47: NF := 31:31[#636]
0001bf4f: when ~(NF = VF & ~ZF) goto %0001bf4d
00035b6b: goto %0002ae25

0001bf4d:
0001bf55: R22 := 0
0001bf5c: mem := mem with [R31 + 0x1C, el]:u32 <- 0
00035b6c: goto %0001bf5e

0002ae25:
0002ae2a: R0 := pad:64[mem[R19 + 0x2C, el]:u16]
0002ae2f: R25 := 0x414000
0002ae35: R1 := R25 + 0x2C8
0002ae3d: mem := mem with [R31 + 8, el]:u64 <- R1
0002ae43: R1 := pad:64[31:0[R0] + 4]
0002ae4b: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0002ae52: R2 := pad:64[mem[R26, el]:u32]
0002ae58: R20 := pad:64[31:0[R0]]
0002ae5d: R22 := 0
0002ae62: R25 := 0xFFFF
0002ae68: #1306 := ~31:0[R1]
0002ae6d: #1307 := 31:0[R24] + ~31:0[R1]
0002ae73: VF := extend:64[#1307 + 1] <> extend:64[31:0[R24]] +
          extend:64[#1306] + 1
0002ae79: CF := pad:64[#1307 + 1] <> pad:64[31:0[R24]] + pad:64[#1306] + 1
0002ae7d: ZF := #1307 + 1 = 0
0002ae81: NF := 31:31[#1307 + 1]
0002ae87: when NF <> VF goto %0002a827
00035b6d: goto %0002ae8b

0002ae8b:
00035b6e: goto %0002a80b

0002a80b:
0002a816: R25 := pad:64[mem[R19 + pad:64[31:0[R20]], el]:u16]
0002a81c: R27 := pad:64[31:0[R20]]
0002a822: when 31:0[R25] = 0 goto %0002a820
00035b6f: goto %0002aad4

0002a820:
0002a829: when 31:0[R22] = 0 goto %0002a827
00035b70: goto %0002aabd

0002aabd:
0002aac1: R22 := pad:64[31:0[R22] + 4]
0002aac7: R22 := pad:64[15:0[R22]]
0002aacc: when 31:0[R2] = 0 goto %0001bf5e
00035b71: goto %0002aad0

0002aad0:
0002aad2: goto %0002a833

0002aad4:
0002aad9: R1 := R19 + R27
0002aadf: R0 := pad:64[31:0[R0] + 4]
0002aae6: R28 := pad:64[mem[R1 + 2, el]:u16]
0002aaed: R0 := pad:64[31:0[R0] + 31:0[R28]]
0002aaf3: #1295 := ~31:0[R24]
0002aaf8: #1296 := 31:0[R0] + ~31:0[R24]
0002aafe: VF := extend:64[#1296 + 1] <> extend:64[31:0[R0]] +
          extend:64[#1295] + 1
0002ab04: CF := pad:64[#1296 + 1] <> pad:64[31:0[R0]] + pad:64[#1295] + 1
0002ab08: ZF := #1296 + 1 = 0
0002ab0c: NF := 31:31[#1296 + 1]
0002ab13: when NF = VF & ~ZF goto %0002a827
00035b72: goto %0002ab17

0002ab17:
0002ab1a: when 31:0[R2] = 0 goto %0002a7b6
00035b73: goto %0002ab1e

0002ab1e:
0002ab22: #1297 := 31:0[R25] - 3
0002ab27: VF := extend:64[#1297] <> extend:64[31:0[R25]] - 3
0002ab2c: CF := pad:64[#1297] <> pad:64[31:0[R25]] + 0xFFFFFFFD
0002ab30: ZF := #1297 = 0
0002ab34: NF := 31:31[#1297]
0002ab3a: when ZF goto %0002ab38
00035b74: goto %0002ab58

0002ab38:
0002ab40: R1 := 0x416000
0002ab45: R0 := 2
0002ab4b: R1 := R1 + 0x178
0002ab50: R30 := 0x40C2A0
0002ab52: call @__printf_chk with return %0002ab54

0002ab54:
0002ab56: goto %0002a74e

0002ab58:
0002ab5c: when CF & ~ZF goto %0002a717
00035b75: goto %0002ab60

0002a717:
0002a71b: #1288 := 31:0[R25] - 4
0002a720: VF := extend:64[#1288] <> extend:64[31:0[R25]] - 4
0002a725: CF := pad:64[#1288] <> pad:64[31:0[R25]] + 0xFFFFFFFC
0002a729: ZF := #1288 = 0
0002a72d: NF := 31:31[#1288]
0002a733: when ZF goto %0002a731
00035b76: goto %0002ac0c

0002a731:
0002a739: R1 := 0x416000
0002a73e: R0 := 2
0002a744: R1 := R1 + 0x188
0002a749: R30 := 0x40C2B4
0002a74b: call @__printf_chk with return %0002a74d

0002a74d:
0002a750: goto %0002a74e

0002ac0c:
0002ac10: #1301 := 31:0[R25] - 5
0002ac15: VF := extend:64[#1301] <> extend:64[31:0[R25]] - 5
0002ac1a: CF := pad:64[#1301] <> pad:64[31:0[R25]] + 0xFFFFFFFB
0002ac1e: ZF := #1301 = 0
0002ac22: NF := 31:31[#1301]
0002ac28: when ZF <> 1 goto %0002ac26
00035b77: goto %0002ac4c

0002ac26:
0002ac2f: R2 := pad:64[31:0[R25]]
0002ac34: R1 := 0x416000
0002ac39: R0 := 2
0002ac3f: R1 := R1 + 0x1A8
0002ac44: R30 := 0x40C238
0002ac46: call @__printf_chk with return %0002ac48

0002ac48:
0002ac4a: goto %0002a74e

0002ac4c:
0002ac4f: R1 := 0x416000
0002ac54: R0 := 2
0002ac5a: R1 := R1 + 0x198
0002ac5f: R30 := 0x40C0E0
0002ac61: call @__printf_chk with return %0002ac63

0002ac63:
0002ac65: goto %0002a74e

0002ab60:
0002ab64: #1298 := 31:0[R25] - 1
0002ab69: VF := extend:64[#1298] <> extend:64[31:0[R25]] - 1
0002ab6e: CF := pad:64[#1298] <> pad:64[31:0[R25]] + 0xFFFFFFFF
0002ab72: ZF := #1298 = 0
0002ab76: NF := 31:31[#1298]
0002ab7c: when ZF goto %0002ab7a
00035b78: goto %0002ab9a

0002ab7a:
0002ab82: R1 := 0x416000
0002ab87: R0 := 2
0002ab8d: R1 := R1 + 0x158
0002ab92: R30 := 0x40C28C
0002ab94: call @__printf_chk with return %0002ab96

0002ab96:
0002ab98: goto %0002a74e

0002ab9a:
0002ab9d: R1 := 0x416000
0002aba2: R0 := 2
0002aba8: R1 := R1 + 0x168
0002abad: R30 := 0x40BAE4
0002abaf: call @__printf_chk with return %0002abb1

0002abb1:
00035b79: goto %0002a74e

0002a74e:
0002a755: R0 := pad:64[31:0[R28] + 1]
0002a75b: R27 := R27 + 4
0002a761: R0 := pad:64[extend:32[31:1[R0]]]
0002a767: R0 := pad:64[31:0[R0] + 1]
0002a76d: R0 := pad:64[16:0[R0]]
0002a772: R30 := 0x40BB00
0002a774: call @zmalloc with return %0002a776

0002a776:
0002a77a: R6 := pad:64[extend:32[31:1[R28]]]
0002a780: R23 := R0
0002a786: when 31:0[R6] = 0 goto %0002a784
00035b7a: goto %0002abb3

0002abb3:
0002abb7: R6 := extend:64[31:0[R6]]
0002abbe: R3 := R19 + R27
0002abc5: R6 := R6 + R0
0002abcb: R1 := R0
00035b7b: goto %0002abcf

0002abcf:
0002abd4: R5 := pad:64[mem[R3]]
0002abd8: R3 := R3 + 2
0002abe0: mem := mem with [R1] <- 7:0[R5]
0002abe4: R1 := R1 + 1
0002abea: #1299 := ~R6
0002abef: #1300 := R1 + ~R6
0002abf5: VF := extend:128[#1300 + 1] <> extend:128[R1] + extend:128[#1299] +
          1
0002abfb: CF := pad:128[#1300 + 1] <> pad:128[R1] + pad:128[#1299] + 1
0002abff: ZF := #1300 + 1 = 0
0002ac03: NF := 63:63[#1300 + 1]
0002ac08: when ZF <> 1 goto %0002abcf
00035b7c: goto %0002a784

0002a784:
0002a78e: R1 := mem[R31 + 8, el]:u64
0002a794: R2 := R23
0002a799: R0 := 2
0002a79e: R30 := 0x40BB40
0002a7a0: call @__printf_chk with return %0002a7a2

0002a7a2:
0002a7a6: R0 := R23
0002a7ab: R30 := 0x40BB48
0002a7ad: call @free with return %0002a7af

0002a7af:
0002a7b4: R2 := pad:64[mem[R26, el]:u32]
00035b7d: goto %0002a7b6

0002a7b6:
0002a7bb: R20 := pad:64[31:0[R28] + 31:0[R20]]
0002a7c2: R28 := pad:64[31:0[R28] + 31:0[R22]]
0002a7c8: R20 := pad:64[31:0[R20] + 4]
0002a7ce: R28 := pad:64[31:0[R28] + 4]
0002a7d4: R20 := pad:64[15:0[R20]]
0002a7da: R22 := pad:64[15:0[R28]]
0002a7e0: R1 := pad:64[31:0[R20] + 4]
0002a7e6: R0 := pad:64[31:0[R20]]
0002a7ec: #1289 := ~31:0[R24]
0002a7f1: #1290 := 31:0[R1] + ~31:0[R24]
0002a7f7: VF := extend:64[#1290 + 1] <> extend:64[31:0[R1]] +
          extend:64[#1289] + 1
0002a7fd: CF := pad:64[#1290 + 1] <> pad:64[31:0[R1]] + pad:64[#1289] + 1
0002a801: ZF := #1290 + 1 = 0
0002a805: NF := 31:31[#1290 + 1]
0002a80d: when ~(NF = VF & ~ZF) goto %0002a80b
00035b7e: goto %0002a827

0002a827:
0002a82f: when 31:0[R2] = 0 goto %0001bf5e
00035b7f: goto %0002a833

0001bf5e:
0001bf63: R24 := pad:64[mem[R21 + 0x12C, el]:u32]
0001bf68: R25 := 0
0001bf6e: when 31:0[R24] <> 0 goto %0001bf6c
00035b80: goto %0002a86b

0002a833:
0002a838: R2 := pad:64[mem[R31 + 0x1C, el]:u32]
0002a83e: R4 := pad:64[31:0[R25]]
0002a844: R3 := pad:64[31:0[R22]]
0002a849: R1 := 0x416000
0002a84e: R0 := 2
0002a854: R1 := R1 + 0x1B8
0002a859: R25 := 0
0002a85e: R30 := 0x40BB98
0002a860: call @__printf_chk with return %0002a862

0002a862:
0002a867: R24 := pad:64[mem[R21 + 0x12C, el]:u32]
0002a86d: when 31:0[R24] = 0 goto %0002a86b
00035b81: goto %0001bf6c

0002a86b:
0002a875: R0 := pad:64[mem[R21 + 0x130, el]:u32]
0002a87b: #1291 := 31:0[R0] - 2
0002a880: VF := extend:64[#1291] <> extend:64[31:0[R0]] - 2
0002a885: CF := pad:64[#1291] <> pad:64[31:0[R0]] + 0xFFFFFFFE
0002a889: ZF := #1291 = 0
0002a88d: NF := 31:31[#1291]
0002a893: when ZF goto %0002a891
00035b82: goto %0001c2ca

0001bf6c:
0001bf74: R0 := 9
0001bf79: R30 := 0x40BBA8
0001bf7b: call @zmalloc with return %0001bf7d

0001bf7d:
0001bf81: R20 := R0
0001bf86: R30 := 0x40BBB0
0001bf88: call @getrandom64 with return %0001bf8a

0001bf8a:
0001bf8e: R1 := R0
0001bf93: R0 := 0
0001bf99: R24 := R21 + 0xFA
0001bfa1: mem := mem with [R20, el]:u64 <- R1
0001bfa6: R30 := 0x40BBC4
0001bfa9: call @time with return %0001bfab

0001bfab:
0001bfae: R2 := 0x8000
0001bfb5: R1 := pad:64[mem[R26, el]:u32]
0001bfbc: R2 := 63:32[R2].0xD53E.15:0[R2]
0001bfc1: R3 := 0x9680
0001bfc8: R2 := 63:48[R2].0xB1DE.31:0[R2]
0001bfcf: R3 := 63:32[R3].0x98.15:0[R3]
0001bfd5: R2 := 0x19D.47:0[R2]
0001bfdd: R25 := R2 + R0 * R3
0001bfe3: when 31:0[R1] <> 0 goto %0001bfe1
00035b83: goto %0001c034

0001bfe1:
0001bfea: R0 := R20
0001bfef: R2 := 7
0001bff4: R1 := 8
0001bff9: R30 := 0x40C374
0001bffb: call @printmem with return %0001bffd

0001bffd:
0001c001: R3 := R25
0001c007: R2 := R0
0001c00c: R1 := 0x416000
0001c012: R1 := R1 + 0x1E8
0001c018: R27 := R0
0001c01d: R0 := 2
0001c022: R30 := 0x40C390
0001c024: call @__printf_chk with return %0001c026

0001c026:
0001c02a: R0 := R27
0001c02f: R30 := 0x40C398
0001c031: call @free with return %0001c033

0001c033:
0001c036: goto %0001c034

0001c034:
0001c03b: R27 := pad:64[31:0[R22] + 0x21]
0001c041: R27 := extend:64[31:0[R27]]
0001c047: R0 := R27
0001c04c: R30 := 0x40BBF8
0001c04e: call @zmalloc with return %0001c050

0001c050:
0001c053: R1 := 0x417000
0001c059: R28 := R0
0001c060: R4 := mem[R20, el]:u64
0001c066: R2 := pad:64[31:0[R22]]
0001c06d: V0 := pad:128[mem[R1 + 0x260, el]:u64]
0001c073: R3 := R27 - 0x1C
0001c07a: R0 := pad:64[mem[R31 + 0x1C, el]:u16]
0001c080: #637 := R28 + 8
0001c086: mem := mem with [#637, el]:u64 <- R25
0001c08c: mem := mem with [#637 + 8, el]:u64 <- R4
0001c092: R25 := pad:64[31:0[R22] + 0x30]
0001c099: mem := mem with [R28 + 0x18, el]:u32 <- 0
0001c0a0: R1 := R19 + pad:64[15:0[R0]]
0001c0a6: R0 := R28 + 0x1C
0001c0ae: mem := mem with [R28, el]:u64 <- 63:0[V0]
0001c0b6: mem := mem with [R31 + 8, el]:u64 <- R2
0001c0bb: R30 := 0x40BC34
0001c0bd: call @__memcpy_chk with return %0001c0bf

0001c0bf:
0001c0c4: R2 := mem[R31 + 8, el]:u64
0001c0c9: R1 := 0
0001c0cf: R3 := R2 + 0x1C
0001c0d4: R2 := 4
0001c0da: #638 := ~R3
0001c0df: #639 := R27 + ~R3
0001c0e5: VF := extend:128[#639 + 1] <> extend:128[R27] + extend:128[#638] +
          1
0001c0eb: CF := pad:128[#639 + 1] <> pad:128[R27] + pad:128[#638] + 1
0001c0ef: ZF := #639 + 1 = 0
0001c0f3: NF := 63:63[#639 + 1]
0001c0fa: R0 := R28 + R3
0001c108: when CF goto %0001c100
0001c109: goto %0001c104

0001c104:
0001c105: R27 := R3
0001c10b: goto %0001c107

0001c100:
0001c101: R27 := R27
0001c10a: goto %0001c107

0001c107:
0001c112: R3 := R27 + ~R3 + 1
0001c117: R30 := 0x40BC58
0001c11a: call @__memset_chk with return %0001c11c

0001c11c:
0001c120: R0 := pad:64[31:0[R22] + 0x31]
0001c126: R0 := pad:64[16:0[R0]]
0001c12b: R30 := 0x40BC64
0001c12d: call @zmalloc with return %0001c12f

0001c12f:
0001c133: R3 := pad:64[31:0[R22] + 0x29]
0001c139: R27 := R0
0001c141: mem := mem with [R31 + 0x40, el]:u64 <- R27
0001c147: R3 := extend:64[31:0[R3]]
0001c14f: mem := mem with [R31 + 8, el]:u64 <- R3
0001c155: R0 := R3
0001c15a: R30 := 0x40BC80
0001c15c: call @zmalloc with return %0001c15e

0001c15e:
0001c162: R23 := R0
0001c168: R5 := pad:64[31:0[R22] + 0x20]
0001c16f: R3 := mem[R31 + 8, el]:u64
0001c175: R5 := extend:64[31:0[R5]]
0001c17c: R1 := mem[R19 + 0x18, el]:u64
0001c184: mem := mem with [R0, el]:u64 <- R1
0001c188: R0 := R0 + 8
0001c18e: R2 := R5
0001c194: R1 := R28
0001c19a: R3 := R3 - 8
0001c1a2: mem := mem with [R31 + 8, el]:u64 <- R5
0001c1a7: R30 := 0x40BCAC
0001c1a9: call @__memcpy_chk with return %0001c1ab

0001c1ab:
0001c1af: R3 := pad:64[31:0[R22] + 0x28]
0001c1b5: R4 := R27
0001c1bb: R3 := pad:64[16:0[R3]]
0001c1c1: R2 := R23
0001c1c7: R0 := R24
0001c1cc: R1 := 0x10
0001c1d1: R30 := 0x40BCC8
0001c1d3: call @hmac_md5 with return %0001c1d5

0001c1d5:
0001c1da: R5 := mem[R31 + 8, el]:u64
0001c1e0: R1 := R28
0001c1e6: R0 := R27 + 0x10
0001c1ec: R2 := R5
0001c1f1: R30 := 0x40BCDC
0001c1f3: call @memcpy with return %0001c1f5

0001c1f5:
0001c1f9: R0 := R23
0001c1fe: R30 := 0x40BCE4
0001c200: call @free with return %0001c202

0001c202:
0001c205: R0 := 0x19
0001c20a: R30 := 0x40BCEC
0001c20c: call @zmalloc with return %0001c20e

0001c20e:
0001c212: R23 := R0
0001c217: R0 := 0x11
0001c21f: mem := mem with [R31 + 0x38, el]:u64 <- R23
0001c224: R30 := 0x40BCFC
0001c226: call @zmalloc with return %0001c228

0001c228:
0001c22c: R22 := R0
0001c231: R3 := 0x10
0001c238: R5 := mem[R20, el]:u64
0001c23e: R1 := R3
0001c245: R6 := mem[R19 + 0x18, el]:u64
0001c24d: mem := mem with [R22, el]:u64 <- R6
0001c253: mem := mem with [R22 + 8, el]:u64 <- R5
0001c259: R4 := R23
0001c25f: R2 := R22
0001c265: R0 := R24
0001c26a: R30 := 0x40BD24
0001c26c: call @hmac_md5 with return %0001c26e

0001c26e:
0001c271: R24 := 0x18
0001c278: R1 := mem[R20, el]:u64
0001c280: mem := mem with [R23 + 0x10, el]:u64 <- R1
0001c286: R0 := R22
0001c28b: R30 := 0x40BD38
0001c28d: call @free with return %0001c28f

0001c28f:
0001c293: R0 := R28
0001c298: R30 := 0x40BD40
0001c29a: call @free with return %0001c29c

0001c29c:
0001c2a0: R0 := R20
0001c2a5: R30 := 0x40BD48
0001c2a7: call @free with return %0001c2a9

0001c2a9:
0001c2ae: R0 := pad:64[mem[R21 + 0x130, el]:u32]
0001c2b4: #640 := 31:0[R0] - 2
0001c2b9: VF := extend:64[#640] <> extend:64[31:0[R0]] - 2
0001c2be: CF := pad:64[#640] <> pad:64[31:0[R0]] + 0xFFFFFFFE
0001c2c2: ZF := #640 = 0
0001c2c6: NF := 31:31[#640]
0001c2cc: when ZF <> 1 goto %0001c2ca
00035b84: goto %0002a891

0001c2ca:
0001c2d3: #641 := 31:0[R0] - 1
0001c2d8: VF := extend:64[#641] <> extend:64[31:0[R0]] - 1
0001c2dd: CF := pad:64[#641] <> pad:64[31:0[R0]] + 0xFFFFFFFF
0001c2e1: ZF := #641 = 0
0001c2e5: NF := 31:31[#641]
0001c2eb: when ZF goto %0001c2e9
00035b85: goto %0002a9a4

0002a891:
0002a899: R0 := 9
0002a89e: R30 := 0x40BD5C
0002a8a0: call @zmalloc with return %0002a8a2

0002a8a2:
0002a8a6: R24 := R0
0002a8ab: R30 := 0x40BD64
0002a8ad: call @getrandom64 with return %0002a8af

0002a8af:
0002a8b3: R23 := R0
0002a8b8: R0 := 0x19
0002a8bd: R30 := 0x40BD70
0002a8bf: call @zmalloc with return %0002a8c1

0002a8c1:
0002a8c5: R1 := R0
0002a8ca: R0 := 0x11
0002a8d2: mem := mem with [R31 + 0x38, el]:u64 <- R1
0002a8d7: R25 := 0x18
0002a8df: mem := mem with [R1, el]:u64 <- R23
0002a8e5: #1292 := R1 + 8
0002a8ea: mem := mem with [#1292, el]:u64 <- 0
0002a8ef: mem := mem with [#1292 + 8, el]:u64 <- 0
0002a8f4: R30 := 0x40BD8C
0002a8f6: call @zmalloc with return %0002a8f8

0002a8f8:
0002a8fc: R20 := R0
0002a901: R0 := 0x11
0002a906: R30 := 0x40BD98
0002a908: call @zmalloc with return %0002a90a

0002a90a:
0002a90f: R3 := mem[R19 + 0x18, el]:u64
0002a915: R2 := R0
0002a91d: mem := mem with [R20, el]:u64 <- R3
0002a923: mem := mem with [R20 + 8, el]:u64 <- R23
0002a928: R1 := 0x10
0002a92e: R22 := R0
0002a934: R0 := R20
0002a939: R30 := 0x40BDB4
0002a93b: call @md5_buffer with return %0002a93d

0002a93d:
0002a941: R0 := R20
0002a946: R30 := 0x40BDBC
0002a948: call @free with return %0002a94a

0002a94a:
0002a94e: R2 := R22
0002a954: R1 := R21 + 0xC8
0002a95a: R0 := R31 + 0x40
0002a95f: R30 := 0x40BDCC
0002a961: call @ntlm_calc_resp with return %0002a963

0002a963:
0002a967: R0 := R22
0002a96c: R30 := 0x40BDD4
0002a96e: call @free with return %0002a970

0002a970:
0002a974: R0 := R24
0002a979: R30 := 0x40BDDC
0002a97b: call @free with return %0002a97d

0002a97d:
0002a982: R0 := pad:64[mem[R21 + 0x130, el]:u32]
0002a988: R24 := pad:64[31:0[R25]]
0002a98e: #1293 := 31:0[R0] - 1
0002a993: VF := extend:64[#1293] <> extend:64[31:0[R0]] - 1
0002a998: CF := pad:64[#1293] <> pad:64[31:0[R0]] + 0xFFFFFFFF
0002a99c: ZF := #1293 = 0
0002a9a0: NF := 31:31[#1293]
0002a9a6: when ZF <> 1 goto %0002a9a4
00035b86: goto %0001c2e9

0002a9a4:
0002a9ae: R0 := pad:64[mem[R21 + 0x134, el]:u32]
0002a9b4: when 31:0[R0] <> 0 goto %0002a9b2
00035b87: goto %0001cc98

0001c2e9:
0001c2f2: R2 := R19 + 0x18
0001c2f8: R1 := R21 + 0xC8
0001c2fe: R0 := R31 + 0x40
0001c303: R30 := 0x40BDFC
0001c306: call @ntlm_calc_resp with return %0001cc89

0001cc89:
0001cc8d: R25 := pad:64[31:0[R0]]
0001cc94: R0 := pad:64[mem[R21 + 0x134, el]:u32]
0001cc9a: when 31:0[R0] = 0 goto %0001cc98
00035b88: goto %0002a9b2

0001cc98:
0001cca2: R0 := pad:64[mem[R21 + 0x130, el]:u32]
0001cca8: R28 := R21 + 0x32
0001ccae: when 31:0[R0] <> 0 goto %0001ccac
00035b89: goto %0002a9e5

0002a9b2:
0002a9bb: R2 := R19 + 0x18
0002a9c1: R1 := R21 + 0x96
0002a9c7: R0 := R31 + 0x38
0002a9cc: R30 := 0x40BE18
0002a9ce: call @ntlm_calc_resp with return %0002a9d0

0002a9d0:
0002a9d4: R24 := pad:64[31:0[R0]]
0002a9db: R0 := pad:64[mem[R21 + 0x130, el]:u32]
0002a9e1: R28 := R21 + 0x32
0002a9e7: when 31:0[R0] = 0 goto %0002a9e5
00035b8a: goto %0001ccac

0002a9e5:
0002a9ef: R0 := pad:64[mem[R21 + 0x12C, el]:u32]
0002a9f4: when 31:0[R0] <> 0 goto %0001ccac
00035b8b: goto %0002a9f8

0002a9f8:
0002a9fc: R0 := R28
0002aa01: R30 := 0x40C130
0002aa03: call @strdup with return %0002aa05

0002aa05:
0002aa08: R30 := 0x40C134
0002aa0a: call @uppercase with return %0002aa0c

0002aa0c:
0002aa10: R1 := R0
0002aa16: R27 := R21 + 0x64
0002aa1c: R0 := R21
0002aa24: mem := mem with [R31 + 0x20, el]:u64 <- R1
0002aa29: R30 := 0x40C148
0002aa2b: call @strdup with return %0002aa2d

0002aa2d:
0002aa30: R30 := 0x40C14C
0002aa32: call @uppercase with return %0002aa34

0002aa34:
0002aa3a: mem := mem with [R31 + 0x28, el]:u64 <- R0
0002aa40: R0 := R27
0002aa45: R30 := 0x40C158
0002aa47: call @strdup with return %0002aa49

0002aa49:
0002aa4c: R30 := 0x40C15C
0002aa4e: call @uppercase with return %0002aa50

0002aa50:
0002aa54: R1 := R0
0002aa5a: R0 := R28
0002aa62: mem := mem with [R31 + 0x30, el]:u64 <- R1
0002aa67: R30 := 0x40C16C
0002aa69: call @strlen with return %0002aa6b

0002aa6b:
0002aa6f: R22 := pad:64[31:0[R0]]
0002aa75: R0 := R21
0002aa7a: R30 := 0x40C178
0002aa7c: call @strlen with return %0002aa7e

0002aa7e:
0002aa82: R23 := pad:64[31:0[R0]]
0002aa88: R0 := R27
0002aa8d: R30 := 0x40C184
0002aa8f: call @strlen with return %0002aa91

0002aa91:
0002aa95: R20 := pad:64[31:0[R0]]
0002aa9c: R0 := pad:64[mem[R26, el]:u32]
0002aaa2: #1294 := R31 + 0x38
0002aaa7: R26 := mem[#1294, el]:u64
0002aaac: R1 := mem[#1294 + 8, el]:u64
0002aab4: mem := mem with [R31 + 8, el]:u64 <- R1
0002aab9: when 31:0[R0] = 0 goto %0001ce45
00035b8c: goto %0001cd7a

0001ccac:
0001ccb5: R0 := R28
0001ccba: R30 := 0x40BE30
0001ccbc: call @strdup with return %0001ccbe

0001ccbe:
0001ccc1: R30 := 0x40BE34
0001ccc3: call @uppercase with return %0001ccc5

0001ccc5:
0001ccc9: R20 := R0
0001cccf: R1 := R20
0001ccd5: R0 := R31 + 0x20
0001ccda: R30 := 0x40BE44
0001ccdc: call @unicode with return %0001ccde

0001ccde:
0001cce2: R22 := pad:64[31:0[R0]]
0001cce8: R0 := R20
0001ccee: R27 := R21 + 0x64
0001ccf3: R30 := 0x40BE54
0001ccf5: call @free with return %0001ccf7

0001ccf7:
0001ccfb: R1 := R21
0001cd01: R0 := R31 + 0x28
0001cd06: R30 := 0x40BE60
0001cd08: call @unicode with return %0001cd0a

0001cd0a:
0001cd0e: R23 := pad:64[31:0[R0]]
0001cd14: R0 := R27
0001cd19: R30 := 0x40BE6C
0001cd1b: call @strdup with return %0001cd1d

0001cd1d:
0001cd20: R30 := 0x40BE70
0001cd22: call @uppercase with return %0001cd24

0001cd24:
0001cd28: R1 := R0
0001cd2e: R0 := R31 + 0x30
0001cd36: mem := mem with [R31 + 8, el]:u64 <- R1
0001cd3b: R30 := 0x40BE80
0001cd3d: call @unicode with return %0001cd3f

0001cd3f:
0001cd43: R20 := pad:64[31:0[R0]]
0001cd4a: R1 := mem[R31 + 8, el]:u64
0001cd50: R0 := R1
0001cd55: R30 := 0x40BE90
0001cd57: call @free with return %0001cd59

0001cd59:
0001cd5e: R0 := pad:64[mem[R26, el]:u32]
0001cd64: #678 := R31 + 0x38
0001cd69: R26 := mem[#678, el]:u64
0001cd6e: R1 := mem[#678 + 8, el]:u64
0001cd76: mem := mem with [R31 + 8, el]:u64 <- R1
0001cd7c: when 31:0[R0] <> 0 goto %0001cd7a
00035b8d: goto %0001ce45

0001cd7a:
0001cd82: R1 := 0x416000
0001cd87: R0 := 2
0001cd8d: R1 := R1 + 0x210
0001cd92: R30 := 0x40C1A8
0001cd94: call @__printf_chk with return %0001cd96

0001cd96:
0001cd9a: R2 := R27
0001cd9f: R1 := 0x416000
0001cda4: R0 := 2
0001cdaa: R1 := R1 + 0x220
0001cdaf: R30 := 0x40C1BC
0001cdb1: call @__printf_chk with return %0001cdb3

0001cdb3:
0001cdb7: R2 := R28
0001cdbc: R1 := 0x416000
0001cdc1: R0 := 2
0001cdc7: R1 := R1 + 0x238
0001cdcc: R30 := 0x40C1D0
0001cdce: call @__printf_chk with return %0001cdd0

0001cdd0:
0001cdd3: R1 := 0x416000
0001cdd9: R2 := R21
0001cddf: R1 := R1 + 0x250
0001cde4: R0 := 2
0001cde9: R30 := 0x40C1E4
0001cdeb: call @__printf_chk with return %0001cded

0001cded:
0001cdf1: when 31:0[R25] <> 0 goto %0001cdef
00035b8e: goto %0002ae1e

0001cdef:
0001cdf9: R0 := mem[R31 + 8, el]:u64
0001cdff: R1 := extend:64[31:0[R25]]
0001ce04: R2 := 7
0001ce09: R30 := 0x40C338
0001ce0b: call @printmem with return %0001ce0d

0001ce0d:
0001ce11: R2 := R0
0001ce17: R3 := pad:64[31:0[R25]]
0001ce1c: R1 := 0x416000
0001ce22: R1 := R1 + 0x268
0001ce28: R21 := R0
0001ce2d: R0 := 2
0001ce32: R30 := 0x40C354
0001ce34: call @__printf_chk with return %0001ce36

0001ce36:
0001ce3a: R0 := R21
0001ce3f: R30 := 0x40C35C
0001ce41: call @free with return %0001ce43

0001ce43:
0001ce47: when 31:0[R24] = 0 goto %0001ce45
00035b8f: goto %0002adc8

0002adc8:
0002adcb: goto %0002adc9

0002ae1e:
0002ae21: when 31:0[R24] = 0 goto %0001ce45
00035b90: goto %0002adc9

0002adc9:
0002add0: R1 := extend:64[31:0[R24]]
0002add6: R0 := R26
0002addb: R2 := 7
0002ade0: R30 := 0x40C1FC
0002ade2: call @printmem with return %0002ade4

0002ade4:
0002ade8: R3 := pad:64[31:0[R24]]
0002adee: R2 := R0
0002adf3: R1 := 0x416000
0002adf9: R1 := R1 + 0x268
0002adff: R21 := R0
0002ae04: R0 := 2
0002ae09: R30 := 0x40C218
0002ae0b: call @__printf_chk with return %0002ae0d

0002ae0d:
0002ae11: R0 := R21
0002ae16: R30 := 0x40C220
0002ae18: call @free with return %0002ae1a

0002ae1a:
0002ae1c: goto %0001ce45

0001ce45:
0001ce4d: R0 := 0x400
0001ce52: R30 := 0x40BEA8
0001ce54: call @zmalloc with return %0001ce56

0001ce56:
0001ce59: R8 := 0x544E
0001ce5f: R27 := R0
0001ce66: R2 := pad:64[31:0[R22] + 31:0[R23]]
0001ce6d: R8 := 63:32[R8].0x4D4C.15:0[R8]
0001ce74: R0 := pad:64[31:0[R2] + 31:0[R20]]
0001ce7a: R21 := pad:64[31:0[R25] + 0x40]
0001ce81: R8 := 63:48[R8].0x5353.31:0[R8]
0001ce88: R9 := pad:64[mem[R19 + 0x14, el]:u32]
0001ce8f: R1 := mem[R31 + 0x20, el]:u64
0001ce96: R3 := pad:64[31:0[R20] + 31:0[R24]]
0001ce9d: R28 := pad:64[31:0[R0] + 31:0[R24]]
0001cea4: R5 := pad:64[31:0[R21] + 31:0[R2]]
0001ceaa: R8 := 0x50.47:0[R8]
0001ceaf: R7 := 3
0001ceb5: R6 := pad:64[31:0[R2] + 0x40]
0001cebc: R5 := pad:64[31:0[R5] + 31:0[R3]]
0001cec1: R11 := 0x40
0001cec7: R0 := pad:64[31:0[R0] + 0x40]
0001cece: R10 := pad:64[31:0[R22] + 31:0[R11]]
0001ced4: R3 := pad:64[31:0[R28] + 0x40]
0001cedc: mem := mem with [R27, el]:u64 <- R8
0001cee2: R8 := pad:64[15:0[R23]]
0001ceea: mem := mem with [R27 + 8, el]:u32 <- 31:0[R7]
0001cef0: R7 := pad:64[15:0[R20]]
0001cef6: R19 := extend:64[31:0[R22]]
0001cefc: R22 := pad:64[15:0[R22]]
0001cf04: mem := mem with [R27 + 0x10, el]:u32 <- 31:0[R0]
0001cf0a: R0 := pad:64[15:0[R25]]
0001cf12: mem := mem with [R27 + 0x14, el]:u16 <- 15:0[R0]
0001cf18: R2 := R19
0001cf20: mem := mem with [R27 + 0x16, el]:u16 <- 15:0[R0]
0001cf26: R0 := R27 + 0x40
0001cf2e: mem := mem with [R27 + 0x18, el]:u32 <- 31:0[R3]
0001cf34: R3 := pad:64[15:0[R24]]
0001cf3c: mem := mem with [R27 + 0xC, el]:u16 <- 15:0[R3]
0001cf42: R23 := extend:64[31:0[R23]]
0001cf4a: mem := mem with [R27 + 0xE, el]:u16 <- 15:0[R3]
0001cf4f: R3 := 0x3C0
0001cf57: mem := mem with [R27 + 0x1C, el]:u16 <- 15:0[R22]
0001cf5d: R20 := extend:64[31:0[R20]]
0001cf65: mem := mem with [R27 + 0x1E, el]:u16 <- 15:0[R22]
0001cf6a: R22 := 0x400
0001cf72: mem := mem with [R27 + 0x20, el]:u32 <- 31:0[R11]
0001cf7a: mem := mem with [R27 + 0x24, el]:u16 <- 15:0[R8]
0001cf82: mem := mem with [R27 + 0x26, el]:u16 <- 15:0[R8]
0001cf8a: mem := mem with [R27 + 0x28, el]:u32 <- 31:0[R10]
0001cf92: mem := mem with [R27 + 0x2C, el]:u16 <- 15:0[R7]
0001cf9a: mem := mem with [R27 + 0x2E, el]:u16 <- 15:0[R7]
0001cfa0: #679 := R27 + 0x30
0001cfa6: mem := mem with [#679, el]:u32 <- 31:0[R6]
0001cfab: mem := mem with [#679 + 4, el]:u32 <- 0
0001cfb3: mem := mem with [R27 + 0x38, el]:u16 <- 15:0[R5]
0001cfbb: mem := mem with [R27 + 0x3C, el]:u32 <- 31:0[R9]
0001cfc0: R30 := 0x40BF78
0001cfc2: call @__memcpy_chk with return %0001cfc4

0001cfc4:
0001cfc9: R1 := mem[R31 + 0x28, el]:u64
0001cfcf: R0 := R19 + 0x40
0001cfd5: #680 := R0 - 0x400
0001cfda: VF := extend:128[#680] <> extend:128[R0] - 0x400
0001cfdf: CF := pad:128[#680] <> pad:128[R0] + 0xFFFFFFFFFFFFFC00
0001cfe3: ZF := #680 = 0
0001cfe7: NF := 63:63[#680]
0001cfed: R2 := R23
0001cffb: when CF goto %0001cff3
0001cffc: goto %0001cff7

0001cff7:
0001cff8: R3 := R22
0001cffe: goto %0001cffa

0001cff3:
0001cff4: R3 := R0
0001cffd: goto %0001cffa

0001cffa:
0001d005: R19 := R19 + R23
0001d00c: R3 := R3 + ~R0 + 1
0001d013: R0 := R27 + R0
0001d018: R30 := 0x40BF9C
0001d01a: call @__memcpy_chk with return %0001d01c

0001d01c:
0001d020: R3 := R19 + 0x40
0001d026: R2 := R20
0001d02d: R23 := mem[R31 + 0x30, el]:u64
0001d033: #681 := ~R22
0001d038: #682 := R3 + ~R22
0001d03e: VF := extend:128[#682 + 1] <> extend:128[R3] + extend:128[#681] + 1
0001d044: CF := pad:128[#682 + 1] <> pad:128[R3] + pad:128[#681] + 1
0001d048: ZF := #682 + 1 = 0
0001d04c: NF := 63:63[#682 + 1]
0001d05a: when CF goto %0001d052
0001d05b: goto %0001d056

0001d056:
0001d057: R1 := R22
0001d05d: goto %0001d059

0001d052:
0001d053: R1 := R3
0001d05c: goto %0001d059

0001d059:
0001d064: R0 := R27 + R3
0001d06b: R3 := R1 + ~R3 + 1
0001d071: R1 := R23
0001d076: R30 := 0x40BFC0
0001d078: call @__memcpy_chk with return %0001d07a

0001d07a:
0001d07e: when R26 = 0 goto %0001d07c
00035b91: goto %0002acdd

0001d07c:
0001d086: R0 := mem[R31 + 8, el]:u64
0001d08c: when R0 = 0 goto %0001d08a
00035b92: goto %0002ac67

0002ac67:
0002ac6b: R20 := R20 + 0x58
0002ac71: R2 := extend:64[31:0[R25]]
0002ac78: R3 := R20 + R19
0002ac7f: R19 := mem[R31 + 8, el]:u64
0002ac85: #1302 := R3 - 0x400
0002ac8a: VF := extend:128[#1302] <> extend:128[R3] - 0x400
0002ac8f: CF := pad:128[#1302] <> pad:128[R3] + 0xFFFFFFFFFFFFFC00
0002ac93: ZF := #1302 = 0
0002ac97: NF := 63:63[#1302]
0002aca5: when CF goto %0002ac9d
0002aca6: goto %0002aca1

0002aca1:
0002aca2: R22 := R22
0002aca8: goto %0002aca4

0002ac9d:
0002ac9e: R22 := R3
0002aca7: goto %0002aca4

0002aca4:
0002acaf: R0 := R27 + R3
0002acb5: R1 := R19
0002acbc: R3 := R22 + ~R3 + 1
0002acc1: R30 := 0x40C26C
0002acc3: call @__memcpy_chk with return %0002acc5

0002acc5:
0002acc9: R0 := R19
0002acce: R30 := 0x40C274
0002acd0: call @free with return %0002acd2

0002acd2:
0002acd7: R23 := mem[R31 + 0x30, el]:u64
0002acdb: goto %0001d08a

0002acdd:
0002ace1: R3 := R20 + 0x40
0002ace7: R2 := extend:64[31:0[R24]]
0002acee: R3 := R3 + R19
0002acf4: R1 := R26
0002acfa: #1303 := ~R22
0002acff: #1304 := R3 + ~R22
0002ad05: VF := extend:128[#1304 + 1] <> extend:128[R3] + extend:128[#1303] +
          1
0002ad0b: CF := pad:128[#1304 + 1] <> pad:128[R3] + pad:128[#1303] + 1
0002ad0f: ZF := #1304 + 1 = 0
0002ad13: NF := 63:63[#1304 + 1]
0002ad1a: R0 := R27 + R3
0002ad28: when CF goto %0002ad20
0002ad29: goto %0002ad24

0002ad24:
0002ad25: R5 := R22
0002ad2b: goto %0002ad27

0002ad20:
0002ad21: R5 := R3
0002ad2a: goto %0002ad27

0002ad27:
0002ad32: R3 := R5 + ~R3 + 1
0002ad37: R30 := 0x40BFE8
0002ad39: call @__memcpy_chk with return %0002ad3b

0002ad3b:
0002ad40: R0 := mem[R31 + 8, el]:u64
0002ad46: when R0 = 0 goto %0002ad44
00035b93: goto %0002ad5d

0002ad5d:
0002ad61: R20 := R20 + 0x58
0002ad67: R2 := extend:64[31:0[R25]]
0002ad6e: R3 := R20 + R19
0002ad75: R19 := mem[R31 + 8, el]:u64
0002ad7b: #1305 := R3 - 0x400
0002ad80: VF := extend:128[#1305] <> extend:128[R3] - 0x400
0002ad85: CF := pad:128[#1305] <> pad:128[R3] + 0xFFFFFFFFFFFFFC00
0002ad89: ZF := #1305 = 0
0002ad8d: NF := 63:63[#1305]
0002ad9b: when CF goto %0002ad93
0002ad9c: goto %0002ad97

0002ad97:
0002ad98: R22 := R22
0002ad9e: goto %0002ad9a

0002ad93:
0002ad94: R22 := R3
0002ad9d: goto %0002ad9a

0002ad9a:
0002ada5: R0 := R27 + R3
0002adab: R1 := R19
0002adb2: R3 := R22 + ~R3 + 1
0002adb7: R30 := 0x40C018
0002adb9: call @__memcpy_chk with return %0002adbb

0002adbb:
0002adbf: R0 := R19
0002adc4: R30 := 0x40C020
0002adc6: call @free with return %0002ad44

0002ad44:
0002ad4d: R0 := R26
0002ad52: R30 := 0x40C028
0002ad54: call @free with return %0002ad56

0002ad56:
0002ad5b: R23 := mem[R31 + 0x30, el]:u64
00035b94: goto %0001d08a

0001d08a:
0001d093: R0 := R23
0001d098: R30 := 0x40C034
0001d09a: call @free with return %0001d09c

0001d09c:
0001d0a1: R0 := mem[R31 + 0x28, el]:u64
0001d0a6: R30 := 0x40C03C
0001d0a8: call @free with return %0001d0aa

0001d0aa:
0001d0af: R0 := mem[R31 + 0x20, el]:u64
0001d0b4: R30 := 0x40C044
0001d0b6: call @free with return %0001d0b8

0001d0b8:
0001d0bd: R0 := mem[R31 + 0x10, el]:u64
0001d0c2: R1 := 0x42F000
0001d0c9: R1 := mem[R1 + 0xFB8, el]:u64
0001d0d1: mem := mem with [R0, el]:u64 <- R27
0001d0d8: R0 := pad:64[31:0[R21] + 31:0[R28]]
0001d0df: R3 := mem[R31 + 0x48, el]:u64
0001d0e6: R2 := mem[R1, el]:u64
0001d0ec: #683 := ~R2
0001d0f1: #684 := R3 + ~R2
0001d0f7: VF := extend:128[#684 + 1] <> extend:128[R3] + extend:128[#683] + 1
0001d0fd: CF := pad:128[#684 + 1] <> pad:128[R3] + pad:128[#683] + 1
0001d101: ZF := #684 + 1 = 0
0001d105: NF := 63:63[#684 + 1]
0001d109: R3 := #684 + 1
0001d10e: R2 := 0
0001d114: when ZF <> 1 goto %0001d112
00035b95: goto %0002a66b

0001d112:
0001d11a: R30 := 0x40C3A0
0001d11c: call @__stack_chk_fail with return %00035b96

00035b96:
00035b97: call @gen_407_page with noreturn

0002a66b:
0002a66f: #1282 := R31 + 0x50
0002a674: R29 := mem[#1282, el]:u64
0002a679: R30 := mem[#1282 + 8, el]:u64
0002a67f: #1283 := R31 + 0x60
0002a684: R19 := mem[#1283, el]:u64
0002a689: R20 := mem[#1283 + 8, el]:u64
0002a68f: #1284 := R31 + 0x70
0002a694: R21 := mem[#1284, el]:u64
0002a699: R22 := mem[#1284 + 8, el]:u64
0002a69f: #1285 := R31 + 0x80
0002a6a4: R23 := mem[#1285, el]:u64
0002a6a9: R24 := mem[#1285 + 8, el]:u64
0002a6af: #1286 := R31 + 0x90
0002a6b4: R25 := mem[#1286, el]:u64
0002a6b9: R26 := mem[#1286 + 8, el]:u64
0002a6bf: #1287 := R31 + 0xA0
0002a6c4: R27 := mem[#1287, el]:u64
0002a6c9: R28 := mem[#1287 + 8, el]:u64
0002a6cf: R31 := R31 + 0xB0
0002a6d4: R1 := 0
0002a6d9: R2 := 0
0002a6de: R3 := 0
0002a6e3: R4 := 0
0002a6e8: R5 := 0
0002a6ed: R6 := 0
0002a6f2: R7 := 0
0002a6f7: R8 := 0
0002a6fc: R9 := 0
0002a701: R10 := 0
0002a706: R11 := 0
0002a70b: R16 := 0
0002a710: R17 := 0
0002a715: call R30 with noreturn

00035b98: sub ntlm_set_key(ntlm_set_key_result)
00035edf: ntlm_set_key_result :: out u32 = low:32[R0]

0001c3a5:
0001c3ac: R31 := R31 - 0x20
0001c3b2: R3 := R0
0001c3b7: R2 := 0x42F000
0001c3be: R2 := mem[R2 + 0xFB8, el]:u64
0001c3c4: R0 := R1
0001c3ca: #645 := R31 + 0x10
0001c3d0: mem := mem with [#645, el]:u64 <- R29
0001c3d6: mem := mem with [#645 + 8, el]:u64 <- R30
0001c3dc: R29 := R31 + 0x10
0001c3e2: R1 := R31
0001c3e9: R8 := pad:64[mem[R3]]
0001c3f0: R6 := pad:64[mem[R3 + 1]]
0001c3f7: R4 := mem[R2, el]:u64
0001c3ff: mem := mem with [R31 + 8, el]:u64 <- R4
0001c404: R4 := 0
0001c40a: V0 := pad:128[R8]
0001c411: R4 := pad:64[mem[R3 + 2]]
0001c417: R2 := pad:64[0:0[R8].0]
0001c41e: R5 := pad:64[mem[R3 + 3]]
0001c425: R2 := pad:64[31:0[R2] | pad:32[31:1[R6]]]
0001c42b: R6 := pad:64[1:0[R6].0]
0001c432: R7 := pad:64[31:0[R6] | pad:32[31:2[R4]]]
0001c438: R4 := pad:64[2:0[R4].0]
0001c440: V0 := 127:16[V0].7:0[R2].7:0[V0]
0001c447: R6 := pad:64[31:0[R4] | pad:32[31:3[R5]]]
0001c44e: R4 := pad:64[mem[R3 + 4]]
0001c454: R5 := pad:64[3:0[R5].0]
0001c45b: R2 := pad:64[mem[R3 + 5]]
0001c462: R3 := pad:64[mem[R3 + 6]]
0001c46a: V0 := 127:24[V0].7:0[R7].15:0[V0]
0001c471: R5 := pad:64[31:0[R5] | pad:32[31:4[R4]]]
0001c477: R4 := pad:64[4:0[R4].0]
0001c47e: R4 := pad:64[31:0[R4] | pad:32[31:5[R2]]]
0001c484: R2 := pad:64[5:0[R2].0]
0001c48b: R2 := pad:64[31:0[R2] | pad:32[31:6[R3]]]
0001c491: R3 := pad:64[6:0[R3].0]
0001c499: V0 := 127:32[V0].7:0[R6].23:0[V0]
0001c4a1: V0 := 127:40[V0].7:0[R5].31:0[V0]
0001c4a9: V0 := 127:48[V0].7:0[R4].39:0[V0]
0001c4b1: V0 := 127:56[V0].7:0[R2].47:0[V0]
0001c4b9: V0 := 127:64[V0].7:0[R3].55:0[V0]
0001c4c1: mem := mem with [R31, el]:u64 <- 63:0[V0]
0001c4c6: R30 := 0x40B374
0001c4c8: call @gl_des_setkey with return %0001c4ca

0001c4ca:
0001c4cd: R0 := 0x42F000
0001c4d4: R0 := mem[R0 + 0xFB8, el]:u64
0001c4db: R2 := mem[R31 + 8, el]:u64
0001c4e2: R1 := mem[R0, el]:u64
0001c4e8: #646 := ~R1
0001c4ed: #647 := R2 + ~R1
0001c4f3: VF := extend:128[#647 + 1] <> extend:128[R2] + extend:128[#646] + 1
0001c4f9: CF := pad:128[#647 + 1] <> pad:128[R2] + pad:128[#646] + 1
0001c4fd: ZF := #647 + 1 = 0
0001c501: NF := 63:63[#647 + 1]
0001c505: R2 := #647 + 1
0001c50a: R1 := 0
0001c510: when ZF <> 1 goto %0001c50e
00035b99: goto %0001c51c

0001c50e:
0001c516: R30 := 0x40B3CC
0001c518: call @__stack_chk_fail with return %0001c51a

0001c51a:
00035b9a: call @ntlm_calc_resp with noreturn

0001c51c:
0001c520: #648 := R31 + 0x10
0001c525: R29 := mem[#648, el]:u64
0001c52a: R30 := mem[#648 + 8, el]:u64
0001c530: R31 := R31 + 0x20
0001c535: R0 := 0
0001c53a: R1 := 0
0001c53f: R2 := 0
0001c544: R3 := 0
0001c549: R4 := 0
0001c54e: R5 := 0
0001c553: R6 := 0
0001c558: R7 := 0
0001c55d: R8 := 0
0001c562: R16 := 0
0001c567: R17 := 0
0001c56c: call R30 with noreturn

00035b9b: sub open(open_pathname, open_flags, open_result)
00035ee0: open_pathname :: in u64 = R0
00035ee1: open_flags :: in u32 = low:32[R1]
00035ee2: open_result :: out u32 = low:32[R0]

0002cd7b:
00030ba5: R16 := 0x42F000
00030bac: R17 := mem[R16 + 0xC98, el]:u64
00030bb2: R16 := R16 + 0xC98
00030bb7: call R17 with noreturn

00035b9c: sub openlog(openlog_result)
00035ee3: openlog_result :: out u32 = low:32[R0]

0002bd41:
00030dcb: R16 := 0x42F000
00030dd2: R17 := mem[R16 + 0xD60, el]:u64
00030dd8: R16 := R16 + 0xD60
00030ddd: call R17 with noreturn

00035b9d: sub paclist_create(paclist_create_result)
00035ee4: paclist_create_result :: out u32 = low:32[R0]

0001d7b2:
0001d7b6: R31 := R31 - 0xC0
0001d7bb: R1 := 0x42F000
0001d7c2: R1 := mem[R1 + 0xFB8, el]:u64
0001d7c8: #703 := R31 + 0x60
0001d7ce: mem := mem with [#703, el]:u64 <- R29
0001d7d4: mem := mem with [#703 + 8, el]:u64 <- R30
0001d7da: R29 := R31 + 0x60
0001d7e2: mem := mem with [R31 + 0x28, el]:u64 <- R0
0001d7e9: R3 := mem[R1, el]:u64
0001d7f1: mem := mem with [R31 + 0x58, el]:u64 <- R3
0001d7f6: R3 := 0
0001d7fc: #704 := R31 + 0x48
0001d801: mem := mem with [#704, el]:u64 <- 0
0001d806: mem := mem with [#704 + 8, el]:u64 <- 0
0001d80c: when R0 = 0 goto %0001d80a
00035b9e: goto %0002a0bd

0001d80a:
0001d812: R0 := 0
0001d817: goto %0001d815

0002a0bd:
0002a0c1: #1264 := R31 + 0x90
0002a0c7: mem := mem with [#1264, el]:u64 <- R23
0002a0cd: mem := mem with [#1264 + 8, el]:u64 <- R24
0002a0d2: R24 := 0x42F000
0002a0d9: R24 := mem[R24 + 0xF30, el]:u64
0002a0df: #1265 := R31 + 0x70
0002a0e5: mem := mem with [#1265, el]:u64 <- R19
0002a0eb: mem := mem with [#1265 + 8, el]:u64 <- R20
0002a0f1: #1266 := R31 + 0x80
0002a0f7: mem := mem with [#1266, el]:u64 <- R21
0002a0fd: mem := mem with [#1266 + 8, el]:u64 <- R22
0002a103: #1267 := R31 + 0xA0
0002a109: mem := mem with [#1267, el]:u64 <- R25
0002a10f: mem := mem with [#1267 + 8, el]:u64 <- R26
0002a114: R26 := 0x416000
0002a11a: #1268 := R31 + 0xB0
0002a120: mem := mem with [#1268, el]:u64 <- R27
0002a126: mem := mem with [#1268 + 8, el]:u64 <- R28
0002a12b: R30 := 0x40CA20
0002a12d: call @strdup with return %0002a12f

0002a12f:
0002a133: R2 := R0
0002a139: R27 := R31 + 0x48
0002a13f: R1 := R26 + 0x670
0002a145: R0 := R27
0002a14d: mem := mem with [R31 + 0x30, el]:u64 <- R2
0002a155: mem := mem with [R31 + 0x48, el]:u64 <- R2
0002a15a: R30 := 0x40CA3C
0002a15c: call @strsep with return %0002a15e

0002a15e:
0002a163: R21 := pad:64[mem[R24, el]:u32]
0002a16b: mem := mem with [R31 + 0x50, el]:u64 <- R0
0002a170: when 31:0[R21] <> 0 goto %0002a01a
00035b9f: goto %0002a174

0002a01a:
0002a01d: R1 := 0x416000
0002a022: R0 := 2
0002a028: R1 := R1 + 0x678
0002a02d: R30 := 0x40CD04
0002a02f: call @__printf_chk with return %0002a031

0002a031:
0002a036: R0 := mem[R31 + 0x50, el]:u64
0002a03c: when R0 <> 0 goto %0002a03a
00035ba0: goto %0002a0a8

0002a0a8:
0002a0ab: R19 := 0
0002a0b0: R21 := 0
0002a0b4: goto %00029e78

0002a174:
0002a177: R19 := 0
0002a17c: when R0 = 0 goto %00029e81
00035ba1: goto %0002a03a

0002a03a:
0002a042: R1 := 0x42F000
0002a049: R1 := mem[R1 + 0xF28, el]:u64
0002a051: mem := mem with [R31 + 0x20, el]:u64 <- R1
0002a056: R23 := 0x42F000
0002a05d: R23 := mem[R23 + 0xFE0, el]:u64
0002a062: R25 := 0x414000
0002a067: R1 := 0x42F000
0002a06e: R1 := mem[R1 + 0xF90, el]:u64
0002a074: R25 := R25 + 0x138
0002a07a: R22 := R31 + 0x50
0002a07f: R21 := 0
0002a084: R19 := 0
0002a089: R28 := 0x416000
0002a091: mem := mem with [R31 + 0x10, el]:u64 <- R1
0002a096: R1 := 0x414000
0002a09c: R1 := R1 + 0x400
0002a0a4: mem := mem with [R31 + 0x18, el]:u64 <- R1
00035ba2: goto %00029d36

00029d36:
00029d40: R1 := pad:64[mem[R0]]
00029d46: #1256 := 31:0[R1] - 0x20
00029d4b: VF := extend:64[#1256] <> extend:64[31:0[R1]] - 0x20
00029d50: CF := pad:64[#1256] <> pad:64[31:0[R1]] + 0xFFFFFFE0
00029d54: ZF := #1256 = 0
00029d58: NF := 31:31[#1256]
00029d5e: when ZF <> 1 goto %00029d5c
00035ba3: goto %00029fad

00029fad:
00029fb1: R0 := R0 + 1
00029fb9: mem := mem with [R31 + 0x50, el]:u64 <- R0
00035ba4: goto %00029d5c

00029d5c:
00029d65: R1 := R25
00029d6b: R0 := R22
00029d70: R30 := 0x40CAB8
00029d72: call @strsep with return %00029d74

00029d74:
00029d78: R20 := R0
00029d7e: R1 := R28 + 0x690
00029d83: R30 := 0x40CAC4
00029d85: call @strcmp with return %00029d87

00029d87:
00029d8a: when 31:0[R0] = 0 goto %00029bbc
00035ba5: goto %00029d8e

00029bbc:
00029bc1: R1 := mem[R31 + 0x18, el]:u64
00029bc7: R0 := R22
00029bcc: R30 := 0x40CC28
00029bcf: call @strsep with return %00029bd1

00029bd1:
00029bd7: mem := mem with [R31, el]:u64 <- R0
00029bde: R1 := pad:64[mem[R24, el]:u32]
00029be5: R4 := mem[R31 + 0x50, el]:u64
00029beb: when 31:0[R1] <> 0 goto %00029be9
00035ba6: goto %0002a0b6

00029be9:
00029bf3: R3 := mem[R31, el]:u64
00029bf9: R2 := R20
00029bfe: R1 := 0x416000
00029c03: R0 := 2
00029c09: R1 := R1 + 0x698
00029c11: mem := mem with [R31 + 8, el]:u64 <- R4
00029c16: R30 := 0x40CCE8
00029c18: call @__printf_chk with return %00029c1a

00029c1a:
00029c1f: R20 := mem[R23, el]:u64
00029c26: R4 := mem[R31 + 8, el]:u64
00029c2b: goto %00029c29

0002a0b6:
0002a0bb: R20 := mem[R23, el]:u64
00035ba7: goto %00029c29

00029c29:
00029c2f: R2 := 0xA
00029c35: R0 := R4
00029c3a: R1 := 0
00029c3f: R30 := 0x40CC4C
00029c41: call @strtol with return %00029c43

00029c43:
00029c49: mem := mem with [R31 + 0x38, el]:u64 <- R0
00029c4f: R2 := pad:64[31:0[R0]]
00029c55: when R20 <> 0 goto %00029c53
00035ba8: goto %0002a016

00029c53:
00029c5d: R0 := mem[R20 + 8, el]:u64
00029c64: R1 := pad:64[mem[R0, el]:u32]
00029c6a: #1255 := 31:0[R1] - 1
00029c6f: VF := extend:64[#1255] <> extend:64[31:0[R1]] - 1
00029c74: CF := pad:64[#1255] <> pad:64[31:0[R1]] + 0xFFFFFFFF
00029c78: ZF := #1255 = 0
00029c7c: NF := 31:31[#1255]
00029c82: when ZF <> 1 goto %00029c80
00035ba9: goto %00029fbf

00029fbf:
00029fc4: R1 := pad:64[mem[R0 + 0x44, el]:u32]
00029fca: #1262 := ~31:0[R2]
00029fcf: #1263 := 31:0[R1] + ~31:0[R2]
00029fd5: VF := extend:64[#1263 + 1] <> extend:64[31:0[R1]] +
          extend:64[#1262] + 1
00029fdb: CF := pad:64[#1263 + 1] <> pad:64[31:0[R1]] + pad:64[#1262] + 1
00029fdf: ZF := #1263 + 1 = 0
00029fe3: NF := 31:31[#1263 + 1]
00029fe8: when ZF <> 1 goto %00029c80
00035baa: goto %00029fec

00029fec:
00029ff1: R1 := mem[R31, el]:u64
00029ff7: R0 := R0 + 4
00029fff: mem := mem with [R31 + 8, el]:u32 <- 31:0[R2]
0002a004: R30 := 0x40CC90
0002a006: call @strcmp with return %0002a008

0002a008:
0002a00d: R2 := pad:64[mem[R31 + 8, el]:u32]
0002a012: when 31:0[R0] <> 0 goto %00029c80
00035bab: goto %00029f57

00029c80:
00029c8a: R20 := mem[R20 + 0x10, el]:u64
00029c90: when R20 = 0 goto %00029c8e
00035bac: goto %00029c53

0002a016:
0002a018: goto %00029c8e

00029c8e:
00029c96: R0 := 0x42F000
00029c9d: R0 := mem[R0 + 0xF28, el]:u64
00029ca2: R20 := 0x42F000
00029ca9: R20 := mem[R20 + 0xF90, el]:u64
00029cae: R30 := 0x40CD2C
00029cb0: call @pthread_mutex_lock with return %00029cb2

00029cb2:
00029cb7: R0 := mem[R31, el]:u64
00029cbe: R1 := pad:64[mem[R31 + 0x38, el]:u32]
00029cc3: R30 := 0x40CD38
00029cc5: call @parent_add with return %00029cc7

00029cc7:
00029ccc: R0 := mem[R23, el]:u64
00029cd3: R1 := extend:64[mem[R20, el]:u32]
00029cd8: R30 := 0x40CD44
00029cda: call @proxylist_get with return %00029cdc

00029cdc:
00029ce0: R2 := R0
00029ce7: R1 := extend:64[mem[R20, el]:u32]
00029ced: R0 := R19
00029cf2: R30 := 0x40CD54
00029cf4: call @proxylist_add with return %00029cf6

00029cf6:
00029cfa: R19 := R0
00029cff: R0 := 0x42F000
00029d06: R0 := mem[R0 + 0xF28, el]:u64
00029d0b: R30 := 0x40CD64
00029d0d: call @pthread_mutex_unlock with return %00029d0f

00029d0f:
00029d12: goto %00029d10

00029d8e:
00029d93: R0 := pad:64[mem[R24, el]:u32]
00029d99: when 31:0[R0] = 0 goto %00029d97
00035bad: goto %00029f89

00029d97:
00029da1: R20 := mem[R23, el]:u64
00029da6: goto %00029da4

00029f89:
00029f8d: R2 := R20
00029f92: R1 := 0x416000
00029f97: R0 := 2
00029f9d: R1 := R1 + 0x6A8
00029fa2: R30 := 0x40CAE4
00029fa4: call @__printf_chk with return %00029fa6

00029fa6:
00029fab: R20 := mem[R23, el]:u64
00035bae: goto %00029da4

00029da4:
00029dab: when R20 = 0 goto %00029da9
00035baf: goto %00029f45

00029f45:
00035bb0: goto %00029f47

00029f47:
00029f4c: R0 := mem[R20 + 8, el]:u64
00029f53: R0 := pad:64[mem[R0, el]:u32]
00029f59: when 31:0[R0] = 0 goto %00029f57
00035bb1: goto %00029f7b

00029f57:
00029f61: R1 := mem[R20, el]:u64
00029f66: R2 := mem[R20 + 8, el]:u64
00029f6c: R0 := R19
00029f71: R30 := 0x40CCA4
00029f73: call @proxylist_add with return %00029f75

00029f75:
00029f79: R19 := R0
00035bb2: goto %00029d10

00029d10:
00029d17: R1 := R26 + 0x670
00029d1d: R0 := R27
00029d22: R30 := 0x40CCB4
00029d24: call @strsep with return %00029d26

00029d26:
00029d2c: mem := mem with [R31 + 0x50, el]:u64 <- R0
00029d32: R21 := pad:64[31:0[R21] + 1]
00029d38: when R0 <> 0 goto %00029d36
00035bb3: goto %00029fbb

00029fbb:
00029fbd: goto %00029e78

00029f7b:
00029f80: R20 := mem[R20 + 0x10, el]:u64
00029f85: when R20 <> 0 goto %00029f47
00035bb4: goto %00029da9

00029da9:
00029db1: R0 := 0x198
00029db6: R30 := 0x40CB0C
00029db8: call @zmalloc with return %00029dba

00029dba:
00029dbe: R20 := R0
00029dc4: R21 := pad:64[31:0[R21] + 1]
00029dcb: R0 := mem[R31 + 0x20, el]:u64
00029dd2: mem := mem with [R20, el]:u32 <- 0
00029dd7: R30 := 0x40CB20
00029dd9: call @pthread_mutex_lock with return %00029ddb

00029ddb:
00029de0: R3 := mem[R31 + 0x10, el]:u64
00029de6: R2 := R20
00029ded: R0 := mem[R23, el]:u64
00029df4: R1 := pad:64[mem[R3, el]:u32]
00029dfa: R1 := pad:64[31:0[R1] + 1]
00029e02: mem := mem with [R3, el]:u32 <- 31:0[R1]
00029e08: R1 := extend:64[31:0[R1]]
00029e0d: R30 := 0x40CB40
00029e0f: call @proxylist_add with return %00029e11

00029e11:
00029e16: R1 := mem[R31 + 0x10, el]:u64
00029e1c: R3 := R0
00029e22: R2 := R20
00029e28: R0 := R19
00029e30: mem := mem with [R23, el]:u64 <- R3
00029e37: R1 := extend:64[mem[R1, el]:u32]
00029e3c: R30 := 0x40CB5C
00029e3e: call @proxylist_add with return %00029e40

00029e40:
00029e44: R19 := R0
00029e4b: R0 := mem[R31 + 0x20, el]:u64
00029e50: R30 := 0x40CB68
00029e52: call @pthread_mutex_unlock with return %00029e54

00029e54:
00029e58: R1 := R26 + 0x670
00029e5e: R0 := R27
00029e63: R30 := 0x40CB74
00029e65: call @strsep with return %00029e67

00029e67:
00029e6d: mem := mem with [R31 + 0x50, el]:u64 <- R0
00029e72: when R0 <> 0 goto %00029d36
00035bb5: goto %00029e76

00029e76:
00035bb6: goto %00029e78

00029e78:
00029e7d: R0 := pad:64[mem[R24, el]:u32]
00029e83: when 31:0[R0] = 0 goto %00029e81
00035bb7: goto %00029f1b

00029f1b:
00029f1f: R2 := pad:64[31:0[R21]]
00029f24: R1 := 0x416000
00029f2a: R1 := R1 + 0x6B0
00029f2f: R0 := 2
00029f34: R30 := 0x40CB9C
00029f36: call @__printf_chk with return %00029f38

00029f38:
00029f3c: R0 := R19
00029f41: R30 := 0x40CBA4
00029f43: call @proxylist_dump with return %00029e81

00029e81:
00029e8b: R0 := mem[R31 + 0x30, el]:u64
00029e90: R30 := 0x40CBAC
00029e92: call @free with return %00029e94

00029e94:
00029e97: R0 := 0x28
00029e9c: R30 := 0x40CBB4
00029e9e: call @malloc with return %00029ea0

00029ea0:
00029ea5: R1 := mem[R31 + 0x28, el]:u64
00029eab: #1257 := R31 + 0x90
00029eb0: R23 := mem[#1257, el]:u64
00029eb5: R24 := mem[#1257 + 8, el]:u64
00029ebb: #1258 := R31 + 0xA0
00029ec0: R25 := mem[#1258, el]:u64
00029ec5: R26 := mem[#1258 + 8, el]:u64
00029ecb: #1259 := R31 + 0xB0
00029ed0: R27 := mem[#1259, el]:u64
00029ed5: R28 := mem[#1259 + 8, el]:u64
00029edd: mem := mem with [R0, el]:u64 <- R1
00029ee3: mem := mem with [R0 + 8, el]:u64 <- R19
00029ee9: #1260 := R31 + 0x70
00029eee: R19 := mem[#1260, el]:u64
00029ef3: R20 := mem[#1260 + 8, el]:u64
00029efb: mem := mem with [R0 + 0x18, el]:u32 <- 31:0[R21]
00029f01: #1261 := R31 + 0x80
00029f06: R21 := mem[#1261, el]:u64
00029f0b: R22 := mem[#1261 + 8, el]:u64
00029f12: mem := mem with [R0 + 0x10, el]:u64 <- 0
00029f19: mem := mem with [R0 + 0x20, el]:u64 <- 0
00035bb8: goto %0001d815

0001d815:
0001d81b: R1 := 0x42F000
0001d822: R1 := mem[R1 + 0xFB8, el]:u64
0001d829: R3 := mem[R31 + 0x58, el]:u64
0001d830: R2 := mem[R1, el]:u64
0001d836: #705 := ~R2
0001d83b: #706 := R3 + ~R2
0001d841: VF := extend:128[#706 + 1] <> extend:128[R3] + extend:128[#705] + 1
0001d847: CF := pad:128[#706 + 1] <> pad:128[R3] + pad:128[#705] + 1
0001d84b: ZF := #706 + 1 = 0
0001d84f: NF := 63:63[#706 + 1]
0001d853: R3 := #706 + 1
0001d858: R2 := 0
0001d85e: when ZF <> 1 goto %0001d85c
00035bb9: goto %00029b83

0001d85c:
0001d865: #707 := R31 + 0x70
0001d86b: mem := mem with [#707, el]:u64 <- R19
0001d871: mem := mem with [#707 + 8, el]:u64 <- R20
0001d877: #708 := R31 + 0x80
0001d87d: mem := mem with [#708, el]:u64 <- R21
0001d883: mem := mem with [#708 + 8, el]:u64 <- R22
0001d889: #709 := R31 + 0x90
0001d88f: mem := mem with [#709, el]:u64 <- R23
0001d895: mem := mem with [#709 + 8, el]:u64 <- R24
0001d89b: #710 := R31 + 0xA0
0001d8a1: mem := mem with [#710, el]:u64 <- R25
0001d8a7: mem := mem with [#710 + 8, el]:u64 <- R26
0001d8ad: #711 := R31 + 0xB0
0001d8b3: mem := mem with [#711, el]:u64 <- R27
0001d8b9: mem := mem with [#711 + 8, el]:u64 <- R28
0001d8be: R30 := 0x40CD88
0001d8c0: call @__stack_chk_fail with return %0001d8c2

0001d8c2:
00035bba: call @paclist_get with noreturn

00029b83:
00029b87: #1254 := R31 + 0x60
00029b8c: R29 := mem[#1254, el]:u64
00029b91: R30 := mem[#1254 + 8, el]:u64
00029b97: R31 := R31 + 0xC0
00029b9c: R1 := 0
00029ba1: R2 := 0
00029ba6: R3 := 0
00029bab: R4 := 0
00029bb0: R16 := 0
00029bb5: R17 := 0
00029bba: call R30 with noreturn

00035bbb: sub paclist_free(paclist_free_result)
00035ee5: paclist_free_result :: out u32 = low:32[R0]

0001da99:
0001da9d: when R0 = 0 goto %0001da9b
00035bbc: goto %00029aa6

0001da9b:
0001daa3: R0 := 0
0001daa8: R1 := 0
0001daad: R16 := 0
0001dab2: R17 := 0
0001dab7: call R30 with noreturn

00029aa6:
00029aaa: #1251 := R31 - 0x20
00029ab0: mem := mem with [#1251, el]:u64 <- R29
00029ab6: mem := mem with [#1251 + 8, el]:u64 <- R30
00029aba: R31 := #1251
00029ac0: R29 := R31
00029ac6: #1252 := R31 + 0x10
00029acc: mem := mem with [#1252, el]:u64 <- R19
00029ad2: mem := mem with [#1252 + 8, el]:u64 <- R20
00029ad8: R19 := R0
00035bbd: goto %00029adc

00029adc:
00029ae0: R20 := R19
00029ae7: R19 := mem[R19 + 0x20, el]:u64
00029aec: R1 := 0
00029af3: R0 := mem[R20 + 8, el]:u64
00029af8: R30 := 0x40CEDC
00029afa: call @proxylist_free with return %00029afc

00029afc:
00029b00: R0 := R20
00029b05: R30 := 0x40CEE4
00029b07: call @free with return %00029b09

00029b09:
00029b0c: when R19 <> 0 goto %00029adc
00035bbe: goto %00029b10

00029b10:
00029b14: #1253 := R31 + 0x10
00029b19: R19 := mem[#1253, el]:u64
00029b1e: R20 := mem[#1253 + 8, el]:u64
00029b25: R29 := mem[R31, el]:u64
00029b2a: R30 := mem[R31 + 8, el]:u64
00029b2e: R31 := R31 + 0x20
00029b33: R0 := 0
00029b38: R1 := 0
00029b3d: R16 := 0
00029b42: R17 := 0
00029b47: call R30 with noreturn

00035bbf: sub paclist_get(paclist_get_result)
00035ee6: paclist_get_result :: out u32 = low:32[R0]

0001d8c6:
0001d8ca: #712 := R31 - 0x30
0001d8d0: mem := mem with [#712, el]:u64 <- R29
0001d8d6: mem := mem with [#712 + 8, el]:u64 <- R30
0001d8da: R31 := #712
0001d8e0: R29 := R31
0001d8e8: mem := mem with [R31 + 0x20, el]:u64 <- R21
0001d8ed: R21 := 0x42F000
0001d8f4: R21 := mem[R21 + 0xF98, el]:u64
0001d8fa: #713 := R31 + 0x10
0001d900: mem := mem with [#713, el]:u64 <- R19
0001d906: mem := mem with [#713 + 8, el]:u64 <- R20
0001d90c: R20 := R0
0001d913: R19 := mem[R21, el]:u64
0001d919: when R19 <> 0 goto %0001d917
00035bc0: goto %00029b7f

0001d917:
0001d921: R1 := mem[R19, el]:u64
0001d927: R0 := R20
0001d92c: R30 := 0x40CDCC
0001d92f: call @strcmp with return %0001d931

0001d931:
0001d935: when 31:0[R0] <> 0 goto %0001d933
00035bc1: goto %00029b65

00029b65:
00029b68: R0 := 0x42F000
00029b6f: R0 := mem[R0 + 0xF30, el]:u64
00029b76: R0 := pad:64[mem[R0, el]:u32]
00029b7b: when 31:0[R0] <> 0 goto %0001da36
00035bc2: goto %0001d988

0001da36:
0001da3a: R2 := R20
0001da3f: R1 := 0x416000
0001da44: R0 := 2
0001da4a: R1 := R1 + 0x6D8
0001da4f: R30 := 0x40CE8C
0001da51: call @__printf_chk with return %0001da53

0001da53:
0001da58: R21 := mem[R31 + 0x20, el]:u64
0001da5e: R0 := R19
0001da64: #716 := R31 + 0x10
0001da69: R19 := mem[#716, el]:u64
0001da6e: R20 := mem[#716 + 8, el]:u64
0001da75: R29 := mem[R31, el]:u64
0001da7a: R30 := mem[R31 + 8, el]:u64
0001da7e: R31 := R31 + 0x30
0001da83: R1 := 0
0001da88: R2 := 0
0001da8d: R16 := 0
0001da92: R17 := 0
0001da97: call R30 with noreturn

0001d933:
0001d93d: R19 := mem[R19 + 0x20, el]:u64
0001d943: when R19 = 0 goto %0001d941
00035bc3: goto %0001d917

00029b7f:
00029b81: goto %0001d941

0001d941:
0001d94a: R0 := R20
0001d94f: R30 := 0x40CE0C
0001d951: call @paclist_create with return %0001d953

0001d953:
0001d958: R1 := mem[R21, el]:u64
0001d95e: R19 := R0
0001d964: when R1 = 0 goto %0001d962
00035bc4: goto %00029b49

0001d962:
0001d96d: mem := mem with [R21, el]:u64 <- R0
0001d972: goto %0001d970

00029b49:
00029b4d: R0 := R1
00029b54: R1 := mem[R1 + 0x20, el]:u64
00029b59: when R1 <> 0 goto %00029b49
00035bc5: goto %00029b5d

00029b5d:
00029b63: mem := mem with [R0 + 0x20, el]:u64 <- R19
00035bc6: goto %0001d970

0001d970:
0001d976: R0 := 0x42F000
0001d97d: R0 := mem[R0 + 0xF30, el]:u64
0001d984: R0 := pad:64[mem[R0, el]:u32]
0001d98a: when 31:0[R0] = 0 goto %0001d988
00035bc7: goto %0001d9d3

0001d9d3:
0001d9d7: R2 := R20
0001d9dc: R1 := 0x416000
0001d9e1: R0 := 2
0001d9e7: R1 := R1 + 0x6F8
0001d9ec: R30 := 0x40CE4C
0001d9ee: call @__printf_chk with return %0001d9f0

0001d9f0:
0001d9f5: R21 := mem[R31 + 0x20, el]:u64
0001d9fb: R0 := R19
0001da01: #715 := R31 + 0x10
0001da06: R19 := mem[#715, el]:u64
0001da0b: R20 := mem[#715 + 8, el]:u64
0001da12: R29 := mem[R31, el]:u64
0001da17: R30 := mem[R31 + 8, el]:u64
0001da1b: R31 := R31 + 0x30
0001da20: R1 := 0
0001da25: R2 := 0
0001da2a: R16 := 0
0001da2f: R17 := 0
0001da34: call R30 with noreturn

0001d988:
0001d992: R21 := mem[R31 + 0x20, el]:u64
0001d998: R0 := R19
0001d99e: #714 := R31 + 0x10
0001d9a3: R19 := mem[#714, el]:u64
0001d9a8: R20 := mem[#714 + 8, el]:u64
0001d9af: R29 := mem[R31, el]:u64
0001d9b4: R30 := mem[R31 + 8, el]:u64
0001d9b8: R31 := R31 + 0x30
0001d9bd: R1 := 0
0001d9c2: R2 := 0
0001d9c7: R16 := 0
0001d9cc: R17 := 0
0001d9d1: call R30 with noreturn

00035bc8: sub parent_add(parent_add_result)
00035ee7: parent_add_result :: out u32 = low:32[R0]

0001d6a3:
0001d6a7: #698 := R31 - 0x40
0001d6ad: mem := mem with [#698, el]:u64 <- R29
0001d6b3: mem := mem with [#698 + 8, el]:u64 <- R30
0001d6b7: R31 := #698
0001d6bd: R29 := R31
0001d6c3: #699 := R31 + 0x10
0001d6c9: mem := mem with [#699, el]:u64 <- R19
0001d6cf: mem := mem with [#699 + 8, el]:u64 <- R20
0001d6d5: #700 := R31 + 0x20
0001d6db: mem := mem with [#700, el]:u64 <- R21
0001d6e1: mem := mem with [#700 + 8, el]:u64 <- R22
0001d6e7: R21 := pad:64[31:0[R1]]
0001d6ed: #701 := R31 + 0x30
0001d6f3: mem := mem with [#701, el]:u64 <- R23
0001d6f9: mem := mem with [#701 + 8, el]:u64 <- R24
0001d6fe: R30 := 0x40C82C
0001d700: call @strdup with return %0001d702

0001d702:
0001d705: R1 := 0x3A
0001d70b: R19 := R0
0001d710: R30 := 0x40C838
0001d713: call @strrchr with return %0001d715

0001d715:
0001d718: VF := 0
0001d71b: CF := 1
0001d71f: ZF := R0 = 0
0001d723: NF := 63:63[R0]
0001d729: #702 := ZF
0001d72c: VF := 0
0001d730: CF := #702
0001d735: ZF := #702 & 31:0[R21] = 0
0001d73a: NF := #702 & 31:31[R21]
0001d740: when ZF goto %0001d73e
00035bc9: goto %0002a180

0002a180:
0002a184: R20 := R0
0002a18b: R22 := pad:64[31:0[R0] + ~31:0[R19] + 1]
0002a191: when R0 = 0 goto %0002a18f
00035bca: goto %0002a1a8

0002a18f:
0002a198: R0 := R19
0002a19d: R30 := 0x40C948
0002a19f: call @strlen with return %0002a1a1

0002a1a1:
0002a1a5: R22 := pad:64[31:0[R0]]
0002a1aa: goto %0002a1a8

0002a1a8:
0002a1b0: R0 := pad:64[mem[R19]]
0002a1b6: #1269 := 31:0[R0] - 0x5B
0002a1bb: VF := extend:64[#1269] <> extend:64[31:0[R0]] - 0x5B
0002a1c0: CF := pad:64[#1269] <> pad:64[31:0[R0]] + 0xFFFFFFA5
0002a1c4: ZF := #1269 = 0
0002a1c8: NF := 31:31[#1269]
0002a1ce: when ZF <> 1 goto %0002a1cc
00035bcb: goto %0002a374

0002a374:
0002a378: R0 := pad:64[31:0[R22] - 1]
0002a380: R0 := pad:64[mem[R19 + extend:64[31:0[R0]]]]
0002a386: #1273 := 31:0[R0] - 0x5D
0002a38b: VF := extend:64[#1273] <> extend:64[31:0[R0]] - 0x5D
0002a390: CF := pad:64[#1273] <> pad:64[31:0[R0]] + 0xFFFFFFA3
0002a394: ZF := #1273 = 0
0002a398: NF := 31:31[#1273]
0002a39e: when ZF goto %0002a39c
00035bcc: goto %0002a1cc

0002a39c:
0002a3a5: R2 := pad:64[31:0[R22] - 2]
0002a3ab: R0 := R19
0002a3b0: R1 := 1
0002a3b5: R30 := 0x40C960
0002a3b7: call @substr with return %0002a3b9

0002a3b9:
0002a3bd: R23 := R0
0002a3c1: goto %0002a1ef

0002a1cc:
0002a1d5: R2 := pad:64[31:0[R22]]
0002a1db: R0 := R19
0002a1e0: R1 := 0
0002a1e5: R30 := 0x40C87C
0002a1e7: call @substr with return %0002a1e9

0002a1e9:
0002a1ed: R23 := R0
00035bcd: goto %0002a1ef

0002a1ef:
0002a1f3: when R20 = 0 goto %0002a1f1
00035bce: goto %0002a34a

0002a34a:
0002a34e: R22 := extend:64[31:0[R22]]
0002a353: R2 := 0xA
0002a359: R22 := R22 + 1
0002a35e: R1 := 0
0002a365: R0 := R19 + R22
0002a36a: R30 := 0x40C89C
0002a36c: call @strtol with return %0002a36e

0002a36e:
0002a372: R21 := pad:64[31:0[R0]]
00035bcf: goto %0002a1f1

0002a1f1:
0002a1fa: when 31:0[R21] = 0 goto %0002a1f8
00035bd0: goto %0002a22b

0002a1f8:
0002a201: R3 := R19
0002a206: R2 := 0x416000
0002a20c: R2 := R2 + 0x620
0002a211: R1 := 2
0002a216: R0 := 3
0002a21b: R30 := 0x40C980
0002a21d: call @__syslog_chk with return %0002a21f

0002a21f:
0002a222: R0 := 1
0002a227: R30 := 0x40C988
0002a229: call @myexit with return %0001d73e

0001d73e:
0001d747: R3 := R19
0001d74c: R2 := 0x416000
0001d752: R2 := R2 + 0x648
0001d757: R1 := 2
0001d75c: R0 := 3
0001d761: R30 := 0x40C9A0
0001d763: call @__syslog_chk with return %0001d765

0001d765:
0001d768: R0 := 1
0001d76d: R30 := 0x40C9A8
0001d76f: call @myexit with return %0001d771

0001d771:
00035bd1: call @parent_available with noreturn

0002a22b:
0002a22e: R22 := 0x42F000
0002a235: R22 := mem[R22 + 0xF90, el]:u64
0002a23a: R0 := 0x198
0002a23f: R30 := 0x40C8B4
0002a241: call @zmalloc with return %0002a243

0002a243:
0002a247: R20 := R0
0002a24c: R3 := 1
0002a254: mem := mem with [R0, el]:u32 <- 31:0[R3]
0002a258: R0 := R0 + 4
0002a25d: R24 := 0x42F000
0002a264: R24 := mem[R24 + 0xFE0, el]:u64
0002a26a: R1 := R23
0002a26f: R2 := 0x40
0002a274: R30 := 0x40C8D4
0002a276: call @strlcpy with return %0002a278

0002a278:
0002a27d: R1 := pad:64[mem[R22, el]:u32]
0002a283: R2 := R20
0002a28a: R0 := mem[R24, el]:u64
0002a290: R1 := pad:64[31:0[R1] + 1]
0002a298: mem := mem with [R20 + 0x44, el]:u32 <- 31:0[R21]
0002a29f: mem := mem with [R20 + 0x188, el]:u64 <- 0
0002a2a6: mem := mem with [R20 + 0x190, el]:u32 <- 0
0002a2ae: mem := mem with [R22, el]:u32 <- 31:0[R1]
0002a2b4: R1 := extend:64[31:0[R1]]
0002a2b9: R30 := 0x40C8FC
0002a2bb: call @proxylist_add with return %0002a2bd

0002a2bd:
0002a2c1: R1 := R0
0002a2c7: R0 := R19
0002a2cf: mem := mem with [R24, el]:u64 <- R1
0002a2d4: R30 := 0x40C90C
0002a2d6: call @free with return %0002a2d8

0002a2d8:
0002a2dc: R0 := R23
0002a2e1: R30 := 0x40C914
0002a2e3: call @free with return %0002a2e5

0002a2e5:
0002a2e9: #1270 := R31 + 0x10
0002a2ee: R19 := mem[#1270, el]:u64
0002a2f3: R20 := mem[#1270 + 8, el]:u64
0002a2f9: #1271 := R31 + 0x30
0002a2fe: R23 := mem[#1271, el]:u64
0002a303: R24 := mem[#1271 + 8, el]:u64
0002a30a: R0 := pad:64[mem[R22, el]:u32]
0002a310: #1272 := R31 + 0x20
0002a315: R21 := mem[#1272, el]:u64
0002a31a: R22 := mem[#1272 + 8, el]:u64
0002a321: R29 := mem[R31, el]:u64
0002a326: R30 := mem[R31 + 8, el]:u64
0002a32a: R31 := R31 + 0x40
0002a32f: R1 := 0
0002a334: R2 := 0
0002a339: R3 := 0
0002a33e: R16 := 0
0002a343: R17 := 0
0002a348: call R30 with noreturn

00035bd2: sub parent_available(parent_available_result)
00035ee8: parent_available_result :: out u32 = low:32[R0]

0001d775:
0001d778: R0 := 0x42F000
0001d77f: R0 := mem[R0 + 0xF90, el]:u64
0001d786: R0 := pad:64[mem[R0, el]:u32]
0001d78b: VF := 0
0001d78e: CF := 1
0001d792: ZF := 31:0[R0] = 0
0001d796: NF := 31:31[R0]
0001d7a4: when ~(NF = VF & ~ZF) goto %0001d79d
0001d7a5: goto %0001d7a0

0001d7a0:
0001d7a1: R0 := 1
0001d7a7: goto %0001d7a3

0001d79d:
0001d79e: R0 := 0
0001d7a6: goto %0001d7a3

0001d7a3:
0001d7ac: call R30 with noreturn

00035bd3: sub parent_free(parent_free_result)
00035ee9: parent_free_result :: out u32 = low:32[R0]

0001dabd:
0001dac0: R0 := 0x42F000
0001dac7: R0 := mem[R0 + 0xF98, el]:u64
0001dacd: #717 := R31 - 0x10
0001dad3: mem := mem with [#717, el]:u64 <- R29
0001dad9: mem := mem with [#717 + 8, el]:u64 <- R30
0001dadd: R31 := #717
0001dae3: R29 := R31
0001daea: R0 := mem[R0, el]:u64
0001daef: R30 := 0x40CF38
0001daf1: call @paclist_free with return %0001daf3

0001daf3:
0001daf6: R0 := 0x42F000
0001dafd: R0 := mem[R0 + 0xFE0, el]:u64
0001db02: R1 := 1
0001db09: R29 := mem[R31, el]:u64
0001db0e: R30 := mem[R31 + 8, el]:u64
0001db12: R31 := R31 + 0x10
0001db19: R0 := mem[R0, el]:u64
0001db1d: call @proxylist_free with noreturn

00035bd4: sub perror(perror_result)
00035eea: perror_result :: out u32 = low:32[R0]

0002cd41:
000309c1: R16 := 0x42F000
000309c8: R17 := mem[R16 + 0xBE8, el]:u64
000309ce: R16 := R16 + 0xBE8
000309d3: call R17 with noreturn

00035bd5: sub plist_add(plist_add_result)
00035eeb: plist_add_result :: out u32 = low:32[R0]

0001a4aa:
0001a4ae: #522 := R31 - 0x30
0001a4b4: mem := mem with [#522, el]:u64 <- R29
0001a4ba: mem := mem with [#522 + 8, el]:u64 <- R30
0001a4be: R31 := #522
0001a4c4: R29 := R31
0001a4ca: #523 := R31 + 0x10
0001a4d0: mem := mem with [#523, el]:u64 <- R19
0001a4d6: mem := mem with [#523 + 8, el]:u64 <- R20
0001a4dc: R20 := R2
0001a4e2: R19 := R0
0001a4e7: R0 := 0x18
0001a4ef: mem := mem with [R31 + 0x20, el]:u64 <- R21
0001a4f5: R21 := R1
0001a4fa: R30 := 0x40EF78
0001a4fc: call @malloc with return %0001a4fe

0001a4fe:
0001a504: mem := mem with [R0, el]:u64 <- R21
0001a50a: mem := mem with [R0 + 8, el]:u64 <- R20
0001a511: mem := mem with [R0 + 0x10, el]:u64 <- 0
0001a517: when R19 = 0 goto %0001a515
00035bd6: goto %0001ab9c

0001ab9c:
0001aba0: R1 := R19
00035bd7: goto %0001aba2

0001aba2:
0001aba6: R2 := R1
0001abad: R1 := mem[R1 + 0x10, el]:u64
0001abb2: when R1 <> 0 goto %0001aba2
00035bd8: goto %0001abb6

0001abb6:
0001abbc: mem := mem with [R2 + 0x10, el]:u64 <- R0
0001abc2: R0 := R19
00035bd9: goto %0001a515

0001a515:
0001a51e: #524 := R31 + 0x10
0001a523: R19 := mem[#524, el]:u64
0001a528: R20 := mem[#524 + 8, el]:u64
0001a52f: R21 := mem[R31 + 0x20, el]:u64
0001a536: R29 := mem[R31, el]:u64
0001a53b: R30 := mem[R31 + 8, el]:u64
0001a53f: R31 := R31 + 0x30
0001a544: R1 := 0
0001a549: R2 := 0
0001a54e: R16 := 0
0001a553: R17 := 0
0001a558: call R30 with noreturn

00035bda: sub plist_count(plist_count_result)
00035eec: plist_count_result :: out u32 = low:32[R0]

0001a7cc:
0001a7d0: R1 := R0
0001a7d5: R0 := 0
0001a7db: when R1 = 0 goto %0001a7d9
00035bdb: goto %0001a8a1

0001a8a1:
00035bdc: goto %0001a8a3

0001a8a3:
0001a8a8: R1 := mem[R1 + 0x10, el]:u64
0001a8ae: R0 := pad:64[31:0[R0] + 1]
0001a8b3: when R1 <> 0 goto %0001a8a3
00035bdd: goto %0001a7d9

0001a7d9:
0001a7e1: R1 := 0
0001a7e6: call R30 with noreturn

00035bde: sub plist_del(plist_del_result)
00035eed: plist_del_result :: out u32 = low:32[R0]

0001a55c:
0001a560: #525 := R31 - 0x30
0001a566: mem := mem with [#525, el]:u64 <- R29
0001a56c: mem := mem with [#525 + 8, el]:u64 <- R30
0001a570: R31 := #525
0001a576: R29 := R31
0001a57c: #526 := R31 + 0x20
0001a582: mem := mem with [#526, el]:u64 <- R21
0001a588: mem := mem with [#526 + 8, el]:u64 <- R22
0001a58e: when R0 = 0 goto %0001a58c
00035bdf: goto %0001aade

0001a58c:
0001a594: R22 := 0
0001a599: goto %0001a597

0001aade:
0001aae2: R21 := R0
0001aae8: #552 := R31 + 0x10
0001aaee: mem := mem with [#552, el]:u64 <- R19
0001aaf4: mem := mem with [#552 + 8, el]:u64 <- R20
0001aafa: R19 := R0
0001aaff: R20 := 0
0001ab04: goto %0001ab02

0001ab02:
0001ab0a: R2 := mem[R19, el]:u64
0001ab10: #553 := ~R1
0001ab15: #554 := R2 + ~R1
0001ab1b: VF := extend:128[#554 + 1] <> extend:128[R2] + extend:128[#553] + 1
0001ab21: CF := pad:128[#554 + 1] <> pad:128[R2] + pad:128[#553] + 1
0001ab25: ZF := #554 + 1 = 0
0001ab29: NF := 63:63[#554 + 1]
0001ab2f: when ZF <> 1 goto %0001ab2d
00035be0: goto %0001ab62

0001ab62:
0001ab66: #556 := R19 + 8
0001ab6b: R0 := mem[#556, el]:u64
0001ab70: R22 := mem[#556 + 8, el]:u64
0001ab76: when R0 = 0 goto %0001ab74
00035be1: goto %0001ab95

0001ab95:
0001ab98: R30 := 0x40F00C
0001ab9a: call @free with return %0001ab74

0001ab74:
0001ab7d: R0 := R19
0001ab82: R30 := 0x40F014
0001ab84: call @free with return %0001ab86

0001ab86:
0001ab89: when R20 = 0 goto %0001a5d9
00035be2: goto %0001ab8d

0001a5d9:
0001a5dd: #528 := R31 + 0x10
0001a5e2: R19 := mem[#528, el]:u64
0001a5e7: R20 := mem[#528 + 8, el]:u64
0001a5ed: R0 := R22
0001a5f3: #529 := R31 + 0x20
0001a5f8: R21 := mem[#529, el]:u64
0001a5fd: R22 := mem[#529 + 8, el]:u64
0001a604: R29 := mem[R31, el]:u64
0001a609: R30 := mem[R31 + 8, el]:u64
0001a60d: R31 := R31 + 0x30
0001a612: R1 := 0
0001a617: R2 := 0
0001a61c: R16 := 0
0001a621: R17 := 0
0001a626: call R30 with noreturn

0001ab8d:
0001ab93: mem := mem with [R20 + 0x10, el]:u64 <- R22
00035be3: goto %0001ab47

0001ab2d:
0001ab37: R2 := mem[R19 + 0x10, el]:u64
0001ab3d: R20 := R19
0001ab43: R19 := R2
0001ab49: when R2 = 0 goto %0001ab47
00035be4: goto %0001ab02

0001ab47:
0001ab50: #555 := R31 + 0x10
0001ab55: R19 := mem[#555, el]:u64
0001ab5a: R20 := mem[#555 + 8, el]:u64
0001ab60: R22 := R21
00035be5: goto %0001a597

0001a597:
0001a59e: R0 := R22
0001a5a4: #527 := R31 + 0x20
0001a5a9: R21 := mem[#527, el]:u64
0001a5ae: R22 := mem[#527 + 8, el]:u64
0001a5b5: R29 := mem[R31, el]:u64
0001a5ba: R30 := mem[R31 + 8, el]:u64
0001a5be: R31 := R31 + 0x30
0001a5c3: R1 := 0
0001a5c8: R2 := 0
0001a5cd: R16 := 0
0001a5d2: R17 := 0
0001a5d7: call R30 with noreturn

00035be6: sub plist_dump(plist_dump_result)
00035eee: plist_dump_result :: out u32 = low:32[R0]

0001a68f:
0001a693: when R0 = 0 goto %0001a691
00035be7: goto %0001aa25

0001a691:
0001a699: R0 := 0
0001a69e: R1 := 0
0001a6a3: R2 := 0
0001a6a8: R3 := 0
0001a6ad: R16 := 0
0001a6b2: R17 := 0
0001a6b7: call R30 with noreturn

0001aa25:
0001aa29: #549 := R31 - 0x20
0001aa2f: mem := mem with [#549, el]:u64 <- R29
0001aa35: mem := mem with [#549 + 8, el]:u64 <- R30
0001aa39: R31 := #549
0001aa3f: R29 := R31
0001aa45: #550 := R31 + 0x10
0001aa4b: mem := mem with [#550, el]:u64 <- R19
0001aa51: mem := mem with [#550 + 8, el]:u64 <- R20
0001aa56: R20 := 0x416000
0001aa5c: R19 := R0
0001aa62: R20 := R20 + 0xEF0
00035be8: goto %0001aa66

0001aa66:
0001aa6b: R2 := mem[R19, el]:u64
0001aa70: R3 := mem[R19 + 8, el]:u64
0001aa76: R1 := R20
0001aa7b: R0 := 2
0001aa80: R30 := 0x40F0E0
0001aa82: call @__printf_chk with return %0001aa84

0001aa84:
0001aa89: R19 := mem[R19 + 0x10, el]:u64
0001aa8e: when R19 <> 0 goto %0001aa66
00035be9: goto %0001aa92

0001aa92:
0001aa96: #551 := R31 + 0x10
0001aa9b: R19 := mem[#551, el]:u64
0001aaa0: R20 := mem[#551 + 8, el]:u64
0001aaa7: R29 := mem[R31, el]:u64
0001aaac: R30 := mem[R31 + 8, el]:u64
0001aab0: R31 := R31 + 0x20
0001aab5: R0 := 0
0001aaba: R1 := 0
0001aabf: R2 := 0
0001aac4: R3 := 0
0001aac9: R16 := 0
0001aace: R17 := 0
0001aad3: call R30 with noreturn

00035bea: sub plist_free(plist_free_result)
00035eef: plist_free_result :: out u32 = low:32[R0]

0001a7e8:
0001a7ec: when R0 = 0 goto %0001a7ea
00035beb: goto %0001a803

0001a7ea:
0001a7f2: R0 := 0
0001a7f7: R16 := 0
0001a7fc: R17 := 0
0001a801: call R30 with noreturn

0001a803:
0001a807: #539 := R31 - 0x20
0001a80d: mem := mem with [#539, el]:u64 <- R29
0001a813: mem := mem with [#539 + 8, el]:u64 <- R30
0001a817: R31 := #539
0001a81d: R29 := R31
0001a823: #540 := R31 + 0x10
0001a829: mem := mem with [#540, el]:u64 <- R19
0001a82f: mem := mem with [#540 + 8, el]:u64 <- R20
0001a835: R19 := R0
00035bec: goto %0001a837

0001a837:
0001a83b: R20 := R19
0001a842: R19 := mem[R19 + 0x10, el]:u64
0001a849: R0 := mem[R20 + 8, el]:u64
0001a84f: when R0 = 0 goto %0001a84d
00035bed: goto %0001a89a

0001a89a:
0001a89d: R30 := 0x40F2AC
0001a89f: call @free with return %0001a84d

0001a84d:
0001a856: R0 := R20
0001a85b: R30 := 0x40F2B4
0001a85d: call @free with return %0001a85f

0001a85f:
0001a862: when R19 <> 0 goto %0001a837
00035bee: goto %0001a866

0001a866:
0001a86a: #541 := R31 + 0x10
0001a86f: R19 := mem[#541, el]:u64
0001a874: R20 := mem[#541 + 8, el]:u64
0001a879: R0 := 0
0001a880: R29 := mem[R31, el]:u64
0001a885: R30 := mem[R31 + 8, el]:u64
0001a889: R31 := R31 + 0x20
0001a88e: R16 := 0
0001a893: R17 := 0
0001a898: call R30 with noreturn

00035bef: sub plist_get(plist_get_result)
00035ef0: plist_get_result :: out u32 = low:32[R0]

0001a6bd:
0001a6c1: when R0 <> 0 goto %0001a6bf
00035bf0: goto %0001aa21

0001a6bf:
0001a6c9: R2 := mem[R0, el]:u64
0001a6cf: #532 := ~R1
0001a6d4: #533 := R2 + ~R1
0001a6da: VF := extend:128[#533 + 1] <> extend:128[R2] + extend:128[#532] + 1
0001a6e0: CF := pad:128[#533 + 1] <> pad:128[R2] + pad:128[#532] + 1
0001a6e4: ZF := #533 + 1 = 0
0001a6e8: NF := 63:63[#533 + 1]
0001a6ee: when ZF <> 1 goto %0001a6ec
00035bf1: goto %0001aa1a

0001aa1a:
0001aa1f: R0 := mem[R0 + 8, el]:u64
00035bf2: goto %0001a6fa

0001a6ec:
0001a6f6: R0 := mem[R0 + 0x10, el]:u64
0001a6fc: when R0 = 0 goto %0001a6fa
00035bf3: goto %0001a6bf

0001a6fa:
0001a702: R1 := 0
0001a707: R2 := 0
0001a70c: call R30 with noreturn

0001aa21:
0001aa23: goto %0001a70e

0001a70e:
0001a711: R0 := 0
0001a716: R1 := 0
0001a71b: R2 := 0
0001a720: call R30 with noreturn

00035bf4: sub plist_in(plist_in_result)
00035ef1: plist_in_result :: out u32 = low:32[R0]

0001a628:
0001a62c: when R0 <> 0 goto %0001a62a
00035bf5: goto %0001aada

0001a62a:
0001a634: R2 := mem[R0, el]:u64
0001a63a: #530 := ~R1
0001a63f: #531 := R2 + ~R1
0001a645: VF := extend:128[#531 + 1] <> extend:128[R2] + extend:128[#530] + 1
0001a64b: CF := pad:128[#531 + 1] <> pad:128[R2] + pad:128[#530] + 1
0001a64f: ZF := #531 + 1 = 0
0001a653: NF := 63:63[#531 + 1]
0001a659: when ZF <> 1 goto %0001a657
00035bf6: goto %0001aad5

0001aad5:
0001aad8: R0 := 1
00035bf7: goto %0001a665

0001a657:
0001a661: R0 := mem[R0 + 0x10, el]:u64
0001a667: when R0 = 0 goto %0001a665
00035bf8: goto %0001a62a

0001a665:
0001a66d: R1 := 0
0001a672: R2 := 0
0001a677: call R30 with noreturn

0001aada:
0001aadc: goto %0001a679

0001a679:
0001a67c: R0 := 0
0001a681: R1 := 0
0001a686: R2 := 0
0001a68b: call R30 with noreturn

00035bf9: sub plist_pop(plist_pop_result)
00035ef2: plist_pop_result :: out u32 = low:32[R0]

0001a724:
0001a728: #534 := R31 - 0x50
0001a72e: mem := mem with [#534, el]:u64 <- R29
0001a734: mem := mem with [#534 + 8, el]:u64 <- R30
0001a738: R31 := #534
0001a73e: R29 := R31
0001a744: #535 := R31 + 0x30
0001a74a: mem := mem with [#535, el]:u64 <- R23
0001a750: mem := mem with [#535 + 8, el]:u64 <- R24
0001a756: when R0 = 0 goto %0001a754
00035bfa: goto %0001a8b7

0001a8b7:
0001a8bb: #542 := R31 + 0x10
0001a8c1: mem := mem with [#542, el]:u64 <- R19
0001a8c7: mem := mem with [#542 + 8, el]:u64 <- R20
0001a8cd: R24 := R1
0001a8d4: R19 := mem[R0, el]:u64
0001a8da: #543 := R31 + 0x20
0001a8e0: mem := mem with [#543, el]:u64 <- R21
0001a8e6: mem := mem with [#543 + 8, el]:u64 <- R22
0001a8ec: R22 := R0
0001a8f4: mem := mem with [R31 + 0x40, el]:u64 <- R25
0001a8f9: when R19 = 0 goto %0001a798
00035bfb: goto %0001a8fd

0001a798:
0001a79c: #537 := R31 + 0x10
0001a7a1: R19 := mem[#537, el]:u64
0001a7a6: R20 := mem[#537 + 8, el]:u64
0001a7ab: R23 := 0
0001a7b1: #538 := R31 + 0x20
0001a7b6: R21 := mem[#538, el]:u64
0001a7bb: R22 := mem[#538 + 8, el]:u64
0001a7c2: R25 := mem[R31 + 0x40, el]:u64
0001a7c6: goto %0001a75e

0001a8fd:
0001a902: R20 := mem[R19, el]:u64
0001a907: R25 := mem[R19 + 8, el]:u64
0001a90e: R21 := mem[R19 + 0x10, el]:u64
0001a914: R23 := pad:64[31:0[R20]]
0001a91a: R0 := pad:64[31:0[R20]]
0001a91f: R30 := 0x40F1B0
0001a921: call @so_closed with return %0001a923

0001a923:
0001a927: when 31:0[R0] <> 0 goto %0001a925
00035bfc: goto %0001a995

0001a925:
0001a92e: R0 := pad:64[31:0[R20]]
0001a933: R30 := 0x40F1F8
0001a936: call @close with return %0001a938

0001a938:
0001a93d: R0 := mem[R19 + 8, el]:u64
0001a943: when R0 = 0 goto %0001a941
00035bfd: goto %0001a98e

0001a98e:
0001a991: R30 := 0x40F204
0001a993: call @free with return %0001a941

0001a941:
0001a94a: R0 := R19
0001a950: R19 := R21
0001a955: R30 := 0x40F210
0001a957: call @free with return %0001a959

0001a959:
0001a95c: when R21 <> 0 goto %0001a8fd
00035bfe: goto %0001a960

0001a960:
0001a964: #544 := R31 + 0x10
0001a969: R19 := mem[#544, el]:u64
0001a96e: R20 := mem[#544 + 8, el]:u64
0001a975: R25 := mem[R31 + 0x40, el]:u64
0001a97c: mem := mem with [R22, el]:u64 <- 0
0001a982: #545 := R31 + 0x20
0001a987: R21 := mem[#545, el]:u64
0001a98c: R22 := mem[#545 + 8, el]:u64
00035bff: goto %0001a754

0001a754:
0001a75c: R23 := 0
00035c00: goto %0001a75e

0001a75e:
0001a762: R0 := pad:64[31:0[R23]]
0001a768: #536 := R31 + 0x30
0001a76d: R23 := mem[#536, el]:u64
0001a772: R24 := mem[#536 + 8, el]:u64
0001a779: R29 := mem[R31, el]:u64
0001a77e: R30 := mem[R31 + 8, el]:u64
0001a782: R31 := R31 + 0x50
0001a787: R1 := 0
0001a78c: R16 := 0
0001a791: R17 := 0
0001a796: call R30 with noreturn

0001a995:
0001a999: R0 := R19
0001a99e: R30 := 0x40F1BC
0001a9a0: call @free with return %0001a9a2

0001a9a2:
0001a9a8: mem := mem with [R22, el]:u64 <- R21
0001a9ae: when R24 = 0 goto %0001a9ac
00035c01: goto %0001aa12

0001aa12:
0001aa18: mem := mem with [R24, el]:u64 <- R25
00035c02: goto %0001a9ac

0001a9ac:
0001a9b5: #546 := R31 + 0x10
0001a9ba: R19 := mem[#546, el]:u64
0001a9bf: R20 := mem[#546 + 8, el]:u64
0001a9c5: R0 := pad:64[31:0[R23]]
0001a9cb: #547 := R31 + 0x20
0001a9d0: R21 := mem[#547, el]:u64
0001a9d5: R22 := mem[#547 + 8, el]:u64
0001a9db: #548 := R31 + 0x30
0001a9e0: R23 := mem[#548, el]:u64
0001a9e5: R24 := mem[#548 + 8, el]:u64
0001a9ec: R25 := mem[R31 + 0x40, el]:u64
0001a9f3: R29 := mem[R31, el]:u64
0001a9f8: R30 := mem[R31 + 8, el]:u64
0001a9fc: R31 := R31 + 0x50
0001aa01: R1 := 0
0001aa06: R16 := 0
0001aa0b: R17 := 0
0001aa10: call R30 with noreturn

00035c03: sub prepare_http_connect(prepare_http_connect_result)
00035ef3: prepare_http_connect_result :: out u32 = low:32[R0]

00023d1a:
00023d1e: R31 := R31 - 0x60
00023d23: VF := 0
00023d26: CF := 1
00023d2a: ZF := 31:0[R0] = 0
00023d2e: NF := 31:31[R0]
00023d33: R3 := 0x42F000
00023d3a: R3 := mem[R3 + 0xFB8, el]:u64
00023d40: #988 := ZF <> 1
00023d43: VF := 0
00023d47: CF := #988
00023d4c: ZF := R2 = 0 | ~#988
00023d51: NF := #988 & 63:63[R2]
00023d57: #989 := R31 + 0x30
00023d5d: mem := mem with [#989, el]:u64 <- R29
00023d63: mem := mem with [#989 + 8, el]:u64 <- R30
00023d69: R29 := R31 + 0x30
00023d71: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00023d77: #990 := R31 + 0x40
00023d7d: mem := mem with [#990, el]:u64 <- R19
00023d83: mem := mem with [#990 + 8, el]:u64 <- R20
00023d88: R19 := 0
00023d8f: R4 := mem[R3, el]:u64
00023d97: mem := mem with [R31 + 0x28, el]:u64 <- R4
00023d9c: R4 := 0
00023da2: when ZF goto %00023da0
00035c04: goto %0002519e

0002519e:
000251a2: #1052 := R31 + 0x50
000251a8: mem := mem with [#1052, el]:u64 <- R21
000251ae: mem := mem with [#1052 + 8, el]:u64 <- R22
000251b4: R21 := R2
000251bb: R0 := pad:64[mem[R2]]
000251c0: when 31:0[R0] <> 0 goto %00024d14
00035c05: goto %000251c4

00024d14:
00024d18: R22 := R1
00024d1d: R30 := 0x407C6C
00024d1f: call @new_rr_data with return %00024d21

00024d21:
00024d27: mem := mem with [R31 + 0x18, el]:u64 <- R0
00024d2c: R30 := 0x407C74
00024d2e: call @new_rr_data with return %00024d30

00024d30:
00024d35: R19 := mem[R31 + 0x18, el]:u64
00024d3d: mem := mem with [R31 + 0x20, el]:u64 <- R0
00024d42: R1 := 1
00024d47: R0 := 0x413000
00024d4d: R0 := R0 + 0x9F8
00024d55: mem := mem with [R19, el]:u32 <- 31:0[R1]
00024d5a: R30 := 0x407C90
00024d5c: call @strdup with return %00024d5e

00024d5e:
00024d64: mem := mem with [R19 + 0x28, el]:u64 <- R0
00024d6b: R19 := mem[R31 + 0x18, el]:u64
00024d71: R0 := R21
00024d76: R30 := 0x407CA0
00024d78: call @strdup with return %00024d7a

00024d7a:
00024d7f: R20 := mem[R31 + 0x18, el]:u64
00024d87: mem := mem with [R19 + 0x30, el]:u64 <- R0
00024d8d: R0 := R21
00024d92: R30 := 0x407CB0
00024d94: call @strdup with return %00024d96

00024d96:
00024d9b: R19 := mem[R31 + 0x18, el]:u64
00024da3: mem := mem with [R20 + 0x40, el]:u64 <- R0
00024da8: R1 := 0x3A
00024daf: R0 := mem[R19 + 0x40, el]:u64
00024db4: R30 := 0x407CC4
00024db6: call @strchr with return %00024db8

00024db8:
00024dbc: when R0 = 0 goto %00024dba
00035c06: goto %0002516c

0002516c:
00025171: mem := mem with [R0] <- 0
00025175: R0 := R0 + 1
0002517a: R2 := 0xA
0002517f: R1 := 0
00025186: R20 := mem[R31 + 0x18, el]:u64
0002518b: R30 := 0x407CDC
0002518d: call @strtol with return %0002518f

0002518f:
00025194: R19 := mem[R31 + 0x18, el]:u64
0002519c: mem := mem with [R20 + 0x20, el]:u32 <- 31:0[R0]
00035c07: goto %00024dba

00024dba:
00024dc2: R0 := 0x413000
00024dc8: R0 := R0 + 0xF38
00024dcd: R30 := 0x407CF0
00024dcf: call @strdup with return %00024dd1

00024dd1:
00024dd7: mem := mem with [R19 + 0x48, el]:u64 <- R0
00024dde: R20 := mem[R31 + 0x18, el]:u64
00024de3: R2 := 0x413000
00024de8: R1 := 0x413000
00024dee: R2 := R2 + 0x7B0
00024df4: R1 := R1 + 0xBA8
00024df9: R3 := 1
00024e00: R0 := mem[R20 + 8, el]:u64
00024e05: R30 := 0x407D14
00024e07: call @hlist_mod with return %00024e09

00024e09:
00024e0f: mem := mem with [R20 + 8, el]:u64 <- R0
00024e14: R1 := 0x42F000
00024e1b: R1 := mem[R1 + 0xF00, el]:u64
00024e22: R19 := mem[R1, el]:u64
00024e28: when R19 = 0 goto %00024e26
00035c08: goto %00025130

00025130:
00025135: R20 := mem[R31 + 0x18, el]:u64
0002513a: R3 := 1
00025141: R1 := mem[R19, el]:u64
00025146: R2 := mem[R19 + 8, el]:u64
0002514d: R0 := mem[R20 + 8, el]:u64
00025152: R30 := 0x407D3C
00025154: call @hlist_mod with return %00025156

00025156:
0002515b: R19 := mem[R19 + 0x18, el]:u64
00025163: mem := mem with [R20 + 8, el]:u64 <- R0
00025168: when R19 <> 0 goto %00025130
00035c09: goto %00024e26

00024e26:
00024e2e: R19 := 0x42F000
00024e35: R19 := mem[R19 + 0xF30, el]:u64
00024e3c: R0 := pad:64[mem[R19, el]:u32]
00024e42: when 31:0[R0] <> 0 goto %00024e40
00035c0a: goto %00024e5d

00024e40:
00024e48: R1 := 0x413000
00024e4d: R0 := 2
00024e53: R1 := R1 + 0xF48
00024e58: R30 := 0x407E38
00024e5a: call @__printf_chk with return %00024e5c

00024e5c:
00024e5f: goto %00024e5d

00024e5d:
00024e64: #1045 := R31 + 0x18
00024e69: R1 := mem[#1045, el]:u64
00024e6e: R2 := mem[#1045 + 8, el]:u64
00024e74: R3 := R22
00024e7a: R0 := R31 + 0xC
00024e7f: R30 := 0x407D68
00024e81: call @proxy_authenticate with return %00024e83

00024e83:
00024e87: when 31:0[R0] = 0 goto %00024e85
00035c0b: goto %000250e4

00024e85:
00024e8d: R2 := 0x414000
00024e92: R1 := 2
00024e98: R2 := R2 + 0x30
00024e9d: R0 := 3
00024ea2: R30 := 0x407E24
00024ea4: call @__syslog_chk with return %00024ea6

00024ea6:
00024ea9: goto %00024ea7

000250e4:
000250e9: R0 := mem[R31 + 0x20, el]:u64
000250f0: R0 := pad:64[mem[R0 + 0x10, el]:u32]
000250f6: #1050 := 31:0[R0] - 0x197
000250fb: VF := extend:64[#1050] <> extend:64[31:0[R0]] - 0x197
00025100: CF := pad:64[#1050] <> pad:64[31:0[R0]] + 0xFFFFFE69
00025104: ZF := #1050 = 0
00025108: NF := 31:31[#1050]
0002510d: when ZF goto %00024edd
00035c0c: goto %00025111

00024edd:
00024ee2: R0 := pad:64[mem[R19, el]:u32]
00024ee8: when 31:0[R0] <> 0 goto %00024ee6
00035c0d: goto %00024f18

00024ee6:
00024eee: R1 := 0x413000
00024ef3: R0 := 2
00024ef9: R1 := R1 + 0xF68
00024efe: R30 := 0x407E88
00024f00: call @__printf_chk with return %00024f02

00024f02:
00024f07: R0 := mem[R31 + 0x18, el]:u64
00024f0e: R0 := mem[R0 + 8, el]:u64
00024f13: R30 := 0x407E94
00024f15: call @hlist_dump with return %00024f17

00024f17:
00024f1a: goto %00024f18

00024f18:
00024f20: R1 := mem[R31 + 0x18, el]:u64
00024f27: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00024f2c: R30 := 0x407DCC
00024f2e: call @headers_send with return %00024f30

00024f30:
00024f34: when 31:0[R0] = 0 goto %00024f32
00035c0e: goto %00024f52

00024f32:
00024f3a: R1 := 0x413000
00024f3f: R0 := 2
00024f45: R1 := R1 + 0xF80
00024f4a: R30 := 0x407EFC
00024f4c: call @__printf_chk with return %00024f4e

00024f4e:
00024f50: goto %00024ea7

00024f52:
00024f57: R0 := pad:64[mem[R19, el]:u32]
00024f5d: when 31:0[R0] <> 0 goto %00024f5b
00035c0f: goto %00024f78

00024f5b:
00024f63: R1 := 0x413000
00024f68: R0 := 2
00024f6e: R1 := R1 + 0xFA0
00024f73: R30 := 0x407EC4
00024f75: call @__printf_chk with return %00024f77

00024f77:
00024f7a: goto %00024f78

00024f78:
00024f80: R0 := mem[R31 + 0x20, el]:u64
00024f85: R30 := 0x407DE0
00024f87: call @reset_rr_data with return %00024f89

00024f89:
00024f8e: R1 := mem[R31 + 0x20, el]:u64
00024f95: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00024f9a: R30 := 0x407DEC
00024f9c: call @headers_recv with return %00024f9e

00024f9e:
00024fa2: when 31:0[R0] = 0 goto %00024fa0
00035c10: goto %00024fce

00024fa0:
00024faa: R0 := pad:64[mem[R19, el]:u32]
00024faf: when 31:0[R0] = 0 goto %00024ea7
00035c11: goto %00024fb3

00024fb3:
00024fb6: R1 := 0x413000
00024fbb: R0 := 2
00024fc1: R1 := R1 + 0xFC0
00024fc6: R30 := 0x407EB0
00024fc8: call @__printf_chk with return %00024fca

00024fca:
00024fcc: goto %00024ea7

00024fce:
00024fd3: R0 := pad:64[mem[R19, el]:u32]
00024fda: R1 := mem[R31 + 0x20, el]:u64
00024fe0: when 31:0[R0] <> 0 goto %00024fde
00035c12: goto %000250be

00024fde:
00024fe8: R0 := mem[R1 + 8, el]:u64
00024fed: R30 := 0x407E44
00024fef: call @hlist_dump with return %00024ff1

00024ff1:
00024ff6: R0 := mem[R31 + 0x20, el]:u64
00024ffd: R0 := pad:64[mem[R0 + 0x10, el]:u32]
00025003: #1047 := 31:0[R0] - 0xC8
00025008: VF := extend:64[#1047] <> extend:64[31:0[R0]] - 0xC8
0002500d: CF := pad:64[#1047] <> pad:64[31:0[R0]] + 0xFFFFFF38
00025011: ZF := #1047 = 0
00025015: NF := 31:31[#1047]
0002501b: when ZF <> 1 goto %00025019
00035c13: goto %00025085

00025085:
00035c14: goto %00025087

000250be:
000250c3: R0 := pad:64[mem[R1 + 0x10, el]:u32]
000250c9: #1049 := 31:0[R0] - 0xC8
000250ce: VF := extend:64[#1049] <> extend:64[31:0[R0]] - 0xC8
000250d3: CF := pad:64[#1049] <> pad:64[31:0[R0]] + 0xFFFFFF38
000250d7: ZF := #1049 = 0
000250db: NF := 31:31[#1049]
000250e0: when ZF <> 1 goto %00025019
00035c15: goto %00025090

00025019:
00025022: #1048 := 31:0[R0] - 0x197
00025027: VF := extend:64[#1048] <> extend:64[31:0[R0]] - 0x197
0002502c: CF := pad:64[#1048] <> pad:64[31:0[R0]] + 0xFFFFFE69
00025030: ZF := #1048 = 0
00025034: NF := 31:31[#1048]
0002503a: when ZF <> 1 goto %00025038
00035c16: goto %0002505f

0002505f:
00025063: R3 := R21
00025068: R2 := 0x413000
0002506d: R1 := 2
00025073: R2 := R2 + 0xFE0
00025078: R0 := 3
0002507d: R30 := 0x407EE8
0002507f: call @__syslog_chk with return %00025081

00025081:
00025083: goto %00024ea7

00025111:
00025115: #1051 := 31:0[R0] - 0xC8
0002511a: VF := extend:64[#1051] <> extend:64[31:0[R0]] - 0xC8
0002511f: CF := pad:64[#1051] <> pad:64[31:0[R0]] + 0xFFFFFF38
00025123: ZF := #1051 = 0
00025127: NF := 31:31[#1051]
0002512c: when ZF goto %00025087
00035c17: goto %00025038

00025087:
0002508c: R0 := pad:64[mem[R19, el]:u32]
00025092: when 31:0[R0] = 0 goto %00025090
00035c18: goto %0002509e

0002509e:
000250a1: R1 := 0x413000
000250a6: R0 := 2
000250ac: R1 := R1 + 0xE68
000250b1: R19 := 1
000250b6: R30 := 0x407E74
000250b8: call @__printf_chk with return %000250ba

000250ba:
000250bc: goto %00024eaf

00025090:
00025098: R19 := 1
0002509c: goto %00024eaf

00025038:
00025040: R2 := 0x414000
00025046: R3 := R21
0002504c: R2 := R2 + 8
00025051: R1 := 2
00025056: R0 := 3
0002505b: R30 := 0x407D9C
0002505d: call @__syslog_chk with return %00024ea7

00024ea7:
00024ead: R19 := 0
00035c19: goto %00024eaf

00024eaf:
00024eb3: R0 := R31 + 0x18
00024eb8: R30 := 0x407DA8
00024eba: call @free_rr_data with return %00024ebc

00024ebc:
00024ec0: R0 := R31 + 0x20
00024ec5: R30 := 0x407DB0
00024ec7: call @free_rr_data with return %00024ec9

00024ec9:
00024ecd: #1046 := R31 + 0x50
00024ed2: R21 := mem[#1046, el]:u64
00024ed7: R22 := mem[#1046 + 8, el]:u64
00024edb: goto %00023da0

000251c4:
000251c8: #1053 := R31 + 0x50
000251cd: R21 := mem[#1053, el]:u64
000251d2: R22 := mem[#1053 + 8, el]:u64
00035c1a: goto %00023da0

00023da0:
00023da8: R0 := 0x42F000
00023daf: R0 := mem[R0 + 0xFB8, el]:u64
00023db6: R2 := mem[R31 + 0x28, el]:u64
00023dbd: R1 := mem[R0, el]:u64
00023dc3: #991 := ~R1
00023dc8: #992 := R2 + ~R1
00023dce: VF := extend:128[#992 + 1] <> extend:128[R2] + extend:128[#991] + 1
00023dd4: CF := pad:128[#992 + 1] <> pad:128[R2] + pad:128[#991] + 1
00023dd8: ZF := #992 + 1 = 0
00023ddc: NF := 63:63[#992 + 1]
00023de0: R2 := #992 + 1
00023de5: R1 := 0
00023deb: when ZF <> 1 goto %00023de9
00035c1b: goto %00024cc5

00023de9:
00023df2: #993 := R31 + 0x50
00023df8: mem := mem with [#993, el]:u64 <- R21
00023dfe: mem := mem with [#993 + 8, el]:u64 <- R22
00023e03: R30 := 0x407F08
00023e05: call @__stack_chk_fail with return %00023e07

00023e07:
00035c1c: call @forward_tunnel with noreturn

00024cc5:
00024cc9: #1043 := R31 + 0x30
00024cce: R29 := mem[#1043, el]:u64
00024cd3: R30 := mem[#1043 + 8, el]:u64
00024cd9: R0 := pad:64[31:0[R19]]
00024cdf: #1044 := R31 + 0x40
00024ce4: R19 := mem[#1044, el]:u64
00024ce9: R20 := mem[#1044 + 8, el]:u64
00024cef: R31 := R31 + 0x60
00024cf4: R1 := 0
00024cf9: R2 := 0
00024cfe: R3 := 0
00024d03: R4 := 0
00024d08: R16 := 0
00024d0d: R17 := 0
00024d12: call R30 with noreturn

00035c1d: sub printmem(printmem_result)
00035ef4: printmem_result :: out u32 = low:32[R0]

00011b1b:
00011b1f: #55 := R31 - 0x30
00011b25: mem := mem with [#55, el]:u64 <- R29
00011b2b: mem := mem with [#55 + 8, el]:u64 <- R30
00011b2f: R31 := #55
00011b35: R29 := R31
00011b3b: #56 := R31 + 0x10
00011b41: mem := mem with [#56, el]:u64 <- R19
00011b47: mem := mem with [#56 + 8, el]:u64 <- R20
00011b4d: R20 := 62:0[R1].0
00011b53: R19 := R0
00011b59: R0 := R20 + 1
00011b5f: #57 := R31 + 0x20
00011b65: mem := mem with [#57, el]:u64 <- R21
00011b6b: mem := mem with [#57 + 8, el]:u64 <- R22
00011b71: R21 := R1
00011b77: R22 := pad:64[31:0[R2]]
00011b7c: R30 := 0x4102F8
00011b7e: call @zmalloc with return %00011b80

00011b80:
00011b84: when R21 = 0 goto %00011b82
00035c1e: goto %00017c10

00017c10:
00017c13: R6 := 7
00017c18: R3 := 0x417000
00017c1f: R6 := pad:64[31:0[R6] + ~31:0[R22] + 1]
00017c25: R3 := R3 + 0x3F0
00017c2b: R4 := R19
00017c32: R7 := R20 + R0
00017c38: R6 := pad:64[7:0[R6]]
00017c3e: R3 := R3 + 0xA0
00017c44: R2 := R0
00035c1f: goto %00017c46

00017c46:
00017c4b: R1 := pad:64[mem[R4]]
00017c4f: R4 := R4 + 1
00017c55: R2 := R2 + 2
00017c5c: R1 := pad:64[31:0[R1] ^ 31:0[R6]]
00017c62: R5 := pad:64[3:0[R1]]
00017c68: R1 := pad:64[31:4[R1]]
00017c70: R5 := pad:64[mem[R3 + extend:64[31:0[R5]]]]
00017c78: R1 := pad:64[mem[R3 + extend:64[31:0[R1]]]]
00017c80: mem := mem with [R2 - 2] <- 7:0[R1]
00017c88: mem := mem with [R2 - 1] <- 7:0[R5]
00017c8e: #342 := ~R2
00017c93: #343 := R7 + ~R2
00017c99: VF := extend:128[#343 + 1] <> extend:128[R7] + extend:128[#342] + 1
00017c9f: CF := pad:128[#343 + 1] <> pad:128[R7] + pad:128[#342] + 1
00017ca3: ZF := #343 + 1 = 0
00017ca7: NF := 63:63[#343 + 1]
00017cac: when ZF <> 1 goto %00017c46
00035c20: goto %00011b82

00011b82:
00011b8b: #58 := R31 + 0x10
00011b90: R19 := mem[#58, el]:u64
00011b95: R20 := mem[#58 + 8, el]:u64
00011b9b: #59 := R31 + 0x20
00011ba0: R21 := mem[#59, el]:u64
00011ba5: R22 := mem[#59 + 8, el]:u64
00011bac: R29 := mem[R31, el]:u64
00011bb1: R30 := mem[R31 + 8, el]:u64
00011bb5: R31 := R31 + 0x30
00011bba: R1 := 0
00011bbf: R2 := 0
00011bc4: R3 := 0
00011bc9: R4 := 0
00011bce: R5 := 0
00011bd3: R6 := 0
00011bd8: R7 := 0
00011bdd: R16 := 0
00011be2: R17 := 0
00011be7: call R30 with noreturn

00035c21: sub proxy_authenticate(proxy_authenticate_result)
00035ef5: proxy_authenticate_result :: out u32 = low:32[R0]

0001dbe8:
0001dbec: R31 := R31 - 0x90
0001dbf1: R4 := 0x42F000
0001dbf8: R4 := mem[R4 + 0xFB8, el]:u64
0001dbfe: #724 := R31 + 0x30
0001dc04: mem := mem with [#724, el]:u64 <- R29
0001dc0a: mem := mem with [#724 + 8, el]:u64 <- R30
0001dc10: R29 := R31 + 0x30
0001dc16: #725 := R31 + 0x40
0001dc1c: mem := mem with [#725, el]:u64 <- R19
0001dc22: mem := mem with [#725 + 8, el]:u64 <- R20
0001dc28: R19 := R1
0001dc2e: R20 := R2
0001dc34: #726 := R31 + 0x50
0001dc3a: mem := mem with [#726, el]:u64 <- R21
0001dc40: mem := mem with [#726 + 8, el]:u64 <- R22
0001dc46: R21 := R0
0001dc4c: #727 := R31 + 0x60
0001dc52: mem := mem with [#727, el]:u64 <- R23
0001dc58: mem := mem with [#727 + 8, el]:u64 <- R24
0001dc5e: R24 := R3
0001dc64: #728 := R31 + 0x70
0001dc6a: mem := mem with [#728, el]:u64 <- R25
0001dc70: mem := mem with [#728 + 8, el]:u64 <- R26
0001dc75: R26 := 0x413000
0001dc7b: #729 := R31 + 0x80
0001dc81: mem := mem with [#729, el]:u64 <- R27
0001dc87: mem := mem with [#729 + 8, el]:u64 <- R28
0001dc8e: R0 := mem[R4, el]:u64
0001dc96: mem := mem with [R31 + 0x28, el]:u64 <- R0
0001dc9b: R0 := 0
0001dca0: R0 := 0x1000
0001dca5: R30 := 0x40D2E0
0001dca7: call @zmalloc with return %0001dca9

0001dca9:
0001dcac: R2 := 0x1000
0001dcb2: R1 := R26 + 0x7A8
0001dcb8: R23 := R0
0001dcbd: R30 := 0x40D2F0
0001dcbf: call @strlcpy with return %0001dcc1

0001dcc1:
0001dcc5: R0 := R31 + 0x18
0001dccb: R1 := R24
0001dcd3: mem := mem with [R31 + 8, el]:u64 <- R0
0001dcd8: R30 := 0x40D300
0001dcda: call @ntlm_request with return %0001dcdc

0001dcdc:
0001dce0: when 31:0[R0] <> 0 goto %0001dcde
00035c22: goto %0001dd11

0001dcde:
0001dce8: R1 := mem[R31 + 0x18, el]:u64
0001dcee: R2 := extend:64[31:0[R0]]
0001dcf3: R3 := 0xFFB
0001dcf9: R0 := R23 + 5
0001dcfe: R30 := 0x40D5FC
0001dd00: call @to_base64 with return %0001dd02

0001dd02:
0001dd07: R0 := mem[R31 + 0x18, el]:u64
0001dd0c: R30 := 0x40D604
0001dd0e: call @free with return %0001dd10

0001dd10:
0001dd13: goto %0001dd11

0001dd11:
0001dd18: R0 := R19
0001dd1d: R30 := 0x40D30C
0001dd1f: call @dup_rr_data with return %0001dd21

0001dd21:
0001dd25: R22 := R0
0001dd2b: R2 := R23
0001dd32: R0 := mem[R0 + 8, el]:u64
0001dd37: R27 := 0x413000
0001dd3c: R3 := 1
0001dd42: R1 := R27 + 0xA78
0001dd4a: mem := mem with [R31 + 0x20, el]:u64 <- R22
0001dd4f: R30 := 0x40D32C
0001dd51: call @hlist_mod with return %0001dd53

0001dd53:
0001dd59: mem := mem with [R22 + 8, el]:u64 <- R0
0001dd5f: when R19 = 0 goto %0001dd5d
00035c23: goto %00029475

0001dd5d:
0001dd66: R1 := R20
0001dd6b: R0 := 0
0001dd70: R30 := 0x40D720
0001dd73: call @http_has_body with return %00028cb3

00028cb3:
00028cb7: when R0 <> 0 goto %00028cb5
00035c24: goto %0002945e

00028cb5:
00028cbd: R22 := 0x42F000
00028cc4: R22 := mem[R22 + 0xF30, el]:u64
00028ccb: R0 := pad:64[mem[R22, el]:u32]
00028cd1: when 31:0[R0] <> 0 goto %00028ccf
00035c25: goto %00028cec

0002945e:
00029461: R22 := 0x42F000
00029468: R22 := mem[R22 + 0xF30, el]:u64
0002946f: mem := mem with [R31 + 4, el]:u32 <- 0
00029473: goto %00028cfd

00029475:
0002947a: R0 := pad:64[mem[R19, el]:u32]
0002947f: when 31:0[R0] = 0 goto %00028f8c
00035c26: goto %00029483

00029483:
00029488: R1 := mem[R19 + 0x28, el]:u64
0002948d: R0 := 0x413000
00029493: R0 := R0 + 0xBF0
00029498: R30 := 0x40D34C
0002949a: call @strcasecmp with return %0002949c

0002949c:
0002949f: when 31:0[R0] <> 0 goto %00028f8c
00035c27: goto %000294a3

00028f8c:
00028f90: R1 := R20
00028f96: R0 := R19
00028f9b: R30 := 0x40D398
00028f9d: call @http_has_body with return %00028f9f

00028f9f:
00028fa2: when R0 <> 0 goto %00028ef5
00035c28: goto %00028fa6

00028ef5:
00028ef8: R22 := 0x42F000
00028eff: R22 := mem[R22 + 0xF30, el]:u64
00028f06: R0 := pad:64[mem[R22, el]:u32]
00028f0c: when 31:0[R0] = 0 goto %00028f0a
00035c29: goto %00029432

00028fa6:
00028fa9: R22 := 0x42F000
00028fb0: R22 := mem[R22 + 0xF30, el]:u64
00028fb7: mem := mem with [R31 + 4, el]:u32 <- 0
00035c2a: goto %00028f1d

000294a3:
000294a6: R22 := 0x42F000
000294ad: R22 := mem[R22 + 0xF30, el]:u64
000294b2: R0 := 1
000294ba: mem := mem with [R31 + 4, el]:u32 <- 31:0[R0]
000294c1: R0 := pad:64[mem[R22, el]:u32]
000294c6: when 31:0[R0] <> 0 goto %00029432
00035c2b: goto %00028f4f

00029432:
00029435: R1 := 0x416000
0002943a: R0 := 2
00029440: R1 := R1 + 0x7F8
00029445: R30 := 0x40D558
00029447: call @__printf_chk with return %00028f0a

00028f0a:
00028f12: R0 := 1
00028f1a: mem := mem with [R31 + 4, el]:u32 <- 31:0[R0]
00028f1f: goto %00028f1d

00028f1d:
00028f25: R0 := pad:64[mem[R19, el]:u32]
00028f2b: when 31:0[R0] <> 0 goto %00028f29
00035c2c: goto %00028cfd

00028f29:
00028f33: R1 := mem[R19 + 0x28, el]:u64
00028f38: R0 := 0x413000
00028f3e: R0 := R0 + 0xBF0
00028f43: R30 := 0x40D618
00028f45: call @strcasecmp with return %00028f47

00028f47:
00028f4a: when 31:0[R0] <> 0 goto %00028cfd
00035c2d: goto %00028f4e

00028f4e:
00028f51: goto %00028f4f

00028f4f:
00028f57: R0 := mem[R31 + 0x20, el]:u64
00028f5e: R0 := mem[R0 + 0x28, el]:u64
00028f63: R30 := 0x40D374
00028f65: call @free with return %00028f67

00028f67:
00028f6c: R25 := mem[R31 + 0x20, el]:u64
00028f71: R0 := 0x414000
00028f77: R0 := R0 + 0x110
00028f7c: R30 := 0x40D384
00028f7e: call @strdup with return %00028f80

00028f80:
00028f86: mem := mem with [R25 + 0x28, el]:u64 <- R0
00028f8a: goto %00028cfd

00028cfd:
00028d05: R25 := mem[R31 + 0x20, el]:u64
00028d0a: R3 := 1
00028d0f: R2 := 0x413000
00028d14: R1 := 0x413000
00028d1a: R2 := R2 + 0x7E0
00028d20: R1 := R1 + 0x7E8
00028d27: R0 := mem[R25 + 8, el]:u64
00028d2c: R30 := 0x40D3D0
00028d2e: call @hlist_mod with return %00028d30

00028d30:
00028d36: mem := mem with [R25 + 8, el]:u64 <- R0
00028d3d: R28 := mem[R31 + 0x20, el]:u64
00028d42: R1 := 0x413000
00028d48: R1 := R1 + 0x7F8
00028d4f: R0 := mem[R28 + 8, el]:u64
00028d54: R30 := 0x40D3E8
00028d56: call @hlist_del with return %00028d58

00028d58:
00028d5e: mem := mem with [R28 + 8, el]:u64 <- R0
00028d65: R1 := pad:64[mem[R22, el]:u32]
00028d6b: when 31:0[R1] <> 0 goto %00028d69
00035c2e: goto %00028dd0

00028d69:
00028d71: R1 := 0x416000
00028d76: R0 := 2
00028d7c: R1 := R1 + 0x820
00028d81: R30 := 0x40D5BC
00028d83: call @__printf_chk with return %00028d85

00028d85:
00028d8a: R4 := mem[R31 + 0x20, el]:u64
00028d8f: R1 := 0x413000
00028d94: R0 := 2
00028d9a: R1 := R1 + 0xBE0
00028da0: #1215 := R4 + 0x28
00028da5: R2 := mem[#1215, el]:u64
00028daa: R3 := mem[#1215 + 8, el]:u64
00028db1: R4 := mem[R4 + 0x48, el]:u64
00028db6: R30 := 0x40D5D8
00028db8: call @__printf_chk with return %00028dba

00028dba:
00028dbf: R0 := mem[R31 + 0x20, el]:u64
00028dc6: R0 := mem[R0 + 8, el]:u64
00028dcb: R30 := 0x40D5E4
00028dcd: call @hlist_dump with return %00028dcf

00028dcf:
00028dd2: goto %00028dd0

00028dd0:
00028dd8: R1 := mem[R31 + 0x20, el]:u64
00028ddf: R0 := pad:64[mem[R21, el]:u32]
00028de4: R30 := 0x40D400
00028de6: call @headers_send with return %00028de8

00028de8:
00028dec: when 31:0[R0] = 0 goto %00028dea
00035c2f: goto %00029449

00029449:
0002944e: R0 := pad:64[mem[R22, el]:u32]
00029453: when 31:0[R0] <> 0 goto %00029371
00035c30: goto %00029457

00029371:
00029374: R1 := 0x416000
00029379: R0 := 2
0002937f: R1 := R1 + 0x840
00029384: R30 := 0x40D574
00029386: call @__printf_chk with return %00029388

00029388:
0002938c: when R20 <> 0 goto %0002938a
00035c31: goto %00029408

00029457:
0002945a: when R20 = 0 goto %00029408
00035c32: goto %0002938a

00029408:
0002940d: R0 := mem[R31 + 0x20, el]:u64
00029412: R30 := 0x40D580
00029414: call @reset_rr_data with return %00029416

00029416:
0002941b: R1 := mem[R31 + 0x20, el]:u64
00029422: R0 := pad:64[mem[R21, el]:u32]
00029427: R30 := 0x40D58C
00029429: call @headers_recv with return %0002942b

0002942b:
0002942e: when 31:0[R0] <> 0 goto %000293cd
00035c33: goto %00028dea

0002938a:
00029393: R0 := R31 + 0x20
00029398: R30 := 0x40D418
0002939a: call @free_rr_data with return %0002939c

0002939c:
000293a0: R0 := R20
000293a8: mem := mem with [R31 + 0x20, el]:u64 <- R20
000293ad: R30 := 0x40D424
000293af: call @reset_rr_data with return %000293b1

000293b1:
000293b6: R1 := mem[R31 + 0x20, el]:u64
000293bd: R0 := pad:64[mem[R21, el]:u32]
000293c2: R30 := 0x40D430
000293c4: call @headers_recv with return %000293c6

000293c6:
000293c9: when 31:0[R0] = 0 goto %00028dea
00035c34: goto %000293cd

000293cd:
000293d2: R0 := pad:64[mem[R22, el]:u32]
000293d7: when 31:0[R0] <> 0 goto %00028fb9
00035c35: goto %000293db

00028fb9:
00028fbe: R0 := mem[R31 + 0x20, el]:u64
00028fc5: R0 := mem[R0 + 8, el]:u64
00028fca: R30 := 0x40D62C
00028fcc: call @hlist_dump with return %00028fce

00028fce:
00028fd3: R1 := mem[R31 + 0x20, el]:u64
00028fda: R0 := pad:64[mem[R1 + 0x10, el]:u32]
00028fe0: #1224 := 31:0[R0] - 0x197
00028fe5: VF := extend:64[#1224] <> extend:64[31:0[R0]] - 0x197
00028fea: CF := pad:64[#1224] <> pad:64[31:0[R0]] + 0xFFFFFE69
00028fee: ZF := #1224 = 0
00028ff2: NF := 31:31[#1224]
00028ff8: when ZF <> 1 goto %00028ff6
00035c36: goto %000291dc

000293db:
000293e0: R1 := mem[R31 + 0x20, el]:u64
000293e7: R0 := pad:64[mem[R1 + 0x10, el]:u32]
000293ed: #1226 := 31:0[R0] - 0x197
000293f2: VF := extend:64[#1226] <> extend:64[31:0[R0]] - 0x197
000293f7: CF := pad:64[#1226] <> pad:64[31:0[R0]] + 0xFFFFFE69
000293fb: ZF := #1226 = 0
000293ff: NF := 31:31[#1226]
00029404: when ZF goto %000291dc
00035c37: goto %00028ff6

000291dc:
000291e1: R0 := pad:64[mem[R21, el]:u32]
000291e6: R30 := 0x40D644
000291e8: call @http_body_drop with return %000291ea

000291ea:
000291ed: when 31:0[R0] = 0 goto %00028dea
00035c38: goto %000291f1

000291f1:
000291f6: R0 := mem[R31 + 0x20, el]:u64
000291fb: R1 := 0x413000
00029201: R1 := R1 + 0xE10
00029208: R0 := mem[R0 + 8, el]:u64
0002920d: R30 := 0x40D65C
0002920f: call @hlist_get with return %00029211

00029211:
00029217: mem := mem with [R31 + 0x18, el]:u64 <- R0
0002921c: when R0 = 0 goto %000290da
00035c39: goto %00029220

000290da:
000290dd: R2 := 0x416000
000290e2: R1 := 2
000290e8: R2 := R2 + 0x890
000290ed: R0 := 4
000290f2: R30 := 0x40D7C0
000290f4: call @__syslog_chk with return %000290f6

000290f6:
000290f8: goto %00029004

00029220:
00029223: R30 := 0x40D668
00029225: call @strlen with return %00029227

00029227:
0002922b: R0 := R0 + 6
00029230: R30 := 0x40D670
00029232: call @zmalloc with return %00029234

00029234:
00029238: R28 := R0
0002923f: R1 := mem[R31 + 0x18, el]:u64
00029245: R1 := R1 + 5
0002924a: R30 := 0x40D680
0002924c: call @from_base64 with return %0002924e

0002924e:
00029252: R2 := pad:64[31:0[R0]]
00029258: #1225 := 31:0[R0] - 0x28
0002925d: VF := extend:64[#1225] <> extend:64[31:0[R0]] - 0x28
00029262: CF := pad:64[#1225] <> pad:64[31:0[R0]] + 0xFFFFFFD8
00029266: ZF := #1225 = 0
0002926a: NF := 31:31[#1225]
00029272: when ~(NF = VF & ~ZF) goto %00029270
00035c3a: goto %000292ae

00029270:
00029278: R2 := 0x416000
0002927e: R2 := R2 + 0x868
00029283: R1 := 2
00029288: R0 := 3
0002928d: R30 := 0x40D764
0002928f: call @__syslog_chk with return %00029291

00029291:
00029295: R0 := R28
0002929a: R30 := 0x40D76C
0002929c: call @free with return %0002929e

0002929e:
000292a3: R0 := pad:64[mem[R21, el]:u32]
000292a8: R30 := 0x40D774
000292aa: call @close with return %000292ac

000292ac:
00035c3b: goto %00029019

000292ae:
000292b3: R0 := mem[R31 + 8, el]:u64
000292b9: R3 := R24
000292bf: R1 := R28
000292c6: mem := mem with [R31 + 0x18, el]:u64 <- 0
000292cb: R30 := 0x40D6A0
000292cd: call @ntlm_response with return %000292cf

000292cf:
000292d3: R25 := pad:64[31:0[R0]]
000292d8: VF := 0
000292db: CF := 1
000292df: ZF := 31:0[R0] = 0
000292e3: NF := 31:31[R0]
000292ea: when ~(NF = VF & ~ZF) goto %000290fa
00035c3c: goto %000292ee

000290fa:
000290fd: R2 := 0x413000
00029103: R2 := R2 + 0x868
00029108: R1 := 2
0002910d: R0 := 3
00029112: R30 := 0x40D7D8
00029114: call @__syslog_chk with return %00029116

00029116:
00029119: R19 := 1
0002911f: R0 := R28
00029124: R30 := 0x40D7E4
00029126: call @free with return %00029128

00029128:
0002912d: R0 := mem[R31 + 0x18, el]:u64
00029132: R30 := 0x40D7EC
00029134: call @free with return %00029136

00029136:
0002913b: R0 := pad:64[mem[R21, el]:u32]
00029140: R30 := 0x40D7F4
00029142: call @close with return %00029144

00029144:
00029146: goto %00029024

000292ee:
000292f2: R1 := R26 + 0x7A8
000292f8: R0 := R23
000292fd: R2 := 0x1000
00029302: R30 := 0x40D6BC
00029304: call @strlcpy with return %00029306

00029306:
0002930b: R1 := mem[R31 + 0x18, el]:u64
00029311: R2 := extend:64[31:0[R25]]
00029317: R0 := R23 + 5
0002931c: R3 := 0xFFB
00029321: R30 := 0x40D6D0
00029323: call @to_base64 with return %00029325

00029325:
0002932a: R0 := mem[R19 + 8, el]:u64
00029330: R1 := R27 + 0xA78
00029336: R2 := R23
0002933b: R3 := 1
00029340: R30 := 0x40D6E4
00029342: call @hlist_mod with return %00029344

00029344:
00029348: R1 := R0
0002934f: R0 := mem[R31 + 0x18, el]:u64
00029357: mem := mem with [R19 + 8, el]:u64 <- R1
0002935c: R30 := 0x40D6F4
0002935e: call @free with return %00029360

00029360:
00029364: R0 := R28
00029369: R30 := 0x40D6FC
0002936b: call @free with return %0002936d

0002936d:
0002936f: goto %00029004

00028ff6:
00029000: R0 := pad:64[mem[R31 + 4, el]:u32]
00029006: when 31:0[R0] = 0 goto %00029004
00035c3d: goto %000291ae

000291ae:
000291b3: R0 := pad:64[mem[R22, el]:u32]
000291b8: when 31:0[R0] = 0 goto %000290b1
00035c3e: goto %000291bc

000291bc:
000291c0: when R19 = 0 goto %000291be
00035c3f: goto %000291ce

000291ce:
000291d3: R0 := pad:64[mem[R19, el]:u32]
000291d8: when 31:0[R0] <> 0 goto %0002903f
00035c40: goto %000291be

0002903f:
00029044: R1 := mem[R19 + 0x28, el]:u64
00029049: R0 := 0x413000
0002904f: R0 := R0 + 0xBF0
00029054: R30 := 0x40D790
00029056: call @strcasecmp with return %00029058

00029058:
0002905b: VF := 0
0002905e: CF := 1
00029062: ZF := 31:0[R0] = 0
00029066: NF := 31:31[R0]
0002906b: R2 := 0x416000
00029070: R0 := 0x416000
00029076: R2 := R2 + 0x7D8
0002907c: R0 := R0 + 0x7E8
0002908a: when ZF goto %00029082
0002908b: goto %00029086

00029086:
00029087: R2 := R0
0002908d: goto %00029089

00029082:
00029083: R2 := R2
0002908c: goto %00029089

00029089:
00029092: goto %00029090

000291be:
000291c6: R2 := 0x416000
000291cc: R2 := R2 + 0x7E8
00035c41: goto %00029090

00029090:
00029096: R1 := 0x416000
0002909b: R0 := 2
000290a1: R1 := R1 + 0x8C8
000290a6: R30 := 0x40D480
000290a8: call @__printf_chk with return %000290aa

000290aa:
000290af: R1 := mem[R31 + 0x20, el]:u64
00035c42: goto %000290b1

000290b1:
000290b5: when R20 = 0 goto %000290b3
00035c43: goto %000290cd

000290cd:
000290d0: R0 := 0x197
000290d8: mem := mem with [R20 + 0x10, el]:u32 <- 31:0[R0]
00035c44: goto %000290b3

000290b3:
000290bd: R0 := pad:64[mem[R21, el]:u32]
000290c2: R30 := 0x40D498
000290c4: call @http_body_drop with return %000290c6

000290c6:
000290c9: when 31:0[R0] = 0 goto %00028dea
00035c45: goto %00029004

00028dea:
00028df4: R0 := pad:64[mem[R21, el]:u32]
00028df9: R19 := 0
00028dfe: R30 := 0x40D59C
00028e00: call @close with return %00028e02

00028e02:
00028e06: when R20 <> 0 goto %00028e04
00035c46: goto %00029029

00029004:
0002900e: R0 := pad:64[mem[R21, el]:u32]
00029013: R30 := 0x40D4A4
00029015: call @so_closed with return %00029017

00029017:
0002901b: when 31:0[R0] = 0 goto %00029019
00035c47: goto %00029148

00029019:
00029021: R19 := 1
00029026: goto %00029024

00029148:
0002914d: R0 := pad:64[mem[R22, el]:u32]
00029153: when 31:0[R0] <> 0 goto %00029151
00035c48: goto %0002916e

00029151:
00029159: R1 := 0x416000
0002915e: R0 := 2
00029164: R1 := R1 + 0x8F0
00029169: R30 := 0x40D710
0002916b: call @__printf_chk with return %0002916d

0002916d:
00029170: goto %0002916e

0002916e:
00029176: R0 := pad:64[mem[R21, el]:u32]
0002917b: R30 := 0x40D4B8
0002917d: call @close with return %0002917f

0002917f:
00029184: R1 := mem[R19 + 0x30, el]:u64
0002918a: R0 := R24
00029191: R2 := mem[R19 + 0x40, el]:u64
00029196: R30 := 0x40D4C8
00029198: call @proxy_connect with return %0002919a

0002919a:
000291a0: mem := mem with [R21, el]:u32 <- 31:0[R0]
000291a6: R0 := pad:64[~31:0[R0]]
000291ac: R19 := pad:64[31:31[R0]]
00035c49: goto %00029024

00029024:
0002902b: when R20 = 0 goto %00029029
00035c4a: goto %00028e04

00029029:
00029032: R0 := R31 + 0x20
00029037: R30 := 0x40D5A8
00029039: call @free_rr_data with return %0002903b

0002903b:
0002903d: goto %00028e04

00028e04:
00028e0d: R0 := R23
00028e12: R30 := 0x40D4E0
00028e14: call @free with return %00028e16

00028e16:
00028e19: R0 := 0x42F000
00028e20: R0 := mem[R0 + 0xFB8, el]:u64
00028e27: R2 := mem[R31 + 0x28, el]:u64
00028e2e: R1 := mem[R0, el]:u64
00028e34: #1216 := ~R1
00028e39: #1217 := R2 + ~R1
00028e3f: VF := extend:128[#1217 + 1] <> extend:128[R2] + extend:128[#1216] +
          1
00028e45: CF := pad:128[#1217 + 1] <> pad:128[R2] + pad:128[#1216] + 1
00028e49: ZF := #1217 + 1 = 0
00028e4d: NF := 63:63[#1217 + 1]
00028e51: R2 := #1217 + 1
00028e56: R1 := 0
00028e5c: when ZF <> 1 goto %00028e5a
00035c4b: goto %00028e66

00028e5a:
00028e62: R30 := 0x40D7FC
00028e64: call @__stack_chk_fail with return %00028ccf

00028ccf:
00028cd7: R1 := 0x416000
00028cdc: R0 := 2
00028ce2: R1 := R1 + 0x7F8
00028ce7: R30 := 0x40D80C
00028ce9: call @__printf_chk with return %00028ceb

00028ceb:
00028cee: goto %00028cec

00028cec:
00028cf2: R0 := 1
00028cfa: mem := mem with [R31 + 4, el]:u32 <- 31:0[R0]
00028cff: goto %00028cfd

00028e66:
00028e6a: #1218 := R31 + 0x30
00028e6f: R29 := mem[#1218, el]:u64
00028e74: R30 := mem[#1218 + 8, el]:u64
00028e7a: R0 := pad:64[31:0[R19]]
00028e80: #1219 := R31 + 0x40
00028e85: R19 := mem[#1219, el]:u64
00028e8a: R20 := mem[#1219 + 8, el]:u64
00028e90: #1220 := R31 + 0x50
00028e95: R21 := mem[#1220, el]:u64
00028e9a: R22 := mem[#1220 + 8, el]:u64
00028ea0: #1221 := R31 + 0x60
00028ea5: R23 := mem[#1221, el]:u64
00028eaa: R24 := mem[#1221 + 8, el]:u64
00028eb0: #1222 := R31 + 0x70
00028eb5: R25 := mem[#1222, el]:u64
00028eba: R26 := mem[#1222 + 8, el]:u64
00028ec0: #1223 := R31 + 0x80
00028ec5: R27 := mem[#1223, el]:u64
00028eca: R28 := mem[#1223 + 8, el]:u64
00028ed0: R31 := R31 + 0x90
00028ed5: R1 := 0
00028eda: R2 := 0
00028edf: R3 := 0
00028ee4: R4 := 0
00028ee9: R16 := 0
00028eee: R17 := 0
00028ef3: call R30 with noreturn

00035c4c: sub proxy_connect(proxy_connect_result)
00035ef6: proxy_connect_result :: out u32 = low:32[R0]

0001db1f:
0001db22: R1 := 0x42F000
0001db29: R1 := mem[R1 + 0xF48, el]:u64
0001db2f: #718 := R31 - 0x70
0001db35: mem := mem with [#718, el]:u64 <- R29
0001db3b: mem := mem with [#718 + 8, el]:u64 <- R30
0001db3f: R31 := #718
0001db45: R29 := R31
0001db4b: #719 := R31 + 0x10
0001db51: mem := mem with [#719, el]:u64 <- R19
0001db57: mem := mem with [#719 + 8, el]:u64 <- R20
0001db5e: R19 := pad:64[mem[R1, el]:u32]
0001db64: #720 := R31 + 0x20
0001db6a: mem := mem with [#720, el]:u64 <- R21
0001db70: mem := mem with [#720 + 8, el]:u64 <- R22
0001db76: #721 := R31 + 0x30
0001db7c: mem := mem with [#721, el]:u64 <- R23
0001db82: mem := mem with [#721 + 8, el]:u64 <- R24
0001db88: #722 := R31 + 0x40
0001db8e: mem := mem with [#722, el]:u64 <- R25
0001db94: mem := mem with [#722 + 8, el]:u64 <- R26
0001db9a: #723 := R31 + 0x50
0001dba0: mem := mem with [#723, el]:u64 <- R27
0001dba6: mem := mem with [#723 + 8, el]:u64 <- R28
0001dbae: mem := mem with [R31 + 0x68, el]:u64 <- R0
0001dbb4: when 31:0[R19] <> 0 goto %0001dbb2
00035c4d: goto %000294ca

0001dbb2:
0001dbba: R3 := 0x417000
0001dbbf: R1 := 0x416000
0001dbc4: R0 := 0x416000
0001dbca: R3 := R3 + 0x3E0
0001dbd0: R1 := R1 + 0x710
0001dbd6: R0 := R0 + 0x748
0001dbdb: R2 := 0x1BA
0001dbe0: R30 := 0x40D288
0001dbe2: call @__assert_fail with return %0001dbe4

0001dbe4:
00035c4e: call @proxy_authenticate with noreturn

000294ca:
000294cd: R25 := 0x42F000
000294d4: R25 := mem[R25 + 0xFA0, el]:u64
000294d9: R24 := 0x416000
000294de: R0 := 0x42F000
000294e5: R0 := mem[R0 + 0xFE0, el]:u64
000294eb: R24 := R24 + 0x788
000294f2: R20 := mem[R25, el]:u64
000294f9: R21 := mem[R0, el]:u64
000294fe: VF := 0
00029501: CF := 1
00029505: ZF := R20 = 0
00029509: NF := 63:63[R20]
0002950e: R0 := 0x42F000
00029515: R0 := mem[R0 + 0xF90, el]:u64
0002951b: #1227 := ZF
0002951e: VF := 0
00029522: CF := #1227
00029527: ZF := R21 = 0 | ~#1227
0002952c: NF := #1227 & 63:63[R21]
0002953a: when ZF <> 1 goto %00029532
0002953b: goto %00029536

00029536:
00029537: R1 := R25
0002953d: goto %00029539

00029532:
00029533: R1 := R21
0002953c: goto %00029539

00029539:
00029542: R22 := 0x42F000
00029549: R22 := mem[R22 + 0xF28, el]:u64
00029550: R20 := mem[R1, el]:u64
00029555: R28 := 0x42F000
0002955c: R28 := mem[R28 + 0xF30, el]:u64
00029563: R23 := pad:64[mem[R0, el]:u32]
00035c4f: goto %00029567

00029567:
0002956b: R0 := R22
00029570: R30 := 0x40CFD8
00029572: call @pthread_mutex_lock with return %00029574

00029574:
00029578: R1 := R20
0002957e: R0 := R21
00029583: R30 := 0x40CFE4
00029585: call @proxylist_get with return %00029587

00029587:
0002958b: R27 := R0
00029591: when R0 = 0 goto %0002958f
00035c50: goto %00029a80

0002958f:
00029598: R0 := R22
0002959d: R30 := 0x40D198
0002959f: call @pthread_mutex_unlock with return %000295a1

000295a1:
000295a4: goto %000295a2

00029a80:
00029a85: R0 := pad:64[mem[R0, el]:u32]
00029a8b: #1250 := 31:0[R0] - 1
00029a90: VF := extend:64[#1250] <> extend:64[31:0[R0]] - 1
00029a95: CF := pad:64[#1250] <> pad:64[31:0[R0]] + 0xFFFFFFFF
00029a99: ZF := #1250 = 0
00029a9d: NF := 31:31[#1250]
00029aa2: when ZF goto %000298e7
00035c51: goto %000298f0

000298e7:
000298ec: R0 := pad:64[mem[R27 + 0x190, el]:u32]
000298f2: when 31:0[R0] <> 0 goto %000298f0
00035c52: goto %00029a4b

00029a4b:
00029a50: R0 := pad:64[mem[R28, el]:u32]
00029a56: R26 := R27 + 4
00029a5b: when 31:0[R0] <> 0 goto %0002999e
00035c53: goto %00029a5f

0002999e:
000299a2: R2 := R26
000299a7: R1 := 0x416000
000299ac: R0 := 2
000299b2: R1 := R1 + 0x750
000299b7: R30 := 0x40D22C
000299b9: call @__printf_chk with return %000299bb

000299bb:
000299c0: R2 := pad:64[mem[R27 + 0x44, el]:u32]
000299c6: R1 := R26
000299cc: R0 := R27 + 0x188
000299d1: R30 := 0x40D23C
000299d3: call @so_resolv with return %000299d5

000299d5:
000299d9: when 31:0[R0] <> 0 goto %000299d7
00035c54: goto %00029a12

00029a5f:
00029a64: R2 := pad:64[mem[R27 + 0x44, el]:u32]
00029a6a: R1 := R26
00029a70: R0 := R27 + 0x188
00029a75: R30 := 0x40D1C0
00029a77: call @so_resolv with return %00029a79

00029a79:
00029a7c: when 31:0[R0] = 0 goto %00029a12
00035c55: goto %000299d7

00029a12:
00029a16: R3 := R26
00029a1b: R1 := 2
00029a20: R0 := 3
00029a25: R2 := 0x416000
00029a2b: R2 := R2 + 0x768
00029a30: R30 := 0x40D258
00029a32: call @__syslog_chk with return %00029a34

00029a34:
00029a37: R0 := 0x42F000
00029a3e: R0 := mem[R0 + 0xF28, el]:u64
00029a43: R30 := 0x40D264
00029a45: call @pthread_mutex_unlock with return %00029a47

00029a47:
00029a49: goto %00029902

000299d7:
000299df: R0 := 1
000299e7: mem := mem with [R27 + 0x190, el]:u32 <- 31:0[R0]
000299ed: R0 := R22
000299f2: R30 := 0x40D1D4
000299f4: call @pthread_mutex_unlock with return %000299f6

000299f6:
000299fb: R0 := pad:64[mem[R27, el]:u32]
00029a01: when 31:0[R0] <> 0 goto %000299ff
00035c56: goto %0002990b

000298f0:
000298f9: R0 := R22
000298fe: R30 := 0x40D000
00029900: call @pthread_mutex_unlock with return %00029902

00029902:
00029907: R0 := pad:64[mem[R27, el]:u32]
0002990d: when 31:0[R0] = 0 goto %0002990b
00035c57: goto %000299ff

0002990b:
00029913: R26 := 0xFFFFFFFE
00029919: R0 := pad:64[31:0[R26]]
0002991f: #1245 := R31 + 0x10
00029924: R19 := mem[#1245, el]:u64
00029929: R20 := mem[#1245 + 8, el]:u64
0002992f: #1246 := R31 + 0x20
00029934: R21 := mem[#1246, el]:u64
00029939: R22 := mem[#1246 + 8, el]:u64
0002993f: #1247 := R31 + 0x30
00029944: R23 := mem[#1247, el]:u64
00029949: R24 := mem[#1247 + 8, el]:u64
0002994f: #1248 := R31 + 0x40
00029954: R25 := mem[#1248, el]:u64
00029959: R26 := mem[#1248 + 8, el]:u64
0002995f: #1249 := R31 + 0x50
00029964: R27 := mem[#1249, el]:u64
00029969: R28 := mem[#1249 + 8, el]:u64
00029970: R29 := mem[R31, el]:u64
00029975: R30 := mem[R31 + 8, el]:u64
00029979: R31 := R31 + 0x70
0002997e: R1 := 0
00029983: R2 := 0
00029988: R3 := 0
0002998d: R4 := 0
00029992: R16 := 0
00029997: R17 := 0
0002999c: call R30 with noreturn

000299ff:
00029a09: R0 := pad:64[mem[R27 + 0x190, el]:u32]
00029a0e: when 31:0[R0] <> 0 goto %0002986f
00035c58: goto %000295a2

0002986f:
00029874: R0 := mem[R27 + 0x188, el]:u64
00029879: R30 := 0x40D0AC
0002987b: call @so_connect with return %0002987d

0002987d:
00029881: R26 := pad:64[31:0[R0]]
00029886: when 31:31[R0] goto %000295aa
00035c59: goto %0002988a

0002988a:
0002988f: R0 := mem[R25, el]:u64
00029895: #1243 := ~R20
0002989a: #1244 := R0 + ~R20
000298a0: VF := extend:128[#1244 + 1] <> extend:128[R0] + extend:128[#1243] +
          1
000298a6: CF := pad:128[#1244 + 1] <> pad:128[R0] + pad:128[#1243] + 1
000298aa: ZF := #1244 + 1 = 0
000298ae: NF := 63:63[#1244 + 1]
000298b3: when ZF goto %000296b6
00035c5a: goto %00029636

000295a2:
000295a8: R26 := 0xFFFFFFFF
00035c5b: goto %000295aa

000295aa:
000295ae: R1 := R20
000295b4: R0 := R21
000295b9: R30 := 0x40D020
000295bb: call @proxylist_get_next with return %000295bd

000295bd:
000295c1: when R0 = 0 goto %000295bf
00035c5c: goto %000298b7

000298b7:
000298bc: R20 := mem[R0, el]:u64
000298c1: R1 := mem[R0 + 8, el]:u64
000298c7: R2 := R24
000298cc: R0 := 3
000298d3: R4 := pad:64[mem[R1 + 0x44, el]:u32]
000298d9: R3 := R1 + 4
000298de: R1 := 2
000298e3: R30 := 0x40D040
000298e5: call @__syslog_chk with return %000295bf

000295bf:
000295c8: R19 := pad:64[31:0[R19] + 1]
000295ce: #1228 := ~31:0[R19]
000295d3: #1229 := 31:0[R23] + ~31:0[R19]
000295d9: VF := extend:64[#1229 + 1] <> extend:64[31:0[R23]] +
          extend:64[#1228] + 1
000295df: CF := pad:64[#1229 + 1] <> pad:64[31:0[R23]] + pad:64[#1228] + 1
000295e3: ZF := #1229 + 1 = 0
000295e7: NF := 31:31[#1229 + 1]
000295ee: when NF = VF & ~ZF goto %00029567
00035c5d: goto %000295f2

000295f2:
000295f5: R0 := 3
000295fa: R2 := 0x416000
000295ff: R1 := 2
00029605: R2 := R2 + 0x7B0
0002960a: R30 := 0x40D060
0002960c: call @__syslog_chk with return %0002960e

0002960e:
00029613: R0 := mem[R25, el]:u64
00029619: #1230 := ~R0
0002961e: #1231 := R20 + ~R0
00029624: VF := extend:128[#1231 + 1] <> extend:128[R20] + extend:128[#1230]
          + 1
0002962a: CF := pad:128[#1231 + 1] <> pad:128[R20] + pad:128[#1230] + 1
0002962e: ZF := #1231 + 1 = 0
00029632: NF := 63:63[#1231 + 1]
00029638: when ZF <> 1 goto %00029636
00035c5e: goto %000297e6

00029636:
0002963e: R0 := 0x42F000
00029645: R0 := mem[R0 + 0xF10, el]:u64
0002964a: R21 := 0x42F000
00029651: R21 := mem[R21 + 0xFC0, el]:u64
00029656: R30 := 0x40D0D4
00029658: call @pthread_mutex_lock with return %0002965a

0002965a:
0002965f: R19 := mem[R21, el]:u64
00029665: when R19 = 0 goto %00029663
00035c5f: goto %000297c1

000297c1:
00035c60: goto %000297c3

000297c3:
000297c8: R0 := pad:64[mem[R19, el]:u32]
000297cf: R19 := mem[R19 + 0x10, el]:u64
000297d4: R30 := 0x40D0EC
000297d6: call @close with return %000297d8

000297d8:
000297db: when R19 <> 0 goto %000297c3
00035c61: goto %000297df

000297df:
000297e4: R19 := mem[R21, el]:u64
00035c62: goto %00029663

00029663:
0002966c: R0 := R19
00029671: R30 := 0x40D0FC
00029673: call @plist_free with return %00029675

00029675:
00029678: R0 := 0x42F000
0002967f: R0 := mem[R0 + 0xF10, el]:u64
00029684: R30 := 0x40D108
00029686: call @pthread_mutex_unlock with return %00029688

00029688:
0002968b: R0 := 0x42F000
00029692: R0 := mem[R0 + 0xF28, el]:u64
00029697: R30 := 0x40D114
00029699: call @pthread_mutex_lock with return %0002969b

0002969b:
000296a1: mem := mem with [R25, el]:u64 <- R20
000296a6: R0 := 0x42F000
000296ad: R0 := mem[R0 + 0xF28, el]:u64
000296b2: R30 := 0x40D124
000296b4: call @pthread_mutex_unlock with return %000296b6

000296b6:
000296bb: R0 := mem[R31 + 0x68, el]:u64
000296c0: VF := 0
000296c3: CF := 1
000296c7: ZF := 31:0[R26] = 0
000296cb: NF := 31:31[R26]
000296d2: #1232 := NF = VF
000296d5: VF := 0
000296d9: CF := #1232
000296de: ZF := R0 = 0 | ~#1232
000296e3: NF := #1232 & 63:63[R0]
000296e9: when ZF goto %000296e7
00035c63: goto %00029775

00029775:
00029778: R2 := 0x42F000
0002977f: R2 := mem[R2 + 0xF58, el]:u64
00029784: R1 := 0x42F000
0002978b: R1 := mem[R1 + 0xF38, el]:u64
00029792: R2 := pad:64[mem[R2, el]:u32]
00029799: R1 := mem[R1, el]:u64
0002979e: VF := 0
000297a1: CF := 1
000297a5: ZF := 31:0[R2] = 0
000297a9: NF := 31:31[R2]
000297b5: when ZF <> 1 goto %000297ae
000297b6: goto %000297b1

000297b1:
000297b2: R2 := 1
000297b8: goto %000297b4

000297ae:
000297af: R2 := 0
000297b7: goto %000297b4

000297b4:
000297bd: R30 := 0x40D158
000297bf: call @copy_auth with return %000296e7

000296e7:
000296f0: #1233 := R31 + 0x10
000296f5: R19 := mem[#1233, el]:u64
000296fa: R20 := mem[#1233 + 8, el]:u64
00029700: R0 := pad:64[31:0[R26]]
00029706: #1234 := R31 + 0x20
0002970b: R21 := mem[#1234, el]:u64
00029710: R22 := mem[#1234 + 8, el]:u64
00029716: #1235 := R31 + 0x30
0002971b: R23 := mem[#1235, el]:u64
00029720: R24 := mem[#1235 + 8, el]:u64
00029726: #1236 := R31 + 0x40
0002972b: R25 := mem[#1236, el]:u64
00029730: R26 := mem[#1236 + 8, el]:u64
00029736: #1237 := R31 + 0x50
0002973b: R27 := mem[#1237, el]:u64
00029740: R28 := mem[#1237 + 8, el]:u64
00029747: R29 := mem[R31, el]:u64
0002974c: R30 := mem[R31 + 8, el]:u64
00029750: R31 := R31 + 0x70
00029755: R1 := 0
0002975a: R2 := 0
0002975f: R3 := 0
00029764: R4 := 0
00029769: R16 := 0
0002976e: R17 := 0
00029773: call R30 with noreturn

000297e6:
000297ea: #1238 := R31 + 0x10
000297ef: R19 := mem[#1238, el]:u64
000297f4: R20 := mem[#1238 + 8, el]:u64
000297fa: R0 := pad:64[31:0[R26]]
00029800: #1239 := R31 + 0x20
00029805: R21 := mem[#1239, el]:u64
0002980a: R22 := mem[#1239 + 8, el]:u64
00029810: #1240 := R31 + 0x30
00029815: R23 := mem[#1240, el]:u64
0002981a: R24 := mem[#1240 + 8, el]:u64
00029820: #1241 := R31 + 0x40
00029825: R25 := mem[#1241, el]:u64
0002982a: R26 := mem[#1241 + 8, el]:u64
00029830: #1242 := R31 + 0x50
00029835: R27 := mem[#1242, el]:u64
0002983a: R28 := mem[#1242 + 8, el]:u64
00029841: R29 := mem[R31, el]:u64
00029846: R30 := mem[R31 + 8, el]:u64
0002984a: R31 := R31 + 0x70
0002984f: R1 := 0
00029854: R2 := 0
00029859: R3 := 0
0002985e: R4 := 0
00029863: R16 := 0
00029868: R17 := 0
0002986d: call R30 with noreturn

00035c64: sub proxy_thread(proxy_thread_result)
00035ef7: proxy_thread_result :: out u32 = low:32[R0]

0001f9b4:
0001f9b8: R31 := R31 - 0x80
0001f9be: #835 := R31 + 0x20
0001f9c4: mem := mem with [#835, el]:u64 <- R29
0001f9ca: mem := mem with [#835 + 8, el]:u64 <- R30
0001f9d0: R29 := R31 + 0x20
0001f9d6: #836 := R31 + 0x40
0001f9dc: mem := mem with [#836, el]:u64 <- R21
0001f9e2: mem := mem with [#836 + 8, el]:u64 <- R22
0001f9e8: R22 := R0
0001f9ed: R0 := 0x42F000
0001f9f4: R0 := mem[R0 + 0xFB8, el]:u64
0001f9fa: #837 := R31 + 0x30
0001fa00: mem := mem with [#837, el]:u64 <- R19
0001fa06: mem := mem with [#837 + 8, el]:u64 <- R20
0001fa0c: #838 := R31 + 0x50
0001fa12: mem := mem with [#838, el]:u64 <- R23
0001fa18: mem := mem with [#838 + 8, el]:u64 <- R24
0001fa1e: R24 := R31 + 0x10
0001fa24: #839 := R31 + 0x60
0001fa2a: mem := mem with [#839, el]:u64 <- R25
0001fa30: mem := mem with [#839 + 8, el]:u64 <- R26
0001fa37: R25 := pad:64[mem[R22, el]:u32]
0001fa3d: #840 := R31 + 0x70
0001fa43: mem := mem with [#840, el]:u64 <- R27
0001fa49: mem := mem with [#840 + 8, el]:u64 <- R28
0001fa4e: R27 := 0x413000
0001fa54: R1 := R27 + 0xA28
0001fa5c: mem := mem with [R31 + 8, el]:u64 <- R1
0001fa61: R28 := 0x414000
0001fa66: R23 := 0x42F000
0001fa6d: R23 := mem[R23 + 0xF30, el]:u64
0001fa73: R28 := R28 + 0xA28
0001fa78: R26 := 0x42F000
0001fa7f: R26 := mem[R26 + 0xFD0, el]:u64
0001fa86: R1 := mem[R0, el]:u64
0001fa8e: mem := mem with [R31 + 0x18, el]:u64 <- R1
0001fa93: R1 := 0
00035c65: goto %0001fa97

0001fa97:
0001fa9c: R0 := pad:64[mem[R23, el]:u32]
0001faa2: when 31:0[R0] <> 0 goto %0001faa0
00035c66: goto %00027f99

0001faa0:
0001faa9: R2 := pad:64[31:0[R25]]
0001faaf: R1 := R28
0001fab4: R0 := 2
0001fab9: R30 := 0x40A938
0001fabb: call @__printf_chk with return %0001fabd

0001fabd:
0001fac2: R1 := mem[R31 + 8, el]:u64
0001fac8: R2 := pad:64[31:0[R25]]
0001facd: R0 := 2
0001fad2: R30 := 0x40A948
0001fad4: call @__printf_chk with return %0001fad6

0001fad6:
0001fad9: R30 := 0x40A94C
0001fadb: call @new_rr_data with return %0001fadd

0001fadd:
0001fae1: R1 := R0
0001fae7: R0 := pad:64[31:0[R25]]
0001faef: mem := mem with [R31 + 0x10, el]:u64 <- R1
0001faf4: R30 := 0x40A95C
0001faf7: call @headers_recv with return %00021047

00021047:
0002104b: when 31:0[R0] <> 0 goto %00021049
00035c67: goto %00027f64

00027f99:
00027f9c: R30 := 0x40A7D4
00027f9e: call @new_rr_data with return %00027fa0

00027fa0:
00027fa4: R1 := R0
00027faa: R0 := pad:64[31:0[R25]]
00027fb2: mem := mem with [R31 + 0x10, el]:u64 <- R1
00027fb7: R30 := 0x40A7E4
00027fb9: call @headers_recv with return %00027fbb

00027fbb:
00027fbe: when 31:0[R0] = 0 goto %00027f64
00035c68: goto %00021049

00027f64:
00027f68: R0 := R24
00027f6d: R30 := 0x40A968
00027f6f: call @free_rr_data with return %00027f71

00027f71:
00027f75: R0 := R22
00027f7a: R30 := 0x40A970
00027f7c: call @free with return %00027f7e

00027f7e:
00027f82: R0 := pad:64[31:0[R25]]
00027f87: R30 := 0x40A978
00027f89: call @close with return %00027f8b

00027f8b:
00027f90: R0 := pad:64[mem[R26, el]:u32]
00027f95: when 31:0[R0] <> 0 goto %00026d09
00035c69: goto %00026ca2

00021049:
00021053: R27 := mem[R31 + 0x10, el]:u64
00021058: R21 := 0x413000
0002105d: R20 := 0x413000
00021063: R21 := R21 + 0x7B0
00021069: R20 := R20 + 0xBA8
0002106e: goto %0002106c

0002106c:
00021074: R0 := mem[R27 + 8, el]:u64
0002107a: R2 := R21
00021080: R1 := R20
00021085: R30 := 0x40A844
00021087: call @hlist_subcmp with return %00021089

00021089:
0002108d: R19 := pad:64[31:0[R0]]
00021094: R1 := mem[R31 + 0x10, el]:u64
0002109b: R0 := mem[R1 + 0x40, el]:u64
000210a0: R30 := 0x40A854
000210a2: call @noproxy_match with return %000210a4

000210a4:
000210a9: R1 := mem[R31 + 0x10, el]:u64
000210af: when 31:0[R0] = 0 goto %000210ad
00035c6a: goto %00027f51

00027f51:
00027f55: R0 := R22
00027f5a: R30 := 0x40A864
00027f5c: call @direct_request with return %00027f5e

00027f5e:
00027f62: R27 := R0
00035c6b: goto %00026c04

000210ad:
000210b6: R0 := R22
000210bb: R30 := 0x40A808
000210be: call @forward_request with return %000254bd

000254bd:
000254c1: R27 := R0
000254c7: #1064 := R0 + 2
000254cc: VF := extend:128[#1064] <> extend:128[R0] + 2
000254d1: CF := pad:128[#1064] <> pad:128[R0] + 2
000254d5: ZF := #1064 = 0
000254d9: NF := 63:63[#1064]
000254df: when ZF goto %000254dd
00035c6c: goto %00027f43

000254dd:
000254e7: R1 := mem[R31 + 0x10, el]:u64
000254ed: R0 := R22
000254f2: R30 := 0x40A920
000254f5: call @direct_request with return %00026bfd

00026bfd:
00026c01: R27 := R0
00026c06: goto %00026c04

00026c04:
00026c0c: R0 := pad:64[mem[R23, el]:u32]
00026c12: when 31:0[R0] = 0 goto %00026c10
00035c6d: goto %00027efa

00027f43:
00027f48: R0 := pad:64[mem[R23, el]:u32]
00027f4d: when 31:0[R0] <> 0 goto %00027efa
00035c6e: goto %00026c10

00027efa:
00027efe: R2 := R27
00027f03: R1 := 0x414000
00027f08: R0 := 2
00027f0e: R1 := R1 + 0xA48
00027f13: R30 := 0x40A884
00027f15: call @__printf_chk with return %00027f17

00027f17:
00027f1b: R0 := R27 - 1
00027f21: #1171 := R0 + 3
00027f26: VF := extend:128[#1171] <> extend:128[R0] + 3
00027f2b: CF := pad:128[#1171] <> pad:128[R0] + 3
00027f2f: ZF := #1171 = 0
00027f33: NF := 63:63[#1171]
00027f39: R0 := R24
00027f3f: when ~(CF & ~ZF) goto %00027eeb
00035c6f: goto %00026c3c

00026c10:
00026c19: R0 := R27 - 1
00026c1f: #1109 := R0 + 3
00026c24: VF := extend:128[#1109] <> extend:128[R0] + 3
00026c29: CF := pad:128[#1109] <> pad:128[R0] + 3
00026c2d: ZF := #1109 = 0
00026c31: NF := 63:63[#1109]
00026c37: R0 := R24
00026c3e: when CF & ~ZF goto %00026c3c
00035c70: goto %00027eeb

00026c3c:
00026c44: R30 := 0x40A898
00026c46: call @free_rr_data with return %00026c48

00026c48:
00026c4b: VF := 0
00026c4e: CF := 1
00026c52: ZF := 31:0[R19] = 0
00026c56: NF := 31:31[R19]
00026c5c: #1110 := R27 + 1
00026c60: #1111 := ZF <> 1
00026c66: VF := #1111 & extend:128[#1110] <> extend:128[R27] + 1
00026c6c: CF := #1111 & pad:128[#1110] <> pad:128[R27] + 1
00026c71: ZF := #1110 = 0 | ~#1111
00026c76: NF := #1111 & 63:63[#1110]
00026c7c: when ZF goto %00026c7a
00035c71: goto %00027edd

00027edd:
00027ee2: R0 := pad:64[mem[R26, el]:u32]
00027ee7: when 31:0[R0] = 0 goto %0001fa97
00035c72: goto %00026c7a

00026c7a:
00026c83: R0 := R22
00026c88: R30 := 0x40A8B4
00026c8a: call @free with return %00026c8c

00026c8c:
00026c90: R0 := pad:64[31:0[R25]]
00026c95: R30 := 0x40A8BC
00026c97: call @close with return %00026c99

00026c99:
00026c9e: R0 := pad:64[mem[R26, el]:u32]
00026ca4: when 31:0[R0] = 0 goto %00026ca2
00035c73: goto %00026d09

00026ca2:
00026caa: R0 := 0x42F000
00026cb1: R0 := mem[R0 + 0xEF0, el]:u64
00026cb6: R19 := 0x42F000
00026cbd: R19 := mem[R19 + 0xF40, el]:u64
00026cc2: R30 := 0x40A994
00026cc4: call @pthread_mutex_lock with return %00026cc6

00026cc6:
00026cc9: R30 := 0x40A998
00026ccc: call @pthread_self with return %00026cce

00026cce:
00026cd2: R1 := R0
00026cd9: R0 := mem[R19, el]:u64
00026cde: R2 := 0
00026ce3: R30 := 0x40A9A8
00026ce5: call @plist_add with return %00026ce7

00026ce7:
00026ceb: R1 := R0
00026cf0: R0 := 0x42F000
00026cf7: R0 := mem[R0 + 0xEF0, el]:u64
00026cff: mem := mem with [R19, el]:u64 <- R1
00026d04: R30 := 0x40A9BC
00026d06: call @pthread_mutex_unlock with return %00026d08

00026d08:
00026d0b: goto %00026d09

00026d09:
00026d0f: R0 := 0x42F000
00026d16: R0 := mem[R0 + 0xFB8, el]:u64
00026d1d: R2 := mem[R31 + 0x18, el]:u64
00026d24: R1 := mem[R0, el]:u64
00026d2a: #1112 := ~R1
00026d2f: #1113 := R2 + ~R1
00026d35: VF := extend:128[#1113 + 1] <> extend:128[R2] + extend:128[#1112] +
          1
00026d3b: CF := pad:128[#1113 + 1] <> pad:128[R2] + pad:128[#1112] + 1
00026d3f: ZF := #1113 + 1 = 0
00026d43: NF := 63:63[#1113 + 1]
00026d47: R2 := #1113 + 1
00026d4c: R1 := 0
00026d52: when ZF <> 1 goto %00026d50
00035c74: goto %00027e59

00026d50:
00026d58: R30 := 0x40A9C4
00026d5a: call @__stack_chk_fail with return %00035c75

00035c75:
00035c76: call @tunnel_thread with noreturn

00027e59:
00027e5d: #1165 := R31 + 0x20
00027e62: R29 := mem[#1165, el]:u64
00027e67: R30 := mem[#1165 + 8, el]:u64
00027e6c: R0 := 0
00027e72: #1166 := R31 + 0x30
00027e77: R19 := mem[#1166, el]:u64
00027e7c: R20 := mem[#1166 + 8, el]:u64
00027e82: #1167 := R31 + 0x40
00027e87: R21 := mem[#1167, el]:u64
00027e8c: R22 := mem[#1167 + 8, el]:u64
00027e92: #1168 := R31 + 0x50
00027e97: R23 := mem[#1168, el]:u64
00027e9c: R24 := mem[#1168 + 8, el]:u64
00027ea2: #1169 := R31 + 0x60
00027ea7: R25 := mem[#1169, el]:u64
00027eac: R26 := mem[#1169 + 8, el]:u64
00027eb2: #1170 := R31 + 0x70
00027eb7: R27 := mem[#1170, el]:u64
00027ebc: R28 := mem[#1170 + 8, el]:u64
00027ec2: R31 := R31 + 0x80
00027ec7: R1 := 0
00027ecc: R2 := 0
00027ed1: R16 := 0
00027ed6: R17 := 0
00027edb: call R30 with noreturn

00027eeb:
00027eee: R30 := 0x40A830
00027ef0: call @free_rr_data with return %00027ef2

00027ef2:
00027ef8: mem := mem with [R31 + 0x10, el]:u64 <- R27
00035c77: goto %0002106c

00035c78: sub proxylist_add(proxylist_add_result)
00035ef8: proxylist_add_result :: out u32 = low:32[R0]

0001d513:
0001d517: #693 := R31 - 0x30
0001d51d: mem := mem with [#693, el]:u64 <- R29
0001d523: mem := mem with [#693 + 8, el]:u64 <- R30
0001d527: R31 := #693
0001d52d: R29 := R31
0001d533: #694 := R31 + 0x10
0001d539: mem := mem with [#694, el]:u64 <- R19
0001d53f: mem := mem with [#694 + 8, el]:u64 <- R20
0001d545: R20 := R2
0001d54b: R19 := R0
0001d550: R0 := 0x18
0001d558: mem := mem with [R31 + 0x20, el]:u64 <- R21
0001d55e: R21 := R1
0001d563: R30 := 0x40C5E4
0001d565: call @malloc with return %0001d567

0001d567:
0001d56d: mem := mem with [R0, el]:u64 <- R21
0001d573: mem := mem with [R0 + 8, el]:u64 <- R20
0001d57a: mem := mem with [R0 + 0x10, el]:u64 <- 0
0001d580: when R19 = 0 goto %0001d57e
00035c79: goto %0002a641

0002a641:
0002a645: R1 := R19
00035c7a: goto %0002a649

0002a649:
0002a64d: R2 := R1
0002a654: R1 := mem[R1 + 0x10, el]:u64
0002a659: when R1 <> 0 goto %0002a649
00035c7b: goto %0002a65d

0002a65d:
0002a663: mem := mem with [R2 + 0x10, el]:u64 <- R0
0002a669: R0 := R19
00035c7c: goto %0001d57e

0001d57e:
0001d587: #695 := R31 + 0x10
0001d58c: R19 := mem[#695, el]:u64
0001d591: R20 := mem[#695 + 8, el]:u64
0001d598: R21 := mem[R31 + 0x20, el]:u64
0001d59f: R29 := mem[R31, el]:u64
0001d5a4: R30 := mem[R31 + 8, el]:u64
0001d5a8: R31 := R31 + 0x30
0001d5ad: R1 := 0
0001d5b2: R2 := 0
0001d5b7: R16 := 0
0001d5bc: R17 := 0
0001d5c1: call R30 with noreturn

00035c7d: sub proxylist_dump(proxylist_dump_result)
00035ef9: proxylist_dump_result :: out u32 = low:32[R0]

0001d649:
0001d64d: when R0 = 0 goto %0001d64b
00035c7e: goto %0002a4b8

0001d64b:
0001d653: R0 := 0
0001d658: R1 := 0
0001d65d: R2 := 0
0001d662: R3 := 0
0001d667: R4 := 0
0001d66c: R5 := 0
0001d671: R16 := 0
0001d676: R17 := 0
0001d67b: call R30 with noreturn

0002a4b8:
0002a4bc: #1277 := R31 - 0x30
0002a4c2: mem := mem with [#1277, el]:u64 <- R29
0002a4c8: mem := mem with [#1277 + 8, el]:u64 <- R30
0002a4cc: R31 := #1277
0002a4d2: R29 := R31
0002a4d8: #1278 := R31 + 0x10
0002a4de: mem := mem with [#1278, el]:u64 <- R19
0002a4e4: mem := mem with [#1278 + 8, el]:u64 <- R20
0002a4e9: R20 := 0x416000
0002a4ef: R19 := R0
0002a4f5: R20 := R20 + 0x5E0
0002a4fd: mem := mem with [R31 + 0x20, el]:u64 <- R21
0002a502: R21 := 0x416000
0002a508: R21 := R21 + 0x600
0002a50d: goto %0002a50b

0002a50b:
0002a513: R2 := mem[R19, el]:u64
0002a518: R4 := mem[R19 + 8, el]:u64
0002a51e: R1 := R20
0002a523: R0 := 2
0002a52a: R5 := pad:64[mem[R4, el]:u32]
0002a530: R3 := R4 + 4
0002a536: when 31:0[R5] = 0 goto %0002a534
00035c7f: goto %0002a5a2

0002a5a2:
0002a5a7: R4 := pad:64[mem[R4 + 0x44, el]:u32]
0002a5ad: R1 := R21
0002a5b2: R0 := 2
0002a5b7: R30 := 0x40C710
0002a5b9: call @__printf_chk with return %0002a5bb

0002a5bb:
0002a5c0: R19 := mem[R19 + 0x10, el]:u64
0002a5c5: when R19 <> 0 goto %0002a50b
00035c80: goto %0002a549

0002a534:
0002a53c: R30 := 0x40C6E0
0002a53e: call @__printf_chk with return %0002a540

0002a540:
0002a545: R19 := mem[R19 + 0x10, el]:u64
0002a54b: when R19 = 0 goto %0002a549
00035c81: goto %0002a50b

0002a549:
0002a552: #1279 := R31 + 0x10
0002a557: R19 := mem[#1279, el]:u64
0002a55c: R20 := mem[#1279 + 8, el]:u64
0002a563: R21 := mem[R31 + 0x20, el]:u64
0002a56a: R29 := mem[R31, el]:u64
0002a56f: R30 := mem[R31 + 8, el]:u64
0002a573: R31 := R31 + 0x30
0002a578: R0 := 0
0002a57d: R1 := 0
0002a582: R2 := 0
0002a587: R3 := 0
0002a58c: R4 := 0
0002a591: R5 := 0
0002a596: R16 := 0
0002a59b: R17 := 0
0002a5a0: call R30 with noreturn

00035c82: sub proxylist_free(proxylist_free_result)
00035efa: proxylist_free_result :: out u32 = low:32[R0]

0001d67f:
0001d683: when R0 = 0 goto %0001d681
00035c83: goto %0002a3c3

0001d681:
0001d689: R0 := 0
0001d68e: R1 := 0
0001d693: R16 := 0
0001d698: R17 := 0
0001d69d: call R30 with noreturn

0002a3c3:
0002a3c7: #1274 := R31 - 0x30
0002a3cd: mem := mem with [#1274, el]:u64 <- R29
0002a3d3: mem := mem with [#1274 + 8, el]:u64 <- R30
0002a3d7: R31 := #1274
0002a3dd: R29 := R31
0002a3e3: #1275 := R31 + 0x10
0002a3e9: mem := mem with [#1275, el]:u64 <- R19
0002a3ef: mem := mem with [#1275 + 8, el]:u64 <- R20
0002a3f5: R19 := R0
0002a3fd: mem := mem with [R31 + 0x20, el]:u64 <- R21
0002a403: R21 := pad:64[31:0[R1]]
0002a408: goto %0002a406

0002a406:
0002a40d: R20 := R19
0002a414: R19 := mem[R19 + 0x10, el]:u64
0002a41a: when 31:0[R21] = 0 goto %0002a418
00035c84: goto %0002a471

0002a471:
0002a474: goto %0002a472

0002a472:
0002a47a: R21 := mem[R20 + 8, el]:u64
0002a481: R0 := mem[R21 + 0x188, el]:u64
0002a486: R30 := 0x40C7BC
0002a488: call @freeaddrinfo with return %0002a48a

0002a48a:
0002a48e: R0 := R21
0002a493: R30 := 0x40C7C4
0002a495: call @free with return %0002a497

0002a497:
0002a49b: R0 := R20
0002a4a1: R20 := R19
0002a4a6: R30 := 0x40C7D0
0002a4a8: call @free with return %0002a4aa

0002a4aa:
0002a4ae: when R19 <> 0 goto %0002a4ac
00035c85: goto %0002a42c

0002a4ac:
0002a4b6: R19 := mem[R19 + 0x10, el]:u64
00035c86: goto %0002a472

0002a418:
0002a421: R0 := R20
0002a426: R30 := 0x40C798
0002a428: call @free with return %0002a42a

0002a42a:
0002a42e: when R19 = 0 goto %0002a42c
00035c87: goto %0002a406

0002a42c:
0002a435: #1276 := R31 + 0x10
0002a43a: R19 := mem[#1276, el]:u64
0002a43f: R20 := mem[#1276 + 8, el]:u64
0002a446: R21 := mem[R31 + 0x20, el]:u64
0002a44d: R29 := mem[R31, el]:u64
0002a452: R30 := mem[R31 + 8, el]:u64
0002a456: R31 := R31 + 0x30
0002a45b: R0 := 0
0002a460: R1 := 0
0002a465: R16 := 0
0002a46a: R17 := 0
0002a46f: call R30 with noreturn

00035c88: sub proxylist_get(proxylist_get_result)
00035efb: proxylist_get_result :: out u32 = low:32[R0]

0001d5c5:
0001d5c9: when R0 <> 0 goto %0001d5c7
00035c89: goto %0002a63d

0001d5c7:
0001d5d1: R2 := mem[R0, el]:u64
0001d5d7: #696 := ~R1
0001d5dc: #697 := R2 + ~R1
0001d5e2: VF := extend:128[#697 + 1] <> extend:128[R2] + extend:128[#696] + 1
0001d5e8: CF := pad:128[#697 + 1] <> pad:128[R2] + pad:128[#696] + 1
0001d5ec: ZF := #697 + 1 = 0
0001d5f0: NF := 63:63[#697 + 1]
0001d5f6: when ZF <> 1 goto %0001d5f4
00035c8a: goto %0002a636

0002a636:
0002a63b: R0 := mem[R0 + 8, el]:u64
00035c8b: goto %0001d602

0001d5f4:
0001d5fe: R0 := mem[R0 + 0x10, el]:u64
0001d604: when R0 = 0 goto %0001d602
00035c8c: goto %0001d5c7

0001d602:
0001d60a: R1 := 0
0001d60f: R2 := 0
0001d614: call R30 with noreturn

0002a63d:
0002a63f: goto %0001d616

0001d616:
0001d619: R0 := 0
0001d61e: R1 := 0
0001d623: R2 := 0
0001d628: call R30 with noreturn

00035c8d: sub proxylist_get_next(proxylist_get_next_result)
00035efc: proxylist_get_next_result :: out u32 = low:32[R0]

0001d62c:
0001d630: when R0 = 0 goto %0001d62e
00035c8e: goto %0002a5c9

0002a5c9:
0002a5cd: R2 := R0
0002a5d2: goto %0002a5d0

0002a5d0:
0002a5d8: R3 := mem[R2, el]:u64
0002a5de: #1280 := ~R1
0002a5e3: #1281 := R3 + ~R1
0002a5e9: VF := extend:128[#1281 + 1] <> extend:128[R3] + extend:128[#1280] +
          1
0002a5ef: CF := pad:128[#1281 + 1] <> pad:128[R3] + pad:128[#1280] + 1
0002a5f3: ZF := #1281 + 1 = 0
0002a5f7: NF := 63:63[#1281 + 1]
0002a5fd: when ZF <> 1 goto %0002a5fb
00035c8f: goto %0002a60e

0002a60e:
0002a613: R1 := mem[R2 + 0x10, el]:u64
0002a618: VF := 0
0002a61b: CF := 1
0002a61f: ZF := R1 = 0
0002a623: NF := 63:63[R1]
0002a631: when ZF goto %0002a629
0002a632: goto %0002a62d

0002a62d:
0002a62e: R0 := R1
0002a634: goto %0002a630

0002a629:
0002a62a: R0 := R0
0002a633: goto %0002a630

0002a630:
00035c90: goto %0001d62e

0002a5fb:
0002a605: R2 := mem[R2 + 0x10, el]:u64
0002a60a: when R2 = 0 goto %0001d62e
00035c91: goto %0002a5d0

0001d62e:
0001d636: R1 := 0
0001d63b: R2 := 0
0001d640: R3 := 0
0001d645: call R30 with noreturn

00035c92: sub pthread_attr_destroy(pthread_attr_destroy_result)
00035efd: pthread_attr_destroy_result :: out u32 = low:32[R0]

0002fb34:
00030bd1: R16 := 0x42F000
00030bd8: R17 := mem[R16 + 0xCA8, el]:u64
00030bde: R16 := R16 + 0xCA8
00030be3: call R17 with noreturn

00035c93: sub pthread_attr_init(pthread_attr_init_result)
00035efe: pthread_attr_init_result :: out u32 = low:32[R0]

0002fd48:
00030a5b: R16 := 0x42F000
00030a62: R17 := mem[R16 + 0xC20, el]:u64
00030a68: R16 := R16 + 0xC20
00030a6d: call R17 with noreturn

00035c94: sub pthread_attr_setdetachstate(pthread_attr_setdetachstate_result)
00035eff: pthread_attr_setdetachstate_result :: out u32 = low:32[R0]

0002fd6e:
00030c6b: R16 := 0x42F000
00030c72: R17 := mem[R16 + 0xCE0, el]:u64
00030c78: R16 := R16 + 0xCE0
00030c7d: call R17 with noreturn

00035c95: sub pthread_attr_setguardsize(pthread_attr_setguardsize_result)
00035f00: pthread_attr_setguardsize_result :: out u32 = low:32[R0]

0002fd81:
00030ebd: R16 := 0x42F000
00030ec4: R17 := mem[R16 + 0xDB8, el]:u64
00030eca: R16 := R16 + 0xDB8
00030ecf: call R17 with noreturn

00035c96: sub pthread_attr_setstacksize(pthread_attr_setstacksize_result)
00035f01: pthread_attr_setstacksize_result :: out u32 = low:32[R0]

0002fd5b:
000311eb: R16 := 0x42F000
000311f2: R17 := mem[R16 + 0xEE0, el]:u64
000311f8: R16 := R16 + 0xEE0
000311fd: call R17 with noreturn

00035c97: sub pthread_create(pthread_create_result)
00035f02: pthread_create_result :: out u32 = low:32[R0]

0002fb91:
00030faf: R16 := 0x42F000
00030fb6: R17 := mem[R16 + 0xE10, el]:u64
00030fbc: R16 := R16 + 0xE10
00030fc1: call R17 with noreturn

00035c98: sub pthread_mutex_lock(pthread_mutex_lock_result)
00035f03: pthread_mutex_lock_result :: out u32 = low:32[R0]

00022f64:
00031167: R16 := 0x42F000
0003116e: R17 := mem[R16 + 0xEB0, el]:u64
00031174: R16 := R16 + 0xEB0
00031179: call R17 with noreturn

00035c99: sub pthread_mutex_unlock(pthread_mutex_unlock_result)
00035f04: pthread_mutex_unlock_result :: out u32 = low:32[R0]

00022fa2:
0003117d: R16 := 0x42F000
00031184: R17 := mem[R16 + 0xEB8, el]:u64
0003118a: R16 := R16 + 0xEB8
0003118f: call R17 with noreturn

00035c9a: sub pthread_self(pthread_self_result)
00035f05: pthread_self_result :: out u32 = low:32[R0]

00026cca:
000310f9: R16 := 0x42F000
00031100: R17 := mem[R16 + 0xE88, el]:u64
00031106: R16 := R16 + 0xE88
0003110b: call R17 with noreturn

00035c9b: sub random(random_result)
00035f06: random_result :: out u64 = R0

00011f39:
00030c55: R16 := 0x42F000
00030c5c: R17 := mem[R16 + 0xCD8, el]:u64
00030c62: R16 := R16 + 0xCD8
00030c67: call R17 with noreturn

00035c9c: sub read(read_fd, read_buf, read_nbytes, read_result)
00035f07: read_fd :: in u32 = low:32[R0]
00035f08: read_buf :: in out u64 = R1
00035f09: read_nbytes :: in u64 = R2
00035f0a: read_result :: out u64 = R0

0001acab:
00031033: R16 := 0x42F000
0003103a: R17 := mem[R16 + 0xE40, el]:u64
00031040: R16 := R16 + 0xE40
00031045: call R17 with noreturn

00035c9d: sub realloc(realloc_ptr, realloc_size, realloc_result)
00035f0b: realloc_ptr :: in out u64 = R0
00035f0c: realloc_size :: in u64 = R1
00035f0d: realloc_result :: out u64 = R0

0001ade3:
00030cad: R16 := 0x42F000
00030cb4: R17 := mem[R16 + 0xCF8, el]:u64
00030cba: R16 := R16 + 0xCF8
00030cbf: call R17 with noreturn

00035c9e: sub recv(recv_fd, recv_buf, recv_n, recv_flags, recv_result)
00035f0e: recv_fd :: in u32 = low:32[R0]
00035f0f: recv_buf :: in out u64 = R1
00035f10: recv_n :: in u64 = R2
00035f11: recv_flags :: in u32 = low:32[R3]
00035f12: recv_result :: out u64 = R0

0001a1bf:
00030d5d: R16 := 0x42F000
00030d64: R17 := mem[R16 + 0xD38, el]:u64
00030d6a: R16 := R16 + 0xD38
00030d6f: call R17 with noreturn

00035c9f: sub register_tm_clones(register_tm_clones_result)
00035f13: register_tm_clones_result :: out u32 = low:32[R0]

0002cf78:
0002cf7b: R0 := 0x430000
0002cf81: R0 := R0 + 0x38
0002cf86: R1 := 0x430000
0002cf8c: R1 := R1 + 0x38
0002cf93: R1 := R1 + ~R0 + 1
0002cf99: R2 := pad:64[63:63[R1]]
0002cfa0: R1 := R2 + (R1 ~>> 3)
0002cfa6: R1 := extend:64[63:1[R1]]
0002cfac: when R1 = 0 goto %0002cfaa
00035ca0: goto %0002d754

0002d754:
0002d757: R2 := 0x42F000
0002d75e: R2 := mem[R2 + 0xFE8, el]:u64
0002d763: when R2 = 0 goto %0002cfaa
00035ca1: goto %0002d767

0002cfaa:
0002cfb2: call R30 with noreturn

0002d767:
0002d76b: R16 := R2
0002d770: call R16 with noreturn

00035ca2: sub reset_rr_data(reset_rr_data_result)
00035f14: reset_rr_data_result :: out u32 = low:32[R0]

0001114a:
0001114e: #20 := R31 - 0x20
00011154: mem := mem with [#20, el]:u64 <- R29
0001115a: mem := mem with [#20 + 8, el]:u64 <- R30
0001115e: R31 := #20
00011164: R29 := R31
0001116c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00011172: when R0 = 0 goto %00011170
00035ca3: goto %000114ca

00011170:
00011178: R0 := 0x42F000
0001117f: R0 := mem[R0 + 0xF18, el]:u64
00011184: R1 := 2
00011189: R2 := 0x416000
0001118f: R2 := R2 + 0xF20
00011196: R0 := mem[R0, el]:u64
0001119b: R30 := 0x40F8E4
0001119d: call @__fprintf_chk with return %0001119f

0001119f:
000111a2: R3 := 0x417000
000111a7: R1 := 0x416000
000111ac: R0 := 0x413000
000111b2: R3 := R3 + 0x3F0
000111b8: R1 := R1 + 0xF58
000111be: R0 := R0 + 0x7E0
000111c3: R2 := 0x266
000111c8: R30 := 0x40F904
000111ca: call @__assert_fail with return %00035ca4

00035ca4:
00035ca5: call @free_rr_data with noreturn

000114ca:
000114ce: R19 := R0
000114d3: R0 := 0x417000
000114d8: V0 := 0xFFFFFFFF00000000
000114df: V1 := mem[R0 + 0x3C0, el]:u128
000114e6: mem := mem with [R19, el]:u32 <- 0
000114ed: R0 := mem[R19 + 8, el]:u64
000114f5: mem := mem with [R19 + 0x20, el]:u64 <- 63:0[V0]
000114fd: mem := mem with [R19 + 0x10, el]:u128 <- V1
00011503: when R0 = 0 goto %00011501
00035ca6: goto %00011606

00011606:
00011609: R30 := 0x40F83C
0001160b: call @hlist_free with return %00011501

00011501:
0001150b: R0 := mem[R19 + 0x28, el]:u64
00011511: when R0 = 0 goto %0001150f
00035ca7: goto %000115ff

000115ff:
00011602: R30 := 0x40F848
00011604: call @free with return %0001150f

0001150f:
00011519: R0 := mem[R19 + 0x30, el]:u64
0001151f: when R0 = 0 goto %0001151d
00035ca8: goto %000115f8

000115f8:
000115fb: R30 := 0x40F854
000115fd: call @free with return %0001151d

0001151d:
00011527: R0 := mem[R19 + 0x38, el]:u64
0001152d: when R0 = 0 goto %0001152b
00035ca9: goto %000115f1

000115f1:
000115f4: R30 := 0x40F860
000115f6: call @free with return %0001152b

0001152b:
00011535: R0 := mem[R19 + 0x40, el]:u64
0001153b: when R0 = 0 goto %00011539
00035caa: goto %000115ea

000115ea:
000115ed: R30 := 0x40F86C
000115ef: call @free with return %00011539

00011539:
00011543: R0 := mem[R19 + 0x48, el]:u64
00011549: when R0 = 0 goto %00011547
00035cab: goto %000115e3

000115e3:
000115e6: R30 := 0x40F878
000115e8: call @free with return %00011547

00011547:
00011551: R0 := mem[R19 + 0x50, el]:u64
00011557: when R0 = 0 goto %00011555
00035cac: goto %000115dc

000115dc:
000115df: R30 := 0x40F884
000115e1: call @free with return %00011555

00011555:
0001155f: R0 := mem[R19 + 0x58, el]:u64
00011565: when R0 = 0 goto %00011563
00035cad: goto %000115d5

000115d5:
000115d8: R30 := 0x40F890
000115da: call @free with return %00011563

00011563:
0001156b: V0 := 0
00011571: R1 := R19 + 0x28
00011578: mem := mem with [R19 + 8, el]:u64 <- 0
0001157e: R0 := R19
00011585: R19 := mem[R31 + 0x10, el]:u64
0001158d: mem := mem with [R1, el]:u128 <- V0
00011593: mem := mem with [R1 + 0x10, el]:u128 <- V0
00011599: #28 := R1 + 0x20
0001159f: mem := mem with [#28, el]:u128 <- V0
000115a5: mem := mem with [#28 + 0x10, el]:u128 <- V0
000115ac: R29 := mem[R31, el]:u64
000115b1: R30 := mem[R31 + 8, el]:u64
000115b5: R31 := R31 + 0x20
000115ba: R1 := 0
000115bf: R2 := 0
000115c4: R3 := 0
000115c9: R16 := 0
000115ce: R17 := 0
000115d3: call R30 with noreturn

00035cae: sub scanmem(scanmem_result)
00035f15: scanmem_result :: out u32 = low:32[R0]

00011be9:
00011bed: #60 := R31 - 0x30
00011bf3: mem := mem with [#60, el]:u64 <- R29
00011bf9: mem := mem with [#60 + 8, el]:u64 <- R30
00011bfd: R31 := #60
00011c03: R29 := R31
00011c09: #61 := R31 + 0x10
00011c0f: mem := mem with [#61, el]:u64 <- R19
00011c15: mem := mem with [#61 + 8, el]:u64 <- R20
00011c1b: R19 := R0
00011c21: #62 := R31 + 0x20
00011c27: mem := mem with [#62, el]:u64 <- R21
00011c2d: mem := mem with [#62 + 8, el]:u64 <- R22
00011c33: R22 := pad:64[31:0[R1]]
00011c38: R30 := 0x41039C
00011c3a: call @strlen with return %00011c3c

00011c3c:
00011c40: when 0:0[R0] goto %00011c3e
00035caf: goto %00017b4d

00017b4d:
00017b51: R21 := pad:64[63:1[R0]]
00017b57: R20 := pad:64[0:0[R0]]
00017b5d: R0 := R21 + 1
00017b62: R30 := 0x4103B0
00017b64: call @zmalloc with return %00017b66

00017b66:
00017b69: when R21 = 0 goto %00011d10
00035cb0: goto %00017b6d

00011d10:
00011d14: R21 := R0
00011d1b: mem := mem with [R21] <- 0
00011d1f: goto %00011cb3

00017b6d:
00017b70: R5 := 0x417000
00017b76: R5 := R5 + 0x3F0
00017b7b: R6 := 7
00017b81: R3 := R19
00017b87: R5 := R5 + 0xC0
00017b8e: R6 := pad:64[31:0[R6] + ~31:0[R22] + 1]
00017b93: goto %00017b91

00017b91:
00017b99: R1 := pad:64[mem[R3 + 1]]
00017b9f: R3 := R3 + 2
00017ba6: R2 := pad:64[mem[R3 - 2]]
00017bae: R4 := pad:64[mem[R5 + (61:0[R1].0), el]:u32]
00017bb6: R2 := pad:64[mem[R5 + (61:0[R2].0), el]:u32]
00017bbd: R1 := pad:64[31:0[R2] | 31:0[R4]]
00017bc3: when ~31:31[R1] goto %00017bc1
00035cb1: goto %00017c09

00017c09:
00017c0c: R30 := 0x410408
00017c0e: call @free with return %00011c3e

00011c3e:
00011c47: #63 := R31 + 0x10
00011c4c: R19 := mem[#63, el]:u64
00011c51: R20 := mem[#63 + 8, el]:u64
00011c56: R0 := 0
00011c5c: #64 := R31 + 0x20
00011c61: R21 := mem[#64, el]:u64
00011c66: R22 := mem[#64 + 8, el]:u64
00011c6d: R29 := mem[R31, el]:u64
00011c72: R30 := mem[R31 + 8, el]:u64
00011c76: R31 := R31 + 0x30
00011c7b: R1 := 0
00011c80: R2 := 0
00011c85: R3 := 0
00011c8a: R4 := 0
00011c8f: R5 := 0
00011c94: R6 := 0
00011c99: R16 := 0
00011c9e: R17 := 0
00011ca3: call R30 with noreturn

00017bc1:
00017bcb: R2 := pad:64[31:0[R4] + (27:0[R2].0)]
00017bd2: R2 := pad:64[31:0[R2] ^ 31:0[R6]]
00017bdb: mem := mem with [R0 + R20] <- 7:0[R2]
00017be1: R20 := R20 + 1
00017be7: #340 := ~R20
00017bec: #341 := R21 + ~R20
00017bf2: VF := extend:128[#341 + 1] <> extend:128[R21] + extend:128[#340] +
          1
00017bf8: CF := pad:128[#341 + 1] <> pad:128[R21] + pad:128[#340] + 1
00017bfc: ZF := #341 + 1 = 0
00017c00: NF := 63:63[#341 + 1]
00017c05: when ZF goto %00011ca5
00035cb2: goto %00017b91

00011ca5:
00011caa: R21 := R0 + R21
00011cb1: mem := mem with [R21] <- 0
00035cb3: goto %00011cb3

00011cb3:
00011cb7: #65 := R31 + 0x10
00011cbc: R19 := mem[#65, el]:u64
00011cc1: R20 := mem[#65 + 8, el]:u64
00011cc7: #66 := R31 + 0x20
00011ccc: R21 := mem[#66, el]:u64
00011cd1: R22 := mem[#66 + 8, el]:u64
00011cd8: R29 := mem[R31, el]:u64
00011cdd: R30 := mem[R31 + 8, el]:u64
00011ce1: R31 := R31 + 0x30
00011ce6: R1 := 0
00011ceb: R2 := 0
00011cf0: R3 := 0
00011cf5: R4 := 0
00011cfa: R5 := 0
00011cff: R6 := 0
00011d04: R16 := 0
00011d09: R17 := 0
00011d0e: call R30 with noreturn

00035cb4: sub scanner_hook(scanner_hook_result)
00035f16: scanner_hook_result :: out u32 = low:32[R0]

00021764:
0002176b: R31 := R31 - 0x100
00021770: R6 := 0x42F000
00021777: R6 := mem[R6 + 0xFB8, el]:u64
0002177d: #918 := R31 + 0xA0
00021783: mem := mem with [#918, el]:u64 <- R29
00021789: mem := mem with [#918 + 8, el]:u64 <- R30
0002178f: R29 := R31 + 0xA0
00021796: R7 := pad:64[mem[R0, el]:u32]
0002179c: #919 := R31 + 0xC0
000217a2: mem := mem with [#919, el]:u64 <- R21
000217a8: mem := mem with [#919 + 8, el]:u64 <- R22
000217af: R8 := mem[R6, el]:u64
000217b7: mem := mem with [R31 + 0x98, el]:u64 <- R8
000217bc: R8 := 0
000217c4: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R3]
000217cc: mem := mem with [R31 + 0x18, el]:u64 <- R2
000217d2: when 31:0[R7] = 0 goto %000217d0
00035cb5: goto %00022e6f

00022e6f:
00022e74: R2 := pad:64[mem[R1 + 0x10, el]:u32]
00022e7c: mem := mem with [R31 + 0x20, el]:u64 <- R1
00022e82: #971 := 31:0[R2] - 0xC8
00022e87: VF := extend:64[#971] <> extend:64[31:0[R2]] - 0xC8
00022e8c: CF := pad:64[#971] <> pad:64[31:0[R2]] + 0xFFFFFF38
00022e90: ZF := #971 = 0
00022e94: NF := 31:31[#971]
00022e99: when ZF goto %00022c61
00035cb6: goto %000217d0

00022c61:
00022c65: R21 := R0
00022c6b: #965 := R31 + 0xB0
00022c71: mem := mem with [#965, el]:u64 <- R19
00022c77: mem := mem with [#965 + 8, el]:u64 <- R20
00022c7d: R19 := R4
00022c83: R20 := R5
00022c88: R30 := 0x40D8C4
00022c8a: call @http_has_body with return %00022c8c

00022c8c:
00022c90: #966 := R0 + 1
00022c95: VF := extend:128[#966] <> extend:128[R0] + 1
00022c9a: CF := pad:128[#966] <> pad:128[R0] + 1
00022c9e: ZF := #966 = 0
00022ca2: NF := 63:63[#966]
00022ca8: when ZF goto %00022ca6
00035cb7: goto %00022cd8

00022ca6:
00022cb0: R8 := mem[R31 + 0x20, el]:u64
00022cb5: R2 := 0x414000
00022cba: R1 := 0x413000
00022cc0: R2 := R2 + 0x748
00022cc6: R1 := R1 + 0x7F8
00022ccd: R0 := mem[R8 + 8, el]:u64
00022cd2: R30 := 0x40D8F0
00022cd4: call @hlist_subcmp with return %00022cd6

00022cd6:
00022cda: when 31:0[R0] <> 0 goto %00022cd8
00035cb8: goto %00022cf1

00022cf1:
00022cf6: R8 := mem[R31 + 0x20, el]:u64
00022cfb: R2 := 0x413000
00022d00: R1 := 0x413000
00022d06: R2 := R2 + 0xAF0
00022d0c: R1 := R1 + 0xBA8
00022d13: R0 := mem[R8 + 8, el]:u64
00022d18: R30 := 0x40D910
00022d1a: call @hlist_subcmp with return %00022d1c

00022d1c:
00022d1f: when 31:0[R0] = 0 goto %00022cd8
00035cb9: goto %00022d23

00022d23:
00022d28: R0 := mem[R21 + 8, el]:u64
00022d2d: R1 := 0x416000
00022d33: R1 := R1 + 0x910
00022d39: #968 := R31 + 0xD0
00022d3f: mem := mem with [#968, el]:u64 <- R23
00022d45: mem := mem with [#968 + 8, el]:u64 <- R24
00022d4b: #969 := R31 + 0xE0
00022d51: mem := mem with [#969, el]:u64 <- R25
00022d57: mem := mem with [#969 + 8, el]:u64 <- R26
00022d5d: #970 := R31 + 0xF0
00022d63: mem := mem with [#970, el]:u64 <- R27
00022d69: mem := mem with [#970 + 8, el]:u64 <- R28
00022d6e: R30 := 0x40D930
00022d70: call @hlist_get with return %00022d72

00022d72:
00022d77: R8 := mem[R31 + 0x20, el]:u64
00022d7d: when R0 = 0 goto %00022d7b
00035cba: goto %00022d8c

00022d7b:
00022d83: R24 := 0x42F000
00022d8a: R24 := mem[R24 + 0xF30, el]:u64
00035cbb: goto %0002221f

00022d8c:
00022d92: mem := mem with [R31 + 0x20, el]:u64 <- R8
00022d97: R30 := 0x40D940
00022d99: call @strdup with return %00022d9b

00022d9b:
00022d9e: R30 := 0x40D944
00022da0: call @lowercase with return %00022da2

00022da2:
00022da5: R26 := 0x416000
00022daa: R1 := 0x42F000
00022db1: R1 := mem[R1 + 0xFF8, el]:u64
00022db7: R25 := R0
00022dbe: R8 := mem[R31 + 0x20, el]:u64
00022dc4: R26 := R26 + 0x920
00022dcb: R27 := mem[R1, el]:u64
00022dd1: R22 := R8
00022dd6: R24 := 0x42F000
00022ddd: R24 := mem[R24 + 0xF30, el]:u64
00022de3: when R27 <> 0 goto %00022de1
00035cbc: goto %00022e6b

00022de1:
00022deb: R0 := mem[R27 + 8, el]:u64
00022df0: R30 := 0x40D9A0
00022df2: call @strdup with return %00022df4

00022df4:
00022df7: R30 := 0x40D9A4
00022df9: call @lowercase with return %00022dfb

00022dfb:
00022dff: R23 := R0
00022e06: R1 := pad:64[mem[R24, el]:u32]
00022e0c: when 31:0[R1] = 0 goto %00022e0a
00035cbd: goto %00022e49

00022e49:
00022e4d: R3 := R0
00022e53: R2 := R25
00022e59: R1 := R26
00022e5e: R0 := 2
00022e63: R30 := 0x40D9C4
00022e65: call @__printf_chk with return %00022e67

00022e67:
00022e69: goto %00022e0a

00022e0a:
00022e13: R1 := R25
00022e19: R0 := R23
00022e1e: R2 := 0
00022e23: R30 := 0x40D984
00022e25: call @fnmatch with return %00022e27

00022e27:
00022e2a: when 31:0[R0] = 0 goto %00022a33
00035cbe: goto %00022e2e

00022a33:
00022a38: R0 := pad:64[mem[R24, el]:u32]
00022a3e: R8 := R22
00022a44: when 31:0[R0] <> 0 goto %00022a42
00035cbf: goto %00022a6e

00022a42:
00022a4a: R1 := 0x416000
00022a4f: R0 := 2
00022a55: R1 := R1 + 0x950
00022a5d: mem := mem with [R31 + 0x20, el]:u64 <- R22
00022a62: R30 := 0x40E288
00022a64: call @__printf_chk with return %00022a66

00022a66:
00022a6b: R8 := mem[R31 + 0x20, el]:u64
00022a70: goto %00022a6e

00022a6e:
00022a75: R0 := R23
00022a7d: mem := mem with [R31 + 0x20, el]:u64 <- R8
00022a82: R30 := 0x40DED0
00022a84: call @free with return %00022a86

00022a86:
00022a89: R20 := 0
00022a90: R8 := mem[R31 + 0x20, el]:u64
00035cc0: goto %000221ff

00022e2e:
00022e32: R0 := R23
00022e37: R30 := 0x40D990
00022e39: call @free with return %00022e3b

00022e3b:
00022e40: R27 := mem[R27 + 0x10, el]:u64
00022e45: when R27 = 0 goto %000221f8
00035cc1: goto %00022de1

000221f8:
000221fc: R8 := R22
00022201: goto %000221ff

00022e6b:
00022e6d: goto %000221ff

000221ff:
00022206: R0 := R25
0002220e: mem := mem with [R31 + 0x20, el]:u64 <- R8
00022213: R30 := 0x40DEE4
00022215: call @free with return %00022217

00022217:
0002221c: R8 := mem[R31 + 0x20, el]:u64
00022221: goto %0002221f

0002221f:
00022225: R0 := 0x1000
0002222d: mem := mem with [R31 + 0x20, el]:u64 <- R8
00022232: R30 := 0x40D9DC
00022234: call @zmalloc with return %00022236

00022236:
0002223b: R8 := mem[R31 + 0x20, el]:u64
00022240: R27 := 0x416000
00022246: R28 := R27 + 0x970
0002224c: R23 := R0
00022251: R27 := 0
00022257: R22 := R8
0002225f: mem := mem with [R31 + 0x20, el]:u64 <- R28
00022265: R28 := pad:64[31:0[R27]]
0002226a: R25 := 0x1000
0002226f: R26 := 0xFFF
00035cc2: goto %00022273

00022273:
00022277: R3 := extend:64[31:0[R28]]
0002227e: R0 := pad:64[mem[R19, el]:u32]
00022284: #948 := R3 - 0x1000
00022289: VF := extend:128[#948] <> extend:128[R3] - 0x1000
0002228e: CF := pad:128[#948] <> pad:128[R3] + 0xFFFFFFFFFFFFF000
00022292: ZF := #948 = 0
00022296: NF := 63:63[#948]
0002229d: R2 := pad:64[31:0[R26] + ~31:0[R28] + 1]
000222ab: when CF goto %000222a3
000222ac: goto %000222a7

000222a7:
000222a8: R5 := R25
000222ae: goto %000222aa

000222a3:
000222a4: R5 := R3
000222ad: goto %000222aa

000222aa:
000222b5: R1 := R23 + R3
000222bb: R2 := extend:64[31:0[R2]]
000222c2: R3 := R5 + ~R3 + 1
000222c7: R30 := 0x40DA2C
000222c9: call @__read_chk with return %000222cb

000222cb:
000222cf: R27 := R0
000222d6: R1 := pad:64[mem[R24, el]:u32]
000222db: when 31:0[R1] <> 0 goto %00021980
00035cc3: goto %000219a1

00021980:
00021985: R1 := mem[R31 + 0x20, el]:u64
0002198b: R2 := pad:64[31:0[R0]]
00021992: R3 := pad:64[31:0[R25] + ~31:0[R28] + 1]
00021997: R0 := 2
0002199c: R30 := 0x40DE4C
0002199e: call @__printf_chk with return %000219a0

000219a0:
000219a3: goto %000219a1

000219a1:
000219a7: VF := 0
000219aa: CF := 1
000219ae: ZF := 31:0[R27] = 0
000219b2: NF := 31:31[R27]
000219ba: when ~(NF = VF & ~ZF) goto %000219b8
00035cc4: goto %00022b6f

00022b6f:
00022b74: R28 := pad:64[31:0[R28] + 31:0[R27]]
00022b7a: #962 := 31:0[R28] - 0xFFE
00022b7f: VF := extend:64[#962] <> extend:64[31:0[R28]] - 0xFFE
00022b84: CF := pad:64[#962] <> pad:64[31:0[R28]] + 0xFFFFF002
00022b88: ZF := #962 = 0
00022b8c: NF := 31:31[#962]
00022b93: when ~(NF = VF & ~ZF) goto %00022273
00035cc5: goto %00022b97

00022b97:
00035cc6: goto %000219b8

000219b8:
000219c1: R0 := R23
000219c6: R1 := 0x416000
000219cc: R1 := R1 + 0x990
000219d4: mem := mem with [R31 + 0x20, el]:u64 <- R22
000219d9: R30 := 0x40DA64
000219db: call @strstr with return %000219dd

000219dd:
000219e1: R27 := pad:64[31:0[R28]]
000219e7: R8 := R22
000219ed: when R0 = 0 goto %000219eb
00035cc7: goto %00022a92

00022a92:
00022a96: R0 := R23
00022a9b: R1 := 0x416000
00022aa1: R1 := R1 + 0x9B8
00022aa6: R30 := 0x40DA80
00022aa8: call @strstr with return %00022aaa

00022aaa:
00022aae: R8 := R22
00022ab3: when R0 = 0 goto %000219eb
00035cc8: goto %00022ab7

00022ab7:
00022aba: R1 := 0x22
00022ac2: mem := mem with [R31 + 0x20, el]:u64 <- R22
00022ac7: R30 := 0x40DA94
00022ac9: call @strchr with return %00022acb

00022acb:
00022acf: R26 := R0
00022ad6: R8 := mem[R31 + 0x20, el]:u64
00022adb: when R0 = 0 goto %000219eb
00035cc9: goto %00022adf

00022adf:
00022ae3: R25 := R0 + 1
00022ae9: R0 := R25
00022aee: R30 := 0x40DAAC
00022af0: call @strlen with return %00022af2

00022af2:
00022af7: R8 := mem[R31 + 0x20, el]:u64
00022afc: R2 := 0
00022b03: R3 := pad:64[mem[R26 + 1]]
00022b08: R1 := 0
00022b0e: when R0 <> 0 goto %00022b0c
00035cca: goto %00022b6b

00022b0c:
00022b17: R1 := pad:64[mem[R25 + R1]]
00022b1d: #959 := 31:0[R1] - 0x22
00022b22: VF := extend:64[#959] <> extend:64[31:0[R1]] - 0x22
00022b27: CF := pad:64[#959] <> pad:64[31:0[R1]] + 0xFFFFFFDE
00022b2b: ZF := #959 = 0
00022b2f: NF := 31:31[#959]
00022b35: when ZF <> 1 goto %00022b33
00035ccb: goto %00022029

00022b33:
00022b3c: R2 := pad:64[31:0[R2] + 1]
00022b42: R1 := extend:64[31:0[R2]]
00022b48: #960 := ~R0
00022b4d: #961 := R1 + ~R0
00022b53: VF := extend:128[#961 + 1] <> extend:128[R1] + extend:128[#960] + 1
00022b59: CF := pad:128[#961 + 1] <> pad:128[R1] + pad:128[#960] + 1
00022b5d: ZF := #961 + 1 = 0
00022b61: NF := 63:63[#961 + 1]
00022b67: when NF = VF goto %00022007
00035ccc: goto %00022b0c

00022007:
0002200d: R3 := pad:64[mem[R25 + extend:64[31:0[R2]]]]
00035ccd: goto %0002200f

00022b6b:
00022b6d: goto %0002200f

0002200f:
00022013: #944 := 31:0[R3] - 0x22
00022018: VF := extend:64[#944] <> extend:64[31:0[R3]] - 0x22
0002201d: CF := pad:64[#944] <> pad:64[31:0[R3]] + 0xFFFFFFDE
00022021: ZF := #944 = 0
00022025: NF := 31:31[#944]
0002202b: when ZF goto %00022029
00035cce: goto %00022151

00022151:
00022156: R0 := pad:64[mem[R24, el]:u32]
0002215c: when 31:0[R0] <> 0 goto %0002215a
00035ccf: goto %00022185

0002215a:
00022162: R1 := 0x416000
00022167: R0 := 2
0002216d: R1 := R1 + 0xC58
00022175: mem := mem with [R31 + 0x18, el]:u64 <- R8
0002217a: R30 := 0x40E22C
0002217c: call @__printf_chk with return %0002217e

0002217e:
00022183: R8 := mem[R31 + 0x18, el]:u64
00035cd0: goto %000219eb

000219eb:
000219f3: R22 := 1
000219f7: goto %0002191a

00022185:
00022188: R22 := 1
0002218d: when 31:0[R27] = 0 goto %0002192a
00035cd1: goto %00022191

00022191:
00022194: goto %00022192

00022029:
00022031: R1 := 0
00022037: R0 := R25
0002203f: mem := mem with [R31 + 0x20, el]:u64 <- R8
00022044: R30 := 0x40DAF0
00022046: call @substr with return %00022048

00022048:
0002204d: R1 := pad:64[mem[R24, el]:u32]
00022053: R28 := R0
0002205a: R8 := mem[R31 + 0x20, el]:u64
00022060: when 31:0[R1] = 0 goto %0002205e
00035cd2: goto %0002212d

0002212d:
00022131: R2 := R0
00022136: R1 := 0x416000
0002213b: R0 := 2
00022141: R1 := R1 + 0x9D0
00022146: R30 := 0x40DB14
00022148: call @__printf_chk with return %0002214a

0002214a:
0002214f: R8 := mem[R31 + 0x20, el]:u64
00035cd3: goto %0002205e

0002205e:
00022066: R1 := 0x1000
0002206b: R0 := 0x1000
00022073: mem := mem with [R31 + 0x30, el]:u64 <- R8
0002207b: mem := mem with [R31 + 0x78, el]:u32 <- 31:0[R1]
00022080: R30 := 0x40DB2C
00022082: call @zmalloc with return %00022084

00022084:
00022088: R1 := R31 + 0x78
00022090: mem := mem with [R31 + 0x20, el]:u64 <- R1
00022096: R1 := R31 + 0x80
0002209e: mem := mem with [R31 + 0x28, el]:u64 <- R1
000220a3: R1 := 0x416000
000220a9: R1 := R1 + 0x9F0
000220b1: mem := mem with [R31 + 0x38, el]:u64 <- R1
000220b6: R1 := 0x416000
000220bc: R1 := R1 + 0xA30
000220c1: R3 := 0x1000
000220c8: R8 := mem[R31 + 0x30, el]:u64
000220ce: R26 := R3
000220d4: R22 := R3
000220dc: mem := mem with [R31 + 0x30, el]:u64 <- R20
000220e4: mem := mem with [R31 + 0x48, el]:u64 <- R1
000220e9: R1 := 0
000220ef: R20 := R1
000220f5: #945 := R31 + 0x40
000220fb: mem := mem with [#945, el]:u32 <- 31:0[R3]
00022100: mem := mem with [#945 + 4, el]:u32 <- 0
00022106: #946 := R31 + 0x50
0002210b: mem := mem with [#946, el]:u64 <- 0
00022111: mem := mem with [#946 + 8, el]:u64 <- R21
00022117: #947 := R31 + 0x60
0002211d: mem := mem with [#947, el]:u64 <- R28
00022123: mem := mem with [#947 + 8, el]:u64 <- R8
0002212b: mem := mem with [R31 + 0x80, el]:u64 <- R0
00035cd4: goto %00021ac1

00021ac1:
00021aca: #937 := R31 + 0x20
00021acf: R2 := mem[#937, el]:u64
00021ad4: R1 := mem[#937 + 8, el]:u64
00021adb: R0 := pad:64[mem[R19, el]:u32]
00021ae0: R30 := 0x40DB8C
00021ae2: call @so_recvln with return %00021ae4

00021ae4:
00021ae8: R21 := pad:64[31:0[R0]]
00021aef: R25 := mem[R31 + 0x80, el]:u64
00021af5: R0 := R25
00021afa: R30 := 0x40DB9C
00021afc: call @strlen with return %00021afe

00021afe:
00021b02: R28 := R0
00021b09: R0 := R0 + extend:64[31:0[R27]]
00021b0f: #938 := ~R26
00021b14: #939 := R0 + ~R26
00021b1a: VF := extend:128[#939 + 1] <> extend:128[R0] + extend:128[#938] + 1
00021b20: CF := pad:128[#939 + 1] <> pad:128[R0] + pad:128[#938] + 1
00021b24: ZF := #939 + 1 = 0
00021b28: NF := 63:63[#939 + 1]
00021b2f: when NF = VF goto %00021b2d
00035cd5: goto %00022947

00021b2d:
00021b37: R0 := pad:64[mem[R31 + 0x40, el]:u32]
00021b3d: R0 := pad:64[30:0[R0].0]
00021b43: R26 := extend:64[31:0[R0]]
00021b49: R0 := R23
00021b4f: R1 := R26
00021b57: mem := mem with [R31 + 0x40, el]:u32 <- 31:0[R26]
00021b5c: R30 := 0x40DEA8
00021b5e: call @realloc with return %00021b60

00021b60:
00021b64: when R0 = 0 goto %00021b62
00035cd6: goto %0002293a

0002293a:
0002293e: R23 := R0
00022944: R22 := R26
00022949: goto %00022947

00022947:
0002294e: R1 := R25
00022954: R3 := R22
0002295a: R2 := R26
00022960: R0 := R23
00022967: R27 := pad:64[31:0[R27] + 31:0[R28]]
0002296c: R30 := 0x40DBC4
0002296f: call @__strlcat_chk with return %00022971

00022971:
00022974: when 31:31[R21] goto %00021b62
00035cd7: goto %00022978

00021b62:
00021b6b: #940 := R31 + 0x60
00021b70: R28 := mem[#940, el]:u64
00021b75: R8 := mem[#940 + 8, el]:u64
00021b7c: R20 := mem[R31 + 0x80, el]:u64
00021b80: goto %000218e7

00022978:
0002297d: R1 := mem[R31 + 0x38, el]:u64
00022984: R25 := mem[R31 + 0x80, el]:u64
0002298a: R0 := R25
0002298f: R30 := 0x40DBD8
00022991: call @strstr with return %00022993

00022993:
00022997: R28 := R0
0002299d: when R0 = 0 goto %0002299b
00035cd8: goto %00022a0a

00022a0a:
00022a0d: R30 := 0x40DBE4
00022a0f: call @__ctype_b_loc with return %00022a11

00022a11:
00022a16: R0 := mem[R0, el]:u64
00022a1d: R1 := pad:64[mem[R28 + 0xB]]
00022a25: R0 := pad:64[mem[R0 + (62:0[R1].0), el]:u16]
00022a2a: when ~11:11[R0] goto %0002299b
00035cd9: goto %00022a2e

0002299b:
000229a4: R0 := R25
000229a9: R1 := 0x416000
000229af: R1 := R1 + 0xA00
000229b4: R30 := 0x40DE60
000229b6: call @strstr with return %000229b8

000229b8:
000229bc: R28 := R0
000229c2: when R0 = 0 goto %000229c0
00035cda: goto %000229d3

000229d3:
000229d6: R30 := 0x40DE6C
000229d8: call @__ctype_b_loc with return %000229da

000229da:
000229df: R0 := mem[R0, el]:u64
000229e6: R1 := pad:64[mem[R28 + 0x11]]
000229eb: R28 := 1
000229f3: R0 := pad:64[mem[R0 + (62:0[R1].0), el]:u16]
000229f9: when 11:11[R0] goto %000229f7
00035cdb: goto %000229c0

000229c0:
000229c8: R28 := 0
000229cd: R0 := 1
000229d1: goto %00021a93

00022a2e:
00022a31: R28 := 0
00035cdc: goto %000229f7

000229f7:
00022a01: R0 := pad:64[mem[R24, el]:u32]
00022a06: when 31:0[R0] <> 0 goto %0002255e
00035cdd: goto %00022583

0002255e:
00022562: R2 := R25
00022567: R1 := 0x416000
0002256c: R0 := 2
00022572: R1 := R1 + 0xA18
00022577: R30 := 0x40E190
00022579: call @__printf_chk with return %0002257b

0002257b:
00022580: R25 := mem[R31 + 0x80, el]:u64
00022585: goto %00022583

00022583:
0002258b: R1 := mem[R31 + 0x48, el]:u64
00022591: R0 := R25
00022596: R30 := 0x40DC0C
00022598: call @strstr with return %0002259a

0002259a:
0002259d: when R0 = 0 goto %000222df
00035cde: goto %000225a1

000222df:
000222e4: R0 := pad:64[mem[R31 + 0x44, el]:u32]
000222ea: when 31:0[R0] <> 0 goto %000222e8
00035cdf: goto %000224e5

000224e5:
000224ea: R0 := pad:64[mem[R24, el]:u32]
000224f0: R2 := pad:64[31:0[R28]]
000224f8: mem := mem with [R31 + 0x20, el]:u64 <- R20
000224fe: #953 := R31 + 0x58
00022503: R21 := mem[#953, el]:u64
00022508: R28 := mem[#953 + 8, el]:u64
0002250f: R8 := mem[R31 + 0x68, el]:u64
00022515: when 31:0[R0] = 0 goto %00022513
00035ce0: goto %0002251e

0002251e:
00022521: R1 := 0x416000
00022526: R0 := 2
0002252c: R1 := R1 + 0xAC0
00022534: mem := mem with [R31 + 0x28, el]:u32 <- 31:0[R2]
0002253c: mem := mem with [R31 + 0x30, el]:u64 <- R8
00022541: R30 := 0x40DF24
00022543: call @__printf_chk with return %00022545

00022545:
0002254a: R8 := mem[R31 + 0x30, el]:u64
00022551: R25 := mem[R31 + 0x80, el]:u64
00022558: R2 := pad:64[mem[R31 + 0x28, el]:u32]
0002255c: goto %00022513

000225a1:
000225a4: R1 := 0
000225aa: R0 := R0 + 0x10
000225af: R2 := 0xA
000225b4: R30 := 0x40DC20
000225b6: call @strtol with return %000225b8

000225b8:
000225bd: R1 := pad:64[mem[R24, el]:u32]
000225c3: R20 := R0
000225c9: when 31:0[R1] = 0 goto %000225c7
00035ce1: goto %000226f1

000226f1:
000226f4: VF := 0
000226f7: CF := 1
000226fb: ZF := R0 = 0
000226ff: NF := 63:63[R0]
00022706: when ~(NF = VF & ~ZF) goto %00021872
00035ce2: goto %0002270a

0002270a:
0002270f: R3 := mem[R31 + 0x30, el]:u64
00022715: R2 := extend:64[63:10[R0]]
0002271a: R1 := 0x416000
0002271f: R0 := 2
00022725: R1 := R1 + 0xA48
0002272a: R30 := 0x40DC4C
0002272c: call @__printf_chk with return %000225c7

000225c7:
000225d1: R0 := mem[R31 + 0x30, el]:u64
000225d7: when R0 = 0 goto %000225d5
00035ce3: goto %00022650

00022650:
00022654: #954 := R0 - 1
00022659: VF := extend:128[#954] <> extend:128[R0] - 1
0002265e: CF := pad:128[#954] <> pad:128[R0] + 0xFFFFFFFFFFFFFFFF
00022662: ZF := #954 = 0
00022666: NF := 63:63[#954]
0002266c: when ZF goto %0002266a
00035ce4: goto %0002269b

0002269b:
000226a0: R1 := mem[R31 + 0x30, el]:u64
000226a5: VF := 0
000226a8: CF := 1
000226ac: ZF := R20 = 0
000226b0: NF := 63:63[R20]
000226b6: R0 := R20 + 0x3FF
000226c5: when NF <> VF goto %000226bd
000226c6: goto %000226c1

000226c1:
000226c2: R0 := R20
000226c8: goto %000226c4

000226bd:
000226be: R0 := R0
000226c7: goto %000226c4

000226c4:
000226ce: #956 := R0 ~>> 0xA
000226d3: #957 := R1 + ~(R0 ~>> 0xA)
000226d9: VF := extend:128[#957 + 1] <> extend:128[R1] + extend:128[~#956] +
          1
000226df: CF := pad:128[#957 + 1] <> pad:128[R1] + pad:128[~#956] + 1
000226e3: ZF := #957 + 1 = 0
000226e7: NF := 63:63[#957 + 1]
000226ed: when NF <> VF goto %0002266a
00035ce5: goto %000225d5

000225d5:
000225dd: R0 := 0x32
000225e2: R30 := 0x40DC7C
000225e4: call @zmalloc with return %000225e6

000225e6:
000225eb: R1 := mem[R31 + 0x58, el]:u64
000225f0: R3 := 0x32
000225f5: R4 := 0x416000
000225fb: R4 := R4 + 0xAB0
00022600: R2 := 2
00022606: R25 := R0
0002260d: R5 := mem[R1 + 0x48, el]:u64
00022613: R1 := R3
00022618: R30 := 0x40DCA0
0002261a: call @__snprintf_chk with return %0002261c

0002261c:
00022620: R0 := R25
00022625: R30 := 0x40DCA8
00022627: call @strlen with return %00022629

00022629:
0002262d: R2 := R0
00022634: R0 := pad:64[mem[R31 + 0x14, el]:u32]
0002263a: R1 := R25
0002263f: R30 := 0x40DCB8
00022641: call @write_wrapper with return %00022643

00022643:
00022647: R0 := R25
0002264c: R30 := 0x40DCC0
0002264e: call @free with return %000222e8

000222e8:
000222f2: R1 := mem[R31 + 0x30, el]:u64
000222f7: VF := 0
000222fa: CF := 1
000222fe: ZF := R20 = 0
00022302: NF := 63:63[R20]
0002230e: when ZF <> 1 goto %00022307
0002230f: goto %0002230a

0002230a:
0002230b: R0 := 1
00022311: goto %0002230d

00022307:
00022308: R0 := 0
00022310: goto %0002230d

0002230d:
00022316: VF := 0
00022319: CF := 1
0002231d: ZF := R1 = 0
00022321: NF := 63:63[R1]
0002232d: when ZF goto %00022326
0002232e: goto %00022329

00022329:
0002232a: R1 := 1
00022330: goto %0002232c

00022326:
00022327: R1 := 0
0002232f: goto %0002232c

0002232c:
00022337: R7 := pad:64[31:0[R0] & 31:0[R1]]
0002233d: when 31:0[R28] = 0 goto %0002233b
00035ce6: goto %000224de

0002233b:
00022343: R0 := 0x32
0002234b: mem := mem with [R31 + 0x44, el]:u32 <- 31:0[R7]
00022350: R30 := 0x40E1A4
00022352: call @zmalloc with return %00022354

00022354:
00022358: R25 := R0
0002235f: R3 := mem[R31 + 0x80, el]:u64
00022364: R2 := 0xA
00022369: R1 := 0
0002236f: R0 := R3 + 0xC
00022374: R30 := 0x40E1BC
00022376: call @strtol with return %00022378

00022378:
0002237c: R5 := R0
00022381: R3 := 0x32
00022387: R6 := R20
0002238d: R1 := R3
00022392: R4 := 0x416000
00022398: R4 := R4 + 0xB00
0002239d: R2 := 2
000223a3: R0 := R25
000223ab: mem := mem with [R31 + 0x50, el]:u64 <- R5
000223b0: R30 := 0x40E1E4
000223b2: call @__snprintf_chk with return %000223b4

000223b4:
000223b8: R0 := R25
000223bd: R30 := 0x40E1EC
000223bf: call @strlen with return %000223c1

000223c1:
000223c5: R2 := R0
000223cc: R0 := pad:64[mem[R31 + 0x14, el]:u32]
000223d2: R1 := R25
000223d7: R30 := 0x40E1FC
000223d9: call @write_wrapper with return %000223db

000223db:
000223df: R0 := R25
000223e4: R30 := 0x40E204
000223e6: call @free with return %000223e8

000223e8:
000223ed: R7 := pad:64[mem[R31 + 0x44, el]:u32]
000223f3: when 31:0[R7] <> 0 goto %000223f1
00035ce7: goto %000224cd

000224cd:
000224d0: R0 := 1
000224d8: mem := mem with [R31 + 0x44, el]:u32 <- 31:0[R0]
000224dc: goto %00021a93

000224de:
000224e1: when 31:0[R7] = 0 goto %00021b82
00035ce8: goto %000223f1

00021b82:
00021b87: R8 := mem[R31 + 0x68, el]:u64
00021b8d: R2 := pad:64[31:0[R28]]
00021b93: #941 := R31 + 0x58
00021b98: R21 := mem[#941, el]:u64
00021b9d: R28 := mem[#941 + 8, el]:u64
00021ba5: mem := mem with [R31 + 0x20, el]:u64 <- R20
00021bac: R20 := mem[R31 + 0x80, el]:u64
00021bb4: mem := mem with [R31 + 0x44, el]:u32 <- 31:0[R2]
00021bb9: goto %00021bb7

000223f1:
000223fb: R0 := mem[R31 + 0x30, el]:u64
00022401: #949 := R0 - 1
00022406: VF := extend:128[#949] <> extend:128[R0] - 1
0002240b: CF := pad:128[#949] <> pad:128[R0] + 0xFFFFFFFFFFFFFFFF
0002240f: ZF := #949 = 0
00022413: NF := 63:63[#949]
00022418: when ZF goto %00021a78
00035ce9: goto %0002241c

00021a78:
00021a7d: R1 := pad:64[mem[R31 + 0x30, el]:u32]
00021a83: R0 := pad:64[31:0[R28] ^ 1]
00021a88: R20 := 0
00021a90: mem := mem with [R31 + 0x44, el]:u32 <- 31:0[R1]
00021a95: goto %00021a93

0002241c:
00022421: R1 := mem[R31 + 0x50, el]:u64
00022426: VF := 0
00022429: CF := 1
0002242d: ZF := R1 = 0
00022431: NF := 63:63[R1]
00022437: R0 := R1 + 0x3FF
00022446: when NF <> VF goto %0002243e
00022447: goto %00022442

00022442:
00022443: R0 := R1
00022449: goto %00022445

0002243e:
0002243f: R0 := R0
00022448: goto %00022445

00022445:
00022450: R1 := mem[R31 + 0x30, el]:u64
00022456: #950 := R0 ~>> 0xA
0002245b: #951 := R1 + ~(R0 ~>> 0xA)
00022461: VF := extend:128[#951 + 1] <> extend:128[R1] + extend:128[~#950] +
          1
00022467: CF := pad:128[#951 + 1] <> pad:128[R1] + pad:128[~#950] + 1
0002246b: ZF := #951 + 1 = 0
0002246f: NF := 63:63[#951 + 1]
00022476: when NF <> VF goto %00022474
00035cea: goto %000224b5

00022474:
0002247e: R8 := mem[R31 + 0x68, el]:u64
00022484: R5 := pad:64[31:0[R28]]
0002248a: #952 := R31 + 0x58
0002248f: R21 := mem[#952, el]:u64
00022494: R28 := mem[#952 + 8, el]:u64
00022499: R0 := 1
000224a0: R25 := mem[R31 + 0x80, el]:u64
000224a7: mem := mem with [R31 + 0x20, el]:u64 <- 0
000224af: mem := mem with [R31 + 0x44, el]:u32 <- 31:0[R0]
000224b3: goto %000218dc

000224b5:
000224b9: R0 := pad:64[31:0[R28] ^ 1]
000224be: R1 := 1
000224c3: R20 := 0
000224cb: mem := mem with [R31 + 0x44, el]:u32 <- 31:0[R1]
00035ceb: goto %00021a93

00021a93:
00021a99: VF := 0
00021a9c: CF := 1
00021aa0: ZF := 31:0[R21] = 0
00021aa4: NF := 31:31[R21]
00021aac: #936 := NF = VF & ~ZF
00021aaf: VF := 0
00021ab3: CF := #936
00021ab8: ZF := 31:0[R0] = 0 | ~#936
00021abd: NF := #936 & 31:31[R0]
00021ac3: when ZF <> 1 goto %00021ac1
00035cec: goto %0002266a

0002266a:
00022673: R2 := pad:64[31:0[R28]]
0002267b: mem := mem with [R31 + 0x20, el]:u64 <- R20
00022681: #955 := R31 + 0x58
00022686: R21 := mem[#955, el]:u64
0002268b: R28 := mem[#955 + 8, el]:u64
00022692: R8 := mem[R31 + 0x68, el]:u64
00022699: R25 := mem[R31 + 0x80, el]:u64
00035ced: goto %00022513

00022513:
0002251c: R5 := pad:64[31:0[R2]]
00035cee: goto %000218dc

00022cd8:
00022ce1: #967 := R31 + 0xB0
00022ce6: R19 := mem[#967, el]:u64
00022ceb: R20 := mem[#967 + 8, el]:u64
00022cef: goto %000217d0

000217d0:
000217d8: R22 := 3
00035cef: goto %000217da

000217da:
000217dd: R0 := 0x42F000
000217e4: R0 := mem[R0 + 0xFB8, el]:u64
000217eb: R2 := mem[R31 + 0x98, el]:u64
000217f2: R1 := mem[R0, el]:u64
000217f8: #920 := ~R1
000217fd: #921 := R2 + ~R1
00021803: VF := extend:128[#921 + 1] <> extend:128[R2] + extend:128[#920] + 1
00021809: CF := pad:128[#921 + 1] <> pad:128[R2] + pad:128[#920] + 1
0002180d: ZF := #921 + 1 = 0
00021811: NF := 63:63[#921 + 1]
00021815: R2 := #921 + 1
0002181a: R1 := 0
00021820: when ZF <> 1 goto %0002181e
00035cf0: goto %00022bfe

0002181e:
00021827: #922 := R31 + 0xB0
0002182d: mem := mem with [#922, el]:u64 <- R19
00021833: mem := mem with [#922 + 8, el]:u64 <- R20
00021839: #923 := R31 + 0xD0
0002183f: mem := mem with [#923, el]:u64 <- R23
00021845: mem := mem with [#923 + 8, el]:u64 <- R24
0002184b: #924 := R31 + 0xE0
00021851: mem := mem with [#924, el]:u64 <- R25
00021857: mem := mem with [#924 + 8, el]:u64 <- R26
0002185d: #925 := R31 + 0xF0
00021863: mem := mem with [#925, el]:u64 <- R27
00021869: mem := mem with [#925 + 8, el]:u64 <- R28
0002186e: R30 := 0x40E2E0
00021870: call @__stack_chk_fail with return %00021872

00021872:
00021877: R8 := mem[R31 + 0x68, el]:u64
0002187d: R2 := pad:64[31:0[R28]]
00021883: #926 := R31 + 0x58
00021888: R21 := mem[#926, el]:u64
0002188d: R28 := mem[#926 + 8, el]:u64
00021892: R1 := 0x416000
00021897: R0 := 2
0002189d: R1 := R1 + 0xA80
000218a3: #927 := R31 + 0x20
000218a9: mem := mem with [#927, el]:u64 <- R20
000218af: mem := mem with [#927 + 8, el]:u64 <- R8
000218b7: mem := mem with [R31 + 0x30, el]:u32 <- 31:0[R2]
000218bc: R30 := 0x40E304
000218be: call @__printf_chk with return %000218c0

000218c0:
000218c5: R2 := pad:64[mem[R31 + 0x30, el]:u32]
000218cc: R8 := mem[R31 + 0x28, el]:u64
000218d2: R5 := pad:64[31:0[R2]]
000218d9: R25 := mem[R31 + 0x80, el]:u64
000218de: goto %000218dc

000218dc:
000218e3: R20 := R25
000218e9: when 31:0[R5] = 0 goto %000218e7
00035cf1: goto %00021bb7

00021bb7:
00021bbe: R0 := R20
00021bc3: R1 := 0x416000
00021bc9: R1 := R1 + 0xB20
00021bd1: mem := mem with [R31 + 0x28, el]:u64 <- R8
00021bd6: R30 := 0x40DD58
00021bd8: call @strstr with return %00021bda

00021bda:
00021bde: #942 := R0 + 3
00021be3: VF := extend:128[#942] <> extend:128[R0] + 3
00021be8: CF := pad:128[#942] <> pad:128[R0] + 3
00021bec: ZF := #942 = 0
00021bf0: NF := 63:63[#942]
00021bf4: R22 := #942
00021bfb: R8 := mem[R31 + 0x28, el]:u64
00021c00: when ZF goto %000218e7
00035cf2: goto %00021c04

00021c04:
00021c08: R0 := R22
00021c0d: R1 := 0x22
00021c15: mem := mem with [R31 + 0x28, el]:u64 <- R8
00021c1a: R30 := 0x40DD74
00021c1c: call @strchr with return %00021c1e

00021c1e:
00021c23: R2 := R0 + ~R22 + 1
00021c2a: R8 := mem[R31 + 0x28, el]:u64
00021c2f: VF := 0
00021c32: CF := 1
00021c36: ZF := R2 = 0
00021c3a: NF := 63:63[R2]
00021c42: when NF = VF & ~ZF goto %00021c40
00035cf3: goto %000218e7

00021c40:
00021c48: R1 := 0
00021c4e: R0 := R22
00021c53: R30 := 0x40DF48
00021c55: call @substr with return %00021c57

00021c57:
00021c5b: R20 := R0
00021c60: R30 := 0x40DF50
00021c62: call @urlencode with return %00021c64

00021c64:
00021c68: R26 := R0
00021c6e: R0 := R20
00021c73: R30 := 0x40DF5C
00021c75: call @free with return %00021c77

00021c77:
00021c7c: R0 := mem[R21 + 0x30, el]:u64
00021c81: R30 := 0x40DF64
00021c83: call @urlencode with return %00021c85

00021c85:
00021c89: R25 := R0
00021c8e: R0 := 0x1000
00021c93: R30 := 0x40DF70
00021c95: call @zmalloc with return %00021c97

00021c97:
00021c9b: R7 := R28
00021ca1: R6 := R26
00021ca7: R5 := R28
00021cac: R4 := 0x416000
00021cb2: R4 := R4 + 0xB28
00021cba: mem := mem with [R31, el]:u64 <- R28
00021cc0: mem := mem with [R31 + 8, el]:u64 <- R25
00021cc5: R3 := 0x1000
00021cca: R2 := 2
00021ccf: R1 := 0xFFF
00021cd5: R20 := R0
00021cda: R30 := 0x40DF9C
00021cdc: call @__snprintf_chk with return %00021cde

00021cde:
00021ce2: R0 := R26
00021ce7: R30 := 0x40DFA4
00021ce9: call @free with return %00021ceb

00021ceb:
00021cf0: R0 := pad:64[mem[R24, el]:u32]
00021cf7: R8 := mem[R31 + 0x28, el]:u64
00021cfd: when 31:0[R0] <> 0 goto %00021cfb
00035cf4: goto %00021d26

00021cfb:
00021d05: R2 := mem[R21 + 0x30, el]:u64
00021d0a: R1 := 0x416000
00021d0f: R0 := 2
00021d15: R1 := R1 + 0xB50
00021d1a: R30 := 0x40E3FC
00021d1c: call @__printf_chk with return %00021d1e

00021d1e:
00021d23: R8 := mem[R31 + 0x28, el]:u64
00021d28: goto %00021d26

00021d26:
00021d2c: R0 := 0x32
00021d34: mem := mem with [R31 + 0x28, el]:u64 <- R8
00021d39: R30 := 0x40DFBC
00021d3b: call @zmalloc with return %00021d3d

00021d3d:
00021d41: R1 := R0
00021d47: R22 := R1
00021d4d: R0 := R20
00021d52: R30 := 0x40DFCC
00021d54: call @strlen with return %00021d56

00021d56:
00021d5a: R5 := pad:64[31:0[R0]]
00021d5f: R3 := 0x32
00021d64: R4 := 0x414000
00021d6a: R1 := R3
00021d70: R4 := R4 + 0xB18
00021d75: R2 := 2
00021d7b: R0 := R22
00021d80: R30 := 0x40DFEC
00021d82: call @__snprintf_chk with return %00021d84

00021d84:
00021d87: R30 := 0x40DFF0
00021d89: call @new_rr_data with return %00021d8b

00021d8b:
00021d8f: R1 := R0
00021d95: R0 := R21
00021d9d: mem := mem with [R31 + 0x90, el]:u64 <- R1
00021da2: R30 := 0x40E000
00021da4: call @dup_rr_data with return %00021da6

00021da6:
00021dac: mem := mem with [R31 + 0x88, el]:u64 <- R0
00021db3: R0 := mem[R0 + 0x28, el]:u64
00021db8: R30 := 0x40E00C
00021dba: call @free with return %00021dbc

00021dbc:
00021dc1: R26 := mem[R31 + 0x88, el]:u64
00021dc6: R0 := 0x416000
00021dcc: R0 := R0 + 0xB80
00021dd1: R30 := 0x40E01C
00021dd3: call @strdup with return %00021dd5

00021dd5:
00021dda: R2 := mem[R21 + 0x30, el]:u64
00021de2: mem := mem with [R26 + 0x28, el]:u64 <- R0
00021de9: R0 := mem[R31 + 0x88, el]:u64
00021dee: R3 := 1
00021df3: R1 := 0x416000
00021df9: R1 := R1 + 0xB88
00021dfe: R26 := 0x413000
00021e05: R0 := mem[R0 + 8, el]:u64
00021e0a: R30 := 0x40E040
00021e0c: call @hlist_mod with return %00021e0e

00021e0e:
00021e13: R0 := mem[R31 + 0x88, el]:u64
00021e18: R3 := 1
00021e1d: R2 := 0x416000
00021e22: R1 := 0x414000
00021e28: R2 := R2 + 0xB90
00021e2e: R1 := R1 + 0x738
00021e35: R0 := mem[R0 + 8, el]:u64
00021e3a: R30 := 0x40E060
00021e3c: call @hlist_mod with return %00021e3e

00021e3e:
00021e43: R0 := mem[R31 + 0x88, el]:u64
00021e49: R2 := R22
00021e4f: R1 := R26 + 0x7E8
00021e54: R3 := 1
00021e5b: R0 := mem[R0 + 8, el]:u64
00021e60: R30 := 0x40E078
00021e62: call @hlist_mod with return %00021e64

00021e64:
00021e68: R0 := R22
00021e6d: R30 := 0x40E080
00021e6f: call @free with return %00021e71

00021e71:
00021e76: R2 := mem[R31 + 0x88, el]:u64
00021e7d: R21 := mem[R31 + 0x18, el]:u64
00021e84: R1 := mem[R2 + 0x30, el]:u64
00021e8a: R0 := R21
00021e91: R2 := mem[R2 + 0x40, el]:u64
00021e96: R30 := 0x40E098
00021e98: call @proxy_connect with return %00021e9a

00021e9a:
00021e9e: R4 := pad:64[31:0[R0]]
00021ea4: #943 := R31 + 0x88
00021ea9: R1 := mem[#943, el]:u64
00021eae: R2 := mem[#943 + 8, el]:u64
00021eb4: R3 := R21
00021eba: R0 := R31 + 0x7C
00021ec2: mem := mem with [R31 + 0x7C, el]:u32 <- 31:0[R4]
00021ec7: R30 := 0x40E0B0
00021ec9: call @proxy_authenticate with return %00021ecb

00021ecb:
00021ed0: R8 := mem[R31 + 0x28, el]:u64
00021ed6: when 31:0[R0] = 0 goto %00021ed4
00035cf5: goto %000228d5

000228d5:
000228da: R0 := mem[R31 + 0x90, el]:u64
000228e1: R0 := pad:64[mem[R0 + 0x10, el]:u32]
000228e7: #958 := 31:0[R0] - 0x197
000228ec: VF := extend:64[#958] <> extend:64[31:0[R0]] - 0x197
000228f1: CF := pad:64[#958] <> pad:64[31:0[R0]] + 0xFFFFFE69
000228f5: ZF := #958 = 0
000228f9: NF := 31:31[#958]
000228ff: when ZF goto %000228fd
00035cf6: goto %00021ed4

000228fd:
00022907: R0 := pad:64[mem[R24, el]:u32]
0002290c: when 31:0[R0] = 0 goto %00021f35
00035cf7: goto %00022910

00022910:
00022913: R1 := 0x416000
00022918: R0 := 2
0002291e: R1 := R1 + 0xBB8
00022926: mem := mem with [R31 + 0x18, el]:u64 <- R8
0002292b: R30 := 0x40E420
0002292d: call @__printf_chk with return %0002292f

0002292f:
00022934: R8 := mem[R31 + 0x18, el]:u64
00022938: goto %00021f35

00021ed4:
00021ede: R0 := pad:64[mem[R24, el]:u32]
00021ee4: when 31:0[R0] <> 0 goto %00021ee2
00035cf8: goto %00021f0e

00021ee2:
00021eea: R1 := 0x416000
00021eef: R0 := 2
00021ef5: R1 := R1 + 0xBF0
00021efd: mem := mem with [R31 + 0x18, el]:u64 <- R8
00021f02: R30 := 0x40E3E0
00021f04: call @__printf_chk with return %00021f06

00021f06:
00021f0b: R8 := mem[R31 + 0x18, el]:u64
00021f10: goto %00021f0e

00021f0e:
00021f16: R0 := pad:64[mem[R31 + 0x7C, el]:u32]
00021f1e: mem := mem with [R31 + 0x18, el]:u64 <- R8
00021f23: R30 := 0x40E0DC
00021f25: call @close with return %00021f27

00021f27:
00021f2c: mem := mem with [R31 + 0x7C, el]:u32 <- 0
00021f33: R8 := mem[R31 + 0x18, el]:u64
00035cf9: goto %00021f35

00021f35:
00021f3b: mem := mem with [R31 + 0x18, el]:u64 <- R8
00021f42: R0 := mem[R31 + 0x90, el]:u64
00021f47: R30 := 0x40E0F0
00021f49: call @reset_rr_data with return %00021f4b

00021f4b:
00021f50: R0 := pad:64[mem[R31 + 0x7C, el]:u32]
00021f57: R8 := mem[R31 + 0x18, el]:u64
00021f5d: when 31:0[R0] <> 0 goto %00021f5b
00035cfa: goto %00021f77

00021f5b:
00021f65: R1 := mem[R31 + 0x88, el]:u64
00021f6a: R30 := 0x40E340
00021f6c: call @headers_send with return %00021f6e

00021f6e:
00021f73: R8 := mem[R31 + 0x18, el]:u64
00021f79: when 31:0[R0] = 0 goto %00021f77
00035cfb: goto %0002272e

0002272e:
00022732: R0 := R20
00022737: R30 := 0x40E350
00022739: call @strlen with return %0002273b

0002273b:
0002273f: R2 := R0
00022746: R0 := pad:64[mem[R31 + 0x7C, el]:u32]
0002274c: R1 := R20
00022751: R30 := 0x40E360
00022753: call @write_wrapper with return %00022755

00022755:
0002275a: R8 := mem[R31 + 0x18, el]:u64
0002275f: when R0 = 0 goto %00021f77
00035cfc: goto %00022763

00022763:
00022768: R1 := mem[R31 + 0x90, el]:u64
0002276f: R0 := pad:64[mem[R31 + 0x7C, el]:u32]
00022774: R30 := 0x40E374
00022776: call @headers_recv with return %00022778

00022778:
0002277d: R8 := mem[R31 + 0x18, el]:u64
00022782: when 31:0[R0] = 0 goto %00021f77
00035cfd: goto %00022786

00022786:
0002278b: R0 := pad:64[mem[R24, el]:u32]
00022791: when 31:0[R0] <> 0 goto %0002278f
00035cfe: goto %000227b1

0002278f:
00022799: R0 := mem[R31 + 0x90, el]:u64
000227a0: R0 := mem[R0 + 8, el]:u64
000227a5: R30 := 0x40E490
000227a7: call @hlist_dump with return %000227a9

000227a9:
000227ae: R8 := mem[R31 + 0x18, el]:u64
000227b3: goto %000227b1

000227b1:
000227b9: R0 := mem[R31 + 0x20, el]:u64
000227c0: R1 := mem[R31 + 0x50, el]:u64
000227c7: R0 := R0 | R1
000227cd: when R0 <> 0 goto %000227cb
00035cff: goto %00022871

000227cb:
000227d3: R0 := 0x14
000227db: mem := mem with [R31 + 0x18, el]:u64 <- R8
000227e0: R30 := 0x40E434
000227e2: call @zmalloc with return %000227e4

000227e4:
000227e8: R22 := R0
000227ef: R1 := mem[R31 + 0x20, el]:u64
000227f4: R3 := 0x14
000227fb: R2 := mem[R31 + 0x50, el]:u64
00022800: VF := 0
00022803: CF := 1
00022807: ZF := R1 = 0
0002280b: NF := 63:63[R1]
00022810: R4 := 0x416000
00022816: R4 := R4 + 0xC28
00022824: when ZF goto %0002281c
00022825: goto %00022820

00022820:
00022821: R5 := R1
00022827: goto %00022823

0002281c:
0002281d: R5 := R2
00022826: goto %00022823

00022823:
0002282d: R1 := R3
00022832: R2 := 2
00022837: R30 := 0x40E460
00022839: call @__snprintf_chk with return %0002283b

0002283b:
00022840: R21 := mem[R31 + 0x90, el]:u64
00022846: R2 := R22
0002284c: R1 := R26 + 0x7E8
00022851: R3 := 1
00022858: R0 := mem[R21 + 8, el]:u64
0002285d: R30 := 0x40E478
0002285f: call @hlist_mod with return %00022861

00022861:
00022867: mem := mem with [R21 + 8, el]:u64 <- R0
0002286e: R8 := mem[R31 + 0x18, el]:u64
00022873: goto %00022871

00022871:
00022879: R1 := mem[R31 + 0x90, el]:u64
0002287f: R0 := R8
00022886: R2 := pad:64[mem[R31 + 0x44, el]:u32]
0002288b: R27 := 0
00022893: mem := mem with [R31 + 0x18, el]:u64 <- R8
00022898: R22 := 3
000228a0: mem := mem with [R1 + 0x14, el]:u32 <- 31:0[R2]
000228a5: R30 := 0x40E3B4
000228a7: call @copy_rr_data with return %000228a9

000228a9:
000228ae: R0 := pad:64[mem[R19, el]:u32]
000228b3: R30 := 0x40E3BC
000228b5: call @close with return %000228b7

000228b7:
000228bc: R0 := pad:64[mem[R31 + 0x7C, el]:u32]
000228c3: R8 := mem[R31 + 0x18, el]:u64
000228cb: mem := mem with [R19, el]:u32 <- 31:0[R0]
000228cf: goto %00021fb9

00021f77:
00021f81: R0 := pad:64[mem[R24, el]:u32]
00021f87: when 31:0[R0] <> 0 goto %00021f85
00035d00: goto %00021fb1

00021f85:
00021f8d: R1 := 0x416000
00021f92: R0 := 2
00021f98: R1 := R1 + 0xC30
00021fa0: mem := mem with [R31 + 0x18, el]:u64 <- R8
00021fa5: R30 := 0x40E14C
00021fa7: call @__printf_chk with return %00021fa9

00021fa9:
00021fae: R8 := mem[R31 + 0x18, el]:u64
00021fb3: goto %00021fb1

00021fb1:
00021fb7: R22 := 1
00035d01: goto %00021fb9

00021fb9:
00021fbd: R0 := R31 + 0x88
00021fc5: mem := mem with [R31 + 0x18, el]:u64 <- R8
00021fca: R30 := 0x40E114
00021fcc: call @free_rr_data with return %00021fce

00021fce:
00021fd2: R0 := R31 + 0x90
00021fd7: R30 := 0x40E11C
00021fd9: call @free_rr_data with return %00021fdb

00021fdb:
00021fdf: R0 := R20
00021fe4: R30 := 0x40E124
00021fe6: call @free with return %00021fe8

00021fe8:
00021fec: R0 := R25
00021ff1: R30 := 0x40E12C
00021ff3: call @free with return %00021ff5

00021ff5:
00021ffa: R8 := mem[R31 + 0x18, el]:u64
00022001: R20 := mem[R31 + 0x80, el]:u64
00022005: goto %000218f1

000218e7:
000218ef: R22 := 1
00035d02: goto %000218f1

000218f1:
000218f5: R0 := R20
000218fd: mem := mem with [R31 + 0x18, el]:u64 <- R8
00021902: R30 := 0x40DD94
00021904: call @free with return %00021906

00021906:
0002190a: R0 := R28
0002190f: R30 := 0x40DD9C
00021911: call @free with return %00021913

00021913:
00021918: R8 := mem[R31 + 0x18, el]:u64
00035d03: goto %0002191a

0002191a:
0002191f: R0 := pad:64[mem[R24, el]:u32]
00021925: when 31:0[R27] = 0 goto %00021923
00035d04: goto %00022bb6

00022bb6:
00022bb9: when 31:0[R0] = 0 goto %00022192
00035d05: goto %00022bbd

00022bbd:
00022bc1: R2 := pad:64[31:0[R27]]
00022bc6: R1 := 0x416000
00022bcb: R0 := 2
00022bd1: R1 := R1 + 0xC78
00022bd9: mem := mem with [R31 + 0x18, el]:u64 <- R8
00022bde: R30 := 0x40DDC4
00022be0: call @__printf_chk with return %00022be2

00022be2:
00022be7: R8 := mem[R31 + 0x18, el]:u64
00022bee: R0 := mem[R8 + 8, el]:u64
00022bf3: R30 := 0x40DDD0
00022bf5: call @hlist_dump with return %00022bf7

00022bf7:
00022bfc: R8 := mem[R31 + 0x18, el]:u64
00035d06: goto %00022192

00022192:
00022199: R1 := R8
000221a0: R0 := pad:64[mem[R31 + 0x14, el]:u32]
000221a5: R30 := 0x40DDE0
000221a7: call @headers_send with return %000221a9

000221a9:
000221ac: when 31:0[R0] = 0 goto %000219f9
00035d07: goto %000221b0

000219f9:
000219fe: R0 := pad:64[mem[R24, el]:u32]
00021a04: when 31:0[R0] <> 0 goto %00021a02
00035d08: goto %00021a1f

00021a02:
00021a0a: R1 := 0x416000
00021a0f: R0 := 2
00021a15: R1 := R1 + 0xCA8
00021a1a: R30 := 0x40E2A0
00021a1c: call @__printf_chk with return %00021a1e

00021a1e:
00021a21: goto %00021a1f

00021a1f:
00021a26: R0 := R23
00021a2b: R22 := 0x8000
00021a30: R30 := 0x40E24C
00021a32: call @free with return %00021a34

00021a34:
00021a38: #932 := R31 + 0xB0
00021a3d: R19 := mem[#932, el]:u64
00021a42: R20 := mem[#932 + 8, el]:u64
00021a48: #933 := R31 + 0xD0
00021a4d: R23 := mem[#933, el]:u64
00021a52: R24 := mem[#933 + 8, el]:u64
00021a58: #934 := R31 + 0xE0
00021a5d: R25 := mem[#934, el]:u64
00021a62: R26 := mem[#934 + 8, el]:u64
00021a68: #935 := R31 + 0xF0
00021a6d: R27 := mem[#935, el]:u64
00021a72: R28 := mem[#935 + 8, el]:u64
00021a76: goto %000217da

000221b0:
000221b5: R0 := pad:64[mem[R31 + 0x14, el]:u32]
000221bb: R2 := extend:64[31:0[R27]]
000221c1: R1 := R23
000221c6: R22 := 2
000221cb: R30 := 0x40DDF8
000221cd: call @write_wrapper with return %000221cf

000221cf:
000221d2: VF := 0
000221d5: CF := 1
000221d9: ZF := 31:0[R0] = 0
000221dd: NF := 31:31[R0]
000221e4: R0 := pad:64[mem[R24, el]:u32]
000221ec: when ~(NF = VF & ~ZF) goto %000221ea
00035d09: goto %00021923

000221ea:
000221f2: R22 := 0x8000
000221f6: goto %00021923

00021923:
0002192c: when 31:0[R0] = 0 goto %0002192a
00035d0a: goto %00022b99

00022b99:
00022b9c: R1 := 0x416000
00022ba2: R2 := pad:64[31:0[R22]]
00022ba8: R1 := R1 + 0xCD0
00022bad: R0 := 2
00022bb2: R30 := 0x40DE1C
00022bb4: call @__printf_chk with return %0002192a

0002192a:
00021933: R0 := R23
00021938: R30 := 0x40DE24
0002193a: call @free with return %0002193c

0002193c:
00021940: #928 := R31 + 0xB0
00021945: R19 := mem[#928, el]:u64
0002194a: R20 := mem[#928 + 8, el]:u64
00021950: #929 := R31 + 0xD0
00021955: R23 := mem[#929, el]:u64
0002195a: R24 := mem[#929 + 8, el]:u64
00021960: #930 := R31 + 0xE0
00021965: R25 := mem[#930, el]:u64
0002196a: R26 := mem[#930 + 8, el]:u64
00021970: #931 := R31 + 0xF0
00021975: R27 := mem[#931, el]:u64
0002197a: R28 := mem[#931 + 8, el]:u64
0002197e: goto %000217da

00022bfe:
00022c02: #963 := R31 + 0xA0
00022c07: R29 := mem[#963, el]:u64
00022c0c: R30 := mem[#963 + 8, el]:u64
00022c12: R0 := pad:64[31:0[R22]]
00022c18: #964 := R31 + 0xC0
00022c1d: R21 := mem[#964, el]:u64
00022c22: R22 := mem[#964 + 8, el]:u64
00022c28: R31 := R31 + 0x100
00022c2d: R1 := 0
00022c32: R2 := 0
00022c37: R3 := 0
00022c3c: R4 := 0
00022c41: R5 := 0
00022c46: R6 := 0
00022c4b: R7 := 0
00022c50: R8 := 0
00022c55: R16 := 0
00022c5a: R17 := 0
00022c5f: call R30 with noreturn

00035d0b: sub select(select_result)
00035f17: select_result :: out u32 = low:32[R0]

0001e485:
00031075: R16 := 0x42F000
0003107c: R17 := mem[R16 + 0xE58, el]:u64
00031082: R16 := R16 + 0xE58
00031087: call R17 with noreturn

00035d0c: sub setgid(setgid_arg1, setgid_result)
00035f18: setgid_arg1 :: in u32 = low:32[R0]
00035f19: setgid_result :: out u32 = low:32[R0]

0002f644:
00030de1: R16 := 0x42F000
00030de8: R17 := mem[R16 + 0xD68, el]:u64
00030dee: R16 := R16 + 0xD68
00030df3: call R17 with noreturn

00035d0d: sub setlogmask(setlogmask_result)
00035f1a: setlogmask_result :: out u32 = low:32[R0]

0002c35f:
000309ed: R16 := 0x42F000
000309f4: R17 := mem[R16 + 0xBF8, el]:u64
000309fa: R16 := R16 + 0xBF8
000309ff: call R17 with noreturn

00035d0e: sub setsid(setsid_result)
00035f1b: setsid_result :: out u32 = low:32[R0]

0002d7ac:
0003108b: R16 := 0x42F000
00031092: R17 := mem[R16 + 0xE60, el]:u64
00031098: R16 := R16 + 0xE60
0003109d: call R17 with noreturn

00035d0f: sub setsockopt(setsockopt_fd, setsockopt_level, setsockopt_optnmae, setsockopt_optval, setsockopt_len, setsockopt_result)
00035f1c: setsockopt_fd :: in u32 = low:32[R0]
00035f1d: setsockopt_level :: in u32 = low:32[R1]
00035f1e: setsockopt_optnmae :: in u32 = low:32[R2]
00035f1f: setsockopt_optval :: in out u64 = R3
00035f20: setsockopt_len :: in u64 = R4
00035f21: setsockopt_result :: out u32 = low:32[R0]

0001b191:
00030b8f: R16 := 0x42F000
00030b96: R17 := mem[R16 + 0xC90, el]:u64
00030b9c: R16 := R16 + 0xC90
00030ba1: call R17 with noreturn

00035d10: sub setuid(setuid_arg1, setuid_result)
00035f22: setuid_arg1 :: in u32 = low:32[R0]
00035f23: setuid_result :: out u32 = low:32[R0]

0002f659:
00030953: R16 := 0x42F000
0003095a: R17 := mem[R16 + 0xBC0, el]:u64
00030960: R16 := R16 + 0xBC0
00030965: call R17 with noreturn

00035d11: sub sighandler(sighandler_result)
00035f24: sighandler_result :: out u32 = low:32[R0]

0001f3a7:
0001f3ab: #816 := R31 - 0x20
0001f3b1: mem := mem with [#816, el]:u64 <- R29
0001f3b7: mem := mem with [#816 + 8, el]:u64 <- R30
0001f3bb: R31 := #816
0001f3c1: R3 := pad:64[31:0[R0]]
0001f3c7: R29 := R31
0001f3cf: mem := mem with [R31 + 0x10, el]:u64 <- R19
0001f3d4: R19 := 0x42F000
0001f3db: R19 := mem[R19 + 0xF60, el]:u64
0001f3e2: R0 := pad:64[mem[R19, el]:u32]
0001f3e8: when 31:0[R0] <> 0 goto %0001f3e6
00035d12: goto %000286e9

0001f3e6:
0001f3ee: R2 := 0x414000
0001f3f3: R1 := 2
0001f3f9: R2 := R2 + 0x890
0001f3fe: R0 := 6
0001f403: R30 := 0x40A0D0
0001f405: call @__syslog_chk with return %0001f407

0001f407:
0001f40a: goto %0001f408

000286e9:
000286ec: R2 := 0x414000
000286f1: R1 := 2
000286f7: R2 := R2 + 0x860
000286fc: R0 := 6
00028701: R30 := 0x40A074
00028703: call @__syslog_chk with return %0001f408

0001f408:
0001f40e: R1 := 0x42F000
0001f415: R1 := mem[R1 + 0xF30, el]:u64
0001f41c: R0 := pad:64[mem[R19, el]:u32]
0001f423: R1 := pad:64[mem[R1, el]:u32]
0001f429: R2 := pad:64[31:0[R0] + 2]
0001f430: R1 := pad:64[31:0[R0] | 31:0[R1]]
0001f435: VF := 0
0001f438: CF := 1
0001f43c: ZF := 31:0[R1] = 0
0001f440: NF := 31:31[R1]
0001f44e: when ZF <> 1 goto %0001f446
0001f44f: goto %0001f44a

0001f44a:
0001f44b: R0 := pad:64[31:0[R0] + 1]
0001f451: goto %0001f44d

0001f446:
0001f447: R0 := pad:64[31:0[R2]]
0001f450: goto %0001f44d

0001f44d:
0001f459: mem := mem with [R19, el]:u32 <- 31:0[R0]
0001f460: R19 := mem[R31 + 0x10, el]:u64
0001f467: R29 := mem[R31, el]:u64
0001f46c: R30 := mem[R31 + 8, el]:u64
0001f470: R31 := R31 + 0x20
0001f475: R0 := 0
0001f47a: R1 := 0
0001f47f: R2 := 0
0001f484: R3 := 0
0001f489: R16 := 0
0001f48e: R17 := 0
0001f493: call R30 with noreturn

00035d13: sub signal(signal_result)
00035f25: signal_result :: out u32 = low:32[R0]

0002f6d0:
00030adf: R16 := 0x42F000
00030ae6: R17 := mem[R16 + 0xC50, el]:u64
00030aec: R16 := R16 + 0xC50
00030af1: call R17 with noreturn

00035d14: sub so_closed(so_closed_result)
00035f26: so_closed_result :: out u32 = low:32[R0]

0001a27a:
0001a27e: #512 := 31:0[R0] + 1
0001a283: VF := extend:64[#512] <> extend:64[31:0[R0]] + 1
0001a288: CF := pad:64[#512] <> pad:64[31:0[R0]] + 1
0001a28c: ZF := #512 = 0
0001a290: NF := 31:31[#512]
0001a296: when ZF goto %0001a294
00035d15: goto %0001ae65

0001a294:
0001a29c: R0 := 1
0001a2a1: R1 := 0
0001a2a6: R16 := 0
0001a2ab: R17 := 0
0001a2b0: call R30 with noreturn

0001ae65:
0001ae69: #574 := R31 - 0x10
0001ae6f: mem := mem with [#574, el]:u64 <- R29
0001ae75: mem := mem with [#574 + 8, el]:u64 <- R30
0001ae79: R31 := #574
0001ae7f: R29 := R31
0001ae84: R30 := 0x40ECC8
0001ae86: call @so_recvtest with return %0001ae88

0001ae88:
0001ae8c: R1 := pad:64[31:0[R0]]
0001ae91: R0 := 1
0001ae97: when 31:0[R1] <> 0 goto %0001ae95
00035d16: goto %0001aeb9

0001ae95:
0001ae9d: R0 := 0
0001aea3: #575 := 31:0[R1] + 1
0001aea8: VF := extend:64[#575] <> extend:64[31:0[R1]] + 1
0001aead: CF := pad:64[#575] <> pad:64[31:0[R1]] + 1
0001aeb1: ZF := #575 = 0
0001aeb5: NF := 31:31[#575]
0001aebb: when ZF <> 1 goto %0001aeb9
00035d17: goto %0001aee2

0001aee2:
0001aee5: R30 := 0x40ECF8
0001aee7: call @__errno_location with return %0001aee9

0001aee9:
0001aeee: R0 := pad:64[mem[R0, el]:u32]
0001aef5: R29 := mem[R31, el]:u64
0001aefa: R30 := mem[R31 + 8, el]:u64
0001aefe: R31 := R31 + 0x10
0001af04: #576 := 31:0[R0] - 2
0001af09: VF := extend:64[#576] <> extend:64[31:0[R0]] - 2
0001af0e: CF := pad:64[#576] <> pad:64[31:0[R0]] + 0xFFFFFFFE
0001af12: ZF := #576 = 0
0001af16: NF := 31:31[#576]
0001af1c: #577 := 31:0[R0] - 0xB
0001af20: #578 := ZF <> 1
0001af26: VF := #578 & extend:64[#577] <> extend:64[31:0[R0]] - 0xB
0001af2c: CF := #578 & pad:64[#577] <> pad:64[31:0[R0]] + 0xFFFFFFF5
0001af31: ZF := #577 = 0 | ~#578
0001af36: NF := #578 & 31:31[#577]
0001af42: when ZF goto %0001af3b
0001af43: goto %0001af3e

0001af3e:
0001af3f: R0 := 1
0001af45: goto %0001af41

0001af3b:
0001af3c: R0 := 0
0001af44: goto %0001af41

0001af41:
0001af4a: R1 := 0
0001af4f: R16 := 0
0001af54: R17 := 0
0001af59: call R30 with noreturn

0001aeb9:
0001aec3: R29 := mem[R31, el]:u64
0001aec8: R30 := mem[R31 + 8, el]:u64
0001aecc: R31 := R31 + 0x10
0001aed1: R1 := 0
0001aed6: R16 := 0
0001aedb: R17 := 0
0001aee0: call R30 with noreturn

00035d18: sub so_connect(so_connect_result)
00035f27: so_connect_result :: out u32 = low:32[R0]

00019f5f:
00019f62: V0 := 0
00019f68: R31 := R31 - 0x80
00019f6d: R1 := 0x42F000
00019f74: R1 := mem[R1 + 0xFB8, el]:u64
00019f7a: #494 := R31 + 0x40
00019f80: mem := mem with [#494, el]:u64 <- R29
00019f86: mem := mem with [#494 + 8, el]:u64 <- R30
00019f8c: R29 := R31 + 0x40
00019f92: #495 := R31 + 0x50
00019f98: mem := mem with [#495, el]:u64 <- R19
00019f9e: mem := mem with [#495 + 8, el]:u64 <- R20
00019fa4: #496 := R31 + 0x60
00019faa: mem := mem with [#496, el]:u64 <- R21
00019fb0: mem := mem with [#496 + 8, el]:u64 <- R22
00019fb6: R22 := R31 + 8
00019fbd: R2 := mem[R1, el]:u64
00019fc5: mem := mem with [R31 + 0x38, el]:u64 <- R2
00019fca: R2 := 0
00019fd2: mem := mem with [R22, el]:u128 <- V0
00019fd8: mem := mem with [R22 + 0x10, el]:u128 <- V0
00019fe0: mem := mem with [R22 + 0x1E, el]:u128 <- V0
00019fe6: when R0 = 0 goto %00019fe4
00035d19: goto %0001b699

0001b699:
0001b69d: R21 := R0
0001b6a3: #599 := R31 + 0x70
0001b6a9: mem := mem with [#599, el]:u64 <- R23
0001b6af: mem := mem with [#599 + 8, el]:u64 <- R24
0001b6b4: R2 := 0
0001b6b9: R23 := 0x42F000
0001b6c0: R23 := mem[R23 + 0xF30, el]:u64
0001b6c5: R1 := 1
0001b6cc: R0 := pad:64[mem[R21 + 4, el]:u32]
0001b6d1: R24 := 0x416000
0001b6d7: R24 := R24 + 0xD48
0001b6dc: R30 := 0x40E784
0001b6de: call @socket with return %0001b6e0

0001b6e0:
0001b6e4: R19 := pad:64[31:0[R0]]
0001b6eb: R0 := pad:64[mem[R23, el]:u32]
0001b6f0: when 31:31[R19] goto %0001b637
00035d1a: goto %0001b48b

0001b48b:
0001b494: when 31:0[R0] = 0 goto %0001b492
00035d1b: goto %0001b5af

0001b5af:
0001b5b4: R1 := mem[R21 + 0x18, el]:u64
0001b5ba: R2 := R22
0001b5bf: R3 := 0x2E
0001b5c5: R4 := R1 + 8
0001b5cc: R0 := pad:64[mem[R1, el]:u16]
0001b5d0: R1 := R1 + 4
0001b5d6: #596 := 31:0[R0] - 2
0001b5db: VF := extend:64[#596] <> extend:64[31:0[R0]] - 2
0001b5e0: CF := pad:64[#596] <> pad:64[31:0[R0]] + 0xFFFFFFFE
0001b5e4: ZF := #596 = 0
0001b5e8: NF := 31:31[#596]
0001b5f6: when ZF <> 1 goto %0001b5ee
0001b5f7: goto %0001b5f2

0001b5f2:
0001b5f3: R1 := R1
0001b5f9: goto %0001b5f5

0001b5ee:
0001b5ef: R1 := R4
0001b5f8: goto %0001b5f5

0001b5f5:
0001b5fe: R30 := 0x40E7B4
0001b600: call @inet_ntop with return %0001b602

0001b602:
0001b607: R0 := mem[R21 + 0x18, el]:u64
0001b60d: R2 := R22
0001b613: R1 := R24
0001b61a: R3 := pad:64[mem[R0 + 2, el]:u16]
0001b61f: R0 := 2
0001b628: R3 := pad:64[23:16[R3].31:24[R3].7:0[R3].15:8[R3]]
0001b62e: R3 := pad:64[15:0[R3]]
0001b633: R30 := 0x40E7D4
0001b635: call @__printf_chk with return %0001b492

0001b492:
0001b49b: R0 := pad:64[31:0[R19]]
0001b4a0: R2 := 0
0001b4a5: R1 := 3
0001b4aa: R30 := 0x40E7E4
0001b4ad: call @fcntl with return %0001b4af

0001b4af:
0001b4b3: R20 := pad:64[31:0[R0]]
0001b4b8: when 31:31[R0] goto %0001b3f5
00035d1c: goto %0001b4bc

0001b3f5:
0001b3fa: R0 := pad:64[mem[R23, el]:u32]
0001b400: when 31:0[R0] <> 0 goto %0001b3fe
00035d1d: goto %0001b436

0001b3fe:
0001b406: R30 := 0x40E920
0001b408: call @__errno_location with return %0001b40a

0001b40a:
0001b40f: R0 := pad:64[mem[R0, el]:u32]
0001b414: R30 := 0x40E928
0001b416: call @strerror with return %0001b418

0001b418:
0001b41c: R2 := R0
0001b421: R1 := 0x416000
0001b426: R0 := 2
0001b42c: R1 := R1 + 0xD60
0001b431: R30 := 0x40E93C
0001b433: call @__printf_chk with return %0001b435

0001b435:
0001b438: goto %0001b436

0001b436:
0001b43d: R0 := pad:64[31:0[R19]]
0001b442: R30 := 0x40E874
0001b444: call @close with return %0001b446

0001b4bc:
0001b4c1: R1 := mem[R21 + 0x18, el]:u64
0001b4c7: R0 := pad:64[31:0[R19]]
0001b4ce: R2 := pad:64[mem[R21 + 0x10, el]:u32]
0001b4d3: R30 := 0x40E7FC
0001b4d6: call @connect with return %0001b4d8

0001b4d8:
0001b4dc: when 31:31[R0] goto %0001b4da
00035d1e: goto %0001b58f

0001b4da:
0001b4e4: R0 := pad:64[mem[R23, el]:u32]
0001b4ea: when 31:0[R0] <> 0 goto %0001b4e8
00035d1f: goto %0001b535

0001b4e8:
0001b4f0: R30 := 0x40E8F0
0001b4f2: call @__errno_location with return %0001b4f4

0001b4f4:
0001b4f9: R0 := pad:64[mem[R0, el]:u32]
0001b4fe: R30 := 0x40E8F8
0001b500: call @strerror with return %0001b502

0001b502:
0001b506: R2 := R0
0001b50b: R1 := 0x416000
0001b511: R1 := R1 + 0xD80
0001b516: R0 := 2
0001b51b: R30 := 0x40E90C
0001b51d: call @__printf_chk with return %0001b51f

0001b51f:
0001b523: R0 := pad:64[31:0[R19]]
0001b528: R19 := 0xFFFFFFFF
0001b52d: R30 := 0x40E918
0001b52f: call @close with return %0001b531

0001b531:
0001b533: goto %0001b446

0001b58f:
0001b594: R2 := pad:64[31:12[R20].pad:12[10:0[R20]]]
0001b59a: R0 := pad:64[31:0[R19]]
0001b59f: R1 := 4
0001b5a4: R30 := 0x40E810
0001b5a6: call @fcntl with return %0001b5a8

0001b5a8:
0001b5ab: when 31:31[R0] goto %0001b54b
00035d20: goto %0001b44f

0001b54b:
0001b550: R0 := pad:64[mem[R23, el]:u32]
0001b555: when 31:0[R0] = 0 goto %0001b535
00035d21: goto %0001b559

0001b559:
0001b55c: R30 := 0x40E8CC
0001b55e: call @__errno_location with return %0001b560

0001b560:
0001b565: R0 := pad:64[mem[R0, el]:u32]
0001b56a: R30 := 0x40E8D4
0001b56c: call @strerror with return %0001b56e

0001b56e:
0001b572: R2 := R0
0001b577: R1 := 0x416000
0001b57c: R0 := 2
0001b582: R1 := R1 + 0xD90
0001b587: R30 := 0x40E8E8
0001b589: call @__printf_chk with return %0001b58b

0001b58b:
0001b58d: goto %0001b535

0001b535:
0001b539: R0 := pad:64[31:0[R19]]
0001b53e: R19 := 0xFFFFFFFF
0001b543: R30 := 0x40E8BC
0001b545: call @close with return %0001b547

0001b547:
0001b549: goto %0001b446

0001b446:
0001b44b: R21 := mem[R21 + 0x28, el]:u64
0001b451: when R21 = 0 goto %0001b44f
00035d22: goto %0001b464

0001b464:
0001b469: R0 := pad:64[mem[R21 + 4, el]:u32]
0001b46e: R2 := 0
0001b473: R1 := 1
0001b478: R30 := 0x40E88C
0001b47a: call @socket with return %0001b47c

0001b47c:
0001b480: R19 := pad:64[31:0[R0]]
0001b487: R0 := pad:64[mem[R23, el]:u32]
0001b48d: when ~31:31[R19] goto %0001b48b
00035d23: goto %0001b637

0001b637:
0001b63b: when 31:0[R0] <> 0 goto %0001b639
00035d24: goto %0001b689

0001b639:
0001b641: R30 := 0x40E944
0001b643: call @__errno_location with return %0001b645

0001b645:
0001b64a: R0 := pad:64[mem[R0, el]:u32]
0001b64f: R19 := 0xFFFFFFFF
0001b654: R30 := 0x40E950
0001b656: call @strerror with return %0001b658

0001b658:
0001b65c: R2 := R0
0001b661: R1 := 0x416000
0001b666: R0 := 2
0001b66c: R1 := R1 + 0xD30
0001b671: R30 := 0x40E964
0001b673: call @__printf_chk with return %0001b675

0001b675:
0001b679: #597 := R31 + 0x70
0001b67e: R23 := mem[#597, el]:u64
0001b683: R24 := mem[#597 + 8, el]:u64
0001b687: goto %00019fef

0001b689:
0001b68d: #598 := R31 + 0x70
0001b692: R23 := mem[#598, el]:u64
0001b697: R24 := mem[#598 + 8, el]:u64
00035d25: goto %00019fe4

00019fe4:
00019fec: R19 := 0xFFFFFFFF
00019ff1: goto %00019fef

0001b44f:
0001b458: #595 := R31 + 0x70
0001b45d: R23 := mem[#595, el]:u64
0001b462: R24 := mem[#595 + 8, el]:u64
00035d26: goto %00019fef

00019fef:
00019ff5: R0 := 0x42F000
00019ffc: R0 := mem[R0 + 0xFB8, el]:u64
0001a003: R2 := mem[R31 + 0x38, el]:u64
0001a00a: R1 := mem[R0, el]:u64
0001a010: #497 := ~R1
0001a015: #498 := R2 + ~R1
0001a01b: VF := extend:128[#498 + 1] <> extend:128[R2] + extend:128[#497] + 1
0001a021: CF := pad:128[#498 + 1] <> pad:128[R2] + pad:128[#497] + 1
0001a025: ZF := #498 + 1 = 0
0001a029: NF := 63:63[#498 + 1]
0001a02d: R2 := #498 + 1
0001a032: R1 := 0
0001a038: when ZF <> 1 goto %0001a036
00035d27: goto %0001b396

0001a036:
0001a03f: #499 := R31 + 0x70
0001a045: mem := mem with [#499, el]:u64 <- R23
0001a04b: mem := mem with [#499 + 8, el]:u64 <- R24
0001a050: R30 := 0x40E974
0001a052: call @__stack_chk_fail with return %00035d28

00035d28:
00035d29: call @so_listen with noreturn

0001b396:
0001b39a: #592 := R31 + 0x40
0001b39f: R29 := mem[#592, el]:u64
0001b3a4: R30 := mem[#592 + 8, el]:u64
0001b3aa: R0 := pad:64[31:0[R19]]
0001b3b0: #593 := R31 + 0x50
0001b3b5: R19 := mem[#593, el]:u64
0001b3ba: R20 := mem[#593 + 8, el]:u64
0001b3c0: #594 := R31 + 0x60
0001b3c5: R21 := mem[#594, el]:u64
0001b3ca: R22 := mem[#594 + 8, el]:u64
0001b3d0: R31 := R31 + 0x80
0001b3d5: R1 := 0
0001b3da: R2 := 0
0001b3df: R3 := 0
0001b3e4: R4 := 0
0001b3e9: R16 := 0
0001b3ee: R17 := 0
0001b3f3: call R30 with noreturn

00035d2a: sub so_dataready(so_dataready_result)
00035f28: so_dataready_result :: out u32 = low:32[R0]

0001a217:
0001a21b: #511 := R31 - 0x10
0001a221: mem := mem with [#511, el]:u64 <- R29
0001a227: mem := mem with [#511 + 8, el]:u64 <- R30
0001a22b: R31 := #511
0001a231: R29 := R31
0001a236: R30 := 0x40EC9C
0001a238: call @so_recvtest with return %0001a23a

0001a23a:
0001a23d: VF := 0
0001a240: CF := 1
0001a244: ZF := 31:0[R0] = 0
0001a248: NF := 31:31[R0]
0001a256: when ~(NF = VF & ~ZF) goto %0001a24f
0001a257: goto %0001a252

0001a252:
0001a253: R0 := 1
0001a259: goto %0001a255

0001a24f:
0001a250: R0 := 0
0001a258: goto %0001a255

0001a255:
0001a260: R29 := mem[R31, el]:u64
0001a265: R30 := mem[R31 + 8, el]:u64
0001a269: R31 := R31 + 0x10
0001a26e: R16 := 0
0001a273: R17 := 0
0001a278: call R30 with noreturn

00035d2b: sub so_listen(so_listen_result)
00035f29: so_listen_result :: out u32 = low:32[R0]

0001a054:
0001a057: V0 := 0
0001a05d: R31 := R31 - 0xA0
0001a062: R3 := 0x42F000
0001a069: R3 := mem[R3 + 0xFB8, el]:u64
0001a06f: #500 := R31 + 0x40
0001a075: mem := mem with [#500, el]:u64 <- R29
0001a07b: mem := mem with [#500 + 8, el]:u64 <- R30
0001a081: R29 := R31 + 0x40
0001a087: #501 := R31 + 0x60
0001a08d: mem := mem with [#501, el]:u64 <- R21
0001a093: mem := mem with [#501 + 8, el]:u64 <- R22
0001a099: R21 := R31 + 8
0001a09f: #502 := R31 + 0x70
0001a0a5: mem := mem with [#502, el]:u64 <- R23
0001a0ab: mem := mem with [#502 + 8, el]:u64 <- R24
0001a0b2: R4 := mem[R3, el]:u64
0001a0ba: mem := mem with [R31 + 0x38, el]:u64 <- R4
0001a0bf: R4 := 0
0001a0c7: mem := mem with [R21, el]:u128 <- V0
0001a0cd: mem := mem with [R21 + 0x10, el]:u128 <- V0
0001a0d5: mem := mem with [R21 + 0x1E, el]:u128 <- V0
0001a0db: when R1 = 0 goto %0001a0d9
00035d2c: goto %0001b323

0001a0d9:
0001a0e1: R23 := 0
0001a0e6: goto %0001a0e4

0001b323:
0001b327: R22 := R0
0001b32d: R24 := R2
0001b332: R23 := 0
0001b338: #589 := R31 + 0x50
0001b33e: mem := mem with [#589, el]:u64 <- R19
0001b344: mem := mem with [#589 + 8, el]:u64 <- R20
0001b34a: R19 := R1
0001b350: #590 := R31 + 0x80
0001b356: mem := mem with [#590, el]:u64 <- R25
0001b35c: mem := mem with [#590 + 8, el]:u64 <- R26
0001b361: R25 := 0x416000
0001b366: R26 := 0x416000
0001b36c: R25 := R25 + 0xE78
0001b372: R26 := R26 + 0xE50
0001b378: #591 := R31 + 0x90
0001b37e: mem := mem with [#591, el]:u64 <- R27
0001b384: mem := mem with [#591 + 8, el]:u64 <- R28
0001b389: R27 := 0x42F000
0001b390: R27 := mem[R27 + 0xF30, el]:u64
0001b394: goto %0001b13f

0001b13f:
0001b149: R0 := pad:64[mem[R19 + 4, el]:u32]
0001b14e: R2 := 0
0001b153: R1 := 1
0001b158: R30 := 0x40EAA8
0001b15b: call @socket with return %0001b15d

0001b15d:
0001b161: R20 := pad:64[31:0[R0]]
0001b167: when ~31:31[R0] goto %0001b165
00035d2d: goto %0001b233

0001b233:
0001b238: R0 := pad:64[mem[R27, el]:u32]
0001b23e: when 31:0[R0] <> 0 goto %0001b23c
00035d2e: goto %0001b126

0001b23c:
0001b244: R30 := 0x40EBD8
0001b246: call @__errno_location with return %0001b248

0001b248:
0001b24d: R0 := pad:64[mem[R0, el]:u32]
0001b252: R30 := 0x40EBE0
0001b254: call @strerror with return %0001b256

0001b256:
0001b25a: R2 := R0
0001b25f: R1 := 0x416000
0001b264: R0 := 2
0001b26a: R1 := R1 + 0xDB0
0001b26f: R30 := 0x40EBF4
0001b271: call @__printf_chk with return %0001b273

0001b273:
0001b275: goto %0001b126

0001b165:
0001b16e: R28 := R31 + 4
0001b173: R1 := 1
0001b179: R3 := R28
0001b17e: R4 := 4
0001b183: R2 := 2
0001b18b: mem := mem with [R31 + 4, el]:u32 <- 31:0[R1]
0001b190: R30 := 0x40EA04
0001b193: call @setsockopt with return %0001b195

0001b195:
0001b198: when 31:0[R0] <> 0 goto %0001affd
00035d2f: goto %0001b19c

0001affd:
0001b000: R30 := 0x40EB28
0001b002: call @__errno_location with return %0001b004

0001b004:
0001b009: R0 := pad:64[mem[R0, el]:u32]
0001b00e: R30 := 0x40EB30
0001b010: call @strerror with return %0001b012

0001b012:
0001b016: R3 := R0
0001b01b: R2 := 0x416000
0001b020: R0 := 4
0001b026: R2 := R2 + 0xDD0
0001b02b: R1 := 2
0001b030: R30 := 0x40EB48
0001b032: call @__syslog_chk with return %0001b034

0001b034:
0001b039: R0 := pad:64[mem[R19 + 4, el]:u32]
0001b03f: #583 := 31:0[R0] - 0xA
0001b044: VF := extend:64[#583] <> extend:64[31:0[R0]] - 0xA
0001b049: CF := pad:64[#583] <> pad:64[31:0[R0]] + 0xFFFFFFF6
0001b04d: ZF := #583 = 0
0001b051: NF := 31:31[#583]
0001b057: when ZF <> 1 goto %0001b055
00035d30: goto %0001b1bd

0001b19c:
0001b1a1: R0 := pad:64[mem[R19 + 4, el]:u32]
0001b1a7: #585 := 31:0[R0] - 0xA
0001b1ac: VF := extend:64[#585] <> extend:64[31:0[R0]] - 0xA
0001b1b1: CF := pad:64[#585] <> pad:64[31:0[R0]] + 0xFFFFFFF6
0001b1b5: ZF := #585 = 0
0001b1b9: NF := 31:31[#585]
0001b1bf: when ZF goto %0001b1bd
00035d31: goto %0001b055

0001b1bd:
0001b1c5: R5 := 1
0001b1cb: R3 := R28
0001b1d1: R0 := pad:64[31:0[R20]]
0001b1d6: R4 := 4
0001b1db: R2 := 0x1A
0001b1e0: R1 := 0x29
0001b1e8: mem := mem with [R31 + 4, el]:u32 <- 31:0[R5]
0001b1ed: R30 := 0x40EB74
0001b1ef: call @setsockopt with return %0001b1f1

0001b1f1:
0001b1f4: when 31:0[R0] = 0 goto %0001b055
00035d32: goto %0001b1f8

0001b1f8:
0001b1fb: R30 := 0x40EB7C
0001b1fd: call @__errno_location with return %0001b1ff

0001b1ff:
0001b204: R0 := pad:64[mem[R0, el]:u32]
0001b209: R30 := 0x40EB84
0001b20b: call @strerror with return %0001b20d

0001b20d:
0001b211: R3 := R0
0001b216: R2 := 0x416000
0001b21b: R1 := 2
0001b221: R2 := R2 + 0xE10
0001b226: R0 := 4
0001b22b: R30 := 0x40EB9C
0001b22d: call @__syslog_chk with return %0001b22f

0001b22f:
0001b231: goto %0001b055

0001b055:
0001b05f: R1 := mem[R19 + 0x18, el]:u64
0001b065: R2 := R21
0001b06a: R3 := 0x2E
0001b070: R4 := R1 + 8
0001b077: R0 := pad:64[mem[R1, el]:u16]
0001b07b: R1 := R1 + 4
0001b081: #584 := 31:0[R0] - 2
0001b086: VF := extend:64[#584] <> extend:64[31:0[R0]] - 2
0001b08b: CF := pad:64[#584] <> pad:64[31:0[R0]] + 0xFFFFFFFE
0001b08f: ZF := #584 = 0
0001b093: NF := 31:31[#584]
0001b0a1: when ZF <> 1 goto %0001b099
0001b0a2: goto %0001b09d

0001b09d:
0001b09e: R1 := R1
0001b0a4: goto %0001b0a0

0001b099:
0001b09a: R1 := R4
0001b0a3: goto %0001b0a0

0001b0a0:
0001b0a9: R30 := 0x40EA34
0001b0ac: call @inet_ntop with return %0001b0ae

0001b0ae:
0001b0b3: R1 := mem[R19 + 0x18, el]:u64
0001b0b9: R0 := pad:64[31:0[R20]]
0001b0c0: R2 := pad:64[mem[R19 + 0x10, el]:u32]
0001b0c7: R28 := pad:64[mem[R1 + 2, el]:u16]
0001b0cc: R30 := 0x40EA48
0001b0cf: call @bind with return %0001b0d1

0001b0d1:
0001b0d5: when 31:0[R0] <> 0 goto %0001b0d3
00035d33: goto %0001b2a7

0001b0d3:
0001b0db: R30 := 0x40EBA4
0001b0dd: call @__errno_location with return %0001b0df

0001b0df:
0001b0e4: R0 := pad:64[mem[R0, el]:u32]
0001b0ed: R28 := pad:64[23:16[R28].31:24[R28].7:0[R28].15:8[R28]]
0001b0f3: R28 := pad:64[15:0[R28]]
0001b0f8: R30 := 0x40EBB4
0001b0fa: call @strerror with return %0001b0fc

0001b0fc:
0001b100: R5 := R0
0001b106: R4 := pad:64[31:0[R28]]
0001b10c: R3 := R21
0001b112: R2 := R26
0001b117: R1 := 2
0001b11c: R0 := 3
0001b121: R30 := 0x40EBD0
0001b123: call @__syslog_chk with return %0001b125

0001b125:
0001b128: goto %0001b126

0001b2a7:
0001b2ab: R0 := pad:64[31:0[R20]]
0001b2b0: R1 := 0x1000
0001b2b5: R30 := 0x40EA58
0001b2b8: call @listen with return %0001b2ba

0001b2ba:
0001b2bd: when 31:0[R0] <> 0 goto %0001b126
00035d34: goto %0001b2c1

0001b126:
0001b12d: R0 := pad:64[31:0[R20]]
0001b132: R30 := 0x40EAC0
0001b134: call @close with return %0001b136

0001b136:
0001b13b: R19 := mem[R19 + 0x28, el]:u64
0001b141: when R19 <> 0 goto %0001b13f
00035d35: goto %0001b277

0001b2c1:
0001b2c6: R0 := mem[R22, el]:u64
0001b2cc: R1 := extend:64[31:0[R20]]
0001b2d2: R2 := R24
0001b2d8: R23 := pad:64[31:0[R23] + 1]
0001b2dd: R30 := 0x40EA70
0001b2df: call @plist_add with return %0001b2e1

0001b2e1:
0001b2e7: mem := mem with [R22, el]:u64 <- R0
0001b2f0: R4 := pad:64[23:16[R28].31:24[R28].7:0[R28].15:8[R28]]
0001b2f6: R3 := R21
0001b2fc: R4 := pad:64[15:0[R4]]
0001b302: R2 := R25
0001b307: R1 := 2
0001b30c: R0 := 6
0001b311: R30 := 0x40EA90
0001b313: call @__syslog_chk with return %0001b315

0001b315:
0001b31a: R19 := mem[R19 + 0x28, el]:u64
0001b31f: when R19 = 0 goto %0001b277
00035d36: goto %0001b13f

0001b277:
0001b27b: #586 := R31 + 0x50
0001b280: R19 := mem[#586, el]:u64
0001b285: R20 := mem[#586 + 8, el]:u64
0001b28b: #587 := R31 + 0x80
0001b290: R25 := mem[#587, el]:u64
0001b295: R26 := mem[#587 + 8, el]:u64
0001b29b: #588 := R31 + 0x90
0001b2a0: R27 := mem[#588, el]:u64
0001b2a5: R28 := mem[#588 + 8, el]:u64
00035d37: goto %0001a0e4

0001a0e4:
0001a0ea: R0 := 0x42F000
0001a0f1: R0 := mem[R0 + 0xFB8, el]:u64
0001a0f8: R2 := mem[R31 + 0x38, el]:u64
0001a0ff: R1 := mem[R0, el]:u64
0001a105: #503 := ~R1
0001a10a: #504 := R2 + ~R1
0001a110: VF := extend:128[#504 + 1] <> extend:128[R2] + extend:128[#503] + 1
0001a116: CF := pad:128[#504 + 1] <> pad:128[R2] + pad:128[#503] + 1
0001a11a: ZF := #504 + 1 = 0
0001a11e: NF := 63:63[#504 + 1]
0001a122: R2 := #504 + 1
0001a127: R1 := 0
0001a12d: when ZF <> 1 goto %0001a12b
00035d38: goto %0001af99

0001a12b:
0001a134: #505 := R31 + 0x50
0001a13a: mem := mem with [#505, el]:u64 <- R19
0001a140: mem := mem with [#505 + 8, el]:u64 <- R20
0001a146: #506 := R31 + 0x80
0001a14c: mem := mem with [#506, el]:u64 <- R25
0001a152: mem := mem with [#506 + 8, el]:u64 <- R26
0001a158: #507 := R31 + 0x90
0001a15e: mem := mem with [#507, el]:u64 <- R27
0001a164: mem := mem with [#507 + 8, el]:u64 <- R28
0001a169: R30 := 0x40EC10
0001a16b: call @__stack_chk_fail with return %00035d39

00035d39:
00035d3a: call @so_recvtest with noreturn

0001af99:
0001af9d: #580 := R31 + 0x40
0001afa2: R29 := mem[#580, el]:u64
0001afa7: R30 := mem[#580 + 8, el]:u64
0001afad: R0 := pad:64[31:0[R23]]
0001afb3: #581 := R31 + 0x60
0001afb8: R21 := mem[#581, el]:u64
0001afbd: R22 := mem[#581 + 8, el]:u64
0001afc3: #582 := R31 + 0x70
0001afc8: R23 := mem[#582, el]:u64
0001afcd: R24 := mem[#582 + 8, el]:u64
0001afd3: R31 := R31 + 0xA0
0001afd8: R1 := 0
0001afdd: R2 := 0
0001afe2: R3 := 0
0001afe7: R4 := 0
0001afec: R5 := 0
0001aff1: R16 := 0
0001aff6: R17 := 0
0001affb: call R30 with noreturn

00035d3b: sub so_recvln(so_recvln_result)
00035f2a: so_recvln_result :: out u32 = low:32[R0]

0001a2b2:
0001a2b6: R31 := R31 - 0x60
0001a2bc: #513 := R31 + 0x10
0001a2c2: mem := mem with [#513, el]:u64 <- R29
0001a2c8: mem := mem with [#513 + 8, el]:u64 <- R30
0001a2ce: R29 := R31 + 0x10
0001a2d4: #514 := R31 + 0x20
0001a2da: mem := mem with [#514, el]:u64 <- R19
0001a2e0: mem := mem with [#514 + 8, el]:u64 <- R20
0001a2e6: R20 := R2
0001a2eb: R2 := 0x42F000
0001a2f2: R2 := mem[R2 + 0xFB8, el]:u64
0001a2f8: #515 := R31 + 0x30
0001a2fe: mem := mem with [#515, el]:u64 <- R21
0001a304: mem := mem with [#515 + 8, el]:u64 <- R22
0001a30a: R22 := pad:64[31:0[R0]]
0001a311: R0 := pad:64[mem[R20, el]:u32]
0001a317: R21 := R1
0001a31d: #516 := R31 + 0x50
0001a323: mem := mem with [#516, el]:u64 <- R25
0001a329: mem := mem with [#516 + 8, el]:u64 <- R26
0001a32f: R0 := pad:64[31:0[R0] - 1]
0001a336: R1 := mem[R2, el]:u64
0001a33e: mem := mem with [R31 + 8, el]:u64 <- R1
0001a343: R1 := 0
0001a34a: mem := mem with [R31 + 7] <- 0
0001a34f: VF := 0
0001a352: CF := 1
0001a356: ZF := 31:0[R0] = 0
0001a35a: NF := 31:31[R0]
0001a362: when ~(NF = VF & ~ZF) goto %0001a360
00035d3c: goto %0001ac69

0001a360:
0001a368: R19 := 0
0001a36d: R26 := 1
0001a372: goto %0001a370

0001ac69:
0001ac6c: R19 := 0
0001ac72: #562 := R31 + 0x40
0001ac78: mem := mem with [#562, el]:u64 <- R23
0001ac7e: mem := mem with [#562 + 8, el]:u64 <- R24
0001ac84: R23 := R31 + 7
0001ac89: R24 := 0x42F000
0001ac90: R24 := mem[R24 + 0xF30, el]:u64
0001ac95: goto %0001ac93

0001ac93:
0001ac9a: R1 := R23
0001aca0: R0 := pad:64[31:0[R22]]
0001aca5: R2 := 1
0001acaa: R30 := 0x40EDBC
0001acad: call @read with return %0001acaf

0001acaf:
0001acb3: R26 := pad:64[31:0[R0]]
0001acb8: VF := 0
0001acbb: CF := 1
0001acbf: ZF := 31:0[R0] = 0
0001acc3: NF := 31:31[R0]
0001accb: when ~(NF = VF & ~ZF) goto %0001acc9
00035d3d: goto %0001acde

0001acde:
0001ace3: R1 := mem[R21, el]:u64
0001ace9: R25 := pad:64[31:0[R19] + 1]
0001acf0: R0 := pad:64[mem[R31 + 7]]
0001acf9: mem := mem with [R1 + R19] <- 7:0[R0]
0001acff: #564 := 31:0[R0] - 0xA
0001ad04: VF := extend:64[#564] <> extend:64[31:0[R0]] - 0xA
0001ad09: CF := pad:64[#564] <> pad:64[31:0[R0]] + 0xFFFFFFF6
0001ad0d: ZF := #564 = 0
0001ad11: NF := 31:31[#564]
0001ad18: R1 := pad:64[mem[R20, el]:u32]
0001ad1e: R4 := pad:64[31:0[R1] - 1]
0001ad24: #565 := ~31:0[R25]
0001ad29: #566 := 31:0[R4] + ~31:0[R25]
0001ad2d: #567 := ZF <> 1
0001ad34: VF := #567 & extend:64[#566 + 1] <> extend:64[31:0[R4]] +
          extend:64[#565] + 1
0001ad3b: CF := #567 & pad:64[#566 + 1] <> pad:64[31:0[R4]] + pad:64[#565] +
          1
0001ad40: ZF := #567 & #566 + 1 = 0
0001ad45: NF := #567 & 31:31[#566 + 1]
0001ad4b: when ZF <> 1 goto %0001ad49
00035d3e: goto %0001ae57

0001ae57:
0001ae5c: R0 := pad:64[mem[R24, el]:u32]
0001ae61: when 31:0[R0] <> 0 goto %0001ad96
00035d3f: goto %0001adc1

0001ad96:
0001ad9a: R3 := pad:64[30:0[R1].0]
0001ada0: R2 := pad:64[31:0[R22]]
0001ada5: R1 := 0x416000
0001adaa: R0 := 2
0001adb0: R1 := R1 + 0xE98
0001adb5: R30 := 0x40EE48
0001adb7: call @__printf_chk with return %0001adb9

0001adb9:
0001adbe: R1 := pad:64[mem[R20, el]:u32]
0001adc3: goto %0001adc1

0001adc1:
0001adc9: R0 := mem[R21, el]:u64
0001adcf: R1 := pad:64[30:0[R1].0]
0001add7: mem := mem with [R20, el]:u32 <- 31:0[R1]
0001addd: R1 := extend:64[31:0[R1]]
0001ade2: R30 := 0x40EE08
0001ade5: call @realloc with return %0001ade7

0001ade7:
0001adea: when R0 = 0 goto %0001ac50
00035d40: goto %0001adee

0001ac50:
0001ac54: #561 := R31 + 0x40
0001ac59: R23 := mem[#561, el]:u64
0001ac5e: R24 := mem[#561 + 8, el]:u64
0001ac63: R26 := 0xFFFFFFFF
0001ac67: goto %0001a382

0001adee:
0001adf3: R4 := pad:64[mem[R20, el]:u32]
0001adf9: R19 := R19 + 1
0001ae01: mem := mem with [R21, el]:u64 <- R0
0001ae07: R4 := pad:64[31:0[R4] - 1]
0001ae0d: #571 := ~31:0[R19]
0001ae12: #572 := 31:0[R4] + ~31:0[R19]
0001ae18: VF := extend:64[#572 + 1] <> extend:64[31:0[R4]] + extend:64[#571]
          + 1
0001ae1e: CF := pad:64[#572 + 1] <> pad:64[31:0[R4]] + pad:64[#571] + 1
0001ae22: ZF := #572 + 1 = 0
0001ae26: NF := 31:31[#572 + 1]
0001ae2e: when NF = VF & ~ZF goto %0001ae2c
00035d41: goto %0001ad77

0001ad49:
0001ad52: R19 := R19 + 1
0001ad58: #568 := ~31:0[R19]
0001ad5d: #569 := 31:0[R4] + ~31:0[R19]
0001ad63: VF := extend:64[#569 + 1] <> extend:64[31:0[R4]] + extend:64[#568]
          + 1
0001ad69: CF := pad:64[#569 + 1] <> pad:64[31:0[R4]] + pad:64[#568] + 1
0001ad6d: ZF := #569 + 1 = 0
0001ad71: NF := 31:31[#569 + 1]
0001ad79: when ~(NF = VF & ~ZF) goto %0001ad77
00035d42: goto %0001ae2c

0001ad77:
0001ad80: #570 := R31 + 0x40
0001ad85: R23 := mem[#570, el]:u64
0001ad8a: R24 := mem[#570 + 8, el]:u64
0001ad90: R19 := extend:64[31:0[R25]]
0001ad94: goto %0001a370

0001ae2c:
0001ae36: R0 := pad:64[mem[R31 + 7]]
0001ae3c: #573 := 31:0[R0] - 0xA
0001ae41: VF := extend:64[#573] <> extend:64[31:0[R0]] - 0xA
0001ae46: CF := pad:64[#573] <> pad:64[31:0[R0]] + 0xFFFFFFF6
0001ae4a: ZF := #573 = 0
0001ae4e: NF := 31:31[#573]
0001ae53: when ZF goto %0001acc9
00035d43: goto %0001ac93

0001acc9:
0001acd2: #563 := R31 + 0x40
0001acd7: R23 := mem[#563, el]:u64
0001acdc: R24 := mem[#563 + 8, el]:u64
00035d44: goto %0001a370

0001a370:
0001a378: R0 := mem[R21, el]:u64
0001a380: mem := mem with [R0 + R19] <- 0
00035d45: goto %0001a382

0001a382:
0001a385: R0 := 0x42F000
0001a38c: R0 := mem[R0 + 0xFB8, el]:u64
0001a393: R2 := mem[R31 + 8, el]:u64
0001a39a: R1 := mem[R0, el]:u64
0001a3a0: #517 := ~R1
0001a3a5: #518 := R2 + ~R1
0001a3ab: VF := extend:128[#518 + 1] <> extend:128[R2] + extend:128[#517] + 1
0001a3b1: CF := pad:128[#518 + 1] <> pad:128[R2] + pad:128[#517] + 1
0001a3b5: ZF := #518 + 1 = 0
0001a3b9: NF := 63:63[#518 + 1]
0001a3bd: R2 := #518 + 1
0001a3c2: R1 := 0
0001a3c8: when ZF <> 1 goto %0001a3c6
00035d46: goto %0001abe1

0001a3c6:
0001a3cf: #519 := R31 + 0x40
0001a3d5: mem := mem with [#519, el]:u64 <- R23
0001a3db: mem := mem with [#519 + 8, el]:u64 <- R24
0001a3e0: R30 := 0x40EECC
0001a3e2: call @__stack_chk_fail with return %0001a3e4

0001a3e4:
00035d47: call @myexit with noreturn

0001abe1:
0001abe5: #557 := R31 + 0x10
0001abea: R29 := mem[#557, el]:u64
0001abef: R30 := mem[#557 + 8, el]:u64
0001abf5: R0 := pad:64[31:0[R26]]
0001abfb: #558 := R31 + 0x20
0001ac00: R19 := mem[#558, el]:u64
0001ac05: R20 := mem[#558 + 8, el]:u64
0001ac0b: #559 := R31 + 0x30
0001ac10: R21 := mem[#559, el]:u64
0001ac15: R22 := mem[#559 + 8, el]:u64
0001ac1b: #560 := R31 + 0x50
0001ac20: R25 := mem[#560, el]:u64
0001ac25: R26 := mem[#560 + 8, el]:u64
0001ac2b: R31 := R31 + 0x60
0001ac30: R1 := 0
0001ac35: R2 := 0
0001ac3a: R3 := 0
0001ac3f: R4 := 0
0001ac44: R16 := 0
0001ac49: R17 := 0
0001ac4e: call R30 with noreturn

00035d48: sub so_recvtest(so_recvtest_result)
00035f2b: so_recvtest_result :: out u32 = low:32[R0]

0001a16d:
0001a171: R31 := R31 - 0x20
0001a176: R3 := 0x42
0001a17b: R4 := 0x42F000
0001a182: R4 := mem[R4 + 0xFB8, el]:u64
0001a188: R1 := R31 + 7
0001a18e: #508 := R31 + 0x10
0001a194: mem := mem with [#508, el]:u64 <- R29
0001a19a: mem := mem with [#508 + 8, el]:u64 <- R30
0001a1a0: R29 := R31 + 0x10
0001a1a5: R2 := 1
0001a1ac: R5 := mem[R4, el]:u64
0001a1b4: mem := mem with [R31 + 8, el]:u64 <- R5
0001a1b9: R5 := 0
0001a1be: R30 := 0x40EC40
0001a1c1: call @recv with return %0001a1c3

0001a1c3:
0001a1c6: R1 := 0x42F000
0001a1cd: R1 := mem[R1 + 0xFB8, el]:u64
0001a1d4: R3 := mem[R31 + 8, el]:u64
0001a1db: R2 := mem[R1, el]:u64
0001a1e1: #509 := ~R2
0001a1e6: #510 := R3 + ~R2
0001a1ec: VF := extend:128[#510 + 1] <> extend:128[R3] + extend:128[#509] + 1
0001a1f2: CF := pad:128[#510 + 1] <> pad:128[R3] + pad:128[#509] + 1
0001a1f6: ZF := #510 + 1 = 0
0001a1fa: NF := 63:63[#510 + 1]
0001a1fe: R3 := #510 + 1
0001a203: R2 := 0
0001a209: when ZF <> 1 goto %0001a207
00035d49: goto %0001af5b

0001a207:
0001a20f: R30 := 0x40EC88
0001a211: call @__stack_chk_fail with return %0001a213

0001a213:
00035d4a: call @so_dataready with noreturn

0001af5b:
0001af5f: #579 := R31 + 0x10
0001af64: R29 := mem[#579, el]:u64
0001af69: R30 := mem[#579 + 8, el]:u64
0001af6f: R31 := R31 + 0x20
0001af74: R1 := 0
0001af79: R2 := 0
0001af7e: R3 := 0
0001af83: R4 := 0
0001af88: R5 := 0
0001af8d: R16 := 0
0001af92: R17 := 0
0001af97: call R30 with noreturn

00035d4b: sub so_resolv(so_resolv_result)
00035f2c: so_resolv_result :: out u32 = low:32[R0]

00019c60:
00019c67: R31 := R31 - 0xA0
00019c6d: R5 := pad:64[31:0[R2]]
00019c72: R3 := 0x42F000
00019c79: R3 := mem[R3 + 0xFB8, el]:u64
00019c7e: R6 := 1
00019c84: #481 := R31 + 0x70
00019c8a: mem := mem with [#481, el]:u64 <- R29
00019c90: mem := mem with [#481 + 8, el]:u64 <- R30
00019c96: R29 := R31 + 0x70
00019c9b: R2 := 2
00019ca1: #482 := R31 + 0x80
00019ca7: mem := mem with [#482, el]:u64 <- R19
00019cad: mem := mem with [#482 + 8, el]:u64 <- R20
00019cb3: R19 := R31
00019cb9: R20 := R31 + 0x30
00019cbf: #483 := R31 + 0x90
00019cc5: mem := mem with [#483, el]:u64 <- R21
00019ccb: mem := mem with [#483 + 8, el]:u64 <- R22
00019cd1: R22 := R0
00019cd7: R21 := R1
00019cde: R4 := mem[R3, el]:u64
00019ce6: mem := mem with [R31 + 0x68, el]:u64 <- R4
00019ceb: R4 := 0
00019cf2: mem := mem with [R31, el]:u64 <- 0
00019cf7: mem := mem with [R31 + 8, el]:u64 <- 0
00019cfc: R4 := 0x414000
00019d02: R4 := R4 + 0xB18
00019d07: R3 := 6
00019d0d: R0 := R20
00019d13: R1 := R3
00019d1b: mem := mem with [R31 + 8, el]:u32 <- 31:0[R6]
00019d21: #484 := R19 + 0x10
00019d26: mem := mem with [#484, el]:u64 <- 0
00019d2b: mem := mem with [#484 + 8, el]:u64 <- 0
00019d31: #485 := R19 + 0x20
00019d36: mem := mem with [#485, el]:u64 <- 0
00019d3b: mem := mem with [#485 + 8, el]:u64 <- 0
00019d40: R30 := 0x40E50C
00019d42: call @__snprintf_chk with return %00019d44

00019d44:
00019d48: R3 := R22
00019d4e: R2 := R19
00019d54: R1 := R20
00019d5a: R0 := R21
00019d5f: R30 := 0x40E520
00019d62: call @getaddrinfo with return %00019d64

00019d64:
00019d68: when 31:0[R0] <> 0 goto %00019d66
00035d4c: goto %0001b898

00019d66:
00019d6e: R1 := 0x42F000
00019d75: R1 := mem[R1 + 0xF30, el]:u64
00019d7c: R1 := pad:64[mem[R1, el]:u32]
00019d82: when 31:0[R1] <> 0 goto %00019d80
00035d4d: goto %0001b88f

00019d80:
00019d89: R19 := pad:64[31:0[R0]]
00019d8e: R30 := 0x40E61C
00019d91: call @gai_strerror with return %00019d93

00019d93:
00019d97: R4 := pad:64[31:0[R19]]
00019d9d: R3 := R0
00019da3: R2 := R21
00019da8: R1 := 0x416000
00019dad: R0 := 2
00019db3: R1 := R1 + 0xCF0
00019db8: R30 := 0x40E638
00019dba: call @__printf_chk with return %00019dbc

00019dbc:
00019dbf: R0 := 0
00019dc4: goto %00019dc2

0001b88f:
0001b892: R0 := 0
0001b896: goto %00019dc2

0001b898:
0001b89b: R0 := 0x42F000
0001b8a2: R0 := mem[R0 + 0xF30, el]:u64
0001b8a9: R0 := pad:64[mem[R0, el]:u32]
0001b8ae: when 31:0[R0] <> 0 goto %0001b7b4
00035d4e: goto %0001b7fb

0001b7b4:
0001b7b7: V0 := 0
0001b7bd: R20 := R31 + 0x38
0001b7c3: R2 := R21
0001b7c8: R1 := 0x416000
0001b7cd: R0 := 2
0001b7d3: R1 := R1 + 0xD10
0001b7db: mem := mem with [R20, el]:u128 <- V0
0001b7e1: mem := mem with [R20 + 0x10, el]:u128 <- V0
0001b7e9: mem := mem with [R20 + 0x1E, el]:u128 <- V0
0001b7ee: R30 := 0x40E5AC
0001b7f0: call @__printf_chk with return %0001b7f2

0001b7f2:
0001b7f7: R19 := mem[R22, el]:u64
0001b7fd: when R19 = 0 goto %0001b7fb
00035d4f: goto %0001b805

0001b805:
0001b808: R21 := 0x416000
0001b80e: R21 := R21 + 0xD20
00035d50: goto %0001b812

0001b812:
0001b817: R1 := mem[R19 + 0x18, el]:u64
0001b81c: R3 := 0x2E
0001b822: R2 := R20
0001b828: R4 := R1 + 8
0001b82f: R0 := pad:64[mem[R1, el]:u16]
0001b833: R1 := R1 + 4
0001b839: #605 := 31:0[R0] - 2
0001b83e: VF := extend:64[#605] <> extend:64[31:0[R0]] - 2
0001b843: CF := pad:64[#605] <> pad:64[31:0[R0]] + 0xFFFFFFFE
0001b847: ZF := #605 = 0
0001b84b: NF := 31:31[#605]
0001b859: when ZF <> 1 goto %0001b851
0001b85a: goto %0001b855

0001b855:
0001b856: R1 := R1
0001b85c: goto %0001b858

0001b851:
0001b852: R1 := R4
0001b85b: goto %0001b858

0001b858:
0001b861: R30 := 0x40E5E0
0001b863: call @inet_ntop with return %0001b865

0001b865:
0001b869: R2 := R20
0001b86f: R1 := R21
0001b874: R0 := 2
0001b879: R30 := 0x40E5F0
0001b87b: call @__printf_chk with return %0001b87d

0001b87d:
0001b882: R19 := mem[R19 + 0x28, el]:u64
0001b887: when R19 <> 0 goto %0001b812
00035d51: goto %0001b88b

0001b88b:
0001b88d: goto %0001b7fb

0001b7fb:
0001b803: R0 := 1
00035d52: goto %00019dc2

00019dc2:
00019dc8: R1 := 0x42F000
00019dcf: R1 := mem[R1 + 0xFB8, el]:u64
00019dd6: R3 := mem[R31 + 0x68, el]:u64
00019ddd: R2 := mem[R1, el]:u64
00019de3: #486 := ~R2
00019de8: #487 := R3 + ~R2
00019dee: VF := extend:128[#487 + 1] <> extend:128[R3] + extend:128[#486] + 1
00019df4: CF := pad:128[#487 + 1] <> pad:128[R3] + pad:128[#486] + 1
00019df8: ZF := #487 + 1 = 0
00019dfc: NF := 63:63[#487 + 1]
00019e00: R3 := #487 + 1
00019e05: R2 := 0
00019e0b: when ZF <> 1 goto %00019e09
00035d53: goto %0001b751

00019e09:
00019e11: R30 := 0x40E644
00019e13: call @__stack_chk_fail with return %00035d54

00035d54:
00035d55: call @so_resolv_wildcard with noreturn

0001b751:
0001b755: #602 := R31 + 0x70
0001b75a: R29 := mem[#602, el]:u64
0001b75f: R30 := mem[#602 + 8, el]:u64
0001b765: #603 := R31 + 0x80
0001b76a: R19 := mem[#603, el]:u64
0001b76f: R20 := mem[#603 + 8, el]:u64
0001b775: #604 := R31 + 0x90
0001b77a: R21 := mem[#604, el]:u64
0001b77f: R22 := mem[#604 + 8, el]:u64
0001b785: R31 := R31 + 0xA0
0001b78a: R1 := 0
0001b78f: R2 := 0
0001b794: R3 := 0
0001b799: R4 := 0
0001b79e: R5 := 0
0001b7a3: R6 := 0
0001b7a8: R16 := 0
0001b7ad: R17 := 0
0001b7b2: call R30 with noreturn

00035d56: sub so_resolv_wildcard(so_resolv_wildcard_result)
00035f2d: so_resolv_wildcard_result :: out u32 = low:32[R0]

00019e15:
00019e19: R31 := R31 - 0x70
00019e1f: R5 := pad:64[31:0[R1]]
00019e24: R3 := 0x42F000
00019e2b: R3 := mem[R3 + 0xFB8, el]:u64
00019e30: R4 := 0x414000
00019e36: #488 := R31 + 0x40
00019e3c: mem := mem with [#488, el]:u64 <- R29
00019e42: mem := mem with [#488 + 8, el]:u64 <- R30
00019e48: R29 := R31 + 0x40
00019e4e: R4 := R4 + 0xB18
00019e54: #489 := R31 + 0x50
00019e5a: mem := mem with [#489, el]:u64 <- R19
00019e60: mem := mem with [#489 + 8, el]:u64 <- R20
00019e66: R19 := R0
00019e6c: R20 := pad:64[31:0[R2]]
00019e74: mem := mem with [R31 + 0x60, el]:u64 <- R21
00019e7a: R21 := R31 + 0x30
00019e7f: R2 := 2
00019e86: R0 := mem[R3, el]:u64
00019e8e: mem := mem with [R31 + 0x38, el]:u64 <- R0
00019e93: R0 := 0
00019e98: R3 := 6
00019e9e: R0 := R21
00019ea4: R1 := R3
00019ea9: R30 := 0x40E698
00019eab: call @__snprintf_chk with return %00019ead

00019ead:
00019eb2: mem := mem with [R31, el]:u64 <- 0
00019eb7: mem := mem with [R31 + 8, el]:u64 <- 0
00019ebd: R2 := R31
00019ec2: R0 := 1
00019eca: mem := mem with [R31 + 8, el]:u32 <- 31:0[R0]
00019ed0: #490 := R2 + 0x10
00019ed5: mem := mem with [#490, el]:u64 <- 0
00019eda: mem := mem with [#490 + 8, el]:u64 <- 0
00019ee0: #491 := R2 + 0x20
00019ee5: mem := mem with [#491, el]:u64 <- 0
00019eea: mem := mem with [#491 + 8, el]:u64 <- 0
00019ef0: when 31:0[R20] = 0 goto %00019eee
00035d57: goto %0001b749

0001b749:
0001b74f: mem := mem with [R31, el]:u32 <- 31:0[R0]
00035d58: goto %00019eee

00019eee:
00019ef7: R3 := R19
00019efd: R1 := R21
00019f02: R0 := 0
00019f07: R30 := 0x40E6C8
00019f09: call @getaddrinfo with return %00019f0b

00019f0b:
00019f0e: R1 := 0x42F000
00019f15: R1 := mem[R1 + 0xFB8, el]:u64
00019f1c: R3 := mem[R31 + 0x38, el]:u64
00019f23: R2 := mem[R1, el]:u64
00019f29: #492 := ~R2
00019f2e: #493 := R3 + ~R2
00019f34: VF := extend:128[#493 + 1] <> extend:128[R3] + extend:128[#492] + 1
00019f3a: CF := pad:128[#493 + 1] <> pad:128[R3] + pad:128[#492] + 1
00019f3e: ZF := #493 + 1 = 0
00019f42: NF := 63:63[#493 + 1]
00019f46: R3 := #493 + 1
00019f4b: R2 := 0
00019f51: when ZF <> 1 goto %00019f4f
00035d59: goto %0001b6f4

00019f4f:
00019f57: R30 := 0x40E718
00019f59: call @__stack_chk_fail with return %00019f5b

00019f5b:
00035d5a: call @so_connect with noreturn

0001b6f4:
0001b6f8: #600 := R31 + 0x40
0001b6fd: R29 := mem[#600, el]:u64
0001b702: R30 := mem[#600 + 8, el]:u64
0001b708: #601 := R31 + 0x50
0001b70d: R19 := mem[#601, el]:u64
0001b712: R20 := mem[#601 + 8, el]:u64
0001b719: R21 := mem[R31 + 0x60, el]:u64
0001b71f: R31 := R31 + 0x70
0001b724: R1 := 0
0001b729: R2 := 0
0001b72e: R3 := 0
0001b733: R4 := 0
0001b738: R5 := 0
0001b73d: R16 := 0
0001b742: R17 := 0
0001b747: call R30 with noreturn

00035d5b: sub socket(socket_domain, socket_type, socket_protocol, socket_result)
00035f2e: socket_domain :: in u32 = low:32[R0]
00035f2f: socket_type :: in u32 = low:32[R1]
00035f30: socket_protocol :: in u32 = low:32[R2]
00035f31: socket_result :: out u32 = low:32[R0]

0001b159:
00031007: R16 := 0x42F000
0003100e: R17 := mem[R16 + 0xE30, el]:u64
00031014: R16 := R16 + 0xE30
00031019: call R17 with noreturn

00035d5c: sub socks5_thread(socks5_thread_result)
00035f32: socks5_thread_result :: out u32 = low:32[R0]

00026dc0:
00026dc4: R31 := R31 - 0xC0
00026dc9: R1 := 0x42F000
00026dd0: R1 := mem[R1 + 0xFB8, el]:u64
00026dd6: #1116 := R31 + 0x60
00026ddc: mem := mem with [#1116, el]:u64 <- R29
00026de2: mem := mem with [#1116 + 8, el]:u64 <- R30
00026de8: R29 := R31 + 0x60
00026dee: #1117 := R31 + 0x90
00026df4: mem := mem with [#1117, el]:u64 <- R23
00026dfa: mem := mem with [#1117 + 8, el]:u64 <- R24
00026dff: R24 := 0x42F000
00026e06: R24 := mem[R24 + 0xFC8, el]:u64
00026e0c: #1118 := R31 + 0x70
00026e12: mem := mem with [#1118, el]:u64 <- R19
00026e18: mem := mem with [#1118 + 8, el]:u64 <- R20
00026e1e: R19 := R0
00026e24: #1119 := R31 + 0x80
00026e2a: mem := mem with [#1119, el]:u64 <- R21
00026e30: mem := mem with [#1119 + 8, el]:u64 <- R22
00026e36: R22 := R31 + 0x28
00026e3c: #1120 := R31 + 0xA0
00026e42: mem := mem with [#1120, el]:u64 <- R25
00026e48: mem := mem with [#1120 + 8, el]:u64 <- R26
00026e4f: R0 := mem[R24, el]:u64
00026e56: R2 := mem[R1, el]:u64
00026e5e: mem := mem with [R31 + 0x58, el]:u64 <- R2
00026e63: R2 := 0
00026e68: R30 := 0x40AB48
00026e6a: call @hlist_count with return %00026e6c

00026e6c:
00026e70: R25 := pad:64[31:0[R0]]
00026e75: V0 := 0
00026e7c: R0 := pad:64[mem[R19 + 0x10, el]:u16]
00026e82: R2 := R19 + 0x18
00026e88: R1 := R19 + 0x14
00026e8e: #1121 := 31:0[R0] - 2
00026e93: VF := extend:64[#1121] <> extend:64[31:0[R0]] - 2
00026e98: CF := pad:64[#1121] <> pad:64[31:0[R0]] + 0xFFFFFFFE
00026e9c: ZF := #1121 = 0
00026ea0: NF := 31:31[#1121]
00026ea5: R3 := 0x2E
00026eb3: when ZF <> 1 goto %00026eab
00026eb4: goto %00026eaf

00026eaf:
00026eb0: R1 := R1
00026eb6: goto %00026eb2

00026eab:
00026eac: R1 := R2
00026eb5: goto %00026eb2

00026eb2:
00026ebc: R2 := R22
00026ec4: mem := mem with [R22, el]:u128 <- V0
00026eca: mem := mem with [R22 + 0x10, el]:u128 <- V0
00026ed1: R23 := pad:64[mem[R19, el]:u32]
00026ed9: mem := mem with [R22 + 0x1E, el]:u128 <- V0
00026ede: R30 := 0x40AB7C
00026ee0: call @inet_ntop with return %00026ee2

00026ee2:
00026ee6: R0 := R19
00026eeb: R30 := 0x40AB84
00026eed: call @free with return %00026eef

00026eef:
00026ef2: R0 := 0xA
00026ef7: R30 := 0x40AB8C
00026ef9: call @zmalloc with return %00026efb

00026efb:
00026eff: R19 := R0
00026f04: R0 := 0x104
00026f09: R30 := 0x40AB98
00026f0b: call @zmalloc with return %00026f0d

00026f0d:
00026f11: R20 := R0
00026f16: R0 := 0x32
00026f1b: R30 := 0x40ABA4
00026f1d: call @zmalloc with return %00026f1f

00026f1f:
00026f23: R1 := R19
00026f29: R21 := R0
00026f2e: R2 := 2
00026f34: R0 := pad:64[31:0[R23]]
00026f39: R30 := 0x40ABB8
00026f3b: call @read with return %00026f3d

00026f3d:
00026f41: #1122 := 31:0[R0] - 2
00026f46: VF := extend:64[#1122] <> extend:64[31:0[R0]] - 2
00026f4b: CF := pad:64[#1122] <> pad:64[31:0[R0]] + 0xFFFFFFFE
00026f4f: ZF := #1122 = 0
00026f53: NF := 31:31[#1122]
00026f59: when ZF goto %00026f57
00035d5d: goto %00027c83

00026f57:
00026f61: R0 := pad:64[mem[R19]]
00026f67: #1123 := 31:0[R0] - 5
00026f6c: VF := extend:64[#1123] <> extend:64[31:0[R0]] - 5
00026f71: CF := pad:64[#1123] <> pad:64[31:0[R0]] + 0xFFFFFFFB
00026f75: ZF := #1123 = 0
00026f79: NF := 31:31[#1123]
00026f7f: when ZF goto %00026f7d
00035d5e: goto %00027c32

00026f7d:
00026f86: #1124 := R31 + 0xB0
00026f8c: mem := mem with [#1124, el]:u64 <- R27
00026f92: mem := mem with [#1124 + 8, el]:u64 <- R28
00026f99: R27 := pad:64[mem[R19 + 1]]
00026f9f: R28 := pad:64[31:0[R27] + 1]
00026fa5: R28 := extend:64[31:0[R28]]
00026fab: R0 := R28
00026fb0: R30 := 0x40ACF4
00026fb2: call @zmalloc with return %00026fb4

00026fb4:
00026fb8: R26 := R0
00026fbe: R3 := R28
00026fc4: R2 := pad:64[7:0[R27]]
00026fca: R0 := pad:64[31:0[R23]]
00026fd0: R1 := R26
00026fd5: R30 := 0x40AD0C
00026fd7: call @__read_chk with return %00026fd9

00026fd9:
00026fdd: #1125 := ~31:0[R0]
00026fe2: #1126 := 31:0[R27] + ~31:0[R0]
00026fe8: VF := extend:64[#1126 + 1] <> extend:64[31:0[R27]] +
          extend:64[#1125] + 1
00026fee: CF := pad:64[#1126 + 1] <> pad:64[31:0[R27]] + pad:64[#1125] + 1
00026ff2: ZF := #1126 + 1 = 0
00026ff6: NF := 31:31[#1126 + 1]
00026ffc: when ZF goto %00026ffa
00035d5f: goto %00027038

00026ffa:
00027003: when 31:0[R25] <> 0 goto %00027001
00035d60: goto %00027c26

00027001:
00027009: R0 := 0
0002700f: when 31:0[R27] = 0 goto %0002700d
00035d61: goto %00027c24

00027c24:
00035d62: goto %00027a15

00027c26:
00027c29: when 31:0[R27] = 0 goto %0002700d
00035d63: goto %00027c2d

00027c2d:
00027c30: R0 := 0
00035d64: goto %000271b9

000271b9:
000271c4: R1 := pad:64[mem[R26 + R0]]
000271c9: when 31:0[R1] <> 0 goto %00027190
00035d65: goto %000271cd

00027190:
00027194: R0 := R0 + 1
0002719a: #1131 := ~31:0[R0]
0002719f: #1132 := 31:0[R27] + ~31:0[R0]
000271a5: VF := extend:64[#1132 + 1] <> extend:64[31:0[R27]] +
          extend:64[#1131] + 1
000271ab: CF := pad:64[#1132 + 1] <> pad:64[31:0[R27]] + pad:64[#1131] + 1
000271af: ZF := #1132 + 1 = 0
000271b3: NF := 31:31[#1132 + 1]
000271bb: when NF = VF & ~ZF goto %000271b9
00035d66: goto %00027a0f

00027a0f:
00027a12: R0 := 0
00027a17: goto %00027a15

00027a15:
00027a1e: R25 := pad:64[mem[R26 + R0]]
00027a24: #1151 := 31:0[R25] - 2
00027a29: VF := extend:64[#1151] <> extend:64[31:0[R25]] - 2
00027a2e: CF := pad:64[#1151] <> pad:64[31:0[R25]] + 0xFFFFFFFE
00027a32: ZF := #1151 = 0
00027a36: NF := 31:31[#1151]
00027a3c: when ZF goto %00027a3a
00035d67: goto %00027afc

00027a3a:
00027a42: R3 := 0x205
00027a4a: mem := mem with [R19, el]:u16 <- 15:0[R3]
00027a50: R1 := R19
00027a56: R0 := pad:64[31:0[R23]]
00027a5b: R2 := 2
00027a60: R30 := 0x40AEEC
00027a62: call @write_wrapper with return %00027a64

00027a64:
00027a68: #1152 := 31:0[R0] - 2
00027a6d: VF := extend:64[#1152] <> extend:64[31:0[R0]] - 2
00027a72: CF := pad:64[#1152] <> pad:64[31:0[R0]] + 0xFFFFFFFE
00027a76: ZF := #1152 = 0
00027a7a: NF := 31:31[#1152]
00027a80: when ZF goto %00027a7e
00035d68: goto %00027adf

00027adf:
00027ae2: R2 := 0x414000
00027ae8: R1 := pad:64[31:0[R25]]
00027aee: R2 := R2 + 0xAA0
00027af3: R0 := 3
00027af8: R30 := 0x40AF08
00027afa: call @__syslog_chk with return %00027a7e

00027a7e:
00027a87: R1 := R19
00027a8d: R0 := pad:64[31:0[R23]]
00027a92: R2 := 2
00027a97: R30 := 0x40AF18
00027a99: call @read with return %00027a9b

00027a9b:
00027a9f: #1153 := 31:0[R0] - 2
00027aa4: VF := extend:64[#1153] <> extend:64[31:0[R0]] - 2
00027aa9: CF := pad:64[#1153] <> pad:64[31:0[R0]] + 0xFFFFFFFE
00027aad: ZF := #1153 = 0
00027ab1: NF := 31:31[#1153]
00027ab6: when ZF goto %0002738a
00035d69: goto %00027aba

0002738a:
0002738f: R27 := pad:64[mem[R19 + 1]]
00027395: R28 := pad:64[31:0[R27] + 1]
0002739b: R25 := extend:64[31:0[R28]]
000273a1: R0 := R25
000273a6: R30 := 0x40AF58
000273a8: call @zmalloc with return %000273aa

000273aa:
000273ae: R2 := R25
000273b4: R25 := R0
000273ba: R1 := R25
000273c0: R0 := pad:64[31:0[R23]]
000273c5: R30 := 0x40AF6C
000273c7: call @read with return %000273c9

000273c9:
000273cd: #1137 := ~31:0[R0]
000273d2: #1138 := 31:0[R28] + ~31:0[R0]
000273d8: VF := extend:64[#1138 + 1] <> extend:64[31:0[R28]] +
          extend:64[#1137] + 1
000273de: CF := pad:64[#1138 + 1] <> pad:64[31:0[R28]] + pad:64[#1137] + 1
000273e2: ZF := #1138 + 1 = 0
000273e6: NF := 31:31[#1138 + 1]
000273ec: when ZF <> 1 goto %000273ea
00035d6a: goto %00027400

00027400:
00027406: R4 := pad:64[mem[R25 + pad:64[31:0[R27]]]]
0002740e: mem := mem with [R25 + pad:64[31:0[R27]]] <- 0
00027414: R28 := pad:64[31:0[R4] + 1]
0002741c: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R4]
00027422: R28 := extend:64[31:0[R28]]
00027428: R0 := R28
0002742d: R30 := 0x40AF90
0002742f: call @zmalloc with return %00027431

00027431:
00027436: R4 := pad:64[mem[R31 + 0x1C, el]:u32]
0002743c: R27 := R0
00027442: R3 := R28
00027448: R0 := pad:64[31:0[R23]]
0002744e: R2 := pad:64[7:0[R4]]
00027454: R1 := R27
0002745c: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R4]
00027461: R30 := 0x40AFB0
00027463: call @__read_chk with return %00027465

00027465:
0002746a: R4 := pad:64[mem[R31 + 0x1C, el]:u32]
00027470: #1139 := ~31:0[R0]
00027475: #1140 := 31:0[R4] + ~31:0[R0]
0002747b: VF := extend:64[#1140 + 1] <> extend:64[31:0[R4]] +
          extend:64[#1139] + 1
00027481: CF := pad:64[#1140 + 1] <> pad:64[31:0[R4]] + pad:64[#1139] + 1
00027485: ZF := #1140 + 1 = 0
00027489: NF := 31:31[#1140 + 1]
0002748e: when ZF goto %000272b5
00035d6b: goto %00027492

000272b5:
000272ba: R0 := mem[R24, el]:u64
000272c2: mem := mem with [R27 + pad:64[31:0[R4]]] <- 0
000272c8: R1 := R25
000272cd: R30 := 0x40B00C
000272cf: call @hlist_get with return %000272d1

000272d1:
000272d5: R1 := R0
000272dc: R0 := mem[R24, el]:u64
000272e2: R24 := R1
000272e7: R30 := 0x40B01C
000272e9: call @hlist_count with return %000272eb

000272eb:
000272ee: R3 := 0
000272f4: when 31:0[R0] = 0 goto %000272f2
00035d6c: goto %0002785a

0002785a:
0002785d: R3 := 0xFF
00027862: when R24 = 0 goto %000272f2
00035d6d: goto %00027866

00027866:
0002786a: R0 := R24
00027870: R1 := R27
00027875: R30 := 0x40B038
00027877: call @strcmp with return %00027879

00027879:
0002787c: VF := 0
0002787f: CF := 1
00027883: ZF := 31:0[R0] = 0
00027887: NF := 31:31[R0]
00027893: when ZF goto %0002788c
00027894: goto %0002788f

0002788f:
00027890: R3 := 0xFFFFFFFF
00027896: goto %00027892

0002788c:
0002788d: R3 := 0
00027895: goto %00027892

00027892:
0002789c: R3 := pad:64[7:0[R3]]
00035d6e: goto %000272f2

000272f2:
000272fa: R4 := 1
00027302: mem := mem with [R19] <- 7:0[R4]
0002730a: mem := mem with [R19 + 1] <- 7:0[R3]
00027310: R1 := R19
00027316: R0 := pad:64[31:0[R23]]
0002731b: R2 := 2
00027320: R30 := 0x40B060
00027322: call @write_wrapper with return %00027324

00027324:
00027328: #1136 := 31:0[R0] - 2
0002732d: VF := extend:64[#1136] <> extend:64[31:0[R0]] - 2
00027332: CF := pad:64[#1136] <> pad:64[31:0[R0]] + 0xFFFFFFFE
00027336: ZF := #1136 = 0
0002733a: NF := 31:31[#1136]
00027340: when ZF goto %0002733e
00035d6f: goto %0002783e

0002783e:
00027841: R2 := 0x414000
00027846: R1 := 2
0002784c: R2 := R2 + 0xAD8
00027851: R0 := 3
00027856: R30 := 0x40B07C
00027858: call @__syslog_chk with return %0002733e

0002733e:
00027347: R0 := R27
0002734c: R30 := 0x40B084
0002734e: call @free with return %00027350

00027350:
00027354: R0 := R25
00027359: R30 := 0x40B08C
0002735b: call @free with return %0002735d

0002735d:
00027362: R0 := pad:64[mem[R19 + 1]]
00027367: when 31:0[R0] = 0 goto %0002720c
00035d70: goto %0002736b

0002736b:
0002736e: goto %0002736c

00027492:
00027496: R0 := R27
0002749b: R30 := 0x40AFC4
0002749d: call @free with return %000273ea

000273ea:
000273f3: R0 := R25
000273f8: R30 := 0x40AFCC
000273fa: call @free with return %000273fc

000273fc:
000273fe: goto %0002736c

00027aba:
00027abd: R3 := 0xFFFFFF01
00027ac5: mem := mem with [R19, el]:u16 <- 15:0[R3]
00027acb: R1 := R19
00027ad1: R0 := pad:64[31:0[R23]]
00027ad6: R2 := 2
00027adb: R30 := 0x40AF38
00027add: call @write_wrapper with return %0002736c

0002736c:
00027372: R25 := 0xFFFFFFFF
00027377: R24 := 0
0002737c: goto %0002737a

00027afc:
00027b00: R0 := R0 + 1
00027b06: #1154 := ~31:0[R0]
00027b0b: #1155 := 31:0[R27] + ~31:0[R0]
00027b11: VF := extend:64[#1155 + 1] <> extend:64[31:0[R27]] +
          extend:64[#1154] + 1
00027b17: CF := pad:64[#1155 + 1] <> pad:64[31:0[R27]] + pad:64[#1154] + 1
00027b1b: ZF := #1155 + 1 = 0
00027b1f: NF := 31:31[#1155 + 1]
00027b26: when NF = VF & ~ZF goto %00027a15
00035d71: goto %0002700d

0002700d:
00027015: R3 := 0xFFFFFF05
0002701d: mem := mem with [R19, el]:u16 <- 15:0[R3]
00027023: R1 := R19
00027029: R0 := pad:64[31:0[R23]]
0002702e: R2 := 2
00027033: R30 := 0x40AEA0
00027035: call @write_wrapper with return %00027037

00027037:
0002703a: goto %00027038

000271cd:
000271d0: R3 := 5
000271d8: mem := mem with [R19, el]:u16 <- 15:0[R3]
000271de: R1 := R19
000271e4: R0 := pad:64[31:0[R23]]
000271e9: R2 := 2
000271ee: R30 := 0x40AD78
000271f0: call @write_wrapper with return %000271f2

000271f2:
000271f6: #1133 := 31:0[R0] - 2
000271fb: VF := extend:64[#1133] <> extend:64[31:0[R0]] - 2
00027200: CF := pad:64[#1133] <> pad:64[31:0[R0]] + 0xFFFFFFFE
00027204: ZF := #1133 = 0
00027208: NF := 31:31[#1133]
0002720e: when ZF goto %0002720c
00035d72: goto %000279f3

000279f3:
000279f6: R2 := 0x414000
000279fb: R1 := 2
00027a01: R2 := R2 + 0xAA0
00027a06: R0 := 3
00027a0b: R30 := 0x40AD94
00027a0d: call @__syslog_chk with return %0002720c

0002720c:
00027215: R1 := R19
0002721b: R0 := pad:64[31:0[R23]]
00027220: R2 := 4
00027225: R30 := 0x40ADA4
00027227: call @read with return %00027229

00027229:
0002722d: #1134 := 31:0[R0] - 4
00027232: VF := extend:64[#1134] <> extend:64[31:0[R0]] - 4
00027237: CF := pad:64[#1134] <> pad:64[31:0[R0]] + 0xFFFFFFFC
0002723b: ZF := #1134 = 0
0002723f: NF := 31:31[#1134]
00027244: when ZF <> 1 goto %00027038
00035d73: goto %00027248

00027248:
0002724d: R0 := pad:64[mem[R19 + 1]]
00027253: #1135 := 31:0[R0] - 1
00027258: VF := extend:64[#1135] <> extend:64[31:0[R0]] - 1
0002725d: CF := pad:64[#1135] <> pad:64[31:0[R0]] + 0xFFFFFFFF
00027261: ZF := #1135 = 0
00027265: NF := 31:31[#1135]
0002726b: when ZF <> 1 goto %00027269
00035d74: goto %0002789e

0002789e:
000278a3: R0 := pad:64[mem[R19 + 3]]
000278aa: R1 := pad:64[31:2[R0].pad:2[0:0[R0]]]
000278b0: #1145 := 31:0[R1] - 1
000278b5: VF := extend:64[#1145] <> extend:64[31:0[R1]] - 1
000278ba: CF := pad:64[#1145] <> pad:64[31:0[R1]] + 0xFFFFFFFF
000278be: ZF := #1145 = 0
000278c2: NF := 31:31[#1145]
000278c7: when ZF <> 1 goto %00027269
00035d75: goto %000278cb

00027269:
00027272: R3 := R19
00027277: R4 := 0x205
0002727d: R4 := pad:64[0x100.15:0[R4]]
00027283: R1 := R19
00027289: R0 := pad:64[31:0[R23]]
0002728e: R2 := 0xA
00027296: mem := mem with [R3, el]:u32 <- 31:0[R4]
0002729a: R3 := R3 + 4
000272a1: mem := mem with [R19 + 4, el]:u32 <- 0
000272a8: mem := mem with [R3 + 4, el]:u16 <- 0
000272ad: R30 := 0x40AFF8
000272af: call @write_wrapper with return %000272b1

000272b1:
000272b3: goto %00027038

000278cb:
000278cf: #1146 := 31:0[R0] - 1
000278d4: VF := extend:64[#1146] <> extend:64[31:0[R0]] - 1
000278d9: CF := pad:64[#1146] <> pad:64[31:0[R0]] + 0xFFFFFFFF
000278dd: ZF := #1146 = 0
000278e1: NF := 31:31[#1146]
000278e6: when ZF goto %0002749f
00035d76: goto %000278ea

0002749f:
000274a2: R0 := 0xF
000274a7: R30 := 0x40B0A0
000274a9: call @zmalloc with return %000274ab

000274ab:
000274af: R27 := R0
000274b4: R3 := 0xF
000274ba: R0 := pad:64[31:0[R23]]
000274c0: R1 := R27
000274c5: R2 := 4
000274ca: R25 := 0xFFFFFFFF
000274cf: R24 := 0
000274d4: R30 := 0x40B0C0
000274d6: call @__read_chk with return %000274d8

000274d8:
000274dc: #1141 := 31:0[R0] - 4
000274e1: VF := extend:64[#1141] <> extend:64[31:0[R0]] - 4
000274e6: CF := pad:64[#1141] <> pad:64[31:0[R0]] + 0xFFFFFFFC
000274ea: ZF := #1141 = 0
000274ee: NF := 31:31[#1141]
000274f4: when ZF <> 1 goto %000274f2
00035d77: goto %0002750f

0002750f:
00027514: R7 := pad:64[mem[R27 + 2]]
00027519: R4 := 0x414000
00027520: R6 := pad:64[mem[R27 + 1]]
00027526: R4 := R4 + 0xB70
0002752d: R5 := pad:64[mem[R27]]
00027532: R3 := 0x104
00027539: R0 := pad:64[mem[R27 + 3]]
0002753f: R1 := R3
00027546: mem := mem with [R27 + 4] <- 0
0002754b: R2 := 2
00027553: mem := mem with [R31, el]:u32 <- 31:0[R0]
00027559: R0 := R20
0002755e: R30 := 0x40B0FC
00027560: call @__snprintf_chk with return %00027562

00027562:
00027566: R1 := R31 + 0x26
0002756c: R0 := pad:64[31:0[R23]]
00027571: R2 := 2
00027576: R30 := 0x40B10C
00027578: call @read with return %0002757a

0002757a:
0002757e: #1142 := 31:0[R0] - 2
00027583: VF := extend:64[#1142] <> extend:64[31:0[R0]] - 2
00027588: CF := pad:64[#1142] <> pad:64[31:0[R0]] + 0xFFFFFFFE
0002758c: ZF := #1142 = 0
00027590: NF := 31:31[#1142]
00027595: when ZF <> 1 goto %000274fe
00035d78: goto %00027599

000278ea:
000278ee: R24 := R31 + 0x26
000278f4: R0 := pad:64[31:0[R23]]
000278fa: R1 := R24
000278ff: R2 := 1
00027904: R30 := 0x40ADE4
00027906: call @read with return %00027908

00027908:
0002790c: #1147 := 31:0[R0] - 1
00027911: VF := extend:64[#1147] <> extend:64[31:0[R0]] - 1
00027916: CF := pad:64[#1147] <> pad:64[31:0[R0]] + 0xFFFFFFFF
0002791a: ZF := #1147 = 0
0002791e: NF := 31:31[#1147]
00027923: when ZF <> 1 goto %00027038
00035d79: goto %00027927

00027927:
0002792c: R25 := pad:64[mem[R31 + 0x26]]
00027932: R28 := pad:64[31:0[R25] + 0xB]
00027938: R28 := extend:64[31:0[R28]]
0002793e: R0 := R28
00027943: R30 := 0x40AE00
00027945: call @zmalloc with return %00027947

00027947:
0002794b: R27 := R0
00027951: R3 := R28
00027957: R2 := pad:64[7:0[R25]]
0002795d: R0 := pad:64[31:0[R23]]
00027963: R1 := R27
00027968: R30 := 0x40AE18
0002796a: call @__read_chk with return %0002796c

0002796c:
00027970: #1148 := ~31:0[R0]
00027975: #1149 := 31:0[R25] + ~31:0[R0]
0002797b: VF := extend:64[#1149 + 1] <> extend:64[31:0[R25]] +
          extend:64[#1148] + 1
00027981: CF := pad:64[#1149 + 1] <> pad:64[31:0[R25]] + pad:64[#1148] + 1
00027985: ZF := #1149 + 1 = 0
00027989: NF := 31:31[#1149 + 1]
0002798f: when ZF <> 1 goto %0002798d
00035d7a: goto %0002799c

0002799c:
000279a2: mem := mem with [R27 + pad:64[31:0[R25]]] <- 0
000279a8: R1 := R27
000279ad: R2 := 0x104
000279b3: R0 := R20
000279b8: R30 := 0x40AE34
000279ba: call @strlcpy with return %000279bc

000279bc:
000279c0: R1 := R24
000279c6: R0 := pad:64[31:0[R23]]
000279cb: R2 := 2
000279d0: R30 := 0x40AE44
000279d2: call @read with return %000279d4

000279d4:
000279d8: #1150 := 31:0[R0] - 2
000279dd: VF := extend:64[#1150] <> extend:64[31:0[R0]] - 2
000279e2: CF := pad:64[#1150] <> pad:64[31:0[R0]] + 0xFFFFFFFE
000279e6: ZF := #1150 = 0
000279ea: NF := 31:31[#1150]
000279ef: when ZF goto %00027599
00035d7b: goto %0002798d

00027599:
0002759d: R0 := R20
000275a2: R30 := 0x40B11C
000275a4: call @noproxy_match with return %000275a6

000275a6:
000275aa: when 31:0[R0] = 0 goto %000275a8
00035d7c: goto %00027809

000275a8:
000275b2: R5 := pad:64[mem[R31 + 0x26, el]:u16]
000275b7: R3 := 0x32
000275bc: R4 := 0x414000
000275c2: R1 := R3
000275cb: R5 := pad:64[23:16[R5].31:24[R5].7:0[R5].15:8[R5]]
000275d1: R4 := R4 + 0xB18
000275d7: R5 := pad:64[15:0[R5]]
000275dc: R2 := 2
000275e2: R0 := R21
000275e7: R30 := 0x40B1D8
000275e9: call @__snprintf_chk with return %000275eb

000275eb:
000275ef: R0 := R20
000275f4: R30 := 0x40B1E0
000275f6: call @strdup with return %000275f8

000275f8:
000275fc: R28 := R0
00027601: R2 := 0x104
00027607: R0 := R20
0002760c: R1 := 0x414000
00027612: R1 := R1 + 0x400
00027617: R30 := 0x40B1F8
00027619: call @strlcat with return %0002761b

0002761b:
0002761f: R1 := R21
00027624: R2 := 0x104
0002762a: R0 := R20
0002762f: R30 := 0x40B208
00027631: call @strlcat with return %00027633

00027633:
00027636: R30 := 0x40B20C
00027638: call @new_auth with return %0002763a

0002763a:
0002763e: R24 := R0
00027644: R2 := R28
0002764a: R1 := R20
0002764f: R30 := 0x40B21C
00027651: call @proxy_connect with return %00027653

00027653:
00027657: R25 := pad:64[31:0[R0]]
0002765d: #1143 := 31:0[R0] + 2
00027662: VF := extend:64[#1143] <> extend:64[31:0[R0]] + 2
00027667: CF := pad:64[#1143] <> pad:64[31:0[R0]] + 2
0002766b: ZF := #1143 = 0
0002766f: NF := 31:31[#1143]
00027675: when ZF goto %00027673
00035d7d: goto %000277dc

00027673:
0002767d: R1 := pad:64[mem[R31 + 0x26, el]:u16]
00027683: R0 := R28
0002768c: R1 := pad:64[23:16[R1].31:24[R1].7:0[R1].15:8[R1]]
00027692: R1 := pad:64[15:0[R1]]
00027697: R30 := 0x40B2AC
00027699: call @host_connect with return %0002769b

0002769b:
0002769f: R1 := pad:64[~31:0[R0]]
000276a5: R25 := pad:64[31:0[R0]]
000276ab: R1 := pad:64[31:31[R1]]
000276b0: goto %000276ae

000277dc:
000277e0: when ~31:31[R0] goto %000277de
00035d7e: goto %000277fc

000277de:
000277e7: R1 := R24
000277ed: R2 := R20
000277f2: R30 := 0x40B27C
000277f4: call @prepare_http_connect with return %000277f6

000277f6:
000277fa: R1 := pad:64[31:0[R0]]
00035d7f: goto %000276ae

000276ae:
000276b5: R0 := R28
000276bd: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R1]
000276c2: R30 := 0x40B28C
000276c4: call @free with return %000276c6

000276c6:
000276cb: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
000276d1: when 31:0[R1] <> 0 goto %000276cf
00035d80: goto %00027791

00027791:
00027794: goto %00027792

000277fc:
00027800: R0 := R28
00027805: R30 := 0x40B234
00027807: call @free with return %00027792

00027809:
0002780e: R1 := pad:64[mem[R31 + 0x26, el]:u16]
00027814: R0 := R20
00027819: R24 := 0
00027822: R1 := pad:64[23:16[R1].31:24[R1].7:0[R1].15:8[R1]]
00027828: R1 := pad:64[15:0[R1]]
0002782d: R30 := 0x40B138
0002782f: call @host_connect with return %00027831

00027831:
00027835: R25 := pad:64[31:0[R0]]
0002783a: when 31:31[R0] goto %00027792
00035d81: goto %000276cf

00027792:
00027799: R3 := R19
0002779e: R4 := 0x105
000277a4: R4 := pad:64[0x100.15:0[R4]]
000277aa: R1 := R19
000277b0: R0 := pad:64[31:0[R23]]
000277b5: R2 := 0xA
000277bd: mem := mem with [R3, el]:u32 <- 31:0[R4]
000277c1: R3 := R3 + 4
000277c8: mem := mem with [R19 + 4, el]:u32 <- 0
000277cf: mem := mem with [R3 + 4, el]:u16 <- 0
000277d4: R30 := 0x40B25C
000277d6: call @write_wrapper with return %000277d8

000277d8:
000277da: goto %000274f2

000276cf:
000276d8: R3 := R19
000276dd: R4 := 5
000276e3: R4 := pad:64[0x100.15:0[R4]]
000276e9: R1 := R19
000276ef: R0 := pad:64[31:0[R23]]
000276f4: R2 := 0xA
000276fc: mem := mem with [R3, el]:u32 <- 31:0[R4]
00027700: R3 := R3 + 4
00027707: mem := mem with [R19 + 4, el]:u32 <- 0
0002770e: mem := mem with [R3 + 4, el]:u16 <- 0
00027713: R30 := 0x40B168
00027715: call @write_wrapper with return %00027717

00027717:
0002771b: #1144 := 31:0[R0] - 0xA
00027720: VF := extend:64[#1144] <> extend:64[31:0[R0]] - 0xA
00027725: CF := pad:64[#1144] <> pad:64[31:0[R0]] + 0xFFFFFFF6
00027729: ZF := #1144 = 0
0002772d: NF := 31:31[#1144]
00027733: when ZF goto %00027731
00035d82: goto %00027775

00027775:
00027778: R2 := 0x414000
0002777d: R1 := 2
00027783: R2 := R2 + 0xB20
00027788: R0 := 3
0002778d: R30 := 0x40B184
0002778f: call @__syslog_chk with return %00027731

00027731:
0002773a: R3 := R22
00027740: R4 := R20
00027745: R2 := 0x414000
0002774b: R2 := R2 + 0xB60
00027750: R1 := 2
00027755: R0 := 7
0002775a: R30 := 0x40B1A0
0002775c: call @__syslog_chk with return %0002775e

0002775e:
00027762: R1 := pad:64[31:0[R25]]
00027768: R0 := pad:64[31:0[R23]]
0002776d: R30 := 0x40B1AC
0002776f: call @tunnel with return %00027771

00027771:
00027773: goto %000274f2

0002798d:
00027995: R25 := 0xFFFFFFFF
0002799a: R24 := 0
00035d83: goto %000274f2

000274f2:
000274fa: when R27 = 0 goto %00027047
00035d84: goto %000274fe

000274fe:
00027502: R0 := R27
00027507: R30 := 0x40AE60
00027509: call @free with return %0002750b

0002750b:
0002750d: goto %00027047

00027038:
0002703e: R25 := 0xFFFFFFFF
00027043: R24 := 0
00035d85: goto %00027047

00027047:
0002704b: when R26 = 0 goto %00027049
00035d86: goto %0002737a

0002737a:
00027381: R0 := R26
00027386: R30 := 0x40AD2C
00027388: call @free with return %00027049

00027049:
00027052: when R20 = 0 goto %00027050
00035d87: goto %00027bfc

00027bfc:
00027c00: R0 := R20
00027c05: R30 := 0x40AD38
00027c07: call @free with return %00027050

00027050:
00027059: when R21 = 0 goto %00027057
00035d88: goto %00027bdb

00027057:
00027060: #1127 := R31 + 0xB0
00027065: R27 := mem[#1127, el]:u64
0002706a: R28 := mem[#1127 + 8, el]:u64
0002706f: goto %0002706d

00027bdb:
00027bdf: R0 := R21
00027be4: R30 := 0x40AD44
00027be6: call @free with return %00027be8

00027be8:
00027bec: #1161 := R31 + 0xB0
00027bf1: R27 := mem[#1161, el]:u64
00027bf6: R28 := mem[#1161 + 8, el]:u64
00027bfa: goto %0002706d

00027c32:
00027c36: when R20 <> 0 goto %00027c34
00035d89: goto %00027c6b

00027c6b:
00027c6e: when R21 = 0 goto %0002717a
00035d8a: goto %00027c72

00027c72:
00027c76: R0 := R21
00027c7b: R30 := 0x40AC98
00027c7d: call @free with return %00027c7f

00027c7f:
00027c81: goto %0002717a

00027c83:
00027c86: when R20 = 0 goto %00027c09
00035d8b: goto %00027c34

00027c09:
00027c0c: when R21 = 0 goto %00027178
00035d8c: goto %00027c10

00027c10:
00027c14: R0 := R21
00027c19: R30 := 0x40AEB0
00027c1b: call @free with return %00027c1d

00027c1d:
00027c20: when R19 = 0 goto %00027086
00035d8d: goto %0002717a

00027c34:
00027c3d: R0 := R20
00027c42: R30 := 0x40ABCC
00027c44: call @free with return %00027c46

00027c46:
00027c49: when R21 = 0 goto %00027178
00035d8e: goto %00027c4d

00027c4d:
00027c51: R0 := R21
00027c56: R30 := 0x40ABD8
00027c58: call @free with return %00027c5a

00027c5a:
00027c5d: when R19 = 0 goto %00027086
00035d8f: goto %00027c61

00027c61:
00027c64: R25 := 0xFFFFFFFF
00027c69: R24 := 0
00035d90: goto %0002706d

0002706d:
00027074: R0 := R19
00027079: R30 := 0x40ABEC
0002707b: call @free with return %0002707d

0002707d:
00027081: when R24 = 0 goto %0002707f
00035d91: goto %00027bc8

00027bc8:
00027bcc: R0 := R24
00027bd1: R30 := 0x40ABF8
00027bd3: call @free with return %0002707f

0002707f:
00027088: when 31:31[R25] goto %00027086
00035d92: goto %00027bbb

00027bbb:
00027bbf: R0 := pad:64[31:0[R25]]
00027bc4: R30 := 0x40AC04
00027bc6: call @close with return %00027086

00027086:
0002708f: R0 := pad:64[31:0[R23]]
00027094: R30 := 0x40AC0C
00027096: call @close with return %00027098

00027098:
0002709b: R0 := 0x42F000
000270a2: R0 := mem[R0 + 0xFD0, el]:u64
000270a9: R0 := pad:64[mem[R0, el]:u32]
000270af: when 31:0[R0] = 0 goto %000270ad
00035d93: goto %00027113

000270ad:
000270b5: R0 := 0x42F000
000270bc: R0 := mem[R0 + 0xEF0, el]:u64
000270c1: R19 := 0x42F000
000270c8: R19 := mem[R19 + 0xF40, el]:u64
000270cd: R30 := 0x40ACB0
000270cf: call @pthread_mutex_lock with return %000270d1

000270d1:
000270d4: R30 := 0x40ACB4
000270d6: call @pthread_self with return %000270d8

000270d8:
000270dc: R1 := R0
000270e3: R0 := mem[R19, el]:u64
000270e8: R2 := 0
000270ed: R30 := 0x40ACC4
000270ef: call @plist_add with return %000270f1

000270f1:
000270f5: R1 := R0
000270fa: R0 := 0x42F000
00027101: R0 := mem[R0 + 0xEF0, el]:u64
00027109: mem := mem with [R19, el]:u64 <- R1
0002710e: R30 := 0x40ACD8
00027110: call @pthread_mutex_unlock with return %00027112

00027112:
00027115: goto %00027113

00027113:
00027119: R0 := 0x42F000
00027120: R0 := mem[R0 + 0xFB8, el]:u64
00027127: R2 := mem[R31 + 0x58, el]:u64
0002712e: R1 := mem[R0, el]:u64
00027134: #1128 := ~R1
00027139: #1129 := R2 + ~R1
0002713f: VF := extend:128[#1129 + 1] <> extend:128[R2] + extend:128[#1128] +
          1
00027145: CF := pad:128[#1129 + 1] <> pad:128[R2] + pad:128[#1128] + 1
00027149: ZF := #1129 + 1 = 0
0002714d: NF := 63:63[#1129 + 1]
00027151: R2 := #1129 + 1
00027156: R1 := 0
0002715c: when ZF <> 1 goto %0002715a
00035d94: goto %00027b2e

0002715a:
00027163: #1130 := R31 + 0xB0
00027169: mem := mem with [#1130, el]:u64 <- R27
0002716f: mem := mem with [#1130 + 8, el]:u64 <- R28
00027174: R30 := 0x40B268
00027176: call @__stack_chk_fail with return %00027178

00027178:
0002717c: when R19 <> 0 goto %0002717a
00035d95: goto %00027b2a

00027b2a:
00027b2c: goto %00027086

0002717a:
00027183: R0 := R19
00027188: R30 := 0x40AEBC
0002718a: call @free with return %0002718c

0002718c:
0002718e: goto %00027086

00027b2e:
00027b32: #1156 := R31 + 0x60
00027b37: R29 := mem[#1156, el]:u64
00027b3c: R30 := mem[#1156 + 8, el]:u64
00027b41: R0 := 0
00027b47: #1157 := R31 + 0x70
00027b4c: R19 := mem[#1157, el]:u64
00027b51: R20 := mem[#1157 + 8, el]:u64
00027b57: #1158 := R31 + 0x80
00027b5c: R21 := mem[#1158, el]:u64
00027b61: R22 := mem[#1158 + 8, el]:u64
00027b67: #1159 := R31 + 0x90
00027b6c: R23 := mem[#1159, el]:u64
00027b71: R24 := mem[#1159 + 8, el]:u64
00027b77: #1160 := R31 + 0xA0
00027b7c: R25 := mem[#1160, el]:u64
00027b81: R26 := mem[#1160 + 8, el]:u64
00027b87: R31 := R31 + 0xC0
00027b8c: R1 := 0
00027b91: R2 := 0
00027b96: R3 := 0
00027b9b: R4 := 0
00027ba0: R5 := 0
00027ba5: R6 := 0
00027baa: R7 := 0
00027baf: R16 := 0
00027bb4: R17 := 0
00027bb9: call R30 with noreturn

00035d96: sub srandom(srandom_arg1)
00035f33: srandom_arg1 :: in u32 = low:32[R0]

0002f73d:
000310b7: R16 := 0x42F000
000310be: R17 := mem[R16 + 0xE70, el]:u64
000310c4: R16 := R16 + 0xE70
000310c9: call R17 with noreturn

00035d97: sub strcasecmp(strcasecmp_s1, strcasecmp_s2, strcasecmp_result)
00035f34: strcasecmp_s1 :: in u64 = R0
00035f35: strcasecmp_s2 :: in u64 = R1
00035f36: strcasecmp_result :: out u32 = low:32[R0]

000117b0:
00030c97: R16 := 0x42F000
00030c9e: R17 := mem[R16 + 0xCF0, el]:u64
00030ca4: R16 := R16 + 0xCF0
00030ca9: call R17 with noreturn

00035d98: sub strchr(strchr_s, strchr_c, strchr_result)
00035f37: strchr_s :: in u64 = R0
00035f38: strchr_c :: in u32 = low:32[R1]
00035f39: strchr_result :: out u64 = R0

0002042d:
00030f57: R16 := 0x42F000
00030f5e: R17 := mem[R16 + 0xDF0, el]:u64
00030f64: R16 := R16 + 0xDF0
00030f69: call R17 with noreturn

00035d99: sub strcmp(strcmp_s1, strcmp_s2, strcmp_result)
00035f3a: strcmp_s1 :: in u64 = R0
00035f3b: strcmp_s2 :: in u64 = R1
00035f3c: strcmp_result :: out u32 = low:32[R0]

0001d92d:
00030e65: R16 := 0x42F000
00030e6c: R17 := mem[R16 + 0xD98, el]:u64
00030e72: R16 := R16 + 0xD98
00030e77: call R17 with noreturn

00035d9a: sub strcspn(strcspn_s, strcspn_reject, strcspn_result)
00035f3d: strcspn_s :: in u64 = R0
00035f3e: strcspn_reject :: in u64 = R1
00035f3f: strcspn_result :: out u64 = R0

000198e9:
00031125: R16 := 0x42F000
0003112c: R17 := mem[R16 + 0xE98, el]:u64
00031132: R16 := R16 + 0xE98
00031137: call R17 with noreturn

00035d9b: sub strdup(strdup_s, strdup_result)
00035f40: strdup_s :: in u64 = R0
00035f41: strdup_result :: out u64 = R0

0001100c:
00030cd9: R16 := 0x42F000
00030ce0: R17 := mem[R16 + 0xD08, el]:u64
00030ce6: R16 := R16 + 0xD08
00030ceb: call R17 with noreturn

00035d9c: sub strerror(strerror_result)
00035f42: strerror_result :: out u32 = low:32[R0]

0001208b:
00030cef: R16 := 0x42F000
00030cf6: R17 := mem[R16 + 0xD10, el]:u64
00030cfc: R16 := R16 + 0xD10
00030d01: call R17 with noreturn

00035d9d: sub strlcat(strlcat_result)
00035f43: strlcat_result :: out u32 = low:32[R0]

0001ca37:
00030e0d: R16 := 0x42F000
00030e14: R17 := mem[R16 + 0xD78, el]:u64
00030e1a: R16 := R16 + 0xD78
00030e1f: call R17 with noreturn

00035d9e: sub strlcpy(strlcpy_result)
00035f44: strlcpy_result :: out u32 = low:32[R0]

00018e2f:
00030f15: R16 := 0x42F000
00030f1c: R17 := mem[R16 + 0xDD8, el]:u64
00030f22: R16 := R16 + 0xDD8
00030f27: call R17 with noreturn

00035d9f: sub strlen(strlen_s, strlen_result)
00035f45: strlen_s :: in u64 = R0
00035f46: strlen_result :: out u64 = R0

000112c8:
0003097f: R16 := 0x42F000
00030986: R17 := mem[R16 + 0xBD0, el]:u64
0003098c: R16 := R16 + 0xBD0
00030991: call R17 with noreturn

00035da0: sub strncasecmp(strncasecmp_s1, strncasecmp_s2, strncasecmp_n, strncasecmp_result)
00035f47: strncasecmp_s1 :: in u64 = R0
00035f48: strncasecmp_s2 :: in u64 = R1
00035f49: strncasecmp_n :: in u64 = R2
00035f4a: strncasecmp_result :: out u32 = low:32[R0]

00020b6e:
00030f2b: R16 := 0x42F000
00030f32: R17 := mem[R16 + 0xDE0, el]:u64
00030f38: R16 := R16 + 0xDE0
00030f3d: call R17 with noreturn

00035da1: sub strncpy(strncpy_dst, strncpy_src, strncpy_n, strncpy_result)
00035f4b: strncpy_dst :: in out u64 = R0
00035f4c: strncpy_src :: in u64 = R1
00035f4d: strncpy_n :: in u64 = R2
00035f4e: strncpy_result :: out u64 = R0

0001c763:
000310e3: R16 := 0x42F000
000310ea: R17 := mem[R16 + 0xE80, el]:u64
000310f0: R16 := R16 + 0xE80
000310f5: call R17 with noreturn

00035da2: sub strrchr(strrchr_s, strrchr_c, strrchr_result)
00035f4f: strrchr_s :: in u64 = R0
00035f50: strrchr_c :: in u32 = low:32[R1]
00035f51: strrchr_result :: out u64 = R0

0001d711:
00030d47: R16 := 0x42F000
00030d4e: R17 := mem[R16 + 0xD30, el]:u64
00030d54: R16 := R16 + 0xD30
00030d59: call R17 with noreturn

00035da3: sub strsep(strsep_stringp, strsep_delim, strsep_result)
00035f52: strsep_stringp :: in out u64 = R0
00035f53: strsep_delim :: in u64 = R1
00035f54: strsep_result :: out u64 = R0

00029bcd:
00030e39: R16 := 0x42F000
00030e40: R17 := mem[R16 + 0xD88, el]:u64
00030e46: R16 := R16 + 0xD88
00030e4b: call R17 with noreturn

00035da4: sub strstr(strstr_haystack, strstr_needle, strstr_result)
00035f55: strstr_haystack :: in u64 = R0
00035f56: strstr_needle :: in u64 = R1
00035f57: strstr_result :: out u64 = R0

00018224:
000310a1: R16 := 0x42F000
000310a8: R17 := mem[R16 + 0xE68, el]:u64
000310ae: R16 := R16 + 0xE68
000310b3: call R17 with noreturn

00035da5: sub strtok_r(strtok_r_str, strtok_r_delim, strtok_r_saveptr, strtok_r_result)
00035f58: strtok_r_str :: in out u64 = R0
00035f59: strtok_r_delim :: in u64 = R1
00035f5a: strtok_r_saveptr :: in out u64 = R2
00035f5b: strtok_r_result :: out u64 = R0

0001f7da:
00030b37: R16 := 0x42F000
00030b3e: R17 := mem[R16 + 0xC70, el]:u64
00030b44: R16 := R16 + 0xC70
00030b49: call R17 with noreturn

00035da6: sub strtol(strtol_nptr, strtol_endptr, strtol_base, strtol_result)
00035f5c: strtol_nptr :: in u64 = R0
00035f5d: strtol_endptr :: in out u64 = R1
00035f5e: strtol_base :: in u32 = low:32[R2]
00035f5f: strtol_result :: out u64 = R0

0001e760:
00030e91: R16 := 0x42F000
00030e98: R17 := mem[R16 + 0xDA8, el]:u64
00030e9e: R16 := R16 + 0xDA8
00030ea3: call R17 with noreturn

00035da7: sub strtoll(strtoll_nptr, strtoll_endptr, strtoll_base, strtoll_result)
00035f60: strtoll_nptr :: in u64 = R0
00035f61: strtoll_endptr :: in out u64 = R1
00035f62: strtoll_base :: in u32 = low:32[R2]
00035f63: strtoll_result :: out u64 = R0

00028b2e:
00030a03: R16 := 0x42F000
00030a0a: R17 := mem[R16 + 0xC00, el]:u64
00030a10: R16 := R16 + 0xC00
00030a15: call R17 with noreturn

00035da8: sub strtoul(strtoul_nptr, strtoul_endptr, strtoul_base, strtoul_result)
00035f64: strtoul_nptr :: in u64 = R0
00035f65: strtoul_endptr :: in out u64 = R1
00035f66: strtoul_base :: in u32 = low:32[R2]
00035f67: strtoul_result :: out u64 = R0

0002dabc:
00030969: R16 := 0x42F000
00030970: R17 := mem[R16 + 0xBC8, el]:u64
00030976: R16 := R16 + 0xBC8
0003097b: call R17 with noreturn

00035da9: sub substr(substr_result)
00035f68: substr_result :: out u32 = low:32[R0]

00010dc0:
00010dc4: #9 := R31 - 0x30
00010dca: mem := mem with [#9, el]:u64 <- R29
00010dd0: mem := mem with [#9 + 8, el]:u64 <- R30
00010dd4: R31 := #9
00010dda: R29 := R31
00010de0: #10 := R31 + 0x10
00010de6: mem := mem with [#10, el]:u64 <- R19
00010dec: mem := mem with [#10 + 8, el]:u64 <- R20
00010df4: mem := mem with [R31 + 0x20, el]:u64 <- R21
00010dfa: when R0 = 0 goto %00010df8
00035daa: goto %00018ccf

00018ccf:
00018cd3: R20 := pad:64[31:0[R1]]
00018cd9: when 31:31[R1] goto %00018cd7
00035dab: goto %00018d0f

00018d0f:
00018d13: R19 := pad:64[31:0[R2]]
00018d19: when 31:31[R2] goto %00018d17
00035dac: goto %00018d4f

00018d17:
00018d1f: R3 := 0x417000
00018d25: R3 := R3 + 0x3F0
00018d2a: R1 := 0x416000
00018d2f: R0 := 0x416000
00018d35: R3 := R3 + 0x28
00018d3b: R1 := R1 + 0xF58
00018d41: R0 := R0 + 0xFF8
00018d46: R2 := 0x1F8
00018d4b: R30 := 0x40FB78
00018d4d: call @__assert_fail with return %00018cd7

00018cd7:
00018cdf: R3 := 0x417000
00018ce5: R3 := R3 + 0x3F0
00018cea: R1 := 0x416000
00018cef: R0 := 0x416000
00018cf5: R3 := R3 + 0x28
00018cfb: R1 := R1 + 0xF58
00018d01: R0 := R0 + 0xFE8
00018d06: R2 := 0x1F7
00018d0b: R30 := 0x40FB9C
00018d0d: call @__assert_fail with return %00010df8

00010df8:
00010e00: R3 := 0x417000
00010e06: R3 := R3 + 0x3F0
00010e0b: R1 := 0x416000
00010e10: R0 := 0x416000
00010e16: R3 := R3 + 0x28
00010e1c: R1 := R1 + 0xF58
00010e22: R0 := R0 + 0xFD8
00010e27: R2 := 0x1F6
00010e2c: R30 := 0x40FBC0
00010e2f: call @__assert_fail with return %00035dad

00035dad:
00035dae: call @copy_rr_data with noreturn

00018d4f:
00018d53: R21 := R0
00018d58: R30 := 0x40FADC
00018d5a: call @strlen with return %00018d5c

00018d5c:
00018d5f: VF := 0
00018d62: CF := 1
00018d66: ZF := 31:0[R19] = 0
00018d6a: NF := 31:31[R19]
00018d71: R3 := pad:64[31:0[R0] + ~31:0[R20] + 1]
00018d7f: when ZF <> 1 goto %00018d77
00018d80: goto %00018d7b

00018d7b:
00018d7c: R19 := pad:64[31:0[R0]]
00018d82: goto %00018d7e

00018d77:
00018d78: R19 := pad:64[31:0[R19]]
00018d81: goto %00018d7e

00018d7e:
00018d88: #408 := ~31:0[R19]
00018d8d: #409 := 31:0[R3] + ~31:0[R19]
00018d93: VF := extend:64[#409 + 1] <> extend:64[31:0[R3]] + extend:64[#408]
          + 1
00018d99: CF := pad:64[#409 + 1] <> pad:64[31:0[R3]] + pad:64[#408] + 1
00018d9d: ZF := #409 + 1 = 0
00018da1: NF := 31:31[#409 + 1]
00018db1: when ~(NF = VF & ~ZF) goto %00018da9
00018db2: goto %00018dad

00018dad:
00018dae: R3 := pad:64[31:0[R19]]
00018db4: goto %00018db0

00018da9:
00018daa: R3 := pad:64[31:0[R3]]
00018db3: goto %00018db0

00018db0:
00018db9: VF := 0
00018dbc: CF := 1
00018dc0: ZF := 31:0[R3] = 0
00018dc4: NF := 31:31[R3]
00018dcc: when ~(NF = VF & ~ZF) goto %00018dca
00035daf: goto %00018dff

00018dca:
00018dd3: #410 := R31 + 0x10
00018dd8: R19 := mem[#410, el]:u64
00018ddd: R20 := mem[#410 + 8, el]:u64
00018de2: R0 := 1
00018de9: R21 := mem[R31 + 0x20, el]:u64
00018df0: R29 := mem[R31, el]:u64
00018df5: R30 := mem[R31 + 8, el]:u64
00018df9: R31 := R31 + 0x30
00018dfd: call @zmalloc with noreturn

00018dff:
00018e03: R3 := pad:64[31:0[R3] + 1]
00018e09: R19 := extend:64[31:0[R3]]
00018e0f: R0 := R19
00018e14: R30 := 0x40FB08
00018e16: call @zmalloc with return %00018e18

00018e18:
00018e1d: R1 := R21 + extend:64[31:0[R20]]
00018e23: R2 := R19
00018e29: R19 := R0
00018e2e: R30 := 0x40FB18
00018e31: call @strlcpy with return %00018e33

00018e33:
00018e38: R21 := mem[R31 + 0x20, el]:u64
00018e3e: R0 := R19
00018e44: #411 := R31 + 0x10
00018e49: R19 := mem[#411, el]:u64
00018e4e: R20 := mem[#411 + 8, el]:u64
00018e55: R29 := mem[R31, el]:u64
00018e5a: R30 := mem[R31 + 8, el]:u64
00018e5e: R31 := R31 + 0x30
00018e63: R1 := 0
00018e68: R2 := 0
00018e6d: R3 := 0
00018e72: R16 := 0
00018e77: R17 := 0
00018e7c: call R30 with noreturn

00035db0: sub tcgetattr(tcgetattr_result)
00035f69: tcgetattr_result :: out u32 = low:32[R0]

0002c591:
00030ab3: R16 := 0x42F000
00030aba: R17 := mem[R16 + 0xC40, el]:u64
00030ac0: R16 := R16 + 0xC40
00030ac5: call R17 with noreturn

00035db1: sub tcsetattr(tcsetattr_result)
00035f6a: tcsetattr_result :: out u32 = low:32[R0]

0002c5fc:
00031049: R16 := 0x42F000
00031050: R17 := mem[R16 + 0xE48, el]:u64
00031056: R16 := R16 + 0xE48
0003105b: call R17 with noreturn

00035db2: sub time(time_result)
00035f6b: time_result :: out u32 = low:32[R0]

0001bfa7:
00030b63: R16 := 0x42F000
00030b6a: R17 := mem[R16 + 0xC80, el]:u64
00030b70: R16 := R16 + 0xC80
00030b75: call R17 with noreturn

00035db3: sub to_base64(to_base64_result)
00035f6c: to_base64_result :: out u32 = low:32[R0]

00011d3c:
00011d40: #67 := R2 - 2
00011d45: VF := extend:128[#67] <> extend:128[R2] - 2
00011d4a: CF := pad:128[#67] <> pad:128[R2] + 0xFFFFFFFFFFFFFFFE
00011d4e: ZF := #67 = 0
00011d52: NF := 63:63[#67]
00011d58: #68 := R3 - 0xA
00011d5d: #69 := CF & ~ZF
00011d63: VF := #69 & extend:128[#68] <> extend:128[R3] - 0xA
00011d69: CF := #69 & pad:128[#68] <> pad:128[R3] + 0xFFFFFFFFFFFFFFF6
00011d6e: ZF := #69 & #68 = 0
00011d73: NF := #69 & 63:63[#68]
00011d7a: when ~(CF & ~ZF) goto %00011d78
00035db4: goto %000179fa

000179fa:
000179fd: R4 := 0x417000
00017a03: R4 := R4 + 0x3F0
00017a09: R4 := R4 + 0x2C0
00035db5: goto %00017a0b

00017a0b:
00017a10: R5 := pad:64[mem[R1]]
00017a16: R0 := R0 + 4
00017a1c: R2 := R2 - 3
00017a22: R3 := R3 - 4
00017a28: #335 := R2 - 2
00017a2d: VF := extend:128[#335] <> extend:128[R2] - 2
00017a32: CF := pad:128[#335] <> pad:128[R2] + 0xFFFFFFFFFFFFFFFE
00017a36: ZF := #335 = 0
00017a3a: NF := 63:63[#335]
00017a40: R1 := R1 + 3
00017a46: R5 := pad:64[31:2[R5]]
00017a4c: #336 := R3 - 0xA
00017a51: #337 := CF & ~ZF
00017a57: VF := #337 & extend:128[#336] <> extend:128[R3] - 0xA
00017a5d: CF := #337 & pad:128[#336] <> pad:128[R3] + 0xFFFFFFFFFFFFFFF6
00017a62: ZF := #337 & #336 = 0
00017a67: NF := #337 & 63:63[#336]
00017a6f: R5 := pad:64[mem[R4 + extend:64[31:0[R5]]]]
00017a77: mem := mem with [R0 - 4] <- 7:0[R5]
00017a7e: R6 := pad:64[mem[R1 - 3]]
00017a85: R5 := pad:64[mem[R1 - 2]]
00017a8b: R6 := pad:64[1:0[R6].0]
00017a92: R5 := pad:64[31:0[R6] | pad:32[31:4[R5]]]
00017a9a: R5 := pad:64[mem[R4 + extend:64[31:0[R5]]]]
00017aa2: mem := mem with [R0 - 3] <- 7:0[R5]
00017aa9: R6 := pad:64[mem[R1 - 2]]
00017ab0: R5 := pad:64[mem[R1 - 1]]
00017ab6: R6 := pad:64[3:0[R6].0]
00017abd: R5 := pad:64[31:0[R6] | pad:32[31:6[R5]]]
00017ac5: R5 := pad:64[mem[R4 + extend:64[31:0[R5]]]]
00017acd: mem := mem with [R0 - 2] <- 7:0[R5]
00017ad4: R5 := pad:64[mem[R1 - 1]]
00017ada: R5 := pad:64[5:0[R5]]
00017ae2: R5 := pad:64[mem[R4 + extend:64[31:0[R5]]]]
00017aea: mem := mem with [R0 - 1] <- 7:0[R5]
00017af0: when CF & ~ZF goto %00017a0b
00035db6: goto %00011d78

00011d78:
00011d80: VF := 0
00011d83: CF := 1
00011d87: ZF := R2 = 0
00011d8b: NF := 63:63[R2]
00011d91: #70 := R3 - 4
00011d95: #71 := ZF <> 1
00011d9b: VF := #71 & extend:128[#70] <> extend:128[R3] - 4
00011da1: CF := #71 & pad:128[#70] <> pad:128[R3] + 0xFFFFFFFFFFFFFFFC
00011da6: ZF := #71 & #70 = 0
00011dab: NF := #71 & 63:63[#70]
00011db2: when ~(CF & ~ZF) goto %00011db0
00035db7: goto %0001796d

0001796d:
00017972: R4 := pad:64[mem[R1]]
00017977: R3 := 0x417000
0001797d: R3 := R3 + 0x3F0
00017983: R3 := R3 + 0x2C0
00017989: R4 := pad:64[31:2[R4]]
00017991: R4 := pad:64[mem[R3 + extend:64[31:0[R4]]]]
00017999: mem := mem with [R0] <- 7:0[R4]
000179a0: R4 := pad:64[mem[R1]]
000179a6: R4 := pad:64[1:0[R4].0]
000179ac: #334 := R2 - 1
000179b1: VF := extend:128[#334] <> extend:128[R2] - 1
000179b6: CF := pad:128[#334] <> pad:128[R2] + 0xFFFFFFFFFFFFFFFF
000179ba: ZF := #334 = 0
000179be: NF := 63:63[#334]
000179c3: when ZF goto %00011de4
00035db8: goto %000179c7

00011de4:
00011dea: R1 := pad:64[mem[R3 + extend:64[31:0[R4]]]]
00011def: R2 := 0x3D
00011df7: mem := mem with [R0 + 1] <- 7:0[R1]
00011dfc: goto %00011dfa

000179c7:
000179cc: R2 := pad:64[mem[R1 + 1]]
000179d3: R2 := pad:64[31:0[R4] | pad:32[31:4[R2]]]
000179db: R2 := pad:64[mem[R3 + extend:64[31:0[R2]]]]
000179e3: mem := mem with [R0 + 1] <- 7:0[R2]
000179ea: R1 := pad:64[mem[R1 + 1]]
000179f0: R1 := pad:64[3:0[R1].0]
000179f8: R2 := pad:64[mem[R3 + extend:64[31:0[R1]]]]
00035db9: goto %00011dfa

00011dfa:
00011e00: R1 := 0x3D
00011e06: R0 := R0 + 4
00011e0e: mem := mem with [R0 - 2] <- 7:0[R2]
00011e16: mem := mem with [R0 - 1] <- 7:0[R1]
00035dba: goto %00011db0

00011db0:
00011dba: mem := mem with [R0] <- 0
00011dbf: R0 := 0
00011dc4: R1 := 0
00011dc9: R2 := 0
00011dce: R3 := 0
00011dd3: R4 := 0
00011dd8: R5 := 0
00011ddd: R6 := 0
00011de2: call R30 with noreturn

00035dbb: sub trimr(trimr_result)
00035f6d: trimr_result :: out u32 = low:32[R0]

00011254:
00011258: #22 := R31 - 0x20
0001125e: mem := mem with [#22, el]:u64 <- R29
00011264: mem := mem with [#22 + 8, el]:u64 <- R30
00011268: R31 := #22
0001126e: R29 := R31
00011274: #23 := R31 + 0x10
0001127a: mem := mem with [#23, el]:u64 <- R19
00011280: mem := mem with [#23 + 8, el]:u64 <- R20
00011286: when R0 = 0 goto %00011284
00035dbc: goto %000112be

00011284:
0001128c: R3 := 0x417000
00011292: R3 := R3 + 0x3F0
00011297: R1 := 0x416000
0001129c: R0 := 0x416000
000112a2: R3 := R3 + 0x20
000112a8: R1 := R1 + 0xF58
000112ae: R0 := R0 + 0xFC8
000112b3: R2 := 0x2A9
000112b8: R30 := 0x40FA9C
000112ba: call @__assert_fail with return %000112bc

000112bc:
00035dbd: call @zmalloc with noreturn

000112be:
000112c2: R20 := R0
000112c7: R30 := 0x40FA08
000112ca: call @strlen with return %000112cc

000112cc:
000112d1: R3 := R20 + extend:64[31:0[R0]]
000112d7: #24 := 31:0[R0] - 1
000112db: #25 := pad:64[31:0[R0] - 1]
000112e0: VF := extend:64[#24] <> extend:64[31:0[R0]] - 1
000112e5: CF := #25 <> pad:64[31:0[R0]] + 0xFFFFFFFF
000112e9: ZF := #24 = 0
000112ed: NF := 31:31[#24]
000112f1: R19 := #25
000112f7: when NF goto %000112f5
00035dbe: goto %0001134a

0001134a:
0001134d: R30 := 0x40FA18
00011350: call @__ctype_b_loc with return %00011352

00011352:
00011357: R4 := mem[R0, el]:u64
0001135e: R1 := R20 + pad:64[31:0[R19]]
00011363: goto %00011361

00011361:
00011369: R2 := pad:64[mem[R1]]
0001136f: R3 := R1
00011377: R2 := pad:64[mem[R4 + (62:0[R2].0), el]:u16]
0001137d: when 13:13[R2] goto %0001137b
00035dbf: goto %000113ab

000113ab:
000113af: R19 := pad:64[31:0[R19] + 1]
000113b6: R3 := R20 + extend:64[31:0[R19]]
00035dc0: goto %000112f5

0001137b:
00011384: R19 := pad:64[31:0[R19] - 1]
0001138a: R1 := R1 - 1
00011390: #27 := 31:0[R19] + 1
00011395: VF := extend:64[#27] <> extend:64[31:0[R19]] + 1
0001139a: CF := pad:64[#27] <> pad:64[31:0[R19]] + 1
0001139e: ZF := #27 = 0
000113a2: NF := 31:31[#27]
000113a7: when ZF goto %000112f5
00035dc1: goto %00011361

000112f5:
000112ff: mem := mem with [R3] <- 0
00011305: R0 := R20
0001130b: #26 := R31 + 0x10
00011310: R19 := mem[#26, el]:u64
00011315: R20 := mem[#26 + 8, el]:u64
0001131c: R29 := mem[R31, el]:u64
00011321: R30 := mem[R31 + 8, el]:u64
00011325: R31 := R31 + 0x20
0001132a: R1 := 0
0001132f: R2 := 0
00011334: R3 := 0
00011339: R4 := 0
0001133e: R16 := 0
00011343: R17 := 0
00011348: call R30 with noreturn

00035dc2: sub tunnel(tunnel_result)
00035f6e: tunnel_result :: out u32 = low:32[R0]

0001e2a9:
0001e2ad: R31 := R31 - 0xF0
0001e2b2: R2 := 0x42F000
0001e2b9: R2 := mem[R2 + 0xFB8, el]:u64
0001e2bf: #750 := R31 + 0x90
0001e2c5: mem := mem with [#750, el]:u64 <- R29
0001e2cb: mem := mem with [#750 + 8, el]:u64 <- R30
0001e2d1: R29 := R31 + 0x90
0001e2d7: #751 := R31 + 0xA0
0001e2dd: mem := mem with [#751, el]:u64 <- R19
0001e2e3: mem := mem with [#751 + 8, el]:u64 <- R20
0001e2e9: #752 := R31 + 0xB0
0001e2ef: mem := mem with [#752, el]:u64 <- R21
0001e2f5: mem := mem with [#752 + 8, el]:u64 <- R22
0001e2fb: #753 := R31 + 0xC0
0001e301: mem := mem with [#753, el]:u64 <- R23
0001e307: mem := mem with [#753 + 8, el]:u64 <- R24
0001e30d: #754 := R31 + 0xD0
0001e313: mem := mem with [#754, el]:u64 <- R25
0001e319: mem := mem with [#754 + 8, el]:u64 <- R26
0001e31f: R26 := pad:64[31:0[R0]]
0001e325: R25 := pad:64[31:0[R1]]
0001e32b: #755 := R31 + 0xE0
0001e331: mem := mem with [#755, el]:u64 <- R27
0001e337: mem := mem with [#755 + 8, el]:u64 <- R28
0001e33e: R0 := mem[R2, el]:u64
0001e346: mem := mem with [R31 + 0x88, el]:u64 <- R0
0001e34b: R0 := 0
0001e350: R0 := 0x1000
0001e355: R30 := 0x4097D4
0001e357: call @zmalloc with return %0001e359

0001e359:
0001e35c: R1 := 0x42F000
0001e363: R1 := mem[R1 + 0xF30, el]:u64
0001e369: R22 := R0
0001e370: R0 := pad:64[mem[R1, el]:u32]
0001e376: when 31:0[R0] <> 0 goto %0001e374
00035dc3: goto %0001e39d

0001e374:
0001e37d: R3 := pad:64[31:0[R25]]
0001e383: R2 := pad:64[31:0[R26]]
0001e388: R1 := 0x414000
0001e38d: R0 := 2
0001e393: R1 := R1 + 0x690
0001e398: R30 := 0x409970
0001e39a: call @__printf_chk with return %0001e39c

0001e39c:
0001e39f: goto %0001e39d

0001e39d:
0001e3a3: V0 := 0
0001e3a8: R23 := 1
0001e3ae: R21 := extend:64[31:0[R26]]
0001e3b4: R24 := extend:64[31:0[R25]]
0001e3ba: R19 := R31 + 8
0001e3c1: R20 := R23 << pad:12[5:0[R26]]
0001e3c8: R23 := R23 << pad:12[5:0[R25]]
00035dc4: goto %0001e3cc

0001e3cc:
0001e3d0: R0 := R21
0001e3d8: mem := mem with [R19, el]:u128 <- V0
0001e3de: mem := mem with [R19 + 0x10, el]:u128 <- V0
0001e3e4: #756 := R19 + 0x20
0001e3ea: mem := mem with [#756, el]:u128 <- V0
0001e3f0: mem := mem with [#756 + 0x10, el]:u128 <- V0
0001e3f6: #757 := R19 + 0x40
0001e3fc: mem := mem with [#757, el]:u128 <- V0
0001e402: mem := mem with [#757 + 0x10, el]:u128 <- V0
0001e408: #758 := R19 + 0x60
0001e40e: mem := mem with [#758, el]:u128 <- V0
0001e414: mem := mem with [#758 + 0x10, el]:u128 <- V0
0001e419: R30 := 0x409820
0001e41c: call @__fdelt_chk with return %0001e41e

0001e41e:
0001e422: R1 := R0
0001e428: R0 := R24
0001e430: R2 := mem[R19 + (60:0[R1].0), el]:u64
0001e437: R2 := R2 | R20
0001e440: mem := mem with [R19 + (60:0[R1].0), el]:u64 <- R2
0001e445: R30 := 0x409838
0001e447: call @__fdelt_chk with return %0001e449

0001e449:
0001e44d: R5 := R0
0001e453: R1 := R19
0001e458: R4 := 0
0001e45d: R3 := 0
0001e462: R2 := 0
0001e46a: R6 := mem[R19 + (60:0[R5].0), el]:u64
0001e46f: R0 := 0x400
0001e476: R6 := R6 | R23
0001e47f: mem := mem with [R19 + (60:0[R5].0), el]:u64 <- R6
0001e484: R30 := 0x409860
0001e487: call @select with return %0001e489

0001e489:
0001e48c: VF := 0
0001e48f: CF := 1
0001e493: ZF := 31:0[R0] = 0
0001e497: NF := 31:31[R0]
0001e49c: V0 := 0
0001e4a4: when ~(NF = VF & ~ZF) goto %0001e4a2
00035dc5: goto %0001e636

0001e4a2:
0001e4aa: when ZF goto %0001e3cc
00035dc6: goto %0001e4ae

0001e4ae:
0001e4b2: R0 := R22
0001e4b7: R30 := 0x4098C4
0001e4b9: call @free with return %0001e4bb

0001e4bb:
0001e4be: R0 := 0
0001e4c3: goto %0001e4c1

0001e636:
0001e63a: R0 := R21
0001e63f: R30 := 0x409874
0001e641: call @__fdelt_chk with return %0001e643

0001e643:
0001e649: R0 := mem[R19 + (60:0[R0].0), el]:u64
0001e64e: VF := 0
0001e651: CF := 0
0001e656: ZF := (R20 & R0) = 0
0001e65b: NF := 63:63[R20] & 63:63[R0]
0001e660: when ZF goto %0001e5ab
00035dc7: goto %0001e664

0001e5ab:
0001e5af: R0 := pad:64[31:0[R25]]
0001e5b5: R1 := R22
0001e5ba: R2 := 0x1000
0001e5c0: R27 := pad:64[31:0[R26]]
0001e5c5: R30 := 0x4098E0
0001e5c7: call @read with return %0001e5c9

0001e5c9:
0001e5cd: R28 := R0
0001e5d2: VF := 0
0001e5d5: CF := 1
0001e5d9: ZF := 31:0[R0] = 0
0001e5dd: NF := 31:31[R0]
0001e5e5: when NF = VF & ~ZF goto %0001e5e3
00035dc8: goto %0001e60a

0001e664:
0001e668: R0 := pad:64[31:0[R26]]
0001e66e: R1 := R22
0001e673: R2 := 0x1000
0001e679: R27 := pad:64[31:0[R25]]
0001e67e: R30 := 0x409894
0001e680: call @read with return %0001e682

0001e682:
0001e686: R28 := R0
0001e68b: VF := 0
0001e68e: CF := 1
0001e692: ZF := 31:0[R0] = 0
0001e696: NF := 31:31[R0]
0001e69d: when ~(NF = VF & ~ZF) goto %0001e60a
00035dc9: goto %0001e5e3

0001e60a:
0001e60e: R0 := R22
0001e613: R30 := 0x4098F4
0001e615: call @free with return %0001e617

0001e617:
0001e61a: VF := 0
0001e61d: CF := 1
0001e621: ZF := 31:0[R28] = 0
0001e625: NF := 31:31[R28]
0001e631: when ZF <> 1 goto %0001e62a
0001e632: goto %0001e62d

0001e62d:
0001e62e: R0 := 1
0001e634: goto %0001e630

0001e62a:
0001e62b: R0 := 0
0001e633: goto %0001e630

0001e630:
00035dca: goto %0001e4c1

0001e4c1:
0001e4c7: R1 := 0x42F000
0001e4ce: R1 := mem[R1 + 0xFB8, el]:u64
0001e4d5: R3 := mem[R31 + 0x88, el]:u64
0001e4dc: R2 := mem[R1, el]:u64
0001e4e2: #759 := ~R2
0001e4e7: #760 := R3 + ~R2
0001e4ed: VF := extend:128[#760 + 1] <> extend:128[R3] + extend:128[#759] + 1
0001e4f3: CF := pad:128[#760 + 1] <> pad:128[R3] + pad:128[#759] + 1
0001e4f7: ZF := #760 + 1 = 0
0001e4fb: NF := 63:63[#760 + 1]
0001e4ff: R3 := #760 + 1
0001e504: R2 := 0
0001e50a: when ZF <> 1 goto %0001e508
00035dcb: goto %0001e518

0001e508:
0001e510: R30 := 0x409978
0001e512: call @__stack_chk_fail with return %0001e514

0001e514:
00035dcc: call @http_has_body with noreturn

0001e518:
0001e51c: #761 := R31 + 0x90
0001e521: R29 := mem[#761, el]:u64
0001e526: R30 := mem[#761 + 8, el]:u64
0001e52c: #762 := R31 + 0xA0
0001e531: R19 := mem[#762, el]:u64
0001e536: R20 := mem[#762 + 8, el]:u64
0001e53c: #763 := R31 + 0xB0
0001e541: R21 := mem[#763, el]:u64
0001e546: R22 := mem[#763 + 8, el]:u64
0001e54c: #764 := R31 + 0xC0
0001e551: R23 := mem[#764, el]:u64
0001e556: R24 := mem[#764 + 8, el]:u64
0001e55c: #765 := R31 + 0xD0
0001e561: R25 := mem[#765, el]:u64
0001e566: R26 := mem[#765 + 8, el]:u64
0001e56c: #766 := R31 + 0xE0
0001e571: R27 := mem[#766, el]:u64
0001e576: R28 := mem[#766 + 8, el]:u64
0001e57c: R31 := R31 + 0xF0
0001e581: R1 := 0
0001e586: R2 := 0
0001e58b: R3 := 0
0001e590: R4 := 0
0001e595: R5 := 0
0001e59a: R6 := 0
0001e59f: R16 := 0
0001e5a4: R17 := 0
0001e5a9: call R30 with noreturn

0001e5e3:
0001e5ec: R2 := extend:64[31:0[R0]]
0001e5f2: R1 := R22
0001e5f8: R0 := pad:64[31:0[R27]]
0001e5fd: R30 := 0x4098B0
0001e5ff: call @write_wrapper with return %0001e601

0001e601:
0001e604: V0 := 0
0001e608: goto %0001e3cc

00035dcd: sub tunnel_add(tunnel_add_result)
00035f6f: tunnel_add_result :: out u32 = low:32[R0]

0001f58b:
0001f58f: R31 := R31 - 0x70
0001f594: R3 := 0x42F000
0001f59b: R3 := mem[R3 + 0xFB8, el]:u64
0001f5a1: #820 := R31 + 0x30
0001f5a7: mem := mem with [#820, el]:u64 <- R29
0001f5ad: mem := mem with [#820 + 8, el]:u64 <- R30
0001f5b3: R29 := R31 + 0x30
0001f5b9: #821 := R31 + 0x40
0001f5bf: mem := mem with [#821, el]:u64 <- R19
0001f5c5: mem := mem with [#821 + 8, el]:u64 <- R20
0001f5cb: #822 := R31 + 0x50
0001f5d1: mem := mem with [#822, el]:u64 <- R21
0001f5d7: mem := mem with [#822 + 8, el]:u64 <- R22
0001f5dd: R21 := R0
0001f5e3: R0 := R1
0001f5e9: #823 := R31 + 0x60
0001f5ef: mem := mem with [#823, el]:u64 <- R23
0001f5f5: mem := mem with [#823 + 8, el]:u64 <- R24
0001f5fb: R22 := pad:64[31:0[R2]]
0001f602: R1 := mem[R3, el]:u64
0001f60a: mem := mem with [R31 + 0x28, el]:u64 <- R1
0001f60f: R1 := 0
0001f614: R30 := 0x40A2BC
0001f616: call @strdup with return %0001f618

0001f618:
0001f61c: R20 := R0
0001f621: R30 := 0x40A2C4
0001f623: call @strlen with return %0001f625

0001f625:
0001f62b: mem := mem with [R31 + 8, el]:u64 <- R20
0001f630: VF := 0
0001f633: CF := 1
0001f637: ZF := 31:0[R0] = 0
0001f63b: NF := 31:31[R0]
0001f643: when ~(NF = VF & ~ZF) goto %0001f641
00035dce: goto %0002810c

0001f641:
0001f64a: R0 := R20
0001f64f: R2 := 0xA
0001f654: R1 := 0
0001f659: R30 := 0x40A4C8
0001f65b: call @strtol with return %0001f65d

0001f65d:
0001f661: when 31:0[R0] <> 0 goto %0001f65f
00035dcf: goto %0001f6db

0002810c:
00028110: R1 := R20 + 1
00028116: R2 := pad:64[31:0[R0]]
0002811b: R19 := 1
00028121: R23 := R31 + 8
00028128: R0 := pad:64[31:0[R19] + ~31:0[R1] + 1]
00035dd0: goto %0002812c

0002812c:
00028131: R3 := pad:64[mem[R1 - 1]]
00028137: #1178 := 31:0[R3] - 0x3A
0002813c: VF := extend:64[#1178] <> extend:64[31:0[R3]] - 0x3A
00028141: CF := pad:64[#1178] <> pad:64[31:0[R3]] + 0xFFFFFFC6
00028145: ZF := #1178 = 0
00028149: NF := 31:31[#1178]
0002814f: when ZF <> 1 goto %0002814d
00035dd1: goto %000284b4

000284b4:
000284bb: mem := mem with [R23 + extend:64[31:0[R19].0], el]:u64 <- R1
000284c1: R19 := pad:64[31:0[R19] + 1]
000284c8: mem := mem with [R1 - 1] <- 0
00035dd2: goto %0002814d

0002814d:
00028157: R3 := pad:64[31:0[R0] + 31:0[R1]]
0002815d: R1 := R1 + 1
00028163: #1179 := ~31:0[R2]
00028168: #1180 := 31:0[R3] + ~31:0[R2]
0002816e: VF := extend:64[#1180 + 1] <> extend:64[31:0[R3]] +
          extend:64[#1179] + 1
00028174: CF := pad:64[#1180 + 1] <> pad:64[31:0[R3]] + pad:64[#1179] + 1
00028178: ZF := #1180 + 1 = 0
0002817c: NF := 31:31[#1180 + 1]
00028189: when NF = VF goto %00028182
0002818a: goto %00028185

00028185:
00028186: R4 := 1
0002818c: goto %00028188

00028182:
00028183: R4 := 0
0002818b: goto %00028188

00028188:
00028192: #1181 := 31:0[R19] - 3
00028197: VF := extend:64[#1181] <> extend:64[31:0[R19]] - 3
0002819c: CF := pad:64[#1181] <> pad:64[31:0[R19]] + 0xFFFFFFFD
000281a0: ZF := #1181 = 0
000281a4: NF := 31:31[#1181]
000281b2: when NF = VF & ~ZF goto %000281ab
000281b3: goto %000281ae

000281ae:
000281af: R3 := 1
000281b5: goto %000281b1

000281ab:
000281ac: R3 := 0
000281b4: goto %000281b1

000281b1:
000281ba: VF := 0
000281bd: CF := 0
000281c2: ZF := (31:0[R4] & 31:0[R3]) = 0
000281c7: NF := 31:31[R4] & 31:31[R3]
000281cc: when ZF <> 1 goto %0002812c
00035dd3: goto %000281d0

000281d0:
000281d5: R24 := mem[R31 + 8, el]:u64
000281db: #1182 := 31:0[R19] - 4
000281e0: VF := extend:64[#1182] <> extend:64[31:0[R19]] - 4
000281e5: CF := pad:64[#1182] <> pad:64[31:0[R19]] + 0xFFFFFFFC
000281e9: ZF := #1182 = 0
000281ed: NF := 31:31[#1182]
000281f3: when ZF goto %000281f1
00035dd4: goto %00028454

000281f1:
000281fb: R19 := mem[R23 + 8, el]:u64
00028200: R2 := 0xA
00028205: R1 := 0
0002820b: R0 := R19
00028210: R30 := 0x40A494
00028212: call @strtol with return %00028214

00028214:
00028218: R2 := R0
0002821d: when 31:0[R0] = 0 goto %0001f713
00035dd5: goto %00028221

00028221:
00028225: R1 := R24
0002822b: R0 := R31
00028230: R30 := 0x40A4A8
00028232: call @so_resolv with return %00028234

00028234:
00028237: when 31:0[R0] = 0 goto %0001f713
00035dd6: goto %0002823b

0002823b:
0002823e: R0 := 3
00028243: R1 := 2
00028248: goto %00028246

00028454:
00028457: R1 := 0
0002845d: R0 := R24
00028462: R2 := 0xA
00028467: R30 := 0x40A33C
00028469: call @strtol with return %0002846b

0002846b:
0002846f: R1 := R0
00028474: when 31:0[R0] = 0 goto %0001f6d4
00035dd7: goto %00028478

00028478:
0002847c: R2 := pad:64[31:0[R22]]
00028482: R0 := R31
00028487: R30 := 0x40A350
00028489: call @so_resolv_wildcard with return %0002848b

0002848b:
0002848f: #1189 := 31:0[R19] - 3
00028494: VF := extend:64[#1189] <> extend:64[31:0[R19]] - 3
00028499: CF := pad:64[#1189] <> pad:64[31:0[R19]] + 0xFFFFFFFD
0002849d: ZF := #1189 = 0
000284a1: NF := 31:31[#1189]
000284a6: when ZF <> 1 goto %0001f67d
00035dd8: goto %000284aa

000284aa:
000284ad: R0 := 2
000284b2: R1 := 1
00035dd9: goto %00028246

00028246:
0002824f: R22 := mem[R23 + (60:0[R1].0), el]:u64
00028257: R23 := mem[R23 + (60:0[R0].0), el]:u64
0002825e: R0 := pad:64[mem[R22]]
00028263: when 31:0[R0] = 0 goto %0001f6a0
00035dda: goto %00028267

00028267:
0002826c: R0 := pad:64[mem[R23]]
00028271: when 31:0[R0] = 0 goto %0001f6a0
00035ddb: goto %00028275

0001f6a0:
0001f6a4: R4 := R23
0001f6aa: R3 := R22
0001f6af: R2 := 0x414000
0001f6b5: R2 := R2 + 0x948
0001f6ba: R1 := 2
0001f6bf: R0 := 3
0001f6c4: R30 := 0x40A530
0001f6c6: call @__syslog_chk with return %0001f6c8

0001f6c8:
0001f6cb: R0 := 1
0001f6d0: R30 := 0x40A538
0001f6d2: call @myexit with return %0001f6d4

0001f6d4:
0001f6d8: R20 := R24
0001f6dd: goto %0001f6db

0001f6db:
0001f6e2: R3 := R20
0001f6e7: R2 := 0x414000
0001f6ed: R2 := R2 + 0x928
0001f6f2: R1 := 2
0001f6f7: R0 := 3
0001f6fc: R30 := 0x40A4E4
0001f6fe: call @__syslog_chk with return %0001f700

0001f700:
0001f703: R0 := 1
0001f708: R30 := 0x40A4EC
0001f70a: call @myexit with return %0001f65f

0001f65f:
0001f668: R1 := pad:64[31:0[R0]]
0001f66e: R2 := pad:64[31:0[R22]]
0001f674: R0 := R31
0001f679: R30 := 0x40A4FC
0001f67b: call @so_resolv_wildcard with return %0001f67d

0001f67d:
0001f680: R1 := 0x414000
0001f686: R1 := R1 + 0x998
0001f68b: R0 := 2
0001f690: R30 := 0x40A50C
0001f692: call @__printf_chk with return %0001f694

0001f694:
0001f697: R0 := 1
0001f69c: R30 := 0x40A514
0001f69e: call @myexit with return %0001f6a0

00028275:
00028279: R0 := R22
0002827e: R30 := 0x40A380
00028280: call @strlen with return %00028282

00028282:
00028286: R19 := R0
0002828c: R0 := R23
00028291: R30 := 0x40A38C
00028293: call @strlen with return %00028295

00028295:
0002829a: R19 := R19 + R0
000282a0: R19 := R19 + 3
000282a6: R0 := R19
000282ab: R30 := 0x40A39C
000282ad: call @zmalloc with return %000282af

000282af:
000282b3: R1 := R22
000282b9: R2 := R19
000282bf: R22 := R0
000282c4: R30 := 0x40A3AC
000282c6: call @strlcpy with return %000282c8

000282c8:
000282cc: R2 := R19
000282d2: R0 := R22
000282d7: R1 := 0x414000
000282dd: R1 := R1 + 0x400
000282e2: R30 := 0x40A3C0
000282e4: call @strlcat with return %000282e6

000282e6:
000282ea: R2 := R19
000282f0: R1 := R23
000282f6: R0 := R22
000282fb: R30 := 0x40A3D0
000282fd: call @strlcat with return %000282ff

000282ff:
00028304: R1 := mem[R31, el]:u64
0002830a: R2 := R22
00028310: R0 := R21
00028315: R30 := 0x40A3E0
00028317: call @so_listen with return %00028319

00028319:
0002831c: VF := 0
0002831f: CF := 1
00028323: ZF := 31:0[R0] = 0
00028327: NF := 31:31[R0]
0002832f: when ~(NF = VF & ~ZF) goto %0002832d
00035ddc: goto %00028432

0002832d:
00028335: R2 := 0x414000
0002833b: R2 := R2 + 0x980
00028340: R1 := 2
00028345: R0 := 3
0002834a: R30 := 0x40A474
0002834c: call @__syslog_chk with return %0002834e

0002834e:
00028352: R0 := R22
00028357: R30 := 0x40A47C
00028359: call @free with return %0002835b

0002835b:
0002835e: goto %0002835c

00028432:
00028435: R2 := 0x414000
0002843b: R3 := R22
00028441: R2 := R2 + 0x968
00028446: R1 := 2
0002844b: R0 := 6
00028450: R30 := 0x40A400
00028452: call @__syslog_chk with return %0002835c

0002835c:
00028363: R0 := R20
00028368: R30 := 0x40A408
0002836a: call @free with return %0002836c

0002836c:
00028371: R0 := mem[R31, el]:u64
00028376: R30 := 0x40A410
00028379: call @freeaddrinfo with return %0002837b

0002837b:
0002837e: R0 := 0x42F000
00028385: R0 := mem[R0 + 0xFB8, el]:u64
0002838c: R2 := mem[R31 + 0x28, el]:u64
00028393: R1 := mem[R0, el]:u64
00028399: #1183 := ~R1
0002839e: #1184 := R2 + ~R1
000283a4: VF := extend:128[#1184 + 1] <> extend:128[R2] + extend:128[#1183] +
          1
000283aa: CF := pad:128[#1184 + 1] <> pad:128[R2] + pad:128[#1183] + 1
000283ae: ZF := #1184 + 1 = 0
000283b2: NF := 63:63[#1184 + 1]
000283b6: R2 := #1184 + 1
000283bb: R1 := 0
000283c0: when ZF <> 1 goto %0001f70c
00035ddd: goto %000283c4

0001f70c:
0001f70f: R30 := 0x40A544
0001f711: call @__stack_chk_fail with return %0001f713

0001f713:
0001f717: R4 := R19
0001f71d: R3 := R24
0001f722: R2 := 0x414000
0001f728: R2 := R2 + 0x8F8
0001f72d: R1 := 2
0001f732: R0 := 3
0001f737: R30 := 0x40A560
0001f739: call @__syslog_chk with return %0001f73b

0001f73b:
0001f73e: R0 := 1
0001f743: R30 := 0x40A568
0001f745: call @myexit with return %0001f747

0001f747:
00035dde: call @noproxy_add with noreturn

000283c4:
000283c8: #1185 := R31 + 0x30
000283cd: R29 := mem[#1185, el]:u64
000283d2: R30 := mem[#1185 + 8, el]:u64
000283d8: #1186 := R31 + 0x40
000283dd: R19 := mem[#1186, el]:u64
000283e2: R20 := mem[#1186 + 8, el]:u64
000283e8: #1187 := R31 + 0x50
000283ed: R21 := mem[#1187, el]:u64
000283f2: R22 := mem[#1187 + 8, el]:u64
000283f8: #1188 := R31 + 0x60
000283fd: R23 := mem[#1188, el]:u64
00028402: R24 := mem[#1188 + 8, el]:u64
00028408: R31 := R31 + 0x70
0002840d: R0 := 0
00028412: R1 := 0
00028417: R2 := 0
0002841c: R3 := 0
00028421: R4 := 0
00028426: R16 := 0
0002842b: R17 := 0
00028430: call R30 with noreturn

00035ddf: sub tunnel_thread(tunnel_thread_result)
00035f70: tunnel_thread_result :: out u32 = low:32[R0]

00026d5c:
00026d60: #1114 := R31 - 0x20
00026d66: mem := mem with [#1114, el]:u64 <- R29
00026d6c: mem := mem with [#1114 + 8, el]:u64 <- R30
00026d70: R31 := #1114
00026d76: R29 := R31
00026d7c: #1115 := R31 + 0x10
00026d82: mem := mem with [#1115, el]:u64 <- R19
00026d88: mem := mem with [#1115 + 8, el]:u64 <- R20
00026d8e: when R0 = 0 goto %00026d8c
00035de0: goto %00027c8a

00026d8c:
00026d94: R3 := 0x417000
00026d99: R1 := 0x414000
00026d9e: R0 := 0x413000
00026da4: R3 := R3 + 0x3A0
00026daa: R1 := R1 + 0xA68
00026db0: R0 := R0 + 0xC80
00026db5: R2 := 0x168
00026dba: R30 := 0x40AAFC
00026dbc: call @__assert_fail with return %00026dbe

00026dbe:
00035de1: call @socks5_thread with noreturn

00027c8a:
00027c8e: R19 := R0
00027c95: R0 := mem[R0 + 8, el]:u64
00027c9a: R30 := 0x40A9E0
00027c9c: call @strdup with return %00027c9e

00027c9e:
00027ca2: R20 := R0
00027ca7: R1 := 0x3A
00027cac: R30 := 0x40A9EC
00027cae: call @strchr with return %00027cb0

00027cb0:
00027cb4: when R0 = 0 goto %00027cb2
00035de2: goto %00027e52

00027e52:
00027e57: mem := mem with [R0] <- 0
00035de3: goto %00027cb2

00027cb2:
00027cbb: R0 := R20
00027cc0: R30 := 0x40A9FC
00027cc2: call @noproxy_match with return %00027cc4

00027cc4:
00027cc8: when 31:0[R0] = 0 goto %00027cc6
00035de4: goto %00027cf2

00027cc6:
00027ccf: R0 := R19
00027cd4: R30 := 0x40AA54
00027cd6: call @forward_tunnel with return %00027cd8

00027cd8:
00027cdc: #1162 := 31:0[R0] + 2
00027ce1: VF := extend:64[#1162] <> extend:64[31:0[R0]] + 2
00027ce6: CF := pad:64[#1162] <> pad:64[31:0[R0]] + 2
00027cea: ZF := #1162 = 0
00027cee: NF := 31:31[#1162]
00027cf4: when ZF goto %00027cf2
00035de5: goto %00027e1e

00027e1e:
00027e22: R0 := R20
00027e27: R30 := 0x40AA64
00027e29: call @free with return %00027e2b

00027e2b:
00027e2f: R0 := R19
00027e34: R30 := 0x40AA6C
00027e36: call @free with return %00027e38

00027e38:
00027e3b: R0 := 0x42F000
00027e42: R0 := mem[R0 + 0xFD0, el]:u64
00027e49: R0 := pad:64[mem[R0, el]:u32]
00027e4e: when 31:0[R0] <> 0 goto %00027ddb
00035de6: goto %00027d33

00027cf2:
00027cfb: R0 := R19
00027d00: R30 := 0x40AA08
00027d02: call @direct_tunnel with return %00027d04

00027d04:
00027d08: R0 := R20
00027d0d: R30 := 0x40AA10
00027d0f: call @free with return %00027d11

00027d11:
00027d15: R0 := R19
00027d1a: R30 := 0x40AA18
00027d1c: call @free with return %00027d1e

00027d1e:
00027d21: R0 := 0x42F000
00027d28: R0 := mem[R0 + 0xFD0, el]:u64
00027d2f: R0 := pad:64[mem[R0, el]:u32]
00027d35: when 31:0[R0] = 0 goto %00027d33
00035de7: goto %00027ddb

00027d33:
00027d3b: R0 := 0x42F000
00027d42: R0 := mem[R0 + 0xEF0, el]:u64
00027d47: R19 := 0x42F000
00027d4e: R19 := mem[R19 + 0xF40, el]:u64
00027d53: R30 := 0x40AA90
00027d55: call @pthread_mutex_lock with return %00027d57

00027d57:
00027d5a: R30 := 0x40AA94
00027d5c: call @pthread_self with return %00027d5e

00027d5e:
00027d62: R1 := R0
00027d69: R0 := mem[R19, el]:u64
00027d6e: R2 := 0
00027d73: R30 := 0x40AAA4
00027d75: call @plist_add with return %00027d77

00027d77:
00027d7b: R1 := R0
00027d80: R0 := 0x42F000
00027d87: R0 := mem[R0 + 0xEF0, el]:u64
00027d8f: mem := mem with [R19, el]:u64 <- R1
00027d94: R30 := 0x40AAB8
00027d96: call @pthread_mutex_unlock with return %00027d98

00027d98:
00027d9c: #1163 := R31 + 0x10
00027da1: R19 := mem[#1163, el]:u64
00027da6: R20 := mem[#1163 + 8, el]:u64
00027dab: R0 := 0
00027db2: R29 := mem[R31, el]:u64
00027db7: R30 := mem[R31 + 8, el]:u64
00027dbb: R31 := R31 + 0x20
00027dc0: R1 := 0
00027dc5: R2 := 0
00027dca: R3 := 0
00027dcf: R16 := 0
00027dd4: R17 := 0
00027dd9: call R30 with noreturn

00027ddb:
00027ddf: #1164 := R31 + 0x10
00027de4: R19 := mem[#1164, el]:u64
00027de9: R20 := mem[#1164 + 8, el]:u64
00027dee: R0 := 0
00027df5: R29 := mem[R31, el]:u64
00027dfa: R30 := mem[R31 + 8, el]:u64
00027dfe: R31 := R31 + 0x20
00027e03: R1 := 0
00027e08: R2 := 0
00027e0d: R3 := 0
00027e12: R16 := 0
00027e17: R17 := 0
00027e1c: call R30 with noreturn

00035de8: sub umask(umask_result)
00035f71: umask_result :: out u32 = low:32[R0]

0002d7b9:
0003110f: R16 := 0x42F000
00031116: R17 := mem[R16 + 0xE90, el]:u64
0003111c: R16 := R16 + 0xE90
00031121: call R17 with noreturn

00035de9: sub unicode(unicode_result)
00035f72: unicode_result :: out u32 = low:32[R0]

000119c2:
000119c6: #46 := R31 - 0x40
000119cc: mem := mem with [#46, el]:u64 <- R29
000119d2: mem := mem with [#46 + 8, el]:u64 <- R30
000119d6: R31 := #46
000119dc: R29 := R31
000119e2: #47 := R31 + 0x20
000119e8: mem := mem with [#47, el]:u64 <- R21
000119ee: mem := mem with [#47 + 8, el]:u64 <- R22
000119f4: R22 := R0
000119fc: mem := mem with [R31 + 0x30, el]:u64 <- R23
00011a02: when R1 = 0 goto %00011a00
00035dea: goto %00017f2e

00011a00:
00011a08: R23 := 0
00011a0d: R1 := 0
00011a13: R0 := pad:64[31:0[R23]]
00011a1a: R23 := mem[R31 + 0x30, el]:u64
00011a22: mem := mem with [R22, el]:u64 <- R1
00011a28: #48 := R31 + 0x20
00011a2d: R21 := mem[#48, el]:u64
00011a32: R22 := mem[#48 + 8, el]:u64
00011a39: R29 := mem[R31, el]:u64
00011a3e: R30 := mem[R31 + 8, el]:u64
00011a42: R31 := R31 + 0x40
00011a47: R1 := 0
00011a4c: R2 := 0
00011a51: R3 := 0
00011a56: R4 := 0
00011a5b: R16 := 0
00011a60: R17 := 0
00011a65: call R30 with noreturn

00017f2e:
00017f32: R0 := R1
00017f38: #361 := R31 + 0x10
00017f3e: mem := mem with [#361, el]:u64 <- R19
00017f44: mem := mem with [#361 + 8, el]:u64 <- R20
00017f4a: R19 := R1
00017f4f: R30 := 0x4100C8
00017f51: call @strlen with return %00017f53

00017f53:
00017f57: R21 := R0
00017f5c: R0 := 0x40
00017f62: #362 := ~R0
00017f67: #363 := R21 + ~R0
00017f6d: VF := extend:128[#363 + 1] <> extend:128[R21] + extend:128[#362] +
          1
00017f73: CF := pad:128[#363 + 1] <> pad:128[R21] + pad:128[#362] + 1
00017f77: ZF := #363 + 1 = 0
00017f7b: NF := 63:63[#363 + 1]
00017f8a: when ~(CF & ~ZF) goto %00017f82
00017f8b: goto %00017f86

00017f86:
00017f87: R21 := R0
00017f8d: goto %00017f89

00017f82:
00017f83: R21 := R21
00017f8c: goto %00017f89

00017f89:
00017f93: R20 := pad:64[31:0[R21]]
00017f99: R23 := pad:64[30:0[R21].0]
00017f9f: R0 := extend:64[31:0[R23]]
00017fa4: R30 := 0x4100E8
00017fa6: call @zmalloc with return %00017fa8

00017fa8:
00017fac: R1 := R0
00017fb2: when 31:0[R21] = 0 goto %00017fb0
00035deb: goto %0001801d

0001801d:
00018020: R2 := 0
00035dec: goto %00018024

00018024:
00018028: R3 := 62:0[R2].0
00018030: R4 := pad:64[mem[R19 + R2]]
00018036: R2 := R2 + 1
0001803f: mem := mem with [R1 + R3] <- 7:0[R4]
00018045: #366 := ~31:0[R2]
0001804a: #367 := 31:0[R20] + ~31:0[R2]
00018050: VF := extend:64[#367 + 1] <> extend:64[31:0[R20]] + extend:64[#366]
          + 1
00018056: CF := pad:64[#367 + 1] <> pad:64[31:0[R20]] + pad:64[#366] + 1
0001805a: ZF := #367 + 1 = 0
0001805e: NF := 31:31[#367 + 1]
00018065: when NF = VF & ~ZF goto %00018024
00035ded: goto %00017fb0

00017fb0:
00017fb9: #364 := R31 + 0x10
00017fbe: R19 := mem[#364, el]:u64
00017fc3: R20 := mem[#364 + 8, el]:u64
00017fc9: R0 := pad:64[31:0[R23]]
00017fd0: R23 := mem[R31 + 0x30, el]:u64
00017fd8: mem := mem with [R22, el]:u64 <- R1
00017fde: #365 := R31 + 0x20
00017fe3: R21 := mem[#365, el]:u64
00017fe8: R22 := mem[#365 + 8, el]:u64
00017fef: R29 := mem[R31, el]:u64
00017ff4: R30 := mem[R31 + 8, el]:u64
00017ff8: R31 := R31 + 0x40
00017ffd: R1 := 0
00018002: R2 := 0
00018007: R3 := 0
0001800c: R4 := 0
00018011: R16 := 0
00018016: R17 := 0
0001801b: call R30 with noreturn

00035dee: sub unlink(unlink_name, unlink_result)
00035f73: unlink_name :: in u64 = R0
00035f74: unlink_result :: out u32 = low:32[R0]

0002ca1d:
00031193: R16 := 0x42F000
0003119a: R17 := mem[R16 + 0xEC0, el]:u64
000311a0: R16 := R16 + 0xEC0
000311a5: call R17 with noreturn

00035def: sub uppercase(uppercase_result)
00035f75: uppercase_result :: out u32 = low:32[R0]

00011958:
0001195c: #44 := R31 - 0x20
00011962: mem := mem with [#44, el]:u64 <- R29
00011968: mem := mem with [#44 + 8, el]:u64 <- R30
0001196c: R31 := #44
00011972: R29 := R31
00011978: #45 := R31 + 0x10
0001197e: mem := mem with [#45, el]:u64 <- R19
00011984: mem := mem with [#45 + 8, el]:u64 <- R20
0001198a: when R0 = 0 goto %00011988
00035df0: goto %00018069

00011988:
00011990: R3 := 0x417000
00011996: R3 := R3 + 0x3F0
0001199b: R1 := 0x416000
000119a0: R0 := 0x417000
000119a6: R3 := R3 + 0x78
000119ac: R1 := R1 + 0xF58
000119b2: R0 := R0 + 0xB0
000119b7: R2 := 0x326
000119bc: R30 := 0x41009C
000119be: call @__assert_fail with return %000119c0

000119c0:
00035df1: call @unicode with noreturn

00018069:
0001806d: R20 := R0
00018072: R19 := 0
00018077: goto %00018075

00018075:
0001807c: R0 := R20
00018081: R30 := 0x41004C
00018083: call @strlen with return %00018085

00018085:
00018089: #368 := ~R0
0001808e: #369 := R19 + ~R0
00018094: VF := extend:128[#369 + 1] <> extend:128[R19] + extend:128[#368] +
          1
0001809a: CF := pad:128[#369 + 1] <> pad:128[R19] + pad:128[#368] + 1
0001809e: ZF := #369 + 1 = 0
000180a2: NF := 63:63[#369 + 1]
000180a8: when CF <> 1 goto %000180a6
00035df2: goto %000180d9

000180d9:
000180dd: R0 := R20
000180e3: #370 := R31 + 0x10
000180e8: R19 := mem[#370, el]:u64
000180ed: R20 := mem[#370 + 8, el]:u64
000180f4: R29 := mem[R31, el]:u64
000180f9: R30 := mem[R31 + 8, el]:u64
000180fd: R31 := R31 + 0x20
00018102: R1 := 0
00018107: R2 := 0
0001810c: R3 := 0
00018111: R16 := 0
00018116: R17 := 0
0001811b: call R30 with noreturn

000180a6:
000180ae: R30 := 0x410030
000180b1: call @__ctype_toupper_loc with return %000180b3

000180b3:
000180b8: R0 := mem[R0, el]:u64
000180c0: R1 := pad:64[mem[R20 + R19]]
000180c8: R0 := pad:64[mem[R0 + (61:0[R1].0), el]:u32]
000180d1: mem := mem with [R20 + R19] <- 7:0[R0]
000180d7: R19 := R19 + 1
00035df3: goto %00018075

00035df4: sub urlencode(urlencode_result)
00035f76: urlencode_result :: out u32 = low:32[R0]

00011a69:
00011a6d: #49 := R31 - 0x60
00011a73: mem := mem with [#49, el]:u64 <- R29
00011a79: mem := mem with [#49 + 8, el]:u64 <- R30
00011a7d: R31 := #49
00011a83: R29 := R31
00011a89: #50 := R31 + 0x10
00011a8f: mem := mem with [#50, el]:u64 <- R19
00011a95: mem := mem with [#50 + 8, el]:u64 <- R20
00011a9b: #51 := R31 + 0x20
00011aa1: mem := mem with [#51, el]:u64 <- R21
00011aa7: mem := mem with [#51 + 8, el]:u64 <- R22
00011aad: #52 := R31 + 0x30
00011ab3: mem := mem with [#52, el]:u64 <- R23
00011ab9: mem := mem with [#52 + 8, el]:u64 <- R24
00011abf: #53 := R31 + 0x40
00011ac5: mem := mem with [#53, el]:u64 <- R25
00011acb: mem := mem with [#53 + 8, el]:u64 <- R26
00011ad1: when R0 = 0 goto %00011acf
00035df5: goto %00017cb0

00011acf:
00011ad7: R3 := 0x417000
00011add: R3 := R3 + 0x3F0
00011ae2: R1 := 0x416000
00011ae7: R0 := 0x417000
00011aed: R3 := R3 + 0x88
00011af3: R1 := R1 + 0xF58
00011af9: R0 := R0 + 0xB0
00011afe: R2 := 0x346
00011b04: #54 := R31 + 0x50
00011b0a: mem := mem with [#54, el]:u64 <- R27
00011b10: mem := mem with [#54 + 8, el]:u64 <- R28
00011b15: R30 := 0x4102CC
00011b17: call @__assert_fail with return %00011b19

00011b19:
00035df6: call @printmem with noreturn

00017cb0:
00017cb4: R20 := R0
00017cb9: R30 := 0x4101A4
00017cbb: call @strlen with return %00017cbd

00017cbd:
00017cc2: R23 := R0 + (62:0[R0].0)
00017cc8: R26 := R0
00017cce: R23 := R23 + 1
00017cd4: R0 := R23
00017cd9: R30 := 0x4101B8
00017cdb: call @zmalloc with return %00017cdd

00017cdd:
00017ce1: R22 := R0
00017ce7: when R26 = 0 goto %00017ce5
00035df7: goto %00017efe

00017efe:
00017f03: R26 := R20 + R26
00017f09: #360 := R31 + 0x50
00017f0f: mem := mem with [#360, el]:u64 <- R27
00017f15: mem := mem with [#360 + 8, el]:u64 <- R28
00017f1a: R30 := 0x4101CC
00017f1c: call @__ctype_b_loc with return %00017f1e

00017f1e:
00017f22: R28 := R0
00017f27: R21 := 0
00017f2c: R24 := 0x7E
00035df8: goto %00017dfb

00017dfb:
00017e05: R27 := pad:64[mem[R20]]
00017e0c: R25 := R22 + R21
00017e13: R2 := mem[R28, el]:u64
00017e19: R19 := R27
00017e1f: R1 := pad:64[7:0[R27].0]
00017e27: R1 := pad:64[mem[R2 + R1, el]:u16]
00017e2d: when 11:11[R1] goto %00017e2b
00035df9: goto %00017e3e

00017e3e:
00017e41: R30 := 0x4101F8
00017e44: call @__ctype_tolower_loc with return %00017e46

00017e46:
00017e4b: R1 := mem[R0, el]:u64
00017e53: R1 := pad:64[mem[R1 + (61:0[R27].0), el]:u32]
00017e59: R1 := pad:64[31:0[R1] - 0x61]
00017e5f: #352 := 31:0[R1] - 0x19
00017e64: VF := extend:64[#352] <> extend:64[31:0[R1]] - 0x19
00017e69: CF := pad:64[#352] <> pad:64[31:0[R1]] + 0xFFFFFFE7
00017e6d: ZF := #352 = 0
00017e71: NF := 31:31[#352]
00017e77: when ~(CF & ~ZF) goto %00017e2b
00035dfa: goto %00017e7b

00017e7b:
00017e7f: R1 := pad:64[31:0[R27] - 0x2D]
00017e85: #353 := 31:0[R27] - 0x5F
00017e8a: VF := extend:64[#353] <> extend:64[31:0[R27]] - 0x5F
00017e8f: CF := pad:64[#353] <> pad:64[31:0[R27]] + 0xFFFFFFA1
00017e93: ZF := #353 = 0
00017e97: NF := 31:31[#353]
00017e9d: R1 := pad:64[7:0[R1]]
00017ea3: #354 := 31:0[R1] - 1
00017ea7: #355 := ZF <> 1
00017ead: VF := #355 & extend:64[#354] <> extend:64[31:0[R1]] - 1
00017eb3: CF := #355 & pad:64[#354] <> pad:64[31:0[R1]] + 0xFFFFFFFF
00017eb8: ZF := #355 & #354 = 0
00017ebd: NF := #355 & 31:31[#354]
00017ec3: #356 := ~31:0[R24]
00017ec8: #357 := 31:0[R27] + ~31:0[R24]
00017ecd: #358 := CF & ~ZF
00017ed4: VF := #358 & extend:64[#357 + 1] <> extend:64[31:0[R27]] +
          extend:64[#356] + 1
00017edb: CF := #358 & pad:64[#357 + 1] <> pad:64[31:0[R27]] + pad:64[#356] +
          1
00017ee0: ZF := #357 + 1 = 0 | ~#358
00017ee5: NF := #358 & 31:31[#357 + 1]
00017eea: when ZF <> 1 goto %00017d68
00035dfb: goto %00017e2b

00017d68:
00017d6c: #348 := ~R21
00017d71: #349 := R23 + ~R21
00017d77: VF := extend:128[#349 + 1] <> extend:128[R23] + extend:128[#348] +
          1
00017d7d: CF := pad:128[#349 + 1] <> pad:128[R23] + pad:128[#348] + 1
00017d81: ZF := #349 + 1 = 0
00017d85: NF := 63:63[#349 + 1]
00017d8c: R1 := R23 + ~R21 + 1
00017d9a: when CF goto %00017d92
00017d9b: goto %00017d96

00017d96:
00017d97: R3 := R21
00017d9d: goto %00017d99

00017d92:
00017d93: R3 := R23
00017d9c: goto %00017d99

00017d99:
00017da3: R5 := pad:64[31:0[R27]]
00017daa: R3 := R3 + ~R21 + 1
00017db0: R0 := R25
00017db5: R4 := 0x417000
00017dba: R2 := 2
00017dc0: R4 := R4 + 0xE0
00017dc6: R21 := R21 + 3
00017dcb: R30 := 0x4102A0
00017dce: call @__snprintf_chk with return %00017dd0

00017dd0:
00017dd3: goto %00017dd1

00017e2b:
00017e34: R21 := R21 + 1
00017e3c: mem := mem with [R25] <- 7:0[R19]
00035dfc: goto %00017dd1

00017dd1:
00017dd8: R20 := R20 + 1
00017dde: #350 := ~R20
00017de3: #351 := R26 + ~R20
00017de9: VF := extend:128[#351 + 1] <> extend:128[R26] + extend:128[#350] +
          1
00017def: CF := pad:128[#351 + 1] <> pad:128[R26] + pad:128[#350] + 1
00017df3: ZF := #351 + 1 = 0
00017df7: NF := 63:63[#351 + 1]
00017dfd: when ZF <> 1 goto %00017dfb
00035dfd: goto %00017eee

00017eee:
00017ef2: #359 := R31 + 0x50
00017ef7: R27 := mem[#359, el]:u64
00017efc: R28 := mem[#359 + 8, el]:u64
00035dfe: goto %00017ce5

00017ce5:
00017cee: R0 := R22
00017cf4: #344 := R31 + 0x10
00017cf9: R19 := mem[#344, el]:u64
00017cfe: R20 := mem[#344 + 8, el]:u64
00017d04: #345 := R31 + 0x20
00017d09: R21 := mem[#345, el]:u64
00017d0e: R22 := mem[#345 + 8, el]:u64
00017d14: #346 := R31 + 0x30
00017d19: R23 := mem[#346, el]:u64
00017d1e: R24 := mem[#346 + 8, el]:u64
00017d24: #347 := R31 + 0x40
00017d29: R25 := mem[#347, el]:u64
00017d2e: R26 := mem[#347 + 8, el]:u64
00017d35: R29 := mem[R31, el]:u64
00017d3a: R30 := mem[R31 + 8, el]:u64
00017d3e: R31 := R31 + 0x60
00017d43: R1 := 0
00017d48: R2 := 0
00017d4d: R3 := 0
00017d52: R4 := 0
00017d57: R5 := 0
00017d5c: R16 := 0
00017d61: R17 := 0
00017d66: call R30 with noreturn

00035dff: sub write(write_arg1, write_arg2, write_arg3, write_result)
00035f77: write_arg1 :: in u32 = low:32[R0]
00035f78: write_arg2 :: in out u64 = R1
00035f79: write_arg3 :: in u64 = R2
00035f7a: write_result :: out u64 = R0

00012061:
00030d89: R16 := 0x42F000
00030d90: R17 := mem[R16 + 0xD48, el]:u64
00030d96: R16 := R16 + 0xD48
00030d9b: call R17 with noreturn

00035e00: sub write_wrapper(write_wrapper_result)
00035f7b: write_wrapper_result :: out u32 = low:32[R0]

00011fa2:
00011fa6: #75 := R31 - 0x40
00011fac: mem := mem with [#75, el]:u64 <- R29
00011fb2: mem := mem with [#75 + 8, el]:u64 <- R30
00011fb6: R31 := #75
00011fbb: VF := 0
00011fbe: CF := 1
00011fc2: ZF := R1 = 0
00011fc6: NF := 63:63[R1]
00011fcc: #76 := ZF <> 1
00011fcf: VF := 0
00011fd3: CF := #76
00011fd8: ZF := R2 = 0 | ~#76
00011fdd: NF := #76 & 63:63[R2]
00011fe3: R29 := R31
00011fe9: #77 := R31 + 0x10
00011fef: mem := mem with [#77, el]:u64 <- R19
00011ff5: mem := mem with [#77 + 8, el]:u64 <- R20
00011ffa: R19 := 0
00012000: when ZF <> 1 goto %00011ffe
00035e01: goto %000120d9

00011ffe:
00012007: #78 := R31 + 0x20
0001200d: mem := mem with [#78, el]:u64 <- R21
00012013: mem := mem with [#78 + 8, el]:u64 <- R22
00012019: R21 := R2
0001201e: R22 := 0
00012024: #79 := R31 + 0x30
0001202a: mem := mem with [#79, el]:u64 <- R23
00012030: mem := mem with [#79 + 8, el]:u64 <- R24
00012036: R23 := R1
0001203c: R24 := pad:64[31:0[R0]]
00012041: R20 := 0
00035e02: goto %00012043

00012043:
00012048: R2 := R21 + ~R20 + 1
0001204f: R1 := R23 + R20
00012055: R0 := pad:64[31:0[R24]]
0001205b: R22 := R22 + 1
00012060: R30 := 0x4108FC
00012063: call @write with return %00012065

00012065:
00012069: R19 := R0
0001206f: when 63:63[R0] goto %0001206d
00035e03: goto %0001752b

0001206d:
00012075: R30 := 0x410954
00012078: call @__errno_location with return %0001207a

0001207a:
0001207f: R20 := pad:64[mem[R0, el]:u32]
00012085: R0 := pad:64[31:0[R20]]
0001208a: R30 := 0x410960
0001208d: call @strerror with return %0001208f

0001208f:
00012093: R3 := pad:64[31:0[R20]]
00012099: R4 := R0
0001209e: R2 := 0x417000
000120a3: R1 := 2
000120a9: R2 := R2 + 0x158
000120ae: R0 := 3
000120b3: R30 := 0x41097C
000120b6: call @__syslog_chk with return %000120b8

000120b8:
000120bc: #80 := R31 + 0x20
000120c1: R21 := mem[#80, el]:u64
000120c6: R22 := mem[#80 + 8, el]:u64
000120cc: #81 := R31 + 0x30
000120d1: R23 := mem[#81, el]:u64
000120d6: R24 := mem[#81 + 8, el]:u64
000120db: goto %000120d9

0001752b:
00017530: R20 := R20 + R0
00017536: #314 := R22 - 0x31
0001753b: VF := extend:128[#314] <> extend:128[R22] - 0x31
00017540: CF := pad:128[#314] <> pad:128[R22] + 0xFFFFFFFFFFFFFFCF
00017544: ZF := #314 = 0
00017548: NF := 63:63[#314]
0001754e: #315 := ~R20
00017553: #316 := R21 + ~R20
00017558: #317 := ~(CF & ~ZF)
0001755f: VF := #317 & extend:128[#316 + 1] <> extend:128[R21] +
          extend:128[#315] + 1
00017566: CF := #317 & pad:128[#316 + 1] <> pad:128[R21] + pad:128[#315] + 1
0001756b: ZF := #317 & #316 + 1 = 0
00017570: NF := #317 & 63:63[#316 + 1]
00017576: when CF & ~ZF goto %00012043
00035e04: goto %0001757a

0001757a:
0001757e: #318 := ~R20
00017583: #319 := R21 + ~R20
00017589: VF := extend:128[#319 + 1] <> extend:128[R21] + extend:128[#318] +
          1
0001758f: CF := pad:128[#319 + 1] <> pad:128[R21] + pad:128[#318] + 1
00017593: ZF := #319 + 1 = 0
00017597: NF := 63:63[#319 + 1]
0001759e: when CF & ~ZF goto %0001759c
00035e05: goto %000175cf

0001759c:
000175a5: R4 := R21
000175ab: R3 := R20
000175b0: R2 := 0x417000
000175b5: R5 := 0x32
000175bb: R2 := R2 + 0x180
000175c0: R1 := 2
000175c5: R0 := 3
000175ca: R30 := 0x41094C
000175cc: call @__syslog_chk with return %000175ce

000175ce:
000175d1: goto %000175cf

000175cf:
000175d6: #320 := R31 + 0x20
000175db: R21 := mem[#320, el]:u64
000175e0: R22 := mem[#320 + 8, el]:u64
000175e6: R19 := R20
000175ec: #321 := R31 + 0x30
000175f1: R23 := mem[#321, el]:u64
000175f6: R24 := mem[#321 + 8, el]:u64
000175fa: goto %000120d9

000120d9:
000120e0: R0 := R19
000120e6: #82 := R31 + 0x10
000120eb: R19 := mem[#82, el]:u64
000120f0: R20 := mem[#82 + 8, el]:u64
000120f7: R29 := mem[R31, el]:u64
000120fc: R30 := mem[R31 + 8, el]:u64
00012100: R31 := R31 + 0x40
00012105: R1 := 0
0001210a: R2 := 0
0001210f: R3 := 0
00012114: R4 := 0
00012119: R5 := 0
0001211e: R16 := 0
00012123: R17 := 0
00012128: call R30 with noreturn

00035e06: sub www_authenticate(www_authenticate_result)
00035f7c: www_authenticate_result :: out u32 = low:32[R0]

0001b912:
0001b916: R31 := R31 - 0xA0
0001b91b: R6 := 0x42F000
0001b922: R6 := mem[R6 + 0xFB8, el]:u64
0001b928: #608 := R31 + 0x40
0001b92e: mem := mem with [#608, el]:u64 <- R29
0001b934: mem := mem with [#608 + 8, el]:u64 <- R30
0001b93a: R29 := R31 + 0x40
0001b940: #609 := R31 + 8
0001b946: mem := mem with [#609, el]:u64 <- R3
0001b94c: mem := mem with [#609 + 8, el]:u64 <- R4
0001b954: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R1]
0001b95a: #610 := R31 + 0x50
0001b960: mem := mem with [#610, el]:u64 <- R19
0001b966: mem := mem with [#610 + 8, el]:u64 <- R20
0001b96c: R20 := pad:64[31:0[R0]]
0001b972: #611 := R31 + 0x60
0001b978: mem := mem with [#611, el]:u64 <- R21
0001b97e: mem := mem with [#611 + 8, el]:u64 <- R22
0001b984: R22 := R4
0001b98a: R21 := R2
0001b990: #612 := R31 + 0x70
0001b996: mem := mem with [#612, el]:u64 <- R23
0001b99c: mem := mem with [#612 + 8, el]:u64 <- R24
0001b9a2: R23 := pad:64[31:0[R5]]
0001b9a8: #613 := R31 + 0x80
0001b9ae: mem := mem with [#613, el]:u64 <- R25
0001b9b4: mem := mem with [#613 + 8, el]:u64 <- R26
0001b9ba: R26 := R31 + 0x28
0001b9c0: #614 := R31 + 0x90
0001b9c6: mem := mem with [#614, el]:u64 <- R27
0001b9cc: mem := mem with [#614 + 8, el]:u64 <- R28
0001b9d1: R28 := 0x413000
0001b9d8: R0 := mem[R6, el]:u64
0001b9e0: mem := mem with [R31 + 0x38, el]:u64 <- R0
0001b9e5: R0 := 0
0001b9ea: R0 := 0x1000
0001b9ef: R30 := 0x405D9C
0001b9f1: call @zmalloc with return %0001b9f3

0001b9f3:
0001b9f6: R2 := 0x1000
0001b9fc: R1 := R28 + 0x7A8
0001ba02: R19 := R0
0001ba07: R30 := 0x405DAC
0001ba09: call @strlcpy with return %0001ba0b

0001ba0b:
0001ba0f: R1 := R22
0001ba15: R0 := R26
0001ba1a: R30 := 0x405DB8
0001ba1d: call @ntlm_request with return %0002aeef

0002aeef:
0002aef3: when 31:0[R0] <> 0 goto %0002aef1
00035e07: goto %0002af24

0002aef1:
0002aefb: R1 := mem[R31 + 0x28, el]:u64
0002af01: R2 := extend:64[31:0[R0]]
0002af06: R3 := 0xFFB
0002af0c: R0 := R19 + 5
0002af11: R30 := 0x405F6C
0002af13: call @to_base64 with return %0002af15

0002af15:
0002af1a: R0 := mem[R31 + 0x28, el]:u64
0002af1f: R30 := 0x405F74
0002af21: call @free with return %0002af23

0002af23:
0002af26: goto %0002af24

0002af24:
0002af2b: R0 := R21
0002af30: R30 := 0x405DC4
0002af32: call @dup_rr_data with return %0002af34

0002af34:
0002af38: R25 := R0
0002af3d: R3 := 1
0002af44: R0 := mem[R0 + 8, el]:u64
0002af49: R2 := 0x413000
0002af4e: R1 := 0x413000
0002af54: R2 := R2 + 0x7B0
0002af5a: R1 := R1 + 0x7C0
0002af62: mem := mem with [R31 + 0x30, el]:u64 <- R25
0002af67: R30 := 0x405DE8
0002af69: call @hlist_mod with return %0002af6b

0002af6b:
0002af71: mem := mem with [R25 + 8, el]:u64 <- R0
0002af78: R22 := mem[R31 + 0x30, el]:u64
0002af7e: R2 := R19
0002af83: R3 := 1
0002af88: R27 := 0x413000
0002af8e: R1 := R27 + 0x7D0
0002af95: R0 := mem[R22 + 8, el]:u64
0002af9a: R30 := 0x405E08
0002af9c: call @hlist_mod with return %0002af9e

0002af9e:
0002afa4: mem := mem with [R22 + 8, el]:u64 <- R0
0002afab: R24 := mem[R31 + 0x30, el]:u64
0002afb0: R3 := 1
0002afb5: R2 := 0x413000
0002afba: R1 := 0x413000
0002afc0: R2 := R2 + 0x7E0
0002afc6: R1 := R1 + 0x7E8
0002afcd: R0 := mem[R24 + 8, el]:u64
0002afd2: R30 := 0x405E2C
0002afd4: call @hlist_mod with return %0002afd6

0002afd6:
0002afdc: mem := mem with [R24 + 8, el]:u64 <- R0
0002afe3: R25 := mem[R31 + 0x30, el]:u64
0002afe8: R1 := 0x413000
0002afee: R1 := R1 + 0x7F8
0002aff5: R0 := mem[R25 + 8, el]:u64
0002affa: R30 := 0x405E44
0002affc: call @hlist_del with return %0002affe

0002affe:
0002b004: mem := mem with [R25 + 8, el]:u64 <- R0
0002b00a: when 31:0[R23] = 0 goto %0002b008
00035e08: goto %0002b5c0

0002b008:
0002b012: R1 := mem[R31 + 8, el]:u64
0002b018: R0 := pad:64[31:0[R20]]
0002b01d: R30 := 0x405F24
0002b01f: call @http_body_drop with return %0002b021

0002b021:
0002b025: when 31:0[R0] = 0 goto %0002b023
00035e09: goto %0002b132

0002b132:
0002b135: R25 := 0x42F000
0002b13c: R25 := mem[R25 + 0xF30, el]:u64
0002b143: R0 := pad:64[mem[R25, el]:u32]
0002b149: when 31:0[R0] = 0 goto %0002b147
00035e0a: goto %0002b590

0002b5c0:
0002b5c3: R25 := 0x42F000
0002b5ca: R25 := mem[R25 + 0xF30, el]:u64
0002b5d1: R0 := pad:64[mem[R25, el]:u32]
0002b5d6: when 31:0[R0] <> 0 goto %0002b590
00035e0b: goto %0002b147

0002b590:
0002b593: R1 := 0x413000
0002b598: R0 := 2
0002b59e: R1 := R1 + 0x810
0002b5a3: R30 := 0x405F48
0002b5a5: call @__printf_chk with return %0002b5a7

0002b5a7:
0002b5ac: R0 := mem[R31 + 0x30, el]:u64
0002b5b3: R0 := mem[R0 + 8, el]:u64
0002b5b8: R30 := 0x405F54
0002b5ba: call @hlist_dump with return %0002b5bc

0002b5bc:
0002b5be: goto %0002b147

0002b147:
0002b151: R1 := mem[R31 + 0x30, el]:u64
0002b157: R0 := pad:64[31:0[R20]]
0002b15c: R30 := 0x405E68
0002b15e: call @headers_send with return %0002b160

0002b160:
0002b163: when 31:0[R0] = 0 goto %0002b023
00035e0c: goto %0002b167

0002b167:
0002b16c: R0 := pad:64[mem[R25, el]:u32]
0002b172: when 31:0[R0] <> 0 goto %0002b170
00035e0d: goto %0002b567

0002b170:
0002b178: R1 := 0x413000
0002b17d: R0 := 2
0002b183: R1 := R1 + 0x830
0002b188: R30 := 0x405F88
0002b18a: call @__printf_chk with return %0002b18c

0002b18c:
0002b191: R0 := mem[R31 + 0x30, el]:u64
0002b196: R30 := 0x405F90
0002b198: call @reset_rr_data with return %0002b19a

0002b19a:
0002b19f: R1 := mem[R31 + 0x30, el]:u64
0002b1a5: R0 := pad:64[31:0[R20]]
0002b1aa: R30 := 0x405F9C
0002b1ac: call @headers_recv with return %0002b1ae

0002b1ae:
0002b1b2: when 31:0[R0] <> 0 goto %0002b1b0
00035e0e: goto %0002b563

0002b563:
0002b565: goto %0002b023

0002b567:
0002b56c: R0 := mem[R31 + 0x30, el]:u64
0002b571: R30 := 0x405E7C
0002b573: call @reset_rr_data with return %0002b575

0002b575:
0002b57a: R1 := mem[R31 + 0x30, el]:u64
0002b580: R0 := pad:64[31:0[R20]]
0002b585: R30 := 0x405E88
0002b587: call @headers_recv with return %0002b589

0002b589:
0002b58c: when 31:0[R0] = 0 goto %0002b023
00035e0f: goto %0002b1b0

0002b1b0:
0002b1ba: R0 := pad:64[mem[R25, el]:u32]
0002b1c0: when 31:0[R0] <> 0 goto %0002b1be
00035e10: goto %0002b1d9

0002b1be:
0002b1c8: R0 := mem[R31 + 0x30, el]:u64
0002b1cf: R0 := mem[R0 + 8, el]:u64
0002b1d4: R30 := 0x40600C
0002b1d6: call @hlist_dump with return %0002b1d8

0002b1d8:
0002b1db: goto %0002b1d9

0002b1d9:
0002b1e1: R1 := mem[R31 + 0x30, el]:u64
0002b1e8: R0 := pad:64[mem[R1 + 0x10, el]:u32]
0002b1ee: #1316 := 31:0[R0] - 0x191
0002b1f3: VF := extend:64[#1316] <> extend:64[31:0[R0]] - 0x191
0002b1f8: CF := pad:64[#1316] <> pad:64[31:0[R0]] + 0xFFFFFE6F
0002b1fc: ZF := #1316 = 0
0002b200: NF := 31:31[#1316]
0002b206: when ZF goto %0002b204
00035e11: goto %0002b023

0002b204:
0002b20d: R0 := pad:64[31:0[R20]]
0002b212: R30 := 0x405FAC
0002b214: call @http_body_drop with return %0002b216

0002b216:
0002b219: when 31:0[R0] = 0 goto %0002b023
00035e12: goto %0002b21d

0002b21d:
0002b222: R0 := mem[R31 + 0x30, el]:u64
0002b227: R1 := 0x413000
0002b22d: R1 := R1 + 0x850
0002b234: R0 := mem[R0 + 8, el]:u64
0002b239: R30 := 0x405FC4
0002b23b: call @hlist_get with return %0002b23d

0002b23d:
0002b243: mem := mem with [R31 + 0x28, el]:u64 <- R0
0002b249: when R0 = 0 goto %0002b247
00035e13: goto %0002b286

0002b286:
0002b289: R30 := 0x405FD0
0002b28b: call @strlen with return %0002b28d

0002b28d:
0002b291: #1317 := R0 - 0xE
0002b296: VF := extend:128[#1317] <> extend:128[R0] - 0xE
0002b29b: CF := pad:128[#1317] <> pad:128[R0] + 0xFFFFFFFFFFFFFFF2
0002b29f: ZF := #1317 = 0
0002b2a3: NF := 63:63[#1317]
0002b2aa: when CF & ~ZF goto %0002b2a8
00035e14: goto %0002b247

0002b2a8:
0002b2b1: R0 := R0 + 6
0002b2b6: R30 := 0x406018
0002b2b8: call @zmalloc with return %0002b2ba

0002b2ba:
0002b2bf: R1 := mem[R31 + 0x28, el]:u64
0002b2c5: R24 := R0
0002b2cb: R1 := R1 + 5
0002b2d0: R30 := 0x406028
0002b2d2: call @from_base64 with return %0002b2d4

0002b2d4:
0002b2d8: R2 := pad:64[31:0[R0]]
0002b2de: #1318 := 31:0[R0] - 0x28
0002b2e3: VF := extend:64[#1318] <> extend:64[31:0[R0]] - 0x28
0002b2e8: CF := pad:64[#1318] <> pad:64[31:0[R0]] + 0xFFFFFFD8
0002b2ec: ZF := #1318 = 0
0002b2f0: NF := 31:31[#1318]
0002b2f8: when ~(NF = VF & ~ZF) goto %0002b2f6
00035e15: goto %0002b496

0002b2f6:
0002b2fe: R1 := 2
0002b303: R0 := 3
0002b308: R2 := 0x413000
0002b30e: R2 := R2 + 0x8C0
0002b313: R30 := 0x406110
0002b315: call @__syslog_chk with return %0002b317

0002b317:
0002b31c: R2 := mem[R31 + 8, el]:u64
0002b321: R1 := 0x413000
0002b327: R1 := R1 + 0x898
0002b32d: R0 := R24
0002b335: mem := mem with [R2 + 0x60, el]:u64 <- R1
0002b33a: R30 := 0x406128
0002b33c: call @free with return %0002b33e

0002b33e:
0002b340: goto %0002b023

0002b496:
0002b49b: R3 := mem[R31 + 0x10, el]:u64
0002b4a1: R0 := R26
0002b4a7: R1 := R24
0002b4ae: mem := mem with [R31 + 0x28, el]:u64 <- 0
0002b4b3: R30 := 0x406048
0002b4b5: call @ntlm_response with return %0002b4b7

0002b4b7:
0002b4bb: R22 := pad:64[31:0[R0]]
0002b4c0: VF := 0
0002b4c3: CF := 1
0002b4c7: ZF := 31:0[R0] = 0
0002b4cb: NF := 31:31[R0]
0002b4d2: when ~(NF = VF & ~ZF) goto %0002b441
00035e16: goto %0002b4d6

0002b441:
0002b444: R1 := 2
0002b449: R0 := 3
0002b44e: R2 := 0x413000
0002b454: R2 := R2 + 0x868
0002b459: R30 := 0x406154
0002b45b: call @__syslog_chk with return %0002b45d

0002b45d:
0002b462: R2 := mem[R31 + 8, el]:u64
0002b467: R1 := 0x413000
0002b46d: R1 := R1 + 0x898
0002b473: R0 := R24
0002b47b: mem := mem with [R2 + 0x60, el]:u64 <- R1
0002b480: R30 := 0x40616C
0002b482: call @free with return %0002b484

0002b484:
0002b489: R0 := mem[R31 + 0x28, el]:u64
0002b48e: R30 := 0x406174
0002b490: call @free with return %0002b492

0002b492:
0002b494: goto %0002b023

0002b4d6:
0002b4da: R1 := R28 + 0x7A8
0002b4df: R2 := 0x1000
0002b4e5: R0 := R19
0002b4ea: R30 := 0x406064
0002b4ec: call @strlcpy with return %0002b4ee

0002b4ee:
0002b4f3: R1 := mem[R31 + 0x28, el]:u64
0002b4f9: R2 := extend:64[31:0[R22]]
0002b4ff: R0 := R19 + 5
0002b504: R3 := 0xFFB
0002b509: R30 := 0x406078
0002b50b: call @to_base64 with return %0002b50d

0002b50d:
0002b512: R0 := mem[R21 + 8, el]:u64
0002b518: R2 := R19
0002b51d: R3 := 1
0002b523: R1 := R27 + 0x7D0
0002b528: R30 := 0x40608C
0002b52a: call @hlist_mod with return %0002b52c

0002b52c:
0002b530: R1 := R0
0002b537: R0 := mem[R31 + 0x28, el]:u64
0002b53f: mem := mem with [R21 + 8, el]:u64 <- R1
0002b544: R30 := 0x40609C
0002b546: call @free with return %0002b548

0002b548:
0002b54c: R0 := R24
0002b551: R30 := 0x4060A4
0002b553: call @free with return %0002b555

0002b555:
0002b55a: R0 := pad:64[mem[R25, el]:u32]
0002b55f: when 31:0[R0] <> 0 goto %0002b342
00035e17: goto %0002b35a

0002b342:
0002b345: R1 := 0x413000
0002b34a: R0 := 2
0002b350: R1 := R1 + 0x938
0002b355: R30 := 0x40613C
0002b357: call @__printf_chk with return %0002b359

0002b359:
0002b35c: goto %0002b35a

0002b35a:
0002b361: R1 := R21
0002b367: R0 := pad:64[31:0[R20]]
0002b36c: R30 := 0x4060B8
0002b36e: call @headers_send with return %0002b370

0002b370:
0002b373: when 31:0[R0] = 0 goto %0002b023
00035e18: goto %0002b377

0002b377:
0002b37c: R0 := mem[R31 + 0x30, el]:u64
0002b381: R30 := 0x4060C4
0002b383: call @reset_rr_data with return %0002b385

0002b385:
0002b389: when 31:0[R23] <> 0 goto %0002b387
00035e19: goto %0002b3af

0002b387:
0002b391: R3 := mem[R31 + 0x30, el]:u64
0002b397: R2 := R21
0002b39e: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
0002b3a4: R0 := pad:64[31:0[R20]]
0002b3a9: R30 := 0x40618C
0002b3ab: call @http_body_send with return %0002b3ad

0002b3ad:
0002b3b1: when 31:0[R0] <> 0 goto %0002b3af
00035e1a: goto %0002b43d

0002b43d:
0002b43f: goto %0002b023

0002b3af:
0002b3b9: R0 := pad:64[mem[R25, el]:u32]
0002b3bf: when 31:0[R0] <> 0 goto %0002b3bd
00035e1b: goto %0002b3da

0002b3bd:
0002b3c5: R1 := 0x413000
0002b3ca: R0 := 2
0002b3d0: R1 := R1 + 0x950
0002b3d5: R30 := 0x4061A4
0002b3d7: call @__printf_chk with return %0002b3d9

0002b3d9:
0002b3dc: goto %0002b3da

0002b3da:
0002b3e2: R1 := mem[R31 + 0x30, el]:u64
0002b3e8: R0 := pad:64[31:0[R20]]
0002b3ed: R30 := 0x4060DC
0002b3ef: call @headers_recv with return %0002b3f1

0002b3f1:
0002b3f4: when 31:0[R0] = 0 goto %0002b023
00035e1c: goto %0002b3f8

0002b3f8:
0002b3fd: R0 := pad:64[mem[R25, el]:u32]
0002b403: when 31:0[R0] <> 0 goto %0002b401
00035e1d: goto %0002b41c

0002b401:
0002b40b: R0 := mem[R31 + 0x30, el]:u64
0002b412: R0 := mem[R0 + 8, el]:u64
0002b417: R30 := 0x4061B4
0002b419: call @hlist_dump with return %0002b41b

0002b41b:
0002b41e: goto %0002b41c

0002b41c:
0002b424: R0 := mem[R31 + 8, el]:u64
0002b429: R20 := 1
0002b430: R1 := mem[R31 + 0x30, el]:u64
0002b435: R30 := 0x4060F8
0002b437: call @copy_rr_data with return %0002b439

0002b439:
0002b43b: goto %0002b02d

0002b247:
0002b24f: R1 := 2
0002b254: R0 := 4
0002b259: R2 := 0x413000
0002b25f: R2 := R2 + 0x8E8
0002b264: R30 := 0x405FEC
0002b266: call @__syslog_chk with return %0002b268

0002b268:
0002b26d: R1 := mem[R31 + 8, el]:u64
0002b272: R0 := 0x413000
0002b278: R0 := R0 + 0x910
0002b280: mem := mem with [R1 + 0x60, el]:u64 <- R0
0002b284: goto %0002b023

0002b023:
0002b02b: R20 := 0
00035e1e: goto %0002b02d

0002b02d:
0002b031: R0 := R31 + 0x30
0002b036: R30 := 0x405EB0
0002b038: call @free_rr_data with return %0002b03a

0002b03a:
0002b03e: R0 := R19
0002b043: R30 := 0x405EB8
0002b045: call @free with return %0002b047

0002b047:
0002b04a: R0 := 0x42F000
0002b051: R0 := mem[R0 + 0xFB8, el]:u64
0002b058: R2 := mem[R31 + 0x38, el]:u64
0002b05f: R1 := mem[R0, el]:u64
0002b065: #1308 := ~R1
0002b06a: #1309 := R2 + ~R1
0002b070: VF := extend:128[#1309 + 1] <> extend:128[R2] + extend:128[#1308] +
          1
0002b076: CF := pad:128[#1309 + 1] <> pad:128[R2] + pad:128[#1308] + 1
0002b07a: ZF := #1309 + 1 = 0
0002b07e: NF := 63:63[#1309 + 1]
0002b082: R2 := #1309 + 1
0002b087: R1 := 0
0002b08d: when ZF <> 1 goto %0002b08b
00035e1f: goto %0002b099

0002b08b:
0002b093: R30 := 0x4061BC
0002b095: call @__stack_chk_fail with return %0002b097

0002b097:
00035e20: call @direct_request with noreturn

0002b099:
0002b09d: #1310 := R31 + 0x40
0002b0a2: R29 := mem[#1310, el]:u64
0002b0a7: R30 := mem[#1310 + 8, el]:u64
0002b0ad: R0 := pad:64[31:0[R20]]
0002b0b3: #1311 := R31 + 0x50
0002b0b8: R19 := mem[#1311, el]:u64
0002b0bd: R20 := mem[#1311 + 8, el]:u64
0002b0c3: #1312 := R31 + 0x60
0002b0c8: R21 := mem[#1312, el]:u64
0002b0cd: R22 := mem[#1312 + 8, el]:u64
0002b0d3: #1313 := R31 + 0x70
0002b0d8: R23 := mem[#1313, el]:u64
0002b0dd: R24 := mem[#1313 + 8, el]:u64
0002b0e3: #1314 := R31 + 0x80
0002b0e8: R25 := mem[#1314, el]:u64
0002b0ed: R26 := mem[#1314 + 8, el]:u64
0002b0f3: #1315 := R31 + 0x90
0002b0f8: R27 := mem[#1315, el]:u64
0002b0fd: R28 := mem[#1315 + 8, el]:u64
0002b103: R31 := R31 + 0xA0
0002b108: R1 := 0
0002b10d: R2 := 0
0002b112: R3 := 0
0002b117: R4 := 0
0002b11c: R5 := 0
0002b121: R6 := 0
0002b126: R16 := 0
0002b12b: R17 := 0
0002b130: call R30 with noreturn

00035e21: sub zmalloc(zmalloc_result)
00035f7d: zmalloc_result :: out u32 = low:32[R0]

00010dab:
00010db2: R1 := R0
00010db7: R0 := 1
00010dbc: goto @calloc

00010dba:
00030c81: R16 := 0x42F000
00030c88: R17 := mem[R16 + 0xCE8, el]:u64
00030c8e: R16 := R16 + 0xCE8
00030c93: call R17 with noreturn
