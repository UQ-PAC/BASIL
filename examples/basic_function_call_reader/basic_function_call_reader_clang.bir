00000873: program
00000857: sub __cxa_finalize(__cxa_finalize_result)
00000874: __cxa_finalize_result :: out u32 = low:32[R0]

000005c1:
000006a2: R16 := 0x11000
000006a9: R17 := mem[R16, el]:u64
000006af: R16 := R16
000006b4: call R17 with noreturn

00000858: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000875: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000034c:
00000350: #5 := R31 - 0x20
00000356: mem := mem with [#5, el]:u64 <- R29
0000035c: mem := mem with [#5 + 8, el]:u64 <- R30
00000360: R31 := #5
00000366: R29 := R31
0000036e: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000373: R19 := 0x11000
0000037a: R0 := pad:64[mem[R19 + 0x30]]
00000381: when 31:0[R0] <> 0 goto %0000037f
00000859: goto %0000058a

0000058a:
0000058d: R0 := 0x10000
00000594: R0 := mem[R0 + 0xFC0, el]:u64
0000059a: when R0 = 0 goto %00000598
0000085a: goto %000005b1

000005b1:
000005b4: R0 := 0x11000
000005bb: R0 := mem[R0 + 0x28, el]:u64
000005c0: R30 := 0x700
000005c3: call @__cxa_finalize with return %00000598

00000598:
000005a0: R30 := 0x704
000005a2: call @deregister_tm_clones with return %000005a4

000005a4:
000005a7: R0 := 1
000005af: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000085b: goto %0000037f

0000037f:
00000389: R19 := mem[R31 + 0x10, el]:u64
00000390: R29 := mem[R31, el]:u64
00000395: R30 := mem[R31 + 8, el]:u64
00000399: R31 := R31 + 0x20
0000039e: call R30 with noreturn

0000085c: sub __libc_csu_fini(__libc_csu_fini_result)
00000876: __libc_csu_fini_result :: out u32 = low:32[R0]

0000051b:
0000051e: call R30 with noreturn

0000085d: sub __libc_csu_init(__libc_csu_init_result)
00000877: __libc_csu_init_result :: out u32 = low:32[R0]

00000428:
0000042c: #7 := R31 - 0x40
00000432: mem := mem with [#7, el]:u64 <- R29
00000438: mem := mem with [#7 + 8, el]:u64 <- R30
0000043c: R31 := #7
00000442: R29 := R31
00000448: #8 := R31 + 0x10
0000044e: mem := mem with [#8, el]:u64 <- R19
00000454: mem := mem with [#8 + 8, el]:u64 <- R20
00000459: R20 := 0x10000
0000045f: R20 := R20 + 0xDC0
00000465: #9 := R31 + 0x20
0000046b: mem := mem with [#9, el]:u64 <- R21
00000471: mem := mem with [#9 + 8, el]:u64 <- R22
00000476: R21 := 0x10000
0000047c: R21 := R21 + 0xDB8
00000483: R20 := R20 + ~R21 + 1
00000489: R22 := pad:64[31:0[R0]]
0000048f: #10 := R31 + 0x30
00000495: mem := mem with [#10, el]:u64 <- R23
0000049b: mem := mem with [#10 + 8, el]:u64 <- R24
000004a1: R23 := R1
000004a7: R24 := R2
000004ac: R30 := 0x7A0
000004af: call @_init with return %000004b1

000004b1:
000004b5: #11 := ~(R20 ~>> 3)
000004b9: #12 := ~(R20 ~>> 3) + 1
000004be: VF := extend:65[#12] <> extend:65[#11] + 1
000004c3: CF := pad:65[#12] <> pad:65[#11] + 1
000004c7: ZF := #12 = 0
000004cb: NF := 63:63[#12]
000004d1: when ZF goto %000004cf
0000085e: goto %00000520

00000520:
00000526: R20 :=
          63:61[63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20]].60:0[R20
          >> 3 | R20 << 0x3D]
0000052b: R19 := 0
0000085f: goto %0000052d

0000052d:
00000533: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000539: R2 := R24
0000053f: R19 := R19 + 1
00000545: R1 := R23
0000054b: R0 := pad:64[31:0[R22]]
00000550: R30 := 0x7C8
00000553: call R3 with return %00000555

00000555:
00000559: #16 := ~R19
0000055e: #17 := R20 + ~R19 + 1
00000564: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
0000056a: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
0000056e: ZF := #17 = 0
00000572: NF := 63:63[#17]
00000577: when ZF <> 1 goto %0000052d
00000860: goto %000004cf

000004cf:
000004d8: #13 := R31 + 0x10
000004dd: R19 := mem[#13, el]:u64
000004e2: R20 := mem[#13 + 8, el]:u64
000004e8: #14 := R31 + 0x20
000004ed: R21 := mem[#14, el]:u64
000004f2: R22 := mem[#14 + 8, el]:u64
000004f8: #15 := R31 + 0x30
000004fd: R23 := mem[#15, el]:u64
00000502: R24 := mem[#15 + 8, el]:u64
00000509: R29 := mem[R31, el]:u64
0000050e: R30 := mem[R31 + 8, el]:u64
00000512: R31 := R31 + 0x40
00000517: call R30 with noreturn

00000861: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000878: __libc_start_main_main :: in u64 = R0
00000879: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000087a: __libc_start_main_arg3 :: in out u64 = R2
0000087b: __libc_start_main_auxv :: in out u64 = R3
0000087c: __libc_start_main_result :: out u32 = low:32[R0]

0000028a:
000006b8: R16 := 0x11000
000006bf: R17 := mem[R16 + 8, el]:u64
000006c5: R16 := R16 + 8
000006ca: call R17 with noreturn

00000862: sub _fini(_fini_result)
0000087d: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

00000863: sub _init(_init_result)
0000087e: _init_result :: out u32 = low:32[R0]

000004ad:
0000078e: #19 := R31 - 0x10
00000794: mem := mem with [#19, el]:u64 <- R29
0000079a: mem := mem with [#19 + 8, el]:u64 <- R30
0000079e: R31 := #19
000007a4: R29 := R31
000007a9: R30 := 0x5A4
000007ab: call @call_weak_fn with return %000007ad

000007ad:
000007b2: R29 := mem[R31, el]:u64
000007b7: R30 := mem[R31 + 8, el]:u64
000007bb: R31 := R31 + 0x10
000007c0: call R30 with noreturn

00000864: sub _start(_start_result)
0000087f: _start_result :: out u32 = low:32[R0]

0000023f:
00000242: R29 := 0
00000247: R30 := 0
0000024d: R5 := R0
00000254: R1 := mem[R31, el]:u64
0000025a: R2 := R31 + 8
00000260: R6 := R31
00000265: R0 := 0x10000
0000026c: R0 := mem[R0 + 0xFD8, el]:u64
00000271: R3 := 0x10000
00000278: R3 := mem[R3 + 0xFD0, el]:u64
0000027d: R4 := 0x10000
00000284: R4 := mem[R4 + 0xFB0, el]:u64
00000289: R30 := 0x644
0000028c: call @__libc_start_main with return %0000028e

0000028e:
00000291: R30 := 0x648
00000294: call @abort with return %00000865

00000865:
00000866: call @call_weak_fn with noreturn

00000867: sub abort()


00000292:
000006e4: R16 := 0x11000
000006eb: R17 := mem[R16 + 0x18, el]:u64
000006f1: R16 := R16 + 0x18
000006f6: call R17 with noreturn

00000868: sub call_weak_fn(call_weak_fn_result)
00000880: call_weak_fn_result :: out u32 = low:32[R0]

00000296:
00000299: R0 := 0x10000
000002a0: R0 := mem[R0 + 0xFC8, el]:u64
000002a6: when R0 = 0 goto %000002a4
00000869: goto %00000601

000002a4:
000002ac: call R30 with noreturn

00000601:
00000604: goto @__gmon_start__

00000602:
000006ce: R16 := 0x11000
000006d5: R17 := mem[R16 + 0x10, el]:u64
000006db: R16 := R16 + 0x10
000006e0: call R17 with noreturn

0000086a: sub deregister_tm_clones(deregister_tm_clones_result)
00000881: deregister_tm_clones_result :: out u32 = low:32[R0]

000002b0:
000002b3: R0 := 0x11000
000002b9: R0 := R0 + 0x30
000002be: R1 := 0x11000
000002c4: R1 := R1 + 0x30
000002ca: #1 := ~R0
000002cf: #2 := R1 + ~R0 + 1
000002d5: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002db: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002df: ZF := #2 = 0
000002e3: NF := 63:63[#2]
000002e9: when ZF goto %000002e7
0000086b: goto %000005e3

000005e3:
000005e6: R1 := 0x10000
000005ed: R1 := mem[R1 + 0xFB8, el]:u64
000005f2: when R1 = 0 goto %000002e7
0000086c: goto %000005f6

000002e7:
000002ef: call R30 with noreturn

000005f6:
000005fa: R16 := R1
000005ff: call R16 with noreturn

0000086d: sub frame_dummy(frame_dummy_result)
00000882: frame_dummy_result :: out u32 = low:32[R0]

000003a0:
000003a2: call @register_tm_clones with noreturn

0000086e: sub main(main_argc, main_argv, main_result)
00000883: main_argc :: in u32 = low:32[R0]
00000884: main_argv :: in out u64 = R1
00000885: main_result :: out u32 = low:32[R0]

000003a4:
000003a8: R31 := R31 - 0x10
000003af: mem := mem with [R31 + 0xC, el]:u32 <- 0
000003b4: R8 := 0x11000
000003bb: R8 := pad:64[mem[R8 + 0x34, el]:u32]
000003c3: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003c8: R8 := 0x11000
000003cf: R8 := pad:64[mem[R8 + 0x38, el]:u32]
000003d5: #6 := 31:0[R8] + 0
000003da: VF := extend:33[#6] <> extend:33[31:0[R8]] + 0
000003df: CF := pad:33[#6] <> pad:33[31:0[R8]] - 0x100000000
000003e3: ZF := #6 = 0
000003e7: NF := 31:31[#6]
000003eb: R8 := pad:64[#6]
000003f7: when ZF goto %000003f0
000003f8: goto %000003f3

000003f3:
000003f4: R8 := 1
000003fa: goto %000003f6

000003f0:
000003f1: R8 := 0
000003f9: goto %000003f6

000003f6:
00000400: when 0:0[R8] goto %000003fe
0000086f: goto %0000057b

000003fe:
00000408: R8 := pad:64[mem[R31 + 8, el]:u32]
00000410: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000415: goto %00000413

0000057b:
0000057e: goto %0000057c

0000057c:
00000584: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000588: goto %00000413

00000413:
0000041b: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000421: R31 := R31 + 0x10
00000426: call R30 with noreturn

00000870: sub register_tm_clones(register_tm_clones_result)
00000886: register_tm_clones_result :: out u32 = low:32[R0]

000002f1:
000002f4: R0 := 0x11000
000002fa: R0 := R0 + 0x30
000002ff: R1 := 0x11000
00000305: R1 := R1 + 0x30
0000030c: R1 := R1 + ~R0 + 1
00000313: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
0000031a: R1 := R2 + (R1 ~>> 3)
00000320: #3 := ~(R1 ~>> 1)
00000324: #4 := ~(R1 ~>> 1) + 1
00000329: VF := extend:65[#4] <> extend:65[#3] + 1
0000032e: CF := pad:65[#4] <> pad:65[#3] + 1
00000332: ZF := #4 = 0
00000336: NF := 63:63[#4]
0000033e: R1 :=

          >> 1 | R1 << 0x3F]
00000344: when ZF goto %00000342
00000871: goto %000005c5

000005c5:
000005c8: R2 := 0x10000
000005cf: R2 := mem[R2 + 0xFE0, el]:u64
000005d4: when R2 = 0 goto %00000342
00000872: goto %000005d8

00000342:
0000034a: call R30 with noreturn

000005d8:
000005dc: R16 := R2
000005e1: call R16 with noreturn
