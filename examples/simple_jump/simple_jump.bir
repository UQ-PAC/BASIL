00000321: program
000002f7: sub __cxa_finalize(__cxa_finalize_result)
00000322: __cxa_finalize_result :: out u32 = R0

0000023e:
00000299: R16 := 0x10000
0000029d: R17 := mem[R16 + 0xFA0, el]:u64
000002a1: R16 := R16 + 0xFA0
000002a5: call R17 with noreturn

000002f8: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000323: __do_global_dtors_aux_result :: out u32 = R0

000000d9:
000000db: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000dd: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000df: R31 := R31 - 0x20
000000e3: R29 := R31
000000e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000eb: R19 := 0x11000
000000ef: #28 := pad:64[mem[R19 + 0x10]]
000000f1: R0 := 0
000000f3: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
000000fc: #29 := extract:31:0[R0] <> 0
000000f8: when #29 goto %000000f6
00000312: goto %00000213

00000213:
00000215: R0 := 0x10000
00000219: R0 := mem[R0 + 0xFD8, el]:u64
00000222: #84 := R0 = 0
0000021e: when #84 goto %0000021c
00000313: goto %00000233

00000233:
00000235: R0 := 0x11000
00000239: R0 := mem[R0 + 8, el]:u64
0000023d: R30 := 0x700
00000240: call @__cxa_finalize with return %0000021c

0000021c:
00000225: R30 := 0x704
00000227: call @deregister_tm_clones with return %00000229

00000229:
0000022b: R0 := 0
0000022d: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000231: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
00000314: goto %000000f6

000000f6:
000000ff: R19 := mem[R31 + 0x10, el]:u64
00000103: R29 := mem[R31, el]:u64
00000105: R30 := mem[R31 + 8, el]:u64
00000107: R31 := R31 + 0x20
0000010b: call R30 with noreturn

000002fc: sub __libc_csu_fini(__libc_csu_fini_result)
00000324: __libc_csu_fini_result :: out u32 = R0

000001c9:
000001cb: call R30 with noreturn

000002fd: sub __libc_csu_init(__libc_csu_init_result)
00000325: __libc_csu_init_result :: out u32 = R0

0000014b:
0000014d: mem := mem with [R31 - 0x40, el]:u64 <- R29
0000014f: mem := mem with [R31 - 0x38, el]:u64 <- R30
00000151: R31 := R31 - 0x40
00000155: R29 := R31
00000159: mem := mem with [R31, el]:u64 <- R31 + 0x20
0000015b: mem := mem with [R31, el]:u64 <- R31 + 0x28
0000015f: R20 := 0x10000
00000163: R20 := R20 + 0xD90
00000167: mem := mem with [R31, el]:u64 <- R31 + 0x40
00000169: mem := mem with [R31, el]:u64 <- R31 + 0x48
0000016d: R21 := 0x10000
00000171: R21 := R21 + 0xD88
00000175: R20 := R20 - R21
00000179: #47 := extract:31:0[R0]
0000017b: R22 := 0
0000017d: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#47]
00000181: mem := mem with [R31, el]:u64 <- R31 + 0x60
00000183: mem := mem with [R31, el]:u64 <- R31 + 0x68
00000187: R23 := R1
0000018b: R24 := R2
0000018f: R30 := 0x780
00000192: call @_init with return %00000194

00000194:
00000196: #58 := ~(R20 ~>> 3) + 1
00000198: NF := extract:63:63[#58]
0000019a: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#58]
0000019c: ZF := #58 = 0
0000019e: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#58]
000001a7: #60 := ZF
000001a3: when #60 goto %000001a1
00000315: goto %000001ce

000001ce:
000001d0: R20 := R20 >> 3
000001d4: R19 := 0
00000316: goto %000001d6

000001d6:
000001d8: R3 := mem[R21 + (R19 << 3), el]:u64
000001dc: R2 := R24
000001e0: R19 := R19 + 1
000001e4: R1 := R23
000001e8: #75 := extract:31:0[R22]
000001ea: R0 := 0
000001ec: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#75]
000001f0: R30 := 0x7A8
000001f2: call R3 with return %000001f5

000001f5:
000001f7: #79 := 1 + ~R19 + R20
000001f9: NF := extract:63:63[#79]
000001fb: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#79] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#79]
000001fd: ZF := #79 = 0
000001ff: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#79] | extract:63:63[R20] &
          ~extract:63:63[#79]
00000207: #81 := ~ZF <> 0
00000203: when #81 goto %000001d6
00000317: goto %000001a1

000001a1:
000001aa: R19 := mem[R31 + 0x10, el]:u64
000001ac: R20 := mem[R31 + 0x18, el]:u64
000001b0: R21 := mem[R31 + 0x20, el]:u64
000001b2: R22 := mem[R31 + 0x28, el]:u64
000001b6: R23 := mem[R31 + 0x30, el]:u64
000001b8: R24 := mem[R31 + 0x38, el]:u64
000001bc: R29 := mem[R31, el]:u64
000001be: R30 := mem[R31 + 8, el]:u64
000001c0: R31 := R31 + 0x40
000001c4: call R30 with noreturn

00000301: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000326: __libc_start_main_main :: in u64 = R0
00000327: __libc_start_main_arg2 :: in u32 = R1
00000328: __libc_start_main_arg3 :: in out u64 = R2
00000329: __libc_start_main_auxv :: in out u64 = R3
0000032a: __libc_start_main_result :: out u32 = R0

00000055:
000002a9: R16 := 0x10000
000002ad: R17 := mem[R16 + 0xFA8, el]:u64
000002b1: R16 := R16 + 0xFA8
000002b5: call R17 with noreturn

00000302: sub _fini(_fini_result)
0000032b: _fini_result :: out u32 = R0

00000009:
0000000b: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000d: mem := mem with [R31 - 8, el]:u64 <- R30
0000000f: R31 := R31 - 0x10
00000013: R29 := R31
00000017: R29 := mem[R31, el]:u64
00000019: R30 := mem[R31 + 8, el]:u64
0000001b: R31 := R31 + 0x10
0000001f: call R30 with noreturn

00000303: sub _init(_init_result)
0000032c: _init_result :: out u32 = R0

00000190:
000002d9: mem := mem with [R31 - 0x10, el]:u64 <- R29
000002db: mem := mem with [R31 - 8, el]:u64 <- R30
000002dd: R31 := R31 - 0x10
000002e1: R29 := R31
000002e5: R30 := 0x5A4
000002e7: call @call_weak_fn with return %000002e9

000002e9:
000002eb: R29 := mem[R31, el]:u64
000002ed: R30 := mem[R31 + 8, el]:u64
000002ef: R31 := R31 + 0x10
000002f3: call R30 with noreturn

00000304: sub _start(_start_result)
0000032d: _start_result :: out u32 = R0

00000022:
00000024: R29 := 0
00000028: R30 := 0
0000002c: R5 := R0
00000030: R1 := mem[R31, el]:u64
00000034: R2 := R31 + 8
00000038: R6 := R31
0000003c: R0 := 0x10000
00000040: R0 := mem[R0 + 0xFF0, el]:u64
00000044: R3 := 0x10000
00000048: R3 := mem[R3 + 0xFE8, el]:u64
0000004c: R4 := 0x10000
00000050: R4 := mem[R4 + 0xFC8, el]:u64
00000054: R30 := 0x644
00000057: call @__libc_start_main with return %00000059

00000059:
0000005b: R30 := 0x648
0000005e: call @abort with return %00000318

00000318:
00000319: call @call_weak_fn with noreturn

00000307: sub abort()


0000005c:
000002c9: R16 := 0x10000
000002cd: R17 := mem[R16 + 0xFB8, el]:u64
000002d1: R16 := R16 + 0xFB8
000002d5: call R17 with noreturn

00000308: sub call_weak_fn(call_weak_fn_result)
0000032e: call_weak_fn_result :: out u32 = R0

00000060:
00000062: R0 := 0x10000
00000066: R0 := mem[R0 + 0xFE0, el]:u64
0000006f: #5 := R0 = 0
0000006b: when #5 goto %00000069
0000031a: goto %00000274

00000069:
00000072: call R30 with noreturn

00000274:
00000277: goto @__gmon_start__

00000275:
000002b9: R16 := 0x10000
000002bd: R17 := mem[R16 + 0xFB0, el]:u64
000002c1: R16 := R16 + 0xFB0
000002c5: call R17 with noreturn

0000030a: sub deregister_tm_clones(deregister_tm_clones_result)
0000032f: deregister_tm_clones_result :: out u32 = R0

00000077:
00000079: R0 := 0x11000
0000007d: R0 := R0 + 0x10
00000081: R1 := 0x11000
00000085: R1 := R1 + 0x10
00000089: #9 := 1 + ~R0 + R1
0000008b: NF := extract:63:63[#9]
0000008d: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
0000008f: ZF := #9 = 0
00000091: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
0000009a: #11 := ZF
00000096: when #11 goto %00000094
0000031b: goto %0000025b

0000025b:
0000025d: R1 := 0x10000
00000261: R1 := mem[R1 + 0xFD0, el]:u64
00000269: #90 := R1 = 0
00000265: when #90 goto %00000094
0000031c: goto %0000026b

00000094:
0000009d: call R30 with noreturn

0000026b:
0000026d: R16 := R1
00000271: call R16 with noreturn

0000030d: sub frame_dummy(frame_dummy_result)
00000330: frame_dummy_result :: out u32 = R0

0000010e:
00000110: call @register_tm_clones with noreturn

0000030e: sub main(main_argc, main_argv, main_result)
00000331: main_argc :: in u32 = R0
00000332: main_argv :: in out u64 = R1
00000333: main_result :: out u32 = R0

00000112:
00000114: R31 := R31 - 0x10
00000118: R0 := 0
0000011a: R0 := R0 & 0xFFFFFFFF00000000 | 5
0000011e: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]
00000122: #33 := pad:64[mem[R31 + 0xC, el]:u32]
00000124: R0 := 0
00000126: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#33]
0000012a: #34 := 0xFFFFFFFFFFFFFFFB + extend:64[extract:31:0[R0]]
0000012c: NF := extract:63:63[#34]
0000012e: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#34]
00000130: ZF := #34 = 0
00000132: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#34] |
          ~extract:63:63[#34]
0000013b: #36 := ~ZF <> 0
00000137: when #36 goto %00000135
0000031d: goto %00000209

00000209:
0000020b: R0 := 0
0000020d: R0 := R0 & 0xFFFFFFFF00000000 | 6
00000211: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]
0000031e: goto %00000135

00000135:
0000013e: R0 := 0
00000140: R0 := R0 & 0xFFFFFFFF00000000
00000144: R31 := R31 + 0x10
00000148: call R30 with noreturn

00000311: sub register_tm_clones(register_tm_clones_result)
00000334: register_tm_clones_result :: out u32 = R0

000000a0:
000000a2: R0 := 0x11000
000000a6: R0 := R0 + 0x10
000000aa: R1 := 0x11000
000000ae: R1 := R1 + 0x10
000000b2: R1 := R1 - R0
000000b6: R2 := R1 >> 0x3F
000000ba: R1 := R2 + (R1 ~>> 3)
000000be: #22 := ~(R1 ~>> 1) + 1
000000c0: NF := extract:63:63[#22]
000000c2: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000000c4: ZF := #22 = 0
000000c6: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000000ca: R1 := R1 >> 1
000000d3: #25 := ZF
000000cf: when #25 goto %000000cd
0000031f: goto %00000242

00000242:
00000244: R2 := 0x10000
00000248: R2 := mem[R2 + 0xFF8, el]:u64
00000250: #86 := R2 = 0
0000024c: when #86 goto %000000cd
00000320: goto %00000252

000000cd:
000000d6: call R30 with noreturn

00000252:
00000254: R16 := R2
00000258: call R16 with noreturn
