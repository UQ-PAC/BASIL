00000880: program
00000863: sub __cxa_finalize(__cxa_finalize_result)
00000881: __cxa_finalize_result :: out u32 = low:32[R0]

00000585:
00000686: R16 := 0x10000
0000068d: R17 := mem[R16 + 0xF90, el]:u64
00000693: R16 := R16 + 0xF90
00000698: call R17 with noreturn

00000864: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000882: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000338:
0000033c: #5 := R31 - 0x20
00000342: mem := mem with [#5, el]:u64 <- R29
00000348: mem := mem with [#5 + 8, el]:u64 <- R30
0000034c: R31 := #5
00000352: R29 := R31
0000035a: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000035f: R19 := 0x11000
00000366: R0 := pad:64[mem[R19 + 0x10]]
0000036d: when 31:0[R0] <> 0 goto %0000036b
00000865: goto %0000054e

0000054e:
00000551: R0 := 0x10000
00000558: R0 := mem[R0 + 0xFD8, el]:u64
0000055e: when R0 = 0 goto %0000055c
00000866: goto %00000575

00000575:
00000578: R0 := 0x11000
0000057f: R0 := mem[R0 + 8, el]:u64
00000584: R30 := 0x790
00000587: call @__cxa_finalize with return %0000055c

0000055c:
00000564: R30 := 0x794
00000566: call @deregister_tm_clones with return %00000568

00000568:
0000056b: R0 := 1
00000573: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000867: goto %0000036b

0000036b:
00000375: R19 := mem[R31 + 0x10, el]:u64
0000037c: R29 := mem[R31, el]:u64
00000381: R30 := mem[R31 + 8, el]:u64
00000385: R31 := R31 + 0x20
0000038a: call R30 with noreturn

00000868: sub __libc_csu_fini(__libc_csu_fini_result)
00000883: __libc_csu_fini_result :: out u32 = low:32[R0]

000004ee:
000004f1: call R30 with noreturn

00000869: sub __libc_csu_init(__libc_csu_init_result)
00000884: __libc_csu_init_result :: out u32 = low:32[R0]

000003fb:
000003ff: #7 := R31 - 0x40
00000405: mem := mem with [#7, el]:u64 <- R29
0000040b: mem := mem with [#7 + 8, el]:u64 <- R30
0000040f: R31 := #7
00000415: R29 := R31
0000041b: #8 := R31 + 0x10
00000421: mem := mem with [#8, el]:u64 <- R19
00000427: mem := mem with [#8 + 8, el]:u64 <- R20
0000042c: R20 := 0x10000
00000432: R20 := R20 + 0xD80
00000438: #9 := R31 + 0x20
0000043e: mem := mem with [#9, el]:u64 <- R21
00000444: mem := mem with [#9 + 8, el]:u64 <- R22
00000449: R21 := 0x10000
0000044f: R21 := R21 + 0xD78
00000456: R20 := R20 + ~R21 + 1
0000045c: R22 := pad:64[31:0[R0]]
00000462: #10 := R31 + 0x30
00000468: mem := mem with [#10, el]:u64 <- R23
0000046e: mem := mem with [#10 + 8, el]:u64 <- R24
00000474: R23 := R1
0000047a: R24 := R2
0000047f: R30 := 0x818
00000482: call @_init with return %00000484

00000484:
00000488: #11 := ~(R20 ~>> 3)
0000048c: #12 := ~(R20 ~>> 3) + 1
00000491: VF := extend:65[#12] <> extend:65[#11] + 1
00000496: CF := pad:65[#12] <> pad:65[#11] + 1
0000049a: ZF := #12 = 0
0000049e: NF := 63:63[#12]
000004a4: when ZF goto %000004a2
0000086a: goto %000004f3

000004f3:
000004f9: R20 :=

          >> 3 | R20 << 0x3D]
000004fe: R19 := 0
0000086b: goto %00000500

00000500:
00000506: R3 := mem[R21 + (60:0[R19].0), el]:u64
0000050c: R2 := R24
00000512: R19 := R19 + 1
00000518: R1 := R23
0000051e: R0 := pad:64[31:0[R22]]
00000523: R30 := 0x840
00000526: call R3 with return %00000528

00000528:
0000052c: #16 := ~R19
00000531: #17 := R20 + ~R19 + 1
00000537: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
0000053d: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
00000541: ZF := #17 = 0
00000545: NF := 63:63[#17]
0000054a: when ZF <> 1 goto %00000500
0000086c: goto %000004a2

000004a2:
000004ab: #13 := R31 + 0x10
000004b0: R19 := mem[#13, el]:u64
000004b5: R20 := mem[#13 + 8, el]:u64
000004bb: #14 := R31 + 0x20
000004c0: R21 := mem[#14, el]:u64
000004c5: R22 := mem[#14 + 8, el]:u64
000004cb: #15 := R31 + 0x30
000004d0: R23 := mem[#15, el]:u64
000004d5: R24 := mem[#15 + 8, el]:u64
000004dc: R29 := mem[R31, el]:u64
000004e1: R30 := mem[R31 + 8, el]:u64
000004e5: R31 := R31 + 0x40
000004ea: call R30 with noreturn

0000086d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000885: __libc_start_main_main :: in u64 = R0
00000886: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000887: __libc_start_main_arg3 :: in out u64 = R2
00000888: __libc_start_main_auxv :: in out u64 = R3
00000889: __libc_start_main_result :: out u32 = low:32[R0]

00000276:
000006b2: R16 := 0x10000
000006b9: R17 := mem[R16 + 0xFA0, el]:u64
000006bf: R16 := R16 + 0xFA0
000006c4: call R17 with noreturn

0000086e: sub _fini(_fini_result)
0000088a: _fini_result :: out u32 = low:32[R0]

00000034:
00000038: #0 := R31 - 0x10
0000003e: mem := mem with [#0, el]:u64 <- R29
00000044: mem := mem with [#0 + 8, el]:u64 <- R30
00000048: R31 := #0
0000004e: R29 := R31
00000055: R29 := mem[R31, el]:u64
0000005a: R30 := mem[R31 + 8, el]:u64
0000005e: R31 := R31 + 0x10
00000063: call R30 with noreturn

0000086f: sub _init(_init_result)
0000088b: _init_result :: out u32 = low:32[R0]

00000480:
00000798: #19 := R31 - 0x10
0000079e: mem := mem with [#19, el]:u64 <- R29
000007a4: mem := mem with [#19 + 8, el]:u64 <- R30
000007a8: R31 := #19
000007ae: R29 := R31
000007b3: R30 := 0x614
000007b5: call @call_weak_fn with return %000007b7

000007b7:
000007bc: R29 := mem[R31, el]:u64
000007c1: R30 := mem[R31 + 8, el]:u64
000007c5: R31 := R31 + 0x10
000007ca: call R30 with noreturn

00000870: sub _start(_start_result)
0000088c: _start_result :: out u32 = low:32[R0]

0000022b:
0000022e: R29 := 0
00000233: R30 := 0
00000239: R5 := R0
00000240: R1 := mem[R31, el]:u64
00000246: R2 := R31 + 8
0000024c: R6 := R31
00000251: R0 := 0x10000
00000258: R0 := mem[R0 + 0xFF0, el]:u64
0000025d: R3 := 0x10000
00000264: R3 := mem[R3 + 0xFE8, el]:u64
00000269: R4 := 0x10000
00000270: R4 := mem[R4 + 0xFC8, el]:u64
00000275: R30 := 0x6D4
00000278: call @__libc_start_main with return %0000027a

0000027a:
0000027d: R30 := 0x6D8
00000280: call @abort with return %00000871

00000871:
00000872: call @call_weak_fn with noreturn

00000873: sub abort()


0000027e:
000006de: R16 := 0x10000
000006e5: R17 := mem[R16 + 0xFB0, el]:u64
000006eb: R16 := R16 + 0xFB0
000006f0: call R17 with noreturn

00000874: sub call_weak_fn(call_weak_fn_result)
0000088d: call_weak_fn_result :: out u32 = low:32[R0]

00000282:
00000285: R0 := 0x10000
0000028c: R0 := mem[R0 + 0xFE0, el]:u64
00000292: when R0 = 0 goto %00000290
00000875: goto %000005c5

00000290:
00000298: call R30 with noreturn

000005c5:
000005c8: goto @__gmon_start__

000005c6:
000006c8: R16 := 0x10000
000006cf: R17 := mem[R16 + 0xFA8, el]:u64
000006d5: R16 := R16 + 0xFA8
000006da: call R17 with noreturn

00000876: sub deregister_tm_clones(deregister_tm_clones_result)
0000088e: deregister_tm_clones_result :: out u32 = low:32[R0]

0000029c:
0000029f: R0 := 0x11000
000002a5: R0 := R0 + 0x10
000002aa: R1 := 0x11000
000002b0: R1 := R1 + 0x10
000002b6: #1 := ~R0
000002bb: #2 := R1 + ~R0 + 1
000002c1: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002c7: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002cb: ZF := #2 = 0
000002cf: NF := 63:63[#2]
000002d5: when ZF goto %000002d3
00000877: goto %000005a7

000005a7:
000005aa: R1 := 0x10000
000005b1: R1 := mem[R1 + 0xFD0, el]:u64
000005b6: when R1 = 0 goto %000002d3
00000878: goto %000005ba

000002d3:
000002db: call R30 with noreturn

000005ba:
000005be: R16 := R1
000005c3: call R16 with noreturn

00000879: sub frame_dummy(frame_dummy_result)
0000088f: frame_dummy_result :: out u32 = low:32[R0]

0000038c:
0000038e: call @register_tm_clones with noreturn

0000087a: sub free(free_ptr)
00000890: free_ptr :: in out u64 = R0

000003e0:
000006f4: R16 := 0x10000
000006fb: R17 := mem[R16 + 0xFB8, el]:u64
00000701: R16 := R16 + 0xFB8
00000706: call R17 with noreturn

0000087b: sub main(main_argc, main_argv, main_result)
00000891: main_argc :: in u32 = low:32[R0]
00000892: main_argv :: in out u64 = R1
00000893: main_result :: out u32 = low:32[R0]

00000390:
00000394: #6 := R31 - 0x20
0000039a: mem := mem with [#6, el]:u64 <- R29
000003a0: mem := mem with [#6 + 8, el]:u64 <- R30
000003a4: R31 := #6
000003aa: R29 := R31
000003af: R0 := 4
000003b4: R30 := 0x7BC
000003b7: call @malloc with return %000003b9

000003b9:
000003bf: mem := mem with [R31 + 0x18, el]:u64 <- R0
000003c6: R0 := mem[R31 + 0x18, el]:u64
000003cb: R1 := 1
000003d3: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003da: R0 := mem[R31 + 0x18, el]:u64
000003df: R30 := 0x7D4
000003e2: call @free with return %000003e4

000003e4:
000003eb: R29 := mem[R31, el]:u64
000003f0: R30 := mem[R31 + 8, el]:u64
000003f4: R31 := R31 + 0x20
000003f9: call R30 with noreturn

0000087c: sub malloc(malloc_size, malloc_result)
00000894: malloc_size :: in u64 = R0
00000895: malloc_result :: out u64 = R0

000003b5:
0000069c: R16 := 0x10000
000006a3: R17 := mem[R16 + 0xF98, el]:u64
000006a9: R16 := R16 + 0xF98
000006ae: call R17 with noreturn

0000087d: sub register_tm_clones(register_tm_clones_result)
00000896: register_tm_clones_result :: out u32 = low:32[R0]

000002dd:
000002e0: R0 := 0x11000
000002e6: R0 := R0 + 0x10
000002eb: R1 := 0x11000
000002f1: R1 := R1 + 0x10
000002f8: R1 := R1 + ~R0 + 1
000002ff: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000306: R1 := R2 + (R1 ~>> 3)
0000030c: #3 := ~(R1 ~>> 1)
00000310: #4 := ~(R1 ~>> 1) + 1
00000315: VF := extend:65[#4] <> extend:65[#3] + 1
0000031a: CF := pad:65[#4] <> pad:65[#3] + 1
0000031e: ZF := #4 = 0
00000322: NF := 63:63[#4]
0000032a: R1 :=
          63:63[63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1]].62:0[R1
          >> 1 | R1 << 0x3F]
00000330: when ZF goto %0000032e
0000087e: goto %00000589

00000589:
0000058c: R2 := 0x10000
00000593: R2 := mem[R2 + 0xFF8, el]:u64
00000598: when R2 = 0 goto %0000032e
0000087f: goto %0000059c

0000032e:
00000336: call R30 with noreturn

0000059c:
000005a0: R16 := R2
000005a5: call R16 with noreturn
