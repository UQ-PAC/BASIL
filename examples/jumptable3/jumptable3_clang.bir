00000b97: program
00000b53: sub __cxa_finalize(__cxa_finalize_result)
00000b98: __cxa_finalize_result :: out u32 = low:32[R0]

00000849:
0000092a: R16 := 0x11000
00000931: R17 := mem[R16, el]:u64
00000937: R16 := R16
0000093c: call R17 with noreturn

00000b54: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000b99: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000434:
00000438: #5 := R31 - 0x20
0000043e: mem := mem with [#5, el]:u64 <- R29
00000444: mem := mem with [#5 + 8, el]:u64 <- R30
00000448: R31 := #5
0000044e: R29 := R31
00000456: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000045b: R19 := 0x11000
00000462: R0 := pad:64[mem[R19 + 0x34]]
00000469: when 31:0[R0] <> 0 goto %00000467
00000b89: goto %00000812

00000812:
00000815: R0 := 0x10000
0000081c: R0 := mem[R0 + 0xFC0, el]:u64
00000822: when R0 = 0 goto %00000820
00000b8a: goto %00000839

00000839:
0000083c: R0 := 0x11000
00000843: R0 := mem[R0 + 0x28, el]:u64
00000848: R30 := 0x700
0000084b: call @__cxa_finalize with return %00000820

00000820:
00000828: R30 := 0x704
0000082a: call @deregister_tm_clones with return %0000082c

0000082c:
0000082f: R0 := 1
00000837: mem := mem with [R19 + 0x34] <- 7:0[R0]
00000b8b: goto %00000467

00000467:
00000471: R19 := mem[R31 + 0x10, el]:u64
00000478: R29 := mem[R31, el]:u64
0000047d: R30 := mem[R31 + 8, el]:u64
00000481: R31 := R31 + 0x20
00000486: call R30 with noreturn

00000b58: sub __libc_csu_fini(__libc_csu_fini_result)
00000b9a: __libc_csu_fini_result :: out u32 = low:32[R0]

000006ba:
000006bd: call R30 with noreturn

00000b59: sub __libc_csu_init(__libc_csu_init_result)
00000b9b: __libc_csu_init_result :: out u32 = low:32[R0]

000005c7:
000005cb: #11 := R31 - 0x40
000005d1: mem := mem with [#11, el]:u64 <- R29
000005d7: mem := mem with [#11 + 8, el]:u64 <- R30
000005db: R31 := #11
000005e1: R29 := R31
000005e7: #12 := R31 + 0x10
000005ed: mem := mem with [#12, el]:u64 <- R19
000005f3: mem := mem with [#12 + 8, el]:u64 <- R20
000005f8: R20 := 0x10000
000005fe: R20 := R20 + 0xDC0
00000604: #13 := R31 + 0x20
0000060a: mem := mem with [#13, el]:u64 <- R21
00000610: mem := mem with [#13 + 8, el]:u64 <- R22
00000615: R21 := 0x10000
0000061b: R21 := R21 + 0xDB8
00000622: R20 := R20 + ~R21 + 1
00000628: R22 := pad:64[31:0[R0]]
0000062e: #14 := R31 + 0x30
00000634: mem := mem with [#14, el]:u64 <- R23
0000063a: mem := mem with [#14 + 8, el]:u64 <- R24
00000640: R23 := R1
00000646: R24 := R2
0000064b: R30 := 0x888
0000064e: call @_init with return %00000650

00000650:
00000654: #15 := ~(R20 ~>> 3)
00000658: #16 := ~(R20 ~>> 3) + 1
0000065d: VF := extend:65[#16] <> extend:65[#15] + 1
00000662: CF := pad:65[#16] <> pad:65[#15] + 1
00000666: ZF := #16 = 0
0000066a: NF := 63:63[#16]
00000670: when ZF goto %0000066e
00000b8c: goto %000006bf

000006bf:
000006c5: R20 :=

          >> 3 | R20 << 0x3D]
000006ca: R19 := 0
00000b8d: goto %000006cc

000006cc:
000006d2: R3 := mem[R21 + (60:0[R19].0), el]:u64
000006d8: R2 := R24
000006de: R19 := R19 + 1
000006e4: R1 := R23
000006ea: R0 := pad:64[31:0[R22]]
000006ef: R30 := 0x8B0
000006f2: call R3 with return %000006f4

000006f4:
000006f8: #20 := ~R19
000006fd: #21 := R20 + ~R19 + 1
00000703: VF := extend:65[#21] <> extend:65[R20] + extend:65[#20] + 1
00000709: CF := pad:65[#21] <> pad:65[R20] + pad:65[#20] + 1
0000070d: ZF := #21 = 0
00000711: NF := 63:63[#21]
00000716: when ZF <> 1 goto %000006cc
00000b8e: goto %0000066e

0000066e:
00000677: #17 := R31 + 0x10
0000067c: R19 := mem[#17, el]:u64
00000681: R20 := mem[#17 + 8, el]:u64
00000687: #18 := R31 + 0x20
0000068c: R21 := mem[#18, el]:u64
00000691: R22 := mem[#18 + 8, el]:u64
00000697: #19 := R31 + 0x30
0000069c: R23 := mem[#19, el]:u64
000006a1: R24 := mem[#19 + 8, el]:u64
000006a8: R29 := mem[R31, el]:u64
000006ad: R30 := mem[R31 + 8, el]:u64
000006b1: R31 := R31 + 0x40
000006b6: call R30 with noreturn

00000b5d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000b9c: __libc_start_main_main :: in u64 = R0
00000b9d: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000b9e: __libc_start_main_arg3 :: in out u64 = R2
00000b9f: __libc_start_main_auxv :: in out u64 = R3
00000ba0: __libc_start_main_result :: out u32 = low:32[R0]

00000372:
00000940: R16 := 0x11000
00000947: R17 := mem[R16 + 8, el]:u64
0000094d: R16 := R16 + 8
00000952: call R17 with noreturn

00000b5e: sub _fini(_fini_result)
00000ba1: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

00000b5f: sub _init(_init_result)
00000ba2: _init_result :: out u32 = low:32[R0]

0000064c:
00000a50: #23 := R31 - 0x10
00000a56: mem := mem with [#23, el]:u64 <- R29
00000a5c: mem := mem with [#23 + 8, el]:u64 <- R30
00000a60: R31 := #23
00000a66: R29 := R31
00000a6b: R30 := 0x5A4
00000a6d: call @call_weak_fn with return %00000a6f

00000a6f:
00000a74: R29 := mem[R31, el]:u64
00000a79: R30 := mem[R31 + 8, el]:u64
00000a7d: R31 := R31 + 0x10
00000a82: call R30 with noreturn

00000b60: sub _start(_start_result)
00000ba3: _start_result :: out u32 = low:32[R0]

00000327:
0000032a: R29 := 0
0000032f: R30 := 0
00000335: R5 := R0
0000033c: R1 := mem[R31, el]:u64
00000342: R2 := R31 + 8
00000348: R6 := R31
0000034d: R0 := 0x10000
00000354: R0 := mem[R0 + 0xFD8, el]:u64
00000359: R3 := 0x10000
00000360: R3 := mem[R3 + 0xFD0, el]:u64
00000365: R4 := 0x10000
0000036c: R4 := mem[R4 + 0xFB0, el]:u64
00000371: R30 := 0x644
00000374: call @__libc_start_main with return %00000376

00000376:
00000379: R30 := 0x648
0000037c: call @abort with return %00000b8f

00000b8f:
00000b90: call @call_weak_fn with noreturn

00000b63: sub abort()


0000037a:
0000096c: R16 := 0x11000
00000973: R17 := mem[R16 + 0x18, el]:u64
00000979: R16 := R16 + 0x18
0000097e: call R17 with noreturn

00000b64: sub add_six(add_six_result)
00000ba4: add_six_result :: out u32 = low:32[R0]

000004ab:
000004ae: R9 := 0x11000
000004b5: R8 := pad:64[mem[R9 + 0x30, el]:u32]
000004bb: R8 := pad:64[31:0[R8] + 6]
000004c3: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
000004c8: call R30 with noreturn

00000b65: sub add_two(add_two_result)
00000ba5: add_two_result :: out u32 = low:32[R0]

0000048c:
0000048f: R9 := 0x11000
00000496: R8 := pad:64[mem[R9 + 0x30, el]:u32]
0000049c: R8 := pad:64[31:0[R8] + 2]
000004a4: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
000004a9: call R30 with noreturn

00000b66: sub call_weak_fn(call_weak_fn_result)
00000ba6: call_weak_fn_result :: out u32 = low:32[R0]

0000037e:
00000381: R0 := 0x10000
00000388: R0 := mem[R0 + 0xFC8, el]:u64
0000038e: when R0 = 0 goto %0000038c
00000b91: goto %00000889

0000038c:
00000394: call R30 with noreturn

00000889:
0000088c: goto @__gmon_start__

0000088a:
00000956: R16 := 0x11000
0000095d: R17 := mem[R16 + 0x10, el]:u64
00000963: R16 := R16 + 0x10
00000968: call R17 with noreturn

00000b68: sub deregister_tm_clones(deregister_tm_clones_result)
00000ba7: deregister_tm_clones_result :: out u32 = low:32[R0]

00000398:
0000039b: R0 := 0x11000
000003a1: R0 := R0 + 0x38
000003a6: R1 := 0x11000
000003ac: R1 := R1 + 0x38
000003b2: #1 := ~R0
000003b7: #2 := R1 + ~R0 + 1
000003bd: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000003c3: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000003c7: ZF := #2 = 0
000003cb: NF := 63:63[#2]
000003d1: when ZF goto %000003cf
00000b92: goto %0000086b

0000086b:
0000086e: R1 := 0x10000
00000875: R1 := mem[R1 + 0xFB8, el]:u64
0000087a: when R1 = 0 goto %000003cf
00000b93: goto %0000087e

000003cf:
000003d7: call R30 with noreturn

0000087e:
00000882: R16 := R1
00000887: call R16 with noreturn

00000b6b: sub frame_dummy(frame_dummy_result)
00000ba8: frame_dummy_result :: out u32 = low:32[R0]

00000488:
0000048a: call @register_tm_clones with noreturn

00000b6c: sub main(main_argc, main_argv, main_result)
00000ba9: main_argc :: in u32 = low:32[R0]
00000baa: main_argv :: in out u64 = R1
00000bab: main_result :: out u32 = low:32[R0]

000004ff:
00000503: R31 := R31 - 0x30
00000509: #7 := R31 + 0x20
0000050f: mem := mem with [#7, el]:u64 <- R29
00000515: mem := mem with [#7 + 8, el]:u64 <- R30
0000051b: R29 := R31 + 0x20
00000522: mem := mem with [R29 - 4, el]:u32 <- 0
0000052a: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
00000532: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000539: R8 := pad:64[mem[R29 - 8, el]:u32]
0000053f: #8 := 31:0[R8] + 0
00000544: VF := extend:33[#8] <> extend:33[31:0[R8]] + 0
00000549: CF := pad:33[#8] <> pad:33[31:0[R8]] - 0x100000000
0000054d: ZF := #8 = 0
00000551: NF := 31:31[#8]
00000555: R8 := pad:64[#8]
0000055d: mem := mem with [R31 + 8, el]:u64 <- R8
00000563: #9 := R8 - 0xB
00000568: VF := extend:65[#9] <> extend:65[R8] - 0xB
0000056d: CF := pad:65[#9] <> pad:65[R8] + 0xFFFFFFFFFFFFFFF5
00000571: ZF := #9 = 0
00000575: NF := 63:63[#9]
00000579: R8 := #9
00000586: when ~(CF & ~ZF) goto %0000057f
00000587: goto %00000582

00000582:
00000583: R8 := 1
00000589: goto %00000585

0000057f:
00000580: R8 := 0
00000588: goto %00000585

00000585:
0000058f: when 0:0[R8] goto %0000058d
00000b94: goto %00000732

0000058d:
00000595: R8 := 1
0000059d: mem := mem with [R29 - 4, el]:u32 <- 31:0[R8]
000005a2: goto %000005a0

000005a0:
000005a8: R0 := pad:64[mem[R29 - 4, el]:u32]
000005ae: #10 := R31 + 0x20
000005b3: R29 := mem[#10, el]:u64
000005b8: R30 := mem[#10 + 8, el]:u64
000005be: R31 := R31 + 0x30
000005c3: call R30 with noreturn

00000732:
00000737: R11 := mem[R31 + 8, el]:u64
0000073c: R10 := 0
00000742: R10 := R10 + 0x8E8
00000747: R8 := 0x794
0000074f: R9 := extend:64[mem[R10 + (61:0[R11].0), el]:u32]
00000756: R8 := R8 + R9
0000075b: call R8 with noreturn

00000b6e: sub register_tm_clones(register_tm_clones_result)
00000bac: register_tm_clones_result :: out u32 = low:32[R0]

000003d9:
000003dc: R0 := 0x11000
000003e2: R0 := R0 + 0x38
000003e7: R1 := 0x11000
000003ed: R1 := R1 + 0x38
000003f4: R1 := R1 + ~R0 + 1
000003fb: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000402: R1 := R2 + (R1 ~>> 3)
00000408: #3 := ~(R1 ~>> 1)
0000040c: #4 := ~(R1 ~>> 1) + 1
00000411: VF := extend:65[#4] <> extend:65[#3] + 1
00000416: CF := pad:65[#4] <> pad:65[#3] + 1
0000041a: ZF := #4 = 0
0000041e: NF := 63:63[#4]
00000426: R1 :=

          >> 1 | R1 << 0x3F]
0000042c: when ZF goto %0000042a
00000b95: goto %0000084d

0000084d:
00000850: R2 := 0x10000
00000857: R2 := mem[R2 + 0xFE0, el]:u64
0000085c: when R2 = 0 goto %0000042a
00000b96: goto %00000860

0000042a:
00000432: call R30 with noreturn

00000860:
00000864: R16 := R2
00000869: call R16 with noreturn

00000b71: sub sub_seven(sub_seven_result)
00000bad: sub_seven_result :: out u32 = low:32[R0]

000004ca:
000004cd: R9 := 0x11000
000004d4: R8 := pad:64[mem[R9 + 0x30, el]:u32]
000004da: #6 := 31:0[R8] - 7
000004df: VF := extend:33[#6] <> extend:33[31:0[R8]] - 7
000004e4: CF := pad:33[#6] <> pad:33[31:0[R8]] + 0xFFFFFFF9
000004e8: ZF := #6 = 0
000004ec: NF := 31:31[#6]
000004f0: R8 := pad:64[#6]
000004f8: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
000004fd: call R30 with noreturn
