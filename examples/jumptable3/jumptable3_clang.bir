00000ba6: program
00000b87: sub __cxa_finalize(__cxa_finalize_result)
00000ba7: __cxa_finalize_result :: out u32 = low:32[R0]

00000875:
00000956: R16 := 0x11000
0000095d: R17 := mem[R16, el]:u64
00000963: R16 := R16
00000968: call R17 with noreturn

00000b88: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000ba8: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000444:
00000448: #5 := R31 - 0x20
0000044e: mem := mem with [#5, el]:u64 <- R29
00000454: mem := mem with [#5 + 8, el]:u64 <- R30
00000458: R31 := #5
0000045e: R29 := R31
00000466: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000046b: R19 := 0x11000
00000472: R0 := pad:64[mem[R19 + 0x34]]
00000479: when 31:0[R0] <> 0 goto %00000477
00000b89: goto %0000083e

0000083e:
00000841: R0 := 0x10000
00000848: R0 := mem[R0 + 0xFB8, el]:u64
0000084e: when R0 = 0 goto %0000084c
00000b8a: goto %00000865

00000865:
00000868: R0 := 0x11000
0000086f: R0 := mem[R0 + 0x28, el]:u64
00000874: R30 := 0x720
00000877: call @__cxa_finalize with return %0000084c

0000084c:
00000854: R30 := 0x724
00000856: call @deregister_tm_clones with return %00000858

00000858:
0000085b: R0 := 1
00000863: mem := mem with [R19 + 0x34] <- 7:0[R0]
00000b8b: goto %00000477

00000477:
00000481: R19 := mem[R31 + 0x10, el]:u64
00000488: R29 := mem[R31, el]:u64
0000048d: R30 := mem[R31 + 8, el]:u64
00000491: R31 := R31 + 0x20
00000496: call R30 with noreturn

00000b8c: sub __libc_csu_fini(__libc_csu_fini_result)
00000ba9: __libc_csu_fini_result :: out u32 = low:32[R0]

000006df:
000006e2: call R30 with noreturn

00000b8d: sub __libc_csu_init(__libc_csu_init_result)
00000baa: __libc_csu_init_result :: out u32 = low:32[R0]

000005ec:
000005f0: #11 := R31 - 0x40
000005f6: mem := mem with [#11, el]:u64 <- R29
000005fc: mem := mem with [#11 + 8, el]:u64 <- R30
00000600: R31 := #11
00000606: R29 := R31
0000060c: #12 := R31 + 0x10
00000612: mem := mem with [#12, el]:u64 <- R19
00000618: mem := mem with [#12 + 8, el]:u64 <- R20
0000061d: R20 := 0x10000
00000623: R20 := R20 + 0xDB8
00000629: #13 := R31 + 0x20
0000062f: mem := mem with [#13, el]:u64 <- R21
00000635: mem := mem with [#13 + 8, el]:u64 <- R22
0000063a: R21 := 0x10000
00000640: R21 := R21 + 0xDB0
00000647: R20 := R20 + ~R21 + 1
0000064d: R22 := pad:64[31:0[R0]]
00000653: #14 := R31 + 0x30
00000659: mem := mem with [#14, el]:u64 <- R23
0000065f: mem := mem with [#14 + 8, el]:u64 <- R24
00000665: R23 := R1
0000066b: R24 := R2
00000670: R30 := 0x8B8
00000673: call @_init with return %00000675

00000675:
00000679: #15 := ~(R20 ~>> 3)
0000067d: #16 := ~(R20 ~>> 3) + 1
00000682: VF := extend:65[#16] <> extend:65[#15] + 1
00000687: CF := pad:65[#16] <> pad:65[#15] + 1
0000068b: ZF := #16 = 0
0000068f: NF := 63:63[#16]
00000695: when ZF goto %00000693
00000b8e: goto %000006e4

000006e4:
000006ea: R20 :=

          >> 3 | R20 << 0x3D]
000006ef: R19 := 0
00000b8f: goto %000006f1

000006f1:
000006f7: R3 := mem[R21 + (60:0[R19].0), el]:u64
000006fd: R2 := R24
00000703: R19 := R19 + 1
00000709: R1 := R23
0000070f: R0 := pad:64[31:0[R22]]
00000714: R30 := 0x8E0
00000717: call R3 with return %00000719

00000719:
0000071d: #20 := ~R19
00000722: #21 := R20 + ~R19 + 1
00000728: VF := extend:65[#21] <> extend:65[R20] + extend:65[#20] + 1
0000072e: CF := pad:65[#21] <> pad:65[R20] + pad:65[#20] + 1
00000732: ZF := #21 = 0
00000736: NF := 63:63[#21]
0000073b: when ZF <> 1 goto %000006f1
00000b90: goto %00000693

00000693:
0000069c: #17 := R31 + 0x10
000006a1: R19 := mem[#17, el]:u64
000006a6: R20 := mem[#17 + 8, el]:u64
000006ac: #18 := R31 + 0x20
000006b1: R21 := mem[#18, el]:u64
000006b6: R22 := mem[#18 + 8, el]:u64
000006bc: #19 := R31 + 0x30
000006c1: R23 := mem[#19, el]:u64
000006c6: R24 := mem[#19 + 8, el]:u64
000006cd: R29 := mem[R31, el]:u64
000006d2: R30 := mem[R31 + 8, el]:u64
000006d6: R31 := R31 + 0x40
000006db: call R30 with noreturn

00000b91: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000bab: __libc_start_main_main :: in u64 = R0
00000bac: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000bad: __libc_start_main_arg3 :: in out u64 = R2
00000bae: __libc_start_main_auxv :: in out u64 = R3
00000baf: __libc_start_main_result :: out u32 = low:32[R0]

00000382:
0000096c: R16 := 0x11000
00000973: R17 := mem[R16 + 8, el]:u64
00000979: R16 := R16 + 8
0000097e: call R17 with noreturn

00000b92: sub _fini(_fini_result)
00000bb0: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

00000b93: sub _init(_init_result)
00000bb1: _init_result :: out u32 = low:32[R0]

00000671:
00000a80: #23 := R31 - 0x10
00000a86: mem := mem with [#23, el]:u64 <- R29
00000a8c: mem := mem with [#23 + 8, el]:u64 <- R30
00000a90: R31 := #23
00000a96: R29 := R31
00000a9b: R30 := 0x5BC
00000a9d: call @call_weak_fn with return %00000a9f

00000a9f:
00000aa4: R29 := mem[R31, el]:u64
00000aa9: R30 := mem[R31 + 8, el]:u64
00000aad: R31 := R31 + 0x10
00000ab2: call R30 with noreturn

00000b94: sub _start(_start_result)
00000bb2: _start_result :: out u32 = low:32[R0]

00000337:
0000033a: R29 := 0
0000033f: R30 := 0
00000345: R5 := R0
0000034c: R1 := mem[R31, el]:u64
00000352: R2 := R31 + 8
00000358: R6 := R31
0000035d: R0 := 0x10000
00000364: R0 := mem[R0 + 0xFD8, el]:u64
00000369: R3 := 0x10000
00000370: R3 := mem[R3 + 0xFD0, el]:u64
00000375: R4 := 0x10000
0000037c: R4 := mem[R4 + 0xFA8, el]:u64
00000381: R30 := 0x664
00000384: call @__libc_start_main with return %00000386

00000386:
00000389: R30 := 0x668
0000038c: call @abort with return %00000b95

00000b95:
00000b96: call @call_weak_fn with noreturn

00000b97: sub abort()


0000038a:
00000998: R16 := 0x11000
0000099f: R17 := mem[R16 + 0x18, el]:u64
000009a5: R16 := R16 + 0x18
000009aa: call R17 with noreturn

00000b98: sub add_six(add_six_result)
00000bb3: add_six_result :: out u32 = low:32[R0]

000004c2:
000004c5: R9 := 0x10000
000004cc: R9 := mem[R9 + 0xFC0, el]:u64
000004d3: R8 := pad:64[mem[R9, el]:u32]
000004d9: R8 := pad:64[31:0[R8] + 6]
000004e1: mem := mem with [R9, el]:u32 <- 31:0[R8]
000004e6: call R30 with noreturn

00000b99: sub add_two(add_two_result)
00000bb4: add_two_result :: out u32 = low:32[R0]

0000049c:
0000049f: R9 := 0x10000
000004a6: R9 := mem[R9 + 0xFC0, el]:u64
000004ad: R8 := pad:64[mem[R9, el]:u32]
000004b3: R8 := pad:64[31:0[R8] + 2]
000004bb: mem := mem with [R9, el]:u32 <- 31:0[R8]
000004c0: call R30 with noreturn

00000b9a: sub call_weak_fn(call_weak_fn_result)
00000bb5: call_weak_fn_result :: out u32 = low:32[R0]

0000038e:
00000391: R0 := 0x10000
00000398: R0 := mem[R0 + 0xFC8, el]:u64
0000039e: when R0 = 0 goto %0000039c
00000b9b: goto %000008b5

0000039c:
000003a4: call R30 with noreturn

000008b5:
000008b8: goto @__gmon_start__

000008b6:
00000982: R16 := 0x11000
00000989: R17 := mem[R16 + 0x10, el]:u64
0000098f: R16 := R16 + 0x10
00000994: call R17 with noreturn

00000b9c: sub deregister_tm_clones(deregister_tm_clones_result)
00000bb6: deregister_tm_clones_result :: out u32 = low:32[R0]

000003a8:
000003ab: R0 := 0x11000
000003b1: R0 := R0 + 0x38
000003b6: R1 := 0x11000
000003bc: R1 := R1 + 0x38
000003c2: #1 := ~R0
000003c7: #2 := R1 + ~R0 + 1
000003cd: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000003d3: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000003d7: ZF := #2 = 0
000003db: NF := 63:63[#2]
000003e1: when ZF goto %000003df
00000b9d: goto %00000897

00000897:
0000089a: R1 := 0x10000
000008a1: R1 := mem[R1 + 0xFB0, el]:u64
000008a6: when R1 = 0 goto %000003df
00000b9e: goto %000008aa

000003df:
000003e7: call R30 with noreturn

000008aa:
000008ae: R16 := R1
000008b3: call R16 with noreturn

00000b9f: sub frame_dummy(frame_dummy_result)
00000bb7: frame_dummy_result :: out u32 = low:32[R0]

00000498:
0000049a: call @register_tm_clones with noreturn

00000ba0: sub main(main_argc, main_argv, main_result)
00000bb8: main_argc :: in u32 = low:32[R0]
00000bb9: main_argv :: in out u64 = R1
00000bba: main_result :: out u32 = low:32[R0]

00000524:
00000528: R31 := R31 - 0x30
0000052e: #7 := R31 + 0x20
00000534: mem := mem with [#7, el]:u64 <- R29
0000053a: mem := mem with [#7 + 8, el]:u64 <- R30
00000540: R29 := R31 + 0x20
00000547: mem := mem with [R29 - 4, el]:u32 <- 0
0000054f: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
00000557: mem := mem with [R31 + 0x10, el]:u64 <- R1
0000055e: R8 := pad:64[mem[R29 - 8, el]:u32]
00000564: #8 := 31:0[R8] + 0
00000569: VF := extend:33[#8] <> extend:33[31:0[R8]] + 0
0000056e: CF := pad:33[#8] <> pad:33[31:0[R8]] - 0x100000000
00000572: ZF := #8 = 0
00000576: NF := 31:31[#8]
0000057a: R8 := pad:64[#8]
00000582: mem := mem with [R31 + 8, el]:u64 <- R8
00000588: #9 := R8 - 0xB
0000058d: VF := extend:65[#9] <> extend:65[R8] - 0xB
00000592: CF := pad:65[#9] <> pad:65[R8] + 0xFFFFFFFFFFFFFFF5
00000596: ZF := #9 = 0
0000059a: NF := 63:63[#9]
0000059e: R8 := #9
000005ab: when ~(CF & ~ZF) goto %000005a4
000005ac: goto %000005a7

000005a7:
000005a8: R8 := 1
000005ae: goto %000005aa

000005a4:
000005a5: R8 := 0
000005ad: goto %000005aa

000005aa:
000005b4: when 0:0[R8] goto %000005b2
00000ba1: goto %0000075e

000005b2:
000005ba: R8 := 1
000005c2: mem := mem with [R29 - 4, el]:u32 <- 31:0[R8]
000005c7: goto %000005c5

000005c5:
000005cd: R0 := pad:64[mem[R29 - 4, el]:u32]
000005d3: #10 := R31 + 0x20
000005d8: R29 := mem[#10, el]:u64
000005dd: R30 := mem[#10 + 8, el]:u64
000005e3: R31 := R31 + 0x30
000005e8: call R30 with noreturn

0000075e:
00000763: R11 := mem[R31 + 8, el]:u64
00000768: R10 := 0
0000076e: R10 := R10 + 0x918
00000773: R8 := 0x7C0
0000077b: R9 := extend:64[mem[R10 + (61:0[R11].0), el]:u32]
00000782: R8 := R8 + R9
00000787: call R8 with noreturn

00000ba2: sub register_tm_clones(register_tm_clones_result)
00000bbb: register_tm_clones_result :: out u32 = low:32[R0]

000003e9:
000003ec: R0 := 0x11000
000003f2: R0 := R0 + 0x38
000003f7: R1 := 0x11000
000003fd: R1 := R1 + 0x38
00000404: R1 := R1 + ~R0 + 1
0000040b: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000412: R1 := R2 + (R1 ~>> 3)
00000418: #3 := ~(R1 ~>> 1)
0000041c: #4 := ~(R1 ~>> 1) + 1
00000421: VF := extend:65[#4] <> extend:65[#3] + 1
00000426: CF := pad:65[#4] <> pad:65[#3] + 1
0000042a: ZF := #4 = 0
0000042e: NF := 63:63[#4]
00000436: R1 :=

          >> 1 | R1 << 0x3F]
0000043c: when ZF goto %0000043a
00000ba3: goto %00000879

00000879:
0000087c: R2 := 0x10000
00000883: R2 := mem[R2 + 0xFE0, el]:u64
00000888: when R2 = 0 goto %0000043a
00000ba4: goto %0000088c

0000043a:
00000442: call R30 with noreturn

0000088c:
00000890: R16 := R2
00000895: call R16 with noreturn

00000ba5: sub sub_seven(sub_seven_result)
00000bbc: sub_seven_result :: out u32 = low:32[R0]

000004e8:
000004eb: R9 := 0x10000
000004f2: R9 := mem[R9 + 0xFC0, el]:u64
000004f9: R8 := pad:64[mem[R9, el]:u32]
000004ff: #6 := 31:0[R8] - 7
00000504: VF := extend:33[#6] <> extend:33[31:0[R8]] - 7
00000509: CF := pad:33[#6] <> pad:33[31:0[R8]] + 0xFFFFFFF9
0000050d: ZF := #6 = 0
00000511: NF := 31:31[#6]
00000515: R8 := pad:64[#6]
0000051d: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000522: call R30 with noreturn
