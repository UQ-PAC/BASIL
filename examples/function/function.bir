00000850: program
00000834: sub __cxa_finalize(__cxa_finalize_result)
00000851: __cxa_finalize_result :: out u32 = low:32[R0]

000005a2:
00000683: R16 := 0x10000
0000068a: R17 := mem[R16 + 0xFA0, el]:u64
00000690: R16 := R16 + 0xFA0
00000695: call R17 with noreturn

00000835: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000852: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000346:
0000034a: #5 := R31 - 0x20
00000350: mem := mem with [#5, el]:u64 <- R29
00000356: mem := mem with [#5 + 8, el]:u64 <- R30
0000035a: R31 := #5
00000360: R29 := R31
00000368: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000036d: R19 := 0x11000
00000374: R0 := pad:64[mem[R19 + 0x10]]
0000037b: when 31:0[R0] <> 0 goto %00000379
00000836: goto %0000056b

0000056b:
0000056e: R0 := 0x10000
00000575: R0 := mem[R0 + 0xFD8, el]:u64
0000057b: when R0 = 0 goto %00000579
00000837: goto %00000592

00000592:
00000595: R0 := 0x11000
0000059c: R0 := mem[R0 + 8, el]:u64
000005a1: R30 := 0x700
000005a4: call @__cxa_finalize with return %00000579

00000579:
00000581: R30 := 0x704
00000583: call @deregister_tm_clones with return %00000585

00000585:
00000588: R0 := 1
00000590: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000838: goto %00000379

00000379:
00000383: R19 := mem[R31 + 0x10, el]:u64
0000038a: R29 := mem[R31, el]:u64
0000038f: R30 := mem[R31 + 8, el]:u64
00000393: R31 := R31 + 0x20
00000398: call R30 with noreturn

00000839: sub __libc_csu_fini(__libc_csu_fini_result)
00000853: __libc_csu_fini_result :: out u32 = low:32[R0]

000004d8:
000004db: call R30 with noreturn

0000083a: sub __libc_csu_init(__libc_csu_init_result)
00000854: __libc_csu_init_result :: out u32 = low:32[R0]

000003e5:
000003e9: #7 := R31 - 0x40
000003ef: mem := mem with [#7, el]:u64 <- R29
000003f5: mem := mem with [#7 + 8, el]:u64 <- R30
000003f9: R31 := #7
000003ff: R29 := R31
00000405: #8 := R31 + 0x10
0000040b: mem := mem with [#8, el]:u64 <- R19
00000411: mem := mem with [#8 + 8, el]:u64 <- R20
00000416: R20 := 0x10000
0000041c: R20 := R20 + 0xD90
00000422: #9 := R31 + 0x20
00000428: mem := mem with [#9, el]:u64 <- R21
0000042e: mem := mem with [#9 + 8, el]:u64 <- R22
00000433: R21 := 0x10000
00000439: R21 := R21 + 0xD88
00000440: R20 := R20 + ~R21 + 1
00000446: R22 := pad:64[31:0[R0]]
0000044c: #10 := R31 + 0x30
00000452: mem := mem with [#10, el]:u64 <- R23
00000458: mem := mem with [#10 + 8, el]:u64 <- R24
0000045e: R23 := R1
00000464: R24 := R2
00000469: R30 := 0x798
0000046c: call @_init with return %0000046e

0000046e:
00000472: #11 := ~(R20 ~>> 3)
00000476: #12 := ~(R20 ~>> 3) + 1
0000047b: VF := extend:65[#12] <> extend:65[#11] + 1
00000480: CF := pad:65[#12] <> pad:65[#11] + 1
00000484: ZF := #12 = 0
00000488: NF := 63:63[#12]
0000048e: when ZF goto %0000048c
0000083b: goto %000004dd

000004dd:
000004e3: R20 :=

          >> 3 | R20 << 0x3D]
000004e8: R19 := 0
0000083c: goto %000004ea

000004ea:
000004f0: R3 := mem[R21 + (60:0[R19].0), el]:u64
000004f6: R2 := R24
000004fc: R19 := R19 + 1
00000502: R1 := R23
00000508: R0 := pad:64[31:0[R22]]
0000050d: R30 := 0x7C0
00000510: call R3 with return %00000512

00000512:
00000516: #16 := ~R19
0000051b: #17 := R20 + ~R19 + 1
00000521: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
00000527: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
0000052b: ZF := #17 = 0
0000052f: NF := 63:63[#17]
00000534: when ZF <> 1 goto %000004ea
0000083d: goto %0000048c

0000048c:
00000495: #13 := R31 + 0x10
0000049a: R19 := mem[#13, el]:u64
0000049f: R20 := mem[#13 + 8, el]:u64
000004a5: #14 := R31 + 0x20
000004aa: R21 := mem[#14, el]:u64
000004af: R22 := mem[#14 + 8, el]:u64
000004b5: #15 := R31 + 0x30
000004ba: R23 := mem[#15, el]:u64
000004bf: R24 := mem[#15 + 8, el]:u64
000004c6: R29 := mem[R31, el]:u64
000004cb: R30 := mem[R31 + 8, el]:u64
000004cf: R31 := R31 + 0x40
000004d4: call R30 with noreturn

0000083e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000855: __libc_start_main_main :: in u64 = R0
00000856: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000857: __libc_start_main_arg3 :: in out u64 = R2
00000858: __libc_start_main_auxv :: in out u64 = R3
00000859: __libc_start_main_result :: out u32 = low:32[R0]

00000284:
00000699: R16 := 0x10000
000006a0: R17 := mem[R16 + 0xFA8, el]:u64
000006a6: R16 := R16 + 0xFA8
000006ab: call R17 with noreturn

0000083f: sub _fini(_fini_result)
0000085a: _fini_result :: out u32 = low:32[R0]

00000032:
00000036: #0 := R31 - 0x10
0000003c: mem := mem with [#0, el]:u64 <- R29
00000042: mem := mem with [#0 + 8, el]:u64 <- R30
00000046: R31 := #0
0000004c: R29 := R31
00000053: R29 := mem[R31, el]:u64
00000058: R30 := mem[R31 + 8, el]:u64
0000005c: R31 := R31 + 0x10
00000061: call R30 with noreturn

00000840: sub _init(_init_result)
0000085b: _init_result :: out u32 = low:32[R0]

0000046a:
0000076d: #19 := R31 - 0x10
00000773: mem := mem with [#19, el]:u64 <- R29
00000779: mem := mem with [#19 + 8, el]:u64 <- R30
0000077d: R31 := #19
00000783: R29 := R31
00000788: R30 := 0x5A4
0000078a: call @call_weak_fn with return %0000078c

0000078c:
00000791: R29 := mem[R31, el]:u64
00000796: R30 := mem[R31 + 8, el]:u64
0000079a: R31 := R31 + 0x10
0000079f: call R30 with noreturn

00000841: sub _start(_start_result)
0000085c: _start_result :: out u32 = low:32[R0]

00000239:
0000023c: R29 := 0
00000241: R30 := 0
00000247: R5 := R0
0000024e: R1 := mem[R31, el]:u64
00000254: R2 := R31 + 8
0000025a: R6 := R31
0000025f: R0 := 0x10000
00000266: R0 := mem[R0 + 0xFF0, el]:u64
0000026b: R3 := 0x10000
00000272: R3 := mem[R3 + 0xFE8, el]:u64
00000277: R4 := 0x10000
0000027e: R4 := mem[R4 + 0xFC8, el]:u64
00000283: R30 := 0x644
00000286: call @__libc_start_main with return %00000288

00000288:
0000028b: R30 := 0x648
0000028e: call @abort with return %00000842

00000842:
00000843: call @call_weak_fn with noreturn

00000844: sub abort()


0000028c:
000006c5: R16 := 0x10000
000006cc: R17 := mem[R16 + 0xFB8, el]:u64
000006d2: R16 := R16 + 0xFB8
000006d7: call R17 with noreturn

00000845: sub call_weak_fn(call_weak_fn_result)
0000085d: call_weak_fn_result :: out u32 = low:32[R0]

00000290:
00000293: R0 := 0x10000
0000029a: R0 := mem[R0 + 0xFE0, el]:u64
000002a0: when R0 = 0 goto %0000029e
00000846: goto %000005e2

0000029e:
000002a6: call R30 with noreturn

000005e2:
000005e5: goto @__gmon_start__

000005e3:
000006af: R16 := 0x10000
000006b6: R17 := mem[R16 + 0xFB0, el]:u64
000006bc: R16 := R16 + 0xFB0
000006c1: call R17 with noreturn

00000847: sub deregister_tm_clones(deregister_tm_clones_result)
0000085e: deregister_tm_clones_result :: out u32 = low:32[R0]

000002aa:
000002ad: R0 := 0x11000
000002b3: R0 := R0 + 0x10
000002b8: R1 := 0x11000
000002be: R1 := R1 + 0x10
000002c4: #1 := ~R0
000002c9: #2 := R1 + ~R0 + 1
000002cf: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002d5: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002d9: ZF := #2 = 0
000002dd: NF := 63:63[#2]
000002e3: when ZF goto %000002e1
00000848: goto %000005c4

000005c4:
000005c7: R1 := 0x10000
000005ce: R1 := mem[R1 + 0xFD0, el]:u64
000005d3: when R1 = 0 goto %000002e1
00000849: goto %000005d7

000002e1:
000002e9: call R30 with noreturn

000005d7:
000005db: R16 := R1
000005e0: call R16 with noreturn

0000084a: sub frame_dummy(frame_dummy_result)
0000085f: frame_dummy_result :: out u32 = low:32[R0]

0000039a:
0000039c: call @register_tm_clones with noreturn

0000084b: sub get_two(get_two_result)
00000860: get_two_result :: out u32 = low:32[R0]

000003d6:
000003dc: R0 := 2
000003e1: call R30 with noreturn

0000084c: sub main(main_argc, main_argv, main_result)
00000861: main_argc :: in u32 = low:32[R0]
00000862: main_argv :: in out u64 = R1
00000863: main_result :: out u32 = low:32[R0]

0000039e:
000003a2: #6 := R31 - 0x10
000003a8: mem := mem with [#6, el]:u64 <- R29
000003ae: mem := mem with [#6 + 8, el]:u64 <- R30
000003b2: R31 := #6
000003b8: R29 := R31
000003bd: R0 := 0x11000
000003c3: R0 := R0 + 0x14
000003c8: R1 := 1
000003d0: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003d5: R30 := 0x738
000003d8: call @get_two with return %00000538

00000538:
0000053c: R1 := pad:64[31:0[R0]]
00000541: R0 := 0x11000
00000547: R0 := R0 + 0x18
0000054f: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000554: R0 := 0
0000055b: R29 := mem[R31, el]:u64
00000560: R30 := mem[R31 + 8, el]:u64
00000564: R31 := R31 + 0x10
00000569: call R30 with noreturn

0000084d: sub register_tm_clones(register_tm_clones_result)
00000864: register_tm_clones_result :: out u32 = low:32[R0]

000002eb:
000002ee: R0 := 0x11000
000002f4: R0 := R0 + 0x10
000002f9: R1 := 0x11000
000002ff: R1 := R1 + 0x10
00000306: R1 := R1 + ~R0 + 1
0000030d: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000314: R1 := R2 + (R1 ~>> 3)
0000031a: #3 := ~(R1 ~>> 1)
0000031e: #4 := ~(R1 ~>> 1) + 1
00000323: VF := extend:65[#4] <> extend:65[#3] + 1
00000328: CF := pad:65[#4] <> pad:65[#3] + 1
0000032c: ZF := #4 = 0
00000330: NF := 63:63[#4]
00000338: R1 :=

          >> 1 | R1 << 0x3F]
0000033e: when ZF goto %0000033c
0000084e: goto %000005a6

000005a6:
000005a9: R2 := 0x10000
000005b0: R2 := mem[R2 + 0xFF8, el]:u64
000005b5: when R2 = 0 goto %0000033c
0000084f: goto %000005b9

0000033c:
00000344: call R30 with noreturn

000005b9:
000005bd: R16 := R2
000005c2: call R16 with noreturn
