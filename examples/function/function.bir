00000646: program
0000062a: sub __cxa_finalize(__cxa_finalize_result)
00000647: __cxa_finalize_result :: out u32 = R0

00000571:
000005cc: R16 := 0x10000
000005d0: R17 := mem[R16 + 0xFA0, el]:u64
000005d4: R16 := R16 + 0xFA0
000005d8: call R17 with noreturn

0000062b: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000648: __do_global_dtors_aux_result :: out u32 = R0

000003f7:
000003f9: mem := mem with [R31 - 0x20, el]:u64 <- R29
000003fb: mem := mem with [R31 - 0x18, el]:u64 <- R30
000003fd: R31 := R31 - 0x20
00000401: R29 := R31
00000405: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000409: R19 := 0x11000
0000040d: #28 := pad:64[mem[R19 + 0x10]]
0000040f: R0 := 0
00000411: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
0000041a: #29 := extract:31:0[R0] <> 0
00000416: when #29 goto %00000414
0000062c: goto %00000546

00000546:
00000548: R0 := 0x10000
0000054c: R0 := mem[R0 + 0xFD8, el]:u64
00000555: #86 := R0 = 0
00000551: when #86 goto %0000054f
0000062d: goto %00000566

00000566:
00000568: R0 := 0x11000
0000056c: R0 := mem[R0 + 8, el]:u64
00000570: R30 := 0x700
00000573: call @__cxa_finalize with return %0000054f

0000054f:
00000558: R30 := 0x704
0000055a: call @deregister_tm_clones with return %0000055c

0000055c:
0000055e: R0 := 0
00000560: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000564: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
0000062e: goto %00000414

00000414:
0000041d: R19 := mem[R31 + 0x10, el]:u64
00000421: R29 := mem[R31, el]:u64
00000423: R30 := mem[R31 + 8, el]:u64
00000425: R31 := R31 + 0x20
00000429: call R30 with noreturn

0000062f: sub __libc_csu_fini(__libc_csu_fini_result)
00000649: __libc_csu_fini_result :: out u32 = R0

000004df:
000004e1: call R30 with noreturn

00000630: sub __libc_csu_init(__libc_csu_init_result)
0000064a: __libc_csu_init_result :: out u32 = R0

00000461:
00000463: mem := mem with [R31 - 0x40, el]:u64 <- R29
00000465: mem := mem with [R31 - 0x38, el]:u64 <- R30
00000467: R31 := R31 - 0x40
0000046b: R29 := R31
0000046f: mem := mem with [R31, el]:u64 <- R31 + 0x20
00000471: mem := mem with [R31, el]:u64 <- R31 + 0x28
00000475: R20 := 0x10000
00000479: R20 := R20 + 0xD90
0000047d: mem := mem with [R31, el]:u64 <- R31 + 0x40
0000047f: mem := mem with [R31, el]:u64 <- R31 + 0x48
00000483: R21 := 0x10000
00000487: R21 := R21 + 0xD88
0000048b: R20 := R20 - R21
0000048f: #44 := extract:31:0[R0]
00000491: R22 := 0
00000493: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#44]
00000497: mem := mem with [R31, el]:u64 <- R31 + 0x60
00000499: mem := mem with [R31, el]:u64 <- R31 + 0x68
0000049d: R23 := R1
000004a1: R24 := R2
000004a5: R30 := 0x798
000004a8: call @_init with return %000004aa

000004aa:
000004ac: #55 := ~(R20 ~>> 3) + 1
000004ae: NF := extract:63:63[#55]
000004b0: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#55]
000004b2: ZF := #55 = 0
000004b4: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#55]
000004bd: #57 := ZF
000004b9: when #57 goto %000004b7
00000631: goto %000004e4

000004e4:
000004e6: R20 := R20 >> 3
000004ea: R19 := 0
00000632: goto %000004ec

000004ec:
000004ee: R3 := mem[R21 + (R19 << 3), el]:u64
000004f2: R2 := R24
000004f6: R19 := R19 + 1
000004fa: R1 := R23
000004fe: #72 := extract:31:0[R22]
00000500: R0 := 0
00000502: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#72]
00000506: R30 := 0x7C0
00000508: call R3 with return %0000050b

0000050b:
0000050d: #76 := 1 + ~R19 + R20
0000050f: NF := extract:63:63[#76]
00000511: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#76] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#76]
00000513: ZF := #76 = 0
00000515: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#76] | extract:63:63[R20] &
          ~extract:63:63[#76]
0000051d: #78 := ~ZF <> 0
00000519: when #78 goto %000004ec
00000633: goto %000004b7

000004b7:
000004c0: R19 := mem[R31 + 0x10, el]:u64
000004c2: R20 := mem[R31 + 0x18, el]:u64
000004c6: R21 := mem[R31 + 0x20, el]:u64
000004c8: R22 := mem[R31 + 0x28, el]:u64
000004cc: R23 := mem[R31 + 0x30, el]:u64
000004ce: R24 := mem[R31 + 0x38, el]:u64
000004d2: R29 := mem[R31, el]:u64
000004d4: R30 := mem[R31 + 8, el]:u64
000004d6: R31 := R31 + 0x40
000004da: call R30 with noreturn

00000634: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000064b: __libc_start_main_main :: in u64 = R0
0000064c: __libc_start_main_arg2 :: in u32 = R1
0000064d: __libc_start_main_arg3 :: in out u64 = R2
0000064e: __libc_start_main_auxv :: in out u64 = R3
0000064f: __libc_start_main_result :: out u32 = R0

00000373:
000005dc: R16 := 0x10000
000005e0: R17 := mem[R16 + 0xFA8, el]:u64
000005e4: R16 := R16 + 0xFA8
000005e8: call R17 with noreturn

00000635: sub _fini(_fini_result)
00000650: _fini_result :: out u32 = R0

00000327:
00000329: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000032b: mem := mem with [R31 - 8, el]:u64 <- R30
0000032d: R31 := R31 - 0x10
00000331: R29 := R31
00000335: R29 := mem[R31, el]:u64
00000337: R30 := mem[R31 + 8, el]:u64
00000339: R31 := R31 + 0x10
0000033d: call R30 with noreturn

00000636: sub _init(_init_result)
00000651: _init_result :: out u32 = R0

000004a6:
0000060c: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000060e: mem := mem with [R31 - 8, el]:u64 <- R30
00000610: R31 := R31 - 0x10
00000614: R29 := R31
00000618: R30 := 0x5A4
0000061a: call @call_weak_fn with return %0000061c

0000061c:
0000061e: R29 := mem[R31, el]:u64
00000620: R30 := mem[R31 + 8, el]:u64
00000622: R31 := R31 + 0x10
00000626: call R30 with noreturn

00000637: sub _start(_start_result)
00000652: _start_result :: out u32 = R0

00000340:
00000342: R29 := 0
00000346: R30 := 0
0000034a: R5 := R0
0000034e: R1 := mem[R31, el]:u64
00000352: R2 := R31 + 8
00000356: R6 := R31
0000035a: R0 := 0x10000
0000035e: R0 := mem[R0 + 0xFF0, el]:u64
00000362: R3 := 0x10000
00000366: R3 := mem[R3 + 0xFE8, el]:u64
0000036a: R4 := 0x10000
0000036e: R4 := mem[R4 + 0xFC8, el]:u64
00000372: R30 := 0x644
00000375: call @__libc_start_main with return %00000377

00000377:
00000379: R30 := 0x648
0000037c: call @abort with return %00000638

00000638:
00000639: call @call_weak_fn with noreturn

0000063a: sub abort()


0000037a:
000005fc: R16 := 0x10000
00000600: R17 := mem[R16 + 0xFB8, el]:u64
00000604: R16 := R16 + 0xFB8
00000608: call R17 with noreturn

0000063b: sub call_weak_fn(call_weak_fn_result)
00000653: call_weak_fn_result :: out u32 = R0

0000037e:
00000380: R0 := 0x10000
00000384: R0 := mem[R0 + 0xFE0, el]:u64
0000038d: #5 := R0 = 0
00000389: when #5 goto %00000387
0000063c: goto %000005a7

00000387:
00000390: call R30 with noreturn

000005a7:
000005aa: goto @__gmon_start__

000005a8:
000005ec: R16 := 0x10000
000005f0: R17 := mem[R16 + 0xFB0, el]:u64
000005f4: R16 := R16 + 0xFB0
000005f8: call R17 with noreturn

0000063d: sub deregister_tm_clones(deregister_tm_clones_result)
00000654: deregister_tm_clones_result :: out u32 = R0

00000395:
00000397: R0 := 0x11000
0000039b: R0 := R0 + 0x10
0000039f: R1 := 0x11000
000003a3: R1 := R1 + 0x10
000003a7: #9 := 1 + ~R0 + R1
000003a9: NF := extract:63:63[#9]
000003ab: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
000003ad: ZF := #9 = 0
000003af: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
000003b8: #11 := ZF
000003b4: when #11 goto %000003b2
0000063e: goto %0000058e

0000058e:
00000590: R1 := 0x10000
00000594: R1 := mem[R1 + 0xFD0, el]:u64
0000059c: #92 := R1 = 0
00000598: when #92 goto %000003b2
0000063f: goto %0000059e

000003b2:
000003bb: call R30 with noreturn

0000059e:
000005a0: R16 := R1
000005a4: call R16 with noreturn

00000640: sub frame_dummy(frame_dummy_result)
00000655: frame_dummy_result :: out u32 = R0

0000042c:
0000042e: call @register_tm_clones with noreturn

00000641: sub get_two(get_two_result)
00000656: get_two_result :: out u32 = R0

00000451:
00000456: R0 := 0
00000458: R0 := R0 & 0xFFFFFFFF00000000 | 2
0000045c: call R30 with noreturn

00000642: sub main(main_argc, main_argv, main_result)
00000657: main_argc :: in u32 = R0
00000658: main_argv :: in out u64 = R1
00000659: main_result :: out u32 = R0

00000430:
00000432: mem := mem with [R31 - 0x10, el]:u64 <- R29
00000434: mem := mem with [R31 - 8, el]:u64 <- R30
00000436: R31 := R31 - 0x10
0000043a: R29 := R31
0000043e: R0 := 0x11000
00000442: R0 := R0 + 0x14
00000446: R1 := 0
00000448: R1 := R1 & 0xFFFFFFFF00000000 | 1
0000044c: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000450: R30 := 0x738
00000453: call @get_two with return %0000051f

0000051f:
00000521: #82 := extract:31:0[R0]
00000523: R1 := 0
00000525: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#82]
00000529: R0 := 0x11000
0000052d: R0 := R0 + 0x18
00000531: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000535: R0 := 0
00000537: R0 := R0 & 0xFFFFFFFF00000000
0000053b: R29 := mem[R31, el]:u64
0000053d: R30 := mem[R31 + 8, el]:u64
0000053f: R31 := R31 + 0x10
00000543: call R30 with noreturn

00000643: sub register_tm_clones(register_tm_clones_result)
0000065a: register_tm_clones_result :: out u32 = R0

000003be:
000003c0: R0 := 0x11000
000003c4: R0 := R0 + 0x10
000003c8: R1 := 0x11000
000003cc: R1 := R1 + 0x10
000003d0: R1 := R1 - R0
000003d4: R2 := R1 >> 0x3F
000003d8: R1 := R2 + (R1 ~>> 3)
000003dc: #22 := ~(R1 ~>> 1) + 1
000003de: NF := extract:63:63[#22]
000003e0: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000003e2: ZF := #22 = 0
000003e4: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000003e8: R1 := R1 >> 1
000003f1: #25 := ZF
000003ed: when #25 goto %000003eb
00000644: goto %00000575

00000575:
00000577: R2 := 0x10000
0000057b: R2 := mem[R2 + 0xFF8, el]:u64
00000583: #88 := R2 = 0
0000057f: when #88 goto %000003eb
00000645: goto %00000585

000003eb:
000003f4: call R30 with noreturn

00000585:
00000587: R16 := R2
0000058b: call R16 with noreturn
