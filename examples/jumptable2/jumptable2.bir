00000995: program
00000977: sub __cxa_finalize(__cxa_finalize_result)
00000996: __cxa_finalize_result :: out u32 = low:32[R0]

000006b1:
00000792: R16 := 0x10000
00000799: R17 := mem[R16 + 0xF90, el]:u64
0000079f: R16 := R16 + 0xF90
000007a4: call R17 with noreturn

00000978: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000997: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000003b0:
000003b4: #5 := R31 - 0x20
000003ba: mem := mem with [#5, el]:u64 <- R29
000003c0: mem := mem with [#5 + 8, el]:u64 <- R30
000003c4: R31 := #5
000003ca: R29 := R31
000003d2: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003d7: R19 := 0x11000
000003de: R0 := pad:64[mem[R19 + 0x30]]
000003e5: when 31:0[R0] <> 0 goto %000003e3
00000979: goto %0000067a

0000067a:
0000067d: R0 := 0x10000
00000684: R0 := mem[R0 + 0xFC8, el]:u64
0000068a: when R0 = 0 goto %00000688
0000097a: goto %000006a1

000006a1:
000006a4: R0 := 0x11000
000006ab: R0 := mem[R0 + 8, el]:u64
000006b0: R30 := 0x780
000006b3: call @__cxa_finalize with return %00000688

00000688:
00000690: R30 := 0x784
00000692: call @deregister_tm_clones with return %00000694

00000694:
00000697: R0 := 1
0000069f: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000097b: goto %000003e3

000003e3:
000003ed: R19 := mem[R31 + 0x10, el]:u64
000003f4: R29 := mem[R31, el]:u64
000003f9: R30 := mem[R31 + 8, el]:u64
000003fd: R31 := R31 + 0x20
00000402: call R30 with noreturn

0000097c: sub __libc_csu_fini(__libc_csu_fini_result)
00000998: __libc_csu_fini_result :: out u32 = low:32[R0]

0000061a:
0000061d: call R30 with noreturn

0000097d: sub __libc_csu_init(__libc_csu_init_result)
00000999: __libc_csu_init_result :: out u32 = low:32[R0]

00000527:
0000052b: #7 := R31 - 0x40
00000531: mem := mem with [#7, el]:u64 <- R29
00000537: mem := mem with [#7 + 8, el]:u64 <- R30
0000053b: R31 := #7
00000541: R29 := R31
00000547: #8 := R31 + 0x10
0000054d: mem := mem with [#8, el]:u64 <- R19
00000553: mem := mem with [#8 + 8, el]:u64 <- R20
00000558: R20 := 0x10000
0000055e: R20 := R20 + 0xD80
00000564: #9 := R31 + 0x20
0000056a: mem := mem with [#9, el]:u64 <- R21
00000570: mem := mem with [#9 + 8, el]:u64 <- R22
00000575: R21 := 0x10000
0000057b: R21 := R21 + 0xD78
00000582: R20 := R20 + ~R21 + 1
00000588: R22 := pad:64[31:0[R0]]
0000058e: #10 := R31 + 0x30
00000594: mem := mem with [#10, el]:u64 <- R23
0000059a: mem := mem with [#10 + 8, el]:u64 <- R24
000005a0: R23 := R1
000005a6: R24 := R2
000005ab: R30 := 0x880
000005ae: call @_init with return %000005b0

000005b0:
000005b4: #11 := ~(R20 ~>> 3)
000005b8: #12 := ~(R20 ~>> 3) + 1
000005bd: VF := extend:65[#12] <> extend:65[#11] + 1
000005c2: CF := pad:65[#12] <> pad:65[#11] + 1
000005c6: ZF := #12 = 0
000005ca: NF := 63:63[#12]
000005d0: when ZF goto %000005ce
0000097e: goto %0000061f

0000061f:
00000625: R20 :=

          >> 3 | R20 << 0x3D]
0000062a: R19 := 0
0000097f: goto %0000062c

0000062c:
00000632: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000638: R2 := R24
0000063e: R19 := R19 + 1
00000644: R1 := R23
0000064a: R0 := pad:64[31:0[R22]]
0000064f: R30 := 0x8A8
00000652: call R3 with return %00000654

00000654:
00000658: #16 := ~R19
0000065d: #17 := R20 + ~R19 + 1
00000663: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
00000669: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
0000066d: ZF := #17 = 0
00000671: NF := 63:63[#17]
00000676: when ZF <> 1 goto %0000062c
00000980: goto %000005ce

000005ce:
000005d7: #13 := R31 + 0x10
000005dc: R19 := mem[#13, el]:u64
000005e1: R20 := mem[#13 + 8, el]:u64
000005e7: #14 := R31 + 0x20
000005ec: R21 := mem[#14, el]:u64
000005f1: R22 := mem[#14 + 8, el]:u64
000005f7: #15 := R31 + 0x30
000005fc: R23 := mem[#15, el]:u64
00000601: R24 := mem[#15 + 8, el]:u64
00000608: R29 := mem[R31, el]:u64
0000060d: R30 := mem[R31 + 8, el]:u64
00000611: R31 := R31 + 0x40
00000616: call R30 with noreturn

00000981: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000099a: __libc_start_main_main :: in u64 = R0
0000099b: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000099c: __libc_start_main_arg3 :: in out u64 = R2
0000099d: __libc_start_main_auxv :: in out u64 = R3
0000099e: __libc_start_main_result :: out u32 = low:32[R0]

000002ee:
000007a8: R16 := 0x10000
000007af: R17 := mem[R16 + 0xF98, el]:u64
000007b5: R16 := R16 + 0xF98
000007ba: call R17 with noreturn

00000982: sub _fini(_fini_result)
0000099f: _fini_result :: out u32 = low:32[R0]

00000034:
00000038: #0 := R31 - 0x10
0000003e: mem := mem with [#0, el]:u64 <- R29
00000044: mem := mem with [#0 + 8, el]:u64 <- R30
00000048: R31 := #0
0000004e: R29 := R31
00000055: R29 := mem[R31, el]:u64
0000005a: R30 := mem[R31 + 8, el]:u64
0000005e: R31 := R31 + 0x10
00000063: call R30 with noreturn

00000983: sub _init(_init_result)
000009a0: _init_result :: out u32 = low:32[R0]

000005ac:
00000896: #19 := R31 - 0x10
0000089c: mem := mem with [#19, el]:u64 <- R29
000008a2: mem := mem with [#19 + 8, el]:u64 <- R30
000008a6: R31 := #19
000008ac: R29 := R31
000008b1: R30 := 0x61C
000008b3: call @call_weak_fn with return %000008b5

000008b5:
000008ba: R29 := mem[R31, el]:u64
000008bf: R30 := mem[R31 + 8, el]:u64
000008c3: R31 := R31 + 0x10
000008c8: call R30 with noreturn

00000984: sub _start(_start_result)
000009a1: _start_result :: out u32 = low:32[R0]

000002a3:
000002a6: R29 := 0
000002ab: R30 := 0
000002b1: R5 := R0
000002b8: R1 := mem[R31, el]:u64
000002be: R2 := R31 + 8
000002c4: R6 := R31
000002c9: R0 := 0x10000
000002d0: R0 := mem[R0 + 0xFE8, el]:u64
000002d5: R3 := 0x10000
000002dc: R3 := mem[R3 + 0xFE0, el]:u64
000002e1: R4 := 0x10000
000002e8: R4 := mem[R4 + 0xFB8, el]:u64
000002ed: R30 := 0x6C4
000002f0: call @__libc_start_main with return %000002f2

000002f2:
000002f5: R30 := 0x6C8
000002f8: call @abort with return %00000985

00000985:
00000986: call @call_weak_fn with noreturn

00000987: sub abort()


000002f6:
000007d4: R16 := 0x10000
000007db: R17 := mem[R16 + 0xFA8, el]:u64
000007e1: R16 := R16 + 0xFA8
000007e6: call R17 with noreturn

00000988: sub add_six(add_six_result)
000009a2: add_six_result :: out u32 = low:32[R0]

0000043c:
0000043f: R0 := 0x10000
00000446: R0 := mem[R0 + 0xFD0, el]:u64
0000044b: R1 := 6
00000453: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000045a: call R30 with noreturn

00000989: sub add_two(add_two_result)
000009a3: add_two_result :: out u32 = low:32[R0]

00000408:
0000040b: R0 := 0x10000
00000412: R0 := mem[R0 + 0xFD0, el]:u64
00000419: R0 := pad:64[mem[R0, el]:u32]
0000041f: R1 := pad:64[31:0[R0] + 2]
00000424: R0 := 0x10000
0000042b: R0 := mem[R0 + 0xFD0, el]:u64
00000433: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000043a: call R30 with noreturn

0000098a: sub call_weak_fn(call_weak_fn_result)
000009a4: call_weak_fn_result :: out u32 = low:32[R0]

000002fa:
000002fd: R0 := 0x10000
00000304: R0 := mem[R0 + 0xFD8, el]:u64
0000030a: when R0 = 0 goto %00000308
0000098b: goto %000006f1

00000308:
00000310: call R30 with noreturn

000006f1:
000006f4: goto @__gmon_start__

000006f2:
000007be: R16 := 0x10000
000007c5: R17 := mem[R16 + 0xFA0, el]:u64
000007cb: R16 := R16 + 0xFA0
000007d0: call R17 with noreturn

0000098c: sub deregister_tm_clones(deregister_tm_clones_result)
000009a5: deregister_tm_clones_result :: out u32 = low:32[R0]

00000314:
00000317: R0 := 0x11000
0000031d: R0 := R0 + 0x30
00000322: R1 := 0x11000
00000328: R1 := R1 + 0x30
0000032e: #1 := ~R0
00000333: #2 := R1 + ~R0 + 1
00000339: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
0000033f: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
00000343: ZF := #2 = 0
00000347: NF := 63:63[#2]
0000034d: when ZF goto %0000034b
0000098d: goto %000006d3

000006d3:
000006d6: R1 := 0x10000
000006dd: R1 := mem[R1 + 0xFC0, el]:u64
000006e2: when R1 = 0 goto %0000034b
0000098e: goto %000006e6

0000034b:
00000353: call R30 with noreturn

000006e6:
000006ea: R16 := R1
000006ef: call R16 with noreturn

0000098f: sub frame_dummy(frame_dummy_result)
000009a6: frame_dummy_result :: out u32 = low:32[R0]

00000404:
00000406: call @register_tm_clones with noreturn

00000990: sub main(main_argc, main_argv, main_result)
000009a7: main_argc :: in u32 = low:32[R0]
000009a8: main_argv :: in out u64 = R1
000009a9: main_result :: out u32 = low:32[R0]

00000490:
00000494: #6 := R31 - 0x20
0000049a: mem := mem with [#6, el]:u64 <- R29
000004a0: mem := mem with [#6 + 8, el]:u64 <- R30
000004a4: R31 := #6
000004aa: R29 := R31
000004b2: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000004ba: mem := mem with [R31 + 0x10, el]:u64 <- R1
000004bf: R0 := 0x10000
000004c6: R0 := mem[R0 + 0xFF8, el]:u64
000004cd: R0 := mem[R0 + 8, el]:u64
000004d2: R30 := 0x81C
000004d5: call R0 with return %000004d7

000004d7:
000004da: R0 := 0x10000
000004e1: R0 := mem[R0 + 0xFF8, el]:u64
000004e8: R0 := mem[R0 + 0x10, el]:u64
000004ed: R30 := 0x82C
000004f0: call R0 with return %000004f2

000004f2:
000004f5: R0 := 0x10000
000004fc: R0 := mem[R0 + 0xFF8, el]:u64
00000503: R0 := mem[R0 + 0x18, el]:u64
00000508: R30 := 0x83C
0000050b: call R0 with return %0000050d

0000050d:
00000510: R0 := 0
00000517: R29 := mem[R31, el]:u64
0000051c: R30 := mem[R31 + 8, el]:u64
00000520: R31 := R31 + 0x20
00000525: call R30 with noreturn

00000991: sub register_tm_clones(register_tm_clones_result)
000009aa: register_tm_clones_result :: out u32 = low:32[R0]

00000355:
00000358: R0 := 0x11000
0000035e: R0 := R0 + 0x30
00000363: R1 := 0x11000
00000369: R1 := R1 + 0x30
00000370: R1 := R1 + ~R0 + 1
00000377: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
0000037e: R1 := R2 + (R1 ~>> 3)
00000384: #3 := ~(R1 ~>> 1)
00000388: #4 := ~(R1 ~>> 1) + 1
0000038d: VF := extend:65[#4] <> extend:65[#3] + 1
00000392: CF := pad:65[#4] <> pad:65[#3] + 1
00000396: ZF := #4 = 0
0000039a: NF := 63:63[#4]
000003a2: R1 :=

          >> 1 | R1 << 0x3F]
000003a8: when ZF goto %000003a6
00000992: goto %000006b5

000006b5:
000006b8: R2 := 0x10000
000006bf: R2 := mem[R2 + 0xFF0, el]:u64
000006c4: when R2 = 0 goto %000003a6
00000993: goto %000006c8

000003a6:
000003ae: call R30 with noreturn

000006c8:
000006cc: R16 := R2
000006d1: call R16 with noreturn

00000994: sub sub_seven(sub_seven_result)
000009ab: sub_seven_result :: out u32 = low:32[R0]

0000045c:
0000045f: R0 := 0x10000
00000466: R0 := mem[R0 + 0xFD0, el]:u64
0000046d: R0 := pad:64[mem[R0, el]:u32]
00000473: R1 := pad:64[31:0[R0] - 7]
00000478: R0 := 0x10000
0000047f: R0 := mem[R0 + 0xFD0, el]:u64
00000487: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000048e: call R30 with noreturn
