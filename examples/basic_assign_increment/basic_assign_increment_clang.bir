000007bb: program
000007a0: sub __cxa_finalize(__cxa_finalize_result)
000007bc: __cxa_finalize_result :: out u32 = low:32[R0]

00000522:
00000603: R16 := 0x11000
0000060a: R17 := mem[R16, el]:u64
00000610: R16 := R16
00000615: call R17 with noreturn

000007a1: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000007bd: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000031a:
0000031e: #5 := R31 - 0x20
00000324: mem := mem with [#5, el]:u64 <- R29
0000032a: mem := mem with [#5 + 8, el]:u64 <- R30
0000032e: R31 := #5
00000334: R29 := R31
0000033c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000341: R19 := 0x11000
00000348: R0 := pad:64[mem[R19 + 0x30]]
0000034f: when 31:0[R0] <> 0 goto %0000034d
000007a2: goto %000004eb

000004eb:
000004ee: R0 := 0x10000
000004f5: R0 := mem[R0 + 0xFC0, el]:u64
000004fb: when R0 = 0 goto %000004f9
000007a3: goto %00000512

00000512:
00000515: R0 := 0x11000
0000051c: R0 := mem[R0 + 0x28, el]:u64
00000521: R30 := 0x700
00000524: call @__cxa_finalize with return %000004f9

000004f9:
00000501: R30 := 0x704
00000503: call @deregister_tm_clones with return %00000505

00000505:
00000508: R0 := 1
00000510: mem := mem with [R19 + 0x30] <- 7:0[R0]
000007a4: goto %0000034d

0000034d:
00000357: R19 := mem[R31 + 0x10, el]:u64
0000035e: R29 := mem[R31, el]:u64
00000363: R30 := mem[R31 + 8, el]:u64
00000367: R31 := R31 + 0x20
0000036c: call R30 with noreturn

000007a5: sub __libc_csu_fini(__libc_csu_fini_result)
000007be: __libc_csu_fini_result :: out u32 = low:32[R0]

0000048b:
0000048e: call R30 with noreturn

000007a6: sub __libc_csu_init(__libc_csu_init_result)
000007bf: __libc_csu_init_result :: out u32 = low:32[R0]

00000398:
0000039c: #6 := R31 - 0x40
000003a2: mem := mem with [#6, el]:u64 <- R29
000003a8: mem := mem with [#6 + 8, el]:u64 <- R30
000003ac: R31 := #6
000003b2: R29 := R31
000003b8: #7 := R31 + 0x10
000003be: mem := mem with [#7, el]:u64 <- R19
000003c4: mem := mem with [#7 + 8, el]:u64 <- R20
000003c9: R20 := 0x10000
000003cf: R20 := R20 + 0xDC0
000003d5: #8 := R31 + 0x20
000003db: mem := mem with [#8, el]:u64 <- R21
000003e1: mem := mem with [#8 + 8, el]:u64 <- R22
000003e6: R21 := 0x10000
000003ec: R21 := R21 + 0xDB8
000003f3: R20 := R20 + ~R21 + 1
000003f9: R22 := pad:64[31:0[R0]]
000003ff: #9 := R31 + 0x30
00000405: mem := mem with [#9, el]:u64 <- R23
0000040b: mem := mem with [#9 + 8, el]:u64 <- R24
00000411: R23 := R1
00000417: R24 := R2
0000041c: R30 := 0x770
0000041f: call @_init with return %00000421

00000421:
00000425: #10 := ~(R20 ~>> 3)
00000429: #11 := ~(R20 ~>> 3) + 1
0000042e: VF := extend:65[#11] <> extend:65[#10] + 1
00000433: CF := pad:65[#11] <> pad:65[#10] + 1
00000437: ZF := #11 = 0
0000043b: NF := 63:63[#11]
00000441: when ZF goto %0000043f
000007a7: goto %00000490

00000490:
00000496: R20 :=

          >> 3 | R20 << 0x3D]
0000049b: R19 := 0
000007a8: goto %0000049d

0000049d:
000004a3: R3 := mem[R21 + (60:0[R19].0), el]:u64
000004a9: R2 := R24
000004af: R19 := R19 + 1
000004b5: R1 := R23
000004bb: R0 := pad:64[31:0[R22]]
000004c0: R30 := 0x798
000004c3: call R3 with return %000004c5

000004c5:
000004c9: #15 := ~R19
000004ce: #16 := R20 + ~R19 + 1
000004d4: VF := extend:65[#16] <> extend:65[R20] + extend:65[#15] + 1
000004da: CF := pad:65[#16] <> pad:65[R20] + pad:65[#15] + 1
000004de: ZF := #16 = 0
000004e2: NF := 63:63[#16]
000004e7: when ZF <> 1 goto %0000049d
000007a9: goto %0000043f

0000043f:
00000448: #12 := R31 + 0x10
0000044d: R19 := mem[#12, el]:u64
00000452: R20 := mem[#12 + 8, el]:u64
00000458: #13 := R31 + 0x20
0000045d: R21 := mem[#13, el]:u64
00000462: R22 := mem[#13 + 8, el]:u64
00000468: #14 := R31 + 0x30
0000046d: R23 := mem[#14, el]:u64
00000472: R24 := mem[#14 + 8, el]:u64
00000479: R29 := mem[R31, el]:u64
0000047e: R30 := mem[R31 + 8, el]:u64
00000482: R31 := R31 + 0x40
00000487: call R30 with noreturn

000007aa: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000007c0: __libc_start_main_main :: in u64 = R0
000007c1: __libc_start_main_arg2 :: in u32 = low:32[R1]
000007c2: __libc_start_main_arg3 :: in out u64 = R2
000007c3: __libc_start_main_auxv :: in out u64 = R3
000007c4: __libc_start_main_result :: out u32 = low:32[R0]

00000258:
00000619: R16 := 0x11000
00000620: R17 := mem[R16 + 8, el]:u64
00000626: R16 := R16 + 8
0000062b: call R17 with noreturn

000007ab: sub _fini(_fini_result)
000007c5: _fini_result :: out u32 = low:32[R0]

0000002e:
00000032: #0 := R31 - 0x10
00000038: mem := mem with [#0, el]:u64 <- R29
0000003e: mem := mem with [#0 + 8, el]:u64 <- R30
00000042: R31 := #0
00000048: R29 := R31
0000004f: R29 := mem[R31, el]:u64
00000054: R30 := mem[R31 + 8, el]:u64
00000058: R31 := R31 + 0x10
0000005d: call R30 with noreturn

000007ac: sub _init(_init_result)
000007c6: _init_result :: out u32 = low:32[R0]

0000041d:
000006e3: #18 := R31 - 0x10
000006e9: mem := mem with [#18, el]:u64 <- R29
000006ef: mem := mem with [#18 + 8, el]:u64 <- R30
000006f3: R31 := #18
000006f9: R29 := R31
000006fe: R30 := 0x5A4
00000700: call @call_weak_fn with return %00000702

00000702:
00000707: R29 := mem[R31, el]:u64
0000070c: R30 := mem[R31 + 8, el]:u64
00000710: R31 := R31 + 0x10
00000715: call R30 with noreturn

000007ad: sub _start(_start_result)
000007c7: _start_result :: out u32 = low:32[R0]

0000020d:
00000210: R29 := 0
00000215: R30 := 0
0000021b: R5 := R0
00000222: R1 := mem[R31, el]:u64
00000228: R2 := R31 + 8
0000022e: R6 := R31
00000233: R0 := 0x10000
0000023a: R0 := mem[R0 + 0xFD8, el]:u64
0000023f: R3 := 0x10000
00000246: R3 := mem[R3 + 0xFD0, el]:u64
0000024b: R4 := 0x10000
00000252: R4 := mem[R4 + 0xFB0, el]:u64
00000257: R30 := 0x644
0000025a: call @__libc_start_main with return %0000025c

0000025c:
0000025f: R30 := 0x648
00000262: call @abort with return %000007ae

000007ae:
000007af: call @call_weak_fn with noreturn

000007b0: sub abort()


00000260:
00000645: R16 := 0x11000
0000064c: R17 := mem[R16 + 0x18, el]:u64
00000652: R16 := R16 + 0x18
00000657: call R17 with noreturn

000007b1: sub call_weak_fn(call_weak_fn_result)
000007c8: call_weak_fn_result :: out u32 = low:32[R0]

00000264:
00000267: R0 := 0x10000
0000026e: R0 := mem[R0 + 0xFC8, el]:u64
00000274: when R0 = 0 goto %00000272
000007b2: goto %00000562

00000272:
0000027a: call R30 with noreturn

00000562:
00000565: goto @__gmon_start__

00000563:
0000062f: R16 := 0x11000
00000636: R17 := mem[R16 + 0x10, el]:u64
0000063c: R16 := R16 + 0x10
00000641: call R17 with noreturn

000007b3: sub deregister_tm_clones(deregister_tm_clones_result)
000007c9: deregister_tm_clones_result :: out u32 = low:32[R0]

0000027e:
00000281: R0 := 0x11000
00000287: R0 := R0 + 0x30
0000028c: R1 := 0x11000
00000292: R1 := R1 + 0x30
00000298: #1 := ~R0
0000029d: #2 := R1 + ~R0 + 1
000002a3: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002a9: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002ad: ZF := #2 = 0
000002b1: NF := 63:63[#2]
000002b7: when ZF goto %000002b5
000007b4: goto %00000544

00000544:
00000547: R1 := 0x10000
0000054e: R1 := mem[R1 + 0xFB8, el]:u64
00000553: when R1 = 0 goto %000002b5
000007b5: goto %00000557

000002b5:
000002bd: call R30 with noreturn

00000557:
0000055b: R16 := R1
00000560: call R16 with noreturn

000007b6: sub frame_dummy(frame_dummy_result)
000007ca: frame_dummy_result :: out u32 = low:32[R0]

0000036e:
00000370: call @register_tm_clones with noreturn

000007b7: sub main(main_argc, main_argv, main_result)
000007cb: main_argc :: in u32 = low:32[R0]
000007cc: main_argv :: in out u64 = R1
000007cd: main_result :: out u32 = low:32[R0]

00000372:
00000375: R9 := 0x11000
0000037c: R8 := pad:64[mem[R9 + 0x34, el]:u32]
00000382: R8 := pad:64[31:0[R8] + 1]
0000038a: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
0000038f: R0 := 0
00000394: call R30 with noreturn

000007b8: sub register_tm_clones(register_tm_clones_result)
000007ce: register_tm_clones_result :: out u32 = low:32[R0]

000002bf:
000002c2: R0 := 0x11000
000002c8: R0 := R0 + 0x30
000002cd: R1 := 0x11000
000002d3: R1 := R1 + 0x30
000002da: R1 := R1 + ~R0 + 1
000002e1: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
000002e8: R1 := R2 + (R1 ~>> 3)
000002ee: #3 := ~(R1 ~>> 1)
000002f2: #4 := ~(R1 ~>> 1) + 1
000002f7: VF := extend:65[#4] <> extend:65[#3] + 1
000002fc: CF := pad:65[#4] <> pad:65[#3] + 1
00000300: ZF := #4 = 0
00000304: NF := 63:63[#4]
0000030c: R1 :=

          >> 1 | R1 << 0x3F]
00000312: when ZF goto %00000310
000007b9: goto %00000526

00000526:
00000529: R2 := 0x10000
00000530: R2 := mem[R2 + 0xFE0, el]:u64
00000535: when R2 = 0 goto %00000310
000007ba: goto %00000539

00000310:
00000318: call R30 with noreturn

00000539:
0000053d: R16 := R2
00000542: call R16 with noreturn
