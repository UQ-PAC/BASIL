0000079a: program
0000077b: sub __cxa_finalize(__cxa_finalize_result)
0000079b: __cxa_finalize_result :: out u32 = low:32[R0]

00000502:
0000062a: R16 := 0x11000
00000631: R17 := mem[R16 + 8, el]:u64
00000637: R16 := R16 + 8
0000063c: call R17 with noreturn

0000077c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000079c: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000030e:
00000312: #3 := R31 - 0x20
00000318: mem := mem with [#3, el]:u64 <- R29
0000031e: mem := mem with [#3 + 8, el]:u64 <- R30
00000322: R31 := #3
00000328: R29 := R31
00000330: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000335: R19 := 0x11000
0000033c: R0 := pad:64[mem[R19 + 0x48]]
00000343: when 31:0[R0] <> 0 goto %00000341
0000077d: goto %000004cb

000004cb:
000004ce: R0 := 0x10000
000004d5: R0 := mem[R0 + 0xFC8, el]:u64
000004db: when R0 = 0 goto %000004d9
0000077e: goto %000004f2

000004f2:
000004f5: R0 := 0x11000
000004fc: R0 := mem[R0 + 0x40, el]:u64
00000501: R30 := 0x7F0
00000504: call @__cxa_finalize with return %000004d9

000004d9:
000004e1: R30 := 0x7F4
000004e3: call @deregister_tm_clones with return %000004e5

000004e5:
000004e8: R0 := 1
000004f0: mem := mem with [R19 + 0x48] <- 7:0[R0]
0000077f: goto %00000341

00000341:
0000034b: R19 := mem[R31 + 0x10, el]:u64
00000352: R29 := mem[R31, el]:u64
00000357: R30 := mem[R31 + 8, el]:u64
0000035b: R31 := R31 + 0x20
00000360: call R30 with noreturn

00000780: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000079d: __libc_start_main_main :: in u64 = R0
0000079e: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000079f: __libc_start_main_arg3 :: in out u64 = R2
000007a0: __libc_start_main_auxv :: in out u64 = R3
000007a1: __libc_start_main_result :: out u32 = low:32[R0]

00000267:
00000614: R16 := 0x11000
0000061b: R17 := mem[R16, el]:u64
00000621: R16 := R16
00000626: call R17 with noreturn

00000781: sub _fini(_fini_result)
000007a2: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000782: sub _init(_init_result)
000007a3: _init_result :: out u32 = low:32[R0]

000006c6:
000006cc: #9 := R31 - 0x10
000006d2: mem := mem with [#9, el]:u64 <- R29
000006d8: mem := mem with [#9 + 8, el]:u64 <- R30
000006dc: R31 := #9
000006e2: R29 := R31
000006e7: R30 := 0x650
000006e9: call @call_weak_fn with return %000006eb

000006eb:
000006f0: R29 := mem[R31, el]:u64
000006f5: R30 := mem[R31 + 8, el]:u64
000006f9: R31 := R31 + 0x10
000006fe: call R30 with noreturn

00000783: sub _start(_start_result)
000007a4: _start_result :: out u32 = low:32[R0]

00000228:
0000022d: R29 := 0
00000232: R30 := 0
00000238: R5 := R0
0000023f: R1 := mem[R31, el]:u64
00000245: R2 := R31 + 8
0000024b: R6 := R31
00000250: R0 := 0x10000
00000257: R0 := mem[R0 + 0xFD8, el]:u64
0000025c: R3 := 0
00000261: R4 := 0
00000266: R30 := 0x730
00000269: call @__libc_start_main with return %0000026b

0000026b:
0000026e: R30 := 0x734
00000271: call @abort with return %00000784

00000784:
00000785: call @call_weak_fn with noreturn

00000786: sub abort()


0000026f:
00000656: R16 := 0x11000
0000065d: R17 := mem[R16 + 0x18, el]:u64
00000663: R16 := R16 + 0x18
00000668: call R17 with noreturn

00000787: sub assign(assign_result)
000007a5: assign_result :: out u32 = low:32[R0]

0000036a:
0000036e: R31 := R31 - 0x20
00000374: #4 := R31 + 0x10
0000037a: mem := mem with [#4, el]:u64 <- R29
00000380: mem := mem with [#4 + 8, el]:u64 <- R30
00000386: R29 := R31 + 0x10
0000038e: mem := mem with [R31 + 8, el]:u64 <- R0
00000393: R9 := 0x11000
00000398: R8 := 5
000003a0: mem := mem with [R9 + 0x4C, el]:u32 <- 31:0[R8]
000003a5: R0 := 0
000003aa: R30 := 0x838
000003ad: call @pthread_exit with return %00000788

00000788:
00000789: call @increment with noreturn

0000078a: sub call_weak_fn(call_weak_fn_result)
000007a6: call_weak_fn_result :: out u32 = low:32[R0]

00000273:
00000276: R0 := 0x10000
0000027d: R0 := mem[R0 + 0xFD0, el]:u64
00000283: when R0 = 0 goto %00000281
0000078b: goto %00000542

00000281:
00000289: call R30 with noreturn

00000542:
00000545: goto @__gmon_start__

00000543:
00000640: R16 := 0x11000
00000647: R17 := mem[R16 + 0x10, el]:u64
0000064d: R16 := R16 + 0x10
00000652: call R17 with noreturn

0000078c: sub deregister_tm_clones(deregister_tm_clones_result)
000007a7: deregister_tm_clones_result :: out u32 = low:32[R0]

0000028f:
00000292: R0 := 0x11000
00000298: R0 := R0 + 0x48
0000029d: R1 := 0x11000
000002a3: R1 := R1 + 0x48
000002a9: #1 := ~R0
000002ae: #2 := R1 + ~R0
000002b4: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002ba: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002be: ZF := #2 + 1 = 0
000002c2: NF := 63:63[#2 + 1]
000002c8: when ZF goto %000002c6
0000078d: goto %00000524

00000524:
00000527: R1 := 0x10000
0000052e: R1 := mem[R1 + 0xFC0, el]:u64
00000533: when R1 = 0 goto %000002c6
0000078e: goto %00000537

000002c6:
000002ce: call R30 with noreturn

00000537:
0000053b: R16 := R1
00000540: call R16 with noreturn

0000078f: sub frame_dummy(frame_dummy_result)
000007a8: frame_dummy_result :: out u32 = low:32[R0]

00000366:
00000368: call @register_tm_clones with noreturn

00000790: sub increment(increment_result)
000007a9: increment_result :: out u32 = low:32[R0]

000003af:
000003b3: R31 := R31 - 0x20
000003b9: #5 := R31 + 0x10
000003bf: mem := mem with [#5, el]:u64 <- R29
000003c5: mem := mem with [#5 + 8, el]:u64 <- R30
000003cb: R29 := R31 + 0x10
000003d3: mem := mem with [R31 + 8, el]:u64 <- R0
000003d8: R9 := 0x11000
000003df: R8 := pad:64[mem[R9 + 0x4C, el]:u32]
000003e5: R8 := pad:64[31:0[R8] + 1]
000003ed: mem := mem with [R9 + 0x4C, el]:u32 <- 31:0[R8]
000003f2: R0 := 0
000003f7: R30 := 0x860
000003f9: call @pthread_exit with return %00000791

00000791:
00000792: call @main with noreturn

00000793: sub main(main_argc, main_argv, main_result)
000007aa: main_argc :: in u32 = low:32[R0]
000007ab: main_argv :: in out u64 = R1
000007ac: main_result :: out u32 = low:32[R0]

000003fb:
000003ff: R31 := R31 - 0x40
00000405: #6 := R31 + 0x30
0000040b: mem := mem with [#6, el]:u64 <- R29
00000411: mem := mem with [#6 + 8, el]:u64 <- R30
00000417: R29 := R31 + 0x30
0000041c: R8 := 0
00000424: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R8]
0000042b: mem := mem with [R29 - 4, el]:u32 <- 0
00000431: R0 := R29 - 0x10
00000436: R3 := 0
0000043e: mem := mem with [R31 + 8, el]:u64 <- R3
00000444: R1 := R3
00000449: R2 := 0
0000044f: R2 := R2 + 0x814
00000454: R30 := 0x894
00000457: call @pthread_create with return %00000459

00000459:
0000045e: R3 := mem[R31 + 8, el]:u64
00000464: R0 := R31 + 0x18
0000046a: R1 := R3
0000046f: R2 := 0
00000475: R2 := R2 + 0x838
0000047a: R30 := 0x8AC
0000047c: call @pthread_create with return %0000047e

0000047e:
00000483: R1 := mem[R31 + 8, el]:u64
0000048a: R0 := mem[R31 + 0x18, el]:u64
0000048f: R30 := 0x8B8
00000492: call @pthread_join with return %00000494

00000494:
00000499: R1 := mem[R31 + 8, el]:u64
000004a0: R0 := mem[R29 - 0x10, el]:u64
000004a5: R30 := 0x8C4
000004a7: call @pthread_join with return %000004a9

000004a9:
000004ae: R0 := pad:64[mem[R31 + 0x14, el]:u32]
000004b4: #7 := R31 + 0x30
000004b9: R29 := mem[#7, el]:u64
000004be: R30 := mem[#7 + 8, el]:u64
000004c4: R31 := R31 + 0x40
000004c9: call R30 with noreturn

00000794: sub pthread_create(pthread_create_result)
000007ad: pthread_create_result :: out u32 = low:32[R0]

00000455:
00000682: R16 := 0x11000
00000689: R17 := mem[R16 + 0x28, el]:u64
0000068f: R16 := R16 + 0x28
00000694: call R17 with noreturn

00000795: sub pthread_exit(pthread_exit_result)
000007ae: pthread_exit_result :: out u32 = low:32[R0]

000003ab:
0000066c: R16 := 0x11000
00000673: R17 := mem[R16 + 0x20, el]:u64
00000679: R16 := R16 + 0x20
0000067e: call R17 with noreturn

00000796: sub pthread_join(pthread_join_result)
000007af: pthread_join_result :: out u32 = low:32[R0]

00000490:
00000698: R16 := 0x11000
0000069f: R17 := mem[R16 + 0x30, el]:u64
000006a5: R16 := R16 + 0x30
000006aa: call R17 with noreturn

00000797: sub register_tm_clones(register_tm_clones_result)
000007b0: register_tm_clones_result :: out u32 = low:32[R0]

000002d0:
000002d3: R0 := 0x11000
000002d9: R0 := R0 + 0x48
000002de: R1 := 0x11000
000002e4: R1 := R1 + 0x48
000002eb: R1 := R1 + ~R0 + 1
000002f1: R2 := 0.63:63[R1]
000002f8: R1 := R2 + (R1 ~>> 3)
000002fe: R1 := extend:64[63:1[R1]]
00000304: when R1 = 0 goto %00000302
00000798: goto %00000506

00000506:
00000509: R2 := 0x10000
00000510: R2 := mem[R2 + 0xFE0, el]:u64
00000515: when R2 = 0 goto %00000302
00000799: goto %00000519

00000302:
0000030a: call R30 with noreturn

00000519:
0000051d: R16 := R2
00000522: call R16 with noreturn
