00000ab1: program
00000a89: sub __cxa_finalize(__cxa_finalize_result)
00000ab2: __cxa_finalize_result :: out u32 = low:32[R0]

000007af:
00000890: R16 := 0x10000
00000897: R17 := mem[R16 + 0xF98, el]:u64
0000089d: R16 := R16 + 0xF98
000008a2: call R17 with noreturn

00000a8a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000ab3: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000003d6:
000003da: #5 := R31 - 0x20
000003e0: mem := mem with [#5, el]:u64 <- R29
000003e6: mem := mem with [#5 + 8, el]:u64 <- R30
000003ea: R31 := #5
000003f0: R29 := R31
000003f8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003fd: R19 := 0x11000
00000404: R0 := pad:64[mem[R19 + 0x10]]
0000040b: when 31:0[R0] <> 0 goto %00000409
00000a8b: goto %00000778

00000778:
0000077b: R0 := 0x10000
00000782: R0 := mem[R0 + 0xFD0, el]:u64
00000788: when R0 = 0 goto %00000786
00000a8c: goto %0000079f

0000079f:
000007a2: R0 := 0x11000
000007a9: R0 := mem[R0 + 8, el]:u64
000007ae: R30 := 0x720
000007b1: call @__cxa_finalize with return %00000786

00000786:
0000078e: R30 := 0x724
00000790: call @deregister_tm_clones with return %00000792

00000792:
00000795: R0 := 1
0000079d: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000a8d: goto %00000409

00000409:
00000413: R19 := mem[R31 + 0x10, el]:u64
0000041a: R29 := mem[R31, el]:u64
0000041f: R30 := mem[R31 + 8, el]:u64
00000423: R31 := R31 + 0x20
00000428: call R30 with noreturn

00000a8e: sub __libc_csu_fini(__libc_csu_fini_result)
00000ab4: __libc_csu_fini_result :: out u32 = low:32[R0]

000005b9:
000005bc: call R30 with noreturn

00000a8f: sub __libc_csu_init(__libc_csu_init_result)
00000ab5: __libc_csu_init_result :: out u32 = low:32[R0]

000004c6:
000004ca: #8 := R31 - 0x40
000004d0: mem := mem with [#8, el]:u64 <- R29
000004d6: mem := mem with [#8 + 8, el]:u64 <- R30
000004da: R31 := #8
000004e0: R29 := R31
000004e6: #9 := R31 + 0x10
000004ec: mem := mem with [#9, el]:u64 <- R19
000004f2: mem := mem with [#9 + 8, el]:u64 <- R20
000004f7: R20 := 0x10000
000004fd: R20 := R20 + 0xD88
00000503: #10 := R31 + 0x20
00000509: mem := mem with [#10, el]:u64 <- R21
0000050f: mem := mem with [#10 + 8, el]:u64 <- R22
00000514: R21 := 0x10000
0000051a: R21 := R21 + 0xD80
00000521: R20 := R20 + ~R21 + 1
00000527: R22 := pad:64[31:0[R0]]
0000052d: #11 := R31 + 0x30
00000533: mem := mem with [#11, el]:u64 <- R23
00000539: mem := mem with [#11 + 8, el]:u64 <- R24
0000053f: R23 := R1
00000545: R24 := R2
0000054a: R30 := 0x848
0000054d: call @_init with return %0000054f

0000054f:
00000553: #12 := ~(R20 ~>> 3)
00000557: #13 := ~(R20 ~>> 3) + 1
0000055c: VF := extend:65[#13] <> extend:65[#12] + 1
00000561: CF := pad:65[#13] <> pad:65[#12] + 1
00000565: ZF := #13 = 0
00000569: NF := 63:63[#13]
0000056f: when ZF goto %0000056d
00000a90: goto %000005be

000005be:
000005c4: R20 :=

          >> 3 | R20 << 0x3D]
000005c9: R19 := 0
00000a91: goto %000005cb

000005cb:
000005d1: R3 := mem[R21 + (60:0[R19].0), el]:u64
000005d7: R2 := R24
000005dd: R19 := R19 + 1
000005e3: R1 := R23
000005e9: R0 := pad:64[31:0[R22]]
000005ee: R30 := 0x870
000005f1: call R3 with return %000005f3

000005f3:
000005f7: #17 := ~R19
000005fc: #18 := R20 + ~R19 + 1
00000602: VF := extend:65[#18] <> extend:65[R20] + extend:65[#17] + 1
00000608: CF := pad:65[#18] <> pad:65[R20] + pad:65[#17] + 1
0000060c: ZF := #18 = 0
00000610: NF := 63:63[#18]
00000615: when ZF <> 1 goto %000005cb
00000a92: goto %0000056d

0000056d:
00000576: #14 := R31 + 0x10
0000057b: R19 := mem[#14, el]:u64
00000580: R20 := mem[#14 + 8, el]:u64
00000586: #15 := R31 + 0x20
0000058b: R21 := mem[#15, el]:u64
00000590: R22 := mem[#15 + 8, el]:u64
00000596: #16 := R31 + 0x30
0000059b: R23 := mem[#16, el]:u64
000005a0: R24 := mem[#16 + 8, el]:u64
000005a7: R29 := mem[R31, el]:u64
000005ac: R30 := mem[R31 + 8, el]:u64
000005b0: R31 := R31 + 0x40
000005b5: call R30 with noreturn

00000a93: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000ab6: __libc_start_main_main :: in u64 = R0
00000ab7: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000ab8: __libc_start_main_arg3 :: in out u64 = R2
00000ab9: __libc_start_main_auxv :: in out u64 = R3
00000aba: __libc_start_main_result :: out u32 = low:32[R0]

00000314:
000008a6: R16 := 0x10000
000008ad: R17 := mem[R16 + 0xFA0, el]:u64
000008b3: R16 := R16 + 0xFA0
000008b8: call R17 with noreturn

00000a94: sub _fini(_fini_result)
00000abb: _fini_result :: out u32 = low:32[R0]

00000032:
00000036: #0 := R31 - 0x10
0000003c: mem := mem with [#0, el]:u64 <- R29
00000042: mem := mem with [#0 + 8, el]:u64 <- R30
00000046: R31 := #0
0000004c: R29 := R31
00000053: R29 := mem[R31, el]:u64
00000058: R30 := mem[R31 + 8, el]:u64
0000005c: R31 := R31 + 0x10
00000061: call R30 with noreturn

00000a95: sub _init(_init_result)
00000abc: _init_result :: out u32 = low:32[R0]

0000054b:
0000099e: #27 := R31 - 0x10
000009a4: mem := mem with [#27, el]:u64 <- R29
000009aa: mem := mem with [#27 + 8, el]:u64 <- R30
000009ae: R31 := #27
000009b4: R29 := R31
000009b9: R30 := 0x5BC
000009bb: call @call_weak_fn with return %000009bd

000009bd:
000009c2: R29 := mem[R31, el]:u64
000009c7: R30 := mem[R31 + 8, el]:u64
000009cb: R31 := R31 + 0x10
000009d0: call R30 with noreturn

00000a96: sub _start(_start_result)
00000abd: _start_result :: out u32 = low:32[R0]

000002c9:
000002cc: R29 := 0
000002d1: R30 := 0
000002d7: R5 := R0
000002de: R1 := mem[R31, el]:u64
000002e4: R2 := R31 + 8
000002ea: R6 := R31
000002ef: R0 := 0x10000
000002f6: R0 := mem[R0 + 0xFF0, el]:u64
000002fb: R3 := 0x10000
00000302: R3 := mem[R3 + 0xFE8, el]:u64
00000307: R4 := 0x10000
0000030e: R4 := mem[R4 + 0xFC0, el]:u64
00000313: R30 := 0x664
00000316: call @__libc_start_main with return %00000318

00000318:
0000031b: R30 := 0x668
0000031e: call @abort with return %00000a97

00000a97:
00000a98: call @call_weak_fn with noreturn

00000a99: sub abort()


0000031c:
000008d2: R16 := 0x10000
000008d9: R17 := mem[R16 + 0xFB0, el]:u64
000008df: R16 := R16 + 0xFB0
000008e4: call R17 with noreturn

00000a9a: sub call_weak_fn(call_weak_fn_result)
00000abe: call_weak_fn_result :: out u32 = low:32[R0]

00000320:
00000323: R0 := 0x10000
0000032a: R0 := mem[R0 + 0xFE0, el]:u64
00000330: when R0 = 0 goto %0000032e
00000a9b: goto %000007ef

0000032e:
00000336: call R30 with noreturn

000007ef:
000007f2: goto @__gmon_start__

000007f0:
000008bc: R16 := 0x10000
000008c3: R17 := mem[R16 + 0xFA8, el]:u64
000008c9: R16 := R16 + 0xFA8
000008ce: call R17 with noreturn

00000a9c: sub deregister_tm_clones(deregister_tm_clones_result)
00000abf: deregister_tm_clones_result :: out u32 = low:32[R0]

0000033a:
0000033d: R0 := 0x11000
00000343: R0 := R0 + 0x10
00000348: R1 := 0x11000
0000034e: R1 := R1 + 0x10
00000354: #1 := ~R0
00000359: #2 := R1 + ~R0 + 1
0000035f: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
00000365: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
00000369: ZF := #2 = 0
0000036d: NF := 63:63[#2]
00000373: when ZF goto %00000371
00000a9d: goto %000007d1

000007d1:
000007d4: R1 := 0x10000
000007db: R1 := mem[R1 + 0xFC8, el]:u64
000007e0: when R1 = 0 goto %00000371
00000a9e: goto %000007e4

00000371:
00000379: call R30 with noreturn

000007e4:
000007e8: R16 := R1
000007ed: call R16 with noreturn

00000a9f: sub frame_dummy(frame_dummy_result)
00000ac0: frame_dummy_result :: out u32 = low:32[R0]

0000042a:
0000042c: call @register_tm_clones with noreturn

00000aa0: sub main(main_argc, main_argv, main_result)
00000ac1: main_argc :: in u32 = low:32[R0]
00000ac2: main_argv :: in out u64 = R1
00000ac3: main_result :: out u32 = low:32[R0]

00000438:
0000043c: #6 := R31 - 0x30
00000442: mem := mem with [#6, el]:u64 <- R29
00000448: mem := mem with [#6 + 8, el]:u64 <- R30
0000044c: R31 := #6
00000452: R29 := R31
0000045a: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000462: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000469: mem := mem with [R31 + 0x2C, el]:u32 <- 0
00000470: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000476: #7 := 31:0[R0] - 5
0000047b: VF := extend:33[#7] <> extend:33[31:0[R0]] - 5
00000480: CF := pad:33[#7] <> pad:33[31:0[R0]] + 0xFFFFFFFB
00000484: ZF := #7 = 0
00000488: NF := 31:31[#7]
0000048e: when ZF goto %0000048c
00000aa1: goto %00000619

0000048c:
00000494: R0 := 4
0000049c: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000aa2: goto %0000049e

00000619:
0000061e: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000624: #19 := 31:0[R0] - 5
00000629: VF := extend:33[#19] <> extend:33[31:0[R0]] - 5
0000062e: CF := pad:33[#19] <> pad:33[31:0[R0]] + 0xFFFFFFFB
00000632: ZF := #19 = 0
00000636: NF := 31:31[#19]
0000063d: when NF = VF & ~ZF goto %0000049e
00000aa3: goto %00000641

00000641:
00000646: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000064c: #20 := 31:0[R0] - 4
00000651: VF := extend:33[#20] <> extend:33[31:0[R0]] - 4
00000656: CF := pad:33[#20] <> pad:33[31:0[R0]] + 0xFFFFFFFC
0000065a: ZF := #20 = 0
0000065e: NF := 31:31[#20]
00000664: when ZF goto %00000662
00000aa4: goto %00000678

00000678:
0000067d: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000683: #21 := 31:0[R0] - 4
00000688: VF := extend:33[#21] <> extend:33[31:0[R0]] - 4
0000068d: CF := pad:33[#21] <> pad:33[31:0[R0]] + 0xFFFFFFFC
00000691: ZF := #21 = 0
00000695: NF := 31:31[#21]
0000069c: when NF = VF & ~ZF goto %0000049e
00000aa5: goto %000006a0

000006a0:
000006a5: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000006ab: #22 := 31:0[R0] - 3
000006b0: VF := extend:33[#22] <> extend:33[31:0[R0]] - 3
000006b5: CF := pad:33[#22] <> pad:33[31:0[R0]] + 0xFFFFFFFD
000006b9: ZF := #22 = 0
000006bd: NF := 31:31[#22]
000006c3: when ZF goto %000006c1
00000aa6: goto %00000700

000006c1:
000006c9: R0 := 0x10000
000006d0: R0 := mem[R0 + 0xFD8, el]:u64
000006d5: R30 := 0x7C8
000006d8: call R0 with return %000006da

000006da:
000006e0: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000aa7: goto %000006e2

00000700:
00000705: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000070b: #23 := 31:0[R0] - 3
00000710: VF := extend:33[#23] <> extend:33[31:0[R0]] - 3
00000715: CF := pad:33[#23] <> pad:33[31:0[R0]] + 0xFFFFFFFD
00000719: ZF := #23 = 0
0000071d: NF := 31:31[#23]
00000724: when NF = VF & ~ZF goto %0000049e
00000aa8: goto %00000728

00000728:
0000072d: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000733: #24 := 31:0[R0] - 1
00000738: VF := extend:33[#24] <> extend:33[31:0[R0]] - 1
0000073d: CF := pad:33[#24] <> pad:33[31:0[R0]] + 0xFFFFFFFF
00000741: ZF := #24 = 0
00000745: NF := 31:31[#24]
0000074a: when ZF goto %000006e2
00000aa9: goto %0000074e

000006e2:
000006e5: R0 := 1
000006ed: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
000006f1: goto %000004ad

0000074e:
00000753: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000759: #25 := 31:0[R0] - 2
0000075e: VF := extend:33[#25] <> extend:33[31:0[R0]] - 2
00000763: CF := pad:33[#25] <> pad:33[31:0[R0]] + 0xFFFFFFFE
00000767: ZF := #25 = 0
0000076b: NF := 31:31[#25]
00000770: when ZF goto %000006f3
00000aaa: goto %00000774

000006f3:
000006f6: R0 := 2
000006fe: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000aab: goto %00000662

00000662:
0000066a: R0 := 3
00000672: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000676: goto %000004ad

00000774:
00000776: goto %0000049e

0000049e:
000004a1: R0 := 5
000004a9: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000aac: goto %000004ad

000004ad:
000004b4: R29 := mem[R31, el]:u64
000004b9: R30 := mem[R31 + 8, el]:u64
000004bd: R31 := R31 + 0x30
000004c2: call R30 with noreturn

00000aad: sub r(r_result)
00000ac4: r_result :: out u32 = low:32[R0]

0000042e:
00000431: R0 := 1
00000436: call R30 with noreturn

00000aae: sub register_tm_clones(register_tm_clones_result)
00000ac5: register_tm_clones_result :: out u32 = low:32[R0]

0000037b:
0000037e: R0 := 0x11000
00000384: R0 := R0 + 0x10
00000389: R1 := 0x11000
0000038f: R1 := R1 + 0x10
00000396: R1 := R1 + ~R0 + 1
0000039d: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
000003a4: R1 := R2 + (R1 ~>> 3)
000003aa: #3 := ~(R1 ~>> 1)
000003ae: #4 := ~(R1 ~>> 1) + 1
000003b3: VF := extend:65[#4] <> extend:65[#3] + 1
000003b8: CF := pad:65[#4] <> pad:65[#3] + 1
000003bc: ZF := #4 = 0
000003c0: NF := 63:63[#4]
000003c8: R1 :=
          63:63[63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1]].62:0[R1
          >> 1 | R1 << 0x3F]
000003ce: when ZF goto %000003cc
00000aaf: goto %000007b3

000007b3:
000007b6: R2 := 0x10000
000007bd: R2 := mem[R2 + 0xFF8, el]:u64
000007c2: when R2 = 0 goto %000003cc
00000ab0: goto %000007c6

000003cc:
000003d4: call R30 with noreturn

000007c6:
000007ca: R16 := R2
000007cf: call R16 with noreturn
