000008c4: program
000008a9: sub __cxa_finalize(__cxa_finalize_result)
000008c5: __cxa_finalize_result :: out u32 = low:32[R0]

000005ff:
000006e0: R16 := 0x10000
000006e7: R17 := mem[R16 + 0xFA0, el]:u64
000006ed: R16 := R16 + 0xFA0
000006f2: call R17 with noreturn

000008aa: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008c6: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000372:
00000376: #5 := R31 - 0x20
0000037c: mem := mem with [#5, el]:u64 <- R29
00000382: mem := mem with [#5 + 8, el]:u64 <- R30
00000386: R31 := #5
0000038c: R29 := R31
00000394: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000399: R19 := 0x11000
000003a0: R0 := pad:64[mem[R19 + 0x10]]
000003a7: when 31:0[R0] <> 0 goto %000003a5
000008ab: goto %000005c8

000005c8:
000005cb: R0 := 0x10000
000005d2: R0 := mem[R0 + 0xFD8, el]:u64
000005d8: when R0 = 0 goto %000005d6
000008ac: goto %000005ef

000005ef:
000005f2: R0 := 0x11000
000005f9: R0 := mem[R0 + 8, el]:u64
000005fe: R30 := 0x700
00000601: call @__cxa_finalize with return %000005d6

000005d6:
000005de: R30 := 0x704
000005e0: call @deregister_tm_clones with return %000005e2

000005e2:
000005e5: R0 := 1
000005ed: mem := mem with [R19 + 0x10] <- 7:0[R0]
000008ad: goto %000003a5

000003a5:
000003af: R19 := mem[R31 + 0x10, el]:u64
000003b6: R29 := mem[R31, el]:u64
000003bb: R30 := mem[R31 + 8, el]:u64
000003bf: R31 := R31 + 0x20
000003c4: call R30 with noreturn

000008ae: sub __libc_csu_fini(__libc_csu_fini_result)
000008c7: __libc_csu_fini_result :: out u32 = low:32[R0]

00000568:
0000056b: call R30 with noreturn

000008af: sub __libc_csu_init(__libc_csu_init_result)
000008c8: __libc_csu_init_result :: out u32 = low:32[R0]

00000475:
00000479: #6 := R31 - 0x40
0000047f: mem := mem with [#6, el]:u64 <- R29
00000485: mem := mem with [#6 + 8, el]:u64 <- R30
00000489: R31 := #6
0000048f: R29 := R31
00000495: #7 := R31 + 0x10
0000049b: mem := mem with [#7, el]:u64 <- R19
000004a1: mem := mem with [#7 + 8, el]:u64 <- R20
000004a6: R20 := 0x10000
000004ac: R20 := R20 + 0xD90
000004b2: #8 := R31 + 0x20
000004b8: mem := mem with [#8, el]:u64 <- R21
000004be: mem := mem with [#8 + 8, el]:u64 <- R22
000004c3: R21 := 0x10000
000004c9: R21 := R21 + 0xD88
000004d0: R20 := R20 + ~R21 + 1
000004d6: R22 := pad:64[31:0[R0]]
000004dc: #9 := R31 + 0x30
000004e2: mem := mem with [#9, el]:u64 <- R23
000004e8: mem := mem with [#9 + 8, el]:u64 <- R24
000004ee: R23 := R1
000004f4: R24 := R2
000004f9: R30 := 0x7C8
000004fc: call @_init with return %000004fe

000004fe:
00000502: #10 := ~(R20 ~>> 3)
00000506: #11 := ~(R20 ~>> 3) + 1
0000050b: VF := extend:65[#11] <> extend:65[#10] + 1
00000510: CF := pad:65[#11] <> pad:65[#10] + 1
00000514: ZF := #11 = 0
00000518: NF := 63:63[#11]
0000051e: when ZF goto %0000051c
000008b0: goto %0000056d

0000056d:
00000573: R20 :=

          >> 3 | R20 << 0x3D]
00000578: R19 := 0
000008b1: goto %0000057a

0000057a:
00000580: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000586: R2 := R24
0000058c: R19 := R19 + 1
00000592: R1 := R23
00000598: R0 := pad:64[31:0[R22]]
0000059d: R30 := 0x7F0
000005a0: call R3 with return %000005a2

000005a2:
000005a6: #15 := ~R19
000005ab: #16 := R20 + ~R19 + 1
000005b1: VF := extend:65[#16] <> extend:65[R20] + extend:65[#15] + 1
000005b7: CF := pad:65[#16] <> pad:65[R20] + pad:65[#15] + 1
000005bb: ZF := #16 = 0
000005bf: NF := 63:63[#16]
000005c4: when ZF <> 1 goto %0000057a
000008b2: goto %0000051c

0000051c:
00000525: #12 := R31 + 0x10
0000052a: R19 := mem[#12, el]:u64
0000052f: R20 := mem[#12 + 8, el]:u64
00000535: #13 := R31 + 0x20
0000053a: R21 := mem[#13, el]:u64
0000053f: R22 := mem[#13 + 8, el]:u64
00000545: #14 := R31 + 0x30
0000054a: R23 := mem[#14, el]:u64
0000054f: R24 := mem[#14 + 8, el]:u64
00000556: R29 := mem[R31, el]:u64
0000055b: R30 := mem[R31 + 8, el]:u64
0000055f: R31 := R31 + 0x40
00000564: call R30 with noreturn

000008b3: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008c9: __libc_start_main_main :: in u64 = R0
000008ca: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008cb: __libc_start_main_arg3 :: in out u64 = R2
000008cc: __libc_start_main_auxv :: in out u64 = R3
000008cd: __libc_start_main_result :: out u32 = low:32[R0]

000002b0:
000006f6: R16 := 0x10000
000006fd: R17 := mem[R16 + 0xFA8, el]:u64
00000703: R16 := R16 + 0xFA8
00000708: call R17 with noreturn

000008b4: sub _fini(_fini_result)
000008ce: _fini_result :: out u32 = low:32[R0]

0000002e:
00000032: #0 := R31 - 0x10
00000038: mem := mem with [#0, el]:u64 <- R29
0000003e: mem := mem with [#0 + 8, el]:u64 <- R30
00000042: R31 := #0
00000048: R29 := R31
0000004f: R29 := mem[R31, el]:u64
00000054: R30 := mem[R31 + 8, el]:u64
00000058: R31 := R31 + 0x10
0000005d: call R30 with noreturn

000008b5: sub _init(_init_result)
000008cf: _init_result :: out u32 = low:32[R0]

000004fa:
000007d6: #18 := R31 - 0x10
000007dc: mem := mem with [#18, el]:u64 <- R29
000007e2: mem := mem with [#18 + 8, el]:u64 <- R30
000007e6: R31 := #18
000007ec: R29 := R31
000007f1: R30 := 0x5A4
000007f3: call @call_weak_fn with return %000007f5

000007f5:
000007fa: R29 := mem[R31, el]:u64
000007ff: R30 := mem[R31 + 8, el]:u64
00000803: R31 := R31 + 0x10
00000808: call R30 with noreturn

000008b6: sub _start(_start_result)
000008d0: _start_result :: out u32 = low:32[R0]

00000265:
00000268: R29 := 0
0000026d: R30 := 0
00000273: R5 := R0
0000027a: R1 := mem[R31, el]:u64
00000280: R2 := R31 + 8
00000286: R6 := R31
0000028b: R0 := 0x10000
00000292: R0 := mem[R0 + 0xFF0, el]:u64
00000297: R3 := 0x10000
0000029e: R3 := mem[R3 + 0xFE8, el]:u64
000002a3: R4 := 0x10000
000002aa: R4 := mem[R4 + 0xFC8, el]:u64
000002af: R30 := 0x644
000002b2: call @__libc_start_main with return %000002b4

000002b4:
000002b7: R30 := 0x648
000002ba: call @abort with return %000008b7

000008b7:
000008b8: call @call_weak_fn with noreturn

000008b9: sub abort()


000002b8:
00000722: R16 := 0x10000
00000729: R17 := mem[R16 + 0xFB8, el]:u64
0000072f: R16 := R16 + 0xFB8
00000734: call R17 with noreturn

000008ba: sub call_weak_fn(call_weak_fn_result)
000008d1: call_weak_fn_result :: out u32 = low:32[R0]

000002bc:
000002bf: R0 := 0x10000
000002c6: R0 := mem[R0 + 0xFE0, el]:u64
000002cc: when R0 = 0 goto %000002ca
000008bb: goto %0000063f

000002ca:
000002d2: call R30 with noreturn

0000063f:
00000642: goto @__gmon_start__

00000640:
0000070c: R16 := 0x10000
00000713: R17 := mem[R16 + 0xFB0, el]:u64
00000719: R16 := R16 + 0xFB0
0000071e: call R17 with noreturn

000008bc: sub deregister_tm_clones(deregister_tm_clones_result)
000008d2: deregister_tm_clones_result :: out u32 = low:32[R0]

000002d6:
000002d9: R0 := 0x11000
000002df: R0 := R0 + 0x10
000002e4: R1 := 0x11000
000002ea: R1 := R1 + 0x10
000002f0: #1 := ~R0
000002f5: #2 := R1 + ~R0 + 1
000002fb: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
00000301: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
00000305: ZF := #2 = 0
00000309: NF := 63:63[#2]
0000030f: when ZF goto %0000030d
000008bd: goto %00000621

00000621:
00000624: R1 := 0x10000
0000062b: R1 := mem[R1 + 0xFD0, el]:u64
00000630: when R1 = 0 goto %0000030d
000008be: goto %00000634

0000030d:
00000315: call R30 with noreturn

00000634:
00000638: R16 := R1
0000063d: call R16 with noreturn

000008bf: sub frame_dummy(frame_dummy_result)
000008d3: frame_dummy_result :: out u32 = low:32[R0]

000003c6:
000003c8: call @register_tm_clones with noreturn

000008c0: sub main(main_argc, main_argv, main_result)
000008d4: main_argc :: in u32 = low:32[R0]
000008d5: main_argv :: in out u64 = R1
000008d6: main_result :: out u32 = low:32[R0]

000003ca:
000003cd: R0 := 0x11000
000003d3: R0 := R0 + 0x14
000003da: mem := mem with [R0, el]:u32 <- 0
000003df: R0 := 0x11000
000003e5: R0 := R0 + 0x14
000003ec: R0 := pad:64[mem[R0, el]:u32]
000003f2: R1 := pad:64[31:0[R0] + 1]
000003f7: R0 := 0x11000
000003fd: R0 := R0 + 0x14
00000405: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000040a: R0 := 0x11000
00000410: R0 := R0 + 0x1C
00000417: R1 := pad:64[mem[R0, el]:u32]
0000041c: R0 := 0x11000
00000422: R0 := R0 + 0x18
0000042a: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000042f: R0 := 0x11000
00000435: R0 := R0 + 0x18
0000043c: mem := mem with [R0, el]:u32 <- 0
00000441: R0 := 0x11000
00000447: R0 := R0 + 0x14
0000044e: R0 := pad:64[mem[R0, el]:u32]
00000454: R1 := pad:64[31:0[R0] + 1]
00000459: R0 := 0x11000
0000045f: R0 := R0 + 0x14
00000467: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000046c: R0 := 0
00000471: call R30 with noreturn

000008c1: sub register_tm_clones(register_tm_clones_result)
000008d7: register_tm_clones_result :: out u32 = low:32[R0]

00000317:
0000031a: R0 := 0x11000
00000320: R0 := R0 + 0x10
00000325: R1 := 0x11000
0000032b: R1 := R1 + 0x10
00000332: R1 := R1 + ~R0 + 1
00000339: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000340: R1 := R2 + (R1 ~>> 3)
00000346: #3 := ~(R1 ~>> 1)
0000034a: #4 := ~(R1 ~>> 1) + 1
0000034f: VF := extend:65[#4] <> extend:65[#3] + 1
00000354: CF := pad:65[#4] <> pad:65[#3] + 1
00000358: ZF := #4 = 0
0000035c: NF := 63:63[#4]
00000364: R1 :=

          >> 1 | R1 << 0x3F]
0000036a: when ZF goto %00000368
000008c2: goto %00000603

00000603:
00000606: R2 := 0x10000
0000060d: R2 := mem[R2 + 0xFF8, el]:u64
00000612: when R2 = 0 goto %00000368
000008c3: goto %00000616

00000368:
00000370: call R30 with noreturn

00000616:
0000061a: R16 := R2
0000061f: call R16 with noreturn
