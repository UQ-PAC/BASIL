00000928: program
000008ec: sub __cxa_finalize(__cxa_finalize_result)
00000929: __cxa_finalize_result :: out u32 = low:32[R0]

00000629:
0000071b: R16 := 0x10000
00000723: R17 := mem[R16 + 0xFA0, el]:u64
0000072a: R16 := R16 + 0xFA0
0000072f: call R17 with noreturn

000008ed: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000092a: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000377:
0000037f: mem := mem with [R31 - 0x20, el]:u64 <- R29
00000383: mem := mem with [R31 - 0x18, el]:u64 <- R30
00000386: R31 := R31 - 0x20
0000038d: R29 := R31
00000395: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000039b: R19 := 0x11000
000003a4: R0 := pad:64[mem[R19 + 0x10]]
000003b0: #28 := ~31:0[R0] = 0
000003aa: when #28 goto %000003a8
0000091b: goto %000005e7

000005e7:
000005eb: R0 := 0x10000
000005f3: R0 := mem[R0 + 0xFD8, el]:u64
000005ff: #77 := R0 = 0
000005f9: when #77 goto %000005f7
0000091c: goto %00000617

00000617:
0000061b: R0 := 0x11000
00000623: R0 := mem[R0 + 8, el]:u64
00000628: R30 := 0x700
0000062b: call @__cxa_finalize with return %000005f7

000005f7:
00000604: R30 := 0x704
00000606: call @deregister_tm_clones with return %00000608

00000608:
0000060d: R0 := 1
00000615: mem := mem with [R19 + 0x10] <- low:8[31:0[R0]]
0000091d: goto %000003a8

000003a8:
000003b8: R19 := mem[R31 + 0x10, el]:u64
000003c2: R29 := mem[R31, el]:u64
000003c6: R30 := mem[R31 + 8, el]:u64
000003c9: R31 := R31 + 0x20
000003ce: call R30 with noreturn

000008f1: sub __libc_csu_fini(__libc_csu_fini_result)
0000092b: __libc_csu_fini_result :: out u32 = low:32[R0]

00000581:
00000584: call R30 with noreturn

000008f2: sub __libc_csu_init(__libc_csu_init_result)
0000092c: __libc_csu_init_result :: out u32 = low:32[R0]

0000049d:
000004a5: mem := mem with [R31 - 0x40, el]:u64 <- R29
000004a9: mem := mem with [R31 - 0x38, el]:u64 <- R30
000004ac: R31 := R31 - 0x40
000004b3: R29 := R31
000004bc: mem := mem with [R31, el]:u64 <- R31 + 0x20
000004c0: mem := mem with [R31, el]:u64 <- R31 + 0x28
000004c6: R20 := 0x10000
000004cd: R20 := R20 + 0xD90
000004d6: mem := mem with [R31, el]:u64 <- R31 + 0x40
000004da: mem := mem with [R31, el]:u64 <- R31 + 0x48
000004e0: R21 := 0x10000
000004e7: R21 := R21 + 0xD88
000004ef: R20 := R20 - R21
000004f8: R22 := 31:0[R0]
00000501: mem := mem with [R31, el]:u64 <- R31 + 0x60
00000505: mem := mem with [R31, el]:u64 <- R31 + 0x68
0000050d: R23 := R1
00000515: R24 := R2
0000051a: R30 := 0x7C8
0000051d: call @_init with return %0000051f

0000051f:
00000525: #54 := ~(R20 ~>> 3) + 1
00000529: NF := 63:63[#54]
0000052c: VF := ~63:63[~(R20 ~>> 3)] & 63:63[#54]
0000052f: ZF := #54 = 0
00000532: CF := 63:63[~(R20 ~>> 3)] & ~63:63[#54]
00000540: #56 := ZF
0000053a: when #56 goto %00000538
0000091e: goto %00000586

00000586:
0000058b: R20 := R20 >> 3
00000591: R19 := 0
0000091f: goto %00000593

00000593:
0000059a: R3 := mem[R21 + (R19 << 3), el]:u64
000005a2: R2 := R24
000005a9: R19 := R19 + 1
000005b1: R1 := R23
000005ba: R0 := 31:0[R22]
000005c0: R30 := 0x7F0
000005c2: call R3 with return %000005c4

000005c4:
000005ca: #74 := 1 + ~R19 + R20
000005ce: NF := 63:63[#74]
000005d1: VF := 63:63[R20] & 63:63[~R19] & ~63:63[#74] | ~63:63[R20] &
          ~63:63[~R19] & 63:63[#74]
000005d4: ZF := #74 = 0
000005d7: CF := 63:63[R20] & 63:63[~R19] | 63:63[~R19] & ~63:63[#74] |
          63:63[R20] & ~63:63[#74]
000005e4: #76 := ~ZF <> 0
000005de: when #76 goto %00000593
00000920: goto %00000538

00000538:
00000549: R19 := mem[R31 + 0x10, el]:u64
0000054d: R20 := mem[R31 + 0x18, el]:u64
00000556: R21 := mem[R31 + 0x20, el]:u64
0000055a: R22 := mem[R31 + 0x28, el]:u64
00000563: R23 := mem[R31 + 0x30, el]:u64
00000567: R24 := mem[R31 + 0x38, el]:u64
00000571: R29 := mem[R31, el]:u64
00000575: R30 := mem[R31 + 8, el]:u64
00000578: R31 := R31 + 0x40
0000057d: call R30 with noreturn

000008f6: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000092d: __libc_start_main_main :: in u64 = R0
0000092e: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000092f: __libc_start_main_arg3 :: in out u64 = R2
00000930: __libc_start_main_auxv :: in out u64 = R3
00000931: __libc_start_main_result :: out u32 = low:32[R0]

000002a8:
00000734: R16 := 0x10000
0000073c: R17 := mem[R16 + 0xFA8, el]:u64
00000743: R16 := R16 + 0xFA8
00000748: call R17 with noreturn

000008f7: sub _fini(_fini_result)
00000932: _fini_result :: out u32 = low:32[R0]

0000001c:
00000024: mem := mem with [R31 - 0x10, el]:u64 <- R29
00000028: mem := mem with [R31 - 8, el]:u64 <- R30
0000002b: R31 := R31 - 0x10
00000032: R29 := R31
0000003c: R29 := mem[R31, el]:u64
00000040: R30 := mem[R31 + 8, el]:u64
00000043: R31 := R31 + 0x10
00000048: call R30 with noreturn

000008f8: sub _init(_init_result)
00000933: _init_result :: out u32 = low:32[R0]

0000051b:
00000820: mem := mem with [R31 - 0x10, el]:u64 <- R29
00000824: mem := mem with [R31 - 8, el]:u64 <- R30
00000827: R31 := R31 - 0x10
0000082e: R29 := R31
00000833: R30 := 0x5A4
00000835: call @call_weak_fn with return %00000837

00000837:
0000083f: R29 := mem[R31, el]:u64
00000843: R30 := mem[R31 + 8, el]:u64
00000846: R31 := R31 + 0x10
0000084b: call R30 with noreturn

000008f9: sub _start(_start_result)
00000934: _start_result :: out u32 = low:32[R0]

00000250:
00000254: R29 := 0
0000025a: R30 := 0
00000262: R5 := R0
0000026a: R1 := mem[R31, el]:u64
00000271: R2 := R31 + 8
00000278: R6 := R31
0000027e: R0 := 0x10000
00000286: R0 := mem[R0 + 0xFF0, el]:u64
0000028c: R3 := 0x10000
00000294: R3 := mem[R3 + 0xFE8, el]:u64
0000029a: R4 := 0x10000
000002a2: R4 := mem[R4 + 0xFC8, el]:u64
000002a7: R30 := 0x644
000002aa: call @__libc_start_main with return %000002ac

000002ac:
000002af: R30 := 0x648
000002b2: call @abort with return %00000921

00000921:
00000922: call @call_weak_fn with noreturn

000008fc: sub abort()


000002b0:
00000766: R16 := 0x10000
0000076e: R17 := mem[R16 + 0xFB8, el]:u64
00000775: R16 := R16 + 0xFB8
0000077a: call R17 with noreturn

000008fd: sub call_weak_fn(call_weak_fn_result)
00000935: call_weak_fn_result :: out u32 = low:32[R0]

000002b4:
000002b8: R0 := 0x10000
000002c0: R0 := mem[R0 + 0xFE0, el]:u64
000002cc: #5 := R0 = 0
000002c6: when #5 goto %000002c4
00000923: goto %0000067b

000002c4:
000002d1: call R30 with noreturn

0000067b:
0000067e: goto @__gmon_start__

0000067c:
0000074d: R16 := 0x10000
00000755: R17 := mem[R16 + 0xFB0, el]:u64
0000075c: R16 := R16 + 0xFB0
00000761: call R17 with noreturn

000008ff: sub deregister_tm_clones(deregister_tm_clones_result)
00000936: deregister_tm_clones_result :: out u32 = low:32[R0]

000002d5:
000002d9: R0 := 0x11000
000002e0: R0 := R0 + 0x10
000002e6: R1 := 0x11000
000002ed: R1 := R1 + 0x10
000002f5: #9 := 1 + ~R0 + R1
000002f9: NF := 63:63[#9]
000002fc: VF := 63:63[R1] & 63:63[~R0] & ~63:63[#9] | ~63:63[R1] &
          ~63:63[~R0] & 63:63[#9]
000002ff: ZF := #9 = 0
00000302: CF := 63:63[R1] & 63:63[~R0] | 63:63[~R0] & ~63:63[#9] | 63:63[R1]
          & ~63:63[#9]
00000310: #11 := ZF
0000030a: when #11 goto %00000308
00000924: goto %00000654

00000654:
00000658: R1 := 0x10000
00000660: R1 := mem[R1 + 0xFD0, el]:u64
0000066b: #82 := R1 = 0
00000665: when #82 goto %00000308
00000925: goto %0000066e

00000308:
00000315: call R30 with noreturn

0000066e:
00000674: R16 := R1
00000679: call R16 with noreturn

00000902: sub frame_dummy(frame_dummy_result)
00000937: frame_dummy_result :: out u32 = low:32[R0]

000003d0:
000003d2: call @register_tm_clones with noreturn

00000903: sub main(main_argc, main_argv, main_result)
00000938: main_argc :: in u32 = low:32[R0]
00000939: main_argv :: in out u64 = R1
0000093a: main_result :: out u32 = low:32[R0]

000003d4:
000003d8: R0 := 0x11000
000003df: R0 := R0 + 0x14
000003e7: mem := mem with [R0, el]:u32 <- 0
000003ed: R0 := 0x11000
000003f4: R0 := R0 + 0x14
000003fd: R0 := pad:64[mem[R0, el]:u32]
00000405: R1 := extend:64[31:0[R0]] + 1
0000040b: R0 := 0x11000
00000412: R0 := R0 + 0x14
0000041a: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000420: R0 := 0x11000
00000427: R0 := R0 + 0x1C
00000430: R1 := pad:64[mem[R0, el]:u32]
00000436: R0 := 0x11000
0000043d: R0 := R0 + 0x18
00000445: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000044b: R0 := 0x11000
00000452: R0 := R0 + 0x18
0000045a: mem := mem with [R0, el]:u32 <- 0
00000460: R0 := 0x11000
00000467: R0 := R0 + 0x14
00000470: R0 := pad:64[mem[R0, el]:u32]
00000478: R1 := extend:64[31:0[R0]] + 1
0000047e: R0 := 0x11000
00000485: R0 := R0 + 0x14
0000048d: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000494: R0 := 0
00000499: call R30 with noreturn

00000904: sub register_tm_clones(register_tm_clones_result)
0000093b: register_tm_clones_result :: out u32 = low:32[R0]

00000317:
0000031b: R0 := 0x11000
00000322: R0 := R0 + 0x10
00000328: R1 := 0x11000
0000032f: R1 := R1 + 0x10
00000337: R1 := R1 - R0
0000033e: R2 := R1 >> 0x3F
00000346: R1 := R2 + (R1 ~>> 3)
0000034e: #22 := ~(R1 ~>> 1) + 1
00000352: NF := 63:63[#22]
00000355: VF := ~63:63[~(R1 ~>> 1)] & 63:63[#22]
00000358: ZF := #22 = 0
0000035b: CF := 63:63[~(R1 ~>> 1)] & ~63:63[#22]
00000364: R1 := R1 >> 1
00000370: #25 := ZF
0000036a: when #25 goto %00000368
00000926: goto %0000062d

0000062d:
00000631: R2 := 0x10000
00000639: R2 := mem[R2 + 0xFF8, el]:u64
00000644: #78 := R2 = 0
0000063e: when #78 goto %00000368
00000927: goto %00000647

00000368:
00000375: call R30 with noreturn

00000647:
0000064d: R16 := R2
00000652: call R16 with noreturn
