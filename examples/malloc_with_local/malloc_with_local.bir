00000761: program
00000749: sub .plt(\.plt_result)
00000762: \.plt_result :: out u32 = low:32[R0]

000005d1:
000005d5: #5 := R31 - 0x10
000005db: mem := mem with [#5, el]:u64 <- R16
000005e1: mem := mem with [#5 + 8, el]:u64 <- R30
000005e5: R31 := #5
000005ea: R16 := 0x10000
000005f1: R17 := mem[R16 + 0xF90, el]:u64
000005f7: R16 := R16 + 0xF90
000005fc: call R17 with noreturn

0000074a: sub __cxa_finalize(__cxa_finalize_result)
00000763: __cxa_finalize_result :: out u32 = low:32[R0]

00000524:
0000061c: R16 := 0x10000
00000623: R17 := mem[R16 + 0xFA0, el]:u64
00000629: R16 := R16 + 0xFA0
0000062e: call R17 with noreturn

0000074b: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000764: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000322:
00000326: #3 := R31 - 0x20
0000032c: mem := mem with [#3, el]:u64 <- R29
00000332: mem := mem with [#3 + 8, el]:u64 <- R30
00000336: R31 := #3
0000033c: R29 := R31
00000344: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000349: R19 := 0x11000
00000350: R0 := pad:64[mem[R19 + 0x10]]
00000357: when 31:0[R0] <> 0 goto %00000355
0000074c: goto %000004ed

000004ed:
000004f0: R0 := 0x10000
000004f7: R0 := mem[R0 + 0xFC8, el]:u64
000004fd: when R0 = 0 goto %000004fb
0000074d: goto %00000514

00000514:
00000517: R0 := 0x11000
0000051e: R0 := mem[R0 + 8, el]:u64
00000523: R30 := 0x7B0
00000526: call @__cxa_finalize with return %000004fb

000004fb:
00000503: R30 := 0x7B4
00000505: call @deregister_tm_clones with return %00000507

00000507:
0000050a: R0 := 1
00000512: mem := mem with [R19 + 0x10] <- 7:0[R0]
0000074e: goto %00000355

00000355:
0000035f: R19 := mem[R31 + 0x10, el]:u64
00000366: R29 := mem[R31, el]:u64
0000036b: R30 := mem[R31 + 8, el]:u64
0000036f: R31 := R31 + 0x20
00000374: call R30 with noreturn

0000074f: sub __gmon_start__(__gmon_start___result)
00000765: __gmon_start___result :: out u32 = low:32[R0]

00000565:
00000632: R16 := 0x10000
00000639: R17 := mem[R16 + 0xFA8, el]:u64
0000063f: R16 := R16 + 0xFA8
00000644: call R17 with noreturn

00000750: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000766: __libc_start_main_main :: in u64 = R0
00000767: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000768: __libc_start_main_arg3 :: in out u64 = R2
00000769: __libc_start_main_auxv :: in out u64 = R3
0000076a: __libc_start_main_result :: out u32 = low:32[R0]

0000027b:
00000606: R16 := 0x10000
0000060d: R17 := mem[R16 + 0xF98, el]:u64
00000613: R16 := R16 + 0xF98
00000618: call R17 with noreturn

00000751: sub _fini(_fini_result)
0000076b: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000752: sub _init(_init_result)
0000076c: _init_result :: out u32 = low:32[R0]

00000676:
0000067c: #6 := R31 - 0x10
00000682: mem := mem with [#6, el]:u64 <- R29
00000688: mem := mem with [#6 + 8, el]:u64 <- R30
0000068c: R31 := #6
00000692: R29 := R31
00000697: R30 := 0x638
00000699: call @call_weak_fn with return %0000069b

0000069b:
000006a0: R29 := mem[R31, el]:u64
000006a5: R30 := mem[R31 + 8, el]:u64
000006a9: R31 := R31 + 0x10
000006ae: call R30 with noreturn

00000753: sub _start(_start_result)
0000076d: _start_result :: out u32 = low:32[R0]

0000023c:
00000241: R29 := 0
00000246: R30 := 0
0000024c: R5 := R0
00000253: R1 := mem[R31, el]:u64
00000259: R2 := R31 + 8
0000025f: R6 := R31
00000264: R0 := 0x10000
0000026b: R0 := mem[R0 + 0xFE8, el]:u64
00000270: R3 := 0
00000275: R4 := 0
0000027a: R30 := 0x6F0
0000027d: call @__libc_start_main with return %0000027f

0000027f:
00000282: R30 := 0x6F4
00000285: call @abort with return %00000754

00000754:
00000755: call @call_weak_fn with noreturn

00000756: sub abort()


00000283:
00000648: R16 := 0x10000
0000064f: R17 := mem[R16 + 0xFB0, el]:u64
00000655: R16 := R16 + 0xFB0
0000065a: call R17 with noreturn

00000757: sub call_weak_fn(call_weak_fn_result)
0000076e: call_weak_fn_result :: out u32 = low:32[R0]

00000287:
0000028a: R0 := 0x10000
00000291: R0 := mem[R0 + 0xFD8, el]:u64
00000297: when R0 = 0 goto %00000295
00000758: goto %00000564

00000295:
0000029d: call R30 with noreturn

00000564:
00000567: call @__gmon_start__ with noreturn

00000759: sub deregister_tm_clones(deregister_tm_clones_result)
0000076f: deregister_tm_clones_result :: out u32 = low:32[R0]

000002a3:
000002a6: R0 := 0x11000
000002ac: R0 := R0 + 0x10
000002b1: R1 := 0x11000
000002b7: R1 := R1 + 0x10
000002bd: #1 := ~R0
000002c2: #2 := R1 + ~R0
000002c8: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002ce: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002d2: ZF := #2 + 1 = 0
000002d6: NF := 63:63[#2 + 1]
000002dc: when ZF goto %000002da
0000075a: goto %00000546

00000546:
00000549: R1 := 0x10000
00000550: R1 := mem[R1 + 0xFC0, el]:u64
00000555: when R1 = 0 goto %000002da
0000075b: goto %00000559

000002da:
000002e2: call R30 with noreturn

00000559:
0000055d: R16 := R1
00000562: call R16 with noreturn

0000075c: sub frame_dummy(frame_dummy_result)
00000770: frame_dummy_result :: out u32 = low:32[R0]

0000037a:
0000037c: call @register_tm_clones with noreturn

0000075d: sub main(main_argc, main_argv, main_result)
00000771: main_argc :: in u32 = low:32[R0]
00000772: main_argv :: in out u64 = R1
00000773: main_result :: out u32 = low:32[R0]

0000037e:
00000382: #4 := R31 - 0x30
00000388: mem := mem with [#4, el]:u64 <- R29
0000038e: mem := mem with [#4 + 8, el]:u64 <- R30
00000392: R31 := #4
00000398: R29 := R31
0000039d: R0 := 1
000003a2: R1 := 0x10000
000003a9: R1 := mem[R1 + 0xFD0, el]:u64
000003ae: R30 := 0x7EC
000003b1: call R1 with return %000003b3

000003b3:
000003b9: mem := mem with [R31 + 0x20, el]:u64 <- R0
000003be: R0 := 4
000003c3: R1 := 0x10000
000003ca: R1 := mem[R1 + 0xFD0, el]:u64
000003cf: R30 := 0x800
000003d2: call R1 with return %000003d4

000003d4:
000003da: mem := mem with [R31 + 0x28, el]:u64 <- R0
000003df: R0 := 0xA
000003e7: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000003ee: R0 := mem[R31 + 0x20, el]:u64
000003f3: R1 := 0x41
000003fb: mem := mem with [R0] <- 7:0[R1]
00000402: R0 := mem[R31 + 0x28, el]:u64
00000407: R1 := 0x2A
0000040f: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000416: R0 := mem[R31 + 0x20, el]:u64
0000041d: R0 := pad:64[mem[R0]]
00000423: R1 := pad:64[31:0[R0]]
00000428: R0 := 0
0000042e: R0 := R0 + 0x8C8
00000433: R2 := 0x10000
0000043a: R2 := mem[R2 + 0xFF8, el]:u64
0000043f: R30 := 0x844
00000442: call R2 with return %00000444

00000444:
00000449: R0 := mem[R31 + 0x28, el]:u64
00000450: R0 := pad:64[mem[R0, el]:u32]
00000456: R1 := pad:64[31:0[R0]]
0000045b: R0 := 0
00000461: R0 := R0 + 0x8E0
00000466: R2 := 0x10000
0000046d: R2 := mem[R2 + 0xFF8, el]:u64
00000472: R30 := 0x864
00000475: call R2 with return %00000477

00000477:
0000047c: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
00000481: R0 := 0
00000487: R0 := R0 + 0x8F0
0000048c: R2 := 0x10000
00000493: R2 := mem[R2 + 0xFF8, el]:u64
00000498: R30 := 0x87C
0000049b: call R2 with return %0000049d

0000049d:
000004a2: R0 := mem[R31 + 0x20, el]:u64
000004a7: R1 := 0x10000
000004ae: R1 := mem[R1 + 0xFE0, el]:u64
000004b3: R30 := 0x88C
000004b6: call R1 with return %000004b8

000004b8:
000004bd: R0 := mem[R31 + 0x28, el]:u64
000004c2: R1 := 0x10000
000004c9: R1 := mem[R1 + 0xFE0, el]:u64
000004ce: R30 := 0x89C
000004d1: call R1 with return %000004d3

000004d3:
000004d6: R0 := 0
000004dd: R29 := mem[R31, el]:u64
000004e2: R30 := mem[R31 + 8, el]:u64
000004e6: R31 := R31 + 0x30
000004eb: call R30 with noreturn

0000075e: sub register_tm_clones(register_tm_clones_result)
00000774: register_tm_clones_result :: out u32 = low:32[R0]

000002e4:
000002e7: R0 := 0x11000
000002ed: R0 := R0 + 0x10
000002f2: R1 := 0x11000
000002f8: R1 := R1 + 0x10
000002ff: R1 := R1 + ~R0 + 1
00000305: R2 := 0.63:63[R1]
0000030c: R1 := R2 + (R1 ~>> 3)
00000312: R1 := extend:64[63:1[R1]]
00000318: when R1 = 0 goto %00000316
0000075f: goto %00000528

00000528:
0000052b: R2 := 0x10000
00000532: R2 := mem[R2 + 0xFF0, el]:u64
00000537: when R2 = 0 goto %00000316
00000760: goto %0000053b

00000316:
0000031e: call R30 with noreturn

0000053b:
0000053f: R16 := R2
00000544: call R16 with noreturn
