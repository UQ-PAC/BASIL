000007d2: program
000007b7: sub __cxa_finalize(__cxa_finalize_result)
000007d3: __cxa_finalize_result :: out u32 = low:32[R0]

00000535:
00000616: R16 := 0x10000
0000061d: R17 := mem[R16 + 0xFA0, el]:u64
00000623: R16 := R16 + 0xFA0
00000628: call R17 with noreturn

000007b8: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000007d4: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000322:
00000326: #5 := R31 - 0x20
0000032c: mem := mem with [#5, el]:u64 <- R29
00000332: mem := mem with [#5 + 8, el]:u64 <- R30
00000336: R31 := #5
0000033c: R29 := R31
00000344: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000349: R19 := 0x11000
00000350: R0 := pad:64[mem[R19 + 0x10]]
00000357: when 31:0[R0] <> 0 goto %00000355
000007b9: goto %000004fe

000004fe:
00000501: R0 := 0x10000
00000508: R0 := mem[R0 + 0xFD8, el]:u64
0000050e: when R0 = 0 goto %0000050c
000007ba: goto %00000525

00000525:
00000528: R0 := 0x11000
0000052f: R0 := mem[R0 + 8, el]:u64
00000534: R30 := 0x700
00000537: call @__cxa_finalize with return %0000050c

0000050c:
00000514: R30 := 0x704
00000516: call @deregister_tm_clones with return %00000518

00000518:
0000051b: R0 := 1
00000523: mem := mem with [R19 + 0x10] <- 7:0[R0]
000007bb: goto %00000355

00000355:
0000035f: R19 := mem[R31 + 0x10, el]:u64
00000366: R29 := mem[R31, el]:u64
0000036b: R30 := mem[R31 + 8, el]:u64
0000036f: R31 := R31 + 0x20
00000374: call R30 with noreturn

000007bc: sub __libc_csu_fini(__libc_csu_fini_result)
000007d5: __libc_csu_fini_result :: out u32 = low:32[R0]

0000049e:
000004a1: call R30 with noreturn

000007bd: sub __libc_csu_init(__libc_csu_init_result)
000007d6: __libc_csu_init_result :: out u32 = low:32[R0]

000003ab:
000003af: #6 := R31 - 0x40
000003b5: mem := mem with [#6, el]:u64 <- R29
000003bb: mem := mem with [#6 + 8, el]:u64 <- R30
000003bf: R31 := #6
000003c5: R29 := R31
000003cb: #7 := R31 + 0x10
000003d1: mem := mem with [#7, el]:u64 <- R19
000003d7: mem := mem with [#7 + 8, el]:u64 <- R20
000003dc: R20 := 0x10000
000003e2: R20 := R20 + 0xD90
000003e8: #8 := R31 + 0x20
000003ee: mem := mem with [#8, el]:u64 <- R21
000003f4: mem := mem with [#8 + 8, el]:u64 <- R22
000003f9: R21 := 0x10000
000003ff: R21 := R21 + 0xD88
00000406: R20 := R20 + ~R21 + 1
0000040c: R22 := pad:64[31:0[R0]]
00000412: #9 := R31 + 0x30
00000418: mem := mem with [#9, el]:u64 <- R23
0000041e: mem := mem with [#9 + 8, el]:u64 <- R24
00000424: R23 := R1
0000042a: R24 := R2
0000042f: R30 := 0x778
00000432: call @_init with return %00000434

00000434:
00000438: #10 := ~(R20 ~>> 3)
0000043c: #11 := ~(R20 ~>> 3) + 1
00000441: VF := extend:65[#11] <> extend:65[#10] + 1
00000446: CF := pad:65[#11] <> pad:65[#10] + 1
0000044a: ZF := #11 = 0
0000044e: NF := 63:63[#11]
00000454: when ZF goto %00000452
000007be: goto %000004a3

000004a3:
000004a9: R20 :=

          >> 3 | R20 << 0x3D]
000004ae: R19 := 0
000007bf: goto %000004b0

000004b0:
000004b6: R3 := mem[R21 + (60:0[R19].0), el]:u64
000004bc: R2 := R24
000004c2: R19 := R19 + 1
000004c8: R1 := R23
000004ce: R0 := pad:64[31:0[R22]]
000004d3: R30 := 0x7A0
000004d6: call R3 with return %000004d8

000004d8:
000004dc: #15 := ~R19
000004e1: #16 := R20 + ~R19 + 1
000004e7: VF := extend:65[#16] <> extend:65[R20] + extend:65[#15] + 1
000004ed: CF := pad:65[#16] <> pad:65[R20] + pad:65[#15] + 1
000004f1: ZF := #16 = 0
000004f5: NF := 63:63[#16]
000004fa: when ZF <> 1 goto %000004b0
000007c0: goto %00000452

00000452:
0000045b: #12 := R31 + 0x10
00000460: R19 := mem[#12, el]:u64
00000465: R20 := mem[#12 + 8, el]:u64
0000046b: #13 := R31 + 0x20
00000470: R21 := mem[#13, el]:u64
00000475: R22 := mem[#13 + 8, el]:u64
0000047b: #14 := R31 + 0x30
00000480: R23 := mem[#14, el]:u64
00000485: R24 := mem[#14 + 8, el]:u64
0000048c: R29 := mem[R31, el]:u64
00000491: R30 := mem[R31 + 8, el]:u64
00000495: R31 := R31 + 0x40
0000049a: call R30 with noreturn

000007c1: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000007d7: __libc_start_main_main :: in u64 = R0
000007d8: __libc_start_main_arg2 :: in u32 = low:32[R1]
000007d9: __libc_start_main_arg3 :: in out u64 = R2
000007da: __libc_start_main_auxv :: in out u64 = R3
000007db: __libc_start_main_result :: out u32 = low:32[R0]

00000260:
0000062c: R16 := 0x10000
00000633: R17 := mem[R16 + 0xFA8, el]:u64
00000639: R16 := R16 + 0xFA8
0000063e: call R17 with noreturn

000007c2: sub _fini(_fini_result)
000007dc: _fini_result :: out u32 = low:32[R0]

0000002e:
00000032: #0 := R31 - 0x10
00000038: mem := mem with [#0, el]:u64 <- R29
0000003e: mem := mem with [#0 + 8, el]:u64 <- R30
00000042: R31 := #0
00000048: R29 := R31
0000004f: R29 := mem[R31, el]:u64
00000054: R30 := mem[R31 + 8, el]:u64
00000058: R31 := R31 + 0x10
0000005d: call R30 with noreturn

000007c3: sub _init(_init_result)
000007dd: _init_result :: out u32 = low:32[R0]

00000430:
000006f8: #18 := R31 - 0x10
000006fe: mem := mem with [#18, el]:u64 <- R29
00000704: mem := mem with [#18 + 8, el]:u64 <- R30
00000708: R31 := #18
0000070e: R29 := R31
00000713: R30 := 0x5A4
00000715: call @call_weak_fn with return %00000717

00000717:
0000071c: R29 := mem[R31, el]:u64
00000721: R30 := mem[R31 + 8, el]:u64
00000725: R31 := R31 + 0x10
0000072a: call R30 with noreturn

000007c4: sub _start(_start_result)
000007de: _start_result :: out u32 = low:32[R0]

00000215:
00000218: R29 := 0
0000021d: R30 := 0
00000223: R5 := R0
0000022a: R1 := mem[R31, el]:u64
00000230: R2 := R31 + 8
00000236: R6 := R31
0000023b: R0 := 0x10000
00000242: R0 := mem[R0 + 0xFF0, el]:u64
00000247: R3 := 0x10000
0000024e: R3 := mem[R3 + 0xFE8, el]:u64
00000253: R4 := 0x10000
0000025a: R4 := mem[R4 + 0xFC8, el]:u64
0000025f: R30 := 0x644
00000262: call @__libc_start_main with return %00000264

00000264:
00000267: R30 := 0x648
0000026a: call @abort with return %000007c5

000007c5:
000007c6: call @call_weak_fn with noreturn

000007c7: sub abort()


00000268:
00000658: R16 := 0x10000
0000065f: R17 := mem[R16 + 0xFB8, el]:u64
00000665: R16 := R16 + 0xFB8
0000066a: call R17 with noreturn

000007c8: sub call_weak_fn(call_weak_fn_result)
000007df: call_weak_fn_result :: out u32 = low:32[R0]

0000026c:
0000026f: R0 := 0x10000
00000276: R0 := mem[R0 + 0xFE0, el]:u64
0000027c: when R0 = 0 goto %0000027a
000007c9: goto %00000575

0000027a:
00000282: call R30 with noreturn

00000575:
00000578: goto @__gmon_start__

00000576:
00000642: R16 := 0x10000
00000649: R17 := mem[R16 + 0xFB0, el]:u64
0000064f: R16 := R16 + 0xFB0
00000654: call R17 with noreturn

000007ca: sub deregister_tm_clones(deregister_tm_clones_result)
000007e0: deregister_tm_clones_result :: out u32 = low:32[R0]

00000286:
00000289: R0 := 0x11000
0000028f: R0 := R0 + 0x10
00000294: R1 := 0x11000
0000029a: R1 := R1 + 0x10
000002a0: #1 := ~R0
000002a5: #2 := R1 + ~R0 + 1
000002ab: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002b1: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002b5: ZF := #2 = 0
000002b9: NF := 63:63[#2]
000002bf: when ZF goto %000002bd
000007cb: goto %00000557

00000557:
0000055a: R1 := 0x10000
00000561: R1 := mem[R1 + 0xFD0, el]:u64
00000566: when R1 = 0 goto %000002bd
000007cc: goto %0000056a

000002bd:
000002c5: call R30 with noreturn

0000056a:
0000056e: R16 := R1
00000573: call R16 with noreturn

000007cd: sub frame_dummy(frame_dummy_result)
000007e1: frame_dummy_result :: out u32 = low:32[R0]

00000376:
00000378: call @register_tm_clones with noreturn

000007ce: sub main(main_argc, main_argv, main_result)
000007e2: main_argc :: in u32 = low:32[R0]
000007e3: main_argv :: in out u64 = R1
000007e4: main_result :: out u32 = low:32[R0]

0000037a:
0000037d: R0 := 0x11000
00000383: R0 := R0 + 0x18
0000038a: R1 := pad:64[mem[R0, el]:u32]
0000038f: R0 := 0x11000
00000395: R0 := R0 + 0x14
0000039d: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003a2: R0 := 0
000003a7: call R30 with noreturn

000007cf: sub register_tm_clones(register_tm_clones_result)
000007e5: register_tm_clones_result :: out u32 = low:32[R0]

000002c7:
000002ca: R0 := 0x11000
000002d0: R0 := R0 + 0x10
000002d5: R1 := 0x11000
000002db: R1 := R1 + 0x10
000002e2: R1 := R1 + ~R0 + 1
000002e9: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
000002f0: R1 := R2 + (R1 ~>> 3)
000002f6: #3 := ~(R1 ~>> 1)
000002fa: #4 := ~(R1 ~>> 1) + 1
000002ff: VF := extend:65[#4] <> extend:65[#3] + 1
00000304: CF := pad:65[#4] <> pad:65[#3] + 1
00000308: ZF := #4 = 0
0000030c: NF := 63:63[#4]
00000314: R1 :=

          >> 1 | R1 << 0x3F]
0000031a: when ZF goto %00000318
000007d0: goto %00000539

00000539:
0000053c: R2 := 0x10000
00000543: R2 := mem[R2 + 0xFF8, el]:u64
00000548: when R2 = 0 goto %00000318
000007d1: goto %0000054c

00000318:
00000320: call R30 with noreturn

0000054c:
00000550: R16 := R2
00000555: call R16 with noreturn
