0000038b: program
00000359: sub __cxa_finalize(__cxa_finalize_result)
0000038c: __cxa_finalize_result :: out u32 = R0

000002a0:
000002fb: R16 := 0x10000
000002ff: R17 := mem[R16 + 0xFA0, el]:u64
00000303: R16 := R16 + 0xFA0
00000307: call R17 with noreturn

0000035a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000038d: __do_global_dtors_aux_result :: out u32 = R0

000000d9:
000000db: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000dd: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000df: R31 := R31 - 0x20
000000e3: R29 := R31
000000e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000eb: R19 := 0x11000
000000ef: #28 := pad:64[mem[R19 + 0x10]]
000000f1: R0 := 0
000000f3: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
000000fc: #29 := extract:31:0[R0] <> 0
000000f8: when #29 goto %000000f6
00000378: goto %00000275

00000275:
00000277: R0 := 0x10000
0000027b: R0 := mem[R0 + 0xFD8, el]:u64
00000284: #95 := R0 = 0
00000280: when #95 goto %0000027e
00000379: goto %00000295

00000295:
00000297: R0 := 0x11000
0000029b: R0 := mem[R0 + 8, el]:u64
0000029f: R30 := 0x700
000002a2: call @__cxa_finalize with return %0000027e

0000027e:
00000287: R30 := 0x704
00000289: call @deregister_tm_clones with return %0000028b

0000028b:
0000028d: R0 := 0
0000028f: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000293: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
0000037a: goto %000000f6

000000f6:
000000ff: R19 := mem[R31 + 0x10, el]:u64
00000103: R29 := mem[R31, el]:u64
00000105: R30 := mem[R31 + 8, el]:u64
00000107: R31 := R31 + 0x20
0000010b: call R30 with noreturn

0000035e: sub __libc_csu_fini(__libc_csu_fini_result)
0000038e: __libc_csu_fini_result :: out u32 = R0

0000020d:
0000020f: call R30 with noreturn

0000035f: sub __libc_csu_init(__libc_csu_init_result)
0000038f: __libc_csu_init_result :: out u32 = R0

0000018f:
00000191: mem := mem with [R31 - 0x40, el]:u64 <- R29
00000193: mem := mem with [R31 - 0x38, el]:u64 <- R30
00000195: R31 := R31 - 0x40
00000199: R29 := R31
0000019d: mem := mem with [R31, el]:u64 <- R31 + 0x20
0000019f: mem := mem with [R31, el]:u64 <- R31 + 0x28
000001a3: R20 := 0x10000
000001a7: R20 := R20 + 0xD90
000001ab: mem := mem with [R31, el]:u64 <- R31 + 0x40
000001ad: mem := mem with [R31, el]:u64 <- R31 + 0x48
000001b1: R21 := 0x10000
000001b5: R21 := R21 + 0xD88
000001b9: R20 := R20 - R21
000001bd: #54 := extract:31:0[R0]
000001bf: R22 := 0
000001c1: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#54]
000001c5: mem := mem with [R31, el]:u64 <- R31 + 0x60
000001c7: mem := mem with [R31, el]:u64 <- R31 + 0x68
000001cb: R23 := R1
000001cf: R24 := R2
000001d3: R30 := 0x7C0
000001d6: call @_init with return %000001d8

000001d8:
000001da: #65 := ~(R20 ~>> 3) + 1
000001dc: NF := extract:63:63[#65]
000001de: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#65]
000001e0: ZF := #65 = 0
000001e2: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#65]
000001eb: #67 := ZF
000001e7: when #67 goto %000001e5
0000037b: goto %00000212

00000212:
00000214: R20 := R20 >> 3
00000218: R19 := 0
0000037c: goto %0000021a

0000021a:
0000021c: R3 := mem[R21 + (R19 << 3), el]:u64
00000220: R2 := R24
00000224: R19 := R19 + 1
00000228: R1 := R23
0000022c: #82 := extract:31:0[R22]
0000022e: R0 := 0
00000230: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#82]
00000234: R30 := 0x7E8
00000236: call R3 with return %00000239

00000239:
0000023b: #86 := 1 + ~R19 + R20
0000023d: NF := extract:63:63[#86]
0000023f: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#86] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#86]
00000241: ZF := #86 = 0
00000243: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#86] | extract:63:63[R20] &
          ~extract:63:63[#86]
0000024b: #88 := ~ZF <> 0
00000247: when #88 goto %0000021a
0000037d: goto %000001e5

000001e5:
000001ee: R19 := mem[R31 + 0x10, el]:u64
000001f0: R20 := mem[R31 + 0x18, el]:u64
000001f4: R21 := mem[R31 + 0x20, el]:u64
000001f6: R22 := mem[R31 + 0x28, el]:u64
000001fa: R23 := mem[R31 + 0x30, el]:u64
000001fc: R24 := mem[R31 + 0x38, el]:u64
00000200: R29 := mem[R31, el]:u64
00000202: R30 := mem[R31 + 8, el]:u64
00000204: R31 := R31 + 0x40
00000208: call R30 with noreturn

00000363: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000390: __libc_start_main_main :: in u64 = R0
00000391: __libc_start_main_arg2 :: in u32 = R1
00000392: __libc_start_main_arg3 :: in out u64 = R2
00000393: __libc_start_main_auxv :: in out u64 = R3
00000394: __libc_start_main_result :: out u32 = R0

00000055:
0000030b: R16 := 0x10000
0000030f: R17 := mem[R16 + 0xFA8, el]:u64
00000313: R16 := R16 + 0xFA8
00000317: call R17 with noreturn

00000364: sub _fini(_fini_result)
00000395: _fini_result :: out u32 = R0

00000009:
0000000b: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000d: mem := mem with [R31 - 8, el]:u64 <- R30
0000000f: R31 := R31 - 0x10
00000013: R29 := R31
00000017: R29 := mem[R31, el]:u64
00000019: R30 := mem[R31 + 8, el]:u64
0000001b: R31 := R31 + 0x10
0000001f: call R30 with noreturn

00000365: sub _init(_init_result)
00000396: _init_result :: out u32 = R0

000001d4:
0000033b: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000033d: mem := mem with [R31 - 8, el]:u64 <- R30
0000033f: R31 := R31 - 0x10
00000343: R29 := R31
00000347: R30 := 0x5A4
00000349: call @call_weak_fn with return %0000034b

0000034b:
0000034d: R29 := mem[R31, el]:u64
0000034f: R30 := mem[R31 + 8, el]:u64
00000351: R31 := R31 + 0x10
00000355: call R30 with noreturn

00000366: sub _start(_start_result)
00000397: _start_result :: out u32 = R0

00000022:
00000024: R29 := 0
00000028: R30 := 0
0000002c: R5 := R0
00000030: R1 := mem[R31, el]:u64
00000034: R2 := R31 + 8
00000038: R6 := R31
0000003c: R0 := 0x10000
00000040: R0 := mem[R0 + 0xFF0, el]:u64
00000044: R3 := 0x10000
00000048: R3 := mem[R3 + 0xFE8, el]:u64
0000004c: R4 := 0x10000
00000050: R4 := mem[R4 + 0xFC8, el]:u64
00000054: R30 := 0x644
00000057: call @__libc_start_main with return %00000059

00000059:
0000005b: R30 := 0x648
0000005e: call @abort with return %0000037e

0000037e:
0000037f: call @call_weak_fn with noreturn

00000369: sub abort()


0000005c:
0000032b: R16 := 0x10000
0000032f: R17 := mem[R16 + 0xFB8, el]:u64
00000333: R16 := R16 + 0xFB8
00000337: call R17 with noreturn

0000036a: sub call_weak_fn(call_weak_fn_result)
00000398: call_weak_fn_result :: out u32 = R0

00000060:
00000062: R0 := 0x10000
00000066: R0 := mem[R0 + 0xFE0, el]:u64
0000006f: #5 := R0 = 0
0000006b: when #5 goto %00000069
00000380: goto %000002d6

00000069:
00000072: call R30 with noreturn

000002d6:
000002d9: goto @__gmon_start__

000002d7:
0000031b: R16 := 0x10000
0000031f: R17 := mem[R16 + 0xFB0, el]:u64
00000323: R16 := R16 + 0xFB0
00000327: call R17 with noreturn

0000036c: sub deregister_tm_clones(deregister_tm_clones_result)
00000399: deregister_tm_clones_result :: out u32 = R0

00000077:
00000079: R0 := 0x11000
0000007d: R0 := R0 + 0x10
00000081: R1 := 0x11000
00000085: R1 := R1 + 0x10
00000089: #9 := 1 + ~R0 + R1
0000008b: NF := extract:63:63[#9]
0000008d: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
0000008f: ZF := #9 = 0
00000091: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
0000009a: #11 := ZF
00000096: when #11 goto %00000094
00000381: goto %000002bd

000002bd:
000002bf: R1 := 0x10000
000002c3: R1 := mem[R1 + 0xFD0, el]:u64
000002cb: #101 := R1 = 0
000002c7: when #101 goto %00000094
00000382: goto %000002cd

00000094:
0000009d: call R30 with noreturn

000002cd:
000002cf: R16 := R1
000002d3: call R16 with noreturn

0000036f: sub frame_dummy(frame_dummy_result)
0000039a: frame_dummy_result :: out u32 = R0

0000010e:
00000110: call @register_tm_clones with noreturn

00000370: sub main(main_argc, main_argv, main_result)
0000039b: main_argc :: in u32 = R0
0000039c: main_argv :: in out u64 = R1
0000039d: main_result :: out u32 = R0

00000112:
00000114: R31 := R31 - 0x10
00000118: mem := mem with [R31 + 0xC, el]:u32 <- 0
0000011c: R0 := 0x11000
00000120: R0 := R0 + 0x18
00000124: #32 := pad:64[mem[R0, el]:u32]
00000126: R0 := 0
00000128: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#32]
0000012c: #33 := extend:64[extract:31:0[R0]]
0000012e: NF := extract:63:63[#33]
00000130: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#33]
00000132: ZF := #33 = 0
00000134: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#33] |
          ~extract:63:63[#33]
0000013d: #35 := ~ZF <> 0
00000139: when #35 goto %00000137
00000383: goto %0000026b

0000026b:
0000026d: R0 := 0
0000026f: R0 := R0 & 0xFFFFFFFF00000000 | 3
00000273: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]
00000384: goto %00000137

00000137:
00000140: R0 := 0x11000
00000144: R0 := R0 + 0x18
00000148: #36 := pad:64[mem[R0, el]:u32]
0000014a: R0 := 0
0000014c: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#36]
00000150: #37 := 0xFFFFFFFFFFFFFFFF + extend:64[extract:31:0[R0]]
00000152: NF := extract:63:63[#37]
00000154: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#37]
00000156: ZF := #37 = 0
00000158: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#37] |
          ~extract:63:63[#37]
00000161: #39 := ~ZF <> 0
0000015d: when #39 goto %0000015b
00000385: goto %00000261

00000261:
00000263: R0 := 0
00000265: R0 := R0 & 0xFFFFFFFF00000000 | 5
00000269: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]
00000386: goto %0000015b

0000015b:
00000164: #40 := pad:64[mem[R31 + 0xC, el]:u32]
00000166: R0 := 0
00000168: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#40]
0000016c: #41 := 0xFFFFFFFFFFFFFFFD + extend:64[extract:31:0[R0]]
0000016e: NF := extract:63:63[#41]
00000170: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#41]
00000172: ZF := #41 = 0
00000174: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#41] |
          ~extract:63:63[#41]
0000017d: #43 := ~ZF <> 0
00000179: when #43 goto %00000177
00000387: goto %0000024d

0000024d:
0000024f: R0 := 0x11000
00000253: R0 := R0 + 0x14
00000257: #89 := pad:64[mem[R0, el]:u32]
00000259: R0 := 0
0000025b: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#89]
0000025f: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]
00000388: goto %00000177

00000177:
00000180: R0 := 0
00000182: R0 := R0 & 0xFFFFFFFF00000000
00000186: R31 := R31 + 0x10
0000018a: call R30 with noreturn

00000377: sub register_tm_clones(register_tm_clones_result)
0000039e: register_tm_clones_result :: out u32 = R0

000000a0:
000000a2: R0 := 0x11000
000000a6: R0 := R0 + 0x10
000000aa: R1 := 0x11000
000000ae: R1 := R1 + 0x10
000000b2: R1 := R1 - R0
000000b6: R2 := R1 >> 0x3F
000000ba: R1 := R2 + (R1 ~>> 3)
000000be: #22 := ~(R1 ~>> 1) + 1
000000c0: NF := extract:63:63[#22]
000000c2: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000000c4: ZF := #22 = 0
000000c6: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000000ca: R1 := R1 >> 1
000000d3: #25 := ZF
000000cf: when #25 goto %000000cd
00000389: goto %000002a4

000002a4:
000002a6: R2 := 0x10000
000002aa: R2 := mem[R2 + 0xFF8, el]:u64
000002b2: #97 := R2 = 0
000002ae: when #97 goto %000000cd
0000038a: goto %000002b4

000000cd:
000000d6: call R30 with noreturn

000002b4:
000002b6: R16 := R2
000002ba: call R16 with noreturn
