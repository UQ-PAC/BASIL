00000957: program
00000939: sub __cxa_finalize(__cxa_finalize_result)
00000958: __cxa_finalize_result :: out u32 = low:32[R0]

00000687:
00000768: R16 := 0x11000
0000076f: R17 := mem[R16, el]:u64
00000775: R16 := R16
0000077a: call R17 with noreturn

0000093a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000959: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000384:
00000388: #5 := R31 - 0x20
0000038e: mem := mem with [#5, el]:u64 <- R29
00000394: mem := mem with [#5 + 8, el]:u64 <- R30
00000398: R31 := #5
0000039e: R29 := R31
000003a6: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003ab: R19 := 0x11000
000003b2: R0 := pad:64[mem[R19 + 0x30]]
000003b9: when 31:0[R0] <> 0 goto %000003b7
0000093b: goto %00000650

00000650:
00000653: R0 := 0x10000
0000065a: R0 := mem[R0 + 0xFC0, el]:u64
00000660: when R0 = 0 goto %0000065e
0000093c: goto %00000677

00000677:
0000067a: R0 := 0x11000
00000681: R0 := mem[R0 + 0x28, el]:u64
00000686: R30 := 0x700
00000689: call @__cxa_finalize with return %0000065e

0000065e:
00000666: R30 := 0x704
00000668: call @deregister_tm_clones with return %0000066a

0000066a:
0000066d: R0 := 1
00000675: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000093d: goto %000003b7

000003b7:
000003c1: R19 := mem[R31 + 0x10, el]:u64
000003c8: R29 := mem[R31, el]:u64
000003cd: R30 := mem[R31 + 8, el]:u64
000003d1: R31 := R31 + 0x20
000003d6: call R30 with noreturn

0000093e: sub __libc_csu_fini(__libc_csu_fini_result)
0000095a: __libc_csu_fini_result :: out u32 = low:32[R0]

000005aa:
000005ad: call R30 with noreturn

0000093f: sub __libc_csu_init(__libc_csu_init_result)
0000095b: __libc_csu_init_result :: out u32 = low:32[R0]

000004b7:
000004bb: #9 := R31 - 0x40
000004c1: mem := mem with [#9, el]:u64 <- R29
000004c7: mem := mem with [#9 + 8, el]:u64 <- R30
000004cb: R31 := #9
000004d1: R29 := R31
000004d7: #10 := R31 + 0x10
000004dd: mem := mem with [#10, el]:u64 <- R19
000004e3: mem := mem with [#10 + 8, el]:u64 <- R20
000004e8: R20 := 0x10000
000004ee: R20 := R20 + 0xDC0
000004f4: #11 := R31 + 0x20
000004fa: mem := mem with [#11, el]:u64 <- R21
00000500: mem := mem with [#11 + 8, el]:u64 <- R22
00000505: R21 := 0x10000
0000050b: R21 := R21 + 0xDB8
00000512: R20 := R20 + ~R21 + 1
00000518: R22 := pad:64[31:0[R0]]
0000051e: #12 := R31 + 0x30
00000524: mem := mem with [#12, el]:u64 <- R23
0000052a: mem := mem with [#12 + 8, el]:u64 <- R24
00000530: R23 := R1
00000536: R24 := R2
0000053b: R30 := 0x7D8
0000053e: call @_init with return %00000540

00000540:
00000544: #13 := ~(R20 ~>> 3)
00000548: #14 := ~(R20 ~>> 3) + 1
0000054d: VF := extend:65[#14] <> extend:65[#13] + 1
00000552: CF := pad:65[#14] <> pad:65[#13] + 1
00000556: ZF := #14 = 0
0000055a: NF := 63:63[#14]
00000560: when ZF goto %0000055e
00000940: goto %000005af

000005af:
000005b5: R20 :=

          >> 3 | R20 << 0x3D]
000005ba: R19 := 0
00000941: goto %000005bc

000005bc:
000005c2: R3 := mem[R21 + (60:0[R19].0), el]:u64
000005c8: R2 := R24
000005ce: R19 := R19 + 1
000005d4: R1 := R23
000005da: R0 := pad:64[31:0[R22]]
000005df: R30 := 0x800
000005e2: call R3 with return %000005e4

000005e4:
000005e8: #18 := ~R19
000005ed: #19 := R20 + ~R19 + 1
000005f3: VF := extend:65[#19] <> extend:65[R20] + extend:65[#18] + 1
000005f9: CF := pad:65[#19] <> pad:65[R20] + pad:65[#18] + 1
000005fd: ZF := #19 = 0
00000601: NF := 63:63[#19]
00000606: when ZF <> 1 goto %000005bc
00000942: goto %0000055e

0000055e:
00000567: #15 := R31 + 0x10
0000056c: R19 := mem[#15, el]:u64
00000571: R20 := mem[#15 + 8, el]:u64
00000577: #16 := R31 + 0x20
0000057c: R21 := mem[#16, el]:u64
00000581: R22 := mem[#16 + 8, el]:u64
00000587: #17 := R31 + 0x30
0000058c: R23 := mem[#17, el]:u64
00000591: R24 := mem[#17 + 8, el]:u64
00000598: R29 := mem[R31, el]:u64
0000059d: R30 := mem[R31 + 8, el]:u64
000005a1: R31 := R31 + 0x40
000005a6: call R30 with noreturn

00000943: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000095c: __libc_start_main_main :: in u64 = R0
0000095d: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000095e: __libc_start_main_arg3 :: in out u64 = R2
0000095f: __libc_start_main_auxv :: in out u64 = R3
00000960: __libc_start_main_result :: out u32 = low:32[R0]

000002c2:
0000077e: R16 := 0x11000
00000785: R17 := mem[R16 + 8, el]:u64
0000078b: R16 := R16 + 8
00000790: call R17 with noreturn

00000944: sub _fini(_fini_result)
00000961: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

00000945: sub _init(_init_result)
00000962: _init_result :: out u32 = low:32[R0]

0000053c:
00000862: #21 := R31 - 0x10
00000868: mem := mem with [#21, el]:u64 <- R29
0000086e: mem := mem with [#21 + 8, el]:u64 <- R30
00000872: R31 := #21
00000878: R29 := R31
0000087d: R30 := 0x5A4
0000087f: call @call_weak_fn with return %00000881

00000881:
00000886: R29 := mem[R31, el]:u64
0000088b: R30 := mem[R31 + 8, el]:u64
0000088f: R31 := R31 + 0x10
00000894: call R30 with noreturn

00000946: sub _start(_start_result)
00000963: _start_result :: out u32 = low:32[R0]

00000277:
0000027a: R29 := 0
0000027f: R30 := 0
00000285: R5 := R0
0000028c: R1 := mem[R31, el]:u64
00000292: R2 := R31 + 8
00000298: R6 := R31
0000029d: R0 := 0x10000
000002a4: R0 := mem[R0 + 0xFD8, el]:u64
000002a9: R3 := 0x10000
000002b0: R3 := mem[R3 + 0xFD0, el]:u64
000002b5: R4 := 0x10000
000002bc: R4 := mem[R4 + 0xFB0, el]:u64
000002c1: R30 := 0x644
000002c4: call @__libc_start_main with return %000002c6

000002c6:
000002c9: R30 := 0x648
000002cc: call @abort with return %00000947

00000947:
00000948: call @call_weak_fn with noreturn

00000949: sub abort()


000002ca:
000007aa: R16 := 0x11000
000007b1: R17 := mem[R16 + 0x18, el]:u64
000007b7: R16 := R16 + 0x18
000007bc: call R17 with noreturn

0000094a: sub call_weak_fn(call_weak_fn_result)
00000964: call_weak_fn_result :: out u32 = low:32[R0]

000002ce:
000002d1: R0 := 0x10000
000002d8: R0 := mem[R0 + 0xFC8, el]:u64
000002de: when R0 = 0 goto %000002dc
0000094b: goto %000006c7

000002dc:
000002e4: call R30 with noreturn

000006c7:
000006ca: goto @__gmon_start__

000006c8:
00000794: R16 := 0x11000
0000079b: R17 := mem[R16 + 0x10, el]:u64
000007a1: R16 := R16 + 0x10
000007a6: call R17 with noreturn

0000094c: sub deregister_tm_clones(deregister_tm_clones_result)
00000965: deregister_tm_clones_result :: out u32 = low:32[R0]

000002e8:
000002eb: R0 := 0x11000
000002f1: R0 := R0 + 0x30
000002f6: R1 := 0x11000
000002fc: R1 := R1 + 0x30
00000302: #1 := ~R0
00000307: #2 := R1 + ~R0 + 1
0000030d: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
00000313: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
00000317: ZF := #2 = 0
0000031b: NF := 63:63[#2]
00000321: when ZF goto %0000031f
0000094d: goto %000006a9

000006a9:
000006ac: R1 := 0x10000
000006b3: R1 := mem[R1 + 0xFB8, el]:u64
000006b8: when R1 = 0 goto %0000031f
0000094e: goto %000006bc

0000031f:
00000327: call R30 with noreturn

000006bc:
000006c0: R16 := R1
000006c5: call R16 with noreturn

0000094f: sub frame_dummy(frame_dummy_result)
00000966: frame_dummy_result :: out u32 = low:32[R0]

000003d8:
000003da: call @register_tm_clones with noreturn

00000950: sub main(main_argc, main_argv, main_result)
00000967: main_argc :: in u32 = low:32[R0]
00000968: main_argv :: in out u64 = R1
00000969: main_result :: out u32 = low:32[R0]

000003dc:
000003e0: R31 := R31 - 0x10
000003e7: mem := mem with [R31 + 0xC, el]:u32 <- 0
000003ee: mem := mem with [R31 + 8, el]:u32 <- 0
000003f3: R8 := 0x11000
000003fa: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000400: #6 := 31:0[R8] + 0
00000405: VF := extend:33[#6] <> extend:33[31:0[R8]] + 0
0000040a: CF := pad:33[#6] <> pad:33[31:0[R8]] - 0x100000000
0000040e: ZF := #6 = 0
00000412: NF := 31:31[#6]
00000416: R8 := pad:64[#6]
00000422: when ZF goto %0000041b
00000423: goto %0000041e

0000041e:
0000041f: R8 := 1
00000425: goto %00000421

0000041b:
0000041c: R8 := 0
00000424: goto %00000421

00000421:
0000042b: when 0:0[R8] goto %00000429
00000951: goto %0000063b

0000063b:
0000063e: goto %0000063c

0000063c:
00000642: R8 := 3
0000064a: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000064e: goto %00000429

00000429:
00000431: R8 := 0x11000
00000438: R8 := pad:64[mem[R8 + 0x34, el]:u32]
0000043e: #7 := 31:0[R8] - 1
00000443: VF := extend:33[#7] <> extend:33[31:0[R8]] - 1
00000448: CF := pad:33[#7] <> pad:33[31:0[R8]] + 0xFFFFFFFF
0000044c: ZF := #7 = 0
00000450: NF := 31:31[#7]
00000454: R8 := pad:64[#7]
00000460: when ZF goto %00000459
00000461: goto %0000045c

0000045c:
0000045d: R8 := 1
00000463: goto %0000045f

00000459:
0000045a: R8 := 0
00000462: goto %0000045f

0000045f:
00000469: when 0:0[R8] goto %00000467
00000952: goto %00000626

00000626:
00000629: goto %00000627

00000627:
0000062d: R8 := 5
00000635: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000639: goto %00000467

00000467:
00000471: R8 := pad:64[mem[R31 + 8, el]:u32]
00000477: #8 := 31:0[R8] - 3
0000047c: VF := extend:33[#8] <> extend:33[31:0[R8]] - 3
00000481: CF := pad:33[#8] <> pad:33[31:0[R8]] + 0xFFFFFFFD
00000485: ZF := #8 = 0
00000489: NF := 31:31[#8]
0000048d: R8 := pad:64[#8]
00000499: when ZF goto %00000492
0000049a: goto %00000495

00000495:
00000496: R8 := 1
0000049c: goto %00000498

00000492:
00000493: R8 := 0
0000049b: goto %00000498

00000498:
000004a2: when 0:0[R8] goto %000004a0
00000953: goto %0000060a

0000060a:
0000060d: goto %0000060b

0000060b:
00000611: R8 := 0x11000
00000618: R8 := pad:64[mem[R8 + 0x38, el]:u32]
00000620: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000624: goto %000004a0

000004a0:
000004aa: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000004b0: R31 := R31 + 0x10
000004b5: call R30 with noreturn

00000954: sub register_tm_clones(register_tm_clones_result)
0000096a: register_tm_clones_result :: out u32 = low:32[R0]

00000329:
0000032c: R0 := 0x11000
00000332: R0 := R0 + 0x30
00000337: R1 := 0x11000
0000033d: R1 := R1 + 0x30
00000344: R1 := R1 + ~R0 + 1
0000034b: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000352: R1 := R2 + (R1 ~>> 3)
00000358: #3 := ~(R1 ~>> 1)
0000035c: #4 := ~(R1 ~>> 1) + 1
00000361: VF := extend:65[#4] <> extend:65[#3] + 1
00000366: CF := pad:65[#4] <> pad:65[#3] + 1
0000036a: ZF := #4 = 0
0000036e: NF := 63:63[#4]
00000376: R1 :=

          >> 1 | R1 << 0x3F]
0000037c: when ZF goto %0000037a
00000955: goto %0000068b

0000068b:
0000068e: R2 := 0x10000
00000695: R2 := mem[R2 + 0xFE0, el]:u64
0000069a: when R2 = 0 goto %0000037a
00000956: goto %0000069e

0000037a:
00000382: call R30 with noreturn

0000069e:
000006a2: R16 := R2
000006a7: call R16 with noreturn
