00000634: program
0000061e: sub __cxa_finalize(__cxa_finalize_result)
00000635: __cxa_finalize_result :: out u32 = low:32[R0]

00000413:
0000050b: R16 := 0x20000
00000512: R17 := mem[R16 + 8, el]:u64
00000518: R16 := R16 + 8
0000051d: call R17 with noreturn

0000061f: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000636: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002bb:
000002bf: #3 := R31 - 0x20
000002c5: mem := mem with [#3, el]:u64 <- R29
000002cb: mem := mem with [#3 + 8, el]:u64 <- R30
000002cf: R31 := #3
000002d5: R29 := R31
000002dd: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002e2: R19 := 0x20000
000002e9: R0 := pad:64[mem[R19 + 0x34]]
000002ef: when 0:0[R0] goto %000002ed
00000620: goto %000003dc

000003dc:
000003df: R0 := 0x1F000
000003e6: R0 := mem[R0 + 0xFC8, el]:u64
000003ec: when R0 = 0 goto %000003ea
00000621: goto %00000403

00000403:
00000406: R0 := 0x20000
0000040d: R0 := mem[R0 + 0x28, el]:u64
00000412: R30 := 0x730
00000415: call @__cxa_finalize with return %000003ea

000003ea:
000003f2: R30 := 0x734
000003f4: call @deregister_tm_clones with return %000003f6

000003f6:
000003f9: R0 := 1
00000401: mem := mem with [R19 + 0x34] <- 7:0[R0]
00000622: goto %000002ed

000002ed:
000002f7: R19 := mem[R31 + 0x10, el]:u64
000002fe: R29 := mem[R31, el]:u64
00000303: R30 := mem[R31 + 8, el]:u64
00000307: R31 := R31 + 0x20
0000030c: call R30 with noreturn

00000623: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000637: __libc_start_main_main :: in u64 = R0
00000638: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000639: __libc_start_main_arg3 :: in out u64 = R2
0000063a: __libc_start_main_auxv :: in out u64 = R3
0000063b: __libc_start_main_result :: out u32 = low:32[R0]

00000214:
000004f5: R16 := 0x20000
000004fc: R17 := mem[R16, el]:u64
00000502: R16 := R16
00000507: call R17 with noreturn

00000624: sub _fini(_fini_result)
0000063c: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000625: sub _init(_init_result)
0000063d: _init_result :: out u32 = low:32[R0]

00000565:
0000056b: #7 := R31 - 0x10
00000571: mem := mem with [#7, el]:u64 <- R29
00000577: mem := mem with [#7 + 8, el]:u64 <- R30
0000057b: R31 := #7
00000581: R29 := R31
00000586: R30 := 0x5C8
00000588: call @call_weak_fn with return %0000058a

0000058a:
0000058f: R29 := mem[R31, el]:u64
00000594: R30 := mem[R31 + 8, el]:u64
00000598: R31 := R31 + 0x10
0000059d: call R30 with noreturn

00000626: sub _start(_start_result)
0000063e: _start_result :: out u32 = low:32[R0]

000001d5:
000001da: R29 := 0
000001df: R30 := 0
000001e5: R5 := R0
000001ec: R1 := mem[R31, el]:u64
000001f2: R2 := R31 + 8
000001f8: R6 := R31
000001fd: R0 := 0x1F000
00000204: R0 := mem[R0 + 0xFD8, el]:u64
00000209: R3 := 0
0000020e: R4 := 0
00000213: R30 := 0x670
00000216: call @__libc_start_main with return %00000218

00000218:
0000021b: R30 := 0x674
0000021e: call @abort with return %00000627

00000627:
00000628: call @call_weak_fn with noreturn

00000629: sub abort()


0000021c:
00000537: R16 := 0x20000
0000053e: R17 := mem[R16 + 0x18, el]:u64
00000544: R16 := R16 + 0x18
00000549: call R17 with noreturn

0000062a: sub call_weak_fn(call_weak_fn_result)
0000063f: call_weak_fn_result :: out u32 = low:32[R0]

00000220:
00000223: R0 := 0x1F000
0000022a: R0 := mem[R0 + 0xFD0, el]:u64
00000230: when R0 = 0 goto %0000022e
0000062b: goto %00000453

0000022e:
00000236: call R30 with noreturn

00000453:
00000456: goto @__gmon_start__

00000454:
00000521: R16 := 0x20000
00000528: R17 := mem[R16 + 0x10, el]:u64
0000052e: R16 := R16 + 0x10
00000533: call R17 with noreturn

0000062c: sub deregister_tm_clones(deregister_tm_clones_result)
00000640: deregister_tm_clones_result :: out u32 = low:32[R0]

0000023c:
0000023f: R0 := 0x20000
00000245: R0 := R0 + 0x38
0000024a: R1 := 0x20000
00000250: R1 := R1 + 0x38
00000256: #1 := ~R0
0000025b: #2 := R1 + ~R0
00000261: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000267: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000026b: ZF := #2 + 1 = 0
0000026f: NF := 63:63[#2 + 1]
00000275: when ZF goto %00000273
0000062d: goto %00000435

00000435:
00000438: R1 := 0x1F000
0000043f: R1 := mem[R1 + 0xFC0, el]:u64
00000444: when R1 = 0 goto %00000273
0000062e: goto %00000448

00000273:
0000027b: call R30 with noreturn

00000448:
0000044c: R16 := R1
00000451: call R16 with noreturn

0000062f: sub frame_dummy(frame_dummy_result)
00000641: frame_dummy_result :: out u32 = low:32[R0]

00000312:
00000314: call @register_tm_clones with noreturn

00000630: sub main(main_argc, main_argv, main_result)
00000642: main_argc :: in u32 = low:32[R0]
00000643: main_argv :: in out u64 = R1
00000644: main_result :: out u32 = low:32[R0]

00000316:
0000031a: R31 := R31 - 0x20
00000320: #4 := R31 + 0x10
00000326: mem := mem with [#4, el]:u64 <- R29
0000032c: mem := mem with [#4 + 8, el]:u64 <- R30
00000332: R29 := R31 + 0x10
00000337: R8 := 0
0000033f: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000346: mem := mem with [R29 - 4, el]:u32 <- 0
0000034d: R8 := pad:64[mem[R29 - 4, el]:u32]
00000353: R8 := pad:64[31:0[R8] + 1]
0000035b: mem := mem with [R29 - 4, el]:u32 <- 31:0[R8]
00000362: R8 := pad:64[mem[R29 - 4, el]:u32]
00000368: R8 := pad:64[30:0[R8].0]
00000370: mem := mem with [R29 - 4, el]:u32 <- 31:0[R8]
00000375: R8 := 0x20000
0000037c: R10 := pad:64[mem[R8 + 0x30, el]:u32]
00000383: R9 := pad:64[mem[R29 - 4, el]:u32]
0000038a: R9 := pad:64[31:0[pad:64[31:0[R9]] * pad:64[31:0[R10]]]]
00000392: mem := mem with [R29 - 4, el]:u32 <- 31:0[R9]
00000399: R1 := pad:64[mem[R29 - 4, el]:u32]
000003a0: R2 := pad:64[mem[R8 + 0x30, el]:u32]
000003a5: R0 := 0
000003ab: R0 := R0 + 0x7D8
000003b0: R8 := 0xFEEB
000003b5: R30 := 0x7B0
000003b8: call R8 with return %000003ba

000003ba:
000003bf: R0 := pad:64[mem[R31 + 8, el]:u32]
000003c5: #5 := R31 + 0x10
000003ca: R29 := mem[#5, el]:u64
000003cf: R30 := mem[#5 + 8, el]:u64
000003d5: R31 := R31 + 0x20
000003da: call R30 with noreturn

00000631: sub register_tm_clones(register_tm_clones_result)
00000645: register_tm_clones_result :: out u32 = low:32[R0]

0000027d:
00000280: R0 := 0x20000
00000286: R0 := R0 + 0x38
0000028b: R1 := 0x20000
00000291: R1 := R1 + 0x38
00000298: R1 := R1 + ~R0 + 1
0000029e: R2 := 0.63:63[R1]
000002a5: R1 := R2 + (R1 ~>> 3)
000002ab: R1 := extend:64[63:1[R1]]
000002b1: when R1 = 0 goto %000002af
00000632: goto %00000417

00000417:
0000041a: R2 := 0x1F000
00000421: R2 := mem[R2 + 0xFE0, el]:u64
00000426: when R2 = 0 goto %000002af
00000633: goto %0000042a

000002af:
000002b7: call R30 with noreturn

0000042a:
0000042e: R16 := R2
00000433: call R16 with noreturn
