0000031f: program
000002f5: sub __cxa_finalize(__cxa_finalize_result)
00000320: __cxa_finalize_result :: out u32 = R0

0000023c:
00000297: R16 := 0x10000
0000029b: R17 := mem[R16 + 0xFA0, el]:u64
0000029f: R16 := R16 + 0xFA0
000002a3: call R17 with noreturn

000002f6: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000321: __do_global_dtors_aux_result :: out u32 = R0

000000d9:
000000db: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000dd: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000df: R31 := R31 - 0x20
000000e3: R29 := R31
000000e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000eb: R19 := 0x11000
000000ef: #28 := pad:64[mem[R19 + 0x10]]
000000f1: R0 := 0
000000f3: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
000000fc: #29 := extract:31:0[R0] <> 0
000000f8: when #29 goto %000000f6
00000310: goto %00000211

00000211:
00000213: R0 := 0x10000
00000217: R0 := mem[R0 + 0xFD8, el]:u64
00000220: #82 := R0 = 0
0000021c: when #82 goto %0000021a
00000311: goto %00000231

00000231:
00000233: R0 := 0x11000
00000237: R0 := mem[R0 + 8, el]:u64
0000023b: R30 := 0x700
0000023e: call @__cxa_finalize with return %0000021a

0000021a:
00000223: R30 := 0x704
00000225: call @deregister_tm_clones with return %00000227

00000227:
00000229: R0 := 0
0000022b: R0 := R0 & 0xFFFFFFFF00000000 | 1
0000022f: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
00000312: goto %000000f6

000000f6:
000000ff: R19 := mem[R31 + 0x10, el]:u64
00000103: R29 := mem[R31, el]:u64
00000105: R30 := mem[R31 + 8, el]:u64
00000107: R31 := R31 + 0x20
0000010b: call R30 with noreturn

000002fa: sub __libc_csu_fini(__libc_csu_fini_result)
00000322: __libc_csu_fini_result :: out u32 = R0

000001bf:
000001c1: call R30 with noreturn

000002fb: sub __libc_csu_init(__libc_csu_init_result)
00000323: __libc_csu_init_result :: out u32 = R0

00000141:
00000143: mem := mem with [R31 - 0x40, el]:u64 <- R29
00000145: mem := mem with [R31 - 0x38, el]:u64 <- R30
00000147: R31 := R31 - 0x40
0000014b: R29 := R31
0000014f: mem := mem with [R31, el]:u64 <- R31 + 0x20
00000151: mem := mem with [R31, el]:u64 <- R31 + 0x28
00000155: R20 := 0x10000
00000159: R20 := R20 + 0xD90
0000015d: mem := mem with [R31, el]:u64 <- R31 + 0x40
0000015f: mem := mem with [R31, el]:u64 <- R31 + 0x48
00000163: R21 := 0x10000
00000167: R21 := R21 + 0xD88
0000016b: R20 := R20 - R21
0000016f: #45 := extract:31:0[R0]
00000171: R22 := 0
00000173: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#45]
00000177: mem := mem with [R31, el]:u64 <- R31 + 0x60
00000179: mem := mem with [R31, el]:u64 <- R31 + 0x68
0000017d: R23 := R1
00000181: R24 := R2
00000185: R30 := 0x780
00000188: call @_init with return %0000018a

0000018a:
0000018c: #56 := ~(R20 ~>> 3) + 1
0000018e: NF := extract:63:63[#56]
00000190: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#56]
00000192: ZF := #56 = 0
00000194: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#56]
0000019d: #58 := ZF
00000199: when #58 goto %00000197
00000313: goto %000001c4

000001c4:
000001c6: R20 := R20 >> 3
000001ca: R19 := 0
00000314: goto %000001cc

000001cc:
000001ce: R3 := mem[R21 + (R19 << 3), el]:u64
000001d2: R2 := R24
000001d6: R19 := R19 + 1
000001da: R1 := R23
000001de: #73 := extract:31:0[R22]
000001e0: R0 := 0
000001e2: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#73]
000001e6: R30 := 0x7A8
000001e8: call R3 with return %000001eb

000001eb:
000001ed: #77 := 1 + ~R19 + R20
000001ef: NF := extract:63:63[#77]
000001f1: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#77] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#77]
000001f3: ZF := #77 = 0
000001f5: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#77] | extract:63:63[R20] &
          ~extract:63:63[#77]
000001fd: #79 := ~ZF <> 0
000001f9: when #79 goto %000001cc
00000315: goto %00000197

00000197:
000001a0: R19 := mem[R31 + 0x10, el]:u64
000001a2: R20 := mem[R31 + 0x18, el]:u64
000001a6: R21 := mem[R31 + 0x20, el]:u64
000001a8: R22 := mem[R31 + 0x28, el]:u64
000001ac: R23 := mem[R31 + 0x30, el]:u64
000001ae: R24 := mem[R31 + 0x38, el]:u64
000001b2: R29 := mem[R31, el]:u64
000001b4: R30 := mem[R31 + 8, el]:u64
000001b6: R31 := R31 + 0x40
000001ba: call R30 with noreturn

000002ff: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000324: __libc_start_main_main :: in u64 = R0
00000325: __libc_start_main_arg2 :: in u32 = R1
00000326: __libc_start_main_arg3 :: in out u64 = R2
00000327: __libc_start_main_auxv :: in out u64 = R3
00000328: __libc_start_main_result :: out u32 = R0

00000055:
000002a7: R16 := 0x10000
000002ab: R17 := mem[R16 + 0xFA8, el]:u64
000002af: R16 := R16 + 0xFA8
000002b3: call R17 with noreturn

00000300: sub _fini(_fini_result)
00000329: _fini_result :: out u32 = R0

00000009:
0000000b: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000d: mem := mem with [R31 - 8, el]:u64 <- R30
0000000f: R31 := R31 - 0x10
00000013: R29 := R31
00000017: R29 := mem[R31, el]:u64
00000019: R30 := mem[R31 + 8, el]:u64
0000001b: R31 := R31 + 0x10
0000001f: call R30 with noreturn

00000301: sub _init(_init_result)
0000032a: _init_result :: out u32 = R0

00000186:
000002d7: mem := mem with [R31 - 0x10, el]:u64 <- R29
000002d9: mem := mem with [R31 - 8, el]:u64 <- R30
000002db: R31 := R31 - 0x10
000002df: R29 := R31
000002e3: R30 := 0x5A4
000002e5: call @call_weak_fn with return %000002e7

000002e7:
000002e9: R29 := mem[R31, el]:u64
000002eb: R30 := mem[R31 + 8, el]:u64
000002ed: R31 := R31 + 0x10
000002f1: call R30 with noreturn

00000302: sub _start(_start_result)
0000032b: _start_result :: out u32 = R0

00000022:
00000024: R29 := 0
00000028: R30 := 0
0000002c: R5 := R0
00000030: R1 := mem[R31, el]:u64
00000034: R2 := R31 + 8
00000038: R6 := R31
0000003c: R0 := 0x10000
00000040: R0 := mem[R0 + 0xFF0, el]:u64
00000044: R3 := 0x10000
00000048: R3 := mem[R3 + 0xFE8, el]:u64
0000004c: R4 := 0x10000
00000050: R4 := mem[R4 + 0xFC8, el]:u64
00000054: R30 := 0x644
00000057: call @__libc_start_main with return %00000059

00000059:
0000005b: R30 := 0x648
0000005e: call @abort with return %00000316

00000316:
00000317: call @call_weak_fn with noreturn

00000305: sub abort()


0000005c:
000002c7: R16 := 0x10000
000002cb: R17 := mem[R16 + 0xFB8, el]:u64
000002cf: R16 := R16 + 0xFB8
000002d3: call R17 with noreturn

00000306: sub call_weak_fn(call_weak_fn_result)
0000032c: call_weak_fn_result :: out u32 = R0

00000060:
00000062: R0 := 0x10000
00000066: R0 := mem[R0 + 0xFE0, el]:u64
0000006f: #5 := R0 = 0
0000006b: when #5 goto %00000069
00000318: goto %00000272

00000069:
00000072: call R30 with noreturn

00000272:
00000275: goto @__gmon_start__

00000273:
000002b7: R16 := 0x10000
000002bb: R17 := mem[R16 + 0xFB0, el]:u64
000002bf: R16 := R16 + 0xFB0
000002c3: call R17 with noreturn

00000308: sub deregister_tm_clones(deregister_tm_clones_result)
0000032d: deregister_tm_clones_result :: out u32 = R0

00000077:
00000079: R0 := 0x11000
0000007d: R0 := R0 + 0x10
00000081: R1 := 0x11000
00000085: R1 := R1 + 0x10
00000089: #9 := 1 + ~R0 + R1
0000008b: NF := extract:63:63[#9]
0000008d: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
0000008f: ZF := #9 = 0
00000091: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
0000009a: #11 := ZF
00000096: when #11 goto %00000094
00000319: goto %00000259

00000259:
0000025b: R1 := 0x10000
0000025f: R1 := mem[R1 + 0xFD0, el]:u64
00000267: #88 := R1 = 0
00000263: when #88 goto %00000094
0000031a: goto %00000269

00000094:
0000009d: call R30 with noreturn

00000269:
0000026b: R16 := R1
0000026f: call R16 with noreturn

0000030b: sub frame_dummy(frame_dummy_result)
0000032e: frame_dummy_result :: out u32 = R0

0000010e:
00000110: call @register_tm_clones with noreturn

0000030c: sub main(main_argc, main_argv, main_result)
0000032f: main_argc :: in u32 = R0
00000330: main_argv :: in out u64 = R1
00000331: main_result :: out u32 = R0

00000112:
00000114: R0 := 0x11000
00000118: R0 := R0 + 0x14
0000011c: #31 := pad:64[mem[R0, el]:u32]
0000011e: R0 := 0
00000120: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#31]
00000124: #32 := extend:64[extract:31:0[R0]]
00000126: NF := extract:63:63[#32]
00000128: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#32]
0000012a: ZF := #32 = 0
0000012c: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#32] |
          ~extract:63:63[#32]
00000135: #34 := ~ZF <> 0
00000131: when #34 goto %0000012f
0000031b: goto %000001ff

000001ff:
00000201: R0 := 0x11000
00000205: R0 := R0 + 0x14
00000209: R1 := 0
0000020b: R1 := R1 & 0xFFFFFFFF00000000 | 1
0000020f: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
0000031c: goto %0000012f

0000012f:
00000138: R0 := 0
0000013a: R0 := R0 & 0xFFFFFFFF00000000
0000013e: call R30 with noreturn

0000030f: sub register_tm_clones(register_tm_clones_result)
00000332: register_tm_clones_result :: out u32 = R0

000000a0:
000000a2: R0 := 0x11000
000000a6: R0 := R0 + 0x10
000000aa: R1 := 0x11000
000000ae: R1 := R1 + 0x10
000000b2: R1 := R1 - R0
000000b6: R2 := R1 >> 0x3F
000000ba: R1 := R2 + (R1 ~>> 3)
000000be: #22 := ~(R1 ~>> 1) + 1
000000c0: NF := extract:63:63[#22]
000000c2: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000000c4: ZF := #22 = 0
000000c6: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000000ca: R1 := R1 >> 1
000000d3: #25 := ZF
000000cf: when #25 goto %000000cd
0000031d: goto %00000240

00000240:
00000242: R2 := 0x10000
00000246: R2 := mem[R2 + 0xFF8, el]:u64
0000024e: #84 := R2 = 0
0000024a: when #84 goto %000000cd
0000031e: goto %00000250

000000cd:
000000d6: call R30 with noreturn

00000250:
00000252: R16 := R2
00000256: call R16 with noreturn
