00000989: program
0000096b: sub __cxa_finalize(__cxa_finalize_result)
0000098a: __cxa_finalize_result :: out u32 = low:32[R0]

000006ad:
0000078e: R16 := 0x11000
00000795: R17 := mem[R16, el]:u64
0000079b: R16 := R16
000007a0: call R17 with noreturn

0000096c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000098b: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000039e:
000003a2: #5 := R31 - 0x20
000003a8: mem := mem with [#5, el]:u64 <- R29
000003ae: mem := mem with [#5 + 8, el]:u64 <- R30
000003b2: R31 := #5
000003b8: R29 := R31
000003c0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003c5: R19 := 0x11000
000003cc: R0 := pad:64[mem[R19 + 0x34]]
000003d3: when 31:0[R0] <> 0 goto %000003d1
0000096d: goto %00000676

00000676:
00000679: R0 := 0x10000
00000680: R0 := mem[R0 + 0xFC0, el]:u64
00000686: when R0 = 0 goto %00000684
0000096e: goto %0000069d

0000069d:
000006a0: R0 := 0x11000
000006a7: R0 := mem[R0 + 0x28, el]:u64
000006ac: R30 := 0x750
000006af: call @__cxa_finalize with return %00000684

00000684:
0000068c: R30 := 0x754
0000068e: call @deregister_tm_clones with return %00000690

00000690:
00000693: R0 := 1
0000069b: mem := mem with [R19 + 0x34] <- 7:0[R0]
0000096f: goto %000003d1

000003d1:
000003db: R19 := mem[R31 + 0x10, el]:u64
000003e2: R29 := mem[R31, el]:u64
000003e7: R30 := mem[R31 + 8, el]:u64
000003eb: R31 := R31 + 0x20
000003f0: call R30 with noreturn

00000970: sub __libc_csu_fini(__libc_csu_fini_result)
0000098c: __libc_csu_fini_result :: out u32 = low:32[R0]

00000616:
00000619: call R30 with noreturn

00000971: sub __libc_csu_init(__libc_csu_init_result)
0000098d: __libc_csu_init_result :: out u32 = low:32[R0]

00000523:
00000527: #9 := R31 - 0x40
0000052d: mem := mem with [#9, el]:u64 <- R29
00000533: mem := mem with [#9 + 8, el]:u64 <- R30
00000537: R31 := #9
0000053d: R29 := R31
00000543: #10 := R31 + 0x10
00000549: mem := mem with [#10, el]:u64 <- R19
0000054f: mem := mem with [#10 + 8, el]:u64 <- R20
00000554: R20 := 0x10000
0000055a: R20 := R20 + 0xDA0
00000560: #11 := R31 + 0x20
00000566: mem := mem with [#11, el]:u64 <- R21
0000056c: mem := mem with [#11 + 8, el]:u64 <- R22
00000571: R21 := 0x10000
00000577: R21 := R21 + 0xD98
0000057e: R20 := R20 + ~R21 + 1
00000584: R22 := pad:64[31:0[R0]]
0000058a: #12 := R31 + 0x30
00000590: mem := mem with [#12, el]:u64 <- R23
00000596: mem := mem with [#12 + 8, el]:u64 <- R24
0000059c: R23 := R1
000005a2: R24 := R2
000005a7: R30 := 0x840
000005aa: call @_init with return %000005ac

000005ac:
000005b0: #13 := ~(R20 ~>> 3)
000005b4: #14 := ~(R20 ~>> 3) + 1
000005b9: VF := extend:65[#14] <> extend:65[#13] + 1
000005be: CF := pad:65[#14] <> pad:65[#13] + 1
000005c2: ZF := #14 = 0
000005c6: NF := 63:63[#14]
000005cc: when ZF goto %000005ca
00000972: goto %0000061b

0000061b:
00000621: R20 :=

          >> 3 | R20 << 0x3D]
00000626: R19 := 0
00000973: goto %00000628

00000628:
0000062e: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000634: R2 := R24
0000063a: R19 := R19 + 1
00000640: R1 := R23
00000646: R0 := pad:64[31:0[R22]]
0000064b: R30 := 0x868
0000064e: call R3 with return %00000650

00000650:
00000654: #18 := ~R19
00000659: #19 := R20 + ~R19 + 1
0000065f: VF := extend:65[#19] <> extend:65[R20] + extend:65[#18] + 1
00000665: CF := pad:65[#19] <> pad:65[R20] + pad:65[#18] + 1
00000669: ZF := #19 = 0
0000066d: NF := 63:63[#19]
00000672: when ZF <> 1 goto %00000628
00000974: goto %000005ca

000005ca:
000005d3: #15 := R31 + 0x10
000005d8: R19 := mem[#15, el]:u64
000005dd: R20 := mem[#15 + 8, el]:u64
000005e3: #16 := R31 + 0x20
000005e8: R21 := mem[#16, el]:u64
000005ed: R22 := mem[#16 + 8, el]:u64
000005f3: #17 := R31 + 0x30
000005f8: R23 := mem[#17, el]:u64
000005fd: R24 := mem[#17 + 8, el]:u64
00000604: R29 := mem[R31, el]:u64
00000609: R30 := mem[R31 + 8, el]:u64
0000060d: R31 := R31 + 0x40
00000612: call R30 with noreturn

00000975: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000098e: __libc_start_main_main :: in u64 = R0
0000098f: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000990: __libc_start_main_arg3 :: in out u64 = R2
00000991: __libc_start_main_auxv :: in out u64 = R3
00000992: __libc_start_main_result :: out u32 = low:32[R0]

000002dc:
000007a4: R16 := 0x11000
000007ab: R17 := mem[R16 + 8, el]:u64
000007b1: R16 := R16 + 8
000007b6: call R17 with noreturn

00000976: sub _fini(_fini_result)
00000993: _fini_result :: out u32 = low:32[R0]

00000032:
00000036: #0 := R31 - 0x10
0000003c: mem := mem with [#0, el]:u64 <- R29
00000042: mem := mem with [#0 + 8, el]:u64 <- R30
00000046: R31 := #0
0000004c: R29 := R31
00000053: R29 := mem[R31, el]:u64
00000058: R30 := mem[R31 + 8, el]:u64
0000005c: R31 := R31 + 0x10
00000061: call R30 with noreturn

00000977: sub _init(_init_result)
00000994: _init_result :: out u32 = low:32[R0]

000005a8:
0000088e: #21 := R31 - 0x10
00000894: mem := mem with [#21, el]:u64 <- R29
0000089a: mem := mem with [#21 + 8, el]:u64 <- R30
0000089e: R31 := #21
000008a4: R29 := R31
000008a9: R30 := 0x5EC
000008ab: call @call_weak_fn with return %000008ad

000008ad:
000008b2: R29 := mem[R31, el]:u64
000008b7: R30 := mem[R31 + 8, el]:u64
000008bb: R31 := R31 + 0x10
000008c0: call R30 with noreturn

00000978: sub _start(_start_result)
00000995: _start_result :: out u32 = low:32[R0]

00000291:
00000294: R29 := 0
00000299: R30 := 0
0000029f: R5 := R0
000002a6: R1 := mem[R31, el]:u64
000002ac: R2 := R31 + 8
000002b2: R6 := R31
000002b7: R0 := 0x10000
000002be: R0 := mem[R0 + 0xFD8, el]:u64
000002c3: R3 := 0x10000
000002ca: R3 := mem[R3 + 0xFD0, el]:u64
000002cf: R4 := 0x10000
000002d6: R4 := mem[R4 + 0xFB0, el]:u64
000002db: R30 := 0x694
000002de: call @__libc_start_main with return %000002e0

000002e0:
000002e3: R30 := 0x698
000002e6: call @abort with return %00000979

00000979:
0000097a: call @call_weak_fn with noreturn

0000097b: sub abort()


000002e4:
000007d0: R16 := 0x11000
000007d7: R17 := mem[R16 + 0x18, el]:u64
000007dd: R16 := R16 + 0x18
000007e2: call R17 with noreturn

0000097c: sub add_six(add_six_result)
00000996: add_six_result :: out u32 = low:32[R0]

00000415:
00000418: R9 := 0x11000
0000041f: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000425: R8 := pad:64[31:0[R8] + 6]
0000042d: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000432: call R30 with noreturn

0000097d: sub add_two(add_two_result)
00000997: add_two_result :: out u32 = low:32[R0]

000003f6:
000003f9: R9 := 0x11000
00000400: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000406: R8 := pad:64[31:0[R8] + 2]
0000040e: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000413: call R30 with noreturn

0000097e: sub call_weak_fn(call_weak_fn_result)
00000998: call_weak_fn_result :: out u32 = low:32[R0]

000002e8:
000002eb: R0 := 0x10000
000002f2: R0 := mem[R0 + 0xFC8, el]:u64
000002f8: when R0 = 0 goto %000002f6
0000097f: goto %000006ed

000002f6:
000002fe: call R30 with noreturn

000006ed:
000006f0: goto @__gmon_start__

000006ee:
000007ba: R16 := 0x11000
000007c1: R17 := mem[R16 + 0x10, el]:u64
000007c7: R16 := R16 + 0x10
000007cc: call R17 with noreturn

00000980: sub deregister_tm_clones(deregister_tm_clones_result)
00000999: deregister_tm_clones_result :: out u32 = low:32[R0]

00000302:
00000305: R0 := 0x11000
0000030b: R0 := R0 + 0x38
00000310: R1 := 0x11000
00000316: R1 := R1 + 0x38
0000031c: #1 := ~R0
00000321: #2 := R1 + ~R0 + 1
00000327: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
0000032d: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
00000331: ZF := #2 = 0
00000335: NF := 63:63[#2]
0000033b: when ZF goto %00000339
00000981: goto %000006cf

000006cf:
000006d2: R1 := 0x10000
000006d9: R1 := mem[R1 + 0xFB8, el]:u64
000006de: when R1 = 0 goto %00000339
00000982: goto %000006e2

00000339:
00000341: call R30 with noreturn

000006e2:
000006e6: R16 := R1
000006eb: call R16 with noreturn

00000983: sub frame_dummy(frame_dummy_result)
0000099a: frame_dummy_result :: out u32 = low:32[R0]

000003f2:
000003f4: call @register_tm_clones with noreturn

00000984: sub main(main_argc, main_argv, main_result)
0000099b: main_argc :: in u32 = low:32[R0]
0000099c: main_argv :: in out u64 = R1
0000099d: main_result :: out u32 = low:32[R0]

00000469:
0000046d: R31 := R31 - 0x50
00000473: #7 := R31 + 0x40
00000479: mem := mem with [#7, el]:u64 <- R29
0000047f: mem := mem with [#7 + 8, el]:u64 <- R30
00000485: R29 := R31 + 0x40
0000048a: R8 := 0
00000492: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000499: mem := mem with [R29 - 4, el]:u32 <- 0
000004a1: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
000004a9: mem := mem with [R29 - 0x10, el]:u64 <- R1
000004ae: R8 := 0
000004b4: R8 := R8 + 0x8A8
000004bb: V0 := mem[R8, el]:u128
000004c3: mem := mem with [R31 + 0x10, el]:u128 <- V0
000004ca: R8 := mem[R8 + 0x10, el]:u64
000004d2: mem := mem with [R31 + 0x20, el]:u64 <- R8
000004d9: R8 := mem[R31 + 0x10, el]:u64
000004de: R30 := 0x7E8
000004e1: call R8 with return %000004e3

000004e3:
000004e8: R8 := mem[R31 + 0x18, el]:u64
000004ed: R30 := 0x7F0
000004f0: call R8 with return %000004f2

000004f2:
000004f7: R8 := mem[R31 + 0x20, el]:u64
000004fc: R30 := 0x7F8
000004ff: call R8 with return %00000501

00000501:
00000506: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000050c: #8 := R31 + 0x40
00000511: R29 := mem[#8, el]:u64
00000516: R30 := mem[#8 + 8, el]:u64
0000051c: R31 := R31 + 0x50
00000521: call R30 with noreturn

00000985: sub register_tm_clones(register_tm_clones_result)
0000099e: register_tm_clones_result :: out u32 = low:32[R0]

00000343:
00000346: R0 := 0x11000
0000034c: R0 := R0 + 0x38
00000351: R1 := 0x11000
00000357: R1 := R1 + 0x38
0000035e: R1 := R1 + ~R0 + 1
00000365: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
0000036c: R1 := R2 + (R1 ~>> 3)
00000372: #3 := ~(R1 ~>> 1)
00000376: #4 := ~(R1 ~>> 1) + 1
0000037b: VF := extend:65[#4] <> extend:65[#3] + 1
00000380: CF := pad:65[#4] <> pad:65[#3] + 1
00000384: ZF := #4 = 0
00000388: NF := 63:63[#4]
00000390: R1 :=
          63:63[63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1].63:63[R1]].62:0[R1
          >> 1 | R1 << 0x3F]
00000396: when ZF goto %00000394
00000986: goto %000006b1

000006b1:
000006b4: R2 := 0x10000
000006bb: R2 := mem[R2 + 0xFE0, el]:u64
000006c0: when R2 = 0 goto %00000394
00000987: goto %000006c4

00000394:
0000039c: call R30 with noreturn

000006c4:
000006c8: R16 := R2
000006cd: call R16 with noreturn

00000988: sub sub_seven(sub_seven_result)
0000099f: sub_seven_result :: out u32 = low:32[R0]

00000434:
00000437: R9 := 0x11000
0000043e: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000444: #6 := 31:0[R8] - 7
00000449: VF := extend:33[#6] <> extend:33[31:0[R8]] - 7
0000044e: CF := pad:33[#6] <> pad:33[31:0[R8]] + 0xFFFFFFF9
00000452: ZF := #6 = 0
00000456: NF := 31:31[#6]
0000045a: R8 := pad:64[#6]
00000462: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000467: call R30 with noreturn
