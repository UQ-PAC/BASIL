(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-info :boogie-vc-id rely_transitive_split0)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 1) true)
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun mem@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun mem () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@0 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_mem () (Array (_ BitVec 64) Bool))
(declare-fun mem@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@1 () (Array (_ BitVec 64) Bool))
(set-info :boogie-vc-id rely_transitive_split1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (= mem@0 mem) (=> (and (and (= Gamma_mem@0 Gamma_mem) (= (memory_load8_le mem@0 #x00000000000009b8) #x01)) (and (= (memory_load8_le mem@0 #x00000000000009b9) #x00) (= (memory_load8_le mem@0 #x00000000000009ba) #x02))) (=> (and (and (and (= (memory_load8_le mem@0 #x00000000000009bb) #x00) (= (memory_load8_le mem@0 #x000000000001fdc8) #xd0)) (and (= (memory_load8_le mem@0 #x000000000001fdc9) #x08) (= (memory_load8_le mem@0 #x000000000001fdca) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdcb) #x00) (= (memory_load8_le mem@0 #x000000000001fdcc) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdcd) #x00) (= (memory_load8_le mem@0 #x000000000001fdce) #x00)))) (=> (and (and (and (and (and (and (= (memory_load8_le mem@0 #x000000000001fdcf) #x00) (= (memory_load8_le mem@0 #x000000000001fdd0) #x80)) (and (= (memory_load8_le mem@0 #x000000000001fdd1) #x08) (= (memory_load8_le mem@0 #x000000000001fdd2) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdd3) #x00) (= (memory_load8_le mem@0 #x000000000001fdd4) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdd5) #x00) (= (memory_load8_le mem@0 #x000000000001fdd6) #x00)))) (and (and (and (= (memory_load8_le mem@0 #x000000000001fdd7) #x00) (= (memory_load8_le mem@0 #x000000000001ffd8) #xd4)) (and (= (memory_load8_le mem@0 #x000000000001ffd9) #x08) (= (memory_load8_le mem@0 #x000000000001ffda) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001ffdb) #x00) (= (memory_load8_le mem@0 #x000000000001ffdc) #x00)) (and (= (memory_load8_le mem@0 #x000000000001ffdd) #x00) (= (memory_load8_le mem@0 #x000000000001ffde) #x00))))) (and (and (and (and (= (memory_load8_le mem@0 #x000000000001ffdf) #x00) (= (memory_load8_le mem@0 #x0000000000020058) #x58)) (and (= (memory_load8_le mem@0 #x0000000000020059) #x00) (= (memory_load8_le mem@0 #x000000000002005a) #x02))) (and (and (= (memory_load8_le mem@0 #x000000000002005b) #x00) (= (memory_load8_le mem@0 #x000000000002005c) #x00)) (and (= (memory_load8_le mem@0 #x000000000002005d) #x00) (= (memory_load8_le mem@0 #x000000000002005e) #x00)))) (and (and (and (= (memory_load8_le mem@0 #x000000000002005f) #x00) (= mem@1 mem@0)) (and (= Gamma_mem@1 Gamma_mem@0) (= (memory_load8_le mem@1 #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem@1 #x00000000000009b9) #x00) (= (memory_load8_le mem@1 #x00000000000009ba) #x02)) (and (= (memory_load8_le mem@1 #x00000000000009bb) #x00) (= (memory_load8_le mem@1 #x000000000001fdc8) #xd0)))))) (and (and (and (and (and (= (memory_load8_le mem@1 #x000000000001fdc9) #x08) (= (memory_load8_le mem@1 #x000000000001fdca) #x00)) (and (= (memory_load8_le mem@1 #x000000000001fdcb) #x00) (= (memory_load8_le mem@1 #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem@1 #x000000000001fdcd) #x00) (= (memory_load8_le mem@1 #x000000000001fdce) #x00)) (and (= (memory_load8_le mem@1 #x000000000001fdcf) #x00) (= (memory_load8_le mem@1 #x000000000001fdd0) #x80)))) (and (and (and (= (memory_load8_le mem@1 #x000000000001fdd1) #x08) (= (memory_load8_le mem@1 #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem@1 #x000000000001fdd3) #x00) (= (memory_load8_le mem@1 #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem@1 #x000000000001fdd5) #x00) (= (memory_load8_le mem@1 #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem@1 #x000000000001fdd7) #x00) (= (memory_load8_le mem@1 #x000000000001ffd8) #xd4))))) (and (and (and (and (= (memory_load8_le mem@1 #x000000000001ffd9) #x08) (= (memory_load8_le mem@1 #x000000000001ffda) #x00)) (and (= (memory_load8_le mem@1 #x000000000001ffdb) #x00) (= (memory_load8_le mem@1 #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem@1 #x000000000001ffdd) #x00) (= (memory_load8_le mem@1 #x000000000001ffde) #x00)) (and (= (memory_load8_le mem@1 #x000000000001ffdf) #x00) (= (memory_load8_le mem@1 #x0000000000020058) #x58)))) (and (and (and (= (memory_load8_le mem@1 #x0000000000020059) #x00) (= (memory_load8_le mem@1 #x000000000002005a) #x02)) (and (= (memory_load8_le mem@1 #x000000000002005b) #x00) (= (memory_load8_le mem@1 #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem@1 #x000000000002005d) #x00) (= (memory_load8_le mem@1 #x000000000002005e) #x00)) (and (= (memory_load8_le mem@1 #x000000000002005f) #x00) (= (ControlFlow 0 2) (- 0 1)))))))) (= mem@1 mem)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 3) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun mem@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun mem () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@0 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_mem () (Array (_ BitVec 64) Bool))
(declare-fun mem@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@1 () (Array (_ BitVec 64) Bool))
(set-info :boogie-vc-id rely_transitive_split2)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (and (= mem@0 mem) (= Gamma_mem@0 Gamma_mem)) (=> (and (and (= (memory_load8_le mem@0 #x00000000000009b8) #x01) (= (memory_load8_le mem@0 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@0 #x00000000000009ba) #x02) (= (memory_load8_le mem@0 #x00000000000009bb) #x00))) (=> (and (and (and (= (memory_load8_le mem@0 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@0 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@0 #x000000000001fdca) #x00) (= (memory_load8_le mem@0 #x000000000001fdcb) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdcc) #x00) (= (memory_load8_le mem@0 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdce) #x00) (= (memory_load8_le mem@0 #x000000000001fdcf) #x00)))) (=> (and (and (and (and (and (and (= (memory_load8_le mem@0 #x000000000001fdd0) #x80) (= (memory_load8_le mem@0 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@0 #x000000000001fdd2) #x00) (= (memory_load8_le mem@0 #x000000000001fdd3) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdd4) #x00) (= (memory_load8_le mem@0 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdd6) #x00) (= (memory_load8_le mem@0 #x000000000001fdd7) #x00)))) (and (and (and (= (memory_load8_le mem@0 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@0 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@0 #x000000000001ffda) #x00) (= (memory_load8_le mem@0 #x000000000001ffdb) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001ffdc) #x00) (= (memory_load8_le mem@0 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@0 #x000000000001ffde) #x00) (= (memory_load8_le mem@0 #x000000000001ffdf) #x00))))) (and (and (and (and (= (memory_load8_le mem@0 #x0000000000020058) #x58) (= (memory_load8_le mem@0 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@0 #x000000000002005a) #x02) (= (memory_load8_le mem@0 #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000002005c) #x00) (= (memory_load8_le mem@0 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@0 #x000000000002005e) #x00) (= (memory_load8_le mem@0 #x000000000002005f) #x00)))) (and (and (and (= mem@1 mem@0) (= Gamma_mem@1 Gamma_mem@0)) (and (= (memory_load8_le mem@1 #x00000000000009b8) #x01) (= (memory_load8_le mem@1 #x00000000000009b9) #x00))) (and (and (= (memory_load8_le mem@1 #x00000000000009ba) #x02) (= (memory_load8_le mem@1 #x00000000000009bb) #x00)) (and (= (memory_load8_le mem@1 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@1 #x000000000001fdc9) #x08)))))) (and (and (and (and (and (= (memory_load8_le mem@1 #x000000000001fdca) #x00) (= (memory_load8_le mem@1 #x000000000001fdcb) #x00)) (and (= (memory_load8_le mem@1 #x000000000001fdcc) #x00) (= (memory_load8_le mem@1 #x000000000001fdcd) #x00))) (and (and (= (memory_load8_le mem@1 #x000000000001fdce) #x00) (= (memory_load8_le mem@1 #x000000000001fdcf) #x00)) (and (= (memory_load8_le mem@1 #x000000000001fdd0) #x80) (= (memory_load8_le mem@1 #x000000000001fdd1) #x08)))) (and (and (and (= (memory_load8_le mem@1 #x000000000001fdd2) #x00) (= (memory_load8_le mem@1 #x000000000001fdd3) #x00)) (and (= (memory_load8_le mem@1 #x000000000001fdd4) #x00) (= (memory_load8_le mem@1 #x000000000001fdd5) #x00))) (and (and (= (memory_load8_le mem@1 #x000000000001fdd6) #x00) (= (memory_load8_le mem@1 #x000000000001fdd7) #x00)) (and (= (memory_load8_le mem@1 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@1 #x000000000001ffd9) #x08))))) (and (and (and (and (= (memory_load8_le mem@1 #x000000000001ffda) #x00) (= (memory_load8_le mem@1 #x000000000001ffdb) #x00)) (and (= (memory_load8_le mem@1 #x000000000001ffdc) #x00) (= (memory_load8_le mem@1 #x000000000001ffdd) #x00))) (and (and (= (memory_load8_le mem@1 #x000000000001ffde) #x00) (= (memory_load8_le mem@1 #x000000000001ffdf) #x00)) (and (= (memory_load8_le mem@1 #x0000000000020058) #x58) (= (memory_load8_le mem@1 #x0000000000020059) #x00)))) (and (and (and (= (memory_load8_le mem@1 #x000000000002005a) #x02) (= (memory_load8_le mem@1 #x000000000002005b) #x00)) (and (= (memory_load8_le mem@1 #x000000000002005c) #x00) (= (memory_load8_le mem@1 #x000000000002005d) #x00))) (and (and (= (memory_load8_le mem@1 #x000000000002005e) #x00) (= (memory_load8_le mem@1 #x000000000002005f) #x00)) (and (= mem@1 mem) (= (ControlFlow 0 2) (- 0 1)))))))) (= Gamma_mem@1 Gamma_mem)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 3) 2) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-info :boogie-vc-id main_split0)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 1) true)
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |#4@0| () (_ BitVec 64))
(declare-fun R31 () (_ BitVec 64))
(declare-fun stack@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun stack () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R29 () (_ BitVec 64))
(declare-fun Gamma_stack@0 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_stack () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R29 () Bool)
(declare-fun stack@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R30 () (_ BitVec 64))
(declare-fun Gamma_stack@1 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R30 () Bool)
(declare-fun stack@2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R19 () (_ BitVec 64))
(declare-fun Gamma_stack@2 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R19 () Bool)
(declare-fun stack@3 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@3 () (Array (_ BitVec 64) Bool))
(declare-fun stack@4 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@4 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_mem () (Array (_ BitVec 64) Bool))
(declare-fun malloc_count () Int)
(declare-fun mem () (Array (_ BitVec 64) (_ BitVec 8)))
(set-info :boogie-vc-id main_split1)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((lmain_correct  (=> (= |#4@0| (bvadd R31 #xffffffffffffffd0)) (=> (and (and (= stack@0 (memory_store64_le stack |#4@0| R29)) (= Gamma_stack@0 (gamma_store64 Gamma_stack |#4@0| Gamma_R29))) (and (= stack@1 (memory_store64_le stack@0 (bvadd |#4@0| #x0000000000000008) R30)) (= Gamma_stack@1 (gamma_store64 Gamma_stack@0 (bvadd |#4@0| #x0000000000000008) Gamma_R30)))) (=> (and (and (and (= stack@2 (memory_store64_le stack@1 (bvadd |#4@0| #x0000000000000010) R19)) (= Gamma_stack@2 (gamma_store64 Gamma_stack@1 (bvadd |#4@0| #x0000000000000010) Gamma_R19))) (and (= stack@3 (memory_store64_le stack@2 (bvadd |#4@0| #x0000000000000028) #x0000000000000000)) (= Gamma_stack@3 (gamma_store64 Gamma_stack@2 (bvadd |#4@0| #x0000000000000028) true)))) (and (and (= stack@4 (memory_store64_le stack@3 (bvadd |#4@0| #x0000000000000020) #x0000000000000000)) (= Gamma_stack@4 (gamma_store64 Gamma_stack@3 (bvadd |#4@0| #x0000000000000020) true))) (= (ControlFlow 0 2) (- 0 1)))) (bvugt #x000000000000000b #x0000000000000000))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (= (gamma_load8 Gamma_mem $password_addr) false) (= malloc_count 0)) (and (gamma_load32 Gamma_mem (memory_load64_le mem $stext_addr)) (= R31 #x0000000000000064))) (=> (and (and (and (= (memory_load8_le mem #x0000000000020050) #x00) (= (memory_load8_le mem #x0000000000020051) #x00)) (and (= (memory_load8_le mem #x0000000000020052) #x00) (= (memory_load8_le mem #x0000000000020053) #x00))) (and (and (= (memory_load8_le mem #x0000000000020054) #x00) (= (memory_load8_le mem #x0000000000020055) #x00)) (and (= (memory_load8_le mem #x0000000000020056) #x00) (= (memory_load8_le mem #x0000000000020057) #x00)))) (=> (and (and (and (and (and (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00)) (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00)) (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020060) #x07) (= (memory_load8_le mem #x0000000000020061) #x00)) (and (= (memory_load8_le mem #x0000000000020062) #x00) (= (memory_load8_le mem #x0000000000020063) #x00))) (and (and (= (memory_load8_le mem #x0000000000020064) #x00) (= (memory_load8_le mem #x0000000000020065) #x00)) (and (= (memory_load8_le mem #x0000000000020066) #x00) (= (memory_load8_le mem #x0000000000020067) #x00))))) (and (and (and (and (= (memory_load8_le mem #x0000000000020068) #x68) (= (memory_load8_le mem #x0000000000020069) #x65)) (and (= (memory_load8_le mem #x000000000002006a) #x6c) (= (memory_load8_le mem #x000000000002006b) #x6c))) (and (and (= (memory_load8_le mem #x000000000002006c) #x6f) (= (memory_load8_le mem #x000000000002006d) #x6f)) (and (= (memory_load8_le mem #x000000000002006e) #x00) (= (memory_load8_le mem #x000000000002006f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020070) #x00) (= (memory_load8_le mem #x0000000000020071) #x00)) (and (= (memory_load8_le mem #x0000000000020072) #x00) (= (memory_load8_le mem #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem #x00000000000009b9) #x00) (= (memory_load8_le mem #x00000000000009ba) #x02)) (and (= (memory_load8_le mem #x00000000000009bb) #x00) (= (memory_load8_le mem #x000000000001fdc8) #xd0)))))) (and (and (and (and (and (= (memory_load8_le mem #x000000000001fdc9) #x08) (= (memory_load8_le mem #x000000000001fdca) #x00)) (and (= (memory_load8_le mem #x000000000001fdcb) #x00) (= (memory_load8_le mem #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdcd) #x00) (= (memory_load8_le mem #x000000000001fdce) #x00)) (and (= (memory_load8_le mem #x000000000001fdcf) #x00) (= (memory_load8_le mem #x000000000001fdd0) #x80)))) (and (and (and (= (memory_load8_le mem #x000000000001fdd1) #x08) (= (memory_load8_le mem #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem #x000000000001fdd3) #x00) (= (memory_load8_le mem #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd5) #x00) (= (memory_load8_le mem #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem #x000000000001fdd7) #x00) (= (memory_load8_le mem #x000000000001ffd8) #xd4))))) (and (and (and (and (= (memory_load8_le mem #x000000000001ffd9) #x08) (= (memory_load8_le mem #x000000000001ffda) #x00)) (and (= (memory_load8_le mem #x000000000001ffdb) #x00) (= (memory_load8_le mem #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffdd) #x00) (= (memory_load8_le mem #x000000000001ffde) #x00)) (and (= (memory_load8_le mem #x000000000001ffdf) #x00) (= (memory_load8_le mem #x0000000000020058) #x58)))) (and (and (and (= (memory_load8_le mem #x0000000000020059) #x00) (= (memory_load8_le mem #x000000000002005a) #x02)) (and (= (memory_load8_le mem #x000000000002005b) #x00) (= (memory_load8_le mem #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem #x000000000002005d) #x00) (= (memory_load8_le mem #x000000000002005e) #x00)) (and (= (memory_load8_le mem #x000000000002005f) #x00) (= (ControlFlow 0 3) 2))))))) lmain_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |#4@0| () (_ BitVec 64))
(declare-fun R31 () (_ BitVec 64))
(declare-fun stack@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun stack () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R29 () (_ BitVec 64))
(declare-fun Gamma_stack@0 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_stack () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R29 () Bool)
(declare-fun stack@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R30 () (_ BitVec 64))
(declare-fun Gamma_stack@1 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R30 () Bool)
(declare-fun stack@2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R19 () (_ BitVec 64))
(declare-fun Gamma_stack@2 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R19 () Bool)
(declare-fun stack@3 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@3 () (Array (_ BitVec 64) Bool))
(declare-fun stack@4 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@4 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_mem () (Array (_ BitVec 64) Bool))
(declare-fun malloc_count () Int)
(declare-fun mem () (Array (_ BitVec 64) (_ BitVec 8)))
(set-info :boogie-vc-id main_split2)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((lmain_correct  (=> (= |#4@0| (bvadd R31 #xffffffffffffffd0)) (=> (and (and (= stack@0 (memory_store64_le stack |#4@0| R29)) (= Gamma_stack@0 (gamma_store64 Gamma_stack |#4@0| Gamma_R29))) (and (= stack@1 (memory_store64_le stack@0 (bvadd |#4@0| #x0000000000000008) R30)) (= Gamma_stack@1 (gamma_store64 Gamma_stack@0 (bvadd |#4@0| #x0000000000000008) Gamma_R30)))) (=> (and (and (and (= stack@2 (memory_store64_le stack@1 (bvadd |#4@0| #x0000000000000010) R19)) (= Gamma_stack@2 (gamma_store64 Gamma_stack@1 (bvadd |#4@0| #x0000000000000010) Gamma_R19))) (and (= stack@3 (memory_store64_le stack@2 (bvadd |#4@0| #x0000000000000028) #x0000000000000000)) (= Gamma_stack@3 (gamma_store64 Gamma_stack@2 (bvadd |#4@0| #x0000000000000028) true)))) (and (and (= stack@4 (memory_store64_le stack@3 (bvadd |#4@0| #x0000000000000020) #x0000000000000000)) (= Gamma_stack@4 (gamma_store64 Gamma_stack@3 (bvadd |#4@0| #x0000000000000020) true))) (and (bvugt #x000000000000000b #x0000000000000000) (= (ControlFlow 0 2) (- 0 1))))) (= true true))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (= (gamma_load8 Gamma_mem $password_addr) false) (= malloc_count 0)) (and (gamma_load32 Gamma_mem (memory_load64_le mem $stext_addr)) (= R31 #x0000000000000064))) (=> (and (and (and (= (memory_load8_le mem #x0000000000020050) #x00) (= (memory_load8_le mem #x0000000000020051) #x00)) (and (= (memory_load8_le mem #x0000000000020052) #x00) (= (memory_load8_le mem #x0000000000020053) #x00))) (and (and (= (memory_load8_le mem #x0000000000020054) #x00) (= (memory_load8_le mem #x0000000000020055) #x00)) (and (= (memory_load8_le mem #x0000000000020056) #x00) (= (memory_load8_le mem #x0000000000020057) #x00)))) (=> (and (and (and (and (and (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00)) (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00)) (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020060) #x07) (= (memory_load8_le mem #x0000000000020061) #x00)) (and (= (memory_load8_le mem #x0000000000020062) #x00) (= (memory_load8_le mem #x0000000000020063) #x00))) (and (and (= (memory_load8_le mem #x0000000000020064) #x00) (= (memory_load8_le mem #x0000000000020065) #x00)) (and (= (memory_load8_le mem #x0000000000020066) #x00) (= (memory_load8_le mem #x0000000000020067) #x00))))) (and (and (and (and (= (memory_load8_le mem #x0000000000020068) #x68) (= (memory_load8_le mem #x0000000000020069) #x65)) (and (= (memory_load8_le mem #x000000000002006a) #x6c) (= (memory_load8_le mem #x000000000002006b) #x6c))) (and (and (= (memory_load8_le mem #x000000000002006c) #x6f) (= (memory_load8_le mem #x000000000002006d) #x6f)) (and (= (memory_load8_le mem #x000000000002006e) #x00) (= (memory_load8_le mem #x000000000002006f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020070) #x00) (= (memory_load8_le mem #x0000000000020071) #x00)) (and (= (memory_load8_le mem #x0000000000020072) #x00) (= (memory_load8_le mem #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem #x00000000000009b9) #x00) (= (memory_load8_le mem #x00000000000009ba) #x02)) (and (= (memory_load8_le mem #x00000000000009bb) #x00) (= (memory_load8_le mem #x000000000001fdc8) #xd0)))))) (and (and (and (and (and (= (memory_load8_le mem #x000000000001fdc9) #x08) (= (memory_load8_le mem #x000000000001fdca) #x00)) (and (= (memory_load8_le mem #x000000000001fdcb) #x00) (= (memory_load8_le mem #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdcd) #x00) (= (memory_load8_le mem #x000000000001fdce) #x00)) (and (= (memory_load8_le mem #x000000000001fdcf) #x00) (= (memory_load8_le mem #x000000000001fdd0) #x80)))) (and (and (and (= (memory_load8_le mem #x000000000001fdd1) #x08) (= (memory_load8_le mem #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem #x000000000001fdd3) #x00) (= (memory_load8_le mem #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd5) #x00) (= (memory_load8_le mem #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem #x000000000001fdd7) #x00) (= (memory_load8_le mem #x000000000001ffd8) #xd4))))) (and (and (and (and (= (memory_load8_le mem #x000000000001ffd9) #x08) (= (memory_load8_le mem #x000000000001ffda) #x00)) (and (= (memory_load8_le mem #x000000000001ffdb) #x00) (= (memory_load8_le mem #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffdd) #x00) (= (memory_load8_le mem #x000000000001ffde) #x00)) (and (= (memory_load8_le mem #x000000000001ffdf) #x00) (= (memory_load8_le mem #x0000000000020058) #x58)))) (and (and (and (= (memory_load8_le mem #x0000000000020059) #x00) (= (memory_load8_le mem #x000000000002005a) #x02)) (and (= (memory_load8_le mem #x000000000002005b) #x00) (= (memory_load8_le mem #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem #x000000000002005d) #x00) (= (memory_load8_le mem #x000000000002005e) #x00)) (and (= (memory_load8_le mem #x000000000002005f) #x00) (= (ControlFlow 0 3) 2))))))) lmain_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |#4@0| () (_ BitVec 64))
(declare-fun R31 () (_ BitVec 64))
(declare-fun stack@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun stack () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R29 () (_ BitVec 64))
(declare-fun Gamma_stack@0 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_stack () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R29 () Bool)
(declare-fun stack@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R30 () (_ BitVec 64))
(declare-fun Gamma_stack@1 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R30 () Bool)
(declare-fun stack@2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R19 () (_ BitVec 64))
(declare-fun Gamma_stack@2 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R19 () Bool)
(declare-fun stack@3 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@3 () (Array (_ BitVec 64) Bool))
(declare-fun stack@4 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@4 () (Array (_ BitVec 64) Bool))
(declare-fun mem () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_R0@0 () Bool)
(declare-fun malloc_count@0 () Int)
(declare-fun malloc_count () Int)
(declare-fun malloc_end@0 () (Array Int (_ BitVec 64)))
(declare-fun malloc_base@0 () (Array Int (_ BitVec 64)))
(declare-fun R0@0 () (_ BitVec 64))
(declare-fun malloc_base () (Array Int (_ BitVec 64)))
(declare-fun malloc_end () (Array Int (_ BitVec 64)))
(declare-fun Gamma_mem () (Array (_ BitVec 64) Bool))
(declare-fun R0@1 () (_ BitVec 64))
(declare-fun mem@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@0 () (Array (_ BitVec 64) Bool))
(set-info :boogie-vc-id main_split3)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((lmain_correct  (=> (= |#4@0| (bvadd R31 #xffffffffffffffd0)) (=> (and (and (= stack@0 (memory_store64_le stack |#4@0| R29)) (= Gamma_stack@0 (gamma_store64 Gamma_stack |#4@0| Gamma_R29))) (and (= stack@1 (memory_store64_le stack@0 (bvadd |#4@0| #x0000000000000008) R30)) (= Gamma_stack@1 (gamma_store64 Gamma_stack@0 (bvadd |#4@0| #x0000000000000008) Gamma_R30)))) (=> (and (and (and (= stack@2 (memory_store64_le stack@1 (bvadd |#4@0| #x0000000000000010) R19)) (= Gamma_stack@2 (gamma_store64 Gamma_stack@1 (bvadd |#4@0| #x0000000000000010) Gamma_R19))) (and (= stack@3 (memory_store64_le stack@2 (bvadd |#4@0| #x0000000000000028) #x0000000000000000)) (= Gamma_stack@3 (gamma_store64 Gamma_stack@2 (bvadd |#4@0| #x0000000000000028) true)))) (and (and (= stack@4 (memory_store64_le stack@3 (bvadd |#4@0| #x0000000000000020) #x0000000000000000)) (= Gamma_stack@4 (gamma_store64 Gamma_stack@3 (bvadd |#4@0| #x0000000000000020) true))) (and (bvugt #x000000000000000b #x0000000000000000) (= true true)))) (=> (and (and (and (and (and (= (memory_load64_le mem $buf_addr) (memory_load64_le mem $buf_addr)) (= (memory_load8_le mem $password_addr) (memory_load8_le mem $password_addr))) (= Gamma_R0@0 true)) (and (= malloc_count@0 (+ malloc_count 1)) (bvugt (select malloc_end@0 malloc_count@0) (select malloc_base@0 malloc_count@0)))) (and (and (= R0@0 (select malloc_base@0 malloc_count@0)) (= (select malloc_end@0 malloc_count@0) (bvadd R0@0 #x000000000000000b))) (and (forall ((i@@1 Int) ) (!  (=> (not (= i@@1 malloc_count@0)) (or (bvugt (select malloc_base@0 malloc_count@0) (select malloc_end@0 i@@1)) (bvult (select malloc_end@0 malloc_count@0) (select malloc_base@0 i@@1))))
 :qid |examplebpl.497:19|
 :skolemid |11|
)) (forall ((i@@2 Int) ) (!  (=> (not (= i@@2 malloc_count@0)) (and (= (select malloc_base@0 i@@2) (select malloc_base i@@2)) (= (select malloc_end@0 i@@2) (select malloc_end i@@2))))
 :qid |examplebpl.498:19|
 :skolemid |12|
))))) (and (and (and (and (bvuge R0@0 #x0000000005f5e100) (forall ((i@@3 (_ BitVec 64)) ) (!  (=> (and (bvuge i@@3 R0@0) (bvult i@@3 (bvadd R0@0 #x000000000000000b))) (and (select Gamma_mem i@@3) (gamma_load8 Gamma_mem i@@3)))
 :qid |examplebpl.500:19|
 :skolemid |13|
))) (and (= (memory_load8_le mem #x00000000000009b8) #x01) (= (memory_load8_le mem #x00000000000009b9) #x00))) (and (and (= (memory_load8_le mem #x00000000000009ba) #x02) (= (memory_load8_le mem #x00000000000009bb) #x00)) (and (= (memory_load8_le mem #x000000000001fdc8) #xd0) (= (memory_load8_le mem #x000000000001fdc9) #x08)))) (and (and (and (= (memory_load8_le mem #x000000000001fdca) #x00) (= (memory_load8_le mem #x000000000001fdcb) #x00)) (and (= (memory_load8_le mem #x000000000001fdcc) #x00) (= (memory_load8_le mem #x000000000001fdcd) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdce) #x00) (= (memory_load8_le mem #x000000000001fdcf) #x00)) (and (= (memory_load8_le mem #x000000000001fdd0) #x80) (= (memory_load8_le mem #x000000000001fdd1) #x08)))))) (=> (and (and (and (and (and (and (= (memory_load8_le mem #x000000000001fdd2) #x00) (= (memory_load8_le mem #x000000000001fdd3) #x00)) (and (= (memory_load8_le mem #x000000000001fdd4) #x00) (= (memory_load8_le mem #x000000000001fdd5) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd6) #x00) (= (memory_load8_le mem #x000000000001fdd7) #x00)) (and (= (memory_load8_le mem #x000000000001ffd8) #xd4) (= (memory_load8_le mem #x000000000001ffd9) #x08)))) (and (and (and (= (memory_load8_le mem #x000000000001ffda) #x00) (= (memory_load8_le mem #x000000000001ffdb) #x00)) (and (= (memory_load8_le mem #x000000000001ffdc) #x00) (= (memory_load8_le mem #x000000000001ffdd) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffde) #x00) (= (memory_load8_le mem #x000000000001ffdf) #x00)) (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00))))) (and (and (and (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00)) (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00))) (and (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00)) (and (= R0@1 (bvadd #x0000000000020000 #x0000000000000080)) (= mem@0 mem)))) (and (and (and (= Gamma_mem@0 Gamma_mem) (= (memory_load8_le mem@0 #x00000000000009b8) #x01)) (and (= (memory_load8_le mem@0 #x00000000000009b9) #x00) (= (memory_load8_le mem@0 #x00000000000009ba) #x02))) (and (and (= (memory_load8_le mem@0 #x00000000000009bb) #x00) (= (memory_load8_le mem@0 #x000000000001fdc8) #xd0)) (and (= (memory_load8_le mem@0 #x000000000001fdc9) #x08) (= (memory_load8_le mem@0 #x000000000001fdca) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem@0 #x000000000001fdcb) #x00) (= (memory_load8_le mem@0 #x000000000001fdcc) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdcd) #x00) (= (memory_load8_le mem@0 #x000000000001fdce) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdcf) #x00) (= (memory_load8_le mem@0 #x000000000001fdd0) #x80)) (and (= (memory_load8_le mem@0 #x000000000001fdd1) #x08) (= (memory_load8_le mem@0 #x000000000001fdd2) #x00)))) (and (and (and (= (memory_load8_le mem@0 #x000000000001fdd3) #x00) (= (memory_load8_le mem@0 #x000000000001fdd4) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdd5) #x00) (= (memory_load8_le mem@0 #x000000000001fdd6) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdd7) #x00) (= (memory_load8_le mem@0 #x000000000001ffd8) #xd4)) (and (= (memory_load8_le mem@0 #x000000000001ffd9) #x08) (= (memory_load8_le mem@0 #x000000000001ffda) #x00))))) (and (and (and (and (= (memory_load8_le mem@0 #x000000000001ffdb) #x00) (= (memory_load8_le mem@0 #x000000000001ffdc) #x00)) (and (= (memory_load8_le mem@0 #x000000000001ffdd) #x00) (= (memory_load8_le mem@0 #x000000000001ffde) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001ffdf) #x00) (= (memory_load8_le mem@0 #x0000000000020058) #x58)) (and (= (memory_load8_le mem@0 #x0000000000020059) #x00) (= (memory_load8_le mem@0 #x000000000002005a) #x02)))) (and (and (and (= (memory_load8_le mem@0 #x000000000002005b) #x00) (= (memory_load8_le mem@0 #x000000000002005c) #x00)) (and (= (memory_load8_le mem@0 #x000000000002005d) #x00) (= (memory_load8_le mem@0 #x000000000002005e) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000002005f) #x00) (= (ControlFlow 0 2) (- 0 1))) (L mem@0 R0@1)))))) Gamma_R0@0)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (= (gamma_load8 Gamma_mem $password_addr) false) (= malloc_count 0)) (and (gamma_load32 Gamma_mem (memory_load64_le mem $stext_addr)) (= R31 #x0000000000000064))) (=> (and (and (and (= (memory_load8_le mem #x0000000000020050) #x00) (= (memory_load8_le mem #x0000000000020051) #x00)) (and (= (memory_load8_le mem #x0000000000020052) #x00) (= (memory_load8_le mem #x0000000000020053) #x00))) (and (and (= (memory_load8_le mem #x0000000000020054) #x00) (= (memory_load8_le mem #x0000000000020055) #x00)) (and (= (memory_load8_le mem #x0000000000020056) #x00) (= (memory_load8_le mem #x0000000000020057) #x00)))) (=> (and (and (and (and (and (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00)) (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00)) (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020060) #x07) (= (memory_load8_le mem #x0000000000020061) #x00)) (and (= (memory_load8_le mem #x0000000000020062) #x00) (= (memory_load8_le mem #x0000000000020063) #x00))) (and (and (= (memory_load8_le mem #x0000000000020064) #x00) (= (memory_load8_le mem #x0000000000020065) #x00)) (and (= (memory_load8_le mem #x0000000000020066) #x00) (= (memory_load8_le mem #x0000000000020067) #x00))))) (and (and (and (and (= (memory_load8_le mem #x0000000000020068) #x68) (= (memory_load8_le mem #x0000000000020069) #x65)) (and (= (memory_load8_le mem #x000000000002006a) #x6c) (= (memory_load8_le mem #x000000000002006b) #x6c))) (and (and (= (memory_load8_le mem #x000000000002006c) #x6f) (= (memory_load8_le mem #x000000000002006d) #x6f)) (and (= (memory_load8_le mem #x000000000002006e) #x00) (= (memory_load8_le mem #x000000000002006f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020070) #x00) (= (memory_load8_le mem #x0000000000020071) #x00)) (and (= (memory_load8_le mem #x0000000000020072) #x00) (= (memory_load8_le mem #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem #x00000000000009b9) #x00) (= (memory_load8_le mem #x00000000000009ba) #x02)) (and (= (memory_load8_le mem #x00000000000009bb) #x00) (= (memory_load8_le mem #x000000000001fdc8) #xd0)))))) (and (and (and (and (and (= (memory_load8_le mem #x000000000001fdc9) #x08) (= (memory_load8_le mem #x000000000001fdca) #x00)) (and (= (memory_load8_le mem #x000000000001fdcb) #x00) (= (memory_load8_le mem #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdcd) #x00) (= (memory_load8_le mem #x000000000001fdce) #x00)) (and (= (memory_load8_le mem #x000000000001fdcf) #x00) (= (memory_load8_le mem #x000000000001fdd0) #x80)))) (and (and (and (= (memory_load8_le mem #x000000000001fdd1) #x08) (= (memory_load8_le mem #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem #x000000000001fdd3) #x00) (= (memory_load8_le mem #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd5) #x00) (= (memory_load8_le mem #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem #x000000000001fdd7) #x00) (= (memory_load8_le mem #x000000000001ffd8) #xd4))))) (and (and (and (and (= (memory_load8_le mem #x000000000001ffd9) #x08) (= (memory_load8_le mem #x000000000001ffda) #x00)) (and (= (memory_load8_le mem #x000000000001ffdb) #x00) (= (memory_load8_le mem #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffdd) #x00) (= (memory_load8_le mem #x000000000001ffde) #x00)) (and (= (memory_load8_le mem #x000000000001ffdf) #x00) (= (memory_load8_le mem #x0000000000020058) #x58)))) (and (and (and (= (memory_load8_le mem #x0000000000020059) #x00) (= (memory_load8_le mem #x000000000002005a) #x02)) (and (= (memory_load8_le mem #x000000000002005b) #x00) (= (memory_load8_le mem #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem #x000000000002005d) #x00) (= (memory_load8_le mem #x000000000002005e) #x00)) (and (= (memory_load8_le mem #x000000000002005f) #x00) (= (ControlFlow 0 3) 2))))))) lmain_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |#4@0| () (_ BitVec 64))
(declare-fun R31 () (_ BitVec 64))
(declare-fun stack@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun stack () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R29 () (_ BitVec 64))
(declare-fun Gamma_stack@0 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_stack () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R29 () Bool)
(declare-fun stack@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R30 () (_ BitVec 64))
(declare-fun Gamma_stack@1 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R30 () Bool)
(declare-fun stack@2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R19 () (_ BitVec 64))
(declare-fun Gamma_stack@2 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R19 () Bool)
(declare-fun stack@3 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@3 () (Array (_ BitVec 64) Bool))
(declare-fun stack@4 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@4 () (Array (_ BitVec 64) Bool))
(declare-fun mem () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_R0@0 () Bool)
(declare-fun malloc_count@0 () Int)
(declare-fun malloc_count () Int)
(declare-fun malloc_end@0 () (Array Int (_ BitVec 64)))
(declare-fun malloc_base@0 () (Array Int (_ BitVec 64)))
(declare-fun R0@0 () (_ BitVec 64))
(declare-fun malloc_base () (Array Int (_ BitVec 64)))
(declare-fun malloc_end () (Array Int (_ BitVec 64)))
(declare-fun Gamma_mem () (Array (_ BitVec 64) Bool))
(declare-fun R0@1 () (_ BitVec 64))
(declare-fun mem@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@0 () (Array (_ BitVec 64) Bool))
(declare-fun mem@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@1 () (Array (_ BitVec 64) Bool))
(declare-fun R0@2 () (_ BitVec 64))
(declare-fun mem@2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@2 () (Array (_ BitVec 64) Bool))
(declare-fun R19@0 () (_ BitVec 64))
(declare-fun Gamma_R19@0 () Bool)
(declare-fun R0@3 () (_ BitVec 64))
(declare-fun Gamma_R0@1 () Bool)
(declare-fun R0@4 () (_ BitVec 64))
(declare-fun R1@0 () (_ BitVec 64))
(set-info :boogie-vc-id main_split4)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((lmain_correct  (=> (= |#4@0| (bvadd R31 #xffffffffffffffd0)) (=> (and (and (= stack@0 (memory_store64_le stack |#4@0| R29)) (= Gamma_stack@0 (gamma_store64 Gamma_stack |#4@0| Gamma_R29))) (and (= stack@1 (memory_store64_le stack@0 (bvadd |#4@0| #x0000000000000008) R30)) (= Gamma_stack@1 (gamma_store64 Gamma_stack@0 (bvadd |#4@0| #x0000000000000008) Gamma_R30)))) (=> (and (and (and (and (and (and (= stack@2 (memory_store64_le stack@1 (bvadd |#4@0| #x0000000000000010) R19)) (= Gamma_stack@2 (gamma_store64 Gamma_stack@1 (bvadd |#4@0| #x0000000000000010) Gamma_R19))) (and (= stack@3 (memory_store64_le stack@2 (bvadd |#4@0| #x0000000000000028) #x0000000000000000)) (= Gamma_stack@3 (gamma_store64 Gamma_stack@2 (bvadd |#4@0| #x0000000000000028) true)))) (and (and (= stack@4 (memory_store64_le stack@3 (bvadd |#4@0| #x0000000000000020) #x0000000000000000)) (= Gamma_stack@4 (gamma_store64 Gamma_stack@3 (bvadd |#4@0| #x0000000000000020) true))) (and (bvugt #x000000000000000b #x0000000000000000) (= true true)))) (and (and (and (= (memory_load64_le mem $buf_addr) (memory_load64_le mem $buf_addr)) (= (memory_load8_le mem $password_addr) (memory_load8_le mem $password_addr))) (= Gamma_R0@0 true)) (and (and (= malloc_count@0 (+ malloc_count 1)) (bvugt (select malloc_end@0 malloc_count@0) (select malloc_base@0 malloc_count@0))) (and (= R0@0 (select malloc_base@0 malloc_count@0)) (= (select malloc_end@0 malloc_count@0) (bvadd R0@0 #x000000000000000b)))))) (and (and (and (and (forall ((i@@1 Int) ) (!  (=> (not (= i@@1 malloc_count@0)) (or (bvugt (select malloc_base@0 malloc_count@0) (select malloc_end@0 i@@1)) (bvult (select malloc_end@0 malloc_count@0) (select malloc_base@0 i@@1))))
 :qid |examplebpl.497:19|
 :skolemid |11|
)) (forall ((i@@2 Int) ) (!  (=> (not (= i@@2 malloc_count@0)) (and (= (select malloc_base@0 i@@2) (select malloc_base i@@2)) (= (select malloc_end@0 i@@2) (select malloc_end i@@2))))
 :qid |examplebpl.498:19|
 :skolemid |12|
))) (and (bvuge R0@0 #x0000000005f5e100) (forall ((i@@3 (_ BitVec 64)) ) (!  (=> (and (bvuge i@@3 R0@0) (bvult i@@3 (bvadd R0@0 #x000000000000000b))) (and (select Gamma_mem i@@3) (gamma_load8 Gamma_mem i@@3)))
 :qid |examplebpl.500:19|
 :skolemid |13|
)))) (and (and (= (memory_load8_le mem #x00000000000009b8) #x01) (= (memory_load8_le mem #x00000000000009b9) #x00)) (and (= (memory_load8_le mem #x00000000000009ba) #x02) (= (memory_load8_le mem #x00000000000009bb) #x00)))) (and (and (and (= (memory_load8_le mem #x000000000001fdc8) #xd0) (= (memory_load8_le mem #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem #x000000000001fdca) #x00) (= (memory_load8_le mem #x000000000001fdcb) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdcc) #x00) (= (memory_load8_le mem #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem #x000000000001fdce) #x00) (= (memory_load8_le mem #x000000000001fdcf) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem #x000000000001fdd0) #x80) (= (memory_load8_le mem #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem #x000000000001fdd2) #x00) (= (memory_load8_le mem #x000000000001fdd3) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd4) #x00) (= (memory_load8_le mem #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem #x000000000001fdd6) #x00) (= (memory_load8_le mem #x000000000001fdd7) #x00)))) (and (and (and (= (memory_load8_le mem #x000000000001ffd8) #xd4) (= (memory_load8_le mem #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem #x000000000001ffda) #x00) (= (memory_load8_le mem #x000000000001ffdb) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffdc) #x00) (= (memory_load8_le mem #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem #x000000000001ffde) #x00) (= (memory_load8_le mem #x000000000001ffdf) #x00))))) (and (and (and (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00)) (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00)) (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00)))) (and (and (and (= R0@1 (bvadd #x0000000000020000 #x0000000000000080)) (= mem@0 mem)) (and (= Gamma_mem@0 Gamma_mem) (= (memory_load8_le mem@0 #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem@0 #x00000000000009b9) #x00) (= (memory_load8_le mem@0 #x00000000000009ba) #x02)) (and (= (memory_load8_le mem@0 #x00000000000009bb) #x00) (= (memory_load8_le mem@0 #x000000000001fdc8) #xd0))))))) (=> (and (and (and (and (and (and (and (= (memory_load8_le mem@0 #x000000000001fdc9) #x08) (= (memory_load8_le mem@0 #x000000000001fdca) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdcb) #x00) (= (memory_load8_le mem@0 #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdcd) #x00) (= (memory_load8_le mem@0 #x000000000001fdce) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdcf) #x00) (= (memory_load8_le mem@0 #x000000000001fdd0) #x80)))) (and (and (and (= (memory_load8_le mem@0 #x000000000001fdd1) #x08) (= (memory_load8_le mem@0 #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdd3) #x00) (= (memory_load8_le mem@0 #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdd5) #x00) (= (memory_load8_le mem@0 #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdd7) #x00) (= (memory_load8_le mem@0 #x000000000001ffd8) #xd4))))) (and (and (and (and (= (memory_load8_le mem@0 #x000000000001ffd9) #x08) (= (memory_load8_le mem@0 #x000000000001ffda) #x00)) (and (= (memory_load8_le mem@0 #x000000000001ffdb) #x00) (= (memory_load8_le mem@0 #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001ffdd) #x00) (= (memory_load8_le mem@0 #x000000000001ffde) #x00)) (and (= (memory_load8_le mem@0 #x000000000001ffdf) #x00) (= (memory_load8_le mem@0 #x0000000000020058) #x58)))) (and (and (and (= (memory_load8_le mem@0 #x0000000000020059) #x00) (= (memory_load8_le mem@0 #x000000000002005a) #x02)) (and (= (memory_load8_le mem@0 #x000000000002005b) #x00) (= (memory_load8_le mem@0 #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000002005d) #x00) (= (memory_load8_le mem@0 #x000000000002005e) #x00)) (and (= (memory_load8_le mem@0 #x000000000002005f) #x00) (=> (L mem@0 R0@1) Gamma_R0@0)))))) (and (and (and (and (and (= mem@1 (memory_store64_le mem@0 R0@1 R0@0)) (= Gamma_mem@1 (gamma_store64 Gamma_mem@0 R0@1 Gamma_R0@0))) (= R0@2 (bvadd #x0000000000020000 #x0000000000000080))) (and (= mem@2 mem@1) (= Gamma_mem@2 Gamma_mem@1))) (and (and (and (= (memory_load8_le mem@2 #x00000000000009b8) #x01) (= (memory_load8_le mem@2 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@2 #x00000000000009ba) #x02) (= (memory_load8_le mem@2 #x00000000000009bb) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@2 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdca) #x00) (= (memory_load8_le mem@2 #x000000000001fdcb) #x00))))) (and (and (and (and (= (memory_load8_le mem@2 #x000000000001fdcc) #x00) (= (memory_load8_le mem@2 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdce) #x00) (= (memory_load8_le mem@2 #x000000000001fdcf) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdd0) #x80) (= (memory_load8_le mem@2 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdd2) #x00) (= (memory_load8_le mem@2 #x000000000001fdd3) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000001fdd4) #x00) (= (memory_load8_le mem@2 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdd6) #x00) (= (memory_load8_le mem@2 #x000000000001fdd7) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@2 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001ffda) #x00) (= (memory_load8_le mem@2 #x000000000001ffdb) #x00))))))) (and (and (and (and (and (and (= (memory_load8_le mem@2 #x000000000001ffdc) #x00) (= (memory_load8_le mem@2 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001ffde) #x00) (= (memory_load8_le mem@2 #x000000000001ffdf) #x00))) (and (and (= (memory_load8_le mem@2 #x0000000000020058) #x58) (= (memory_load8_le mem@2 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005a) #x02) (= (memory_load8_le mem@2 #x000000000002005b) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000002005c) #x00) (= (memory_load8_le mem@2 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005e) #x00) (= (memory_load8_le mem@2 #x000000000002005f) #x00))) (and (and (= R19@0 (memory_load64_le mem@2 R0@2)) (= Gamma_R19@0  (or (gamma_load64 Gamma_mem@2 R0@2) (L mem@2 R0@2)))) (= R0@3 (bvadd #x0000000000020000 #x0000000000000068))))) (and (and (and (and (= (memory_load64_le mem@2 $buf_addr) (memory_load64_le mem@2 $buf_addr)) (= (memory_load8_le mem@2 $password_addr) (memory_load8_le mem@2 $password_addr))) (= (memory_load8_le mem@2 $stext_addr) (memory_load8_le mem@2 $stext_addr))) (and (= Gamma_R0@1 true) (forall ((i@@4 (_ BitVec 64)) ) (!  (=> (and (bvule R0@3 i@@4) (bvult i@@4 (bvadd R0@3 R0@4))) (not (= (select mem@2 i@@4) #x00)))
 :qid |examplebpl.812:19|
 :skolemid |18|
)))) (and (and (and (= (memory_load8_le mem@2 (bvadd R0@3 R0@4)) #x00) (bvult R0@3 (bvadd (bvadd R0@3 R0@4) #x0000000000000001))) (and (= (memory_load8_le mem@2 #x00000000000009b8) #x01) (= (memory_load8_le mem@2 #x00000000000009b9) #x00))) (and (and (= (memory_load8_le mem@2 #x00000000000009ba) #x02) (= (memory_load8_le mem@2 #x00000000000009bb) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@2 #x000000000001fdc9) #x08)))))) (and (and (and (and (and (= (memory_load8_le mem@2 #x000000000001fdca) #x00) (= (memory_load8_le mem@2 #x000000000001fdcb) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdcc) #x00) (= (memory_load8_le mem@2 #x000000000001fdcd) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdce) #x00) (= (memory_load8_le mem@2 #x000000000001fdcf) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdd0) #x80) (= (memory_load8_le mem@2 #x000000000001fdd1) #x08)))) (and (and (and (= (memory_load8_le mem@2 #x000000000001fdd2) #x00) (= (memory_load8_le mem@2 #x000000000001fdd3) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdd4) #x00) (= (memory_load8_le mem@2 #x000000000001fdd5) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdd6) #x00) (= (memory_load8_le mem@2 #x000000000001fdd7) #x00)) (and (= (memory_load8_le mem@2 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@2 #x000000000001ffd9) #x08))))) (and (and (and (and (= (memory_load8_le mem@2 #x000000000001ffda) #x00) (= (memory_load8_le mem@2 #x000000000001ffdb) #x00)) (and (= (memory_load8_le mem@2 #x000000000001ffdc) #x00) (= (memory_load8_le mem@2 #x000000000001ffdd) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001ffde) #x00) (= (memory_load8_le mem@2 #x000000000001ffdf) #x00)) (and (= (memory_load8_le mem@2 #x0000000000020058) #x58) (= (memory_load8_le mem@2 #x0000000000020059) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000002005a) #x02) (= (memory_load8_le mem@2 #x000000000002005b) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005c) #x00) (= (memory_load8_le mem@2 #x000000000002005d) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000002005e) #x00) (= (memory_load8_le mem@2 #x000000000002005f) #x00)) (and (= R1@0 (bvadd #x0000000000020000 #x0000000000000068)) (= (ControlFlow 0 2) (- 0 1))))))))) (or (bvugt R19@0 (bvadd R1@0 R0@4)) (bvugt R1@0 (bvadd R19@0 R0@4)))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (= (gamma_load8 Gamma_mem $password_addr) false) (= malloc_count 0)) (and (gamma_load32 Gamma_mem (memory_load64_le mem $stext_addr)) (= R31 #x0000000000000064))) (=> (and (and (and (= (memory_load8_le mem #x0000000000020050) #x00) (= (memory_load8_le mem #x0000000000020051) #x00)) (and (= (memory_load8_le mem #x0000000000020052) #x00) (= (memory_load8_le mem #x0000000000020053) #x00))) (and (and (= (memory_load8_le mem #x0000000000020054) #x00) (= (memory_load8_le mem #x0000000000020055) #x00)) (and (= (memory_load8_le mem #x0000000000020056) #x00) (= (memory_load8_le mem #x0000000000020057) #x00)))) (=> (and (and (and (and (and (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00)) (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00)) (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020060) #x07) (= (memory_load8_le mem #x0000000000020061) #x00)) (and (= (memory_load8_le mem #x0000000000020062) #x00) (= (memory_load8_le mem #x0000000000020063) #x00))) (and (and (= (memory_load8_le mem #x0000000000020064) #x00) (= (memory_load8_le mem #x0000000000020065) #x00)) (and (= (memory_load8_le mem #x0000000000020066) #x00) (= (memory_load8_le mem #x0000000000020067) #x00))))) (and (and (and (and (= (memory_load8_le mem #x0000000000020068) #x68) (= (memory_load8_le mem #x0000000000020069) #x65)) (and (= (memory_load8_le mem #x000000000002006a) #x6c) (= (memory_load8_le mem #x000000000002006b) #x6c))) (and (and (= (memory_load8_le mem #x000000000002006c) #x6f) (= (memory_load8_le mem #x000000000002006d) #x6f)) (and (= (memory_load8_le mem #x000000000002006e) #x00) (= (memory_load8_le mem #x000000000002006f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020070) #x00) (= (memory_load8_le mem #x0000000000020071) #x00)) (and (= (memory_load8_le mem #x0000000000020072) #x00) (= (memory_load8_le mem #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem #x00000000000009b9) #x00) (= (memory_load8_le mem #x00000000000009ba) #x02)) (and (= (memory_load8_le mem #x00000000000009bb) #x00) (= (memory_load8_le mem #x000000000001fdc8) #xd0)))))) (and (and (and (and (and (= (memory_load8_le mem #x000000000001fdc9) #x08) (= (memory_load8_le mem #x000000000001fdca) #x00)) (and (= (memory_load8_le mem #x000000000001fdcb) #x00) (= (memory_load8_le mem #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdcd) #x00) (= (memory_load8_le mem #x000000000001fdce) #x00)) (and (= (memory_load8_le mem #x000000000001fdcf) #x00) (= (memory_load8_le mem #x000000000001fdd0) #x80)))) (and (and (and (= (memory_load8_le mem #x000000000001fdd1) #x08) (= (memory_load8_le mem #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem #x000000000001fdd3) #x00) (= (memory_load8_le mem #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd5) #x00) (= (memory_load8_le mem #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem #x000000000001fdd7) #x00) (= (memory_load8_le mem #x000000000001ffd8) #xd4))))) (and (and (and (and (= (memory_load8_le mem #x000000000001ffd9) #x08) (= (memory_load8_le mem #x000000000001ffda) #x00)) (and (= (memory_load8_le mem #x000000000001ffdb) #x00) (= (memory_load8_le mem #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffdd) #x00) (= (memory_load8_le mem #x000000000001ffde) #x00)) (and (= (memory_load8_le mem #x000000000001ffdf) #x00) (= (memory_load8_le mem #x0000000000020058) #x58)))) (and (and (and (= (memory_load8_le mem #x0000000000020059) #x00) (= (memory_load8_le mem #x000000000002005a) #x02)) (and (= (memory_load8_le mem #x000000000002005b) #x00) (= (memory_load8_le mem #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem #x000000000002005d) #x00) (= (memory_load8_le mem #x000000000002005e) #x00)) (and (= (memory_load8_le mem #x000000000002005f) #x00) (= (ControlFlow 0 3) 2))))))) lmain_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |#4@0| () (_ BitVec 64))
(declare-fun R31 () (_ BitVec 64))
(declare-fun stack@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun stack () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R29 () (_ BitVec 64))
(declare-fun Gamma_stack@0 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_stack () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R29 () Bool)
(declare-fun stack@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R30 () (_ BitVec 64))
(declare-fun Gamma_stack@1 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R30 () Bool)
(declare-fun stack@2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R19 () (_ BitVec 64))
(declare-fun Gamma_stack@2 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R19 () Bool)
(declare-fun stack@3 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@3 () (Array (_ BitVec 64) Bool))
(declare-fun stack@4 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@4 () (Array (_ BitVec 64) Bool))
(declare-fun mem () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_R0@0 () Bool)
(declare-fun malloc_count@0 () Int)
(declare-fun malloc_count () Int)
(declare-fun malloc_end@0 () (Array Int (_ BitVec 64)))
(declare-fun malloc_base@0 () (Array Int (_ BitVec 64)))
(declare-fun R0@0 () (_ BitVec 64))
(declare-fun malloc_base () (Array Int (_ BitVec 64)))
(declare-fun malloc_end () (Array Int (_ BitVec 64)))
(declare-fun Gamma_mem () (Array (_ BitVec 64) Bool))
(declare-fun R0@1 () (_ BitVec 64))
(declare-fun mem@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@0 () (Array (_ BitVec 64) Bool))
(declare-fun mem@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@1 () (Array (_ BitVec 64) Bool))
(declare-fun R0@2 () (_ BitVec 64))
(declare-fun mem@2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@2 () (Array (_ BitVec 64) Bool))
(declare-fun R19@0 () (_ BitVec 64))
(declare-fun Gamma_R19@0 () Bool)
(declare-fun R0@3 () (_ BitVec 64))
(declare-fun Gamma_R0@1 () Bool)
(declare-fun R0@4 () (_ BitVec 64))
(declare-fun R1@0 () (_ BitVec 64))
(set-info :boogie-vc-id main_split5)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((lmain_correct  (=> (= |#4@0| (bvadd R31 #xffffffffffffffd0)) (=> (and (and (= stack@0 (memory_store64_le stack |#4@0| R29)) (= Gamma_stack@0 (gamma_store64 Gamma_stack |#4@0| Gamma_R29))) (and (= stack@1 (memory_store64_le stack@0 (bvadd |#4@0| #x0000000000000008) R30)) (= Gamma_stack@1 (gamma_store64 Gamma_stack@0 (bvadd |#4@0| #x0000000000000008) Gamma_R30)))) (=> (and (and (and (and (= stack@2 (memory_store64_le stack@1 (bvadd |#4@0| #x0000000000000010) R19)) (= Gamma_stack@2 (gamma_store64 Gamma_stack@1 (bvadd |#4@0| #x0000000000000010) Gamma_R19))) (and (= stack@3 (memory_store64_le stack@2 (bvadd |#4@0| #x0000000000000028) #x0000000000000000)) (= Gamma_stack@3 (gamma_store64 Gamma_stack@2 (bvadd |#4@0| #x0000000000000028) true)))) (and (and (= stack@4 (memory_store64_le stack@3 (bvadd |#4@0| #x0000000000000020) #x0000000000000000)) (= Gamma_stack@4 (gamma_store64 Gamma_stack@3 (bvadd |#4@0| #x0000000000000020) true))) (and (bvugt #x000000000000000b #x0000000000000000) (= true true)))) (and (and (and (= (memory_load64_le mem $buf_addr) (memory_load64_le mem $buf_addr)) (= (memory_load8_le mem $password_addr) (memory_load8_le mem $password_addr))) (= Gamma_R0@0 true)) (and (and (= malloc_count@0 (+ malloc_count 1)) (bvugt (select malloc_end@0 malloc_count@0) (select malloc_base@0 malloc_count@0))) (and (= R0@0 (select malloc_base@0 malloc_count@0)) (= (select malloc_end@0 malloc_count@0) (bvadd R0@0 #x000000000000000b)))))) (=> (and (and (and (and (and (and (forall ((i@@1 Int) ) (!  (=> (not (= i@@1 malloc_count@0)) (or (bvugt (select malloc_base@0 malloc_count@0) (select malloc_end@0 i@@1)) (bvult (select malloc_end@0 malloc_count@0) (select malloc_base@0 i@@1))))
 :qid |examplebpl.497:19|
 :skolemid |11|
)) (forall ((i@@2 Int) ) (!  (=> (not (= i@@2 malloc_count@0)) (and (= (select malloc_base@0 i@@2) (select malloc_base i@@2)) (= (select malloc_end@0 i@@2) (select malloc_end i@@2))))
 :qid |examplebpl.498:19|
 :skolemid |12|
))) (and (bvuge R0@0 #x0000000005f5e100) (forall ((i@@3 (_ BitVec 64)) ) (!  (=> (and (bvuge i@@3 R0@0) (bvult i@@3 (bvadd R0@0 #x000000000000000b))) (and (select Gamma_mem i@@3) (gamma_load8 Gamma_mem i@@3)))
 :qid |examplebpl.500:19|
 :skolemid |13|
)))) (and (and (= (memory_load8_le mem #x00000000000009b8) #x01) (= (memory_load8_le mem #x00000000000009b9) #x00)) (and (= (memory_load8_le mem #x00000000000009ba) #x02) (= (memory_load8_le mem #x00000000000009bb) #x00)))) (and (and (and (= (memory_load8_le mem #x000000000001fdc8) #xd0) (= (memory_load8_le mem #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem #x000000000001fdca) #x00) (= (memory_load8_le mem #x000000000001fdcb) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdcc) #x00) (= (memory_load8_le mem #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem #x000000000001fdce) #x00) (= (memory_load8_le mem #x000000000001fdcf) #x00))))) (and (and (and (and (= (memory_load8_le mem #x000000000001fdd0) #x80) (= (memory_load8_le mem #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem #x000000000001fdd2) #x00) (= (memory_load8_le mem #x000000000001fdd3) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd4) #x00) (= (memory_load8_le mem #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem #x000000000001fdd6) #x00) (= (memory_load8_le mem #x000000000001fdd7) #x00)))) (and (and (and (= (memory_load8_le mem #x000000000001ffd8) #xd4) (= (memory_load8_le mem #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem #x000000000001ffda) #x00) (= (memory_load8_le mem #x000000000001ffdb) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffdc) #x00) (= (memory_load8_le mem #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem #x000000000001ffde) #x00) (= (memory_load8_le mem #x000000000001ffdf) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00)) (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00)) (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00)))) (and (and (and (= R0@1 (bvadd #x0000000000020000 #x0000000000000080)) (= mem@0 mem)) (and (= Gamma_mem@0 Gamma_mem) (= (memory_load8_le mem@0 #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem@0 #x00000000000009b9) #x00) (= (memory_load8_le mem@0 #x00000000000009ba) #x02)) (and (= (memory_load8_le mem@0 #x00000000000009bb) #x00) (= (memory_load8_le mem@0 #x000000000001fdc8) #xd0))))) (and (and (and (and (= (memory_load8_le mem@0 #x000000000001fdc9) #x08) (= (memory_load8_le mem@0 #x000000000001fdca) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdcb) #x00) (= (memory_load8_le mem@0 #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdcd) #x00) (= (memory_load8_le mem@0 #x000000000001fdce) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdcf) #x00) (= (memory_load8_le mem@0 #x000000000001fdd0) #x80)))) (and (and (and (= (memory_load8_le mem@0 #x000000000001fdd1) #x08) (= (memory_load8_le mem@0 #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdd3) #x00) (= (memory_load8_le mem@0 #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdd5) #x00) (= (memory_load8_le mem@0 #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdd7) #x00) (= (memory_load8_le mem@0 #x000000000001ffd8) #xd4))))))) (=> (and (and (and (and (and (and (and (= (memory_load8_le mem@0 #x000000000001ffd9) #x08) (= (memory_load8_le mem@0 #x000000000001ffda) #x00)) (and (= (memory_load8_le mem@0 #x000000000001ffdb) #x00) (= (memory_load8_le mem@0 #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001ffdd) #x00) (= (memory_load8_le mem@0 #x000000000001ffde) #x00)) (and (= (memory_load8_le mem@0 #x000000000001ffdf) #x00) (= (memory_load8_le mem@0 #x0000000000020058) #x58)))) (and (and (and (= (memory_load8_le mem@0 #x0000000000020059) #x00) (= (memory_load8_le mem@0 #x000000000002005a) #x02)) (and (= (memory_load8_le mem@0 #x000000000002005b) #x00) (= (memory_load8_le mem@0 #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000002005d) #x00) (= (memory_load8_le mem@0 #x000000000002005e) #x00)) (and (= (memory_load8_le mem@0 #x000000000002005f) #x00) (=> (L mem@0 R0@1) Gamma_R0@0))))) (and (and (and (and (= mem@1 (memory_store64_le mem@0 R0@1 R0@0)) (= Gamma_mem@1 (gamma_store64 Gamma_mem@0 R0@1 Gamma_R0@0))) (= R0@2 (bvadd #x0000000000020000 #x0000000000000080))) (and (= mem@2 mem@1) (= Gamma_mem@2 Gamma_mem@1))) (and (and (and (= (memory_load8_le mem@2 #x00000000000009b8) #x01) (= (memory_load8_le mem@2 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@2 #x00000000000009ba) #x02) (= (memory_load8_le mem@2 #x00000000000009bb) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@2 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdca) #x00) (= (memory_load8_le mem@2 #x000000000001fdcb) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem@2 #x000000000001fdcc) #x00) (= (memory_load8_le mem@2 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdce) #x00) (= (memory_load8_le mem@2 #x000000000001fdcf) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdd0) #x80) (= (memory_load8_le mem@2 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdd2) #x00) (= (memory_load8_le mem@2 #x000000000001fdd3) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000001fdd4) #x00) (= (memory_load8_le mem@2 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdd6) #x00) (= (memory_load8_le mem@2 #x000000000001fdd7) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@2 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001ffda) #x00) (= (memory_load8_le mem@2 #x000000000001ffdb) #x00))))) (and (and (and (and (= (memory_load8_le mem@2 #x000000000001ffdc) #x00) (= (memory_load8_le mem@2 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001ffde) #x00) (= (memory_load8_le mem@2 #x000000000001ffdf) #x00))) (and (and (= (memory_load8_le mem@2 #x0000000000020058) #x58) (= (memory_load8_le mem@2 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005a) #x02) (= (memory_load8_le mem@2 #x000000000002005b) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000002005c) #x00) (= (memory_load8_le mem@2 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005e) #x00) (= (memory_load8_le mem@2 #x000000000002005f) #x00))) (and (and (= R19@0 (memory_load64_le mem@2 R0@2)) (= Gamma_R19@0  (or (gamma_load64 Gamma_mem@2 R0@2) (L mem@2 R0@2)))) (= R0@3 (bvadd #x0000000000020000 #x0000000000000068))))))) (and (and (and (and (and (and (= (memory_load64_le mem@2 $buf_addr) (memory_load64_le mem@2 $buf_addr)) (= (memory_load8_le mem@2 $password_addr) (memory_load8_le mem@2 $password_addr))) (= (memory_load8_le mem@2 $stext_addr) (memory_load8_le mem@2 $stext_addr))) (= Gamma_R0@1 true)) (and (forall ((i@@4 (_ BitVec 64)) ) (!  (=> (and (bvule R0@3 i@@4) (bvult i@@4 (bvadd R0@3 R0@4))) (not (= (select mem@2 i@@4) #x00)))
 :qid |examplebpl.812:19|
 :skolemid |18|
)) (= (memory_load8_le mem@2 (bvadd R0@3 R0@4)) #x00))) (and (and (and (bvult R0@3 (bvadd (bvadd R0@3 R0@4) #x0000000000000001)) (= (memory_load8_le mem@2 #x00000000000009b8) #x01)) (and (= (memory_load8_le mem@2 #x00000000000009b9) #x00) (= (memory_load8_le mem@2 #x00000000000009ba) #x02))) (and (and (= (memory_load8_le mem@2 #x00000000000009bb) #x00) (= (memory_load8_le mem@2 #x000000000001fdc8) #xd0)) (and (= (memory_load8_le mem@2 #x000000000001fdc9) #x08) (= (memory_load8_le mem@2 #x000000000001fdca) #x00))))) (and (and (and (and (and (= (memory_load8_le mem@2 #x000000000001fdcb) #x00) (= (memory_load8_le mem@2 #x000000000001fdcc) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdcd) #x00) (= (memory_load8_le mem@2 #x000000000001fdce) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdcf) #x00) (= (memory_load8_le mem@2 #x000000000001fdd0) #x80)) (and (= (memory_load8_le mem@2 #x000000000001fdd1) #x08) (= (memory_load8_le mem@2 #x000000000001fdd2) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000001fdd3) #x00) (= (memory_load8_le mem@2 #x000000000001fdd4) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdd5) #x00) (= (memory_load8_le mem@2 #x000000000001fdd6) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdd7) #x00) (= (memory_load8_le mem@2 #x000000000001ffd8) #xd4)) (and (= (memory_load8_le mem@2 #x000000000001ffd9) #x08) (= (memory_load8_le mem@2 #x000000000001ffda) #x00))))) (and (and (and (and (= (memory_load8_le mem@2 #x000000000001ffdb) #x00) (= (memory_load8_le mem@2 #x000000000001ffdc) #x00)) (and (= (memory_load8_le mem@2 #x000000000001ffdd) #x00) (= (memory_load8_le mem@2 #x000000000001ffde) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001ffdf) #x00) (= (memory_load8_le mem@2 #x0000000000020058) #x58)) (and (= (memory_load8_le mem@2 #x0000000000020059) #x00) (= (memory_load8_le mem@2 #x000000000002005a) #x02)))) (and (and (and (= (memory_load8_le mem@2 #x000000000002005b) #x00) (= (memory_load8_le mem@2 #x000000000002005c) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005d) #x00) (= (memory_load8_le mem@2 #x000000000002005e) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000002005f) #x00) (= R1@0 (bvadd #x0000000000020000 #x0000000000000068))) (and (or (bvugt R19@0 (bvadd R1@0 R0@4)) (bvugt R1@0 (bvadd R19@0 R0@4))) (= (ControlFlow 0 2) (- 0 1))))))))) (and (bvugt (bvadd R19@0 R0@4) R19@0) (bvugt (bvadd R1@0 R0@4) R1@0)))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (= (gamma_load8 Gamma_mem $password_addr) false) (= malloc_count 0)) (and (gamma_load32 Gamma_mem (memory_load64_le mem $stext_addr)) (= R31 #x0000000000000064))) (=> (and (and (and (= (memory_load8_le mem #x0000000000020050) #x00) (= (memory_load8_le mem #x0000000000020051) #x00)) (and (= (memory_load8_le mem #x0000000000020052) #x00) (= (memory_load8_le mem #x0000000000020053) #x00))) (and (and (= (memory_load8_le mem #x0000000000020054) #x00) (= (memory_load8_le mem #x0000000000020055) #x00)) (and (= (memory_load8_le mem #x0000000000020056) #x00) (= (memory_load8_le mem #x0000000000020057) #x00)))) (=> (and (and (and (and (and (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00)) (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00)) (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020060) #x07) (= (memory_load8_le mem #x0000000000020061) #x00)) (and (= (memory_load8_le mem #x0000000000020062) #x00) (= (memory_load8_le mem #x0000000000020063) #x00))) (and (and (= (memory_load8_le mem #x0000000000020064) #x00) (= (memory_load8_le mem #x0000000000020065) #x00)) (and (= (memory_load8_le mem #x0000000000020066) #x00) (= (memory_load8_le mem #x0000000000020067) #x00))))) (and (and (and (and (= (memory_load8_le mem #x0000000000020068) #x68) (= (memory_load8_le mem #x0000000000020069) #x65)) (and (= (memory_load8_le mem #x000000000002006a) #x6c) (= (memory_load8_le mem #x000000000002006b) #x6c))) (and (and (= (memory_load8_le mem #x000000000002006c) #x6f) (= (memory_load8_le mem #x000000000002006d) #x6f)) (and (= (memory_load8_le mem #x000000000002006e) #x00) (= (memory_load8_le mem #x000000000002006f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020070) #x00) (= (memory_load8_le mem #x0000000000020071) #x00)) (and (= (memory_load8_le mem #x0000000000020072) #x00) (= (memory_load8_le mem #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem #x00000000000009b9) #x00) (= (memory_load8_le mem #x00000000000009ba) #x02)) (and (= (memory_load8_le mem #x00000000000009bb) #x00) (= (memory_load8_le mem #x000000000001fdc8) #xd0)))))) (and (and (and (and (and (= (memory_load8_le mem #x000000000001fdc9) #x08) (= (memory_load8_le mem #x000000000001fdca) #x00)) (and (= (memory_load8_le mem #x000000000001fdcb) #x00) (= (memory_load8_le mem #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdcd) #x00) (= (memory_load8_le mem #x000000000001fdce) #x00)) (and (= (memory_load8_le mem #x000000000001fdcf) #x00) (= (memory_load8_le mem #x000000000001fdd0) #x80)))) (and (and (and (= (memory_load8_le mem #x000000000001fdd1) #x08) (= (memory_load8_le mem #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem #x000000000001fdd3) #x00) (= (memory_load8_le mem #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd5) #x00) (= (memory_load8_le mem #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem #x000000000001fdd7) #x00) (= (memory_load8_le mem #x000000000001ffd8) #xd4))))) (and (and (and (and (= (memory_load8_le mem #x000000000001ffd9) #x08) (= (memory_load8_le mem #x000000000001ffda) #x00)) (and (= (memory_load8_le mem #x000000000001ffdb) #x00) (= (memory_load8_le mem #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffdd) #x00) (= (memory_load8_le mem #x000000000001ffde) #x00)) (and (= (memory_load8_le mem #x000000000001ffdf) #x00) (= (memory_load8_le mem #x0000000000020058) #x58)))) (and (and (and (= (memory_load8_le mem #x0000000000020059) #x00) (= (memory_load8_le mem #x000000000002005a) #x02)) (and (= (memory_load8_le mem #x000000000002005b) #x00) (= (memory_load8_le mem #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem #x000000000002005d) #x00) (= (memory_load8_le mem #x000000000002005e) #x00)) (and (= (memory_load8_le mem #x000000000002005f) #x00) (= (ControlFlow 0 3) 2))))))) lmain_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
; Invalid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |#4@0| () (_ BitVec 64))
(declare-fun R31 () (_ BitVec 64))
(declare-fun stack@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun stack () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R29 () (_ BitVec 64))
(declare-fun Gamma_stack@0 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_stack () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R29 () Bool)
(declare-fun stack@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R30 () (_ BitVec 64))
(declare-fun Gamma_stack@1 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R30 () Bool)
(declare-fun stack@2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R19 () (_ BitVec 64))
(declare-fun Gamma_stack@2 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R19 () Bool)
(declare-fun stack@3 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@3 () (Array (_ BitVec 64) Bool))
(declare-fun stack@4 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@4 () (Array (_ BitVec 64) Bool))
(declare-fun mem () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_R0@0 () Bool)
(declare-fun malloc_count@0 () Int)
(declare-fun malloc_count () Int)
(declare-fun malloc_end@0 () (Array Int (_ BitVec 64)))
(declare-fun malloc_base@0 () (Array Int (_ BitVec 64)))
(declare-fun R0@0 () (_ BitVec 64))
(declare-fun malloc_base () (Array Int (_ BitVec 64)))
(declare-fun malloc_end () (Array Int (_ BitVec 64)))
(declare-fun Gamma_mem () (Array (_ BitVec 64) Bool))
(declare-fun R0@1 () (_ BitVec 64))
(declare-fun mem@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@0 () (Array (_ BitVec 64) Bool))
(declare-fun mem@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@1 () (Array (_ BitVec 64) Bool))
(declare-fun R0@2 () (_ BitVec 64))
(declare-fun mem@2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@2 () (Array (_ BitVec 64) Bool))
(declare-fun R19@0 () (_ BitVec 64))
(declare-fun Gamma_R19@0 () Bool)
(declare-fun R0@3 () (_ BitVec 64))
(declare-fun Gamma_R0@1 () Bool)
(declare-fun R0@4 () (_ BitVec 64))
(declare-fun R1@0 () (_ BitVec 64))
(declare-fun mem@3 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@3 () (Array (_ BitVec 64) Bool))
(declare-fun R0@5 () (_ BitVec 64))
(declare-fun mem@4 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@4 () (Array (_ BitVec 64) Bool))
(declare-fun R0@6 () (_ BitVec 64))
(declare-fun Gamma_R0@2 () Bool)
(declare-fun R0@7 () (_ BitVec 64))
(declare-fun mem@5 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@5 () (Array (_ BitVec 64) Bool))
(declare-fun R0@8 () (_ BitVec 64))
(declare-fun Gamma_R0@3 () Bool)
(declare-fun R0@9 () (_ BitVec 64))
(declare-fun stack@5 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@5 () (Array (_ BitVec 64) Bool))
(declare-fun R0@10 () (_ BitVec 64))
(declare-fun Gamma_R0@4 () Bool)
(declare-fun mem@6 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@6 () (Array (_ BitVec 64) Bool))
(set-info :boogie-vc-id main_split6)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((lmain_correct  (=> (= |#4@0| (bvadd R31 #xffffffffffffffd0)) (=> (and (and (= stack@0 (memory_store64_le stack |#4@0| R29)) (= Gamma_stack@0 (gamma_store64 Gamma_stack |#4@0| Gamma_R29))) (and (= stack@1 (memory_store64_le stack@0 (bvadd |#4@0| #x0000000000000008) R30)) (= Gamma_stack@1 (gamma_store64 Gamma_stack@0 (bvadd |#4@0| #x0000000000000008) Gamma_R30)))) (=> (and (and (and (and (and (= stack@2 (memory_store64_le stack@1 (bvadd |#4@0| #x0000000000000010) R19)) (= Gamma_stack@2 (gamma_store64 Gamma_stack@1 (bvadd |#4@0| #x0000000000000010) Gamma_R19))) (and (= stack@3 (memory_store64_le stack@2 (bvadd |#4@0| #x0000000000000028) #x0000000000000000)) (= Gamma_stack@3 (gamma_store64 Gamma_stack@2 (bvadd |#4@0| #x0000000000000028) true)))) (and (and (= stack@4 (memory_store64_le stack@3 (bvadd |#4@0| #x0000000000000020) #x0000000000000000)) (= Gamma_stack@4 (gamma_store64 Gamma_stack@3 (bvadd |#4@0| #x0000000000000020) true))) (and (bvugt #x000000000000000b #x0000000000000000) (= true true)))) (and (and (and (= (memory_load64_le mem $buf_addr) (memory_load64_le mem $buf_addr)) (= (memory_load8_le mem $password_addr) (memory_load8_le mem $password_addr))) (= Gamma_R0@0 true)) (and (and (= malloc_count@0 (+ malloc_count 1)) (bvugt (select malloc_end@0 malloc_count@0) (select malloc_base@0 malloc_count@0))) (and (= R0@0 (select malloc_base@0 malloc_count@0)) (= (select malloc_end@0 malloc_count@0) (bvadd R0@0 #x000000000000000b)))))) (and (and (and (and (forall ((i@@1 Int) ) (!  (=> (not (= i@@1 malloc_count@0)) (or (bvugt (select malloc_base@0 malloc_count@0) (select malloc_end@0 i@@1)) (bvult (select malloc_end@0 malloc_count@0) (select malloc_base@0 i@@1))))
 :qid |examplebpl.497:19|
 :skolemid |11|
)) (forall ((i@@2 Int) ) (!  (=> (not (= i@@2 malloc_count@0)) (and (= (select malloc_base@0 i@@2) (select malloc_base i@@2)) (= (select malloc_end@0 i@@2) (select malloc_end i@@2))))
 :qid |examplebpl.498:19|
 :skolemid |12|
))) (and (bvuge R0@0 #x0000000005f5e100) (forall ((i@@3 (_ BitVec 64)) ) (!  (=> (and (bvuge i@@3 R0@0) (bvult i@@3 (bvadd R0@0 #x000000000000000b))) (and (select Gamma_mem i@@3) (gamma_load8 Gamma_mem i@@3)))
 :qid |examplebpl.500:19|
 :skolemid |13|
)))) (and (and (= (memory_load8_le mem #x00000000000009b8) #x01) (= (memory_load8_le mem #x00000000000009b9) #x00)) (and (= (memory_load8_le mem #x00000000000009ba) #x02) (= (memory_load8_le mem #x00000000000009bb) #x00)))) (and (and (and (= (memory_load8_le mem #x000000000001fdc8) #xd0) (= (memory_load8_le mem #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem #x000000000001fdca) #x00) (= (memory_load8_le mem #x000000000001fdcb) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdcc) #x00) (= (memory_load8_le mem #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem #x000000000001fdce) #x00) (= (memory_load8_le mem #x000000000001fdcf) #x00)))))) (=> (and (and (and (and (and (and (and (= (memory_load8_le mem #x000000000001fdd0) #x80) (= (memory_load8_le mem #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem #x000000000001fdd2) #x00) (= (memory_load8_le mem #x000000000001fdd3) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd4) #x00) (= (memory_load8_le mem #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem #x000000000001fdd6) #x00) (= (memory_load8_le mem #x000000000001fdd7) #x00)))) (and (and (and (= (memory_load8_le mem #x000000000001ffd8) #xd4) (= (memory_load8_le mem #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem #x000000000001ffda) #x00) (= (memory_load8_le mem #x000000000001ffdb) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffdc) #x00) (= (memory_load8_le mem #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem #x000000000001ffde) #x00) (= (memory_load8_le mem #x000000000001ffdf) #x00))))) (and (and (and (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00)) (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00)) (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00)))) (and (and (and (= R0@1 (bvadd #x0000000000020000 #x0000000000000080)) (= mem@0 mem)) (and (= Gamma_mem@0 Gamma_mem) (= (memory_load8_le mem@0 #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem@0 #x00000000000009b9) #x00) (= (memory_load8_le mem@0 #x00000000000009ba) #x02)) (and (= (memory_load8_le mem@0 #x00000000000009bb) #x00) (= (memory_load8_le mem@0 #x000000000001fdc8) #xd0)))))) (and (and (and (and (and (= (memory_load8_le mem@0 #x000000000001fdc9) #x08) (= (memory_load8_le mem@0 #x000000000001fdca) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdcb) #x00) (= (memory_load8_le mem@0 #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdcd) #x00) (= (memory_load8_le mem@0 #x000000000001fdce) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdcf) #x00) (= (memory_load8_le mem@0 #x000000000001fdd0) #x80)))) (and (and (and (= (memory_load8_le mem@0 #x000000000001fdd1) #x08) (= (memory_load8_le mem@0 #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdd3) #x00) (= (memory_load8_le mem@0 #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdd5) #x00) (= (memory_load8_le mem@0 #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdd7) #x00) (= (memory_load8_le mem@0 #x000000000001ffd8) #xd4))))) (and (and (and (and (= (memory_load8_le mem@0 #x000000000001ffd9) #x08) (= (memory_load8_le mem@0 #x000000000001ffda) #x00)) (and (= (memory_load8_le mem@0 #x000000000001ffdb) #x00) (= (memory_load8_le mem@0 #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001ffdd) #x00) (= (memory_load8_le mem@0 #x000000000001ffde) #x00)) (and (= (memory_load8_le mem@0 #x000000000001ffdf) #x00) (= (memory_load8_le mem@0 #x0000000000020058) #x58)))) (and (and (and (= (memory_load8_le mem@0 #x0000000000020059) #x00) (= (memory_load8_le mem@0 #x000000000002005a) #x02)) (and (= (memory_load8_le mem@0 #x000000000002005b) #x00) (= (memory_load8_le mem@0 #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000002005d) #x00) (= (memory_load8_le mem@0 #x000000000002005e) #x00)) (and (= (memory_load8_le mem@0 #x000000000002005f) #x00) (=> (L mem@0 R0@1) Gamma_R0@0))))))) (and (and (and (and (and (and (= mem@1 (memory_store64_le mem@0 R0@1 R0@0)) (= Gamma_mem@1 (gamma_store64 Gamma_mem@0 R0@1 Gamma_R0@0))) (= R0@2 (bvadd #x0000000000020000 #x0000000000000080))) (and (= mem@2 mem@1) (= Gamma_mem@2 Gamma_mem@1))) (and (and (and (= (memory_load8_le mem@2 #x00000000000009b8) #x01) (= (memory_load8_le mem@2 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@2 #x00000000000009ba) #x02) (= (memory_load8_le mem@2 #x00000000000009bb) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@2 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdca) #x00) (= (memory_load8_le mem@2 #x000000000001fdcb) #x00))))) (and (and (and (and (= (memory_load8_le mem@2 #x000000000001fdcc) #x00) (= (memory_load8_le mem@2 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdce) #x00) (= (memory_load8_le mem@2 #x000000000001fdcf) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdd0) #x80) (= (memory_load8_le mem@2 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdd2) #x00) (= (memory_load8_le mem@2 #x000000000001fdd3) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000001fdd4) #x00) (= (memory_load8_le mem@2 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdd6) #x00) (= (memory_load8_le mem@2 #x000000000001fdd7) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@2 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001ffda) #x00) (= (memory_load8_le mem@2 #x000000000001ffdb) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem@2 #x000000000001ffdc) #x00) (= (memory_load8_le mem@2 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001ffde) #x00) (= (memory_load8_le mem@2 #x000000000001ffdf) #x00))) (and (and (= (memory_load8_le mem@2 #x0000000000020058) #x58) (= (memory_load8_le mem@2 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005a) #x02) (= (memory_load8_le mem@2 #x000000000002005b) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000002005c) #x00) (= (memory_load8_le mem@2 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005e) #x00) (= (memory_load8_le mem@2 #x000000000002005f) #x00))) (and (and (= R19@0 (memory_load64_le mem@2 R0@2)) (= Gamma_R19@0  (or (gamma_load64 Gamma_mem@2 R0@2) (L mem@2 R0@2)))) (= R0@3 (bvadd #x0000000000020000 #x0000000000000068))))) (and (and (and (and (= (memory_load64_le mem@2 $buf_addr) (memory_load64_le mem@2 $buf_addr)) (= (memory_load8_le mem@2 $password_addr) (memory_load8_le mem@2 $password_addr))) (= (memory_load8_le mem@2 $stext_addr) (memory_load8_le mem@2 $stext_addr))) (and (and (= Gamma_R0@1 true) (forall ((i@@4 (_ BitVec 64)) ) (!  (=> (and (bvule R0@3 i@@4) (bvult i@@4 (bvadd R0@3 R0@4))) (not (= (select mem@2 i@@4) #x00)))
 :qid |examplebpl.812:19|
 :skolemid |18|
))) (and (= (memory_load8_le mem@2 (bvadd R0@3 R0@4)) #x00) (bvult R0@3 (bvadd (bvadd R0@3 R0@4) #x0000000000000001))))) (and (and (and (= (memory_load8_le mem@2 #x00000000000009b8) #x01) (= (memory_load8_le mem@2 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@2 #x00000000000009ba) #x02) (= (memory_load8_le mem@2 #x00000000000009bb) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@2 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdca) #x00) (= (memory_load8_le mem@2 #x000000000001fdcb) #x00)))))))) (=> (and (and (and (and (and (and (and (and (= (memory_load8_le mem@2 #x000000000001fdcc) #x00) (= (memory_load8_le mem@2 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdce) #x00) (= (memory_load8_le mem@2 #x000000000001fdcf) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdd0) #x80) (= (memory_load8_le mem@2 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdd2) #x00) (= (memory_load8_le mem@2 #x000000000001fdd3) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000001fdd4) #x00) (= (memory_load8_le mem@2 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdd6) #x00) (= (memory_load8_le mem@2 #x000000000001fdd7) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@2 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001ffda) #x00) (= (memory_load8_le mem@2 #x000000000001ffdb) #x00))))) (and (and (and (and (= (memory_load8_le mem@2 #x000000000001ffdc) #x00) (= (memory_load8_le mem@2 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001ffde) #x00) (= (memory_load8_le mem@2 #x000000000001ffdf) #x00))) (and (and (= (memory_load8_le mem@2 #x0000000000020058) #x58) (= (memory_load8_le mem@2 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005a) #x02) (= (memory_load8_le mem@2 #x000000000002005b) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000002005c) #x00) (= (memory_load8_le mem@2 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005e) #x00) (= (memory_load8_le mem@2 #x000000000002005f) #x00))) (and (and (= R1@0 (bvadd #x0000000000020000 #x0000000000000068)) (or (bvugt R19@0 (bvadd R1@0 R0@4)) (bvugt R1@0 (bvadd R19@0 R0@4)))) (and (bvugt (bvadd R19@0 R0@4) R19@0) (bvugt (bvadd R1@0 R0@4) R1@0)))))) (and (and (and (and (and (= (memory_load64_le mem@3 $buf_addr) (memory_load64_le mem@2 $buf_addr)) (= (memory_load8_le mem@3 $password_addr) (memory_load8_le mem@2 $password_addr))) (forall ((i@@5 (_ BitVec 64)) ) (! (= (select Gamma_mem@3 i@@5) (ite  (and (bvule R19@0 i@@5) (bvult i@@5 (bvadd R19@0 R0@4))) (gamma_load8 Gamma_mem@3 (bvadd (bvsub i@@5 R19@0) R1@0)) (gamma_load8 Gamma_mem@2 i@@5)))
 :qid |examplebpl.579:19|
 :skolemid |14|
))) (and (and (forall ((i@@6 (_ BitVec 64)) ) (! (= (select mem@3 i@@6) (ite  (and (bvule R19@0 i@@6) (bvult i@@6 (bvadd R19@0 R0@4))) (memory_load8_le mem@3 (bvadd (bvsub i@@6 R19@0) R1@0)) (memory_load8_le mem@2 i@@6)))
 :qid |examplebpl.580:19|
 :skolemid |15|
)) (= (memory_load8_le mem@3 #x00000000000009b8) #x01)) (and (= (memory_load8_le mem@3 #x00000000000009b9) #x00) (= (memory_load8_le mem@3 #x00000000000009ba) #x02)))) (and (and (and (= (memory_load8_le mem@3 #x00000000000009bb) #x00) (= (memory_load8_le mem@3 #x000000000001fdc8) #xd0)) (and (= (memory_load8_le mem@3 #x000000000001fdc9) #x08) (= (memory_load8_le mem@3 #x000000000001fdca) #x00))) (and (and (= (memory_load8_le mem@3 #x000000000001fdcb) #x00) (= (memory_load8_le mem@3 #x000000000001fdcc) #x00)) (and (= (memory_load8_le mem@3 #x000000000001fdcd) #x00) (= (memory_load8_le mem@3 #x000000000001fdce) #x00))))) (and (and (and (and (= (memory_load8_le mem@3 #x000000000001fdcf) #x00) (= (memory_load8_le mem@3 #x000000000001fdd0) #x80)) (and (= (memory_load8_le mem@3 #x000000000001fdd1) #x08) (= (memory_load8_le mem@3 #x000000000001fdd2) #x00))) (and (and (= (memory_load8_le mem@3 #x000000000001fdd3) #x00) (= (memory_load8_le mem@3 #x000000000001fdd4) #x00)) (and (= (memory_load8_le mem@3 #x000000000001fdd5) #x00) (= (memory_load8_le mem@3 #x000000000001fdd6) #x00)))) (and (and (and (= (memory_load8_le mem@3 #x000000000001fdd7) #x00) (= (memory_load8_le mem@3 #x000000000001ffd8) #xd4)) (and (= (memory_load8_le mem@3 #x000000000001ffd9) #x08) (= (memory_load8_le mem@3 #x000000000001ffda) #x00))) (and (and (= (memory_load8_le mem@3 #x000000000001ffdb) #x00) (= (memory_load8_le mem@3 #x000000000001ffdc) #x00)) (and (= (memory_load8_le mem@3 #x000000000001ffdd) #x00) (= (memory_load8_le mem@3 #x000000000001ffde) #x00))))))) (and (and (and (and (and (and (= (memory_load8_le mem@3 #x000000000001ffdf) #x00) (= (memory_load8_le mem@3 #x0000000000020058) #x58)) (and (= (memory_load8_le mem@3 #x0000000000020059) #x00) (= (memory_load8_le mem@3 #x000000000002005a) #x02))) (and (and (= (memory_load8_le mem@3 #x000000000002005b) #x00) (= (memory_load8_le mem@3 #x000000000002005c) #x00)) (and (= (memory_load8_le mem@3 #x000000000002005d) #x00) (= (memory_load8_le mem@3 #x000000000002005e) #x00)))) (and (and (and (= (memory_load8_le mem@3 #x000000000002005f) #x00) (= R0@5 (bvadd #x0000000000020000 #x0000000000000080))) (and (= mem@4 mem@3) (= Gamma_mem@4 Gamma_mem@3))) (and (and (= (memory_load8_le mem@4 #x00000000000009b8) #x01) (= (memory_load8_le mem@4 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@4 #x00000000000009ba) #x02) (= (memory_load8_le mem@4 #x00000000000009bb) #x00))))) (and (and (and (and (= (memory_load8_le mem@4 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@4 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@4 #x000000000001fdca) #x00) (= (memory_load8_le mem@4 #x000000000001fdcb) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001fdcc) #x00) (= (memory_load8_le mem@4 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@4 #x000000000001fdce) #x00) (= (memory_load8_le mem@4 #x000000000001fdcf) #x00)))) (and (and (and (= (memory_load8_le mem@4 #x000000000001fdd0) #x80) (= (memory_load8_le mem@4 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@4 #x000000000001fdd2) #x00) (= (memory_load8_le mem@4 #x000000000001fdd3) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001fdd4) #x00) (= (memory_load8_le mem@4 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@4 #x000000000001fdd6) #x00) (= (memory_load8_le mem@4 #x000000000001fdd7) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem@4 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@4 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@4 #x000000000001ffda) #x00) (= (memory_load8_le mem@4 #x000000000001ffdb) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001ffdc) #x00) (= (memory_load8_le mem@4 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@4 #x000000000001ffde) #x00) (= (memory_load8_le mem@4 #x000000000001ffdf) #x00)))) (and (and (and (= (memory_load8_le mem@4 #x0000000000020058) #x58) (= (memory_load8_le mem@4 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@4 #x000000000002005a) #x02) (= (memory_load8_le mem@4 #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000002005c) #x00) (= (memory_load8_le mem@4 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@4 #x000000000002005e) #x00) (= (memory_load8_le mem@4 #x000000000002005f) #x00))))) (and (and (and (and (= R0@6 (memory_load64_le mem@4 R0@5)) (= Gamma_R0@2  (or (gamma_load64 Gamma_mem@4 R0@5) (L mem@4 R0@5)))) (= (memory_load8_le mem@4 #x00000000000009b8) #x01)) (and (= (memory_load8_le mem@4 #x00000000000009b9) #x00) (= (memory_load8_le mem@4 #x00000000000009ba) #x02))) (and (and (and (= (memory_load8_le mem@4 #x00000000000009bb) #x00) (= (memory_load8_le mem@4 #x000000000001fdc8) #xd0)) (and (= (memory_load8_le mem@4 #x000000000001fdc9) #x08) (= (memory_load8_le mem@4 #x000000000001fdca) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001fdcb) #x00) (= (memory_load8_le mem@4 #x000000000001fdcc) #x00)) (and (= (memory_load8_le mem@4 #x000000000001fdcd) #x00) (= (memory_load8_le mem@4 #x000000000001fdce) #x00)))))))) (and (and (and (and (and (and (and (= (memory_load8_le mem@4 #x000000000001fdcf) #x00) (= (memory_load8_le mem@4 #x000000000001fdd0) #x80)) (and (= (memory_load8_le mem@4 #x000000000001fdd1) #x08) (= (memory_load8_le mem@4 #x000000000001fdd2) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001fdd3) #x00) (= (memory_load8_le mem@4 #x000000000001fdd4) #x00)) (and (= (memory_load8_le mem@4 #x000000000001fdd5) #x00) (= (memory_load8_le mem@4 #x000000000001fdd6) #x00)))) (and (and (and (= (memory_load8_le mem@4 #x000000000001fdd7) #x00) (= (memory_load8_le mem@4 #x000000000001ffd8) #xd4)) (and (= (memory_load8_le mem@4 #x000000000001ffd9) #x08) (= (memory_load8_le mem@4 #x000000000001ffda) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001ffdb) #x00) (= (memory_load8_le mem@4 #x000000000001ffdc) #x00)) (and (= (memory_load8_le mem@4 #x000000000001ffdd) #x00) (= (memory_load8_le mem@4 #x000000000001ffde) #x00))))) (and (and (and (and (= (memory_load8_le mem@4 #x000000000001ffdf) #x00) (= (memory_load8_le mem@4 #x0000000000020058) #x58)) (and (= (memory_load8_le mem@4 #x0000000000020059) #x00) (= (memory_load8_le mem@4 #x000000000002005a) #x02))) (and (and (= (memory_load8_le mem@4 #x000000000002005b) #x00) (= (memory_load8_le mem@4 #x000000000002005c) #x00)) (and (= (memory_load8_le mem@4 #x000000000002005d) #x00) (= (memory_load8_le mem@4 #x000000000002005e) #x00)))) (and (and (and (= (memory_load8_le mem@4 #x000000000002005f) #x00) (= R0@7 (bvadd #x0000000000020000 #x0000000000000080))) (and (= mem@5 mem@4) (= Gamma_mem@5 Gamma_mem@4))) (and (and (= (memory_load8_le mem@5 #x00000000000009b8) #x01) (= (memory_load8_le mem@5 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@5 #x00000000000009ba) #x02) (= (memory_load8_le mem@5 #x00000000000009bb) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem@5 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@5 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@5 #x000000000001fdca) #x00) (= (memory_load8_le mem@5 #x000000000001fdcb) #x00))) (and (and (= (memory_load8_le mem@5 #x000000000001fdcc) #x00) (= (memory_load8_le mem@5 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@5 #x000000000001fdce) #x00) (= (memory_load8_le mem@5 #x000000000001fdcf) #x00)))) (and (and (and (= (memory_load8_le mem@5 #x000000000001fdd0) #x80) (= (memory_load8_le mem@5 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@5 #x000000000001fdd2) #x00) (= (memory_load8_le mem@5 #x000000000001fdd3) #x00))) (and (and (= (memory_load8_le mem@5 #x000000000001fdd4) #x00) (= (memory_load8_le mem@5 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@5 #x000000000001fdd6) #x00) (= (memory_load8_le mem@5 #x000000000001fdd7) #x00))))) (and (and (and (and (= (memory_load8_le mem@5 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@5 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@5 #x000000000001ffda) #x00) (= (memory_load8_le mem@5 #x000000000001ffdb) #x00))) (and (and (= (memory_load8_le mem@5 #x000000000001ffdc) #x00) (= (memory_load8_le mem@5 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@5 #x000000000001ffde) #x00) (= (memory_load8_le mem@5 #x000000000001ffdf) #x00)))) (and (and (and (= (memory_load8_le mem@5 #x0000000000020058) #x58) (= (memory_load8_le mem@5 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@5 #x000000000002005a) #x02) (= (memory_load8_le mem@5 #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem@5 #x000000000002005c) #x00) (= (memory_load8_le mem@5 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@5 #x000000000002005e) #x00) (= (memory_load8_le mem@5 #x000000000002005f) #x00))))))) (and (and (and (and (and (and (= R0@8 (memory_load64_le mem@5 R0@7)) (= Gamma_R0@3  (or (gamma_load64 Gamma_mem@5 R0@7) (L mem@5 R0@7)))) (= R0@9 (bvadd R0@8 #x0000000000000002))) (and (= stack@5 (memory_store64_le stack@4 (bvadd |#4@0| #x0000000000000028) R0@9)) (= Gamma_stack@5 (gamma_store64 Gamma_stack@4 (bvadd |#4@0| #x0000000000000028) Gamma_R0@3)))) (and (and (= R0@10 (memory_load64_le stack@5 (bvadd |#4@0| #x0000000000000028))) (= Gamma_R0@4 (gamma_load64 Gamma_stack@5 (bvadd |#4@0| #x0000000000000028)))) (= mem@6 mem@5))) (and (and (and (= Gamma_mem@6 Gamma_mem@5) (= (memory_load8_le mem@6 #x00000000000009b8) #x01)) (and (= (memory_load8_le mem@6 #x00000000000009b9) #x00) (= (memory_load8_le mem@6 #x00000000000009ba) #x02))) (and (and (= (memory_load8_le mem@6 #x00000000000009bb) #x00) (= (memory_load8_le mem@6 #x000000000001fdc8) #xd0)) (and (= (memory_load8_le mem@6 #x000000000001fdc9) #x08) (= (memory_load8_le mem@6 #x000000000001fdca) #x00))))) (and (and (and (and (and (= (memory_load8_le mem@6 #x000000000001fdcb) #x00) (= (memory_load8_le mem@6 #x000000000001fdcc) #x00)) (and (= (memory_load8_le mem@6 #x000000000001fdcd) #x00) (= (memory_load8_le mem@6 #x000000000001fdce) #x00))) (and (and (= (memory_load8_le mem@6 #x000000000001fdcf) #x00) (= (memory_load8_le mem@6 #x000000000001fdd0) #x80)) (and (= (memory_load8_le mem@6 #x000000000001fdd1) #x08) (= (memory_load8_le mem@6 #x000000000001fdd2) #x00)))) (and (and (and (= (memory_load8_le mem@6 #x000000000001fdd3) #x00) (= (memory_load8_le mem@6 #x000000000001fdd4) #x00)) (and (= (memory_load8_le mem@6 #x000000000001fdd5) #x00) (= (memory_load8_le mem@6 #x000000000001fdd6) #x00))) (and (and (= (memory_load8_le mem@6 #x000000000001fdd7) #x00) (= (memory_load8_le mem@6 #x000000000001ffd8) #xd4)) (and (= (memory_load8_le mem@6 #x000000000001ffd9) #x08) (= (memory_load8_le mem@6 #x000000000001ffda) #x00))))) (and (and (and (and (= (memory_load8_le mem@6 #x000000000001ffdb) #x00) (= (memory_load8_le mem@6 #x000000000001ffdc) #x00)) (and (= (memory_load8_le mem@6 #x000000000001ffdd) #x00) (= (memory_load8_le mem@6 #x000000000001ffde) #x00))) (and (and (= (memory_load8_le mem@6 #x000000000001ffdf) #x00) (= (memory_load8_le mem@6 #x0000000000020058) #x58)) (and (= (memory_load8_le mem@6 #x0000000000020059) #x00) (= (memory_load8_le mem@6 #x000000000002005a) #x02)))) (and (and (and (= (memory_load8_le mem@6 #x000000000002005b) #x00) (= (memory_load8_le mem@6 #x000000000002005c) #x00)) (and (= (memory_load8_le mem@6 #x000000000002005d) #x00) (= (memory_load8_le mem@6 #x000000000002005e) #x00))) (and (and (= (memory_load8_le mem@6 #x000000000002005f) #x00) (= (ControlFlow 0 2) (- 0 1))) (L mem@6 R0@10)))))))) true)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (= (gamma_load8 Gamma_mem $password_addr) false) (= malloc_count 0)) (and (gamma_load32 Gamma_mem (memory_load64_le mem $stext_addr)) (= R31 #x0000000000000064))) (=> (and (and (and (= (memory_load8_le mem #x0000000000020050) #x00) (= (memory_load8_le mem #x0000000000020051) #x00)) (and (= (memory_load8_le mem #x0000000000020052) #x00) (= (memory_load8_le mem #x0000000000020053) #x00))) (and (and (= (memory_load8_le mem #x0000000000020054) #x00) (= (memory_load8_le mem #x0000000000020055) #x00)) (and (= (memory_load8_le mem #x0000000000020056) #x00) (= (memory_load8_le mem #x0000000000020057) #x00)))) (=> (and (and (and (and (and (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00)) (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00)) (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020060) #x07) (= (memory_load8_le mem #x0000000000020061) #x00)) (and (= (memory_load8_le mem #x0000000000020062) #x00) (= (memory_load8_le mem #x0000000000020063) #x00))) (and (and (= (memory_load8_le mem #x0000000000020064) #x00) (= (memory_load8_le mem #x0000000000020065) #x00)) (and (= (memory_load8_le mem #x0000000000020066) #x00) (= (memory_load8_le mem #x0000000000020067) #x00))))) (and (and (and (and (= (memory_load8_le mem #x0000000000020068) #x68) (= (memory_load8_le mem #x0000000000020069) #x65)) (and (= (memory_load8_le mem #x000000000002006a) #x6c) (= (memory_load8_le mem #x000000000002006b) #x6c))) (and (and (= (memory_load8_le mem #x000000000002006c) #x6f) (= (memory_load8_le mem #x000000000002006d) #x6f)) (and (= (memory_load8_le mem #x000000000002006e) #x00) (= (memory_load8_le mem #x000000000002006f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020070) #x00) (= (memory_load8_le mem #x0000000000020071) #x00)) (and (= (memory_load8_le mem #x0000000000020072) #x00) (= (memory_load8_le mem #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem #x00000000000009b9) #x00) (= (memory_load8_le mem #x00000000000009ba) #x02)) (and (= (memory_load8_le mem #x00000000000009bb) #x00) (= (memory_load8_le mem #x000000000001fdc8) #xd0)))))) (and (and (and (and (and (= (memory_load8_le mem #x000000000001fdc9) #x08) (= (memory_load8_le mem #x000000000001fdca) #x00)) (and (= (memory_load8_le mem #x000000000001fdcb) #x00) (= (memory_load8_le mem #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdcd) #x00) (= (memory_load8_le mem #x000000000001fdce) #x00)) (and (= (memory_load8_le mem #x000000000001fdcf) #x00) (= (memory_load8_le mem #x000000000001fdd0) #x80)))) (and (and (and (= (memory_load8_le mem #x000000000001fdd1) #x08) (= (memory_load8_le mem #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem #x000000000001fdd3) #x00) (= (memory_load8_le mem #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd5) #x00) (= (memory_load8_le mem #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem #x000000000001fdd7) #x00) (= (memory_load8_le mem #x000000000001ffd8) #xd4))))) (and (and (and (and (= (memory_load8_le mem #x000000000001ffd9) #x08) (= (memory_load8_le mem #x000000000001ffda) #x00)) (and (= (memory_load8_le mem #x000000000001ffdb) #x00) (= (memory_load8_le mem #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffdd) #x00) (= (memory_load8_le mem #x000000000001ffde) #x00)) (and (= (memory_load8_le mem #x000000000001ffdf) #x00) (= (memory_load8_le mem #x0000000000020058) #x58)))) (and (and (and (= (memory_load8_le mem #x0000000000020059) #x00) (= (memory_load8_le mem #x000000000002005a) #x02)) (and (= (memory_load8_le mem #x000000000002005b) #x00) (= (memory_load8_le mem #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem #x000000000002005d) #x00) (= (memory_load8_le mem #x000000000002005e) #x00)) (and (= (memory_load8_le mem #x000000000002005f) #x00) (= (ControlFlow 0 3) 2))))))) lmain_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-info :boogie-vc-id main_split7)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 1) true)
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun gamma_store64 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#0| ((_ BitVec 64) (_ BitVec 64) Bool (Array (_ BitVec 64) Bool)) (Array (_ BitVec 64) Bool))
(declare-fun |lambda#1| ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (Array (_ BitVec 64) (_ BitVec 8))) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun L ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) Bool)
(declare-fun memory_load64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 64))
(declare-fun gamma_store8 ((Array (_ BitVec 64) Bool) (_ BitVec 64) Bool) (Array (_ BitVec 64) Bool))
(declare-fun memory_store8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 8)) (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun gamma_load64 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load32 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun gamma_load8 ((Array (_ BitVec 64) Bool) (_ BitVec 64)) Bool)
(declare-fun $password_addr () (_ BitVec 64))
(declare-fun $stext_addr () (_ BitVec 64))
(declare-fun $buf_addr () (_ BitVec 64))
(declare-fun memory_load8_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64)) (_ BitVec 8))
(declare-fun memory_store64_le ((Array (_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) (_ BitVec 64)) (Array (_ BitVec 64) (_ BitVec 8)))
(assert (forall ((gammaMap (Array (_ BitVec 64) Bool)) (index (_ BitVec 64)) (value Bool) ) (! (= (gamma_store64 gammaMap index value) (|lambda#0| index #x0000000000000008 value gammaMap))
 :qid |examplebpl.63:34|
 :skolemid |4|
 :pattern ( (gamma_store64 gammaMap index value))
)))
(assert (forall ((|l#0| (_ BitVec 64)) (|l#1| (_ BitVec 64)) (|l#2| (_ BitVec 64)) (|l#3| (_ BitVec 64)) (|l#4| (Array (_ BitVec 64) (_ BitVec 8))) (i (_ BitVec 64)) ) (! (= (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i) (ite (ite (bvule |l#0| (bvadd |l#0| |l#1|))  (and (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))  (or (bvule |l#0| i) (bvult i (bvadd |l#0| |l#1|)))) ((_ extract 7 0) (bvlshr |l#2| (bvmul (bvsub i |l#3|) #x0000000000000008))) (select |l#4| i)))
 :qid |examplebpl.83:57|
 :skolemid |20|
 :pattern ( (select (|lambda#1| |l#0| |l#1| |l#2| |l#3| |l#4|) i))
)))
(assert (forall ((memory (Array (_ BitVec 64) (_ BitVec 8))) (index@@0 (_ BitVec 64)) ) (! (= (L memory index@@0) false)
 :qid |examplebpl.35:22|
 :skolemid |0|
 :pattern ( (L memory index@@0))
)))
(assert (forall ((memory@@0 (Array (_ BitVec 64) (_ BitVec 8))) (index@@1 (_ BitVec 64)) ) (! (= (memory_load64_le memory@@0 index@@1) (concat (select memory@@0 (bvadd index@@1 #x0000000000000007)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000006)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000005)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000004)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000003)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000002)) (concat (select memory@@0 (bvadd index@@1 #x0000000000000001)) (select memory@@0 index@@1)))))))))
 :qid |examplebpl.75:37|
 :skolemid |6|
 :pattern ( (memory_load64_le memory@@0 index@@1))
)))
(assert (forall ((gammaMap@@0 (Array (_ BitVec 64) Bool)) (index@@2 (_ BitVec 64)) (value@@0 Bool) ) (! (= (gamma_store8 gammaMap@@0 index@@2 value@@0) (store gammaMap@@0 index@@2 value@@0))
 :qid |examplebpl.67:33|
 :skolemid |5|
 :pattern ( (gamma_store8 gammaMap@@0 index@@2 value@@0))
)))
(assert (forall ((memory@@1 (Array (_ BitVec 64) (_ BitVec 8))) (index@@3 (_ BitVec 64)) (value@@1 (_ BitVec 8)) ) (! (= (memory_store8_le memory@@1 index@@3 value@@1) (store memory@@1 index@@3 value@@1))
 :qid |examplebpl.87:37|
 :skolemid |9|
 :pattern ( (memory_store8_le memory@@1 index@@3 value@@1))
)))
(assert (forall ((|l#0@@0| (_ BitVec 64)) (|l#1@@0| (_ BitVec 64)) (|l#2@@0| Bool) (|l#3@@0| (Array (_ BitVec 64) Bool)) (i@@0 (_ BitVec 64)) ) (! (= (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0) (ite (ite (bvule |l#0@@0| (bvadd |l#0@@0| |l#1@@0|))  (and (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))  (or (bvule |l#0@@0| i@@0) (bvult i@@0 (bvadd |l#0@@0| |l#1@@0|)))) |l#2@@0| (select |l#3@@0| i@@0)))
 :qid |examplebpl.63:56|
 :skolemid |19|
 :pattern ( (select (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) i@@0))
)))
(assert (forall ((gammaMap@@1 (Array (_ BitVec 64) Bool)) (index@@4 (_ BitVec 64)) ) (! (= (gamma_load64 gammaMap@@1 index@@4)  (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000007)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000006)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000005)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000004)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000003)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000002)) (and (select gammaMap@@1 (bvadd index@@4 #x0000000000000001)) (select gammaMap@@1 index@@4)))))))))
 :qid |examplebpl.55:33|
 :skolemid |2|
 :pattern ( (gamma_load64 gammaMap@@1 index@@4))
)))
(assert (forall ((gammaMap@@2 (Array (_ BitVec 64) Bool)) (index@@5 (_ BitVec 64)) ) (! (= (gamma_load32 gammaMap@@2 index@@5)  (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000003)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000002)) (and (select gammaMap@@2 (bvadd index@@5 #x0000000000000001)) (select gammaMap@@2 index@@5)))))
 :qid |examplebpl.51:33|
 :skolemid |1|
 :pattern ( (gamma_load32 gammaMap@@2 index@@5))
)))
(assert (forall ((gammaMap@@3 (Array (_ BitVec 64) Bool)) (index@@6 (_ BitVec 64)) ) (! (= (gamma_load8 gammaMap@@3 index@@6) (select gammaMap@@3 index@@6))
 :qid |examplebpl.59:32|
 :skolemid |3|
 :pattern ( (gamma_load8 gammaMap@@3 index@@6))
)))
(assert (= $password_addr #x0000000000020060))
(assert (= $stext_addr #x0000000000020068))
(assert (= $buf_addr #x0000000000020080))
(assert (forall ((memory@@2 (Array (_ BitVec 64) (_ BitVec 8))) (index@@7 (_ BitVec 64)) ) (! (= (memory_load8_le memory@@2 index@@7) (select memory@@2 index@@7))
 :qid |examplebpl.79:36|
 :skolemid |7|
 :pattern ( (memory_load8_le memory@@2 index@@7))
)))
(assert (forall ((memory@@3 (Array (_ BitVec 64) (_ BitVec 8))) (index@@8 (_ BitVec 64)) (value@@2 (_ BitVec 64)) ) (! (= (memory_store64_le memory@@3 index@@8 value@@2) (|lambda#1| index@@8 #x0000000000000008 value@@2 index@@8 memory@@3))
 :qid |examplebpl.83:38|
 :skolemid |8|
 :pattern ( (memory_store64_le memory@@3 index@@8 value@@2))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |#4@0| () (_ BitVec 64))
(declare-fun R31 () (_ BitVec 64))
(declare-fun stack@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun stack () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R29 () (_ BitVec 64))
(declare-fun Gamma_stack@0 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_stack () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R29 () Bool)
(declare-fun stack@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R30 () (_ BitVec 64))
(declare-fun Gamma_stack@1 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R30 () Bool)
(declare-fun stack@2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun R19 () (_ BitVec 64))
(declare-fun Gamma_stack@2 () (Array (_ BitVec 64) Bool))
(declare-fun Gamma_R19 () Bool)
(declare-fun stack@3 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@3 () (Array (_ BitVec 64) Bool))
(declare-fun stack@4 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@4 () (Array (_ BitVec 64) Bool))
(declare-fun mem () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_R0@0 () Bool)
(declare-fun malloc_count@0 () Int)
(declare-fun malloc_count () Int)
(declare-fun malloc_end@0 () (Array Int (_ BitVec 64)))
(declare-fun malloc_base@0 () (Array Int (_ BitVec 64)))
(declare-fun R0@0 () (_ BitVec 64))
(declare-fun malloc_base () (Array Int (_ BitVec 64)))
(declare-fun malloc_end () (Array Int (_ BitVec 64)))
(declare-fun Gamma_mem () (Array (_ BitVec 64) Bool))
(declare-fun R0@1 () (_ BitVec 64))
(declare-fun mem@0 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@0 () (Array (_ BitVec 64) Bool))
(declare-fun mem@1 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@1 () (Array (_ BitVec 64) Bool))
(declare-fun R0@2 () (_ BitVec 64))
(declare-fun mem@2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@2 () (Array (_ BitVec 64) Bool))
(declare-fun R19@0 () (_ BitVec 64))
(declare-fun Gamma_R19@0 () Bool)
(declare-fun R0@3 () (_ BitVec 64))
(declare-fun Gamma_R0@1 () Bool)
(declare-fun R0@4 () (_ BitVec 64))
(declare-fun R1@0 () (_ BitVec 64))
(declare-fun mem@3 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@3 () (Array (_ BitVec 64) Bool))
(declare-fun R0@5 () (_ BitVec 64))
(declare-fun mem@4 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@4 () (Array (_ BitVec 64) Bool))
(declare-fun R0@6 () (_ BitVec 64))
(declare-fun Gamma_R0@2 () Bool)
(declare-fun R0@7 () (_ BitVec 64))
(declare-fun mem@5 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@5 () (Array (_ BitVec 64) Bool))
(declare-fun R0@8 () (_ BitVec 64))
(declare-fun Gamma_R0@3 () Bool)
(declare-fun R0@9 () (_ BitVec 64))
(declare-fun stack@5 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_stack@5 () (Array (_ BitVec 64) Bool))
(declare-fun R0@10 () (_ BitVec 64))
(declare-fun Gamma_R0@4 () Bool)
(declare-fun mem@6 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@6 () (Array (_ BitVec 64) Bool))
(declare-fun mem@7 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@7 () (Array (_ BitVec 64) Bool))
(declare-fun R0@11 () (_ BitVec 64))
(declare-fun mem@8 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@8 () (Array (_ BitVec 64) Bool))
(declare-fun R19@1 () (_ BitVec 64))
(declare-fun Gamma_R19@1 () Bool)
(declare-fun R0@12 () (_ BitVec 64))
(declare-fun mem@9 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@9 () (Array (_ BitVec 64) Bool))
(declare-fun R0@13 () (_ BitVec 64))
(declare-fun Gamma_R0@5 () Bool)
(declare-fun Gamma_R0@6 () Bool)
(declare-fun R0@14 () (_ BitVec 64))
(declare-fun mem@10 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@10 () (Array (_ BitVec 64) Bool))
(declare-fun R0@15 () (_ BitVec 64))
(declare-fun mem@11 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun Gamma_mem@11 () (Array (_ BitVec 64) Bool))
(declare-fun R0@16 () (_ BitVec 64))
(declare-fun Gamma_R0@7 () Bool)
(set-info :boogie-vc-id main_split8)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((lmain_correct  (=> (= |#4@0| (bvadd R31 #xffffffffffffffd0)) (=> (and (and (= stack@0 (memory_store64_le stack |#4@0| R29)) (= Gamma_stack@0 (gamma_store64 Gamma_stack |#4@0| Gamma_R29))) (and (= stack@1 (memory_store64_le stack@0 (bvadd |#4@0| #x0000000000000008) R30)) (= Gamma_stack@1 (gamma_store64 Gamma_stack@0 (bvadd |#4@0| #x0000000000000008) Gamma_R30)))) (=> (and (and (and (= stack@2 (memory_store64_le stack@1 (bvadd |#4@0| #x0000000000000010) R19)) (= Gamma_stack@2 (gamma_store64 Gamma_stack@1 (bvadd |#4@0| #x0000000000000010) Gamma_R19))) (and (= stack@3 (memory_store64_le stack@2 (bvadd |#4@0| #x0000000000000028) #x0000000000000000)) (= Gamma_stack@3 (gamma_store64 Gamma_stack@2 (bvadd |#4@0| #x0000000000000028) true)))) (and (and (= stack@4 (memory_store64_le stack@3 (bvadd |#4@0| #x0000000000000020) #x0000000000000000)) (= Gamma_stack@4 (gamma_store64 Gamma_stack@3 (bvadd |#4@0| #x0000000000000020) true))) (and (bvugt #x000000000000000b #x0000000000000000) (= true true)))) (=> (and (and (and (and (and (= (memory_load64_le mem $buf_addr) (memory_load64_le mem $buf_addr)) (= (memory_load8_le mem $password_addr) (memory_load8_le mem $password_addr))) (= Gamma_R0@0 true)) (and (and (= malloc_count@0 (+ malloc_count 1)) (bvugt (select malloc_end@0 malloc_count@0) (select malloc_base@0 malloc_count@0))) (and (= R0@0 (select malloc_base@0 malloc_count@0)) (= (select malloc_end@0 malloc_count@0) (bvadd R0@0 #x000000000000000b))))) (and (and (and (forall ((i@@1 Int) ) (!  (=> (not (= i@@1 malloc_count@0)) (or (bvugt (select malloc_base@0 malloc_count@0) (select malloc_end@0 i@@1)) (bvult (select malloc_end@0 malloc_count@0) (select malloc_base@0 i@@1))))
 :qid |examplebpl.497:19|
 :skolemid |11|
)) (forall ((i@@2 Int) ) (!  (=> (not (= i@@2 malloc_count@0)) (and (= (select malloc_base@0 i@@2) (select malloc_base i@@2)) (= (select malloc_end@0 i@@2) (select malloc_end i@@2))))
 :qid |examplebpl.498:19|
 :skolemid |12|
))) (and (bvuge R0@0 #x0000000005f5e100) (forall ((i@@3 (_ BitVec 64)) ) (!  (=> (and (bvuge i@@3 R0@0) (bvult i@@3 (bvadd R0@0 #x000000000000000b))) (and (select Gamma_mem i@@3) (gamma_load8 Gamma_mem i@@3)))
 :qid |examplebpl.500:19|
 :skolemid |13|
)))) (and (and (= (memory_load8_le mem #x00000000000009b8) #x01) (= (memory_load8_le mem #x00000000000009b9) #x00)) (and (= (memory_load8_le mem #x00000000000009ba) #x02) (= (memory_load8_le mem #x00000000000009bb) #x00))))) (and (and (and (and (= (memory_load8_le mem #x000000000001fdc8) #xd0) (= (memory_load8_le mem #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem #x000000000001fdca) #x00) (= (memory_load8_le mem #x000000000001fdcb) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdcc) #x00) (= (memory_load8_le mem #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem #x000000000001fdce) #x00) (= (memory_load8_le mem #x000000000001fdcf) #x00)))) (and (and (and (= (memory_load8_le mem #x000000000001fdd0) #x80) (= (memory_load8_le mem #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem #x000000000001fdd2) #x00) (= (memory_load8_le mem #x000000000001fdd3) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd4) #x00) (= (memory_load8_le mem #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem #x000000000001fdd6) #x00) (= (memory_load8_le mem #x000000000001fdd7) #x00)))))) (=> (and (and (and (and (and (and (= (memory_load8_le mem #x000000000001ffd8) #xd4) (= (memory_load8_le mem #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem #x000000000001ffda) #x00) (= (memory_load8_le mem #x000000000001ffdb) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffdc) #x00) (= (memory_load8_le mem #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem #x000000000001ffde) #x00) (= (memory_load8_le mem #x000000000001ffdf) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00)) (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00)) (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00))))) (and (and (and (and (= R0@1 (bvadd #x0000000000020000 #x0000000000000080)) (= mem@0 mem)) (and (= Gamma_mem@0 Gamma_mem) (= (memory_load8_le mem@0 #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem@0 #x00000000000009b9) #x00) (= (memory_load8_le mem@0 #x00000000000009ba) #x02)) (and (= (memory_load8_le mem@0 #x00000000000009bb) #x00) (= (memory_load8_le mem@0 #x000000000001fdc8) #xd0)))) (and (and (and (= (memory_load8_le mem@0 #x000000000001fdc9) #x08) (= (memory_load8_le mem@0 #x000000000001fdca) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdcb) #x00) (= (memory_load8_le mem@0 #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdcd) #x00) (= (memory_load8_le mem@0 #x000000000001fdce) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdcf) #x00) (= (memory_load8_le mem@0 #x000000000001fdd0) #x80)))))) (and (and (and (and (and (= (memory_load8_le mem@0 #x000000000001fdd1) #x08) (= (memory_load8_le mem@0 #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdd3) #x00) (= (memory_load8_le mem@0 #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001fdd5) #x00) (= (memory_load8_le mem@0 #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem@0 #x000000000001fdd7) #x00) (= (memory_load8_le mem@0 #x000000000001ffd8) #xd4)))) (and (and (and (= (memory_load8_le mem@0 #x000000000001ffd9) #x08) (= (memory_load8_le mem@0 #x000000000001ffda) #x00)) (and (= (memory_load8_le mem@0 #x000000000001ffdb) #x00) (= (memory_load8_le mem@0 #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000001ffdd) #x00) (= (memory_load8_le mem@0 #x000000000001ffde) #x00)) (and (= (memory_load8_le mem@0 #x000000000001ffdf) #x00) (= (memory_load8_le mem@0 #x0000000000020058) #x58))))) (and (and (and (and (= (memory_load8_le mem@0 #x0000000000020059) #x00) (= (memory_load8_le mem@0 #x000000000002005a) #x02)) (and (= (memory_load8_le mem@0 #x000000000002005b) #x00) (= (memory_load8_le mem@0 #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem@0 #x000000000002005d) #x00) (= (memory_load8_le mem@0 #x000000000002005e) #x00)) (and (= (memory_load8_le mem@0 #x000000000002005f) #x00) (=> (L mem@0 R0@1) Gamma_R0@0)))) (and (and (and (= mem@1 (memory_store64_le mem@0 R0@1 R0@0)) (= Gamma_mem@1 (gamma_store64 Gamma_mem@0 R0@1 Gamma_R0@0))) (= R0@2 (bvadd #x0000000000020000 #x0000000000000080))) (and (= mem@2 mem@1) (= Gamma_mem@2 Gamma_mem@1)))))) (=> (and (and (and (and (and (and (and (and (= (memory_load8_le mem@2 #x00000000000009b8) #x01) (= (memory_load8_le mem@2 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@2 #x00000000000009ba) #x02) (= (memory_load8_le mem@2 #x00000000000009bb) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@2 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdca) #x00) (= (memory_load8_le mem@2 #x000000000001fdcb) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000001fdcc) #x00) (= (memory_load8_le mem@2 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdce) #x00) (= (memory_load8_le mem@2 #x000000000001fdcf) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdd0) #x80) (= (memory_load8_le mem@2 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdd2) #x00) (= (memory_load8_le mem@2 #x000000000001fdd3) #x00))))) (and (and (and (and (= (memory_load8_le mem@2 #x000000000001fdd4) #x00) (= (memory_load8_le mem@2 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdd6) #x00) (= (memory_load8_le mem@2 #x000000000001fdd7) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@2 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001ffda) #x00) (= (memory_load8_le mem@2 #x000000000001ffdb) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000001ffdc) #x00) (= (memory_load8_le mem@2 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001ffde) #x00) (= (memory_load8_le mem@2 #x000000000001ffdf) #x00))) (and (and (= (memory_load8_le mem@2 #x0000000000020058) #x58) (= (memory_load8_le mem@2 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005a) #x02) (= (memory_load8_le mem@2 #x000000000002005b) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem@2 #x000000000002005c) #x00) (= (memory_load8_le mem@2 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005e) #x00) (= (memory_load8_le mem@2 #x000000000002005f) #x00))) (and (and (= R19@0 (memory_load64_le mem@2 R0@2)) (= Gamma_R19@0  (or (gamma_load64 Gamma_mem@2 R0@2) (L mem@2 R0@2)))) (= R0@3 (bvadd #x0000000000020000 #x0000000000000068)))) (and (and (and (= (memory_load64_le mem@2 $buf_addr) (memory_load64_le mem@2 $buf_addr)) (= (memory_load8_le mem@2 $password_addr) (memory_load8_le mem@2 $password_addr))) (= (memory_load8_le mem@2 $stext_addr) (memory_load8_le mem@2 $stext_addr))) (and (and (= Gamma_R0@1 true) (forall ((i@@4 (_ BitVec 64)) ) (!  (=> (and (bvule R0@3 i@@4) (bvult i@@4 (bvadd R0@3 R0@4))) (not (= (select mem@2 i@@4) #x00)))
 :qid |examplebpl.812:19|
 :skolemid |18|
))) (and (= (memory_load8_le mem@2 (bvadd R0@3 R0@4)) #x00) (bvult R0@3 (bvadd (bvadd R0@3 R0@4) #x0000000000000001)))))) (and (and (and (and (= (memory_load8_le mem@2 #x00000000000009b8) #x01) (= (memory_load8_le mem@2 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@2 #x00000000000009ba) #x02) (= (memory_load8_le mem@2 #x00000000000009bb) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@2 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdca) #x00) (= (memory_load8_le mem@2 #x000000000001fdcb) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000001fdcc) #x00) (= (memory_load8_le mem@2 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdce) #x00) (= (memory_load8_le mem@2 #x000000000001fdcf) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001fdd0) #x80) (= (memory_load8_le mem@2 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@2 #x000000000001fdd2) #x00) (= (memory_load8_le mem@2 #x000000000001fdd3) #x00))))))) (and (and (and (and (and (and (= (memory_load8_le mem@2 #x000000000001fdd4) #x00) (= (memory_load8_le mem@2 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@2 #x000000000001fdd6) #x00) (= (memory_load8_le mem@2 #x000000000001fdd7) #x00))) (and (and (= (memory_load8_le mem@2 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@2 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@2 #x000000000001ffda) #x00) (= (memory_load8_le mem@2 #x000000000001ffdb) #x00)))) (and (and (and (= (memory_load8_le mem@2 #x000000000001ffdc) #x00) (= (memory_load8_le mem@2 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@2 #x000000000001ffde) #x00) (= (memory_load8_le mem@2 #x000000000001ffdf) #x00))) (and (and (= (memory_load8_le mem@2 #x0000000000020058) #x58) (= (memory_load8_le mem@2 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005a) #x02) (= (memory_load8_le mem@2 #x000000000002005b) #x00))))) (and (and (and (and (= (memory_load8_le mem@2 #x000000000002005c) #x00) (= (memory_load8_le mem@2 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@2 #x000000000002005e) #x00) (= (memory_load8_le mem@2 #x000000000002005f) #x00))) (and (and (= R1@0 (bvadd #x0000000000020000 #x0000000000000068)) (or (bvugt R19@0 (bvadd R1@0 R0@4)) (bvugt R1@0 (bvadd R19@0 R0@4)))) (and (bvugt (bvadd R19@0 R0@4) R19@0) (bvugt (bvadd R1@0 R0@4) R1@0)))) (and (and (and (= (memory_load64_le mem@3 $buf_addr) (memory_load64_le mem@2 $buf_addr)) (= (memory_load8_le mem@3 $password_addr) (memory_load8_le mem@2 $password_addr))) (forall ((i@@5 (_ BitVec 64)) ) (! (= (select Gamma_mem@3 i@@5) (ite  (and (bvule R19@0 i@@5) (bvult i@@5 (bvadd R19@0 R0@4))) (gamma_load8 Gamma_mem@3 (bvadd (bvsub i@@5 R19@0) R1@0)) (gamma_load8 Gamma_mem@2 i@@5)))
 :qid |examplebpl.579:19|
 :skolemid |14|
))) (and (and (forall ((i@@6 (_ BitVec 64)) ) (! (= (select mem@3 i@@6) (ite  (and (bvule R19@0 i@@6) (bvult i@@6 (bvadd R19@0 R0@4))) (memory_load8_le mem@3 (bvadd (bvsub i@@6 R19@0) R1@0)) (memory_load8_le mem@2 i@@6)))
 :qid |examplebpl.580:19|
 :skolemid |15|
)) (= (memory_load8_le mem@3 #x00000000000009b8) #x01)) (and (= (memory_load8_le mem@3 #x00000000000009b9) #x00) (= (memory_load8_le mem@3 #x00000000000009ba) #x02)))))) (and (and (and (and (and (= (memory_load8_le mem@3 #x00000000000009bb) #x00) (= (memory_load8_le mem@3 #x000000000001fdc8) #xd0)) (and (= (memory_load8_le mem@3 #x000000000001fdc9) #x08) (= (memory_load8_le mem@3 #x000000000001fdca) #x00))) (and (and (= (memory_load8_le mem@3 #x000000000001fdcb) #x00) (= (memory_load8_le mem@3 #x000000000001fdcc) #x00)) (and (= (memory_load8_le mem@3 #x000000000001fdcd) #x00) (= (memory_load8_le mem@3 #x000000000001fdce) #x00)))) (and (and (and (= (memory_load8_le mem@3 #x000000000001fdcf) #x00) (= (memory_load8_le mem@3 #x000000000001fdd0) #x80)) (and (= (memory_load8_le mem@3 #x000000000001fdd1) #x08) (= (memory_load8_le mem@3 #x000000000001fdd2) #x00))) (and (and (= (memory_load8_le mem@3 #x000000000001fdd3) #x00) (= (memory_load8_le mem@3 #x000000000001fdd4) #x00)) (and (= (memory_load8_le mem@3 #x000000000001fdd5) #x00) (= (memory_load8_le mem@3 #x000000000001fdd6) #x00))))) (and (and (and (and (= (memory_load8_le mem@3 #x000000000001fdd7) #x00) (= (memory_load8_le mem@3 #x000000000001ffd8) #xd4)) (and (= (memory_load8_le mem@3 #x000000000001ffd9) #x08) (= (memory_load8_le mem@3 #x000000000001ffda) #x00))) (and (and (= (memory_load8_le mem@3 #x000000000001ffdb) #x00) (= (memory_load8_le mem@3 #x000000000001ffdc) #x00)) (and (= (memory_load8_le mem@3 #x000000000001ffdd) #x00) (= (memory_load8_le mem@3 #x000000000001ffde) #x00)))) (and (and (and (= (memory_load8_le mem@3 #x000000000001ffdf) #x00) (= (memory_load8_le mem@3 #x0000000000020058) #x58)) (and (= (memory_load8_le mem@3 #x0000000000020059) #x00) (= (memory_load8_le mem@3 #x000000000002005a) #x02))) (and (and (= (memory_load8_le mem@3 #x000000000002005b) #x00) (= (memory_load8_le mem@3 #x000000000002005c) #x00)) (and (= (memory_load8_le mem@3 #x000000000002005d) #x00) (= (memory_load8_le mem@3 #x000000000002005e) #x00)))))))) (and (and (and (and (and (and (and (= (memory_load8_le mem@3 #x000000000002005f) #x00) (= R0@5 (bvadd #x0000000000020000 #x0000000000000080))) (and (= mem@4 mem@3) (= Gamma_mem@4 Gamma_mem@3))) (and (and (= (memory_load8_le mem@4 #x00000000000009b8) #x01) (= (memory_load8_le mem@4 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@4 #x00000000000009ba) #x02) (= (memory_load8_le mem@4 #x00000000000009bb) #x00)))) (and (and (and (= (memory_load8_le mem@4 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@4 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@4 #x000000000001fdca) #x00) (= (memory_load8_le mem@4 #x000000000001fdcb) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001fdcc) #x00) (= (memory_load8_le mem@4 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@4 #x000000000001fdce) #x00) (= (memory_load8_le mem@4 #x000000000001fdcf) #x00))))) (and (and (and (and (= (memory_load8_le mem@4 #x000000000001fdd0) #x80) (= (memory_load8_le mem@4 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@4 #x000000000001fdd2) #x00) (= (memory_load8_le mem@4 #x000000000001fdd3) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001fdd4) #x00) (= (memory_load8_le mem@4 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@4 #x000000000001fdd6) #x00) (= (memory_load8_le mem@4 #x000000000001fdd7) #x00)))) (and (and (and (= (memory_load8_le mem@4 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@4 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@4 #x000000000001ffda) #x00) (= (memory_load8_le mem@4 #x000000000001ffdb) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001ffdc) #x00) (= (memory_load8_le mem@4 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@4 #x000000000001ffde) #x00) (= (memory_load8_le mem@4 #x000000000001ffdf) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem@4 #x0000000000020058) #x58) (= (memory_load8_le mem@4 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@4 #x000000000002005a) #x02) (= (memory_load8_le mem@4 #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000002005c) #x00) (= (memory_load8_le mem@4 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@4 #x000000000002005e) #x00) (= (memory_load8_le mem@4 #x000000000002005f) #x00)))) (and (and (and (= R0@6 (memory_load64_le mem@4 R0@5)) (= Gamma_R0@2  (or (gamma_load64 Gamma_mem@4 R0@5) (L mem@4 R0@5)))) (= (memory_load8_le mem@4 #x00000000000009b8) #x01)) (and (= (memory_load8_le mem@4 #x00000000000009b9) #x00) (= (memory_load8_le mem@4 #x00000000000009ba) #x02)))) (and (and (and (and (= (memory_load8_le mem@4 #x00000000000009bb) #x00) (= (memory_load8_le mem@4 #x000000000001fdc8) #xd0)) (and (= (memory_load8_le mem@4 #x000000000001fdc9) #x08) (= (memory_load8_le mem@4 #x000000000001fdca) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001fdcb) #x00) (= (memory_load8_le mem@4 #x000000000001fdcc) #x00)) (and (= (memory_load8_le mem@4 #x000000000001fdcd) #x00) (= (memory_load8_le mem@4 #x000000000001fdce) #x00)))) (and (and (and (= (memory_load8_le mem@4 #x000000000001fdcf) #x00) (= (memory_load8_le mem@4 #x000000000001fdd0) #x80)) (and (= (memory_load8_le mem@4 #x000000000001fdd1) #x08) (= (memory_load8_le mem@4 #x000000000001fdd2) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001fdd3) #x00) (= (memory_load8_le mem@4 #x000000000001fdd4) #x00)) (and (= (memory_load8_le mem@4 #x000000000001fdd5) #x00) (= (memory_load8_le mem@4 #x000000000001fdd6) #x00))))))) (and (and (and (and (and (and (= (memory_load8_le mem@4 #x000000000001fdd7) #x00) (= (memory_load8_le mem@4 #x000000000001ffd8) #xd4)) (and (= (memory_load8_le mem@4 #x000000000001ffd9) #x08) (= (memory_load8_le mem@4 #x000000000001ffda) #x00))) (and (and (= (memory_load8_le mem@4 #x000000000001ffdb) #x00) (= (memory_load8_le mem@4 #x000000000001ffdc) #x00)) (and (= (memory_load8_le mem@4 #x000000000001ffdd) #x00) (= (memory_load8_le mem@4 #x000000000001ffde) #x00)))) (and (and (and (= (memory_load8_le mem@4 #x000000000001ffdf) #x00) (= (memory_load8_le mem@4 #x0000000000020058) #x58)) (and (= (memory_load8_le mem@4 #x0000000000020059) #x00) (= (memory_load8_le mem@4 #x000000000002005a) #x02))) (and (and (= (memory_load8_le mem@4 #x000000000002005b) #x00) (= (memory_load8_le mem@4 #x000000000002005c) #x00)) (and (= (memory_load8_le mem@4 #x000000000002005d) #x00) (= (memory_load8_le mem@4 #x000000000002005e) #x00))))) (and (and (and (and (= (memory_load8_le mem@4 #x000000000002005f) #x00) (= R0@7 (bvadd #x0000000000020000 #x0000000000000080))) (and (= mem@5 mem@4) (= Gamma_mem@5 Gamma_mem@4))) (and (and (= (memory_load8_le mem@5 #x00000000000009b8) #x01) (= (memory_load8_le mem@5 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@5 #x00000000000009ba) #x02) (= (memory_load8_le mem@5 #x00000000000009bb) #x00)))) (and (and (and (= (memory_load8_le mem@5 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@5 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@5 #x000000000001fdca) #x00) (= (memory_load8_le mem@5 #x000000000001fdcb) #x00))) (and (and (= (memory_load8_le mem@5 #x000000000001fdcc) #x00) (= (memory_load8_le mem@5 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@5 #x000000000001fdce) #x00) (= (memory_load8_le mem@5 #x000000000001fdcf) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem@5 #x000000000001fdd0) #x80) (= (memory_load8_le mem@5 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@5 #x000000000001fdd2) #x00) (= (memory_load8_le mem@5 #x000000000001fdd3) #x00))) (and (and (= (memory_load8_le mem@5 #x000000000001fdd4) #x00) (= (memory_load8_le mem@5 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@5 #x000000000001fdd6) #x00) (= (memory_load8_le mem@5 #x000000000001fdd7) #x00)))) (and (and (and (= (memory_load8_le mem@5 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@5 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@5 #x000000000001ffda) #x00) (= (memory_load8_le mem@5 #x000000000001ffdb) #x00))) (and (and (= (memory_load8_le mem@5 #x000000000001ffdc) #x00) (= (memory_load8_le mem@5 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@5 #x000000000001ffde) #x00) (= (memory_load8_le mem@5 #x000000000001ffdf) #x00))))) (and (and (and (and (= (memory_load8_le mem@5 #x0000000000020058) #x58) (= (memory_load8_le mem@5 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@5 #x000000000002005a) #x02) (= (memory_load8_le mem@5 #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem@5 #x000000000002005c) #x00) (= (memory_load8_le mem@5 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@5 #x000000000002005e) #x00) (= (memory_load8_le mem@5 #x000000000002005f) #x00)))) (and (and (and (= R0@8 (memory_load64_le mem@5 R0@7)) (= Gamma_R0@3  (or (gamma_load64 Gamma_mem@5 R0@7) (L mem@5 R0@7)))) (= R0@9 (bvadd R0@8 #x0000000000000002))) (and (= stack@5 (memory_store64_le stack@4 (bvadd |#4@0| #x0000000000000028) R0@9)) (= Gamma_stack@5 (gamma_store64 Gamma_stack@4 (bvadd |#4@0| #x0000000000000028) Gamma_R0@3))))))))) (=> (and (and (and (and (and (and (and (and (and (= R0@10 (memory_load64_le stack@5 (bvadd |#4@0| #x0000000000000028))) (= Gamma_R0@4 (gamma_load64 Gamma_stack@5 (bvadd |#4@0| #x0000000000000028)))) (= mem@6 mem@5)) (and (= Gamma_mem@6 Gamma_mem@5) (= (memory_load8_le mem@6 #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem@6 #x00000000000009b9) #x00) (= (memory_load8_le mem@6 #x00000000000009ba) #x02)) (and (= (memory_load8_le mem@6 #x00000000000009bb) #x00) (= (memory_load8_le mem@6 #x000000000001fdc8) #xd0)))) (and (and (and (= (memory_load8_le mem@6 #x000000000001fdc9) #x08) (= (memory_load8_le mem@6 #x000000000001fdca) #x00)) (and (= (memory_load8_le mem@6 #x000000000001fdcb) #x00) (= (memory_load8_le mem@6 #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem@6 #x000000000001fdcd) #x00) (= (memory_load8_le mem@6 #x000000000001fdce) #x00)) (and (= (memory_load8_le mem@6 #x000000000001fdcf) #x00) (= (memory_load8_le mem@6 #x000000000001fdd0) #x80))))) (and (and (and (and (= (memory_load8_le mem@6 #x000000000001fdd1) #x08) (= (memory_load8_le mem@6 #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem@6 #x000000000001fdd3) #x00) (= (memory_load8_le mem@6 #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem@6 #x000000000001fdd5) #x00) (= (memory_load8_le mem@6 #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem@6 #x000000000001fdd7) #x00) (= (memory_load8_le mem@6 #x000000000001ffd8) #xd4)))) (and (and (and (= (memory_load8_le mem@6 #x000000000001ffd9) #x08) (= (memory_load8_le mem@6 #x000000000001ffda) #x00)) (and (= (memory_load8_le mem@6 #x000000000001ffdb) #x00) (= (memory_load8_le mem@6 #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem@6 #x000000000001ffdd) #x00) (= (memory_load8_le mem@6 #x000000000001ffde) #x00)) (and (= (memory_load8_le mem@6 #x000000000001ffdf) #x00) (= (memory_load8_le mem@6 #x0000000000020058) #x58)))))) (and (and (and (and (and (= (memory_load8_le mem@6 #x0000000000020059) #x00) (= (memory_load8_le mem@6 #x000000000002005a) #x02)) (and (= (memory_load8_le mem@6 #x000000000002005b) #x00) (= (memory_load8_le mem@6 #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem@6 #x000000000002005d) #x00) (= (memory_load8_le mem@6 #x000000000002005e) #x00)) (and (= (memory_load8_le mem@6 #x000000000002005f) #x00) (=> (L mem@6 R0@10) true)))) (and (and (and (= mem@7 (memory_store8_le mem@6 R0@10 #x00)) (= Gamma_mem@7 (gamma_store8 Gamma_mem@6 R0@10 true))) (= R0@11 (bvadd #x0000000000020000 #x0000000000000080))) (and (= mem@8 mem@7) (= Gamma_mem@8 Gamma_mem@7)))) (and (and (and (and (= (memory_load8_le mem@8 #x00000000000009b8) #x01) (= (memory_load8_le mem@8 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@8 #x00000000000009ba) #x02) (= (memory_load8_le mem@8 #x00000000000009bb) #x00))) (and (and (= (memory_load8_le mem@8 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@8 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@8 #x000000000001fdca) #x00) (= (memory_load8_le mem@8 #x000000000001fdcb) #x00)))) (and (and (and (= (memory_load8_le mem@8 #x000000000001fdcc) #x00) (= (memory_load8_le mem@8 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@8 #x000000000001fdce) #x00) (= (memory_load8_le mem@8 #x000000000001fdcf) #x00))) (and (and (= (memory_load8_le mem@8 #x000000000001fdd0) #x80) (= (memory_load8_le mem@8 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@8 #x000000000001fdd2) #x00) (= (memory_load8_le mem@8 #x000000000001fdd3) #x00))))))) (and (and (and (and (and (and (= (memory_load8_le mem@8 #x000000000001fdd4) #x00) (= (memory_load8_le mem@8 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@8 #x000000000001fdd6) #x00) (= (memory_load8_le mem@8 #x000000000001fdd7) #x00))) (and (and (= (memory_load8_le mem@8 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@8 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@8 #x000000000001ffda) #x00) (= (memory_load8_le mem@8 #x000000000001ffdb) #x00)))) (and (and (and (= (memory_load8_le mem@8 #x000000000001ffdc) #x00) (= (memory_load8_le mem@8 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@8 #x000000000001ffde) #x00) (= (memory_load8_le mem@8 #x000000000001ffdf) #x00))) (and (and (= (memory_load8_le mem@8 #x0000000000020058) #x58) (= (memory_load8_le mem@8 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@8 #x000000000002005a) #x02) (= (memory_load8_le mem@8 #x000000000002005b) #x00))))) (and (and (and (and (= (memory_load8_le mem@8 #x000000000002005c) #x00) (= (memory_load8_le mem@8 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@8 #x000000000002005e) #x00) (= (memory_load8_le mem@8 #x000000000002005f) #x00))) (and (and (= R19@1 (memory_load64_le mem@8 R0@11)) (= Gamma_R19@1  (or (gamma_load64 Gamma_mem@8 R0@11) (L mem@8 R0@11)))) (= R0@12 (bvadd #x0000000000020000 #x0000000000000080)))) (and (and (and (= mem@9 mem@8) (= Gamma_mem@9 Gamma_mem@8)) (and (= (memory_load8_le mem@9 #x00000000000009b8) #x01) (= (memory_load8_le mem@9 #x00000000000009b9) #x00))) (and (and (= (memory_load8_le mem@9 #x00000000000009ba) #x02) (= (memory_load8_le mem@9 #x00000000000009bb) #x00)) (and (= (memory_load8_le mem@9 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@9 #x000000000001fdc9) #x08)))))) (and (and (and (and (and (= (memory_load8_le mem@9 #x000000000001fdca) #x00) (= (memory_load8_le mem@9 #x000000000001fdcb) #x00)) (and (= (memory_load8_le mem@9 #x000000000001fdcc) #x00) (= (memory_load8_le mem@9 #x000000000001fdcd) #x00))) (and (and (= (memory_load8_le mem@9 #x000000000001fdce) #x00) (= (memory_load8_le mem@9 #x000000000001fdcf) #x00)) (and (= (memory_load8_le mem@9 #x000000000001fdd0) #x80) (= (memory_load8_le mem@9 #x000000000001fdd1) #x08)))) (and (and (and (= (memory_load8_le mem@9 #x000000000001fdd2) #x00) (= (memory_load8_le mem@9 #x000000000001fdd3) #x00)) (and (= (memory_load8_le mem@9 #x000000000001fdd4) #x00) (= (memory_load8_le mem@9 #x000000000001fdd5) #x00))) (and (and (= (memory_load8_le mem@9 #x000000000001fdd6) #x00) (= (memory_load8_le mem@9 #x000000000001fdd7) #x00)) (and (= (memory_load8_le mem@9 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@9 #x000000000001ffd9) #x08))))) (and (and (and (and (= (memory_load8_le mem@9 #x000000000001ffda) #x00) (= (memory_load8_le mem@9 #x000000000001ffdb) #x00)) (and (= (memory_load8_le mem@9 #x000000000001ffdc) #x00) (= (memory_load8_le mem@9 #x000000000001ffdd) #x00))) (and (and (= (memory_load8_le mem@9 #x000000000001ffde) #x00) (= (memory_load8_le mem@9 #x000000000001ffdf) #x00)) (and (= (memory_load8_le mem@9 #x0000000000020058) #x58) (= (memory_load8_le mem@9 #x0000000000020059) #x00)))) (and (and (and (= (memory_load8_le mem@9 #x000000000002005a) #x02) (= (memory_load8_le mem@9 #x000000000002005b) #x00)) (and (= (memory_load8_le mem@9 #x000000000002005c) #x00) (= (memory_load8_le mem@9 #x000000000002005d) #x00))) (and (and (= (memory_load8_le mem@9 #x000000000002005e) #x00) (= (memory_load8_le mem@9 #x000000000002005f) #x00)) (and (= R0@13 (memory_load64_le mem@9 R0@12)) (= Gamma_R0@5  (or (gamma_load64 Gamma_mem@9 R0@12) (L mem@9 R0@12)))))))))) (and (and (and (and (and (and (and (= (memory_load64_le mem@9 $buf_addr) (memory_load64_le mem@9 $buf_addr)) (= (memory_load8_le mem@9 $password_addr) (memory_load8_le mem@9 $password_addr))) (= (memory_load8_le mem@9 $stext_addr) (memory_load8_le mem@9 $stext_addr))) (and (and (= Gamma_R0@6 true) (forall ((i@@7 (_ BitVec 64)) ) (!  (=> (and (bvule R0@13 i@@7) (bvult i@@7 (bvadd R0@13 R0@14))) (not (= (select mem@9 i@@7) #x00)))
 :qid |examplebpl.812:19|
 :skolemid |18|
))) (and (= (memory_load8_le mem@9 (bvadd R0@13 R0@14)) #x00) (bvult R0@13 (bvadd (bvadd R0@13 R0@14) #x0000000000000001))))) (and (and (and (= (memory_load8_le mem@9 #x00000000000009b8) #x01) (= (memory_load8_le mem@9 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@9 #x00000000000009ba) #x02) (= (memory_load8_le mem@9 #x00000000000009bb) #x00))) (and (and (= (memory_load8_le mem@9 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@9 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@9 #x000000000001fdca) #x00) (= (memory_load8_le mem@9 #x000000000001fdcb) #x00))))) (and (and (and (and (= (memory_load8_le mem@9 #x000000000001fdcc) #x00) (= (memory_load8_le mem@9 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@9 #x000000000001fdce) #x00) (= (memory_load8_le mem@9 #x000000000001fdcf) #x00))) (and (and (= (memory_load8_le mem@9 #x000000000001fdd0) #x80) (= (memory_load8_le mem@9 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@9 #x000000000001fdd2) #x00) (= (memory_load8_le mem@9 #x000000000001fdd3) #x00)))) (and (and (and (= (memory_load8_le mem@9 #x000000000001fdd4) #x00) (= (memory_load8_le mem@9 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@9 #x000000000001fdd6) #x00) (= (memory_load8_le mem@9 #x000000000001fdd7) #x00))) (and (and (= (memory_load8_le mem@9 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@9 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@9 #x000000000001ffda) #x00) (= (memory_load8_le mem@9 #x000000000001ffdb) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem@9 #x000000000001ffdc) #x00) (= (memory_load8_le mem@9 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@9 #x000000000001ffde) #x00) (= (memory_load8_le mem@9 #x000000000001ffdf) #x00))) (and (and (= (memory_load8_le mem@9 #x0000000000020058) #x58) (= (memory_load8_le mem@9 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@9 #x000000000002005a) #x02) (= (memory_load8_le mem@9 #x000000000002005b) #x00)))) (and (and (and (= (memory_load8_le mem@9 #x000000000002005c) #x00) (= (memory_load8_le mem@9 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@9 #x000000000002005e) #x00) (= (memory_load8_le mem@9 #x000000000002005f) #x00))) (and (and (= (memory_load64_le mem@10 $buf_addr) (memory_load64_le mem@9 $buf_addr)) (= (memory_load8_le mem@10 $password_addr) (memory_load8_le mem@9 $password_addr))) (forall ((i@@8 (_ BitVec 64)) ) (! (= (select Gamma_mem@10 i@@8) (ite  (and (bvule R19@1 i@@8) (bvult i@@8 (bvadd R19@1 R0@14))) true (gamma_load8 Gamma_mem@9 i@@8)))
 :qid |examplebpl.658:19|
 :skolemid |16|
))))) (and (and (and (and (forall ((i@@9 (_ BitVec 64)) ) (! (= (select mem@10 i@@9) (ite  (and (bvule R19@1 i@@9) (bvult i@@9 (bvadd R19@1 R0@14))) ((_ extract 7 0) #x0000000000000001) (memory_load8_le mem@9 i@@9)))
 :qid |examplebpl.659:19|
 :skolemid |17|
)) (= (memory_load8_le mem@10 #x00000000000009b8) #x01)) (and (= (memory_load8_le mem@10 #x00000000000009b9) #x00) (= (memory_load8_le mem@10 #x00000000000009ba) #x02))) (and (and (= (memory_load8_le mem@10 #x00000000000009bb) #x00) (= (memory_load8_le mem@10 #x000000000001fdc8) #xd0)) (and (= (memory_load8_le mem@10 #x000000000001fdc9) #x08) (= (memory_load8_le mem@10 #x000000000001fdca) #x00)))) (and (and (and (= (memory_load8_le mem@10 #x000000000001fdcb) #x00) (= (memory_load8_le mem@10 #x000000000001fdcc) #x00)) (and (= (memory_load8_le mem@10 #x000000000001fdcd) #x00) (= (memory_load8_le mem@10 #x000000000001fdce) #x00))) (and (and (= (memory_load8_le mem@10 #x000000000001fdcf) #x00) (= (memory_load8_le mem@10 #x000000000001fdd0) #x80)) (and (= (memory_load8_le mem@10 #x000000000001fdd1) #x08) (= (memory_load8_le mem@10 #x000000000001fdd2) #x00))))))) (and (and (and (and (and (and (= (memory_load8_le mem@10 #x000000000001fdd3) #x00) (= (memory_load8_le mem@10 #x000000000001fdd4) #x00)) (and (= (memory_load8_le mem@10 #x000000000001fdd5) #x00) (= (memory_load8_le mem@10 #x000000000001fdd6) #x00))) (and (and (= (memory_load8_le mem@10 #x000000000001fdd7) #x00) (= (memory_load8_le mem@10 #x000000000001ffd8) #xd4)) (and (= (memory_load8_le mem@10 #x000000000001ffd9) #x08) (= (memory_load8_le mem@10 #x000000000001ffda) #x00)))) (and (and (and (= (memory_load8_le mem@10 #x000000000001ffdb) #x00) (= (memory_load8_le mem@10 #x000000000001ffdc) #x00)) (and (= (memory_load8_le mem@10 #x000000000001ffdd) #x00) (= (memory_load8_le mem@10 #x000000000001ffde) #x00))) (and (and (= (memory_load8_le mem@10 #x000000000001ffdf) #x00) (= (memory_load8_le mem@10 #x0000000000020058) #x58)) (and (= (memory_load8_le mem@10 #x0000000000020059) #x00) (= (memory_load8_le mem@10 #x000000000002005a) #x02))))) (and (and (and (and (= (memory_load8_le mem@10 #x000000000002005b) #x00) (= (memory_load8_le mem@10 #x000000000002005c) #x00)) (and (= (memory_load8_le mem@10 #x000000000002005d) #x00) (= (memory_load8_le mem@10 #x000000000002005e) #x00))) (and (and (= (memory_load8_le mem@10 #x000000000002005f) #x00) (= R0@15 (bvadd #x0000000000020000 #x0000000000000080))) (and (= mem@11 mem@10) (= Gamma_mem@11 Gamma_mem@10)))) (and (and (and (= (memory_load8_le mem@11 #x00000000000009b8) #x01) (= (memory_load8_le mem@11 #x00000000000009b9) #x00)) (and (= (memory_load8_le mem@11 #x00000000000009ba) #x02) (= (memory_load8_le mem@11 #x00000000000009bb) #x00))) (and (and (= (memory_load8_le mem@11 #x000000000001fdc8) #xd0) (= (memory_load8_le mem@11 #x000000000001fdc9) #x08)) (and (= (memory_load8_le mem@11 #x000000000001fdca) #x00) (= (memory_load8_le mem@11 #x000000000001fdcb) #x00)))))) (and (and (and (and (and (= (memory_load8_le mem@11 #x000000000001fdcc) #x00) (= (memory_load8_le mem@11 #x000000000001fdcd) #x00)) (and (= (memory_load8_le mem@11 #x000000000001fdce) #x00) (= (memory_load8_le mem@11 #x000000000001fdcf) #x00))) (and (and (= (memory_load8_le mem@11 #x000000000001fdd0) #x80) (= (memory_load8_le mem@11 #x000000000001fdd1) #x08)) (and (= (memory_load8_le mem@11 #x000000000001fdd2) #x00) (= (memory_load8_le mem@11 #x000000000001fdd3) #x00)))) (and (and (and (= (memory_load8_le mem@11 #x000000000001fdd4) #x00) (= (memory_load8_le mem@11 #x000000000001fdd5) #x00)) (and (= (memory_load8_le mem@11 #x000000000001fdd6) #x00) (= (memory_load8_le mem@11 #x000000000001fdd7) #x00))) (and (and (= (memory_load8_le mem@11 #x000000000001ffd8) #xd4) (= (memory_load8_le mem@11 #x000000000001ffd9) #x08)) (and (= (memory_load8_le mem@11 #x000000000001ffda) #x00) (= (memory_load8_le mem@11 #x000000000001ffdb) #x00))))) (and (and (and (and (= (memory_load8_le mem@11 #x000000000001ffdc) #x00) (= (memory_load8_le mem@11 #x000000000001ffdd) #x00)) (and (= (memory_load8_le mem@11 #x000000000001ffde) #x00) (= (memory_load8_le mem@11 #x000000000001ffdf) #x00))) (and (and (= (memory_load8_le mem@11 #x0000000000020058) #x58) (= (memory_load8_le mem@11 #x0000000000020059) #x00)) (and (= (memory_load8_le mem@11 #x000000000002005a) #x02) (= (memory_load8_le mem@11 #x000000000002005b) #x00)))) (and (and (and (= (memory_load8_le mem@11 #x000000000002005c) #x00) (= (memory_load8_le mem@11 #x000000000002005d) #x00)) (and (= (memory_load8_le mem@11 #x000000000002005e) #x00) (= (memory_load8_le mem@11 #x000000000002005f) #x00))) (and (and (= R0@16 (memory_load64_le mem@11 R0@15)) (= Gamma_R0@7  (or (gamma_load64 Gamma_mem@11 R0@15) (L mem@11 R0@15)))) (= (ControlFlow 0 2) (- 0 1))))))))) (forall ((i@@10 Int) (j (_ BitVec 64)) ) (!  (=> (and (= (select malloc_base@0 i@@10) R0@16) (and (bvuge j R0@16) (bvult j (select malloc_end@0 i@@10)))) (select Gamma_mem@11 j))
 :qid |examplebpl.148:20|
 :skolemid |10|
)))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (= (gamma_load8 Gamma_mem $password_addr) false) (= malloc_count 0)) (and (gamma_load32 Gamma_mem (memory_load64_le mem $stext_addr)) (= R31 #x0000000000000064))) (=> (and (and (and (= (memory_load8_le mem #x0000000000020050) #x00) (= (memory_load8_le mem #x0000000000020051) #x00)) (and (= (memory_load8_le mem #x0000000000020052) #x00) (= (memory_load8_le mem #x0000000000020053) #x00))) (and (and (= (memory_load8_le mem #x0000000000020054) #x00) (= (memory_load8_le mem #x0000000000020055) #x00)) (and (= (memory_load8_le mem #x0000000000020056) #x00) (= (memory_load8_le mem #x0000000000020057) #x00)))) (=> (and (and (and (and (and (and (= (memory_load8_le mem #x0000000000020058) #x58) (= (memory_load8_le mem #x0000000000020059) #x00)) (and (= (memory_load8_le mem #x000000000002005a) #x02) (= (memory_load8_le mem #x000000000002005b) #x00))) (and (and (= (memory_load8_le mem #x000000000002005c) #x00) (= (memory_load8_le mem #x000000000002005d) #x00)) (and (= (memory_load8_le mem #x000000000002005e) #x00) (= (memory_load8_le mem #x000000000002005f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020060) #x07) (= (memory_load8_le mem #x0000000000020061) #x00)) (and (= (memory_load8_le mem #x0000000000020062) #x00) (= (memory_load8_le mem #x0000000000020063) #x00))) (and (and (= (memory_load8_le mem #x0000000000020064) #x00) (= (memory_load8_le mem #x0000000000020065) #x00)) (and (= (memory_load8_le mem #x0000000000020066) #x00) (= (memory_load8_le mem #x0000000000020067) #x00))))) (and (and (and (and (= (memory_load8_le mem #x0000000000020068) #x68) (= (memory_load8_le mem #x0000000000020069) #x65)) (and (= (memory_load8_le mem #x000000000002006a) #x6c) (= (memory_load8_le mem #x000000000002006b) #x6c))) (and (and (= (memory_load8_le mem #x000000000002006c) #x6f) (= (memory_load8_le mem #x000000000002006d) #x6f)) (and (= (memory_load8_le mem #x000000000002006e) #x00) (= (memory_load8_le mem #x000000000002006f) #x00)))) (and (and (and (= (memory_load8_le mem #x0000000000020070) #x00) (= (memory_load8_le mem #x0000000000020071) #x00)) (and (= (memory_load8_le mem #x0000000000020072) #x00) (= (memory_load8_le mem #x00000000000009b8) #x01))) (and (and (= (memory_load8_le mem #x00000000000009b9) #x00) (= (memory_load8_le mem #x00000000000009ba) #x02)) (and (= (memory_load8_le mem #x00000000000009bb) #x00) (= (memory_load8_le mem #x000000000001fdc8) #xd0)))))) (and (and (and (and (and (= (memory_load8_le mem #x000000000001fdc9) #x08) (= (memory_load8_le mem #x000000000001fdca) #x00)) (and (= (memory_load8_le mem #x000000000001fdcb) #x00) (= (memory_load8_le mem #x000000000001fdcc) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdcd) #x00) (= (memory_load8_le mem #x000000000001fdce) #x00)) (and (= (memory_load8_le mem #x000000000001fdcf) #x00) (= (memory_load8_le mem #x000000000001fdd0) #x80)))) (and (and (and (= (memory_load8_le mem #x000000000001fdd1) #x08) (= (memory_load8_le mem #x000000000001fdd2) #x00)) (and (= (memory_load8_le mem #x000000000001fdd3) #x00) (= (memory_load8_le mem #x000000000001fdd4) #x00))) (and (and (= (memory_load8_le mem #x000000000001fdd5) #x00) (= (memory_load8_le mem #x000000000001fdd6) #x00)) (and (= (memory_load8_le mem #x000000000001fdd7) #x00) (= (memory_load8_le mem #x000000000001ffd8) #xd4))))) (and (and (and (and (= (memory_load8_le mem #x000000000001ffd9) #x08) (= (memory_load8_le mem #x000000000001ffda) #x00)) (and (= (memory_load8_le mem #x000000000001ffdb) #x00) (= (memory_load8_le mem #x000000000001ffdc) #x00))) (and (and (= (memory_load8_le mem #x000000000001ffdd) #x00) (= (memory_load8_le mem #x000000000001ffde) #x00)) (and (= (memory_load8_le mem #x000000000001ffdf) #x00) (= (memory_load8_le mem #x0000000000020058) #x58)))) (and (and (and (= (memory_load8_le mem #x0000000000020059) #x00) (= (memory_load8_le mem #x000000000002005a) #x02)) (and (= (memory_load8_le mem #x000000000002005b) #x00) (= (memory_load8_le mem #x000000000002005c) #x00))) (and (and (= (memory_load8_le mem #x000000000002005d) #x00) (= (memory_load8_le mem #x000000000002005e) #x00)) (and (= (memory_load8_le mem #x000000000002005f) #x00) (= (ControlFlow 0 3) 2))))))) lmain_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
