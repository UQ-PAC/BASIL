000008be: program
00000877: sub __cxa_finalize(__cxa_finalize_result)
000008bf: __cxa_finalize_result :: out u32 = low:32[R0]

00000551:
000006d5: R16 := 0x20000
000006dc: R17 := mem[R16 + 0x18, el]:u64
000006e2: R16 := R16 + 0x18
000006e7: call R17 with noreturn

00000878: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008c0: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000337:
0000033b: #3 := R31 - 0x20
00000341: mem := mem with [#3, el]:u64 <- R29
00000347: mem := mem with [#3 + 8, el]:u64 <- R30
0000034b: R31 := #3
00000351: R29 := R31
00000359: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000035e: R19 := 0x20000
00000365: R0 := pad:64[mem[R19 + 0x78]]
0000036b: when 0:0[R0] goto %00000369
000008b4: goto %0000051a

0000051a:
0000051d: R0 := 0x1F000
00000524: R0 := mem[R0 + 0xFC8, el]:u64
0000052a: when R0 = 0 goto %00000528
000008b5: goto %00000541

00000541:
00000544: R0 := 0x20000
0000054b: R0 := mem[R0 + 0x58, el]:u64
00000550: R30 := 0x8B0
00000553: call @__cxa_finalize with return %00000528

00000528:
00000530: R30 := 0x8B4
00000532: call @deregister_tm_clones with return %00000534

00000534:
00000537: R0 := 1
0000053f: mem := mem with [R19 + 0x78] <- 7:0[R0]
000008b6: goto %00000369

00000369:
00000373: R19 := mem[R31 + 0x10, el]:u64
0000037a: R29 := mem[R31, el]:u64
0000037f: R30 := mem[R31 + 8, el]:u64
00000383: R31 := R31 + 0x20
00000388: call R30 with noreturn

0000087c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008c1: __libc_start_main_main :: in u64 = R0
000008c2: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008c3: __libc_start_main_arg3 :: in out u64 = R2
000008c4: __libc_start_main_auxv :: in out u64 = R3
000008c5: __libc_start_main_result :: out u32 = low:32[R0]

00000290:
000006bf: R16 := 0x20000
000006c6: R17 := mem[R16 + 0x10, el]:u64
000006cc: R16 := R16 + 0x10
000006d1: call R17 with noreturn

0000087d: sub _fini(_fini_result)
000008c6: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000087e: sub _init(_init_result)
000008c7: _init_result :: out u32 = low:32[R0]

00000787:
0000078d: #6 := R31 - 0x10
00000793: mem := mem with [#6, el]:u64 <- R29
00000799: mem := mem with [#6 + 8, el]:u64 <- R30
0000079d: R31 := #6
000007a3: R29 := R31
000007a8: R30 := 0x6E8
000007aa: call @call_weak_fn with return %000007ac

000007ac:
000007b1: R29 := mem[R31, el]:u64
000007b6: R30 := mem[R31 + 8, el]:u64
000007ba: R31 := R31 + 0x10
000007bf: call R30 with noreturn

0000087f: sub _start(_start_result)
000008c8: _start_result :: out u32 = low:32[R0]

00000251:
00000256: R29 := 0
0000025b: R30 := 0
00000261: R5 := R0
00000268: R1 := mem[R31, el]:u64
0000026e: R2 := R31 + 8
00000274: R6 := R31
00000279: R0 := 0x1F000
00000280: R0 := mem[R0 + 0xFD8, el]:u64
00000285: R3 := 0
0000028a: R4 := 0
0000028f: R30 := 0x7F0
00000292: call @__libc_start_main with return %00000294

00000294:
00000297: R30 := 0x7F4
0000029a: call @abort with return %000008b7

000008b7:
000008b8: call @call_weak_fn with noreturn

00000882: sub abort()


00000298:
0000072d: R16 := 0x20000
00000734: R17 := mem[R16 + 0x38, el]:u64
0000073a: R16 := R16 + 0x38
0000073f: call R17 with noreturn

00000883: sub call_weak_fn(call_weak_fn_result)
000008c9: call_weak_fn_result :: out u32 = low:32[R0]

0000029c:
0000029f: R0 := 0x1F000
000002a6: R0 := mem[R0 + 0xFD0, el]:u64
000002ac: when R0 = 0 goto %000002aa
000008b9: goto %00000591

000002aa:
000002b2: call R30 with noreturn

00000591:
00000594: goto @__gmon_start__

00000592:
00000717: R16 := 0x20000
0000071e: R17 := mem[R16 + 0x30, el]:u64
00000724: R16 := R16 + 0x30
00000729: call R17 with noreturn

00000885: sub deregister_tm_clones(deregister_tm_clones_result)
000008ca: deregister_tm_clones_result :: out u32 = low:32[R0]

000002b8:
000002bb: R0 := 0x20000
000002c1: R0 := R0 + 0x78
000002c6: R1 := 0x20000
000002cc: R1 := R1 + 0x78
000002d2: #1 := ~R0
000002d7: #2 := R1 + ~R0
000002dd: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002e3: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002e7: ZF := #2 + 1 = 0
000002eb: NF := 63:63[#2 + 1]
000002f1: when ZF goto %000002ef
000008ba: goto %00000573

00000573:
00000576: R1 := 0x1F000
0000057d: R1 := mem[R1 + 0xFC0, el]:u64
00000582: when R1 = 0 goto %000002ef
000008bb: goto %00000586

000002ef:
000002f7: call R30 with noreturn

00000586:
0000058a: R16 := R1
0000058f: call R16 with noreturn

00000888: sub frame_dummy(frame_dummy_result)
000008cb: frame_dummy_result :: out u32 = low:32[R0]

0000038e:
00000390: call @register_tm_clones with noreturn

00000889: sub free(free_ptr)
000008cc: free_ptr :: in out u64 = R0

000004f5:
00000759: R16 := 0x20000
00000760: R17 := mem[R16 + 0x48, el]:u64
00000766: R16 := R16 + 0x48
0000076b: call R17 with noreturn

0000088a: sub main(main_argc, main_argv, main_result)
000008cd: main_argc :: in u32 = low:32[R0]
000008ce: main_argv :: in out u64 = R1
000008cf: main_result :: out u32 = low:32[R0]

00000392:
00000396: #4 := R31 - 0x30
0000039c: mem := mem with [#4, el]:u64 <- R29
000003a2: mem := mem with [#4 + 8, el]:u64 <- R30
000003a6: R31 := #4
000003ac: R29 := R31
000003b4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003bb: mem := mem with [R31 + 0x28, el]:u64 <- 0
000003c2: mem := mem with [R31 + 0x20, el]:u64 <- 0
000003c7: R0 := 0x20000
000003cd: R0 := R0 + 0x60
000003d4: R1 := pad:64[mem[R0]]
000003d9: R0 := 0x20000
000003df: R0 := R0 + 0x68
000003e7: mem := mem with [R0 + 5] <- 7:0[R1]
000003ec: R0 := 0xB
000003f1: R30 := 0x908
000003f4: call @malloc with return %000003f6

000003f6:
000003fa: R1 := R0
000003ff: R0 := 0x20000
00000405: R0 := R0 + 0x80
0000040d: mem := mem with [R0, el]:u64 <- R1
00000412: R0 := 0x20000
00000418: R0 := R0 + 0x80
0000041f: R19 := mem[R0, el]:u64
00000424: R0 := 0x20000
0000042a: R0 := R0 + 0x68
0000042f: R30 := 0x930
00000432: call @strlen with return %00000434

00000434:
00000438: R2 := R0
0000043d: R0 := 0x20000
00000443: R1 := R0 + 0x68
00000449: R0 := R19
0000044e: R30 := 0x944
00000451: call @memcpy with return %00000453

00000453:
00000456: R0 := 0x20000
0000045c: R0 := R0 + 0x80
00000463: R0 := mem[R0, el]:u64
00000468: R30 := 0x954
0000046b: call @puts with return %0000046d

0000046d:
00000470: R0 := 0x20000
00000476: R0 := R0 + 0x80
0000047d: R0 := mem[R0, el]:u64
00000483: R0 := R0 + 2
0000048b: mem := mem with [R31 + 0x28, el]:u64 <- R0
00000492: R0 := mem[R31 + 0x28, el]:u64
00000499: mem := mem with [R0] <- 0
0000049e: R0 := 0x20000
000004a4: R0 := R0 + 0x80
000004ab: R19 := mem[R0, el]:u64
000004b0: R0 := 0x20000
000004b6: R0 := R0 + 0x80
000004bd: R0 := mem[R0, el]:u64
000004c2: R30 := 0x98C
000004c4: call @strlen with return %000004c6

000004c6:
000004ca: R2 := R0
000004cf: R1 := 1
000004d5: R0 := R19
000004da: R30 := 0x99C
000004dd: call @memset with return %000004df

000004df:
000004e2: R0 := 0x20000
000004e8: R0 := R0 + 0x80
000004ef: R0 := mem[R0, el]:u64
000004f4: R30 := 0x9AC
000004f7: call @free with return %000004f9

000004f9:
000004fc: R0 := 0
00000503: R19 := mem[R31 + 0x10, el]:u64
0000050a: R29 := mem[R31, el]:u64
0000050f: R30 := mem[R31 + 8, el]:u64
00000513: R31 := R31 + 0x30
00000518: call R30 with noreturn

0000088b: sub malloc(malloc_size, malloc_result)
000008d0: malloc_size :: in u64 = R0
000008d1: malloc_result :: out u64 = R0

000003f2:
000006eb: R16 := 0x20000
000006f2: R17 := mem[R16 + 0x20, el]:u64
000006f8: R16 := R16 + 0x20
000006fd: call R17 with noreturn

0000088c: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
000008d2: memcpy_dst :: in out u64 = R0
000008d3: memcpy_src :: in out u64 = R1
000008d4: memcpy_n :: in u64 = R2
000008d5: memcpy_result :: out u64 = R0

0000044f:
00000693: R16 := 0x20000
0000069a: R17 := mem[R16, el]:u64
000006a0: R16 := R16
000006a5: call R17 with noreturn

0000088d: sub memset(memset_buf, memset_c, memset_n, memset_result)
000008d6: memset_buf :: in out u64 = R0
000008d7: memset_c :: in u32 = low:32[R1]
000008d8: memset_n :: in u64 = R2
000008d9: memset_result :: out u64 = R0

000004db:
00000701: R16 := 0x20000
00000708: R17 := mem[R16 + 0x28, el]:u64
0000070e: R16 := R16 + 0x28
00000713: call R17 with noreturn

0000088e: sub puts(puts_s, puts_result)
000008da: puts_s :: in u64 = R0
000008db: puts_result :: out u32 = low:32[R0]

00000469:
00000743: R16 := 0x20000
0000074a: R17 := mem[R16 + 0x40, el]:u64
00000750: R16 := R16 + 0x40
00000755: call R17 with noreturn

0000088f: sub register_tm_clones(register_tm_clones_result)
000008dc: register_tm_clones_result :: out u32 = low:32[R0]

000002f9:
000002fc: R0 := 0x20000
00000302: R0 := R0 + 0x78
00000307: R1 := 0x20000
0000030d: R1 := R1 + 0x78
00000314: R1 := R1 + ~R0 + 1
0000031a: R2 := 0.63:63[R1]
00000321: R1 := R2 + (R1 ~>> 3)
00000327: R1 := extend:64[63:1[R1]]
0000032d: when R1 = 0 goto %0000032b
000008bc: goto %00000555

00000555:
00000558: R2 := 0x1F000
0000055f: R2 := mem[R2 + 0xFE0, el]:u64
00000564: when R2 = 0 goto %0000032b
000008bd: goto %00000568

0000032b:
00000333: call R30 with noreturn

00000568:
0000056c: R16 := R2
00000571: call R16 with noreturn

00000892: sub strlen(strlen_s, strlen_result)
000008dd: strlen_s :: in u64 = R0
000008de: strlen_result :: out u64 = R0

00000430:
000006a9: R16 := 0x20000
000006b0: R17 := mem[R16 + 8, el]:u64
000006b6: R16 := R16 + 8
000006bb: call R17 with noreturn
