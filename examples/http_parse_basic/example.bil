00000784: program
00000745: sub __cxa_finalize(__cxa_finalize_result)
00000785: __cxa_finalize_result :: out u32 = low:32[R0]

000004ac:
000005e4: R16 := 0x20000
000005eb: R17 := mem[R16 + 8, el]:u64
000005f1: R16 := R16 + 8
000005f6: call R17 with noreturn

00000746: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000786: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002f7:
000002fb: #3 := R31 - 0x20
00000301: mem := mem with [#3, el]:u64 <- R29
00000307: mem := mem with [#3 + 8, el]:u64 <- R30
0000030b: R31 := #3
00000311: R29 := R31
00000319: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000031e: R19 := 0x20000
00000325: R0 := pad:64[mem[R19 + 0x68]]
0000032b: when 0:0[R0] goto %00000329
0000077a: goto %00000475

00000475:
00000478: R0 := 0x1F000
0000047f: R0 := mem[R0 + 0xFC8, el]:u64
00000485: when R0 = 0 goto %00000483
0000077b: goto %0000049c

0000049c:
0000049f: R0 := 0x20000
000004a6: R0 := mem[R0 + 0x48, el]:u64
000004ab: R30 := 0x830
000004ae: call @__cxa_finalize with return %00000483

00000483:
0000048b: R30 := 0x834
0000048d: call @deregister_tm_clones with return %0000048f

0000048f:
00000492: R0 := 1
0000049a: mem := mem with [R19 + 0x68] <- 7:0[R0]
0000077c: goto %00000329

00000329:
00000333: R19 := mem[R31 + 0x10, el]:u64
0000033a: R29 := mem[R31, el]:u64
0000033f: R30 := mem[R31 + 8, el]:u64
00000343: R31 := R31 + 0x20
00000348: call R30 with noreturn

0000074a: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000787: __libc_start_main_main :: in u64 = R0
00000788: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000789: __libc_start_main_arg3 :: in out u64 = R2
0000078a: __libc_start_main_auxv :: in out u64 = R3
0000078b: __libc_start_main_result :: out u32 = low:32[R0]

00000250:
000005ce: R16 := 0x20000
000005d5: R17 := mem[R16, el]:u64
000005db: R16 := R16
000005e0: call R17 with noreturn

0000074b: sub _fini(_fini_result)
0000078c: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000074c: sub _init(_init_result)
0000078d: _init_result :: out u32 = low:32[R0]

00000696:
0000069c: #6 := R31 - 0x10
000006a2: mem := mem with [#6, el]:u64 <- R29
000006a8: mem := mem with [#6 + 8, el]:u64 <- R30
000006ac: R31 := #6
000006b2: R29 := R31
000006b7: R30 := 0x670
000006b9: call @call_weak_fn with return %000006bb

000006bb:
000006c0: R29 := mem[R31, el]:u64
000006c5: R30 := mem[R31 + 8, el]:u64
000006c9: R31 := R31 + 0x10
000006ce: call R30 with noreturn

0000074d: sub _start(_start_result)
0000078e: _start_result :: out u32 = low:32[R0]

00000211:
00000216: R29 := 0
0000021b: R30 := 0
00000221: R5 := R0
00000228: R1 := mem[R31, el]:u64
0000022e: R2 := R31 + 8
00000234: R6 := R31
00000239: R0 := 0x1F000
00000240: R0 := mem[R0 + 0xFD8, el]:u64
00000245: R3 := 0
0000024a: R4 := 0
0000024f: R30 := 0x770
00000252: call @__libc_start_main with return %00000254

00000254:
00000257: R30 := 0x774
0000025a: call @abort with return %0000077d

0000077d:
0000077e: call @call_weak_fn with noreturn

00000750: sub abort()


00000258:
0000063c: R16 := 0x20000
00000643: R17 := mem[R16 + 0x28, el]:u64
00000649: R16 := R16 + 0x28
0000064e: call R17 with noreturn

00000751: sub call_weak_fn(call_weak_fn_result)
0000078f: call_weak_fn_result :: out u32 = low:32[R0]

0000025c:
0000025f: R0 := 0x1F000
00000266: R0 := mem[R0 + 0xFD0, el]:u64
0000026c: when R0 = 0 goto %0000026a
0000077f: goto %000004ec

0000026a:
00000272: call R30 with noreturn

000004ec:
000004ef: goto @__gmon_start__

000004ed:
00000626: R16 := 0x20000
0000062d: R17 := mem[R16 + 0x20, el]:u64
00000633: R16 := R16 + 0x20
00000638: call R17 with noreturn

00000753: sub deregister_tm_clones(deregister_tm_clones_result)
00000790: deregister_tm_clones_result :: out u32 = low:32[R0]

00000278:
0000027b: R0 := 0x20000
00000281: R0 := R0 + 0x68
00000286: R1 := 0x20000
0000028c: R1 := R1 + 0x68
00000292: #1 := ~R0
00000297: #2 := R1 + ~R0
0000029d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002a3: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002a7: ZF := #2 + 1 = 0
000002ab: NF := 63:63[#2 + 1]
000002b1: when ZF goto %000002af
00000780: goto %000004ce

000004ce:
000004d1: R1 := 0x1F000
000004d8: R1 := mem[R1 + 0xFC0, el]:u64
000004dd: when R1 = 0 goto %000002af
00000781: goto %000004e1

000002af:
000002b7: call R30 with noreturn

000004e1:
000004e5: R16 := R1
000004ea: call R16 with noreturn

00000756: sub frame_dummy(frame_dummy_result)
00000791: frame_dummy_result :: out u32 = low:32[R0]

0000034e:
00000350: call @register_tm_clones with noreturn

00000757: sub free(free_ptr)
00000792: free_ptr :: in out u64 = R0

00000457:
00000668: R16 := 0x20000
0000066f: R17 := mem[R16 + 0x38, el]:u64
00000675: R16 := R16 + 0x38
0000067a: call R17 with noreturn

00000758: sub main(main_argc, main_argv, main_result)
00000793: main_argc :: in u32 = low:32[R0]
00000794: main_argv :: in out u64 = R1
00000795: main_result :: out u32 = low:32[R0]

00000352:
00000356: #4 := R31 - 0x20
0000035c: mem := mem with [#4, el]:u64 <- R29
00000362: mem := mem with [#4 + 8, el]:u64 <- R30
00000366: R31 := #4
0000036c: R29 := R31
00000373: mem := mem with [R31 + 0x18, el]:u64 <- 0
0000037a: mem := mem with [R31 + 0x10, el]:u64 <- 0
0000037f: R0 := 0xB
00000384: R30 := 0x86C
00000387: call @malloc with return %00000389

00000389:
0000038d: R1 := R0
00000392: R0 := 0x20000
00000398: R0 := R0 + 0x70
000003a0: mem := mem with [R0, el]:u64 <- R1
000003a5: R0 := 0x20000
000003ab: R0 := R0 + 0x70
000003b2: R2 := mem[R0, el]:u64
000003b7: R0 := 0x20000
000003bd: R1 := R0 + 0x58
000003c3: R0 := R2
000003ca: R2 := mem[R1, el]:u64
000003d2: mem := mem with [R0, el]:u64 <- R2
000003d9: R1 := pad:64[mem[R1 + 7, el]:u32]
000003e1: mem := mem with [R0 + 7, el]:u32 <- 31:0[R1]
000003e6: R0 := 0x20000
000003ec: R0 := R0 + 0x70
000003f3: R0 := mem[R0, el]:u64
000003f8: R30 := 0x8B4
000003fb: call @puts with return %000003fd

000003fd:
00000400: R0 := 0x20000
00000406: R0 := R0 + 0x70
0000040d: R0 := mem[R0, el]:u64
00000413: R0 := R0 + 1
0000041b: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000420: R0 := 0x20000
00000426: R0 := R0 + 0x70
0000042d: R0 := mem[R0, el]:u64
00000432: R2 := 0xB
00000437: R1 := 1
0000043c: R30 := 0x8E0
0000043f: call @memset with return %00000441

00000441:
00000444: R0 := 0x20000
0000044a: R0 := R0 + 0x70
00000451: R0 := mem[R0, el]:u64
00000456: R30 := 0x8F0
00000459: call @free with return %0000045b

0000045b:
0000045e: R0 := 0
00000465: R29 := mem[R31, el]:u64
0000046a: R30 := mem[R31 + 8, el]:u64
0000046e: R31 := R31 + 0x20
00000473: call R30 with noreturn

00000759: sub malloc(malloc_size, malloc_result)
00000796: malloc_size :: in u64 = R0
00000797: malloc_result :: out u64 = R0

00000385:
000005fa: R16 := 0x20000
00000601: R17 := mem[R16 + 0x10, el]:u64
00000607: R16 := R16 + 0x10
0000060c: call R17 with noreturn

0000075a: sub memset(memset_buf, memset_c, memset_n, memset_result)
00000798: memset_buf :: in out u64 = R0
00000799: memset_c :: in u32 = low:32[R1]
0000079a: memset_n :: in u64 = R2
0000079b: memset_result :: out u64 = R0

0000043d:
00000610: R16 := 0x20000
00000617: R17 := mem[R16 + 0x18, el]:u64
0000061d: R16 := R16 + 0x18
00000622: call R17 with noreturn

0000075b: sub puts(puts_s, puts_result)
0000079c: puts_s :: in u64 = R0
0000079d: puts_result :: out u32 = low:32[R0]

000003f9:
00000652: R16 := 0x20000
00000659: R17 := mem[R16 + 0x30, el]:u64
0000065f: R16 := R16 + 0x30
00000664: call R17 with noreturn

0000075c: sub register_tm_clones(register_tm_clones_result)
0000079e: register_tm_clones_result :: out u32 = low:32[R0]

000002b9:
000002bc: R0 := 0x20000
000002c2: R0 := R0 + 0x68
000002c7: R1 := 0x20000
000002cd: R1 := R1 + 0x68
000002d4: R1 := R1 + ~R0 + 1
000002da: R2 := 0.63:63[R1]
000002e1: R1 := R2 + (R1 ~>> 3)
000002e7: R1 := extend:64[63:1[R1]]
000002ed: when R1 = 0 goto %000002eb
00000782: goto %000004b0

000004b0:
000004b3: R2 := 0x1F000
000004ba: R2 := mem[R2 + 0xFE0, el]:u64
000004bf: when R2 = 0 goto %000002eb
00000783: goto %000004c3

000002eb:
000002f3: call R30 with noreturn

000004c3:
000004c7: R16 := R2
000004cc: call R16 with noreturn
