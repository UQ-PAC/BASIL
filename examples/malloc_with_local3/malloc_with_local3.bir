00000933: program
0000091a: sub .plt(\.plt_result)
00000934: \.plt_result :: out u32 = low:32[R0]

000006ef:
000006f3: #6 := R31 - 0x10
000006f9: mem := mem with [#6, el]:u64 <- R16
000006ff: mem := mem with [#6 + 8, el]:u64 <- R30
00000703: R31 := #6
00000708: R16 := 0x10000
0000070f: R17 := mem[R16 + 0xF88, el]:u64
00000715: R16 := R16 + 0xF88
0000071a: call R17 with noreturn

0000091b: sub __cxa_finalize(__cxa_finalize_result)
00000935: __cxa_finalize_result :: out u32 = low:32[R0]

00000642:
0000073a: R16 := 0x10000
00000741: R17 := mem[R16 + 0xF98, el]:u64
00000747: R16 := R16 + 0xF98
0000074c: call R17 with noreturn

0000091c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000936: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000386:
0000038a: #3 := R31 - 0x20
00000390: mem := mem with [#3, el]:u64 <- R29
00000396: mem := mem with [#3 + 8, el]:u64 <- R30
0000039a: R31 := #3
000003a0: R29 := R31
000003a8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003ad: R19 := 0x11000
000003b4: R0 := pad:64[mem[R19 + 0x10]]
000003bb: when 31:0[R0] <> 0 goto %000003b9
0000091d: goto %0000060b

0000060b:
0000060e: R0 := 0x10000
00000615: R0 := mem[R0 + 0xFC0, el]:u64
0000061b: when R0 = 0 goto %00000619
0000091e: goto %00000632

00000632:
00000635: R0 := 0x11000
0000063c: R0 := mem[R0 + 8, el]:u64
00000641: R30 := 0x7B0
00000644: call @__cxa_finalize with return %00000619

00000619:
00000621: R30 := 0x7B4
00000623: call @deregister_tm_clones with return %00000625

00000625:
00000628: R0 := 1
00000630: mem := mem with [R19 + 0x10] <- 7:0[R0]
0000091f: goto %000003b9

000003b9:
000003c3: R19 := mem[R31 + 0x10, el]:u64
000003ca: R29 := mem[R31, el]:u64
000003cf: R30 := mem[R31 + 8, el]:u64
000003d3: R31 := R31 + 0x20
000003d8: call R30 with noreturn

00000920: sub __gmon_start__(__gmon_start___result)
00000937: __gmon_start___result :: out u32 = low:32[R0]

00000683:
00000750: R16 := 0x10000
00000757: R17 := mem[R16 + 0xFA0, el]:u64
0000075d: R16 := R16 + 0xFA0
00000762: call R17 with noreturn

00000921: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000938: __libc_start_main_main :: in u64 = R0
00000939: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000093a: __libc_start_main_arg3 :: in out u64 = R2
0000093b: __libc_start_main_auxv :: in out u64 = R3
0000093c: __libc_start_main_result :: out u32 = low:32[R0]

000002df:
00000724: R16 := 0x10000
0000072b: R17 := mem[R16 + 0xF90, el]:u64
00000731: R16 := R16 + 0xF90
00000736: call R17 with noreturn

00000922: sub _fini(_fini_result)
0000093d: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000923: sub _init(_init_result)
0000093e: _init_result :: out u32 = low:32[R0]

0000082e:
00000834: #7 := R31 - 0x10
0000083a: mem := mem with [#7, el]:u64 <- R29
00000840: mem := mem with [#7 + 8, el]:u64 <- R30
00000844: R31 := #7
0000084a: R29 := R31
0000084f: R30 := 0x650
00000851: call @call_weak_fn with return %00000853

00000853:
00000858: R29 := mem[R31, el]:u64
0000085d: R30 := mem[R31 + 8, el]:u64
00000861: R31 := R31 + 0x10
00000866: call R30 with noreturn

00000924: sub _start(_start_result)
0000093f: _start_result :: out u32 = low:32[R0]

000002a0:
000002a5: R29 := 0
000002aa: R30 := 0
000002b0: R5 := R0
000002b7: R1 := mem[R31, el]:u64
000002bd: R2 := R31 + 8
000002c3: R6 := R31
000002c8: R0 := 0x10000
000002cf: R0 := mem[R0 + 0xFE8, el]:u64
000002d4: R3 := 0
000002d9: R4 := 0
000002de: R30 := 0x6F0
000002e1: call @__libc_start_main with return %000002e3

000002e3:
000002e6: R30 := 0x6F4
000002e9: call @abort with return %00000925

00000925:
00000926: call @call_weak_fn with noreturn

00000927: sub abort()


000002e7:
00000766: R16 := 0x10000
0000076d: R17 := mem[R16 + 0xFA8, el]:u64
00000773: R16 := R16 + 0xFA8
00000778: call R17 with noreturn

00000928: sub call_weak_fn(call_weak_fn_result)
00000940: call_weak_fn_result :: out u32 = low:32[R0]

000002eb:
000002ee: R0 := 0x10000
000002f5: R0 := mem[R0 + 0xFD0, el]:u64
000002fb: when R0 = 0 goto %000002f9
00000929: goto %00000682

000002f9:
00000301: call R30 with noreturn

00000682:
00000685: call @__gmon_start__ with noreturn

0000092a: sub deregister_tm_clones(deregister_tm_clones_result)
00000941: deregister_tm_clones_result :: out u32 = low:32[R0]

00000307:
0000030a: R0 := 0x11000
00000310: R0 := R0 + 0x10
00000315: R1 := 0x11000
0000031b: R1 := R1 + 0x10
00000321: #1 := ~R0
00000326: #2 := R1 + ~R0
0000032c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000332: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000336: ZF := #2 + 1 = 0
0000033a: NF := 63:63[#2 + 1]
00000340: when ZF goto %0000033e
0000092b: goto %00000664

00000664:
00000667: R1 := 0x10000
0000066e: R1 := mem[R1 + 0xFB8, el]:u64
00000673: when R1 = 0 goto %0000033e
0000092c: goto %00000677

0000033e:
00000346: call R30 with noreturn

00000677:
0000067b: R16 := R1
00000680: call R16 with noreturn

0000092d: sub frame_dummy(frame_dummy_result)
00000942: frame_dummy_result :: out u32 = low:32[R0]

000003de:
000003e0: call @register_tm_clones with noreturn

0000092e: sub main(main_argc, main_argv, main_result)
00000943: main_argc :: in u32 = low:32[R0]
00000944: main_argv :: in out u64 = R1
00000945: main_result :: out u32 = low:32[R0]

000003e2:
000003e6: #4 := R31 - 0x40
000003ec: mem := mem with [#4, el]:u64 <- R29
000003f2: mem := mem with [#4 + 8, el]:u64 <- R30
000003f6: R31 := #4
000003fc: R29 := R31
00000401: R0 := 1
00000406: R1 := 0x10000
0000040d: R1 := mem[R1 + 0xFC8, el]:u64
00000412: R30 := 0x7EC
00000415: call R1 with return %00000417

00000417:
0000041d: mem := mem with [R31 + 0x28, el]:u64 <- R0
00000422: R0 := 0xB
0000042a: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000042f: R0 := 4
00000434: R1 := 0x10000
0000043b: R1 := mem[R1 + 0xFC8, el]:u64
00000440: R30 := 0x808
00000443: call R1 with return %00000445

00000445:
0000044b: mem := mem with [R31 + 0x30, el]:u64 <- R0
00000450: R0 := 0xA
00000458: mem := mem with [R31 + 0x20, el]:u32 <- 31:0[R0]
0000045d: R0 := 4
00000462: R1 := 0x10000
00000469: R1 := mem[R1 + 0xFC8, el]:u64
0000046e: R30 := 0x824
00000471: call R1 with return %00000473

00000473:
00000479: mem := mem with [R31 + 0x38, el]:u64 <- R0
0000047e: R0 := 9
00000486: mem := mem with [R31 + 0x24, el]:u32 <- 31:0[R0]
0000048d: R0 := mem[R31 + 0x28, el]:u64
00000492: R1 := 0x41
0000049a: mem := mem with [R0] <- 7:0[R1]
000004a1: R0 := mem[R31 + 0x30, el]:u64
000004a6: R1 := 0x2A
000004ae: mem := mem with [R0, el]:u32 <- 31:0[R1]
000004b5: R0 := mem[R31 + 0x28, el]:u64
000004ba: R1 := 0x10000
000004c1: R1 := mem[R1 + 0xFD8, el]:u64
000004c6: R30 := 0x858
000004c9: call R1 with return %000004cb

000004cb:
000004d0: R0 := mem[R31 + 0x30, el]:u64
000004d7: R0 := pad:64[mem[R0, el]:u32]
000004dd: R1 := pad:64[31:0[R0]]
000004e2: R0 := 0
000004e8: R0 := R0 + 0x928
000004ed: R2 := 0x10000
000004f4: R2 := mem[R2 + 0xFF8, el]:u64
000004f9: R30 := 0x878
000004fc: call R2 with return %000004fe

000004fe:
00000503: R1 := pad:64[mem[R31 + 0x20, el]:u32]
00000508: R0 := 0
0000050e: R0 := R0 + 0x938
00000513: R2 := 0x10000
0000051a: R2 := mem[R2 + 0xFF8, el]:u64
0000051f: R30 := 0x890
00000522: call R2 with return %00000524

00000524:
00000529: R0 := mem[R31 + 0x28, el]:u64
0000052e: R1 := 0x10000
00000535: R1 := mem[R1 + 0xFE0, el]:u64
0000053a: R30 := 0x8A0
0000053d: call R1 with return %0000053f

0000053f:
00000544: R0 := mem[R31 + 0x30, el]:u64
00000549: R1 := 0x10000
00000550: R1 := mem[R1 + 0xFE0, el]:u64
00000555: R30 := 0x8B0
00000558: call R1 with return %0000055a

0000055a:
0000055d: R0 := 0
00000564: R29 := mem[R31, el]:u64
00000569: R30 := mem[R31 + 8, el]:u64
0000056d: R31 := R31 + 0x40
00000572: call R30 with noreturn

0000092f: sub printCharValue(printCharValue_result)
00000946: printCharValue_result :: out u32 = low:32[R0]

00000574:
00000578: #5 := R31 - 0x20
0000057e: mem := mem with [#5, el]:u64 <- R29
00000584: mem := mem with [#5 + 8, el]:u64 <- R30
00000588: R31 := #5
0000058e: R29 := R31
00000596: mem := mem with [R31 + 0x18, el]:u64 <- R0
0000059d: R0 := mem[R31 + 0x18, el]:u64
000005a4: R0 := pad:64[mem[R0]]
000005aa: R0 := pad:64[31:0[R0] + 1]
000005b0: R1 := pad:64[0.7:0[R0]]
000005b7: R0 := mem[R31 + 0x18, el]:u64
000005bf: mem := mem with [R0] <- 7:0[R1]
000005c6: R0 := mem[R31 + 0x18, el]:u64
000005cd: R0 := pad:64[mem[R0]]
000005d3: R1 := pad:64[31:0[R0]]
000005d8: R0 := 0
000005de: R0 := R0 + 0x958
000005e3: R2 := 0x10000
000005ea: R2 := mem[R2 + 0xFF8, el]:u64
000005ef: R30 := 0x900
000005f2: call R2 with return %000005f4

000005f4:
000005fb: R29 := mem[R31, el]:u64
00000600: R30 := mem[R31 + 8, el]:u64
00000604: R31 := R31 + 0x20
00000609: call R30 with noreturn

00000930: sub register_tm_clones(register_tm_clones_result)
00000947: register_tm_clones_result :: out u32 = low:32[R0]

00000348:
0000034b: R0 := 0x11000
00000351: R0 := R0 + 0x10
00000356: R1 := 0x11000
0000035c: R1 := R1 + 0x10
00000363: R1 := R1 + ~R0 + 1
00000369: R2 := 0.63:63[R1]
00000370: R1 := R2 + (R1 ~>> 3)
00000376: R1 := extend:64[63:1[R1]]
0000037c: when R1 = 0 goto %0000037a
00000931: goto %00000646

00000646:
00000649: R2 := 0x10000
00000650: R2 := mem[R2 + 0xFF0, el]:u64
00000655: when R2 = 0 goto %0000037a
00000932: goto %00000659

0000037a:
00000382: call R30 with noreturn

00000659:
0000065d: R16 := R2
00000662: call R16 with noreturn
