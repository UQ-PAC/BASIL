00000363: program
0000033d: sub __cxa_finalize(__cxa_finalize_result)
00000364: __cxa_finalize_result :: out u32 = R0

00000284:
000002df: R16 := 0x10000
000002e3: R17 := mem[R16 + 0xFA0, el]:u64
000002e7: R16 := R16 + 0xFA0
000002eb: call R17 with noreturn

0000033e: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000365: __do_global_dtors_aux_result :: out u32 = R0

000000d9:
000000db: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000dd: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000df: R31 := R31 - 0x20
000000e3: R29 := R31
000000e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000eb: R19 := 0x11000
000000ef: #28 := pad:64[mem[R19 + 0x10]]
000000f1: R0 := 0
000000f3: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
000000fc: #29 := extract:31:0[R0] <> 0
000000f8: when #29 goto %000000f6
00000356: goto %00000259

00000259:
0000025b: R0 := 0x10000
0000025f: R0 := mem[R0 + 0xFD8, el]:u64
00000268: #86 := R0 = 0
00000264: when #86 goto %00000262
00000357: goto %00000279

00000279:
0000027b: R0 := 0x11000
0000027f: R0 := mem[R0 + 8, el]:u64
00000283: R30 := 0x700
00000286: call @__cxa_finalize with return %00000262

00000262:
0000026b: R30 := 0x704
0000026d: call @deregister_tm_clones with return %0000026f

0000026f:
00000271: R0 := 0
00000273: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000277: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
00000358: goto %000000f6

000000f6:
000000ff: R19 := mem[R31 + 0x10, el]:u64
00000103: R29 := mem[R31, el]:u64
00000105: R30 := mem[R31 + 8, el]:u64
00000107: R31 := R31 + 0x20
0000010b: call R30 with noreturn

00000342: sub __libc_csu_fini(__libc_csu_fini_result)
00000366: __libc_csu_fini_result :: out u32 = R0

00000219:
0000021b: call R30 with noreturn

00000343: sub __libc_csu_init(__libc_csu_init_result)
00000367: __libc_csu_init_result :: out u32 = R0

0000019b:
0000019d: mem := mem with [R31 - 0x40, el]:u64 <- R29
0000019f: mem := mem with [R31 - 0x38, el]:u64 <- R30
000001a1: R31 := R31 - 0x40
000001a5: R29 := R31
000001a9: mem := mem with [R31, el]:u64 <- R31 + 0x20
000001ab: mem := mem with [R31, el]:u64 <- R31 + 0x28
000001af: R20 := 0x10000
000001b3: R20 := R20 + 0xD90
000001b7: mem := mem with [R31, el]:u64 <- R31 + 0x40
000001b9: mem := mem with [R31, el]:u64 <- R31 + 0x48
000001bd: R21 := 0x10000
000001c1: R21 := R21 + 0xD88
000001c5: R20 := R20 - R21
000001c9: #51 := extract:31:0[R0]
000001cb: R22 := 0
000001cd: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#51]
000001d1: mem := mem with [R31, el]:u64 <- R31 + 0x60
000001d3: mem := mem with [R31, el]:u64 <- R31 + 0x68
000001d7: R23 := R1
000001db: R24 := R2
000001df: R30 := 0x7C8
000001e2: call @_init with return %000001e4

000001e4:
000001e6: #62 := ~(R20 ~>> 3) + 1
000001e8: NF := extract:63:63[#62]
000001ea: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#62]
000001ec: ZF := #62 = 0
000001ee: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#62]
000001f7: #64 := ZF
000001f3: when #64 goto %000001f1
00000359: goto %0000021e

0000021e:
00000220: R20 := R20 >> 3
00000224: R19 := 0
0000035a: goto %00000226

00000226:
00000228: R3 := mem[R21 + (R19 << 3), el]:u64
0000022c: R2 := R24
00000230: R19 := R19 + 1
00000234: R1 := R23
00000238: #79 := extract:31:0[R22]
0000023a: R0 := 0
0000023c: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#79]
00000240: R30 := 0x7F0
00000242: call R3 with return %00000245

00000245:
00000247: #83 := 1 + ~R19 + R20
00000249: NF := extract:63:63[#83]
0000024b: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#83] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#83]
0000024d: ZF := #83 = 0
0000024f: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#83] | extract:63:63[R20] &
          ~extract:63:63[#83]
00000257: #85 := ~ZF <> 0
00000253: when #85 goto %00000226
0000035b: goto %000001f1

000001f1:
000001fa: R19 := mem[R31 + 0x10, el]:u64
000001fc: R20 := mem[R31 + 0x18, el]:u64
00000200: R21 := mem[R31 + 0x20, el]:u64
00000202: R22 := mem[R31 + 0x28, el]:u64
00000206: R23 := mem[R31 + 0x30, el]:u64
00000208: R24 := mem[R31 + 0x38, el]:u64
0000020c: R29 := mem[R31, el]:u64
0000020e: R30 := mem[R31 + 8, el]:u64
00000210: R31 := R31 + 0x40
00000214: call R30 with noreturn

00000347: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000368: __libc_start_main_main :: in u64 = R0
00000369: __libc_start_main_arg2 :: in u32 = R1
0000036a: __libc_start_main_arg3 :: in out u64 = R2
0000036b: __libc_start_main_auxv :: in out u64 = R3
0000036c: __libc_start_main_result :: out u32 = R0

00000055:
000002ef: R16 := 0x10000
000002f3: R17 := mem[R16 + 0xFA8, el]:u64
000002f7: R16 := R16 + 0xFA8
000002fb: call R17 with noreturn

00000348: sub _fini(_fini_result)
0000036d: _fini_result :: out u32 = R0

00000009:
0000000b: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000d: mem := mem with [R31 - 8, el]:u64 <- R30
0000000f: R31 := R31 - 0x10
00000013: R29 := R31
00000017: R29 := mem[R31, el]:u64
00000019: R30 := mem[R31 + 8, el]:u64
0000001b: R31 := R31 + 0x10
0000001f: call R30 with noreturn

00000349: sub _init(_init_result)
0000036e: _init_result :: out u32 = R0

000001e0:
0000031f: mem := mem with [R31 - 0x10, el]:u64 <- R29
00000321: mem := mem with [R31 - 8, el]:u64 <- R30
00000323: R31 := R31 - 0x10
00000327: R29 := R31
0000032b: R30 := 0x5A4
0000032d: call @call_weak_fn with return %0000032f

0000032f:
00000331: R29 := mem[R31, el]:u64
00000333: R30 := mem[R31 + 8, el]:u64
00000335: R31 := R31 + 0x10
00000339: call R30 with noreturn

0000034a: sub _start(_start_result)
0000036f: _start_result :: out u32 = R0

00000022:
00000024: R29 := 0
00000028: R30 := 0
0000002c: R5 := R0
00000030: R1 := mem[R31, el]:u64
00000034: R2 := R31 + 8
00000038: R6 := R31
0000003c: R0 := 0x10000
00000040: R0 := mem[R0 + 0xFF0, el]:u64
00000044: R3 := 0x10000
00000048: R3 := mem[R3 + 0xFE8, el]:u64
0000004c: R4 := 0x10000
00000050: R4 := mem[R4 + 0xFC8, el]:u64
00000054: R30 := 0x644
00000057: call @__libc_start_main with return %00000059

00000059:
0000005b: R30 := 0x648
0000005e: call @abort with return %0000035c

0000035c:
0000035d: call @call_weak_fn with noreturn

0000034d: sub abort()


0000005c:
0000030f: R16 := 0x10000
00000313: R17 := mem[R16 + 0xFB8, el]:u64
00000317: R16 := R16 + 0xFB8
0000031b: call R17 with noreturn

0000034e: sub call_weak_fn(call_weak_fn_result)
00000370: call_weak_fn_result :: out u32 = R0

00000060:
00000062: R0 := 0x10000
00000066: R0 := mem[R0 + 0xFE0, el]:u64
0000006f: #5 := R0 = 0
0000006b: when #5 goto %00000069
0000035e: goto %000002ba

00000069:
00000072: call R30 with noreturn

000002ba:
000002bd: goto @__gmon_start__

000002bb:
000002ff: R16 := 0x10000
00000303: R17 := mem[R16 + 0xFB0, el]:u64
00000307: R16 := R16 + 0xFB0
0000030b: call R17 with noreturn

00000350: sub deregister_tm_clones(deregister_tm_clones_result)
00000371: deregister_tm_clones_result :: out u32 = R0

00000077:
00000079: R0 := 0x11000
0000007d: R0 := R0 + 0x10
00000081: R1 := 0x11000
00000085: R1 := R1 + 0x10
00000089: #9 := 1 + ~R0 + R1
0000008b: NF := extract:63:63[#9]
0000008d: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
0000008f: ZF := #9 = 0
00000091: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
0000009a: #11 := ZF
00000096: when #11 goto %00000094
0000035f: goto %000002a1

000002a1:
000002a3: R1 := 0x10000
000002a7: R1 := mem[R1 + 0xFD0, el]:u64
000002af: #92 := R1 = 0
000002ab: when #92 goto %00000094
00000360: goto %000002b1

00000094:
0000009d: call R30 with noreturn

000002b1:
000002b3: R16 := R1
000002b7: call R16 with noreturn

00000353: sub frame_dummy(frame_dummy_result)
00000372: frame_dummy_result :: out u32 = R0

0000010e:
00000110: call @register_tm_clones with noreturn

00000354: sub main(main_argc, main_argv, main_result)
00000373: main_argc :: in u32 = R0
00000374: main_argv :: in out u64 = R1
00000375: main_result :: out u32 = R0

00000112:
00000114: R0 := 0x11000
00000118: R0 := R0 + 0x14
0000011c: mem := mem with [R0, el]:u32 <- 0
00000120: R0 := 0x11000
00000124: R0 := R0 + 0x14
00000128: #32 := pad:64[mem[R0, el]:u32]
0000012a: R0 := 0
0000012c: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#32]
00000130: #33 := extend:64[extract:31:0[R0]] + 1
00000132: R1 := 0
00000134: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#33]
00000138: R0 := 0x11000
0000013c: R0 := R0 + 0x14
00000140: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000144: R0 := 0x11000
00000148: R0 := R0 + 0x1C
0000014c: #35 := pad:64[mem[R0, el]:u32]
0000014e: R1 := 0
00000150: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#35]
00000154: R0 := 0x11000
00000158: R0 := R0 + 0x18
0000015c: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000160: R0 := 0x11000
00000164: R0 := R0 + 0x18
00000168: mem := mem with [R0, el]:u32 <- 0
0000016c: R0 := 0x11000
00000170: R0 := R0 + 0x14
00000174: #38 := pad:64[mem[R0, el]:u32]
00000176: R0 := 0
00000178: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#38]
0000017c: #39 := extend:64[extract:31:0[R0]] + 1
0000017e: R1 := 0
00000180: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#39]
00000184: R0 := 0x11000
00000188: R0 := R0 + 0x14
0000018c: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000190: R0 := 0
00000192: R0 := R0 & 0xFFFFFFFF00000000
00000196: call R30 with noreturn

00000355: sub register_tm_clones(register_tm_clones_result)
00000376: register_tm_clones_result :: out u32 = R0

000000a0:
000000a2: R0 := 0x11000
000000a6: R0 := R0 + 0x10
000000aa: R1 := 0x11000
000000ae: R1 := R1 + 0x10
000000b2: R1 := R1 - R0
000000b6: R2 := R1 >> 0x3F
000000ba: R1 := R2 + (R1 ~>> 3)
000000be: #22 := ~(R1 ~>> 1) + 1
000000c0: NF := extract:63:63[#22]
000000c2: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000000c4: ZF := #22 = 0
000000c6: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000000ca: R1 := R1 >> 1
000000d3: #25 := ZF
000000cf: when #25 goto %000000cd
00000361: goto %00000288

00000288:
0000028a: R2 := 0x10000
0000028e: R2 := mem[R2 + 0xFF8, el]:u64
00000296: #88 := R2 = 0
00000292: when #88 goto %000000cd
00000362: goto %00000298

000000cd:
000000d6: call R30 with noreturn

00000298:
0000029a: R16 := R2
0000029e: call R16 with noreturn
