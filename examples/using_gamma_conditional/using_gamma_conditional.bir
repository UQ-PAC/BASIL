000007e9: program
000007cc: sub __cxa_finalize(__cxa_finalize_result)
000007ea: __cxa_finalize_result :: out u32 = low:32[R0]

0000054a:
0000062b: R16 := 0x10000
00000632: R17 := mem[R16 + 0xFA0, el]:u64
00000638: R16 := R16 + 0xFA0
0000063d: call R17 with noreturn

000007cd: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000007eb: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000324:
00000328: #5 := R31 - 0x20
0000032e: mem := mem with [#5, el]:u64 <- R29
00000334: mem := mem with [#5 + 8, el]:u64 <- R30
00000338: R31 := #5
0000033e: R29 := R31
00000346: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000034b: R19 := 0x11000
00000352: R0 := pad:64[mem[R19 + 0x10]]
00000359: when 31:0[R0] <> 0 goto %00000357
000007ce: goto %00000513

00000513:
00000516: R0 := 0x10000
0000051d: R0 := mem[R0 + 0xFD8, el]:u64
00000523: when R0 = 0 goto %00000521
000007cf: goto %0000053a

0000053a:
0000053d: R0 := 0x11000
00000544: R0 := mem[R0 + 8, el]:u64
00000549: R30 := 0x700
0000054c: call @__cxa_finalize with return %00000521

00000521:
00000529: R30 := 0x704
0000052b: call @deregister_tm_clones with return %0000052d

0000052d:
00000530: R0 := 1
00000538: mem := mem with [R19 + 0x10] <- 7:0[R0]
000007d0: goto %00000357

00000357:
00000361: R19 := mem[R31 + 0x10, el]:u64
00000368: R29 := mem[R31, el]:u64
0000036d: R30 := mem[R31 + 8, el]:u64
00000371: R31 := R31 + 0x20
00000376: call R30 with noreturn

000007d1: sub __libc_csu_fini(__libc_csu_fini_result)
000007ec: __libc_csu_fini_result :: out u32 = low:32[R0]

000004aa:
000004ad: call R30 with noreturn

000007d2: sub __libc_csu_init(__libc_csu_init_result)
000007ed: __libc_csu_init_result :: out u32 = low:32[R0]

000003b7:
000003bb: #7 := R31 - 0x40
000003c1: mem := mem with [#7, el]:u64 <- R29
000003c7: mem := mem with [#7 + 8, el]:u64 <- R30
000003cb: R31 := #7
000003d1: R29 := R31
000003d7: #8 := R31 + 0x10
000003dd: mem := mem with [#8, el]:u64 <- R19
000003e3: mem := mem with [#8 + 8, el]:u64 <- R20
000003e8: R20 := 0x10000
000003ee: R20 := R20 + 0xD90
000003f4: #9 := R31 + 0x20
000003fa: mem := mem with [#9, el]:u64 <- R21
00000400: mem := mem with [#9 + 8, el]:u64 <- R22
00000405: R21 := 0x10000
0000040b: R21 := R21 + 0xD88
00000412: R20 := R20 + ~R21 + 1
00000418: R22 := pad:64[31:0[R0]]
0000041e: #10 := R31 + 0x30
00000424: mem := mem with [#10, el]:u64 <- R23
0000042a: mem := mem with [#10 + 8, el]:u64 <- R24
00000430: R23 := R1
00000436: R24 := R2
0000043b: R30 := 0x778
0000043e: call @_init with return %00000440

00000440:
00000444: #11 := ~(R20 ~>> 3)
00000448: #12 := ~(R20 ~>> 3) + 1
0000044d: VF := extend:65[#12] <> extend:65[#11] + 1
00000452: CF := pad:65[#12] <> pad:65[#11] + 1
00000456: ZF := #12 = 0
0000045a: NF := 63:63[#12]
00000460: when ZF goto %0000045e
000007d3: goto %000004af

000004af:
000004b5: R20 :=

          >> 3 | R20 << 0x3D]
000004ba: R19 := 0
000007d4: goto %000004bc

000004bc:
000004c2: R3 := mem[R21 + (60:0[R19].0), el]:u64
000004c8: R2 := R24
000004ce: R19 := R19 + 1
000004d4: R1 := R23
000004da: R0 := pad:64[31:0[R22]]
000004df: R30 := 0x7A0
000004e2: call R3 with return %000004e4

000004e4:
000004e8: #16 := ~R19
000004ed: #17 := R20 + ~R19 + 1
000004f3: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
000004f9: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
000004fd: ZF := #17 = 0
00000501: NF := 63:63[#17]
00000506: when ZF <> 1 goto %000004bc
000007d5: goto %0000045e

0000045e:
00000467: #13 := R31 + 0x10
0000046c: R19 := mem[#13, el]:u64
00000471: R20 := mem[#13 + 8, el]:u64
00000477: #14 := R31 + 0x20
0000047c: R21 := mem[#14, el]:u64
00000481: R22 := mem[#14 + 8, el]:u64
00000487: #15 := R31 + 0x30
0000048c: R23 := mem[#15, el]:u64
00000491: R24 := mem[#15 + 8, el]:u64
00000498: R29 := mem[R31, el]:u64
0000049d: R30 := mem[R31 + 8, el]:u64
000004a1: R31 := R31 + 0x40
000004a6: call R30 with noreturn

000007d6: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000007ee: __libc_start_main_main :: in u64 = R0
000007ef: __libc_start_main_arg2 :: in u32 = low:32[R1]
000007f0: __libc_start_main_arg3 :: in out u64 = R2
000007f1: __libc_start_main_auxv :: in out u64 = R3
000007f2: __libc_start_main_result :: out u32 = low:32[R0]

00000262:
00000641: R16 := 0x10000
00000648: R17 := mem[R16 + 0xFA8, el]:u64
0000064e: R16 := R16 + 0xFA8
00000653: call R17 with noreturn

000007d7: sub _fini(_fini_result)
000007f3: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

000007d8: sub _init(_init_result)
000007f4: _init_result :: out u32 = low:32[R0]

0000043c:
0000070d: #19 := R31 - 0x10
00000713: mem := mem with [#19, el]:u64 <- R29
00000719: mem := mem with [#19 + 8, el]:u64 <- R30
0000071d: R31 := #19
00000723: R29 := R31
00000728: R30 := 0x5A4
0000072a: call @call_weak_fn with return %0000072c

0000072c:
00000731: R29 := mem[R31, el]:u64
00000736: R30 := mem[R31 + 8, el]:u64
0000073a: R31 := R31 + 0x10
0000073f: call R30 with noreturn

000007d9: sub _start(_start_result)
000007f5: _start_result :: out u32 = low:32[R0]

00000217:
0000021a: R29 := 0
0000021f: R30 := 0
00000225: R5 := R0
0000022c: R1 := mem[R31, el]:u64
00000232: R2 := R31 + 8
00000238: R6 := R31
0000023d: R0 := 0x10000
00000244: R0 := mem[R0 + 0xFF0, el]:u64
00000249: R3 := 0x10000
00000250: R3 := mem[R3 + 0xFE8, el]:u64
00000255: R4 := 0x10000
0000025c: R4 := mem[R4 + 0xFC8, el]:u64
00000261: R30 := 0x644
00000264: call @__libc_start_main with return %00000266

00000266:
00000269: R30 := 0x648
0000026c: call @abort with return %000007da

000007da:
000007db: call @call_weak_fn with noreturn

000007dc: sub abort()


0000026a:
0000066d: R16 := 0x10000
00000674: R17 := mem[R16 + 0xFB8, el]:u64
0000067a: R16 := R16 + 0xFB8
0000067f: call R17 with noreturn

000007dd: sub call_weak_fn(call_weak_fn_result)
000007f6: call_weak_fn_result :: out u32 = low:32[R0]

0000026e:
00000271: R0 := 0x10000
00000278: R0 := mem[R0 + 0xFE0, el]:u64
0000027e: when R0 = 0 goto %0000027c
000007de: goto %0000058a

0000027c:
00000284: call R30 with noreturn

0000058a:
0000058d: goto @__gmon_start__

0000058b:
00000657: R16 := 0x10000
0000065e: R17 := mem[R16 + 0xFB0, el]:u64
00000664: R16 := R16 + 0xFB0
00000669: call R17 with noreturn

000007df: sub deregister_tm_clones(deregister_tm_clones_result)
000007f7: deregister_tm_clones_result :: out u32 = low:32[R0]

00000288:
0000028b: R0 := 0x11000
00000291: R0 := R0 + 0x10
00000296: R1 := 0x11000
0000029c: R1 := R1 + 0x10
000002a2: #1 := ~R0
000002a7: #2 := R1 + ~R0 + 1
000002ad: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002b3: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002b7: ZF := #2 = 0
000002bb: NF := 63:63[#2]
000002c1: when ZF goto %000002bf
000007e0: goto %0000056c

0000056c:
0000056f: R1 := 0x10000
00000576: R1 := mem[R1 + 0xFD0, el]:u64
0000057b: when R1 = 0 goto %000002bf
000007e1: goto %0000057f

000002bf:
000002c7: call R30 with noreturn

0000057f:
00000583: R16 := R1
00000588: call R16 with noreturn

000007e2: sub frame_dummy(frame_dummy_result)
000007f8: frame_dummy_result :: out u32 = low:32[R0]

00000378:
0000037a: call @register_tm_clones with noreturn

000007e3: sub main(main_argc, main_argv, main_result)
000007f9: main_argc :: in u32 = low:32[R0]
000007fa: main_argv :: in out u64 = R1
000007fb: main_result :: out u32 = low:32[R0]

0000037c:
0000037f: R0 := 0x11000
00000385: R0 := R0 + 0x18
0000038c: R0 := pad:64[mem[R0, el]:u32]
00000392: #6 := 31:0[R0] + 0
00000397: VF := extend:33[#6] <> extend:33[31:0[R0]] + 0
0000039c: CF := pad:33[#6] <> pad:33[31:0[R0]] - 0x100000000
000003a0: ZF := #6 = 0
000003a4: NF := 31:31[#6]
000003aa: when ZF goto %000003a8
000007e4: goto %0000050a

000003a8:
000003b0: R0 := 1
000007e5: goto %000003b2

0000050a:
0000050d: R0 := 0
00000511: goto %000003b2

000003b2:
000003b5: call R30 with noreturn

000007e6: sub register_tm_clones(register_tm_clones_result)
000007fc: register_tm_clones_result :: out u32 = low:32[R0]

000002c9:
000002cc: R0 := 0x11000
000002d2: R0 := R0 + 0x10
000002d7: R1 := 0x11000
000002dd: R1 := R1 + 0x10
000002e4: R1 := R1 + ~R0 + 1
000002eb: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
000002f2: R1 := R2 + (R1 ~>> 3)
000002f8: #3 := ~(R1 ~>> 1)
000002fc: #4 := ~(R1 ~>> 1) + 1
00000301: VF := extend:65[#4] <> extend:65[#3] + 1
00000306: CF := pad:65[#4] <> pad:65[#3] + 1
0000030a: ZF := #4 = 0
0000030e: NF := 63:63[#4]
00000316: R1 :=

          >> 1 | R1 << 0x3F]
0000031c: when ZF goto %0000031a
000007e7: goto %0000054e

0000054e:
00000551: R2 := 0x10000
00000558: R2 := mem[R2 + 0xFF8, el]:u64
0000055d: when R2 = 0 goto %0000031a
000007e8: goto %00000561

0000031a:
00000322: call R30 with noreturn

00000561:
00000565: R16 := R2
0000056a: call R16 with noreturn
