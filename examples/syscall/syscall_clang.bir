0000084e: program
00000832: sub __cxa_finalize(__cxa_finalize_result)
0000084f: __cxa_finalize_result :: out u32 = low:32[R0]

0000057e:
0000066f: R16 := 0x11000
00000676: R17 := mem[R16, el]:u64
0000067c: R16 := R16
00000681: call R17 with noreturn

00000833: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000850: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000333:
00000337: #5 := R31 - 0x20
0000033d: mem := mem with [#5, el]:u64 <- R29
00000343: mem := mem with [#5 + 8, el]:u64 <- R30
00000347: R31 := #5
0000034d: R29 := R31
00000355: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000035a: R19 := 0x11000
00000361: R0 := pad:64[mem[R19 + 0x38]]
00000368: when 31:0[R0] <> 0 goto %00000366
00000834: goto %00000547

00000547:
0000054a: R0 := 0x10000
00000551: R0 := mem[R0 + 0xFC0, el]:u64
00000557: when R0 = 0 goto %00000555
00000835: goto %0000056e

0000056e:
00000571: R0 := 0x11000
00000578: R0 := mem[R0 + 0x30, el]:u64
0000057d: R30 := 0x750
00000580: call @__cxa_finalize with return %00000555

00000555:
0000055d: R30 := 0x754
0000055f: call @deregister_tm_clones with return %00000561

00000561:
00000564: R0 := 1
0000056c: mem := mem with [R19 + 0x38] <- 7:0[R0]
00000836: goto %00000366

00000366:
00000370: R19 := mem[R31 + 0x10, el]:u64
00000377: R29 := mem[R31, el]:u64
0000037c: R30 := mem[R31 + 8, el]:u64
00000380: R31 := R31 + 0x20
00000385: call R30 with noreturn

00000837: sub __libc_csu_fini(__libc_csu_fini_result)
00000851: __libc_csu_fini_result :: out u32 = low:32[R0]

000004e7:
000004ea: call R30 with noreturn

00000838: sub __libc_csu_init(__libc_csu_init_result)
00000852: __libc_csu_init_result :: out u32 = low:32[R0]

000003f4:
000003f8: #8 := R31 - 0x40
000003fe: mem := mem with [#8, el]:u64 <- R29
00000404: mem := mem with [#8 + 8, el]:u64 <- R30
00000408: R31 := #8
0000040e: R29 := R31
00000414: #9 := R31 + 0x10
0000041a: mem := mem with [#9, el]:u64 <- R19
00000420: mem := mem with [#9 + 8, el]:u64 <- R20
00000425: R20 := 0x10000
0000042b: R20 := R20 + 0xDC0
00000431: #10 := R31 + 0x20
00000437: mem := mem with [#10, el]:u64 <- R21
0000043d: mem := mem with [#10 + 8, el]:u64 <- R22
00000442: R21 := 0x10000
00000448: R21 := R21 + 0xDB8
0000044f: R20 := R20 + ~R21 + 1
00000455: R22 := pad:64[31:0[R0]]
0000045b: #11 := R31 + 0x30
00000461: mem := mem with [#11, el]:u64 <- R23
00000467: mem := mem with [#11 + 8, el]:u64 <- R24
0000046d: R23 := R1
00000473: R24 := R2
00000478: R30 := 0x7D8
0000047b: call @_init with return %0000047d

0000047d:
00000481: #12 := ~(R20 ~>> 3)
00000485: #13 := ~(R20 ~>> 3) + 1
0000048a: VF := extend:65[#13] <> extend:65[#12] + 1
0000048f: CF := pad:65[#13] <> pad:65[#12] + 1
00000493: ZF := #13 = 0
00000497: NF := 63:63[#13]
0000049d: when ZF goto %0000049b
00000839: goto %000004ec

000004ec:
000004f2: R20 :=

          >> 3 | R20 << 0x3D]
000004f7: R19 := 0
0000083a: goto %000004f9

000004f9:
000004ff: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000505: R2 := R24
0000050b: R19 := R19 + 1
00000511: R1 := R23
00000517: R0 := pad:64[31:0[R22]]
0000051c: R30 := 0x800
0000051f: call R3 with return %00000521

00000521:
00000525: #17 := ~R19
0000052a: #18 := R20 + ~R19 + 1
00000530: VF := extend:65[#18] <> extend:65[R20] + extend:65[#17] + 1
00000536: CF := pad:65[#18] <> pad:65[R20] + pad:65[#17] + 1
0000053a: ZF := #18 = 0
0000053e: NF := 63:63[#18]
00000543: when ZF <> 1 goto %000004f9
0000083b: goto %0000049b

0000049b:
000004a4: #14 := R31 + 0x10
000004a9: R19 := mem[#14, el]:u64
000004ae: R20 := mem[#14 + 8, el]:u64
000004b4: #15 := R31 + 0x20
000004b9: R21 := mem[#15, el]:u64
000004be: R22 := mem[#15 + 8, el]:u64
000004c4: #16 := R31 + 0x30
000004c9: R23 := mem[#16, el]:u64
000004ce: R24 := mem[#16 + 8, el]:u64
000004d5: R29 := mem[R31, el]:u64
000004da: R30 := mem[R31 + 8, el]:u64
000004de: R31 := R31 + 0x40
000004e3: call R30 with noreturn

0000083c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000853: __libc_start_main_main :: in u64 = R0
00000854: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000855: __libc_start_main_arg3 :: in out u64 = R2
00000856: __libc_start_main_auxv :: in out u64 = R3
00000857: __libc_start_main_result :: out u32 = low:32[R0]

00000271:
0000069b: R16 := 0x11000
000006a2: R17 := mem[R16 + 0x10, el]:u64
000006a8: R16 := R16 + 0x10
000006ad: call R17 with noreturn

0000083d: sub _fini(_fini_result)
00000858: _fini_result :: out u32 = low:32[R0]

0000002f:
00000033: #0 := R31 - 0x10
00000039: mem := mem with [#0, el]:u64 <- R29
0000003f: mem := mem with [#0 + 8, el]:u64 <- R30
00000043: R31 := #0
00000049: R29 := R31
00000050: R29 := mem[R31, el]:u64
00000055: R30 := mem[R31 + 8, el]:u64
00000059: R31 := R31 + 0x10
0000005e: call R30 with noreturn

0000083e: sub _init(_init_result)
00000859: _init_result :: out u32 = low:32[R0]

00000479:
0000076b: #20 := R31 - 0x10
00000771: mem := mem with [#20, el]:u64 <- R29
00000777: mem := mem with [#20 + 8, el]:u64 <- R30
0000077b: R31 := #20
00000781: R29 := R31
00000786: R30 := 0x5DC
00000788: call @call_weak_fn with return %0000078a

0000078a:
0000078f: R29 := mem[R31, el]:u64
00000794: R30 := mem[R31 + 8, el]:u64
00000798: R31 := R31 + 0x10
0000079d: call R30 with noreturn

0000083f: sub _start(_start_result)
0000085a: _start_result :: out u32 = low:32[R0]

00000226:
00000229: R29 := 0
0000022e: R30 := 0
00000234: R5 := R0
0000023b: R1 := mem[R31, el]:u64
00000241: R2 := R31 + 8
00000247: R6 := R31
0000024c: R0 := 0x10000
00000253: R0 := mem[R0 + 0xFD8, el]:u64
00000258: R3 := 0x10000
0000025f: R3 := mem[R3 + 0xFD0, el]:u64
00000264: R4 := 0x10000
0000026b: R4 := mem[R4 + 0xFB0, el]:u64
00000270: R30 := 0x694
00000273: call @__libc_start_main with return %00000275

00000275:
00000278: R30 := 0x698
0000027b: call @abort with return %00000840

00000840:
00000841: call @call_weak_fn with noreturn

00000842: sub abort()


00000279:
000006c7: R16 := 0x11000
000006ce: R17 := mem[R16 + 0x20, el]:u64
000006d4: R16 := R16 + 0x20
000006d9: call R17 with noreturn

00000843: sub call_weak_fn(call_weak_fn_result)
0000085b: call_weak_fn_result :: out u32 = low:32[R0]

0000027d:
00000280: R0 := 0x10000
00000287: R0 := mem[R0 + 0xFC8, el]:u64
0000028d: when R0 = 0 goto %0000028b
00000844: goto %000005be

0000028b:
00000293: call R30 with noreturn

000005be:
000005c1: goto @__gmon_start__

000005bf:
000006b1: R16 := 0x11000
000006b8: R17 := mem[R16 + 0x18, el]:u64
000006be: R16 := R16 + 0x18
000006c3: call R17 with noreturn

00000845: sub deregister_tm_clones(deregister_tm_clones_result)
0000085c: deregister_tm_clones_result :: out u32 = low:32[R0]

00000297:
0000029a: R0 := 0x11000
000002a0: R0 := R0 + 0x38
000002a5: R1 := 0x11000
000002ab: R1 := R1 + 0x38
000002b1: #1 := ~R0
000002b6: #2 := R1 + ~R0 + 1
000002bc: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002c2: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002c6: ZF := #2 = 0
000002ca: NF := 63:63[#2]
000002d0: when ZF goto %000002ce
00000846: goto %000005a0

000005a0:
000005a3: R1 := 0x10000
000005aa: R1 := mem[R1 + 0xFB8, el]:u64
000005af: when R1 = 0 goto %000002ce
00000847: goto %000005b3

000002ce:
000002d6: call R30 with noreturn

000005b3:
000005b7: R16 := R1
000005bc: call R16 with noreturn

00000848: sub fork(fork_result)
0000085d: fork_result :: out u32 = low:32[R0]

000003c4:
00000685: R16 := 0x11000
0000068c: R17 := mem[R16 + 8, el]:u64
00000692: R16 := R16 + 8
00000697: call R17 with noreturn

00000849: sub frame_dummy(frame_dummy_result)
0000085e: frame_dummy_result :: out u32 = low:32[R0]

00000387:
00000389: call @register_tm_clones with noreturn

0000084a: sub main(main_argc, main_argv, main_result)
0000085f: main_argc :: in u32 = low:32[R0]
00000860: main_argv :: in out u64 = R1
00000861: main_result :: out u32 = low:32[R0]

0000038b:
0000038f: R31 := R31 - 0x30
00000395: #6 := R31 + 0x20
0000039b: mem := mem with [#6, el]:u64 <- R29
000003a1: mem := mem with [#6 + 8, el]:u64 <- R30
000003a7: R29 := R31 + 0x20
000003ae: mem := mem with [R29 - 4, el]:u32 <- 0
000003b6: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
000003be: mem := mem with [R31 + 0x10, el]:u64 <- R1
000003c3: R30 := 0x788
000003c6: call @fork with return %000003c8

000003c8:
000003ce: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000003d5: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000003db: #7 := R31 + 0x20
000003e0: R29 := mem[#7, el]:u64
000003e5: R30 := mem[#7 + 8, el]:u64
000003eb: R31 := R31 + 0x30
000003f0: call R30 with noreturn

0000084b: sub register_tm_clones(register_tm_clones_result)
00000862: register_tm_clones_result :: out u32 = low:32[R0]

000002d8:
000002db: R0 := 0x11000
000002e1: R0 := R0 + 0x38
000002e6: R1 := 0x11000
000002ec: R1 := R1 + 0x38
000002f3: R1 := R1 + ~R0 + 1
000002fa: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000301: R1 := R2 + (R1 ~>> 3)
00000307: #3 := ~(R1 ~>> 1)
0000030b: #4 := ~(R1 ~>> 1) + 1
00000310: VF := extend:65[#4] <> extend:65[#3] + 1
00000315: CF := pad:65[#4] <> pad:65[#3] + 1
00000319: ZF := #4 = 0
0000031d: NF := 63:63[#4]
00000325: R1 :=

          >> 1 | R1 << 0x3F]
0000032b: when ZF goto %00000329
0000084c: goto %00000582

00000582:
00000585: R2 := 0x10000
0000058c: R2 := mem[R2 + 0xFE0, el]:u64
00000591: when R2 = 0 goto %00000329
0000084d: goto %00000595

00000329:
00000331: call R30 with noreturn

00000595:
00000599: R16 := R2
0000059e: call R16 with noreturn
