var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $_DYNAMIC_addr: bv64;
axiom ($_DYNAMIC_addr == 69064bv64);
const $_GLOBAL_OFFSET_TABLE__addr: bv64;
axiom ($_GLOBAL_OFFSET_TABLE__addr == 69544bv64);
const $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2068bv64);
const $__FRAME_END___addr: bv64;
axiom ($__FRAME_END___addr == 2360bv64);
const $__TMC_END___addr: bv64;
axiom ($__TMC_END___addr == 69680bv64);
const $__do_global_dtors_aux_addr: bv64;
axiom ($__do_global_dtors_aux_addr == 1744bv64);
const $__dso_handle_addr: bv64;
axiom ($__dso_handle_addr == 69672bv64);
const $__libc_csu_fini_addr: bv64;
axiom ($__libc_csu_fini_addr == 2048bv64);
const $__libc_csu_init_addr: bv64;
axiom ($__libc_csu_init_addr == 1920bv64);
const $_fini_addr: bv64;
axiom ($_fini_addr == 2052bv64);
const $_init_addr: bv64;
axiom ($_init_addr == 1432bv64);
const $_start_addr: bv64;
axiom ($_start_addr == 1552bv64);
const $call_weak_fn_addr: bv64;
axiom ($call_weak_fn_addr == 1608bv64);
const $deregister_tm_clones_addr: bv64;
axiom ($deregister_tm_clones_addr == 1632bv64);
const $frame_dummy_addr: bv64;
axiom ($frame_dummy_addr == 1824bv64);
const $main_addr: bv64;
axiom ($main_addr == 1828bv64);
const $register_tm_clones_addr: bv64;
axiom ($register_tm_clones_addr == 1680bv64);
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvadd"} bvadd65(bv65, bv65) returns (bv65);
function {:bvbuiltin "bvashr"} bvashr64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp64(bv64, bv64) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp65(bv65, bv65) returns (bv1);
function {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:bvbuiltin "bvnot"} bvnot64(bv64) returns (bv64);
function {:bvbuiltin "bvor"} bvor32(bv32, bv32) returns (bv32);
function {:bvbuiltin "bvxor"} bvxor32(bv32, bv32) returns (bv32);
function gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:bvbuiltin "sign_extend 1"} sign_extend1_63(bv63) returns (bv64);
function {:bvbuiltin "sign_extend 1"} sign_extend1_64(bv64) returns (bv65);
function {:bvbuiltin "sign_extend 3"} sign_extend3_61(bv61) returns (bv64);
function {:bvbuiltin "zero_extend 1"} zero_extend1_64(bv64) returns (bv65);
function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
function {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);
function {:bvbuiltin "zero_extend 61"} zero_extend61_3(bv3) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure __cxa_finalize(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (__cxa_finalize_result: bv32, Gamma___cxa_finalize_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var Gamma_R16: bool;
  var Gamma_R17: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R16: bv64;
  var R17: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  l__cxa_finalize:
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, R16), (gamma_load64(Gamma_mem, R16) || L(mem, R16));
    R16, Gamma_R16 := R16, Gamma_R16;
    // UNRESOLVED: call R17
    assume false;
    // no return target
    assume false;
}

procedure __do_global_dtors_aux(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (__do_global_dtors_aux_result: bv32, Gamma___do_global_dtors_aux_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var #3: bv64;
  var #temp0: bv32;
  var Gamma_#3: bool;
  var Gamma_#temp0: bool;
  var Gamma_R0: bool;
  var Gamma_R19: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R19: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  l__do_global_dtors_aux:
    #3, Gamma_#3 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    call rely();
    assert (L(mem, #3) ==> Gamma_R29);
    mem, Gamma_mem := memory_store64_le(mem, #3, R29), gamma_store64(Gamma_mem, #3, Gamma_R29);
    call rely();
    assert (L(mem, bvadd64(#3, 8bv64)) ==> Gamma_R30);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#3, 8bv64), R30), gamma_store64(Gamma_mem, bvadd64(#3, 8bv64), Gamma_R30);
    R31, Gamma_R31 := #3, Gamma_#3;
    R29, Gamma_R29 := R31, Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R19), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R19);
    R19, Gamma_R19 := 69632bv64, true;
    call rely();
    R0, Gamma_R0 := zero_extend56_8(memory_load8_le(mem, bvadd64(R19, 48bv64))), (gamma_load8(Gamma_mem, bvadd64(R19, 48bv64)) || L(mem, bvadd64(R19, 48bv64)));
    assert Gamma_R0;
    if ((bvnot1(bvcomp32(R0[32:0], 0bv32)) != 0bv1)) {
      goto l00000365;
    }
    goto l0000055b;
  l0000055b:
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4032bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4032bv64)) || L(mem, bvadd64(R0, 4032bv64)));
    assert Gamma_R0;
    if ((bvcomp64(R0, 0bv64) != 0bv1)) {
      goto l00000569;
    }
    goto l00000582;
  l00000582:
    R0, Gamma_R0 := 69632bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 40bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 40bv64)) || L(mem, bvadd64(R0, 40bv64)));
    R30, Gamma_R30 := 1792bv64, true;
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := __cxa_finalize(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    goto l00000569;
  l00000569:
    R30, Gamma_R30 := 1796bv64, true;
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := deregister_tm_clones(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    goto l00000575;
  l00000575:
    R0, Gamma_R0 := 1bv64, true;
    call rely();
    assert (L(mem, bvadd64(R19, 48bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store8_le(mem, bvadd64(R19, 48bv64), R0[8:0]), gamma_store8(Gamma_mem, bvadd64(R19, 48bv64), Gamma_R0);
    goto l00000365;
  l00000365:
    call rely();
    R19, Gamma_R19 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    call rely();
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    call rely();
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    __do_global_dtors_aux_result, Gamma___do_global_dtors_aux_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}

procedure __libc_csu_fini(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (__libc_csu_fini_result: bv32, Gamma___libc_csu_fini_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var Gamma_R0: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  l__libc_csu_fini:
    __libc_csu_fini_result, Gamma___libc_csu_fini_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}

procedure __libc_csu_init(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (__libc_csu_init_result: bv32, Gamma___libc_csu_init_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var #10: bv64;
  var #11: bv64;
  var #12: bv64;
  var #4: bv64;
  var #5: bv64;
  var #6: bv64;
  var #7: bv64;
  var #8: bv64;
  var #9: bv64;
  var #temp0: bv32;
  var CF: bv1;
  var Gamma_#10: bool;
  var Gamma_#11: bool;
  var Gamma_#12: bool;
  var Gamma_#4: bool;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  var Gamma_#7: bool;
  var Gamma_#8: bool;
  var Gamma_#9: bool;
  var Gamma_#temp0: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R19: bool;
  var Gamma_R2: bool;
  var Gamma_R20: bool;
  var Gamma_R21: bool;
  var Gamma_R22: bool;
  var Gamma_R23: bool;
  var Gamma_R24: bool;
  var Gamma_R29: bool;
  var Gamma_R3: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var R0: bv64;
  var R1: bv64;
  var R19: bv64;
  var R2: bv64;
  var R20: bv64;
  var R21: bv64;
  var R22: bv64;
  var R23: bv64;
  var R24: bv64;
  var R29: bv64;
  var R3: bv64;
  var R30: bv64;
  var R31: bv64;
  var VF: bv1;
  var ZF: bv1;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  l__libc_csu_init:
    #4, Gamma_#4 := bvadd64(R31, 18446744073709551552bv64), Gamma_R31;
    call rely();
    assert (L(mem, #4) ==> Gamma_R29);
    mem, Gamma_mem := memory_store64_le(mem, #4, R29), gamma_store64(Gamma_mem, #4, Gamma_R29);
    call rely();
    assert (L(mem, bvadd64(#4, 8bv64)) ==> Gamma_R30);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_mem, bvadd64(#4, 8bv64), Gamma_R30);
    R31, Gamma_R31 := #4, Gamma_#4;
    R29, Gamma_R29 := R31, Gamma_R31;
    #5, Gamma_#5 := bvadd64(R31, 16bv64), Gamma_R31;
    call rely();
    assert (L(mem, #5) ==> Gamma_R19);
    mem, Gamma_mem := memory_store64_le(mem, #5, R19), gamma_store64(Gamma_mem, #5, Gamma_R19);
    call rely();
    assert (L(mem, bvadd64(#5, 8bv64)) ==> Gamma_R20);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#5, 8bv64), R20), gamma_store64(Gamma_mem, bvadd64(#5, 8bv64), Gamma_R20);
    R20, Gamma_R20 := 65536bv64, true;
    R20, Gamma_R20 := bvadd64(R20, 3520bv64), Gamma_R20;
    #6, Gamma_#6 := bvadd64(R31, 32bv64), Gamma_R31;
    call rely();
    assert (L(mem, #6) ==> Gamma_R21);
    mem, Gamma_mem := memory_store64_le(mem, #6, R21), gamma_store64(Gamma_mem, #6, Gamma_R21);
    call rely();
    assert (L(mem, bvadd64(#6, 8bv64)) ==> Gamma_R22);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#6, 8bv64), R22), gamma_store64(Gamma_mem, bvadd64(#6, 8bv64), Gamma_R22);
    R21, Gamma_R21 := 65536bv64, true;
    R21, Gamma_R21 := bvadd64(R21, 3512bv64), Gamma_R21;
    R20, Gamma_R20 := bvadd64(bvadd64(R20, bvnot64(R21)), 1bv64), (Gamma_R21 && Gamma_R20);
    R22, Gamma_R22 := zero_extend32_32(R0[32:0]), Gamma_R0;
    #7, Gamma_#7 := bvadd64(R31, 48bv64), Gamma_R31;
    call rely();
    assert (L(mem, #7) ==> Gamma_R23);
    mem, Gamma_mem := memory_store64_le(mem, #7, R23), gamma_store64(Gamma_mem, #7, Gamma_R23);
    call rely();
    assert (L(mem, bvadd64(#7, 8bv64)) ==> Gamma_R24);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#7, 8bv64), R24), gamma_store64(Gamma_mem, bvadd64(#7, 8bv64), Gamma_R24);
    R23, Gamma_R23 := R1, Gamma_R1;
    R24, Gamma_R24 := R2, Gamma_R2;
    R20, Gamma_R20 := sign_extend3_61(R20[64:3]), Gamma_R20;
    R30, Gamma_R30 := 1980bv64, true;
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := _init(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    goto l000004b3;
  l000004b3:
    assert Gamma_R20;
    if ((bvcomp64(R20, 0bv64) != 0bv1)) {
      goto l000004b5;
    }
    goto l00000506;
  l00000506:
    R19, Gamma_R19 := 0bv64, true;
    goto l0000050d;
  l0000050d:
    call rely();
    R3, Gamma_R3 := memory_load64_le(mem, bvadd64(R21, (R19[61:0] ++ 0bv3))), (gamma_load64(Gamma_mem, bvadd64(R21, (R19[61:0] ++ 0bv3))) || L(mem, bvadd64(R21, (R19[61:0] ++ 0bv3))));
    R2, Gamma_R2 := R24, Gamma_R24;
    R19, Gamma_R19 := bvadd64(R19, 1bv64), Gamma_R19;
    R1, Gamma_R1 := R23, Gamma_R23;
    R0, Gamma_R0 := zero_extend32_32(R22[32:0]), Gamma_R22;
    R30, Gamma_R30 := 2016bv64, true;
    // UNRESOLVED: call R3
    assume false;
    goto l00000535;
  l00000535:
    #11, Gamma_#11 := bvnot64(R19), Gamma_R19;
    #12, Gamma_#12 := bvadd64(R20, bvnot64(R19)), (Gamma_R19 && Gamma_R20);
    VF, Gamma_VF := bvnot1(bvcomp65(sign_extend1_64(bvadd64(#12, 1bv64)), bvadd65(bvadd65(sign_extend1_64(R20), sign_extend1_64(#11)), 1bv65))), (Gamma_#11 && (Gamma_R20 && Gamma_#12));
    CF, Gamma_CF := bvnot1(bvcomp65(zero_extend1_64(bvadd64(#12, 1bv64)), bvadd65(bvadd65(zero_extend1_64(R20), zero_extend1_64(#11)), 1bv65))), (Gamma_#11 && (Gamma_R20 && Gamma_#12));
    ZF, Gamma_ZF := bvcomp64(bvadd64(#12, 1bv64), 0bv64), Gamma_#12;
    NF, Gamma_NF := bvadd64(#12, 1bv64)[64:63], Gamma_#12;
    assert Gamma_ZF;
    if ((bvnot1(bvcomp1(ZF, 1bv1)) != 0bv1)) {
      goto l0000050d;
    }
    goto l000004b5;
  l000004b5:
    #8, Gamma_#8 := bvadd64(R31, 16bv64), Gamma_R31;
    call rely();
    R19, Gamma_R19 := memory_load64_le(mem, #8), (gamma_load64(Gamma_mem, #8) || L(mem, #8));
    call rely();
    R20, Gamma_R20 := memory_load64_le(mem, bvadd64(#8, 8bv64)), (gamma_load64(Gamma_mem, bvadd64(#8, 8bv64)) || L(mem, bvadd64(#8, 8bv64)));
    #9, Gamma_#9 := bvadd64(R31, 32bv64), Gamma_R31;
    call rely();
    R21, Gamma_R21 := memory_load64_le(mem, #9), (gamma_load64(Gamma_mem, #9) || L(mem, #9));
    call rely();
    R22, Gamma_R22 := memory_load64_le(mem, bvadd64(#9, 8bv64)), (gamma_load64(Gamma_mem, bvadd64(#9, 8bv64)) || L(mem, bvadd64(#9, 8bv64)));
    #10, Gamma_#10 := bvadd64(R31, 48bv64), Gamma_R31;
    call rely();
    R23, Gamma_R23 := memory_load64_le(mem, #10), (gamma_load64(Gamma_mem, #10) || L(mem, #10));
    call rely();
    R24, Gamma_R24 := memory_load64_le(mem, bvadd64(#10, 8bv64)), (gamma_load64(Gamma_mem, bvadd64(#10, 8bv64)) || L(mem, bvadd64(#10, 8bv64)));
    call rely();
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    call rely();
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 64bv64), Gamma_R31;
    __libc_csu_init_result, Gamma___libc_csu_init_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}

procedure __libc_start_main(__libc_start_main_main: bv64, Gamma___libc_start_main_main: bool, __libc_start_main_arg2: bv32, Gamma___libc_start_main_arg2: bool, __libc_start_main_arg3: bv64, Gamma___libc_start_main_arg3: bool, __libc_start_main_auxv: bv64, Gamma___libc_start_main_auxv: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (__libc_start_main_arg3_out: bv64, Gamma___libc_start_main_arg3_out: bool, __libc_start_main_auxv_out: bv64, Gamma___libc_start_main_auxv_out: bool, __libc_start_main_result: bv32, Gamma___libc_start_main_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R16: bool;
  var Gamma_R17: bool;
  var Gamma_R2: bool;
  var Gamma_R29: bool;
  var Gamma_R3: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R1: bv64;
  var R16: bv64;
  var R17: bv64;
  var R2: bv64;
  var R29: bv64;
  var R3: bv64;
  var R30: bv64;
  var R31: bv64;
  R0, Gamma_R0 := __libc_start_main_main, Gamma___libc_start_main_main;
  R1, Gamma_R1 := zero_extend32_32(__libc_start_main_arg2), Gamma___libc_start_main_arg2;
  R2, Gamma_R2 := __libc_start_main_arg3, Gamma___libc_start_main_arg3;
  R3, Gamma_R3 := __libc_start_main_auxv, Gamma___libc_start_main_auxv;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  l__libc_start_main:
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, bvadd64(R16, 8bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 8bv64)) || L(mem, bvadd64(R16, 8bv64)));
    R16, Gamma_R16 := bvadd64(R16, 8bv64), Gamma_R16;
    // UNRESOLVED: call R17
    assume false;
    // no return target
    assume false;
}

procedure _fini(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (_fini_result: bv32, Gamma__fini_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var #0: bv64;
  var Gamma_#0: bool;
  var Gamma_R0: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  l_fini:
    #0, Gamma_#0 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    call rely();
    assert (L(mem, #0) ==> Gamma_R29);
    mem, Gamma_mem := memory_store64_le(mem, #0, R29), gamma_store64(Gamma_mem, #0, Gamma_R29);
    call rely();
    assert (L(mem, bvadd64(#0, 8bv64)) ==> Gamma_R30);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#0, 8bv64), R30), gamma_store64(Gamma_mem, bvadd64(#0, 8bv64), Gamma_R30);
    R31, Gamma_R31 := #0, Gamma_#0;
    R29, Gamma_R29 := R31, Gamma_R31;
    call rely();
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    call rely();
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    _fini_result, Gamma__fini_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}

procedure _init(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (_init_result: bv32, Gamma__init_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var #14: bv64;
  var #temp0: bv32;
  var Gamma_#14: bool;
  var Gamma_#temp0: bool;
  var Gamma_R0: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  l_init:
    #14, Gamma_#14 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    call rely();
    assert (L(mem, #14) ==> Gamma_R29);
    mem, Gamma_mem := memory_store64_le(mem, #14, R29), gamma_store64(Gamma_mem, #14, Gamma_R29);
    call rely();
    assert (L(mem, bvadd64(#14, 8bv64)) ==> Gamma_R30);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#14, 8bv64), R30), gamma_store64(Gamma_mem, bvadd64(#14, 8bv64), Gamma_R30);
    R31, Gamma_R31 := #14, Gamma_#14;
    R29, Gamma_R29 := R31, Gamma_R31;
    R30, Gamma_R30 := 1444bv64, true;
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := call_weak_fn(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    goto l00000784;
  l00000784:
    call rely();
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    call rely();
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    _init_result, Gamma__init_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}

procedure _start(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (_start_result: bv32, Gamma__start_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var #temp0: bv32;
  var #temp2: bv32;
  var Gamma_#temp0: bool;
  var Gamma_#temp2: bool;
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R2: bool;
  var Gamma_R29: bool;
  var Gamma_R3: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var Gamma_R4: bool;
  var Gamma_R5: bool;
  var Gamma_R6: bool;
  var R0: bv64;
  var R1: bv64;
  var R2: bv64;
  var R29: bv64;
  var R3: bv64;
  var R30: bv64;
  var R31: bv64;
  var R4: bv64;
  var R5: bv64;
  var R6: bv64;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  l_start:
    R29, Gamma_R29 := 0bv64, true;
    R30, Gamma_R30 := 0bv64, true;
    R5, Gamma_R5 := R0, Gamma_R0;
    call rely();
    R1, Gamma_R1 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R2, Gamma_R2 := bvadd64(R31, 8bv64), Gamma_R31;
    R6, Gamma_R6 := R31, Gamma_R31;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4056bv64)) || L(mem, bvadd64(R0, 4056bv64)));
    R3, Gamma_R3 := 65536bv64, true;
    call rely();
    R3, Gamma_R3 := memory_load64_le(mem, bvadd64(R3, 4048bv64)), (gamma_load64(Gamma_mem, bvadd64(R3, 4048bv64)) || L(mem, bvadd64(R3, 4048bv64)));
    R4, Gamma_R4 := 65536bv64, true;
    call rely();
    R4, Gamma_R4 := memory_load64_le(mem, bvadd64(R4, 4016bv64)), (gamma_load64(Gamma_mem, bvadd64(R4, 4016bv64)) || L(mem, bvadd64(R4, 4016bv64)));
    R30, Gamma_R30 := 1604bv64, true;
    call R2, Gamma_R2, R3, Gamma_R3, #temp2, Gamma_#temp2, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := __libc_start_main(R0, Gamma_R0, R1[32:0], Gamma_R1, R2, Gamma_R2, R3, Gamma_R3, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp2), Gamma_#temp2;
    goto l00000291;
  l00000291:
    R30, Gamma_R30 := 1608bv64, true;
    call R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := abort(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    goto l00000842;
  l00000842:
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := call_weak_fn(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    // no return target
    assume false;
}

procedure abort(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var Gamma_R16: bool;
  var Gamma_R17: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R16: bv64;
  var R17: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  labort:
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, bvadd64(R16, 24bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 24bv64)) || L(mem, bvadd64(R16, 24bv64)));
    R16, Gamma_R16 := bvadd64(R16, 24bv64), Gamma_R16;
    // UNRESOLVED: call R17
    assume false;
    // no return target
    assume false;
}

procedure call_weak_fn(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (call_weak_fn_result: bv32, Gamma_call_weak_fn_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var Gamma_R0: bool;
  var Gamma_R16: bool;
  var Gamma_R17: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R16: bv64;
  var R17: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lcall_weak_fn:
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4040bv64)) || L(mem, bvadd64(R0, 4040bv64)));
    assert Gamma_R0;
    if ((bvcomp64(R0, 0bv64) != 0bv1)) {
      goto l000002a7;
    }
    goto l000005d2;
  l000002a7:
    call_weak_fn_result, Gamma_call_weak_fn_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
  l000005d2:
    goto l__gmon_start__;
  l__gmon_start__:
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, bvadd64(R16, 16bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 16bv64)) || L(mem, bvadd64(R16, 16bv64)));
    R16, Gamma_R16 := bvadd64(R16, 16bv64), Gamma_R16;
    // UNRESOLVED: call R17
    assume false;
    // no return target
    assume false;
}

procedure deregister_tm_clones(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (deregister_tm_clones_result: bv32, Gamma_deregister_tm_clones_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var #1: bv64;
  var #2: bv64;
  var CF: bv1;
  var Gamma_#1: bool;
  var Gamma_#2: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R16: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var R0: bv64;
  var R1: bv64;
  var R16: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  var VF: bv1;
  var ZF: bv1;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lderegister_tm_clones:
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 48bv64), Gamma_R0;
    R1, Gamma_R1 := 69632bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 48bv64), Gamma_R1;
    #1, Gamma_#1 := bvnot64(R0), Gamma_R0;
    #2, Gamma_#2 := bvadd64(R1, bvnot64(R0)), (Gamma_R0 && Gamma_R1);
    VF, Gamma_VF := bvnot1(bvcomp65(sign_extend1_64(bvadd64(#2, 1bv64)), bvadd65(bvadd65(sign_extend1_64(R1), sign_extend1_64(#1)), 1bv65))), (Gamma_#1 && (Gamma_R1 && Gamma_#2));
    CF, Gamma_CF := bvnot1(bvcomp65(zero_extend1_64(bvadd64(#2, 1bv64)), bvadd65(bvadd65(zero_extend1_64(R1), zero_extend1_64(#1)), 1bv65))), (Gamma_#1 && (Gamma_R1 && Gamma_#2));
    ZF, Gamma_ZF := bvcomp64(bvadd64(#2, 1bv64), 0bv64), Gamma_#2;
    NF, Gamma_NF := bvadd64(#2, 1bv64)[64:63], Gamma_#2;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l000002ea;
    }
    goto l000005b4;
  l000005b4:
    R1, Gamma_R1 := 65536bv64, true;
    call rely();
    R1, Gamma_R1 := memory_load64_le(mem, bvadd64(R1, 4024bv64)), (gamma_load64(Gamma_mem, bvadd64(R1, 4024bv64)) || L(mem, bvadd64(R1, 4024bv64)));
    assert Gamma_R1;
    if ((bvcomp64(R1, 0bv64) != 0bv1)) {
      goto l000002ea;
    }
    goto l000005c7;
  l000002ea:
    deregister_tm_clones_result, Gamma_deregister_tm_clones_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
  l000005c7:
    R16, Gamma_R16 := R1, Gamma_R1;
    // UNRESOLVED: call R16
    assume false;
    // no return target
    assume false;
}

procedure frame_dummy(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (frame_dummy_result: bv32, Gamma_frame_dummy_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var #temp0: bv32;
  var Gamma_#temp0: bool;
  var Gamma_R0: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lframe_dummy:
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := register_tm_clones(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    // no return target
    assume false;
}

procedure main(main_argc: bv32, Gamma_main_argc: bool, main_argv: bv64, Gamma_main_argv: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (main_argv_out: bv64, Gamma_main_argv_out: bool, main_result: bv32, Gamma_main_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
  requires (memory_load8_le(mem, 69664bv64) == 0bv8);
  requires (memory_load8_le(mem, 69665bv64) == 0bv8);
  requires (memory_load8_le(mem, 69666bv64) == 0bv8);
  requires (memory_load8_le(mem, 69667bv64) == 0bv8);
  requires (memory_load8_le(mem, 69668bv64) == 0bv8);
  requires (memory_load8_le(mem, 69669bv64) == 0bv8);
  requires (memory_load8_le(mem, 69670bv64) == 0bv8);
  requires (memory_load8_le(mem, 69671bv64) == 0bv8);
  requires (memory_load8_le(mem, 69672bv64) == 40bv8);
  requires (memory_load8_le(mem, 69673bv64) == 16bv8);
  requires (memory_load8_le(mem, 69674bv64) == 1bv8);
  requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  requires (memory_load8_le(mem, 69679bv64) == 0bv8);
{
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R1: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R0, Gamma_R0 := zero_extend32_32(main_argc), Gamma_main_argc;
  R1, Gamma_R1 := main_argv, Gamma_main_argv;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lmain:
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R0);
    stack, Gamma_stack := memory_store64_le(stack, R31, R1), gamma_store64(Gamma_stack, R31, Gamma_R1);
    R0, Gamma_R0 := 2bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    R0, Gamma_R0 := 3bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 24bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 24bv64), Gamma_R0);
    call rely();
    R1, Gamma_R1 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 24bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 24bv64));
    R0, Gamma_R0 := zero_extend32_32(bvxor32(R1[32:0], R0[32:0])), (Gamma_R0 && Gamma_R1);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 20bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 20bv64), Gamma_R0);
    call rely();
    R1, Gamma_R1 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 20bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 20bv64));
    R0, Gamma_R0 := zero_extend32_32(bvor32(R1[32:0], R0[32:0])), (Gamma_R0 && Gamma_R1);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 24bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 24bv64), Gamma_R0);
    R0, Gamma_R0 := 30bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    R0, Gamma_R0 := 17bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 24bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 24bv64), Gamma_R0);
    R0, Gamma_R0 := 0bv64, true;
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    main_argv_out, Gamma_main_argv_out := R1, Gamma_R1;
    main_result, Gamma_main_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}

procedure register_tm_clones(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (register_tm_clones_result: bv32, Gamma_register_tm_clones_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R16: bool;
  var Gamma_R2: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R1: bv64;
  var R16: bv64;
  var R2: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lregister_tm_clones:
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 48bv64), Gamma_R0;
    R1, Gamma_R1 := 69632bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 48bv64), Gamma_R1;
    R1, Gamma_R1 := bvadd64(bvadd64(R1, bvnot64(R0)), 1bv64), (Gamma_R0 && Gamma_R1);
    R2, Gamma_R2 := (0bv63 ++ R1[64:63]), Gamma_R1;
    R1, Gamma_R1 := bvadd64(R2, bvashr64(R1, zero_extend61_3(3bv3))), (Gamma_R1 && Gamma_R2);
    R1, Gamma_R1 := sign_extend1_63(R1[64:1]), Gamma_R1;
    assert Gamma_R1;
    if ((bvcomp64(R1, 0bv64) != 0bv1)) {
      goto l00000326;
    }
    goto l00000596;
  l00000596:
    R2, Gamma_R2 := 65536bv64, true;
    call rely();
    R2, Gamma_R2 := memory_load64_le(mem, bvadd64(R2, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R2, 4064bv64)) || L(mem, bvadd64(R2, 4064bv64)));
    assert Gamma_R2;
    if ((bvcomp64(R2, 0bv64) != 0bv1)) {
      goto l00000326;
    }
    goto l000005a9;
  l00000326:
    register_tm_clones_result, Gamma_register_tm_clones_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
  l000005a9:
    R16, Gamma_R16 := R2, Gamma_R2;
    // UNRESOLVED: call R16
    assume false;
    // no return target
    assume false;
}
