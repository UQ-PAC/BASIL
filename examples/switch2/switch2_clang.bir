000009be: program
000009a1: sub __cxa_finalize(__cxa_finalize_result)
000009bf: __cxa_finalize_result :: out u32 = low:32[R0]

000006db:
000007bc: R16 := 0x11000
000007c3: R17 := mem[R16, el]:u64
000007c9: R16 := R16
000007ce: call R17 with noreturn

000009a2: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000009c0: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000003ac:
000003b0: #5 := R31 - 0x20
000003b6: mem := mem with [#5, el]:u64 <- R29
000003bc: mem := mem with [#5 + 8, el]:u64 <- R30
000003c0: R31 := #5
000003c6: R29 := R31
000003ce: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003d3: R19 := 0x11000
000003da: R0 := pad:64[mem[R19 + 0x30]]
000003e1: when 31:0[R0] <> 0 goto %000003df
000009a3: goto %000006a4

000006a4:
000006a7: R0 := 0x10000
000006ae: R0 := mem[R0 + 0xFC0, el]:u64
000006b4: when R0 = 0 goto %000006b2
000009a4: goto %000006cb

000006cb:
000006ce: R0 := 0x11000
000006d5: R0 := mem[R0 + 0x28, el]:u64
000006da: R30 := 0x700
000006dd: call @__cxa_finalize with return %000006b2

000006b2:
000006ba: R30 := 0x704
000006bc: call @deregister_tm_clones with return %000006be

000006be:
000006c1: R0 := 1
000006c9: mem := mem with [R19 + 0x30] <- 7:0[R0]
000009a5: goto %000003df

000003df:
000003e9: R19 := mem[R31 + 0x10, el]:u64
000003f0: R29 := mem[R31, el]:u64
000003f5: R30 := mem[R31 + 8, el]:u64
000003f9: R31 := R31 + 0x20
000003fe: call R30 with noreturn

000009a6: sub __libc_csu_fini(__libc_csu_fini_result)
000009c1: __libc_csu_fini_result :: out u32 = low:32[R0]

000005c2:
000005c5: call R30 with noreturn

000009a7: sub __libc_csu_init(__libc_csu_init_result)
000009c2: __libc_csu_init_result :: out u32 = low:32[R0]

000004cf:
000004d3: #10 := R31 - 0x40
000004d9: mem := mem with [#10, el]:u64 <- R29
000004df: mem := mem with [#10 + 8, el]:u64 <- R30
000004e3: R31 := #10
000004e9: R29 := R31
000004ef: #11 := R31 + 0x10
000004f5: mem := mem with [#11, el]:u64 <- R19
000004fb: mem := mem with [#11 + 8, el]:u64 <- R20
00000500: R20 := 0x10000
00000506: R20 := R20 + 0xDC0
0000050c: #12 := R31 + 0x20
00000512: mem := mem with [#12, el]:u64 <- R21
00000518: mem := mem with [#12 + 8, el]:u64 <- R22
0000051d: R21 := 0x10000
00000523: R21 := R21 + 0xDB8
0000052a: R20 := R20 + ~R21 + 1
00000530: R22 := pad:64[31:0[R0]]
00000536: #13 := R31 + 0x30
0000053c: mem := mem with [#13, el]:u64 <- R23
00000542: mem := mem with [#13 + 8, el]:u64 <- R24
00000548: R23 := R1
0000054e: R24 := R2
00000553: R30 := 0x800
00000556: call @_init with return %00000558

00000558:
0000055c: #14 := ~(R20 ~>> 3)
00000560: #15 := ~(R20 ~>> 3) + 1
00000565: VF := extend:65[#15] <> extend:65[#14] + 1
0000056a: CF := pad:65[#15] <> pad:65[#14] + 1
0000056e: ZF := #15 = 0
00000572: NF := 63:63[#15]
00000578: when ZF goto %00000576
000009a8: goto %000005c7

000005c7:
000005cd: R20 :=

          >> 3 | R20 << 0x3D]
000005d2: R19 := 0
000009a9: goto %000005d4

000005d4:
000005da: R3 := mem[R21 + (60:0[R19].0), el]:u64
000005e0: R2 := R24
000005e6: R19 := R19 + 1
000005ec: R1 := R23
000005f2: R0 := pad:64[31:0[R22]]
000005f7: R30 := 0x828
000005fa: call R3 with return %000005fc

000005fc:
00000600: #19 := ~R19
00000605: #20 := R20 + ~R19 + 1
0000060b: VF := extend:65[#20] <> extend:65[R20] + extend:65[#19] + 1
00000611: CF := pad:65[#20] <> pad:65[R20] + pad:65[#19] + 1
00000615: ZF := #20 = 0
00000619: NF := 63:63[#20]
0000061e: when ZF <> 1 goto %000005d4
000009aa: goto %00000576

00000576:
0000057f: #16 := R31 + 0x10
00000584: R19 := mem[#16, el]:u64
00000589: R20 := mem[#16 + 8, el]:u64
0000058f: #17 := R31 + 0x20
00000594: R21 := mem[#17, el]:u64
00000599: R22 := mem[#17 + 8, el]:u64
0000059f: #18 := R31 + 0x30
000005a4: R23 := mem[#18, el]:u64
000005a9: R24 := mem[#18 + 8, el]:u64
000005b0: R29 := mem[R31, el]:u64
000005b5: R30 := mem[R31 + 8, el]:u64
000005b9: R31 := R31 + 0x40
000005be: call R30 with noreturn

000009ab: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000009c3: __libc_start_main_main :: in u64 = R0
000009c4: __libc_start_main_arg2 :: in u32 = low:32[R1]
000009c5: __libc_start_main_arg3 :: in out u64 = R2
000009c6: __libc_start_main_auxv :: in out u64 = R3
000009c7: __libc_start_main_result :: out u32 = low:32[R0]

000002ea:
000007d2: R16 := 0x11000
000007d9: R17 := mem[R16 + 8, el]:u64
000007df: R16 := R16 + 8
000007e4: call R17 with noreturn

000009ac: sub _fini(_fini_result)
000009c8: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

000009ad: sub _init(_init_result)
000009c9: _init_result :: out u32 = low:32[R0]

00000554:
000008c0: #22 := R31 - 0x10
000008c6: mem := mem with [#22, el]:u64 <- R29
000008cc: mem := mem with [#22 + 8, el]:u64 <- R30
000008d0: R31 := #22
000008d6: R29 := R31
000008db: R30 := 0x5A4
000008dd: call @call_weak_fn with return %000008df

000008df:
000008e4: R29 := mem[R31, el]:u64
000008e9: R30 := mem[R31 + 8, el]:u64
000008ed: R31 := R31 + 0x10
000008f2: call R30 with noreturn

000009ae: sub _start(_start_result)
000009ca: _start_result :: out u32 = low:32[R0]

0000029f:
000002a2: R29 := 0
000002a7: R30 := 0
000002ad: R5 := R0
000002b4: R1 := mem[R31, el]:u64
000002ba: R2 := R31 + 8
000002c0: R6 := R31
000002c5: R0 := 0x10000
000002cc: R0 := mem[R0 + 0xFD8, el]:u64
000002d1: R3 := 0x10000
000002d8: R3 := mem[R3 + 0xFD0, el]:u64
000002dd: R4 := 0x10000
000002e4: R4 := mem[R4 + 0xFB0, el]:u64
000002e9: R30 := 0x644
000002ec: call @__libc_start_main with return %000002ee

000002ee:
000002f1: R30 := 0x648
000002f4: call @abort with return %000009af

000009af:
000009b0: call @call_weak_fn with noreturn

000009b1: sub abort()


000002f2:
000007fe: R16 := 0x11000
00000805: R17 := mem[R16 + 0x18, el]:u64
0000080b: R16 := R16 + 0x18
00000810: call R17 with noreturn

000009b2: sub call_weak_fn(call_weak_fn_result)
000009cb: call_weak_fn_result :: out u32 = low:32[R0]

000002f6:
000002f9: R0 := 0x10000
00000300: R0 := mem[R0 + 0xFC8, el]:u64
00000306: when R0 = 0 goto %00000304
000009b3: goto %0000071b

00000304:
0000030c: call R30 with noreturn

0000071b:
0000071e: goto @__gmon_start__

0000071c:
000007e8: R16 := 0x11000
000007ef: R17 := mem[R16 + 0x10, el]:u64
000007f5: R16 := R16 + 0x10
000007fa: call R17 with noreturn

000009b4: sub deregister_tm_clones(deregister_tm_clones_result)
000009cc: deregister_tm_clones_result :: out u32 = low:32[R0]

00000310:
00000313: R0 := 0x11000
00000319: R0 := R0 + 0x30
0000031e: R1 := 0x11000
00000324: R1 := R1 + 0x30
0000032a: #1 := ~R0
0000032f: #2 := R1 + ~R0 + 1
00000335: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
0000033b: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
0000033f: ZF := #2 = 0
00000343: NF := 63:63[#2]
00000349: when ZF goto %00000347
000009b5: goto %000006fd

000006fd:
00000700: R1 := 0x10000
00000707: R1 := mem[R1 + 0xFB8, el]:u64
0000070c: when R1 = 0 goto %00000347
000009b6: goto %00000710

00000347:
0000034f: call R30 with noreturn

00000710:
00000714: R16 := R1
00000719: call R16 with noreturn

000009b7: sub frame_dummy(frame_dummy_result)
000009cd: frame_dummy_result :: out u32 = low:32[R0]

00000400:
00000402: call @register_tm_clones with noreturn

000009b8: sub main(main_argc, main_argv, main_result)
000009ce: main_argc :: in u32 = low:32[R0]
000009cf: main_argv :: in out u64 = R1
000009d0: main_result :: out u32 = low:32[R0]

0000040e:
00000412: R31 := R31 - 0x30
00000418: #6 := R31 + 0x20
0000041e: mem := mem with [#6, el]:u64 <- R29
00000424: mem := mem with [#6 + 8, el]:u64 <- R30
0000042a: R29 := R31 + 0x20
00000432: mem := mem with [R29 - 4, el]:u32 <- 31:0[R0]
0000043a: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000441: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000448: R8 := pad:64[mem[R29 - 4, el]:u32]
0000044e: #7 := 31:0[R8] - 1
00000453: VF := extend:33[#7] <> extend:33[31:0[R8]] - 1
00000458: CF := pad:33[#7] <> pad:33[31:0[R8]] + 0xFFFFFFFF
0000045c: ZF := #7 = 0
00000460: NF := 31:31[#7]
00000464: R8 := pad:64[#7]
0000046c: mem := mem with [R31, el]:u64 <- R8
00000472: #8 := R8 - 4
00000477: VF := extend:65[#8] <> extend:65[R8] - 4
0000047c: CF := pad:65[#8] <> pad:65[R8] + 0xFFFFFFFFFFFFFFFC
00000480: ZF := #8 = 0
00000484: NF := 63:63[#8]
00000488: R8 := #8
00000495: when ~(CF & ~ZF) goto %0000048e
00000496: goto %00000491

00000491:
00000492: R8 := 1
00000498: goto %00000494

0000048e:
0000048f: R8 := 0
00000497: goto %00000494

00000494:
0000049e: when 0:0[R8] goto %0000049c
000009b9: goto %00000622

0000049c:
000004a4: R8 := 5
000004ac: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
000004b1: goto %000004af

000004af:
000004b6: #9 := R31 + 0x20
000004bb: R29 := mem[#9, el]:u64
000004c0: R30 := mem[#9 + 8, el]:u64
000004c6: R31 := R31 + 0x30
000004cb: call R30 with noreturn

00000622:
00000627: R11 := mem[R31, el]:u64
0000062c: R10 := 0
00000632: R10 := R10 + 0x860
00000637: R8 := 0x760
0000063f: R9 := extend:64[mem[R10 + (61:0[R11].0), el]:u32]
00000646: R8 := R8 + R9
0000064b: call R8 with noreturn

000009ba: sub r(r_result)
000009d1: r_result :: out u32 = low:32[R0]

00000404:
00000407: R0 := 1
0000040c: call R30 with noreturn

000009bb: sub register_tm_clones(register_tm_clones_result)
000009d2: register_tm_clones_result :: out u32 = low:32[R0]

00000351:
00000354: R0 := 0x11000
0000035a: R0 := R0 + 0x30
0000035f: R1 := 0x11000
00000365: R1 := R1 + 0x30
0000036c: R1 := R1 + ~R0 + 1
00000373: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
0000037a: R1 := R2 + (R1 ~>> 3)
00000380: #3 := ~(R1 ~>> 1)
00000384: #4 := ~(R1 ~>> 1) + 1
00000389: VF := extend:65[#4] <> extend:65[#3] + 1
0000038e: CF := pad:65[#4] <> pad:65[#3] + 1
00000392: ZF := #4 = 0
00000396: NF := 63:63[#4]
0000039e: R1 :=

          >> 1 | R1 << 0x3F]
000003a4: when ZF goto %000003a2
000009bc: goto %000006df

000006df:
000006e2: R2 := 0x10000
000006e9: R2 := mem[R2 + 0xFE0, el]:u64
000006ee: when R2 = 0 goto %000003a2
000009bd: goto %000006f2

000003a2:
000003aa: call R30 with noreturn

000006f2:
000006f6: R16 := R2
000006fb: call R16 with noreturn
