00000705: program
000006ca: sub __cxa_finalize(__cxa_finalize_result)
00000706: __cxa_finalize_result :: out u32 = low:32[R0]

0000043f:
00000567: R16 := 0x20000
0000056e: R17 := mem[R16 + 8, el]:u64
00000574: R16 := R16 + 8
00000579: call R17 with noreturn

000006cb: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000707: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c3:
000002c7: #3 := R31 - 0x20
000002cd: mem := mem with [#3, el]:u64 <- R29
000002d3: mem := mem with [#3 + 8, el]:u64 <- R30
000002d7: R31 := #3
000002dd: R29 := R31
000002e5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ea: R19 := 0x20000
000002f1: R0 := pad:64[mem[R19 + 0x48]]
000002f7: when 0:0[R0] goto %000002f5
000006fb: goto %00000408

00000408:
0000040b: R0 := 0x1F000
00000412: R0 := mem[R0 + 0xFC8, el]:u64
00000418: when R0 = 0 goto %00000416
000006fc: goto %0000042f

0000042f:
00000432: R0 := 0x20000
00000439: R0 := mem[R0 + 0x40, el]:u64
0000043e: R30 := 0x7F0
00000441: call @__cxa_finalize with return %00000416

00000416:
0000041e: R30 := 0x7F4
00000420: call @deregister_tm_clones with return %00000422

00000422:
00000425: R0 := 1
0000042d: mem := mem with [R19 + 0x48] <- 7:0[R0]
000006fd: goto %000002f5

000002f5:
000002ff: R19 := mem[R31 + 0x10, el]:u64
00000306: R29 := mem[R31, el]:u64
0000030b: R30 := mem[R31 + 8, el]:u64
0000030f: R31 := R31 + 0x20
00000314: call R30 with noreturn

000006cf: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000708: __libc_start_main_main :: in u64 = R0
00000709: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000070a: __libc_start_main_arg3 :: in out u64 = R2
0000070b: __libc_start_main_auxv :: in out u64 = R3
0000070c: __libc_start_main_result :: out u32 = low:32[R0]

0000021c:
00000551: R16 := 0x20000
00000558: R17 := mem[R16, el]:u64
0000055e: R16 := R16
00000563: call R17 with noreturn

000006d0: sub _fini(_fini_result)
0000070d: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000006d1: sub _init(_init_result)
0000070e: _init_result :: out u32 = low:32[R0]

00000603:
00000609: #7 := R31 - 0x10
0000060f: mem := mem with [#7, el]:u64 <- R29
00000615: mem := mem with [#7 + 8, el]:u64 <- R30
00000619: R31 := #7
0000061f: R29 := R31
00000624: R30 := 0x648
00000626: call @call_weak_fn with return %00000628

00000628:
0000062d: R29 := mem[R31, el]:u64
00000632: R30 := mem[R31 + 8, el]:u64
00000636: R31 := R31 + 0x10
0000063b: call R30 with noreturn

000006d2: sub _start(_start_result)
0000070f: _start_result :: out u32 = low:32[R0]

000001dd:
000001e2: R29 := 0
000001e7: R30 := 0
000001ed: R5 := R0
000001f4: R1 := mem[R31, el]:u64
000001fa: R2 := R31 + 8
00000200: R6 := R31
00000205: R0 := 0x1F000
0000020c: R0 := mem[R0 + 0xFD8, el]:u64
00000211: R3 := 0
00000216: R4 := 0
0000021b: R30 := 0x730
0000021e: call @__libc_start_main with return %00000220

00000220:
00000223: R30 := 0x734
00000226: call @abort with return %000006fe

000006fe:
000006ff: call @call_weak_fn with noreturn

000006d5: sub abort()


00000224:
000005a9: R16 := 0x20000
000005b0: R17 := mem[R16 + 0x20, el]:u64
000005b6: R16 := R16 + 0x20
000005bb: call R17 with noreturn

000006d6: sub call_weak_fn(call_weak_fn_result)
00000710: call_weak_fn_result :: out u32 = low:32[R0]

00000228:
0000022b: R0 := 0x1F000
00000232: R0 := mem[R0 + 0xFD0, el]:u64
00000238: when R0 = 0 goto %00000236
00000700: goto %0000047f

00000236:
0000023e: call R30 with noreturn

0000047f:
00000482: goto @__gmon_start__

00000480:
00000593: R16 := 0x20000
0000059a: R17 := mem[R16 + 0x18, el]:u64
000005a0: R16 := R16 + 0x18
000005a5: call R17 with noreturn

000006d8: sub deregister_tm_clones(deregister_tm_clones_result)
00000711: deregister_tm_clones_result :: out u32 = low:32[R0]

00000244:
00000247: R0 := 0x20000
0000024d: R0 := R0 + 0x48
00000252: R1 := 0x20000
00000258: R1 := R1 + 0x48
0000025e: #1 := ~R0
00000263: #2 := R1 + ~R0
00000269: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000026f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000273: ZF := #2 + 1 = 0
00000277: NF := 63:63[#2 + 1]
0000027d: when ZF goto %0000027b
00000701: goto %00000461

00000461:
00000464: R1 := 0x1F000
0000046b: R1 := mem[R1 + 0xFC0, el]:u64
00000470: when R1 = 0 goto %0000027b
00000702: goto %00000474

0000027b:
00000283: call R30 with noreturn

00000474:
00000478: R16 := R1
0000047d: call R16 with noreturn

000006db: sub frame_dummy(frame_dummy_result)
00000712: frame_dummy_result :: out u32 = low:32[R0]

0000031a:
0000031c: call @register_tm_clones with noreturn

000006dc: sub main(main_argc, main_argv, main_result)
00000713: main_argc :: in u32 = low:32[R0]
00000714: main_argv :: in out u64 = R1
00000715: main_result :: out u32 = low:32[R0]

00000381:
00000385: #5 := R31 - 0x20
0000038b: mem := mem with [#5, el]:u64 <- R29
00000391: mem := mem with [#5 + 8, el]:u64 <- R30
00000395: R31 := #5
0000039b: R29 := R31
000003a0: R0 := 5
000003a8: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R0]
000003ae: R0 := R31 + 0x14
000003b4: R4 := R31 + 0x18
000003ba: R3 := R0
000003bf: R0 := 0
000003c5: R2 := R0 + 0x814
000003ca: R1 := 0
000003d0: R0 := R4
000003d5: R30 := 0x870
000003d8: call @pthread_create with return %000003da

000003da:
000003df: R0 := mem[R31 + 0x18, el]:u64
000003e4: R1 := 0
000003e9: R30 := 0x87C
000003ec: call @pthread_join with return %000003ee

000003ee:
000003f1: R0 := 0
000003f8: R29 := mem[R31, el]:u64
000003fd: R30 := mem[R31 + 8, el]:u64
00000401: R31 := R31 + 0x20
00000406: call R30 with noreturn

000006dd: sub perform_work(perform_work_result)
00000716: perform_work_result :: out u32 = low:32[R0]

0000031e:
00000322: #4 := R31 - 0x30
00000328: mem := mem with [#4, el]:u64 <- R29
0000032e: mem := mem with [#4 + 8, el]:u64 <- R30
00000332: R31 := #4
00000338: R29 := R31
00000340: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000347: R0 := mem[R31 + 0x18, el]:u64
0000034e: R0 := pad:64[mem[R0, el]:u32]
00000356: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
0000035d: R0 := pad:64[mem[R31 + 0x2C, el]:u32]
00000362: R30 := 0x834
00000365: call @sleep with return %00000367

00000367:
0000036a: R0 := 0
00000371: R29 := mem[R31, el]:u64
00000376: R30 := mem[R31 + 8, el]:u64
0000037a: R31 := R31 + 0x30
0000037f: call R30 with noreturn

000006de: sub pthread_create(pthread_create_result)
00000717: pthread_create_result :: out u32 = low:32[R0]

000003d6:
000005bf: R16 := 0x20000
000005c6: R17 := mem[R16 + 0x28, el]:u64
000005cc: R16 := R16 + 0x28
000005d1: call R17 with noreturn

000006df: sub pthread_join(pthread_join_result)
00000718: pthread_join_result :: out u32 = low:32[R0]

000003ea:
000005d5: R16 := 0x20000
000005dc: R17 := mem[R16 + 0x30, el]:u64
000005e2: R16 := R16 + 0x30
000005e7: call R17 with noreturn

000006e0: sub register_tm_clones(register_tm_clones_result)
00000719: register_tm_clones_result :: out u32 = low:32[R0]

00000285:
00000288: R0 := 0x20000
0000028e: R0 := R0 + 0x48
00000293: R1 := 0x20000
00000299: R1 := R1 + 0x48
000002a0: R1 := R1 + ~R0 + 1
000002a6: R2 := 0.63:63[R1]
000002ad: R1 := R2 + (R1 ~>> 3)
000002b3: R1 := extend:64[63:1[R1]]
000002b9: when R1 = 0 goto %000002b7
00000703: goto %00000443

00000443:
00000446: R2 := 0x1F000
0000044d: R2 := mem[R2 + 0xFE0, el]:u64
00000452: when R2 = 0 goto %000002b7
00000704: goto %00000456

000002b7:
000002bf: call R30 with noreturn

00000456:
0000045a: R16 := R2
0000045f: call R16 with noreturn

000006e3: sub sleep(sleep_arg1, sleep_result)
0000071a: sleep_arg1 :: in u32 = low:32[R0]
0000071b: sleep_result :: out u32 = low:32[R0]

00000363:
0000057d: R16 := 0x20000
00000584: R17 := mem[R16 + 0x10, el]:u64
0000058a: R16 := R16 + 0x10
0000058f: call R17 with noreturn
