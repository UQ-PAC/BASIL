0000070c: program
000006f3: sub __cxa_finalize(__cxa_finalize_result)
0000070d: __cxa_finalize_result :: out u32 = low:32[R0]

000004b3:
000005bb: R16 := 0x1F000
000005c2: R17 := mem[R16 + 0xFA8, el]:u64
000005c8: R16 := R16 + 0xFA8
000005cd: call R17 with noreturn

000006f4: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000070e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002fb:
000002ff: #3 := R31 - 0x20
00000305: mem := mem with [#3, el]:u64 <- R29
0000030b: mem := mem with [#3 + 8, el]:u64 <- R30
0000030f: R31 := #3
00000315: R29 := R31
0000031d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000322: R19 := 0x20000
00000329: R0 := pad:64[mem[R19 + 0x10]]
00000330: when 31:0[R0] <> 0 goto %0000032e
000006f5: goto %0000047c

0000047c:
0000047f: R0 := 0x1F000
00000486: R0 := mem[R0 + 0xFD8, el]:u64
0000048c: when R0 = 0 goto %0000048a
000006f6: goto %000004a3

000004a3:
000004a6: R0 := 0x20000
000004ad: R0 := mem[R0 + 8, el]:u64
000004b2: R30 := 0x7F0
000004b5: call @__cxa_finalize with return %0000048a

0000048a:
00000492: R30 := 0x7F4
00000494: call @deregister_tm_clones with return %00000496

00000496:
00000499: R0 := 1
000004a1: mem := mem with [R19 + 0x10] <- 7:0[R0]
000006f7: goto %0000032e

0000032e:
00000338: R19 := mem[R31 + 0x10, el]:u64
0000033f: R29 := mem[R31, el]:u64
00000344: R30 := mem[R31 + 8, el]:u64
00000348: R31 := R31 + 0x20
0000034d: call R30 with noreturn

000006f8: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000070f: __libc_start_main_main :: in u64 = R0
00000710: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000711: __libc_start_main_arg3 :: in out u64 = R2
00000712: __libc_start_main_auxv :: in out u64 = R3
00000713: __libc_start_main_result :: out u32 = low:32[R0]

00000254:
000005a5: R16 := 0x1F000
000005ac: R17 := mem[R16 + 0xFA0, el]:u64
000005b2: R16 := R16 + 0xFA0
000005b7: call R17 with noreturn

000006f9: sub __stack_chk_fail(__stack_chk_fail_result)
00000714: __stack_chk_fail_result :: out u32 = low:32[R0]

00000478:
000005d1: R16 := 0x1F000
000005d8: R17 := mem[R16 + 0xFB0, el]:u64
000005de: R16 := R16 + 0xFB0
000005e3: call R17 with noreturn

000006fa: sub _fini(_fini_result)
00000715: _fini_result :: out u32 = low:32[R0]

00000034:
0000003a: #0 := R31 - 0x10
00000040: mem := mem with [#0, el]:u64 <- R29
00000046: mem := mem with [#0 + 8, el]:u64 <- R30
0000004a: R31 := #0
00000050: R29 := R31
00000057: R29 := mem[R31, el]:u64
0000005c: R30 := mem[R31 + 8, el]:u64
00000060: R31 := R31 + 0x10
00000065: call R30 with noreturn

000006fb: sub _init(_init_result)
00000716: _init_result :: out u32 = low:32[R0]

0000062b:
00000631: #8 := R31 - 0x10
00000637: mem := mem with [#8, el]:u64 <- R29
0000063d: mem := mem with [#8 + 8, el]:u64 <- R30
00000641: R31 := #8
00000647: R29 := R31
0000064c: R30 := 0x658
0000064e: call @call_weak_fn with return %00000650

00000650:
00000655: R29 := mem[R31, el]:u64
0000065a: R30 := mem[R31 + 8, el]:u64
0000065e: R31 := R31 + 0x10
00000663: call R30 with noreturn

000006fc: sub _start(_start_result)
00000717: _start_result :: out u32 = low:32[R0]

00000215:
0000021a: R29 := 0
0000021f: R30 := 0
00000225: R5 := R0
0000022c: R1 := mem[R31, el]:u64
00000232: R2 := R31 + 8
00000238: R6 := R31
0000023d: R0 := 0x1F000
00000244: R0 := mem[R0 + 0xFF0, el]:u64
00000249: R3 := 0
0000024e: R4 := 0
00000253: R30 := 0x730
00000256: call @__libc_start_main with return %00000258

00000258:
0000025b: R30 := 0x734
0000025e: call @abort with return %000006fd

000006fd:
000006fe: call @call_weak_fn with noreturn

000006ff: sub abort()


0000025c:
000005fd: R16 := 0x1F000
00000604: R17 := mem[R16 + 0xFC0, el]:u64
0000060a: R16 := R16 + 0xFC0
0000060f: call R17 with noreturn

00000700: sub call_weak_fn(call_weak_fn_result)
00000718: call_weak_fn_result :: out u32 = low:32[R0]

00000260:
00000263: R0 := 0x1F000
0000026a: R0 := mem[R0 + 0xFE0, el]:u64
00000270: when R0 = 0 goto %0000026e
00000701: goto %000004f3

0000026e:
00000276: call R30 with noreturn

000004f3:
000004f6: goto @__gmon_start__

000004f4:
000005e7: R16 := 0x1F000
000005ee: R17 := mem[R16 + 0xFB8, el]:u64
000005f4: R16 := R16 + 0xFB8
000005f9: call R17 with noreturn

00000702: sub deregister_tm_clones(deregister_tm_clones_result)
00000719: deregister_tm_clones_result :: out u32 = low:32[R0]

0000027c:
0000027f: R0 := 0x20000
00000285: R0 := R0 + 0x10
0000028a: R1 := 0x20000
00000290: R1 := R1 + 0x10
00000296: #1 := ~R0
0000029b: #2 := R1 + ~R0
000002a1: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002a7: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002ab: ZF := #2 + 1 = 0
000002af: NF := 63:63[#2 + 1]
000002b5: when ZF goto %000002b3
00000703: goto %000004d5

000004d5:
000004d8: R1 := 0x1F000
000004df: R1 := mem[R1 + 0xFD0, el]:u64
000004e4: when R1 = 0 goto %000002b3
00000704: goto %000004e8

000002b3:
000002bb: call R30 with noreturn

000004e8:
000004ec: R16 := R1
000004f1: call R16 with noreturn

00000705: sub frame_dummy(frame_dummy_result)
0000071a: frame_dummy_result :: out u32 = low:32[R0]

00000353:
00000355: call @register_tm_clones with noreturn

00000706: sub main(main_argc, main_argv, main_result)
0000071b: main_argc :: in u32 = low:32[R0]
0000071c: main_argv :: in out u64 = R1
0000071d: main_result :: out u32 = low:32[R0]

00000395:
00000399: #4 := R31 - 0x20
0000039f: mem := mem with [#4, el]:u64 <- R29
000003a5: mem := mem with [#4 + 8, el]:u64 <- R30
000003a9: R31 := #4
000003af: R29 := R31
000003b4: R0 := 0x1F000
000003bb: R0 := mem[R0 + 0xFE8, el]:u64
000003c2: R1 := mem[R0, el]:u64
000003ca: mem := mem with [R31 + 0x18, el]:u64 <- R1
000003cf: R1 := 0
000003d4: R0 := 5
000003dc: mem := mem with [R31 + 0x10, el]:u32 <- 31:0[R0]
000003e1: R0 := 0x19
000003e9: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R0]
000003ef: R0 := R31 + 0x10
000003f4: R30 := 0x870
000003f6: call @modifyValue with return %000003f8

000003f8:
000003fc: R0 := R31 + 0x14
00000401: R30 := 0x878
00000403: call @modifyValue with return %00000405

00000405:
00000408: R0 := 0
0000040e: R1 := pad:64[31:0[R0]]
00000413: R0 := 0x1F000
0000041a: R0 := mem[R0 + 0xFE8, el]:u64
00000421: R3 := mem[R31 + 0x18, el]:u64
00000428: R2 := mem[R0, el]:u64
0000042e: #5 := ~R2
00000433: #6 := R3 + ~R2
00000439: VF := extend:65[#6 + 1] <> extend:65[R3] + extend:65[#5] + 1
0000043f: CF := pad:65[#6 + 1] <> pad:65[R3] + pad:65[#5] + 1
00000443: ZF := #6 + 1 = 0
00000447: NF := 63:63[#6 + 1]
0000044b: R3 := #6 + 1
00000450: R2 := 0
00000456: when ZF goto %00000454
00000707: goto %00000474

00000474:
00000477: R30 := 0x8A0
0000047a: call @__stack_chk_fail with return %00000454

00000454:
0000045d: R0 := pad:64[31:0[R1]]
00000464: R29 := mem[R31, el]:u64
00000469: R30 := mem[R31 + 8, el]:u64
0000046d: R31 := R31 + 0x20
00000472: call R30 with noreturn

00000708: sub modifyValue(modifyValue_result)
0000071e: modifyValue_result :: out u32 = low:32[R0]

00000357:
0000035b: R31 := R31 - 0x10
00000363: mem := mem with [R31 + 8, el]:u64 <- R0
0000036a: R0 := mem[R31 + 8, el]:u64
00000371: R0 := pad:64[mem[R0, el]:u32]
00000377: R1 := pad:64[31:0[R0] + 0xA]
0000037e: R0 := mem[R31 + 8, el]:u64
00000386: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000038e: R31 := R31 + 0x10
00000393: call R30 with noreturn

00000709: sub register_tm_clones(register_tm_clones_result)
0000071f: register_tm_clones_result :: out u32 = low:32[R0]

000002bd:
000002c0: R0 := 0x20000
000002c6: R0 := R0 + 0x10
000002cb: R1 := 0x20000
000002d1: R1 := R1 + 0x10
000002d8: R1 := R1 + ~R0 + 1
000002de: R2 := 0.63:63[R1]
000002e5: R1 := R2 + (R1 ~>> 3)
000002eb: R1 := extend:64[63:1[R1]]
000002f1: when R1 = 0 goto %000002ef
0000070a: goto %000004b7

000004b7:
000004ba: R2 := 0x1F000
000004c1: R2 := mem[R2 + 0xFF8, el]:u64
000004c6: when R2 = 0 goto %000002ef
0000070b: goto %000004ca

000002ef:
000002f7: call R30 with noreturn

000004ca:
000004ce: R16 := R2
000004d3: call R16 with noreturn
