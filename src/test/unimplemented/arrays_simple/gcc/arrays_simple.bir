00000672: program
0000063c: sub __cxa_finalize(__cxa_finalize_result)
00000673: __cxa_finalize_result :: out u32 = low:32[R0]

00000425:
0000052d: R16 := 0x10000
00000534: R17 := mem[R16 + 0xFA8, el]:u64
0000053a: R16 := R16 + 0xFA8
0000053f: call R17 with noreturn

0000063d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000674: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002b6:
000002ba: #3 := R31 - 0x20
000002c0: mem := mem with [#3, el]:u64 <- R29
000002c6: mem := mem with [#3 + 8, el]:u64 <- R30
000002ca: R31 := #3
000002d0: R29 := R31
000002d8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002dd: R19 := 0x11000
000002e4: R0 := pad:64[mem[R19 + 0x10]]
000002eb: when 31:0[R0] <> 0 goto %000002e9
00000667: goto %000003ee

000003ee:
000003f1: R0 := 0x10000
000003f8: R0 := mem[R0 + 0xFD8, el]:u64
000003fe: when R0 = 0 goto %000003fc
00000668: goto %00000415

00000415:
00000418: R0 := 0x11000
0000041f: R0 := mem[R0 + 8, el]:u64
00000424: R30 := 0x7F0
00000427: call @__cxa_finalize with return %000003fc

000003fc:
00000404: R30 := 0x7F4
00000406: call @deregister_tm_clones with return %00000408

00000408:
0000040b: R0 := 1
00000413: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000669: goto %000002e9

000002e9:
000002f3: R19 := mem[R31 + 0x10, el]:u64
000002fa: R29 := mem[R31, el]:u64
000002ff: R30 := mem[R31 + 8, el]:u64
00000303: R31 := R31 + 0x20
00000308: call R30 with noreturn

00000641: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000675: __libc_start_main_main :: in u64 = R0
00000676: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000677: __libc_start_main_arg3 :: in out u64 = R2
00000678: __libc_start_main_auxv :: in out u64 = R3
00000679: __libc_start_main_result :: out u32 = low:32[R0]

0000020f:
00000517: R16 := 0x10000
0000051e: R17 := mem[R16 + 0xFA0, el]:u64
00000524: R16 := R16 + 0xFA0
00000529: call R17 with noreturn

00000642: sub __stack_chk_fail(__stack_chk_fail_result)
0000067a: __stack_chk_fail_result :: out u32 = low:32[R0]

000003ea:
00000543: R16 := 0x10000
0000054a: R17 := mem[R16 + 0xFB0, el]:u64
00000550: R16 := R16 + 0xFB0
00000555: call R17 with noreturn

00000643: sub _fini(_fini_result)
0000067b: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000644: sub _init(_init_result)
0000067c: _init_result :: out u32 = low:32[R0]

0000059d:
000005a3: #8 := R31 - 0x10
000005a9: mem := mem with [#8, el]:u64 <- R29
000005af: mem := mem with [#8 + 8, el]:u64 <- R30
000005b3: R31 := #8
000005b9: R29 := R31
000005be: R30 := 0x650
000005c0: call @call_weak_fn with return %000005c2

000005c2:
000005c7: R29 := mem[R31, el]:u64
000005cc: R30 := mem[R31 + 8, el]:u64
000005d0: R31 := R31 + 0x10
000005d5: call R30 with noreturn

00000645: sub _start(_start_result)
0000067d: _start_result :: out u32 = low:32[R0]

000001d0:
000001d5: R29 := 0
000001da: R30 := 0
000001e0: R5 := R0
000001e7: R1 := mem[R31, el]:u64
000001ed: R2 := R31 + 8
000001f3: R6 := R31
000001f8: R0 := 0x10000
000001ff: R0 := mem[R0 + 0xFF0, el]:u64
00000204: R3 := 0
00000209: R4 := 0
0000020e: R30 := 0x730
00000211: call @__libc_start_main with return %00000213

00000213:
00000216: R30 := 0x734
00000219: call @abort with return %0000066a

0000066a:
0000066b: call @call_weak_fn with noreturn

00000648: sub abort()


00000217:
0000056f: R16 := 0x10000
00000576: R17 := mem[R16 + 0xFC0, el]:u64
0000057c: R16 := R16 + 0xFC0
00000581: call R17 with noreturn

00000649: sub call_weak_fn(call_weak_fn_result)
0000067e: call_weak_fn_result :: out u32 = low:32[R0]

0000021b:
0000021e: R0 := 0x10000
00000225: R0 := mem[R0 + 0xFE0, el]:u64
0000022b: when R0 = 0 goto %00000229
0000066c: goto %00000465

00000229:
00000231: call R30 with noreturn

00000465:
00000468: goto @__gmon_start__

00000466:
00000559: R16 := 0x10000
00000560: R17 := mem[R16 + 0xFB8, el]:u64
00000566: R16 := R16 + 0xFB8
0000056b: call R17 with noreturn

0000064b: sub deregister_tm_clones(deregister_tm_clones_result)
0000067f: deregister_tm_clones_result :: out u32 = low:32[R0]

00000237:
0000023a: R0 := 0x11000
00000240: R0 := R0 + 0x10
00000245: R1 := 0x11000
0000024b: R1 := R1 + 0x10
00000251: #1 := ~R0
00000256: #2 := R1 + ~R0
0000025c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000262: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000266: ZF := #2 + 1 = 0
0000026a: NF := 63:63[#2 + 1]
00000270: when ZF goto %0000026e
0000066d: goto %00000447

00000447:
0000044a: R1 := 0x10000
00000451: R1 := mem[R1 + 0xFD0, el]:u64
00000456: when R1 = 0 goto %0000026e
0000066e: goto %0000045a

0000026e:
00000276: call R30 with noreturn

0000045a:
0000045e: R16 := R1
00000463: call R16 with noreturn

0000064e: sub frame_dummy(frame_dummy_result)
00000680: frame_dummy_result :: out u32 = low:32[R0]

0000030e:
00000310: call @register_tm_clones with noreturn

0000064f: sub main(main_argc, main_argv, main_result)
00000681: main_argc :: in u32 = low:32[R0]
00000682: main_argv :: in out u64 = R1
00000683: main_result :: out u32 = low:32[R0]

00000312:
00000316: #4 := R31 - 0x40
0000031c: mem := mem with [#4, el]:u64 <- R29
00000322: mem := mem with [#4 + 8, el]:u64 <- R30
00000326: R31 := #4
0000032c: R29 := R31
00000331: R0 := 0x10000
00000338: R0 := mem[R0 + 0xFE8, el]:u64
0000033f: R1 := mem[R0, el]:u64
00000347: mem := mem with [R31 + 0x38, el]:u64 <- R1
0000034c: R1 := 0
00000351: R0 := 3
00000359: mem := mem with [R31 + 0x28, el]:u32 <- 31:0[R0]
0000035e: R0 := 7
00000366: mem := mem with [R31 + 0x30, el]:u32 <- 31:0[R0]
0000036d: R0 := pad:64[mem[R31 + 0x28, el]:u32]
00000375: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000037a: R0 := 0
00000380: R1 := pad:64[31:0[R0]]
00000385: R0 := 0x10000
0000038c: R0 := mem[R0 + 0xFE8, el]:u64
00000393: R3 := mem[R31 + 0x38, el]:u64
0000039a: R2 := mem[R0, el]:u64
000003a0: #5 := ~R2
000003a5: #6 := R3 + ~R2
000003ab: VF := extend:65[#6 + 1] <> extend:65[R3] + extend:65[#5] + 1
000003b1: CF := pad:65[#6 + 1] <> pad:65[R3] + pad:65[#5] + 1
000003b5: ZF := #6 + 1 = 0
000003b9: NF := 63:63[#6 + 1]
000003bd: R3 := #6 + 1
000003c2: R2 := 0
000003c8: when ZF goto %000003c6
0000066f: goto %000003e6

000003e6:
000003e9: R30 := 0x870
000003ec: call @__stack_chk_fail with return %000003c6

000003c6:
000003cf: R0 := pad:64[31:0[R1]]
000003d6: R29 := mem[R31, el]:u64
000003db: R30 := mem[R31 + 8, el]:u64
000003df: R31 := R31 + 0x40
000003e4: call R30 with noreturn

00000651: sub register_tm_clones(register_tm_clones_result)
00000684: register_tm_clones_result :: out u32 = low:32[R0]

00000278:
0000027b: R0 := 0x11000
00000281: R0 := R0 + 0x10
00000286: R1 := 0x11000
0000028c: R1 := R1 + 0x10
00000293: R1 := R1 + ~R0 + 1
00000299: R2 := 0.63:63[R1]
000002a0: R1 := R2 + (R1 ~>> 3)
000002a6: R1 := extend:64[63:1[R1]]
000002ac: when R1 = 0 goto %000002aa
00000670: goto %00000429

00000429:
0000042c: R2 := 0x10000
00000433: R2 := mem[R2 + 0xFF8, el]:u64
00000438: when R2 = 0 goto %000002aa
00000671: goto %0000043c

000002aa:
000002b2: call R30 with noreturn

0000043c:
00000440: R16 := R2
00000445: call R16 with noreturn
