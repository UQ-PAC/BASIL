000007bd: program
00000776: sub __cxa_finalize(__cxa_finalize_result)
000007be: __cxa_finalize_result :: out u32 = low:32[R0]

00000469:
000005ed: R16 := 0x11000
000005f4: R17 := mem[R16 + 0x18, el]:u64
000005fa: R16 := R16 + 0x18
000005ff: call R17 with noreturn

00000777: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000007bf: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002d2:
000002d6: #3 := R31 - 0x20
000002dc: mem := mem with [#3, el]:u64 <- R29
000002e2: mem := mem with [#3 + 8, el]:u64 <- R30
000002e6: R31 := #3
000002ec: R29 := R31
000002f4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002f9: R19 := 0x11000
00000300: R0 := pad:64[mem[R19 + 0x70]]
00000307: when 31:0[R0] <> 0 goto %00000305
000007b3: goto %00000432

00000432:
00000435: R0 := 0x10000
0000043c: R0 := mem[R0 + 0xFC8, el]:u64
00000442: when R0 = 0 goto %00000440
000007b4: goto %00000459

00000459:
0000045c: R0 := 0x11000
00000463: R0 := mem[R0 + 0x58, el]:u64
00000468: R30 := 0x8B0
0000046b: call @__cxa_finalize with return %00000440

00000440:
00000448: R30 := 0x8B4
0000044a: call @deregister_tm_clones with return %0000044c

0000044c:
0000044f: R0 := 1
00000457: mem := mem with [R19 + 0x70] <- 7:0[R0]
000007b5: goto %00000305

00000305:
0000030f: R19 := mem[R31 + 0x10, el]:u64
00000316: R29 := mem[R31, el]:u64
0000031b: R30 := mem[R31 + 8, el]:u64
0000031f: R31 := R31 + 0x20
00000324: call R30 with noreturn

0000077b: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000007c0: __libc_start_main_main :: in u64 = R0
000007c1: __libc_start_main_arg2 :: in u32 = low:32[R1]
000007c2: __libc_start_main_arg3 :: in out u64 = R2
000007c3: __libc_start_main_auxv :: in out u64 = R3
000007c4: __libc_start_main_result :: out u32 = low:32[R0]

0000022b:
000005d7: R16 := 0x11000
000005de: R17 := mem[R16 + 0x10, el]:u64
000005e4: R16 := R16 + 0x10
000005e9: call R17 with noreturn

0000077c: sub _fini(_fini_result)
000007c5: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000077d: sub _init(_init_result)
000007c6: _init_result :: out u32 = low:32[R0]

0000069f:
000006a5: #8 := R31 - 0x10
000006ab: mem := mem with [#8, el]:u64 <- R29
000006b1: mem := mem with [#8 + 8, el]:u64 <- R30
000006b5: R31 := #8
000006bb: R29 := R31
000006c0: R30 := 0x6E8
000006c2: call @call_weak_fn with return %000006c4

000006c4:
000006c9: R29 := mem[R31, el]:u64
000006ce: R30 := mem[R31 + 8, el]:u64
000006d2: R31 := R31 + 0x10
000006d7: call R30 with noreturn

0000077e: sub _start(_start_result)
000007c7: _start_result :: out u32 = low:32[R0]

000001ec:
000001f1: R29 := 0
000001f6: R30 := 0
000001fc: R5 := R0
00000203: R1 := mem[R31, el]:u64
00000209: R2 := R31 + 8
0000020f: R6 := R31
00000214: R0 := 0x10000
0000021b: R0 := mem[R0 + 0xFD8, el]:u64
00000220: R3 := 0
00000225: R4 := 0
0000022a: R30 := 0x7F0
0000022d: call @__libc_start_main with return %0000022f

0000022f:
00000232: R30 := 0x7F4
00000235: call @abort with return %000007b6

000007b6:
000007b7: call @call_weak_fn with noreturn

00000781: sub abort()


00000233:
00000645: R16 := 0x11000
0000064c: R17 := mem[R16 + 0x38, el]:u64
00000652: R16 := R16 + 0x38
00000657: call R17 with noreturn

00000782: sub call_weak_fn(call_weak_fn_result)
000007c8: call_weak_fn_result :: out u32 = low:32[R0]

00000237:
0000023a: R0 := 0x10000
00000241: R0 := mem[R0 + 0xFD0, el]:u64
00000247: when R0 = 0 goto %00000245
000007b8: goto %000004a9

00000245:
0000024d: call R30 with noreturn

000004a9:
000004ac: goto @__gmon_start__

000004aa:
0000062f: R16 := 0x11000
00000636: R17 := mem[R16 + 0x30, el]:u64
0000063c: R16 := R16 + 0x30
00000641: call R17 with noreturn

00000784: sub deregister_tm_clones(deregister_tm_clones_result)
000007c9: deregister_tm_clones_result :: out u32 = low:32[R0]

00000253:
00000256: R0 := 0x11000
0000025c: R0 := R0 + 0x70
00000261: R1 := 0x11000
00000267: R1 := R1 + 0x70
0000026d: #1 := ~R0
00000272: #2 := R1 + ~R0
00000278: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000027e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000282: ZF := #2 + 1 = 0
00000286: NF := 63:63[#2 + 1]
0000028c: when ZF goto %0000028a
000007b9: goto %0000048b

0000048b:
0000048e: R1 := 0x10000
00000495: R1 := mem[R1 + 0xFC0, el]:u64
0000049a: when R1 = 0 goto %0000028a
000007ba: goto %0000049e

0000028a:
00000292: call R30 with noreturn

0000049e:
000004a2: R16 := R1
000004a7: call R16 with noreturn

00000787: sub frame_dummy(frame_dummy_result)
000007ca: frame_dummy_result :: out u32 = low:32[R0]

0000032a:
0000032c: call @register_tm_clones with noreturn

00000788: sub free(free_ptr)
000007cb: free_ptr :: in out u64 = R0

000003fd:
00000671: R16 := 0x11000
00000678: R17 := mem[R16 + 0x48, el]:u64
0000067e: R16 := R16 + 0x48
00000683: call R17 with noreturn

00000789: sub main(main_argc, main_argv, main_result)
000007cc: main_argc :: in u32 = low:32[R0]
000007cd: main_argv :: in out u64 = R1
000007ce: main_result :: out u32 = low:32[R0]

0000032e:
00000332: #4 := R31 - 0x30
00000338: mem := mem with [#4, el]:u64 <- R29
0000033e: mem := mem with [#4 + 8, el]:u64 <- R30
00000342: R31 := #4
0000034a: mem := mem with [R31 + 0x10, el]:u64 <- R21
00000350: #5 := R31 + 0x20
00000356: mem := mem with [#5, el]:u64 <- R20
0000035c: mem := mem with [#5 + 8, el]:u64 <- R19
00000362: R29 := R31
00000367: R0 := 0xB
0000036c: R30 := 0x8EC
0000036f: call @malloc with return %00000371

00000371:
00000374: R21 := 0x11000
00000379: R20 := 0x11000
0000037f: R20 := R20 + 0x61
00000385: R19 := R0
0000038d: mem := mem with [R21 + 0x78, el]:u64 <- R0
00000393: R0 := R20
00000398: R30 := 0x908
0000039b: call @strlen with return %0000039d

0000039d:
000003a1: R2 := R0
000003a7: R0 := R19
000003ad: R1 := R20
000003b2: R30 := 0x918
000003b5: call @memcpy with return %000003b7

000003b7:
000003bb: R0 := R19
000003c0: R30 := 0x920
000003c3: call @puts with return %000003c5

000003c5:
000003ca: R19 := mem[R21 + 0x78, el]:u64
000003d0: R0 := R19
000003d5: R30 := 0x92C
000003d7: call @strlen with return %000003d9

000003d9:
000003dd: R2 := R0
000003e3: R0 := R19
000003e8: R1 := 1
000003ed: R30 := 0x93C
000003f0: call @memset with return %000003f2

000003f2:
000003f7: R0 := mem[R21 + 0x78, el]:u64
000003fc: R30 := 0x944
000003ff: call @free with return %00000401

00000401:
00000404: R0 := 0
0000040a: #6 := R31 + 0x20
0000040f: R20 := mem[#6, el]:u64
00000414: R19 := mem[#6 + 8, el]:u64
0000041b: R21 := mem[R31 + 0x10, el]:u64
00000422: R29 := mem[R31, el]:u64
00000427: R30 := mem[R31 + 8, el]:u64
0000042b: R31 := R31 + 0x30
00000430: call R30 with noreturn

0000078a: sub malloc(malloc_size, malloc_result)
000007cf: malloc_size :: in u64 = R0
000007d0: malloc_result :: out u64 = R0

0000036d:
00000603: R16 := 0x11000
0000060a: R17 := mem[R16 + 0x20, el]:u64
00000610: R16 := R16 + 0x20
00000615: call R17 with noreturn

0000078b: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
000007d1: memcpy_dst :: in out u64 = R0
000007d2: memcpy_src :: in out u64 = R1
000007d3: memcpy_n :: in u64 = R2
000007d4: memcpy_result :: out u64 = R0

000003b3:
000005ab: R16 := 0x11000
000005b2: R17 := mem[R16, el]:u64
000005b8: R16 := R16
000005bd: call R17 with noreturn

0000078c: sub memset(memset_buf, memset_c, memset_n, memset_result)
000007d5: memset_buf :: in out u64 = R0
000007d6: memset_c :: in u32 = low:32[R1]
000007d7: memset_n :: in u64 = R2
000007d8: memset_result :: out u64 = R0

000003ee:
00000619: R16 := 0x11000
00000620: R17 := mem[R16 + 0x28, el]:u64
00000626: R16 := R16 + 0x28
0000062b: call R17 with noreturn

0000078d: sub puts(puts_s, puts_result)
000007d9: puts_s :: in u64 = R0
000007da: puts_result :: out u32 = low:32[R0]

000003c1:
0000065b: R16 := 0x11000
00000662: R17 := mem[R16 + 0x40, el]:u64
00000668: R16 := R16 + 0x40
0000066d: call R17 with noreturn

0000078e: sub register_tm_clones(register_tm_clones_result)
000007db: register_tm_clones_result :: out u32 = low:32[R0]

00000294:
00000297: R0 := 0x11000
0000029d: R0 := R0 + 0x70
000002a2: R1 := 0x11000
000002a8: R1 := R1 + 0x70
000002af: R1 := R1 + ~R0 + 1
000002b5: R2 := 0.63:63[R1]
000002bc: R1 := R2 + (R1 ~>> 3)
000002c2: R1 := extend:64[63:1[R1]]
000002c8: when R1 = 0 goto %000002c6
000007bb: goto %0000046d

0000046d:
00000470: R2 := 0x10000
00000477: R2 := mem[R2 + 0xFE0, el]:u64
0000047c: when R2 = 0 goto %000002c6
000007bc: goto %00000480

000002c6:
000002ce: call R30 with noreturn

00000480:
00000484: R16 := R2
00000489: call R16 with noreturn

00000791: sub strlen(strlen_s, strlen_result)
000007dc: strlen_s :: in u64 = R0
000007dd: strlen_result :: out u64 = R0

00000399:
000005c1: R16 := 0x11000
000005c8: R17 := mem[R16 + 8, el]:u64
000005ce: R16 := R16 + 8
000005d3: call R17 with noreturn
