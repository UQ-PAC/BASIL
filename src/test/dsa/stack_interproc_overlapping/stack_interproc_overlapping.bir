000006f6: program
000006dd: sub __cxa_finalize(__cxa_finalize_result)
000006f7: __cxa_finalize_result :: out u32 = low:32[R0]

000004b7:
000005bf: R16 := 0x1F000
000005c6: R17 := mem[R16 + 0xFA8, el]:u64
000005cc: R16 := R16 + 0xFA8
000005d1: call R17 with noreturn

000006de: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006f8: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002f3:
000002f7: #3 := R31 - 0x20
000002fd: mem := mem with [#3, el]:u64 <- R29
00000303: mem := mem with [#3 + 8, el]:u64 <- R30
00000307: R31 := #3
0000030d: R29 := R31
00000315: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000031a: R19 := 0x20000
00000321: R0 := pad:64[mem[R19 + 0x10]]
00000327: when 0:0[R0] goto %00000325
000006df: goto %00000480

00000480:
00000483: R0 := 0x1F000
0000048a: R0 := mem[R0 + 0xFD8, el]:u64
00000490: when R0 = 0 goto %0000048e
000006e0: goto %000004a7

000004a7:
000004aa: R0 := 0x20000
000004b1: R0 := mem[R0 + 8, el]:u64
000004b6: R30 := 0x7F0
000004b9: call @__cxa_finalize with return %0000048e

0000048e:
00000496: R30 := 0x7F4
00000498: call @deregister_tm_clones with return %0000049a

0000049a:
0000049d: R0 := 1
000004a5: mem := mem with [R19 + 0x10] <- 7:0[R0]
000006e1: goto %00000325

00000325:
0000032f: R19 := mem[R31 + 0x10, el]:u64
00000336: R29 := mem[R31, el]:u64
0000033b: R30 := mem[R31 + 8, el]:u64
0000033f: R31 := R31 + 0x20
00000344: call R30 with noreturn

000006e2: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006f9: __libc_start_main_main :: in u64 = R0
000006fa: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006fb: __libc_start_main_arg3 :: in out u64 = R2
000006fc: __libc_start_main_auxv :: in out u64 = R3
000006fd: __libc_start_main_result :: out u32 = low:32[R0]

0000024c:
000005a9: R16 := 0x1F000
000005b0: R17 := mem[R16 + 0xFA0, el]:u64
000005b6: R16 := R16 + 0xFA0
000005bb: call R17 with noreturn

000006e3: sub __stack_chk_fail(__stack_chk_fail_result)
000006fe: __stack_chk_fail_result :: out u32 = low:32[R0]

0000047c:
000005d5: R16 := 0x1F000
000005dc: R17 := mem[R16 + 0xFB0, el]:u64
000005e2: R16 := R16 + 0xFB0
000005e7: call R17 with noreturn

000006e4: sub _fini(_fini_result)
000006ff: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000006e5: sub _init(_init_result)
00000700: _init_result :: out u32 = low:32[R0]

0000062f:
00000635: #9 := R31 - 0x10
0000063b: mem := mem with [#9, el]:u64 <- R29
00000641: mem := mem with [#9 + 8, el]:u64 <- R30
00000645: R31 := #9
0000064b: R29 := R31
00000650: R30 := 0x650
00000652: call @call_weak_fn with return %00000654

00000654:
00000659: R29 := mem[R31, el]:u64
0000065e: R30 := mem[R31 + 8, el]:u64
00000662: R31 := R31 + 0x10
00000667: call R30 with noreturn

000006e6: sub _start(_start_result)
00000701: _start_result :: out u32 = low:32[R0]

0000020d:
00000212: R29 := 0
00000217: R30 := 0
0000021d: R5 := R0
00000224: R1 := mem[R31, el]:u64
0000022a: R2 := R31 + 8
00000230: R6 := R31
00000235: R0 := 0x1F000
0000023c: R0 := mem[R0 + 0xFF0, el]:u64
00000241: R3 := 0
00000246: R4 := 0
0000024b: R30 := 0x730
0000024e: call @__libc_start_main with return %00000250

00000250:
00000253: R30 := 0x734
00000256: call @abort with return %000006e7

000006e7:
000006e8: call @call_weak_fn with noreturn

000006e9: sub abort()


00000254:
00000601: R16 := 0x1F000
00000608: R17 := mem[R16 + 0xFC0, el]:u64
0000060e: R16 := R16 + 0xFC0
00000613: call R17 with noreturn

000006ea: sub call_weak_fn(call_weak_fn_result)
00000702: call_weak_fn_result :: out u32 = low:32[R0]

00000258:
0000025b: R0 := 0x1F000
00000262: R0 := mem[R0 + 0xFE0, el]:u64
00000268: when R0 = 0 goto %00000266
000006eb: goto %000004f7

00000266:
0000026e: call R30 with noreturn

000004f7:
000004fa: goto @__gmon_start__

000004f8:
000005eb: R16 := 0x1F000
000005f2: R17 := mem[R16 + 0xFB8, el]:u64
000005f8: R16 := R16 + 0xFB8
000005fd: call R17 with noreturn

000006ec: sub deregister_tm_clones(deregister_tm_clones_result)
00000703: deregister_tm_clones_result :: out u32 = low:32[R0]

00000274:
00000277: R0 := 0x20000
0000027d: R0 := R0 + 0x10
00000282: R1 := 0x20000
00000288: R1 := R1 + 0x10
0000028e: #1 := ~R0
00000293: #2 := R1 + ~R0
00000299: VF := extend:128[#2 + 1] <> extend:128[R1] + extend:128[#1] + 1
0000029f: CF := pad:128[#2 + 1] <> pad:128[R1] + pad:128[#1] + 1
000002a3: ZF := #2 + 1 = 0
000002a7: NF := 63:63[#2 + 1]
000002ad: when ZF goto %000002ab
000006ed: goto %000004d9

000004d9:
000004dc: R1 := 0x1F000
000004e3: R1 := mem[R1 + 0xFD0, el]:u64
000004e8: when R1 = 0 goto %000002ab
000006ee: goto %000004ec

000002ab:
000002b3: call R30 with noreturn

000004ec:
000004f0: R16 := R1
000004f5: call R16 with noreturn

000006ef: sub frame_dummy(frame_dummy_result)
00000704: frame_dummy_result :: out u32 = low:32[R0]

0000034a:
0000034c: call @register_tm_clones with noreturn

000006f0: sub main(main_argc, main_argv, main_result)
00000705: main_argc :: in u32 = low:32[R0]
00000706: main_argv :: in out u64 = R1
00000707: main_result :: out u32 = low:32[R0]

00000391:
00000395: R31 := R31 - 0x50
0000039b: #4 := R31 + 0x40
000003a1: mem := mem with [#4, el]:u64 <- R29
000003a7: mem := mem with [#4 + 8, el]:u64 <- R30
000003ad: R29 := R31 + 0x40
000003b2: R0 := 0x1F000
000003b9: R0 := mem[R0 + 0xFE8, el]:u64
000003c0: R1 := mem[R0, el]:u64
000003c8: mem := mem with [R31 + 0x38, el]:u64 <- R1
000003cd: R1 := 0
000003d2: R0 := 4
000003da: mem := mem with [R31 + 8, el]:u64 <- R0
000003df: R0 := 3
000003e7: mem := mem with [R31 + 0x20, el]:u64 <- R0
000003ec: R0 := 0xA
000003f4: mem := mem with [R31 + 0x30, el]:u64 <- R0
000003fa: R0 := R31 + 0x20
000003ff: R30 := 0x880
00000401: call @set_fields with return %00000403

00000403:
00000406: R0 := 0
0000040c: R1 := pad:64[31:0[R0]]
00000411: R0 := 0x1F000
00000418: R0 := mem[R0 + 0xFE8, el]:u64
0000041f: R3 := mem[R31 + 0x38, el]:u64
00000426: R2 := mem[R0, el]:u64
0000042c: #5 := ~R2
00000431: #6 := R3 + ~R2
00000437: VF := extend:128[#6 + 1] <> extend:128[R3] + extend:128[#5] + 1
0000043d: CF := pad:128[#6 + 1] <> pad:128[R3] + pad:128[#5] + 1
00000441: ZF := #6 + 1 = 0
00000445: NF := 63:63[#6 + 1]
00000449: R3 := #6 + 1
0000044e: R2 := 0
00000454: when ZF goto %00000452
000006f1: goto %00000478

00000478:
0000047b: R30 := 0x8A8
0000047e: call @__stack_chk_fail with return %00000452

00000452:
0000045b: R0 := pad:64[31:0[R1]]
00000461: #7 := R31 + 0x40
00000466: R29 := mem[#7, el]:u64
0000046b: R30 := mem[#7 + 8, el]:u64
00000471: R31 := R31 + 0x50
00000476: call R30 with noreturn

000006f2: sub register_tm_clones(register_tm_clones_result)
00000708: register_tm_clones_result :: out u32 = low:32[R0]

000002b5:
000002b8: R0 := 0x20000
000002be: R0 := R0 + 0x10
000002c3: R1 := 0x20000
000002c9: R1 := R1 + 0x10
000002d0: R1 := R1 + ~R0 + 1
000002d6: R2 := pad:64[63:63[R1]]
000002dd: R1 := R2 + (R1 ~>> 3)
000002e3: R1 := extend:64[63:1[R1]]
000002e9: when R1 = 0 goto %000002e7
000006f3: goto %000004bb

000004bb:
000004be: R2 := 0x1F000
000004c5: R2 := mem[R2 + 0xFF8, el]:u64
000004ca: when R2 = 0 goto %000002e7
000006f4: goto %000004ce

000002e7:
000002ef: call R30 with noreturn

000004ce:
000004d2: R16 := R2
000004d7: call R16 with noreturn

000006f5: sub set_fields(set_fields_result)
00000709: set_fields_result :: out u32 = low:32[R0]

0000034e:
00000352: R31 := R31 - 0x10
0000035a: mem := mem with [R31 + 8, el]:u64 <- R0
00000361: R0 := mem[R31 + 8, el]:u64
00000366: R1 := 1
0000036e: mem := mem with [R0, el]:u64 <- R1
00000375: R0 := mem[R31 + 8, el]:u64
0000037a: R1 := 2
00000382: mem := mem with [R0 + 0x10, el]:u64 <- R1
0000038a: R31 := R31 + 0x10
0000038f: call R30 with noreturn
