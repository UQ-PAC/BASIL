000006fe: program
000006c6: sub __cxa_finalize(__cxa_finalize_result)
000006ff: __cxa_finalize_result :: out u32 = low:32[R0]

000004a2:
000005aa: R16 := 0x1F000
000005b1: R17 := mem[R16 + 0xFA8, el]:u64
000005b7: R16 := R16 + 0xFA8
000005bc: call R17 with noreturn

000006c7: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000700: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002eb:
000002ef: #3 := R31 - 0x20
000002f5: mem := mem with [#3, el]:u64 <- R29
000002fb: mem := mem with [#3 + 8, el]:u64 <- R30
000002ff: R31 := #3
00000305: R29 := R31
0000030d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000312: R19 := 0x20000
00000319: R0 := pad:64[mem[R19 + 0x10]]
0000031f: when 0:0[R0] goto %0000031d
000006f3: goto %0000046b

0000046b:
0000046e: R0 := 0x1F000
00000475: R0 := mem[R0 + 0xFD8, el]:u64
0000047b: when R0 = 0 goto %00000479
000006f4: goto %00000492

00000492:
00000495: R0 := 0x20000
0000049c: R0 := mem[R0 + 8, el]:u64
000004a1: R30 := 0x7F0
000004a4: call @__cxa_finalize with return %00000479

00000479:
00000481: R30 := 0x7F4
00000483: call @deregister_tm_clones with return %00000485

00000485:
00000488: R0 := 1
00000490: mem := mem with [R19 + 0x10] <- 7:0[R0]
000006f5: goto %0000031d

0000031d:
00000327: R19 := mem[R31 + 0x10, el]:u64
0000032e: R29 := mem[R31, el]:u64
00000333: R30 := mem[R31 + 8, el]:u64
00000337: R31 := R31 + 0x20
0000033c: call R30 with noreturn

000006cb: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000701: __libc_start_main_main :: in u64 = R0
00000702: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000703: __libc_start_main_arg3 :: in out u64 = R2
00000704: __libc_start_main_auxv :: in out u64 = R3
00000705: __libc_start_main_result :: out u32 = low:32[R0]

00000244:
00000594: R16 := 0x1F000
0000059b: R17 := mem[R16 + 0xFA0, el]:u64
000005a1: R16 := R16 + 0xFA0
000005a6: call R17 with noreturn

000006cc: sub __stack_chk_fail(__stack_chk_fail_result)
00000706: __stack_chk_fail_result :: out u32 = low:32[R0]

00000467:
000005c0: R16 := 0x1F000
000005c7: R17 := mem[R16 + 0xFB0, el]:u64
000005cd: R16 := R16 + 0xFB0
000005d2: call R17 with noreturn

000006cd: sub _fini(_fini_result)
00000707: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000006ce: sub _init(_init_result)
00000708: _init_result :: out u32 = low:32[R0]

0000061a:
00000620: #9 := R31 - 0x10
00000626: mem := mem with [#9, el]:u64 <- R29
0000062c: mem := mem with [#9 + 8, el]:u64 <- R30
00000630: R31 := #9
00000636: R29 := R31
0000063b: R30 := 0x650
0000063d: call @call_weak_fn with return %0000063f

0000063f:
00000644: R29 := mem[R31, el]:u64
00000649: R30 := mem[R31 + 8, el]:u64
0000064d: R31 := R31 + 0x10
00000652: call R30 with noreturn

000006cf: sub _start(_start_result)
00000709: _start_result :: out u32 = low:32[R0]

00000205:
0000020a: R29 := 0
0000020f: R30 := 0
00000215: R5 := R0
0000021c: R1 := mem[R31, el]:u64
00000222: R2 := R31 + 8
00000228: R6 := R31
0000022d: R0 := 0x1F000
00000234: R0 := mem[R0 + 0xFF0, el]:u64
00000239: R3 := 0
0000023e: R4 := 0
00000243: R30 := 0x730
00000246: call @__libc_start_main with return %00000248

00000248:
0000024b: R30 := 0x734
0000024e: call @abort with return %000006f6

000006f6:
000006f7: call @call_weak_fn with noreturn

000006d2: sub abort()


0000024c:
000005ec: R16 := 0x1F000
000005f3: R17 := mem[R16 + 0xFC0, el]:u64
000005f9: R16 := R16 + 0xFC0
000005fe: call R17 with noreturn

000006d3: sub call_weak_fn(call_weak_fn_result)
0000070a: call_weak_fn_result :: out u32 = low:32[R0]

00000250:
00000253: R0 := 0x1F000
0000025a: R0 := mem[R0 + 0xFE0, el]:u64
00000260: when R0 = 0 goto %0000025e
000006f8: goto %000004e2

0000025e:
00000266: call R30 with noreturn

000004e2:
000004e5: goto @__gmon_start__

000004e3:
000005d6: R16 := 0x1F000
000005dd: R17 := mem[R16 + 0xFB8, el]:u64
000005e3: R16 := R16 + 0xFB8
000005e8: call R17 with noreturn

000006d5: sub deregister_tm_clones(deregister_tm_clones_result)
0000070b: deregister_tm_clones_result :: out u32 = low:32[R0]

0000026c:
0000026f: R0 := 0x20000
00000275: R0 := R0 + 0x10
0000027a: R1 := 0x20000
00000280: R1 := R1 + 0x10
00000286: #1 := ~R0
0000028b: #2 := R1 + ~R0
00000291: VF := extend:128[#2 + 1] <> extend:128[R1] + extend:128[#1] + 1
00000297: CF := pad:128[#2 + 1] <> pad:128[R1] + pad:128[#1] + 1
0000029b: ZF := #2 + 1 = 0
0000029f: NF := 63:63[#2 + 1]
000002a5: when ZF goto %000002a3
000006f9: goto %000004c4

000004c4:
000004c7: R1 := 0x1F000
000004ce: R1 := mem[R1 + 0xFD0, el]:u64
000004d3: when R1 = 0 goto %000002a3
000006fa: goto %000004d7

000002a3:
000002ab: call R30 with noreturn

000004d7:
000004db: R16 := R1
000004e0: call R16 with noreturn

000006d8: sub frame_dummy(frame_dummy_result)
0000070c: frame_dummy_result :: out u32 = low:32[R0]

00000342:
00000344: call @register_tm_clones with noreturn

000006d9: sub main(main_argc, main_argv, main_result)
0000070d: main_argc :: in u32 = low:32[R0]
0000070e: main_argv :: in out u64 = R1
0000070f: main_result :: out u32 = low:32[R0]

00000389:
0000038d: R31 := R31 - 0x30
00000393: #4 := R31 + 0x20
00000399: mem := mem with [#4, el]:u64 <- R29
0000039f: mem := mem with [#4 + 8, el]:u64 <- R30
000003a5: R29 := R31 + 0x20
000003aa: R0 := 0x1F000
000003b1: R0 := mem[R0 + 0xFE8, el]:u64
000003b8: R1 := mem[R0, el]:u64
000003c0: mem := mem with [R31 + 0x18, el]:u64 <- R1
000003c5: R1 := 0
000003ca: R0 := 3
000003d2: mem := mem with [R31, el]:u64 <- R0
000003d7: R0 := 0xA
000003df: mem := mem with [R31 + 0x10, el]:u64 <- R0
000003e5: R0 := R31
000003ea: R30 := 0x878
000003ec: call @set_fields with return %000003ee

000003ee:
000003f1: R0 := 0
000003f7: R1 := pad:64[31:0[R0]]
000003fc: R0 := 0x1F000
00000403: R0 := mem[R0 + 0xFE8, el]:u64
0000040a: R3 := mem[R31 + 0x18, el]:u64
00000411: R2 := mem[R0, el]:u64
00000417: #5 := ~R2
0000041c: #6 := R3 + ~R2
00000422: VF := extend:128[#6 + 1] <> extend:128[R3] + extend:128[#5] + 1
00000428: CF := pad:128[#6 + 1] <> pad:128[R3] + pad:128[#5] + 1
0000042c: ZF := #6 + 1 = 0
00000430: NF := 63:63[#6 + 1]
00000434: R3 := #6 + 1
00000439: R2 := 0
0000043f: when ZF goto %0000043d
000006fb: goto %00000463

00000463:
00000466: R30 := 0x8A0
00000469: call @__stack_chk_fail with return %0000043d

0000043d:
00000446: R0 := pad:64[31:0[R1]]
0000044c: #7 := R31 + 0x20
00000451: R29 := mem[#7, el]:u64
00000456: R30 := mem[#7 + 8, el]:u64
0000045c: R31 := R31 + 0x30
00000461: call R30 with noreturn

000006db: sub register_tm_clones(register_tm_clones_result)
00000710: register_tm_clones_result :: out u32 = low:32[R0]

000002ad:
000002b0: R0 := 0x20000
000002b6: R0 := R0 + 0x10
000002bb: R1 := 0x20000
000002c1: R1 := R1 + 0x10
000002c8: R1 := R1 + ~R0 + 1
000002ce: R2 := pad:64[63:63[R1]]
000002d5: R1 := R2 + (R1 ~>> 3)
000002db: R1 := extend:64[63:1[R1]]
000002e1: when R1 = 0 goto %000002df
000006fc: goto %000004a6

000004a6:
000004a9: R2 := 0x1F000
000004b0: R2 := mem[R2 + 0xFF8, el]:u64
000004b5: when R2 = 0 goto %000002df
000006fd: goto %000004b9

000002df:
000002e7: call R30 with noreturn

000004b9:
000004bd: R16 := R2
000004c2: call R16 with noreturn

000006de: sub set_fields(set_fields_result)
00000711: set_fields_result :: out u32 = low:32[R0]

00000346:
0000034a: R31 := R31 - 0x10
00000352: mem := mem with [R31 + 8, el]:u64 <- R0
00000359: R0 := mem[R31 + 8, el]:u64
0000035e: R1 := 1
00000366: mem := mem with [R0, el]:u64 <- R1
0000036d: R0 := mem[R31 + 8, el]:u64
00000372: R1 := 2
0000037a: mem := mem with [R0 + 0x10, el]:u64 <- R1
00000382: R31 := R31 + 0x10
00000387: call R30 with noreturn
