000006ca: program
000006b3: sub __cxa_finalize(__cxa_finalize_result)
000006cb: __cxa_finalize_result :: out u32 = low:32[R0]

0000041b:
00000523: R16 := 0x1F000
0000052a: R17 := mem[R16 + 0xFB0, el]:u64
00000530: R16 := R16 + 0xFB0
00000535: call R17 with noreturn

000006b4: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006cc: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c5:
000002c9: #3 := R31 - 0x20
000002cf: mem := mem with [#3, el]:u64 <- R29
000002d5: mem := mem with [#3 + 8, el]:u64 <- R30
000002d9: R31 := #3
000002df: R29 := R31
000002e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ec: R19 := 0x20000
000002f3: R0 := pad:64[mem[R19 + 0x10]]
000002fa: when 31:0[R0] <> 0 goto %000002f8
000006b5: goto %000003e4

000003e4:
000003e7: R0 := 0x1F000
000003ee: R0 := mem[R0 + 0xFE0, el]:u64
000003f4: when R0 = 0 goto %000003f2
000006b6: goto %0000040b

0000040b:
0000040e: R0 := 0x20000
00000415: R0 := mem[R0 + 8, el]:u64
0000041a: R30 := 0x730
0000041d: call @__cxa_finalize with return %000003f2

000003f2:
000003fa: R30 := 0x734
000003fc: call @deregister_tm_clones with return %000003fe

000003fe:
00000401: R0 := 1
00000409: mem := mem with [R19 + 0x10] <- 7:0[R0]
000006b7: goto %000002f8

000002f8:
00000302: R19 := mem[R31 + 0x10, el]:u64
00000309: R29 := mem[R31, el]:u64
0000030e: R30 := mem[R31 + 8, el]:u64
00000312: R31 := R31 + 0x20
00000317: call R30 with noreturn

000006b8: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006cd: __libc_start_main_main :: in u64 = R0
000006ce: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006cf: __libc_start_main_arg3 :: in out u64 = R2
000006d0: __libc_start_main_auxv :: in out u64 = R3
000006d1: __libc_start_main_result :: out u32 = low:32[R0]

0000021e:
0000050d: R16 := 0x1F000
00000514: R17 := mem[R16 + 0xFA8, el]:u64
0000051a: R16 := R16 + 0xFA8
0000051f: call R17 with noreturn

000006b9: sub _fini(_fini_result)
000006d2: _fini_result :: out u32 = low:32[R0]

00000032:
00000038: #0 := R31 - 0x10
0000003e: mem := mem with [#0, el]:u64 <- R29
00000044: mem := mem with [#0 + 8, el]:u64 <- R30
00000048: R31 := #0
0000004e: R29 := R31
00000055: R29 := mem[R31, el]:u64
0000005a: R30 := mem[R31 + 8, el]:u64
0000005e: R31 := R31 + 0x10
00000063: call R30 with noreturn

000006ba: sub _init(_init_result)
000006d3: _init_result :: out u32 = low:32[R0]

000005f8:
000005fe: #6 := R31 - 0x10
00000604: mem := mem with [#6, el]:u64 <- R29
0000060a: mem := mem with [#6 + 8, el]:u64 <- R30
0000060e: R31 := #6
00000614: R29 := R31
00000619: R30 := 0x5C8
0000061b: call @call_weak_fn with return %0000061d

0000061d:
00000622: R29 := mem[R31, el]:u64
00000627: R30 := mem[R31 + 8, el]:u64
0000062b: R31 := R31 + 0x10
00000630: call R30 with noreturn

000006bb: sub _start(_start_result)
000006d4: _start_result :: out u32 = low:32[R0]

000001df:
000001e4: R29 := 0
000001e9: R30 := 0
000001ef: R5 := R0
000001f6: R1 := mem[R31, el]:u64
000001fc: R2 := R31 + 8
00000202: R6 := R31
00000207: R0 := 0x1F000
0000020e: R0 := mem[R0 + 0xFF0, el]:u64
00000213: R3 := 0
00000218: R4 := 0
0000021d: R30 := 0x670
00000220: call @__libc_start_main with return %00000222

00000222:
00000225: R30 := 0x674
00000228: call @abort with return %000006bc

000006bc:
000006bd: call @call_weak_fn with noreturn

000006be: sub abort()


00000226:
00000565: R16 := 0x1F000
0000056c: R17 := mem[R16 + 0xFC8, el]:u64
00000572: R16 := R16 + 0xFC8
00000577: call R17 with noreturn

000006bf: sub call_weak_fn(call_weak_fn_result)
000006d5: call_weak_fn_result :: out u32 = low:32[R0]

0000022a:
0000022d: R0 := 0x1F000
00000234: R0 := mem[R0 + 0xFE8, el]:u64
0000023a: when R0 = 0 goto %00000238
000006c0: goto %0000045b

00000238:
00000240: call R30 with noreturn

0000045b:
0000045e: goto @__gmon_start__

0000045c:
0000054f: R16 := 0x1F000
00000556: R17 := mem[R16 + 0xFC0, el]:u64
0000055c: R16 := R16 + 0xFC0
00000561: call R17 with noreturn

000006c1: sub deregister_tm_clones(deregister_tm_clones_result)
000006d6: deregister_tm_clones_result :: out u32 = low:32[R0]

00000246:
00000249: R0 := 0x20000
0000024f: R0 := R0 + 0x10
00000254: R1 := 0x20000
0000025a: R1 := R1 + 0x10
00000260: #1 := ~R0
00000265: #2 := R1 + ~R0
0000026b: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000271: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000275: ZF := #2 + 1 = 0
00000279: NF := 63:63[#2 + 1]
0000027f: when ZF goto %0000027d
000006c2: goto %0000043d

0000043d:
00000440: R1 := 0x1F000
00000447: R1 := mem[R1 + 0xFD8, el]:u64
0000044c: when R1 = 0 goto %0000027d
000006c3: goto %00000450

0000027d:
00000285: call R30 with noreturn

00000450:
00000454: R16 := R1
00000459: call R16 with noreturn

000006c4: sub frame_dummy(frame_dummy_result)
000006d7: frame_dummy_result :: out u32 = low:32[R0]

0000031d:
0000031f: call @register_tm_clones with noreturn

000006c5: sub main(main_argc, main_argv, main_result)
000006d8: main_argc :: in u32 = low:32[R0]
000006d9: main_argv :: in out u64 = R1
000006da: main_result :: out u32 = low:32[R0]

00000321:
00000325: #4 := R31 - 0x40
0000032b: mem := mem with [#4, el]:u64 <- R29
00000331: mem := mem with [#4 + 8, el]:u64 <- R30
00000335: R31 := #4
0000033b: R29 := R31
00000340: R0 := 0x14
00000345: R30 := 0x764
00000348: call @malloc with return %0000034a

0000034a:
00000350: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000357: R0 := mem[R31 + 0x18, el]:u64
0000035c: R1 := 0xC
00000364: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000036b: R0 := mem[R31 + 0x18, el]:u64
00000373: mem := mem with [R31 + 0x20, el]:u64 <- R0
0000037a: R0 := mem[R31 + 0x20, el]:u64
00000380: R0 := R0 + 1
00000388: mem := mem with [R31 + 0x28, el]:u64 <- R0
0000038d: R0 := 8
00000392: R30 := 0x790
00000394: call @malloc with return %00000396

00000396:
0000039c: mem := mem with [R31 + 0x30, el]:u64 <- R0
000003a3: R0 := mem[R31 + 0x30, el]:u64
000003aa: R1 := mem[R31 + 0x28, el]:u64
000003b2: mem := mem with [R0, el]:u64 <- R1
000003b9: R0 := mem[R31 + 0x30, el]:u64
000003c0: R0 := mem[R0, el]:u64
000003c8: mem := mem with [R31 + 0x38, el]:u64 <- R0
000003cd: R0 := 0
000003d4: R29 := mem[R31, el]:u64
000003d9: R30 := mem[R31 + 8, el]:u64
000003dd: R31 := R31 + 0x40
000003e2: call R30 with noreturn

000006c6: sub malloc(malloc_size, malloc_result)
000006db: malloc_size :: in u64 = R0
000006dc: malloc_result :: out u64 = R0

00000346:
00000539: R16 := 0x1F000
00000540: R17 := mem[R16 + 0xFB8, el]:u64
00000546: R16 := R16 + 0xFB8
0000054b: call R17 with noreturn

000006c7: sub register_tm_clones(register_tm_clones_result)
000006dd: register_tm_clones_result :: out u32 = low:32[R0]

00000287:
0000028a: R0 := 0x20000
00000290: R0 := R0 + 0x10
00000295: R1 := 0x20000
0000029b: R1 := R1 + 0x10
000002a2: R1 := R1 + ~R0 + 1
000002a8: R2 := 0.63:63[R1]
000002af: R1 := R2 + (R1 ~>> 3)
000002b5: R1 := extend:64[63:1[R1]]
000002bb: when R1 = 0 goto %000002b9
000006c8: goto %0000041f

0000041f:
00000422: R2 := 0x1F000
00000429: R2 := mem[R2 + 0xFF8, el]:u64
0000042e: when R2 = 0 goto %000002b9
000006c9: goto %00000432

000002b9:
000002c1: call R30 with noreturn

00000432:
00000436: R16 := R2
0000043b: call R16 with noreturn
