00000635: program
00000601: sub __cxa_finalize(__cxa_finalize_result)
00000636: __cxa_finalize_result :: out u32 = low:32[R0]

000003a5:
0000049d: R16 := 0x11000
000004a4: R17 := mem[R16 + 8, el]:u64
000004aa: R16 := R16 + 8
000004af: call R17 with noreturn

00000602: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000637: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028e:
00000292: #3 := R31 - 0x20
00000298: mem := mem with [#3, el]:u64 <- R29
0000029e: mem := mem with [#3 + 8, el]:u64 <- R30
000002a2: R31 := #3
000002a8: R29 := R31
000002b0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b5: R19 := 0x11000
000002bc: R0 := pad:64[mem[R19 + 0x30]]
000002c3: when 31:0[R0] <> 0 goto %000002c1
0000062a: goto %0000036e

0000036e:
00000371: R0 := 0x10000
00000378: R0 := mem[R0 + 0xFC8, el]:u64
0000037e: when R0 = 0 goto %0000037c
0000062b: goto %00000395

00000395:
00000398: R0 := 0x11000
0000039f: R0 := mem[R0 + 0x28, el]:u64
000003a4: R30 := 0x6F0
000003a7: call @__cxa_finalize with return %0000037c

0000037c:
00000384: R30 := 0x6F4
00000386: call @deregister_tm_clones with return %00000388

00000388:
0000038b: R0 := 1
00000393: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000062c: goto %000002c1

000002c1:
000002cb: R19 := mem[R31 + 0x10, el]:u64
000002d2: R29 := mem[R31, el]:u64
000002d7: R30 := mem[R31 + 8, el]:u64
000002db: R31 := R31 + 0x20
000002e0: call R30 with noreturn

00000606: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000638: __libc_start_main_main :: in u64 = R0
00000639: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000063a: __libc_start_main_arg3 :: in out u64 = R2
0000063b: __libc_start_main_auxv :: in out u64 = R3
0000063c: __libc_start_main_result :: out u32 = low:32[R0]

000001e7:
00000487: R16 := 0x11000
0000048e: R17 := mem[R16, el]:u64
00000494: R16 := R16
00000499: call R17 with noreturn

00000607: sub _fini(_fini_result)
0000063d: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000608: sub _init(_init_result)
0000063e: _init_result :: out u32 = low:32[R0]

00000553:
00000559: #6 := R31 - 0x10
0000055f: mem := mem with [#6, el]:u64 <- R29
00000565: mem := mem with [#6 + 8, el]:u64 <- R30
00000569: R31 := #6
0000056f: R29 := R31
00000574: R30 := 0x590
00000576: call @call_weak_fn with return %00000578

00000578:
0000057d: R29 := mem[R31, el]:u64
00000582: R30 := mem[R31 + 8, el]:u64
00000586: R31 := R31 + 0x10
0000058b: call R30 with noreturn

00000609: sub _start(_start_result)
0000063f: _start_result :: out u32 = low:32[R0]

000001a8:
000001ad: R29 := 0
000001b2: R30 := 0
000001b8: R5 := R0
000001bf: R1 := mem[R31, el]:u64
000001c5: R2 := R31 + 8
000001cb: R6 := R31
000001d0: R0 := 0x10000
000001d7: R0 := mem[R0 + 0xFD8, el]:u64
000001dc: R3 := 0
000001e1: R4 := 0
000001e6: R30 := 0x630
000001e9: call @__libc_start_main with return %000001eb

000001eb:
000001ee: R30 := 0x634
000001f1: call @abort with return %0000062d

0000062d:
0000062e: call @call_weak_fn with noreturn

0000060c: sub abort()


000001ef:
000004c9: R16 := 0x11000
000004d0: R17 := mem[R16 + 0x18, el]:u64
000004d6: R16 := R16 + 0x18
000004db: call R17 with noreturn

0000060d: sub call_weak_fn(call_weak_fn_result)
00000640: call_weak_fn_result :: out u32 = low:32[R0]

000001f3:
000001f6: R0 := 0x10000
000001fd: R0 := mem[R0 + 0xFD0, el]:u64
00000203: when R0 = 0 goto %00000201
0000062f: goto %000003e5

00000201:
00000209: call R30 with noreturn

000003e5:
000003e8: goto @__gmon_start__

000003e6:
000004b3: R16 := 0x11000
000004ba: R17 := mem[R16 + 0x10, el]:u64
000004c0: R16 := R16 + 0x10
000004c5: call R17 with noreturn

0000060f: sub deregister_tm_clones(deregister_tm_clones_result)
00000641: deregister_tm_clones_result :: out u32 = low:32[R0]

0000020f:
00000212: R0 := 0x11000
00000218: R0 := R0 + 0x30
0000021d: R1 := 0x11000
00000223: R1 := R1 + 0x30
00000229: #1 := ~R0
0000022e: #2 := R1 + ~R0
00000234: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023e: ZF := #2 + 1 = 0
00000242: NF := 63:63[#2 + 1]
00000248: when ZF goto %00000246
00000630: goto %000003c7

000003c7:
000003ca: R1 := 0x10000
000003d1: R1 := mem[R1 + 0xFC0, el]:u64
000003d6: when R1 = 0 goto %00000246
00000631: goto %000003da

00000246:
0000024e: call R30 with noreturn

000003da:
000003de: R16 := R1
000003e3: call R16 with noreturn

00000612: sub frame_dummy(frame_dummy_result)
00000642: frame_dummy_result :: out u32 = low:32[R0]

000002e6:
000002e8: call @register_tm_clones with noreturn

00000613: sub main(main_argc, main_argv, main_result)
00000643: main_argc :: in u32 = low:32[R0]
00000644: main_argv :: in out u64 = R1
00000645: main_result :: out u32 = low:32[R0]

000002ea:
000002ee: R31 := R31 - 0x10
000002f5: mem := mem with [R31 + 0xC, el]:u32 <- 0
000002fd: mem := mem with [R31 + 8, el]:u32 <- 31:0[R0]
00000304: R8 := pad:64[mem[R31 + 8, el]:u32]
0000030c: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000313: R8 := pad:64[mem[R31 + 4, el]:u32]
00000319: #4 := 31:0[R8] - 1
0000031e: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000323: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000327: ZF := #4 + 1 = 0
0000032b: NF := 31:31[#4 + 1]
0000032f: R8 := pad:64[#4 + 1]
0000033b: when ZF goto %00000334
0000033c: goto %00000337

00000337:
00000338: R8 := 1
0000033e: goto %0000033a

00000334:
00000335: R8 := 0
0000033d: goto %0000033a

0000033a:
00000344: when 0:0[R8] goto %00000342
00000632: goto %00000359

00000359:
0000035c: goto %0000035a

0000035a:
00000360: R8 := 1
00000368: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
0000036c: goto %00000342

00000342:
0000034c: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000352: R31 := R31 + 0x10
00000357: call R30 with noreturn

00000615: sub register_tm_clones(register_tm_clones_result)
00000646: register_tm_clones_result :: out u32 = low:32[R0]

00000250:
00000253: R0 := 0x11000
00000259: R0 := R0 + 0x30
0000025e: R1 := 0x11000
00000264: R1 := R1 + 0x30
0000026b: R1 := R1 + ~R0 + 1
00000271: R2 := 0.63:63[R1]
00000278: R1 := R2 + (R1 ~>> 3)
0000027e: R1 := extend:64[63:1[R1]]
00000284: when R1 = 0 goto %00000282
00000633: goto %000003a9

000003a9:
000003ac: R2 := 0x10000
000003b3: R2 := mem[R2 + 0xFE0, el]:u64
000003b8: when R2 = 0 goto %00000282
00000634: goto %000003bc

00000282:
0000028a: call R30 with noreturn

000003bc:
000003c0: R16 := R2
000003c5: call R16 with noreturn
