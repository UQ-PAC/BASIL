var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvand"} bvand1(bv1, bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp64(bv64, bv64) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} {:bvbuiltin "sign_extend 32"} sign_extend32_32(bv32) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 2228bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 130440bv64) == 2192bv64);
  free ensures (memory_load64_le(mem, 130448bv64) == 2112bv64);
  free ensures (memory_load64_le(mem, 131056bv64) == 2196bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_VF, Gamma_ZF, NF, R0, VF, ZF;
  free requires (memory_load64_le(mem, 131072bv64) == 0bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free requires (memory_load32_le(mem, 2228bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 130440bv64) == 2192bv64);
  free requires (memory_load64_le(mem, 130448bv64) == 2112bv64);
  free requires (memory_load64_le(mem, 131056bv64) == 2196bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free ensures (memory_load32_le(mem, 2228bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 130440bv64) == 2192bv64);
  free ensures (memory_load64_le(mem, 130448bv64) == 2112bv64);
  free ensures (memory_load64_le(mem, 131056bv64) == 2196bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);

implementation main()
{
  var #4: bv32;
  var Gamma_#4: bool;
  lmain:
    assume {:captureState "lmain"} true;
    #4, Gamma_#4 := bvadd32(R0[32:0], 4294967295bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp64(sign_extend32_32(#4), bvadd64(sign_extend32_32(R0[32:0]), 18446744073709551615bv64))), (Gamma_R0 && Gamma_#4);
    CF, Gamma_CF := bvnot1(bvcomp64(zero_extend32_32(#4), bvadd64(zero_extend32_32(R0[32:0]), 4294967295bv64))), (Gamma_R0 && Gamma_#4);
    ZF, Gamma_ZF := bvcomp32(#4, 0bv32), Gamma_#4;
    NF, Gamma_NF := #4[32:31], Gamma_#4;
    assert (Gamma_CF && Gamma_ZF);
    goto lmain_goto_l00000294, lmain_goto_l0000029c;
  l0000029c:
    assume {:captureState "l0000029c"} true;
    R0, Gamma_R0 := 1bv64, true;
    goto l000002a8;
  l00000294:
    assume {:captureState "l00000294"} true;
    R0, Gamma_R0 := zero_extend32_32(R0[32:0]), Gamma_R0;
    goto l000002a8;
  l000002a8:
    assume {:captureState "l000002a8"} true;
    goto main_basil_return;
  lmain_goto_l00000294:
    assume {:captureState "lmain_goto_l00000294"} true;
    assume (bvand1(bvcomp1(CF, 1bv1), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l00000294;
  lmain_goto_l0000029c:
    assume {:captureState "lmain_goto_l0000029c"} true;
    assume (bvand1(bvcomp1(CF, 1bv1), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l0000029c;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

