000005fd: program
000005c7: sub __cxa_finalize(__cxa_finalize_result)
000005fe: __cxa_finalize_result :: out u32 = low:32[R0]

00000373:
0000046b: R16 := 0x20000
00000472: R17 := mem[R16 + 8, el]:u64
00000478: R16 := R16 + 8
0000047d: call R17 with noreturn

000005c8: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005ff: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000027f:
00000283: #3 := R31 - 0x20
00000289: mem := mem with [#3, el]:u64 <- R29
0000028f: mem := mem with [#3 + 8, el]:u64 <- R30
00000293: R31 := #3
00000299: R29 := R31
000002a1: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002a6: R19 := 0x20000
000002ad: R0 := pad:64[mem[R19 + 0x30]]
000002b3: when 0:0[R0] goto %000002b1
000005f1: goto %0000033c

0000033c:
0000033f: R0 := 0x1F000
00000346: R0 := mem[R0 + 0xFC8, el]:u64
0000034c: when R0 = 0 goto %0000034a
000005f2: goto %00000363

00000363:
00000366: R0 := 0x20000
0000036d: R0 := mem[R0 + 0x28, el]:u64
00000372: R30 := 0x6F0
00000375: call @__cxa_finalize with return %0000034a

0000034a:
00000352: R30 := 0x6F4
00000354: call @deregister_tm_clones with return %00000356

00000356:
00000359: R0 := 1
00000361: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005f3: goto %000002b1

000002b1:
000002bb: R19 := mem[R31 + 0x10, el]:u64
000002c2: R29 := mem[R31, el]:u64
000002c7: R30 := mem[R31 + 8, el]:u64
000002cb: R31 := R31 + 0x20
000002d0: call R30 with noreturn

000005cc: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000600: __libc_start_main_main :: in u64 = R0
00000601: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000602: __libc_start_main_arg3 :: in out u64 = R2
00000603: __libc_start_main_auxv :: in out u64 = R3
00000604: __libc_start_main_result :: out u32 = low:32[R0]

000001d8:
00000455: R16 := 0x20000
0000045c: R17 := mem[R16, el]:u64
00000462: R16 := R16
00000467: call R17 with noreturn

000005cd: sub _fini(_fini_result)
00000605: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005ce: sub _init(_init_result)
00000606: _init_result :: out u32 = low:32[R0]

0000051d:
00000523: #6 := R31 - 0x10
00000529: mem := mem with [#6, el]:u64 <- R29
0000052f: mem := mem with [#6 + 8, el]:u64 <- R30
00000533: R31 := #6
00000539: R29 := R31
0000053e: R30 := 0x590
00000540: call @call_weak_fn with return %00000542

00000542:
00000547: R29 := mem[R31, el]:u64
0000054c: R30 := mem[R31 + 8, el]:u64
00000550: R31 := R31 + 0x10
00000555: call R30 with noreturn

000005cf: sub _start(_start_result)
00000607: _start_result :: out u32 = low:32[R0]

00000199:
0000019e: R29 := 0
000001a3: R30 := 0
000001a9: R5 := R0
000001b0: R1 := mem[R31, el]:u64
000001b6: R2 := R31 + 8
000001bc: R6 := R31
000001c1: R0 := 0x1F000
000001c8: R0 := mem[R0 + 0xFD8, el]:u64
000001cd: R3 := 0
000001d2: R4 := 0
000001d7: R30 := 0x630
000001da: call @__libc_start_main with return %000001dc

000001dc:
000001df: R30 := 0x634
000001e2: call @abort with return %000005f4

000005f4:
000005f5: call @call_weak_fn with noreturn

000005d2: sub abort()


000001e0:
00000497: R16 := 0x20000
0000049e: R17 := mem[R16 + 0x18, el]:u64
000004a4: R16 := R16 + 0x18
000004a9: call R17 with noreturn

000005d3: sub call_weak_fn(call_weak_fn_result)
00000608: call_weak_fn_result :: out u32 = low:32[R0]

000001e4:
000001e7: R0 := 0x1F000
000001ee: R0 := mem[R0 + 0xFD0, el]:u64
000001f4: when R0 = 0 goto %000001f2
000005f6: goto %000003b3

000001f2:
000001fa: call R30 with noreturn

000003b3:
000003b6: goto @__gmon_start__

000003b4:
00000481: R16 := 0x20000
00000488: R17 := mem[R16 + 0x10, el]:u64
0000048e: R16 := R16 + 0x10
00000493: call R17 with noreturn

000005d5: sub deregister_tm_clones(deregister_tm_clones_result)
00000609: deregister_tm_clones_result :: out u32 = low:32[R0]

00000200:
00000203: R0 := 0x20000
00000209: R0 := R0 + 0x30
0000020e: R1 := 0x20000
00000214: R1 := R1 + 0x30
0000021a: #1 := ~R0
0000021f: #2 := R1 + ~R0
00000225: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000022b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000022f: ZF := #2 + 1 = 0
00000233: NF := 63:63[#2 + 1]
00000239: when ZF goto %00000237
000005f7: goto %00000395

00000395:
00000398: R1 := 0x1F000
0000039f: R1 := mem[R1 + 0xFC0, el]:u64
000003a4: when R1 = 0 goto %00000237
000005f8: goto %000003a8

00000237:
0000023f: call R30 with noreturn

000003a8:
000003ac: R16 := R1
000003b1: call R16 with noreturn

000005d8: sub frame_dummy(frame_dummy_result)
0000060a: frame_dummy_result :: out u32 = low:32[R0]

000002d6:
000002d8: call @register_tm_clones with noreturn

000005d9: sub main(main_argc, main_argv, main_result)
0000060b: main_argc :: in u32 = low:32[R0]
0000060c: main_argv :: in out u64 = R1
0000060d: main_result :: out u32 = low:32[R0]

000002da:
000002de: R31 := R31 - 0x20
000002e6: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000002ed: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000002f5: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000002fc: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000302: #4 := 31:0[R0] - 1
00000307: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
0000030c: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000310: ZF := #4 + 1 = 0
00000314: NF := 31:31[#4 + 1]
0000031a: when ZF <> 1 goto %00000318
000005f9: goto %0000032f

0000032f:
00000332: R0 := 1
0000033a: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000005fa: goto %00000318

00000318:
00000322: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000328: R31 := R31 + 0x20
0000032d: call R30 with noreturn

000005dc: sub register_tm_clones(register_tm_clones_result)
0000060e: register_tm_clones_result :: out u32 = low:32[R0]

00000241:
00000244: R0 := 0x20000
0000024a: R0 := R0 + 0x30
0000024f: R1 := 0x20000
00000255: R1 := R1 + 0x30
0000025c: R1 := R1 + ~R0 + 1
00000262: R2 := 0.63:63[R1]
00000269: R1 := R2 + (R1 ~>> 3)
0000026f: R1 := extend:64[63:1[R1]]
00000275: when R1 = 0 goto %00000273
000005fb: goto %00000377

00000377:
0000037a: R2 := 0x1F000
00000381: R2 := mem[R2 + 0xFE0, el]:u64
00000386: when R2 = 0 goto %00000273
000005fc: goto %0000038a

00000273:
0000027b: call R30 with noreturn

0000038a:
0000038e: R16 := R2
00000393: call R16 with noreturn
