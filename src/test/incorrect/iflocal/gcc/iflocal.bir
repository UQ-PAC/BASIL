000005fb: program
000005c5: sub __cxa_finalize(__cxa_finalize_result)
000005fc: __cxa_finalize_result :: out u32 = low:32[R0]

00000371:
00000469: R16 := 0x10000
00000470: R17 := mem[R16 + 0xFB8, el]:u64
00000476: R16 := R16 + 0xFB8
0000047b: call R17 with noreturn

000005c6: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005fd: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000027e:
00000282: #3 := R31 - 0x20
00000288: mem := mem with [#3, el]:u64 <- R29
0000028e: mem := mem with [#3 + 8, el]:u64 <- R30
00000292: R31 := #3
00000298: R29 := R31
000002a0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002a5: R19 := 0x11000
000002ac: R0 := pad:64[mem[R19 + 0x10]]
000002b3: when 31:0[R0] <> 0 goto %000002b1
000005ef: goto %0000033a

0000033a:
0000033d: R0 := 0x10000
00000344: R0 := mem[R0 + 0xFE0, el]:u64
0000034a: when R0 = 0 goto %00000348
000005f0: goto %00000361

00000361:
00000364: R0 := 0x11000
0000036b: R0 := mem[R0 + 8, el]:u64
00000370: R30 := 0x6F0
00000373: call @__cxa_finalize with return %00000348

00000348:
00000350: R30 := 0x6F4
00000352: call @deregister_tm_clones with return %00000354

00000354:
00000357: R0 := 1
0000035f: mem := mem with [R19 + 0x10] <- 7:0[R0]
000005f1: goto %000002b1

000002b1:
000002bb: R19 := mem[R31 + 0x10, el]:u64
000002c2: R29 := mem[R31, el]:u64
000002c7: R30 := mem[R31 + 8, el]:u64
000002cb: R31 := R31 + 0x20
000002d0: call R30 with noreturn

000005ca: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005fe: __libc_start_main_main :: in u64 = R0
000005ff: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000600: __libc_start_main_arg3 :: in out u64 = R2
00000601: __libc_start_main_auxv :: in out u64 = R3
00000602: __libc_start_main_result :: out u32 = low:32[R0]

000001d7:
00000453: R16 := 0x10000
0000045a: R17 := mem[R16 + 0xFB0, el]:u64
00000460: R16 := R16 + 0xFB0
00000465: call R17 with noreturn

000005cb: sub _fini(_fini_result)
00000603: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005cc: sub _init(_init_result)
00000604: _init_result :: out u32 = low:32[R0]

0000051b:
00000521: #6 := R31 - 0x10
00000527: mem := mem with [#6, el]:u64 <- R29
0000052d: mem := mem with [#6 + 8, el]:u64 <- R30
00000531: R31 := #6
00000537: R29 := R31
0000053c: R30 := 0x590
0000053e: call @call_weak_fn with return %00000540

00000540:
00000545: R29 := mem[R31, el]:u64
0000054a: R30 := mem[R31 + 8, el]:u64
0000054e: R31 := R31 + 0x10
00000553: call R30 with noreturn

000005cd: sub _start(_start_result)
00000605: _start_result :: out u32 = low:32[R0]

00000198:
0000019d: R29 := 0
000001a2: R30 := 0
000001a8: R5 := R0
000001af: R1 := mem[R31, el]:u64
000001b5: R2 := R31 + 8
000001bb: R6 := R31
000001c0: R0 := 0x10000
000001c7: R0 := mem[R0 + 0xFF0, el]:u64
000001cc: R3 := 0
000001d1: R4 := 0
000001d6: R30 := 0x630
000001d9: call @__libc_start_main with return %000001db

000001db:
000001de: R30 := 0x634
000001e1: call @abort with return %000005f2

000005f2:
000005f3: call @call_weak_fn with noreturn

000005d0: sub abort()


000001df:
00000495: R16 := 0x10000
0000049c: R17 := mem[R16 + 0xFC8, el]:u64
000004a2: R16 := R16 + 0xFC8
000004a7: call R17 with noreturn

000005d1: sub call_weak_fn(call_weak_fn_result)
00000606: call_weak_fn_result :: out u32 = low:32[R0]

000001e3:
000001e6: R0 := 0x10000
000001ed: R0 := mem[R0 + 0xFE8, el]:u64
000001f3: when R0 = 0 goto %000001f1
000005f4: goto %000003b1

000001f1:
000001f9: call R30 with noreturn

000003b1:
000003b4: goto @__gmon_start__

000003b2:
0000047f: R16 := 0x10000
00000486: R17 := mem[R16 + 0xFC0, el]:u64
0000048c: R16 := R16 + 0xFC0
00000491: call R17 with noreturn

000005d3: sub deregister_tm_clones(deregister_tm_clones_result)
00000607: deregister_tm_clones_result :: out u32 = low:32[R0]

000001ff:
00000202: R0 := 0x11000
00000208: R0 := R0 + 0x10
0000020d: R1 := 0x11000
00000213: R1 := R1 + 0x10
00000219: #1 := ~R0
0000021e: #2 := R1 + ~R0
00000224: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000022a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000022e: ZF := #2 + 1 = 0
00000232: NF := 63:63[#2 + 1]
00000238: when ZF goto %00000236
000005f5: goto %00000393

00000393:
00000396: R1 := 0x10000
0000039d: R1 := mem[R1 + 0xFD8, el]:u64
000003a2: when R1 = 0 goto %00000236
000005f6: goto %000003a6

00000236:
0000023e: call R30 with noreturn

000003a6:
000003aa: R16 := R1
000003af: call R16 with noreturn

000005d6: sub frame_dummy(frame_dummy_result)
00000608: frame_dummy_result :: out u32 = low:32[R0]

000002d6:
000002d8: call @register_tm_clones with noreturn

000005d7: sub main(main_argc, main_argv, main_result)
00000609: main_argc :: in u32 = low:32[R0]
0000060a: main_argv :: in out u64 = R1
0000060b: main_result :: out u32 = low:32[R0]

000002da:
000002de: R31 := R31 - 0x20
000002e6: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000002ed: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000002f5: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000002fc: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000302: #4 := 31:0[R0] - 1
00000307: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
0000030c: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000310: ZF := #4 + 1 = 0
00000314: NF := 31:31[#4 + 1]
0000031a: when ZF <> 1 goto %00000318
000005f7: goto %0000032d

0000032d:
00000330: R0 := 1
00000338: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000005f8: goto %00000318

00000318:
00000320: R0 := 0
00000326: R31 := R31 + 0x20
0000032b: call R30 with noreturn

000005da: sub register_tm_clones(register_tm_clones_result)
0000060c: register_tm_clones_result :: out u32 = low:32[R0]

00000240:
00000243: R0 := 0x11000
00000249: R0 := R0 + 0x10
0000024e: R1 := 0x11000
00000254: R1 := R1 + 0x10
0000025b: R1 := R1 + ~R0 + 1
00000261: R2 := 0.63:63[R1]
00000268: R1 := R2 + (R1 ~>> 3)
0000026e: R1 := extend:64[63:1[R1]]
00000274: when R1 = 0 goto %00000272
000005f9: goto %00000375

00000375:
00000378: R2 := 0x10000
0000037f: R2 := mem[R2 + 0xFF8, el]:u64
00000384: when R2 = 0 goto %00000272
000005fa: goto %00000388

00000272:
0000027a: call R30 with noreturn

00000388:
0000038c: R16 := R2
00000391: call R16 with noreturn
