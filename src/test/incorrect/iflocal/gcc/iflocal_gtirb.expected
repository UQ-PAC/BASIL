var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 4196312bv64) == 131073bv32);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_VF, Gamma_ZF, NF, R0, VF, ZF;
  free requires (memory_load64_le(mem, 4325376bv64) == 0bv64);
  free requires (memory_load64_le(mem, 4325384bv64) == 0bv64);
  free requires (memory_load32_le(mem, 4196312bv64) == 131073bv32);
  free ensures (memory_load32_le(mem, 4196312bv64) == 131073bv32);

implementation main()
{
  $main$__0__$cegbDVc9S6m8Z0kHHU8BZQ:
    assume {:captureState "$main$__0__$cegbDVc9S6m8Z0kHHU8BZQ"} true;
    VF, Gamma_VF := 0bv1, true;
    CF, Gamma_CF := 1bv1, true;
    ZF, Gamma_ZF := bvcomp32(R0[32:0], 0bv32), Gamma_R0;
    NF, Gamma_NF := R0[32:31], Gamma_R0;
    assert Gamma_ZF;
    goto $main$__0__$cegbDVc9S6m8Z0kHHU8BZQ$__0, $main$__0__$cegbDVc9S6m8Z0kHHU8BZQ$__1;
  $main$__0__$cegbDVc9S6m8Z0kHHU8BZQ$__0:
    assume {:captureState "$main$__0__$cegbDVc9S6m8Z0kHHU8BZQ$__0"} true;
    assume (!(ZF == 1bv1));
    R0, Gamma_R0 := zero_extend32_32(R0[32:0]), Gamma_R0;
    goto main_basil_return;
  $main$__0__$cegbDVc9S6m8Z0kHHU8BZQ$__1:
    assume {:captureState "$main$__0__$cegbDVc9S6m8Z0kHHU8BZQ$__1"} true;
    assume (!(!(ZF == 1bv1)));
    R0, Gamma_R0 := 1bv64, true;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

