var {:extern} $CF: bv1;
var {:extern} $Gamma_CF: bool;
var {:extern} $Gamma_NF: bool;
var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_VF: bool;
var {:extern} $Gamma_ZF: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $NF: bv1;
var {:extern} $R0: bv64;
var {:extern} $R31: bv64;
var {:extern} $VF: bv1;
var {:extern} $ZF: bv1;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 1880bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$main_1812();
  modifies $CF, $Gamma_CF, $Gamma_NF, $Gamma_R0, $Gamma_R31, $Gamma_VF, $Gamma_ZF, $Gamma_stack, $NF, $R0, $R31, $VF, $ZF, $stack;
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le($mem, 1880bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 1880bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_1812()
{
  var #Cse0__5_1: bv32;
  var #Gamma_Cse0__5_1: bool;
  var #Gamma_load1: bool;
  var #Gamma_load2: bool;
  var #Gamma_load3: bool;
  var #load1: bv32;
  var #load2: bv32;
  var #load3: bv32;
  b#main_entry:
    assume {:captureState "main_entry (JHsGwNfGRCOpiUZHeubweA==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551584bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), $Gamma_R0);
    assume {:captureState "1816_0"} true;
    #load2, #Gamma_load2 := memory_load32_le($stack, bvadd64($R31, 12bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 12bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load2), #Gamma_load2;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 28bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 28bv64), $Gamma_R0);
    assume {:captureState "1824_0"} true;
    #load3, #Gamma_load3 := memory_load32_le($stack, bvadd64($R31, 28bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 28bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load3), #Gamma_load3;
    #Cse0__5_1, #Gamma_Cse0__5_1 := bvadd32($R0[32:0], 0bv32), $Gamma_R0;
    $VF, $Gamma_VF := bvnot1(bvcomp32(#Cse0__5_1, #Cse0__5_1)), #Gamma_Cse0__5_1;
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_1), bvadd33(zero_extend1_32($R0[32:0]), 4294967296bv33))), ($Gamma_R0 && #Gamma_Cse0__5_1);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_1, 0bv32), #Gamma_Cse0__5_1;
    $NF, $Gamma_NF := #Cse0__5_1[32:31], #Gamma_Cse0__5_1;
    assert $Gamma_ZF;
    goto b#main_5, b#main_9;
  b#main_9:
    assume {:captureState "main_9"} true;
    assume (!(!($ZF == 1bv1)));
    $R0, $Gamma_R0 := 1bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 28bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 28bv64), $Gamma_R0);
    assume {:captureState "1844_0"} true;
    goto b#main_7;
  b#main_7:
    assume {:captureState "main_7 (f08glPMzTSyyoBl6Ituc2w==)"} true;
    goto b#main_3;
  b#main_5:
    assume {:captureState "main_5"} true;
    assume (!($ZF == 1bv1));
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (ISicwCLjQ0aYINQWknU4Ug==)"} true;
    #load1, #Gamma_load1 := memory_load32_le($stack, bvadd64($R31, 28bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 28bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load1), #Gamma_load1;
    $R31, $Gamma_R31 := bvadd64($R31, 32bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

