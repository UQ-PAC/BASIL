00000bc4: program
00000bac: sub __cxa_finalize(__cxa_finalize_result)
00000bc5: __cxa_finalize_result :: out u32 = low:32[R0]

00000958:
00000a50: R16 := 0x10000
00000a57: R17 := mem[R16 + 0xFB8, el]:u64
00000a5d: R16 := R16 + 0xFB8
00000a62: call R17 with noreturn

00000bad: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000bc6: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000865:
00000869: #3 := R31 - 0x20
0000086f: mem := mem with [#3, el]:u64 <- R29
00000875: mem := mem with [#3 + 8, el]:u64 <- R30
00000879: R31 := #3
0000087f: R29 := R31
00000887: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000088c: R19 := 0x11000
00000893: R0 := pad:64[mem[R19 + 0x10]]
0000089a: when 31:0[R0] <> 0 goto %00000898
00000bae: goto %00000921

00000921:
00000924: R0 := 0x10000
0000092b: R0 := mem[R0 + 0xFE0, el]:u64
00000931: when R0 = 0 goto %0000092f
00000baf: goto %00000948

00000948:
0000094b: R0 := 0x11000
00000952: R0 := mem[R0 + 8, el]:u64
00000957: R30 := 0x6F0
0000095a: call @__cxa_finalize with return %0000092f

0000092f:
00000937: R30 := 0x6F4
00000939: call @deregister_tm_clones with return %0000093b

0000093b:
0000093e: R0 := 1
00000946: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000bb0: goto %00000898

00000898:
000008a2: R19 := mem[R31 + 0x10, el]:u64
000008a9: R29 := mem[R31, el]:u64
000008ae: R30 := mem[R31 + 8, el]:u64
000008b2: R31 := R31 + 0x20
000008b7: call R30 with noreturn

00000bb1: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000bc7: __libc_start_main_main :: in u64 = R0
00000bc8: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000bc9: __libc_start_main_arg3 :: in out u64 = R2
00000bca: __libc_start_main_auxv :: in out u64 = R3
00000bcb: __libc_start_main_result :: out u32 = low:32[R0]

000007be:
00000a3a: R16 := 0x10000
00000a41: R17 := mem[R16 + 0xFB0, el]:u64
00000a47: R16 := R16 + 0xFB0
00000a4c: call R17 with noreturn

00000bb2: sub _fini(_fini_result)
00000bcc: _fini_result :: out u32 = low:32[R0]

00000606:
0000060c: #0 := R31 - 0x10
00000612: mem := mem with [#0, el]:u64 <- R29
00000618: mem := mem with [#0 + 8, el]:u64 <- R30
0000061c: R31 := #0
00000622: R29 := R31
00000629: R29 := mem[R31, el]:u64
0000062e: R30 := mem[R31 + 8, el]:u64
00000632: R31 := R31 + 0x10
00000637: call R30 with noreturn

00000bb3: sub _init(_init_result)
00000bcd: _init_result :: out u32 = low:32[R0]

00000b02:
00000b08: #6 := R31 - 0x10
00000b0e: mem := mem with [#6, el]:u64 <- R29
00000b14: mem := mem with [#6 + 8, el]:u64 <- R30
00000b18: R31 := #6
00000b1e: R29 := R31
00000b23: R30 := 0x590
00000b25: call @call_weak_fn with return %00000b27

00000b27:
00000b2c: R29 := mem[R31, el]:u64
00000b31: R30 := mem[R31 + 8, el]:u64
00000b35: R31 := R31 + 0x10
00000b3a: call R30 with noreturn

00000bb4: sub _start(_start_result)
00000bce: _start_result :: out u32 = low:32[R0]

0000077f:
00000784: R29 := 0
00000789: R30 := 0
0000078f: R5 := R0
00000796: R1 := mem[R31, el]:u64
0000079c: R2 := R31 + 8
000007a2: R6 := R31
000007a7: R0 := 0x10000
000007ae: R0 := mem[R0 + 0xFF0, el]:u64
000007b3: R3 := 0
000007b8: R4 := 0
000007bd: R30 := 0x630
000007c0: call @__libc_start_main with return %000007c2

000007c2:
000007c5: R30 := 0x634
000007c8: call @abort with return %00000bb5

00000bb5:
00000bb6: call @call_weak_fn with noreturn

00000bb7: sub abort()


000007c6:
00000a7c: R16 := 0x10000
00000a83: R17 := mem[R16 + 0xFC8, el]:u64
00000a89: R16 := R16 + 0xFC8
00000a8e: call R17 with noreturn

00000bb8: sub call_weak_fn(call_weak_fn_result)
00000bcf: call_weak_fn_result :: out u32 = low:32[R0]

000007ca:
000007cd: R0 := 0x10000
000007d4: R0 := mem[R0 + 0xFE8, el]:u64
000007da: when R0 = 0 goto %000007d8
00000bb9: goto %00000998

000007d8:
000007e0: call R30 with noreturn

00000998:
0000099b: goto @__gmon_start__

00000999:
00000a66: R16 := 0x10000
00000a6d: R17 := mem[R16 + 0xFC0, el]:u64
00000a73: R16 := R16 + 0xFC0
00000a78: call R17 with noreturn

00000bba: sub deregister_tm_clones(deregister_tm_clones_result)
00000bd0: deregister_tm_clones_result :: out u32 = low:32[R0]

000007e6:
000007e9: R0 := 0x11000
000007ef: R0 := R0 + 0x10
000007f4: R1 := 0x11000
000007fa: R1 := R1 + 0x10
00000800: #1 := ~R0
00000805: #2 := R1 + ~R0
0000080b: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000811: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000815: ZF := #2 + 1 = 0
00000819: NF := 63:63[#2 + 1]
0000081f: when ZF goto %0000081d
00000bbb: goto %0000097a

0000097a:
0000097d: R1 := 0x10000
00000984: R1 := mem[R1 + 0xFD8, el]:u64
00000989: when R1 = 0 goto %0000081d
00000bbc: goto %0000098d

0000081d:
00000825: call R30 with noreturn

0000098d:
00000991: R16 := R1
00000996: call R16 with noreturn

00000bbd: sub frame_dummy(frame_dummy_result)
00000bd1: frame_dummy_result :: out u32 = low:32[R0]

000008bd:
000008bf: call @register_tm_clones with noreturn

00000bbe: sub main(main_argc, main_argv, main_result)
00000bd2: main_argc :: in u32 = low:32[R0]
00000bd3: main_argv :: in out u64 = R1
00000bd4: main_result :: out u32 = low:32[R0]

000008c1:
000008c5: R31 := R31 - 0x20
000008cd: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000008d4: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000008dc: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000008e3: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000008e9: #4 := 31:0[R0] - 1
000008ee: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
000008f3: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
000008f7: ZF := #4 + 1 = 0
000008fb: NF := 31:31[#4 + 1]
00000901: when ZF <> 1 goto %000008ff
00000bbf: goto %00000914

00000914:
00000917: R0 := 1
0000091f: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000bc0: goto %000008ff

000008ff:
00000907: R0 := 0
0000090d: R31 := R31 + 0x20
00000912: call R30 with noreturn

00000bc1: sub register_tm_clones(register_tm_clones_result)
00000bd5: register_tm_clones_result :: out u32 = low:32[R0]

00000827:
0000082a: R0 := 0x11000
00000830: R0 := R0 + 0x10
00000835: R1 := 0x11000
0000083b: R1 := R1 + 0x10
00000842: R1 := R1 + ~R0 + 1
00000848: R2 := 0.63:63[R1]
0000084f: R1 := R2 + (R1 ~>> 3)
00000855: R1 := extend:64[63:1[R1]]
0000085b: when R1 = 0 goto %00000859
00000bc2: goto %0000095c

0000095c:
0000095f: R2 := 0x10000
00000966: R2 := mem[R2 + 0xFF8, el]:u64
0000096b: when R2 = 0 goto %00000859
00000bc3: goto %0000096f

00000859:
00000861: call R30 with noreturn

0000096f:
00000973: R16 := R2
00000978: call R16 with noreturn
