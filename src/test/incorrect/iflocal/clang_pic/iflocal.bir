000005d9: program
000005a5: sub __cxa_finalize(__cxa_finalize_result)
000005da: __cxa_finalize_result :: out u32 = low:32[R0]

000003a5:
0000049d: R16 := 0x20000
000004a4: R17 := mem[R16 + 8, el]:u64
000004aa: R16 := R16 + 8
000004af: call R17 with noreturn

000005a6: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005db: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028f:
00000293: #3 := R31 - 0x20
00000299: mem := mem with [#3, el]:u64 <- R29
0000029f: mem := mem with [#3 + 8, el]:u64 <- R30
000002a3: R31 := #3
000002a9: R29 := R31
000002b1: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b6: R19 := 0x20000
000002bd: R0 := pad:64[mem[R19 + 0x30]]
000002c3: when 0:0[R0] goto %000002c1
000005ce: goto %0000036e

0000036e:
00000371: R0 := 0x1F000
00000378: R0 := mem[R0 + 0xFC8, el]:u64
0000037e: when R0 = 0 goto %0000037c
000005cf: goto %00000395

00000395:
00000398: R0 := 0x20000
0000039f: R0 := mem[R0 + 0x28, el]:u64
000003a4: R30 := 0x730
000003a7: call @__cxa_finalize with return %0000037c

0000037c:
00000384: R30 := 0x734
00000386: call @deregister_tm_clones with return %00000388

00000388:
0000038b: R0 := 1
00000393: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005d0: goto %000002c1

000002c1:
000002cb: R19 := mem[R31 + 0x10, el]:u64
000002d2: R29 := mem[R31, el]:u64
000002d7: R30 := mem[R31 + 8, el]:u64
000002db: R31 := R31 + 0x20
000002e0: call R30 with noreturn

000005aa: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005dc: __libc_start_main_main :: in u64 = R0
000005dd: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005de: __libc_start_main_arg3 :: in out u64 = R2
000005df: __libc_start_main_auxv :: in out u64 = R3
000005e0: __libc_start_main_result :: out u32 = low:32[R0]

000001e8:
00000487: R16 := 0x20000
0000048e: R17 := mem[R16, el]:u64
00000494: R16 := R16
00000499: call R17 with noreturn

000005ab: sub _fini(_fini_result)
000005e1: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005ac: sub _init(_init_result)
000005e2: _init_result :: out u32 = low:32[R0]

000004f7:
000004fd: #6 := R31 - 0x10
00000503: mem := mem with [#6, el]:u64 <- R29
00000509: mem := mem with [#6 + 8, el]:u64 <- R30
0000050d: R31 := #6
00000513: R29 := R31
00000518: R30 := 0x5C8
0000051a: call @call_weak_fn with return %0000051c

0000051c:
00000521: R29 := mem[R31, el]:u64
00000526: R30 := mem[R31 + 8, el]:u64
0000052a: R31 := R31 + 0x10
0000052f: call R30 with noreturn

000005ad: sub _start(_start_result)
000005e3: _start_result :: out u32 = low:32[R0]

000001a9:
000001ae: R29 := 0
000001b3: R30 := 0
000001b9: R5 := R0
000001c0: R1 := mem[R31, el]:u64
000001c6: R2 := R31 + 8
000001cc: R6 := R31
000001d1: R0 := 0x1F000
000001d8: R0 := mem[R0 + 0xFD8, el]:u64
000001dd: R3 := 0
000001e2: R4 := 0
000001e7: R30 := 0x670
000001ea: call @__libc_start_main with return %000001ec

000001ec:
000001ef: R30 := 0x674
000001f2: call @abort with return %000005d1

000005d1:
000005d2: call @call_weak_fn with noreturn

000005b0: sub abort()


000001f0:
000004c9: R16 := 0x20000
000004d0: R17 := mem[R16 + 0x18, el]:u64
000004d6: R16 := R16 + 0x18
000004db: call R17 with noreturn

000005b1: sub call_weak_fn(call_weak_fn_result)
000005e4: call_weak_fn_result :: out u32 = low:32[R0]

000001f4:
000001f7: R0 := 0x1F000
000001fe: R0 := mem[R0 + 0xFD0, el]:u64
00000204: when R0 = 0 goto %00000202
000005d3: goto %000003e5

00000202:
0000020a: call R30 with noreturn

000003e5:
000003e8: goto @__gmon_start__

000003e6:
000004b3: R16 := 0x20000
000004ba: R17 := mem[R16 + 0x10, el]:u64
000004c0: R16 := R16 + 0x10
000004c5: call R17 with noreturn

000005b3: sub deregister_tm_clones(deregister_tm_clones_result)
000005e5: deregister_tm_clones_result :: out u32 = low:32[R0]

00000210:
00000213: R0 := 0x20000
00000219: R0 := R0 + 0x30
0000021e: R1 := 0x20000
00000224: R1 := R1 + 0x30
0000022a: #1 := ~R0
0000022f: #2 := R1 + ~R0
00000235: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023f: ZF := #2 + 1 = 0
00000243: NF := 63:63[#2 + 1]
00000249: when ZF goto %00000247
000005d4: goto %000003c7

000003c7:
000003ca: R1 := 0x1F000
000003d1: R1 := mem[R1 + 0xFC0, el]:u64
000003d6: when R1 = 0 goto %00000247
000005d5: goto %000003da

00000247:
0000024f: call R30 with noreturn

000003da:
000003de: R16 := R1
000003e3: call R16 with noreturn

000005b6: sub frame_dummy(frame_dummy_result)
000005e6: frame_dummy_result :: out u32 = low:32[R0]

000002e6:
000002e8: call @register_tm_clones with noreturn

000005b7: sub main(main_argc, main_argv, main_result)
000005e7: main_argc :: in u32 = low:32[R0]
000005e8: main_argv :: in out u64 = R1
000005e9: main_result :: out u32 = low:32[R0]

000002ea:
000002ee: R31 := R31 - 0x10
000002f5: mem := mem with [R31 + 0xC, el]:u32 <- 0
000002fd: mem := mem with [R31 + 8, el]:u32 <- 31:0[R0]
00000304: R8 := pad:64[mem[R31 + 8, el]:u32]
0000030c: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000313: R8 := pad:64[mem[R31 + 4, el]:u32]
00000319: #4 := 31:0[R8] - 1
0000031e: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000323: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000327: ZF := #4 + 1 = 0
0000032b: NF := 31:31[#4 + 1]
0000032f: R8 := pad:64[#4 + 1]
0000033b: when ZF goto %00000334
0000033c: goto %00000337

00000337:
00000338: R8 := 1
0000033e: goto %0000033a

00000334:
00000335: R8 := 0
0000033d: goto %0000033a

0000033a:
00000344: when 0:0[R8] goto %00000342
000005d6: goto %00000359

00000359:
0000035c: goto %0000035a

0000035a:
00000360: R8 := 1
00000368: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
0000036c: goto %00000342

00000342:
0000034c: R0 := pad:64[mem[R31 + 4, el]:u32]
00000352: R31 := R31 + 0x10
00000357: call R30 with noreturn

000005b9: sub register_tm_clones(register_tm_clones_result)
000005ea: register_tm_clones_result :: out u32 = low:32[R0]

00000251:
00000254: R0 := 0x20000
0000025a: R0 := R0 + 0x30
0000025f: R1 := 0x20000
00000265: R1 := R1 + 0x30
0000026c: R1 := R1 + ~R0 + 1
00000272: R2 := 0.63:63[R1]
00000279: R1 := R2 + (R1 ~>> 3)
0000027f: R1 := extend:64[63:1[R1]]
00000285: when R1 = 0 goto %00000283
000005d7: goto %000003a9

000003a9:
000003ac: R2 := 0x1F000
000003b3: R2 := mem[R2 + 0xFE0, el]:u64
000003b8: when R2 = 0 goto %00000283
000005d8: goto %000003bc

00000283:
0000028b: call R30 with noreturn

000003bc:
000003c0: R16 := R2
000003c5: call R16 with noreturn
