00000c3a: program
00000c23: sub __cxa_finalize(__cxa_finalize_result)
00000c3b: __cxa_finalize_result :: out u32 = low:32[R0]

000009c7:
00000abf: R16 := 0x11000
00000ac6: R17 := mem[R16 + 8, el]:u64
00000acc: R16 := R16 + 8
00000ad1: call R17 with noreturn

00000c24: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c3c: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008b0:
000008b4: #3 := R31 - 0x20
000008ba: mem := mem with [#3, el]:u64 <- R29
000008c0: mem := mem with [#3 + 8, el]:u64 <- R30
000008c4: R31 := #3
000008ca: R29 := R31
000008d2: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008d7: R19 := 0x11000
000008de: R0 := pad:64[mem[R19 + 0x30]]
000008e5: when 31:0[R0] <> 0 goto %000008e3
00000c25: goto %00000990

00000990:
00000993: R0 := 0x10000
0000099a: R0 := mem[R0 + 0xFC8, el]:u64
000009a0: when R0 = 0 goto %0000099e
00000c26: goto %000009b7

000009b7:
000009ba: R0 := 0x11000
000009c1: R0 := mem[R0 + 0x28, el]:u64
000009c6: R30 := 0x6F0
000009c9: call @__cxa_finalize with return %0000099e

0000099e:
000009a6: R30 := 0x6F4
000009a8: call @deregister_tm_clones with return %000009aa

000009aa:
000009ad: R0 := 1
000009b5: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000c27: goto %000008e3

000008e3:
000008ed: R19 := mem[R31 + 0x10, el]:u64
000008f4: R29 := mem[R31, el]:u64
000008f9: R30 := mem[R31 + 8, el]:u64
000008fd: R31 := R31 + 0x20
00000902: call R30 with noreturn

00000c28: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c3d: __libc_start_main_main :: in u64 = R0
00000c3e: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c3f: __libc_start_main_arg3 :: in out u64 = R2
00000c40: __libc_start_main_auxv :: in out u64 = R3
00000c41: __libc_start_main_result :: out u32 = low:32[R0]

00000809:
00000aa9: R16 := 0x11000
00000ab0: R17 := mem[R16, el]:u64
00000ab6: R16 := R16
00000abb: call R17 with noreturn

00000c29: sub _fini(_fini_result)
00000c42: _fini_result :: out u32 = low:32[R0]

00000641:
00000647: #0 := R31 - 0x10
0000064d: mem := mem with [#0, el]:u64 <- R29
00000653: mem := mem with [#0 + 8, el]:u64 <- R30
00000657: R31 := #0
0000065d: R29 := R31
00000664: R29 := mem[R31, el]:u64
00000669: R30 := mem[R31 + 8, el]:u64
0000066d: R31 := R31 + 0x10
00000672: call R30 with noreturn

00000c2a: sub _init(_init_result)
00000c43: _init_result :: out u32 = low:32[R0]

00000b75:
00000b7b: #6 := R31 - 0x10
00000b81: mem := mem with [#6, el]:u64 <- R29
00000b87: mem := mem with [#6 + 8, el]:u64 <- R30
00000b8b: R31 := #6
00000b91: R29 := R31
00000b96: R30 := 0x590
00000b98: call @call_weak_fn with return %00000b9a

00000b9a:
00000b9f: R29 := mem[R31, el]:u64
00000ba4: R30 := mem[R31 + 8, el]:u64
00000ba8: R31 := R31 + 0x10
00000bad: call R30 with noreturn

00000c2b: sub _start(_start_result)
00000c44: _start_result :: out u32 = low:32[R0]

000007ca:
000007cf: R29 := 0
000007d4: R30 := 0
000007da: R5 := R0
000007e1: R1 := mem[R31, el]:u64
000007e7: R2 := R31 + 8
000007ed: R6 := R31
000007f2: R0 := 0x10000
000007f9: R0 := mem[R0 + 0xFD8, el]:u64
000007fe: R3 := 0
00000803: R4 := 0
00000808: R30 := 0x630
0000080b: call @__libc_start_main with return %0000080d

0000080d:
00000810: R30 := 0x634
00000813: call @abort with return %00000c2c

00000c2c:
00000c2d: call @call_weak_fn with noreturn

00000c2e: sub abort()


00000811:
00000aeb: R16 := 0x11000
00000af2: R17 := mem[R16 + 0x18, el]:u64
00000af8: R16 := R16 + 0x18
00000afd: call R17 with noreturn

00000c2f: sub call_weak_fn(call_weak_fn_result)
00000c45: call_weak_fn_result :: out u32 = low:32[R0]

00000815:
00000818: R0 := 0x10000
0000081f: R0 := mem[R0 + 0xFD0, el]:u64
00000825: when R0 = 0 goto %00000823
00000c30: goto %00000a07

00000823:
0000082b: call R30 with noreturn

00000a07:
00000a0a: goto @__gmon_start__

00000a08:
00000ad5: R16 := 0x11000
00000adc: R17 := mem[R16 + 0x10, el]:u64
00000ae2: R16 := R16 + 0x10
00000ae7: call R17 with noreturn

00000c31: sub deregister_tm_clones(deregister_tm_clones_result)
00000c46: deregister_tm_clones_result :: out u32 = low:32[R0]

00000831:
00000834: R0 := 0x11000
0000083a: R0 := R0 + 0x30
0000083f: R1 := 0x11000
00000845: R1 := R1 + 0x30
0000084b: #1 := ~R0
00000850: #2 := R1 + ~R0
00000856: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000085c: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000860: ZF := #2 + 1 = 0
00000864: NF := 63:63[#2 + 1]
0000086a: when ZF goto %00000868
00000c32: goto %000009e9

000009e9:
000009ec: R1 := 0x10000
000009f3: R1 := mem[R1 + 0xFC0, el]:u64
000009f8: when R1 = 0 goto %00000868
00000c33: goto %000009fc

00000868:
00000870: call R30 with noreturn

000009fc:
00000a00: R16 := R1
00000a05: call R16 with noreturn

00000c34: sub frame_dummy(frame_dummy_result)
00000c47: frame_dummy_result :: out u32 = low:32[R0]

00000908:
0000090a: call @register_tm_clones with noreturn

00000c35: sub main(main_argc, main_argv, main_result)
00000c48: main_argc :: in u32 = low:32[R0]
00000c49: main_argv :: in out u64 = R1
00000c4a: main_result :: out u32 = low:32[R0]

0000090c:
00000910: R31 := R31 - 0x10
00000917: mem := mem with [R31 + 0xC, el]:u32 <- 0
0000091f: mem := mem with [R31 + 8, el]:u32 <- 31:0[R0]
00000926: R8 := pad:64[mem[R31 + 8, el]:u32]
0000092e: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000935: R8 := pad:64[mem[R31 + 4, el]:u32]
0000093b: #4 := 31:0[R8] - 1
00000940: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000945: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000949: ZF := #4 + 1 = 0
0000094d: NF := 31:31[#4 + 1]
00000951: R8 := pad:64[#4 + 1]
0000095d: when ZF goto %00000956
0000095e: goto %00000959

00000959:
0000095a: R8 := 1
00000960: goto %0000095c

00000956:
00000957: R8 := 0
0000095f: goto %0000095c

0000095c:
00000966: when 0:0[R8] goto %00000964
00000c36: goto %0000097b

0000097b:
0000097e: goto %0000097c

0000097c:
00000982: R8 := 1
0000098a: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
0000098e: goto %00000964

00000964:
0000096e: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000974: R31 := R31 + 0x10
00000979: call R30 with noreturn

00000c37: sub register_tm_clones(register_tm_clones_result)
00000c4b: register_tm_clones_result :: out u32 = low:32[R0]

00000872:
00000875: R0 := 0x11000
0000087b: R0 := R0 + 0x30
00000880: R1 := 0x11000
00000886: R1 := R1 + 0x30
0000088d: R1 := R1 + ~R0 + 1
00000893: R2 := 0.63:63[R1]
0000089a: R1 := R2 + (R1 ~>> 3)
000008a0: R1 := extend:64[63:1[R1]]
000008a6: when R1 = 0 goto %000008a4
00000c38: goto %000009cb

000009cb:
000009ce: R2 := 0x10000
000009d5: R2 := mem[R2 + 0xFE0, el]:u64
000009da: when R2 = 0 goto %000008a4
00000c39: goto %000009de

000008a4:
000008ac: call R30 with noreturn

000009de:
000009e2: R16 := R2
000009e7: call R16 with noreturn
