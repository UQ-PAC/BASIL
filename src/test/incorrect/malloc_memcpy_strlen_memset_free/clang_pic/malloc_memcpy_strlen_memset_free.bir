000008dc: program
00000895: sub __cxa_finalize(__cxa_finalize_result)
000008dd: __cxa_finalize_result :: out u32 = low:32[R0]

00000544:
000006e8: R16 := 0x20000
000006f0: R17 := mem[R16 + 0x18, el]:u64
000006f7: R16 := R16 + 0x18
000006fc: call R17 with noreturn

00000896: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008de: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000032a:
00000331: #34 := R31 - 0x20
00000336: mem := mem with [#34, el]:u64 <- R29
0000033b: mem := mem with [#34 + 8, el]:u64 <- R30
0000033f: R31 := #34
00000346: R29 := R31
0000034e: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000354: R19 := 0x20000
0000035d: R0 := pad:32[mem[R19 + 0x70]]
00000369: #36 := ~~0:0[R0]
00000363: when #36 goto %00000361
000008d2: goto %00000502

00000502:
00000506: R0 := 0x1F000
0000050e: R0 := mem[R0 + 0xFB8, el]:u64
0000051a: #70 := R0 = 0
00000514: when #70 goto %00000512
000008d3: goto %00000532

00000532:
00000536: R0 := 0x20000
0000053e: R0 := mem[R0 + 0x58, el]:u64
00000543: R30 := 0x930
00000546: call @__cxa_finalize with return %00000512

00000512:
0000051f: R30 := 0x934
00000521: call @deregister_tm_clones with return %00000523

00000523:
00000528: R0 := 1
00000530: mem := mem with [R19 + 0x70] <- low:8[31:0[R0]]
000008d4: goto %00000361

00000361:
00000371: R19 := mem[R31 + 0x10, el]:u64
0000037b: R29 := mem[R31, el]:u64
0000037f: R30 := mem[R31 + 8, el]:u64
00000382: R31 := R31 + 0x20
00000387: call R30 with noreturn

0000089a: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008df: __libc_start_main_main :: in u64 = R0
000008e0: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008e1: __libc_start_main_arg3 :: in out u64 = R2
000008e2: __libc_start_main_auxv :: in out u64 = R3
000008e3: __libc_start_main_result :: out u32 = low:32[R0]

0000026e:
000006cf: R16 := 0x20000
000006d7: R17 := mem[R16 + 0x10, el]:u64
000006de: R16 := R16 + 0x10
000006e3: call R17 with noreturn

0000089b: sub _fini(_fini_result)
000008e4: _fini_result :: out u32 = low:32[R0]

00000020:
00000029: #3 := R31 - 0x10
0000002e: mem := mem with [#3, el]:u64 <- R29
00000033: mem := mem with [#3 + 8, el]:u64 <- R30
00000037: R31 := #3
0000003e: R29 := R31
00000048: R29 := mem[R31, el]:u64
0000004c: R30 := mem[R31 + 8, el]:u64
0000004f: R31 := R31 + 0x10
00000054: call R30 with noreturn

0000089c: sub _init(_init_result)
000008e5: _init_result :: out u32 = low:32[R0]

000007ae:
000007b7: #101 := R31 - 0x10
000007bc: mem := mem with [#101, el]:u64 <- R29
000007c1: mem := mem with [#101 + 8, el]:u64 <- R30
000007c5: R31 := #101
000007cc: R29 := R31
000007d1: R30 := 0x768
000007d3: call @call_weak_fn with return %000007d5

000007d5:
000007dd: R29 := mem[R31, el]:u64
000007e1: R30 := mem[R31 + 8, el]:u64
000007e4: R31 := R31 + 0x10
000007e9: call R30 with noreturn

0000089d: sub _start(_start_result)
000008e6: _start_result :: out u32 = low:32[R0]

00000224:
0000022a: R29 := 0
00000230: R30 := 0
00000238: R5 := R0
00000240: R1 := mem[R31, el]:u64
00000247: R2 := R31 + 8
0000024e: R6 := R31
00000254: R0 := 0x1F000
0000025c: R0 := mem[R0 + 0xFD8, el]:u64
00000262: R3 := 0
00000268: R4 := 0
0000026d: R30 := 0x870
00000270: call @__libc_start_main with return %00000272

00000272:
00000275: R30 := 0x874
00000278: call @abort with return %000008d5

000008d5:
000008d6: call @call_weak_fn with noreturn

000008a0: sub abort()


00000276:
0000074c: R16 := 0x20000
00000754: R17 := mem[R16 + 0x38, el]:u64
0000075b: R16 := R16 + 0x38
00000760: call R17 with noreturn

000008a1: sub call_weak_fn(call_weak_fn_result)
000008e7: call_weak_fn_result :: out u32 = low:32[R0]

0000027a:
0000027e: R0 := 0x1F000
00000286: R0 := mem[R0 + 0xFC0, el]:u64
00000292: #12 := R0 = 0
0000028c: when #12 goto %0000028a
000008d7: goto %00000596

0000028a:
00000297: call R30 with noreturn

00000596:
00000599: goto @__gmon_start__

00000597:
00000733: R16 := 0x20000
0000073b: R17 := mem[R16 + 0x30, el]:u64
00000742: R16 := R16 + 0x30
00000747: call R17 with noreturn

000008a3: sub deregister_tm_clones(deregister_tm_clones_result)
000008e8: deregister_tm_clones_result :: out u32 = low:32[R0]

0000029d:
000002a1: R0 := 0x20000
000002a8: R0 := R0 + 0x70
000002ae: R1 := 0x20000
000002b5: R1 := R1 + 0x70
000002bd: #16 := 1 + ~R0 + R1
000002c1: NF := 63:63[#16]
000002c4: VF := 63:63[R1] & 63:63[~R0] & ~63:63[#16] | ~63:63[R1] &
          ~63:63[~R0] & 63:63[#16]
000002c7: ZF := #16 = 0
000002ca: CF := 63:63[R1] & 63:63[~R0] | 63:63[~R0] & ~63:63[#16] | 63:63[R1]
          & ~63:63[#16]
000002d8: #21 := ZF
000002d2: when #21 goto %000002d0
000008d8: goto %0000056f

0000056f:
00000573: R1 := 0x1F000
0000057b: R1 := mem[R1 + 0xFB0, el]:u64
00000586: #78 := R1 = 0
00000580: when #78 goto %000002d0
000008d9: goto %00000589

000002d0:
000002dd: call R30 with noreturn

00000589:
0000058f: R16 := R1
00000594: call R16 with noreturn

000008a6: sub frame_dummy(frame_dummy_result)
000008e9: frame_dummy_result :: out u32 = low:32[R0]

0000038d:
0000038f: call @register_tm_clones with noreturn

000008a7: sub free(free_ptr)
000008ea: free_ptr :: in out u64 = R0

000004dc:
0000077e: R16 := 0x20000
00000786: R17 := mem[R16 + 0x48, el]:u64
0000078d: R16 := R16 + 0x48
00000792: call R17 with noreturn

000008a8: sub main(main_argc, main_argv, main_result)
000008eb: main_argc :: in u32 = low:32[R0]
000008ec: main_argv :: in out u64 = R1
000008ed: main_result :: out u32 = low:32[R0]

00000391:
00000396: R31 := R31 - 0x40
0000039e: #42 := R31 + 0x30
000003a3: mem := mem with [#42, el]:u64 <- R29
000003a8: mem := mem with [#42 + 8, el]:u64 <- R30
000003af: R29 := R31 + 0x30
000003b5: R8 := 0x1F000
000003bd: R8 := mem[R8 + 0xFC8, el]:u64
000003c5: mem := mem with [R31 + 0x18, el]:u64 <- R8
000003cd: mem := mem with [R29 - 8, el]:u64 <- 0
000003d5: mem := mem with [R29 - 0x10, el]:u64 <- 0
000003db: R0 := 0xB
000003e0: R30 := 0x97C
000003e3: call @malloc with return %000003e5

000003e5:
000003eb: R8 := mem[R31 + 0x18, el]:u64
000003f3: mem := mem with [R8, el]:u64 <- R0
000003fb: R8 := mem[R8, el]:u64
00000403: mem := mem with [R31 + 8, el]:u64 <- R8
00000409: R0 := 0x1F000
00000411: R0 := mem[R0 + 0xFD0, el]:u64
00000419: mem := mem with [R31, el]:u64 <- R0
0000041e: R30 := 0x99C
00000421: call @strlen with return %00000423

00000423:
00000429: R1 := mem[R31, el]:u64
00000431: R2 := R0
00000439: R0 := mem[R31 + 8, el]:u64
0000043e: R30 := 0x9AC
00000441: call @memcpy with return %00000443

00000443:
00000449: R8 := mem[R31 + 0x18, el]:u64
00000451: R0 := mem[R8, el]:u64
00000456: R30 := 0x9B8
00000459: call @puts with return %0000045b

0000045b:
00000461: R8 := mem[R31 + 0x18, el]:u64
00000469: R9 := mem[R8, el]:u64
00000470: R9 := R9 + 4
00000478: mem := mem with [R29 - 8, el]:u64 <- R9
00000480: R9 := mem[R29 - 8, el]:u64
00000488: mem := mem with [R9] <- 0
00000490: R9 := mem[R8, el]:u64
00000498: mem := mem with [R31 + 0x10, el]:u64 <- R9
000004a0: R0 := mem[R8, el]:u64
000004a5: R30 := 0x9E0
000004a7: call @strlen with return %000004a9

000004a9:
000004af: R2 := R0
000004b7: R0 := mem[R31 + 0x10, el]:u64
000004be: R1 := 1
000004c3: R30 := 0x9F0
000004c6: call @memset with return %000004c8

000004c8:
000004ce: R8 := mem[R31 + 0x18, el]:u64
000004d6: R0 := mem[R8, el]:u64
000004db: R30 := 0x9FC
000004de: call @free with return %000004e0

000004e0:
000004e7: R0 := 0
000004f0: R29 := mem[R31 + 0x30, el]:u64
000004f4: R30 := mem[R31 + 0x38, el]:u64
000004fb: R31 := R31 + 0x40
00000500: call R30 with noreturn

000008a9: sub malloc(malloc_size, malloc_result)
000008ee: malloc_size :: in u64 = R0
000008ef: malloc_result :: out u64 = R0

000003e1:
00000701: R16 := 0x20000
00000709: R17 := mem[R16 + 0x20, el]:u64
00000710: R16 := R16 + 0x20
00000715: call R17 with noreturn

000008aa: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
000008f0: memcpy_dst :: in out u64 = R0
000008f1: memcpy_src :: in out u64 = R1
000008f2: memcpy_n :: in u64 = R2
000008f3: memcpy_result :: out u64 = R0

0000043f:
0000069d: R16 := 0x20000
000006a5: R17 := mem[R16, el]:u64
000006ac: R16 := R16
000006b1: call R17 with noreturn

000008ab: sub memset(memset_buf, memset_c, memset_n, memset_result)
000008f4: memset_buf :: in out u64 = R0
000008f5: memset_c :: in u32 = low:32[R1]
000008f6: memset_n :: in u64 = R2
000008f7: memset_result :: out u64 = R0

000004c4:
0000071a: R16 := 0x20000
00000722: R17 := mem[R16 + 0x28, el]:u64
00000729: R16 := R16 + 0x28
0000072e: call R17 with noreturn

000008ac: sub puts(puts_s, puts_result)
000008f8: puts_s :: in u64 = R0
000008f9: puts_result :: out u32 = low:32[R0]

00000457:
00000765: R16 := 0x20000
0000076d: R17 := mem[R16 + 0x40, el]:u64
00000774: R16 := R16 + 0x40
00000779: call R17 with noreturn

000008ad: sub register_tm_clones(register_tm_clones_result)
000008fa: register_tm_clones_result :: out u32 = low:32[R0]

000002df:
000002e3: R0 := 0x20000
000002ea: R0 := R0 + 0x70
000002f0: R1 := 0x20000
000002f7: R1 := R1 + 0x70
000002ff: R1 := R1 - R0
00000306: R2 := R1 >> 0x3F
0000030e: R1 := R2 + (R1 ~>> 3)
00000315: R1 := R1 >> 1
00000321: #30 := R1 = 0
0000031b: when #30 goto %00000319
000008da: goto %00000548

00000548:
0000054c: R2 := 0x1F000
00000554: R2 := mem[R2 + 0xFE0, el]:u64
0000055f: #73 := R2 = 0
00000559: when #73 goto %00000319
000008db: goto %00000562

00000319:
00000326: call R30 with noreturn

00000562:
00000568: R16 := R2
0000056d: call R16 with noreturn

000008b0: sub strlen(strlen_s, strlen_result)
000008fb: strlen_s :: in u64 = R0
000008fc: strlen_result :: out u64 = R0

0000041f:
000006b6: R16 := 0x20000
000006be: R17 := mem[R16 + 8, el]:u64
000006c5: R16 := R16 + 8
000006ca: call R17 with noreturn
