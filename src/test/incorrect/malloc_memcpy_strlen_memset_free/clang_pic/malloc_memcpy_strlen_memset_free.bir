0000081f: program
00000803: sub __cxa_finalize(__cxa_finalize_result)
00000820: __cxa_finalize_result :: out u32 = low:32[R0]

000004e9:
0000066d: R16 := 0x20000
00000674: R17 := mem[R16 + 0x18, el]:u64
0000067a: R16 := R16 + 0x18
0000067f: call R17 with noreturn

00000804: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000821: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000307:
0000030b: #3 := R31 - 0x20
00000311: mem := mem with [#3, el]:u64 <- R29
00000317: mem := mem with [#3 + 8, el]:u64 <- R30
0000031b: R31 := #3
00000321: R29 := R31
00000329: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000032e: R19 := 0x20000
00000335: R0 := pad:64[mem[R19 + 0x70]]
0000033b: when 0:0[R0] goto %00000339
00000805: goto %000004b2

000004b2:
000004b5: R0 := 0x1F000
000004bc: R0 := mem[R0 + 0xFB8, el]:u64
000004c2: when R0 = 0 goto %000004c0
00000806: goto %000004d9

000004d9:
000004dc: R0 := 0x20000
000004e3: R0 := mem[R0 + 0x58, el]:u64
000004e8: R30 := 0x930
000004eb: call @__cxa_finalize with return %000004c0

000004c0:
000004c8: R30 := 0x934
000004ca: call @deregister_tm_clones with return %000004cc

000004cc:
000004cf: R0 := 1
000004d7: mem := mem with [R19 + 0x70] <- 7:0[R0]
00000807: goto %00000339

00000339:
00000343: R19 := mem[R31 + 0x10, el]:u64
0000034a: R29 := mem[R31, el]:u64
0000034f: R30 := mem[R31 + 8, el]:u64
00000353: R31 := R31 + 0x20
00000358: call R30 with noreturn

00000808: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000822: __libc_start_main_main :: in u64 = R0
00000823: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000824: __libc_start_main_arg3 :: in out u64 = R2
00000825: __libc_start_main_auxv :: in out u64 = R3
00000826: __libc_start_main_result :: out u32 = low:32[R0]

00000260:
00000657: R16 := 0x20000
0000065e: R17 := mem[R16 + 0x10, el]:u64
00000664: R16 := R16 + 0x10
00000669: call R17 with noreturn

00000809: sub _fini(_fini_result)
00000827: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000080a: sub _init(_init_result)
00000828: _init_result :: out u32 = low:32[R0]

0000071f:
00000725: #7 := R31 - 0x10
0000072b: mem := mem with [#7, el]:u64 <- R29
00000731: mem := mem with [#7 + 8, el]:u64 <- R30
00000735: R31 := #7
0000073b: R29 := R31
00000740: R30 := 0x768
00000742: call @call_weak_fn with return %00000744

00000744:
00000749: R29 := mem[R31, el]:u64
0000074e: R30 := mem[R31 + 8, el]:u64
00000752: R31 := R31 + 0x10
00000757: call R30 with noreturn

0000080b: sub _start(_start_result)
00000829: _start_result :: out u32 = low:32[R0]

00000221:
00000226: R29 := 0
0000022b: R30 := 0
00000231: R5 := R0
00000238: R1 := mem[R31, el]:u64
0000023e: R2 := R31 + 8
00000244: R6 := R31
00000249: R0 := 0x1F000
00000250: R0 := mem[R0 + 0xFD8, el]:u64
00000255: R3 := 0
0000025a: R4 := 0
0000025f: R30 := 0x870
00000262: call @__libc_start_main with return %00000264

00000264:
00000267: R30 := 0x874
0000026a: call @abort with return %0000080c

0000080c:
0000080d: call @call_weak_fn with noreturn

0000080e: sub abort()


00000268:
000006c5: R16 := 0x20000
000006cc: R17 := mem[R16 + 0x38, el]:u64
000006d2: R16 := R16 + 0x38
000006d7: call R17 with noreturn

0000080f: sub call_weak_fn(call_weak_fn_result)
0000082a: call_weak_fn_result :: out u32 = low:32[R0]

0000026c:
0000026f: R0 := 0x1F000
00000276: R0 := mem[R0 + 0xFC0, el]:u64
0000027c: when R0 = 0 goto %0000027a
00000810: goto %00000529

0000027a:
00000282: call R30 with noreturn

00000529:
0000052c: goto @__gmon_start__

0000052a:
000006af: R16 := 0x20000
000006b6: R17 := mem[R16 + 0x30, el]:u64
000006bc: R16 := R16 + 0x30
000006c1: call R17 with noreturn

00000811: sub deregister_tm_clones(deregister_tm_clones_result)
0000082b: deregister_tm_clones_result :: out u32 = low:32[R0]

00000288:
0000028b: R0 := 0x20000
00000291: R0 := R0 + 0x70
00000296: R1 := 0x20000
0000029c: R1 := R1 + 0x70
000002a2: #1 := ~R0
000002a7: #2 := R1 + ~R0
000002ad: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002b3: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002b7: ZF := #2 + 1 = 0
000002bb: NF := 63:63[#2 + 1]
000002c1: when ZF goto %000002bf
00000812: goto %0000050b

0000050b:
0000050e: R1 := 0x1F000
00000515: R1 := mem[R1 + 0xFB0, el]:u64
0000051a: when R1 = 0 goto %000002bf
00000813: goto %0000051e

000002bf:
000002c7: call R30 with noreturn

0000051e:
00000522: R16 := R1
00000527: call R16 with noreturn

00000814: sub frame_dummy(frame_dummy_result)
0000082c: frame_dummy_result :: out u32 = low:32[R0]

0000035e:
00000360: call @register_tm_clones with noreturn

00000815: sub free(free_ptr)
0000082d: free_ptr :: in out u64 = R0

0000048e:
000006f1: R16 := 0x20000
000006f8: R17 := mem[R16 + 0x48, el]:u64
000006fe: R16 := R16 + 0x48
00000703: call R17 with noreturn

00000816: sub main(main_argc, main_argv, main_result)
0000082e: main_argc :: in u32 = low:32[R0]
0000082f: main_argv :: in out u64 = R1
00000830: main_result :: out u32 = low:32[R0]

00000362:
00000366: R31 := R31 - 0x40
0000036c: #4 := R31 + 0x30
00000372: mem := mem with [#4, el]:u64 <- R29
00000378: mem := mem with [#4 + 8, el]:u64 <- R30
0000037e: R29 := R31 + 0x30
00000383: R8 := 0x1F000
0000038a: R8 := mem[R8 + 0xFC8, el]:u64
00000392: mem := mem with [R31 + 0x18, el]:u64 <- R8
00000399: mem := mem with [R29 - 8, el]:u64 <- 0
000003a0: mem := mem with [R29 - 0x10, el]:u64 <- 0
000003a5: R0 := 0xB
000003aa: R30 := 0x97C
000003ad: call @malloc with return %000003af

000003af:
000003b4: R8 := mem[R31 + 0x18, el]:u64
000003bc: mem := mem with [R8, el]:u64 <- R0
000003c3: R8 := mem[R8, el]:u64
000003cb: mem := mem with [R31 + 8, el]:u64 <- R8
000003d0: R0 := 0x1F000
000003d7: R0 := mem[R0 + 0xFD0, el]:u64
000003df: mem := mem with [R31, el]:u64 <- R0
000003e4: R30 := 0x99C
000003e7: call @strlen with return %000003e9

000003e9:
000003ee: R1 := mem[R31, el]:u64
000003f4: R2 := R0
000003fb: R0 := mem[R31 + 8, el]:u64
00000400: R30 := 0x9AC
00000403: call @memcpy with return %00000405

00000405:
0000040a: R8 := mem[R31 + 0x18, el]:u64
00000411: R0 := mem[R8, el]:u64
00000416: R30 := 0x9B8
00000419: call @puts with return %0000041b

0000041b:
00000420: R8 := mem[R31 + 0x18, el]:u64
00000427: R9 := mem[R8, el]:u64
0000042d: R9 := R9 + 4
00000435: mem := mem with [R29 - 8, el]:u64 <- R9
0000043c: R9 := mem[R29 - 8, el]:u64
00000443: mem := mem with [R9] <- 0
0000044a: R9 := mem[R8, el]:u64
00000452: mem := mem with [R31 + 0x10, el]:u64 <- R9
00000459: R0 := mem[R8, el]:u64
0000045e: R30 := 0x9E0
00000460: call @strlen with return %00000462

00000462:
00000466: R2 := R0
0000046d: R0 := mem[R31 + 0x10, el]:u64
00000472: R1 := 1
00000477: R30 := 0x9F0
0000047a: call @memset with return %0000047c

0000047c:
00000481: R8 := mem[R31 + 0x18, el]:u64
00000488: R0 := mem[R8, el]:u64
0000048d: R30 := 0x9FC
00000490: call @free with return %00000492

00000492:
00000495: R0 := 0
0000049b: #5 := R31 + 0x30
000004a0: R29 := mem[#5, el]:u64
000004a5: R30 := mem[#5 + 8, el]:u64
000004ab: R31 := R31 + 0x40
000004b0: call R30 with noreturn

00000817: sub malloc(malloc_size, malloc_result)
00000831: malloc_size :: in u64 = R0
00000832: malloc_result :: out u64 = R0

000003ab:
00000683: R16 := 0x20000
0000068a: R17 := mem[R16 + 0x20, el]:u64
00000690: R16 := R16 + 0x20
00000695: call R17 with noreturn

00000818: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
00000833: memcpy_dst :: in out u64 = R0
00000834: memcpy_src :: in out u64 = R1
00000835: memcpy_n :: in u64 = R2
00000836: memcpy_result :: out u64 = R0

00000401:
0000062b: R16 := 0x20000
00000632: R17 := mem[R16, el]:u64
00000638: R16 := R16
0000063d: call R17 with noreturn

00000819: sub memset(memset_buf, memset_c, memset_n, memset_result)
00000837: memset_buf :: in out u64 = R0
00000838: memset_c :: in u32 = low:32[R1]
00000839: memset_n :: in u64 = R2
0000083a: memset_result :: out u64 = R0

00000478:
00000699: R16 := 0x20000
000006a0: R17 := mem[R16 + 0x28, el]:u64
000006a6: R16 := R16 + 0x28
000006ab: call R17 with noreturn

0000081a: sub puts(puts_s, puts_result)
0000083b: puts_s :: in u64 = R0
0000083c: puts_result :: out u32 = low:32[R0]

00000417:
000006db: R16 := 0x20000
000006e2: R17 := mem[R16 + 0x40, el]:u64
000006e8: R16 := R16 + 0x40
000006ed: call R17 with noreturn

0000081b: sub register_tm_clones(register_tm_clones_result)
0000083d: register_tm_clones_result :: out u32 = low:32[R0]

000002c9:
000002cc: R0 := 0x20000
000002d2: R0 := R0 + 0x70
000002d7: R1 := 0x20000
000002dd: R1 := R1 + 0x70
000002e4: R1 := R1 + ~R0 + 1
000002ea: R2 := 0.63:63[R1]
000002f1: R1 := R2 + (R1 ~>> 3)
000002f7: R1 := extend:64[63:1[R1]]
000002fd: when R1 = 0 goto %000002fb
0000081c: goto %000004ed

000004ed:
000004f0: R2 := 0x1F000
000004f7: R2 := mem[R2 + 0xFE0, el]:u64
000004fc: when R2 = 0 goto %000002fb
0000081d: goto %00000500

000002fb:
00000303: call R30 with noreturn

00000500:
00000504: R16 := R2
00000509: call R16 with noreturn

0000081e: sub strlen(strlen_s, strlen_result)
0000083e: strlen_s :: in u64 = R0
0000083f: strlen_result :: out u64 = R0

000003e5:
00000641: R16 := 0x20000
00000648: R17 := mem[R16 + 8, el]:u64
0000064e: R16 := R16 + 8
00000653: call R17 with noreturn
