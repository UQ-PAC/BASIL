0000087b: program
00000834: sub __cxa_finalize(__cxa_finalize_result)
0000087c: __cxa_finalize_result :: out u32 = low:32[R0]

00000514:
00000698: R16 := 0x20000
0000069f: R17 := mem[R16 + 0x18, el]:u64
000006a5: R16 := R16 + 0x18
000006aa: call R17 with noreturn

00000835: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000087d: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000031f:
00000323: #3 := R31 - 0x20
00000329: mem := mem with [#3, el]:u64 <- R29
0000032f: mem := mem with [#3 + 8, el]:u64 <- R30
00000333: R31 := #3
00000339: R29 := R31
00000341: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000346: R19 := 0x20000
0000034d: R0 := pad:64[mem[R19 + 0x78]]
00000353: when 0:0[R0] goto %00000351
00000871: goto %000004dd

000004dd:
000004e0: R0 := 0x1F000
000004e7: R0 := mem[R0 + 0xFC8, el]:u64
000004ed: when R0 = 0 goto %000004eb
00000872: goto %00000504

00000504:
00000507: R0 := 0x20000
0000050e: R0 := mem[R0 + 0x58, el]:u64
00000513: R30 := 0x8B0
00000516: call @__cxa_finalize with return %000004eb

000004eb:
000004f3: R30 := 0x8B4
000004f5: call @deregister_tm_clones with return %000004f7

000004f7:
000004fa: R0 := 1
00000502: mem := mem with [R19 + 0x78] <- 7:0[R0]
00000873: goto %00000351

00000351:
0000035b: R19 := mem[R31 + 0x10, el]:u64
00000362: R29 := mem[R31, el]:u64
00000367: R30 := mem[R31 + 8, el]:u64
0000036b: R31 := R31 + 0x20
00000370: call R30 with noreturn

00000839: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000087e: __libc_start_main_main :: in u64 = R0
0000087f: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000880: __libc_start_main_arg3 :: in out u64 = R2
00000881: __libc_start_main_auxv :: in out u64 = R3
00000882: __libc_start_main_result :: out u32 = low:32[R0]

00000278:
00000682: R16 := 0x20000
00000689: R17 := mem[R16 + 0x10, el]:u64
0000068f: R16 := R16 + 0x10
00000694: call R17 with noreturn

0000083a: sub _fini(_fini_result)
00000883: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000083b: sub _init(_init_result)
00000884: _init_result :: out u32 = low:32[R0]

0000074a:
00000750: #6 := R31 - 0x10
00000756: mem := mem with [#6, el]:u64 <- R29
0000075c: mem := mem with [#6 + 8, el]:u64 <- R30
00000760: R31 := #6
00000766: R29 := R31
0000076b: R30 := 0x6E8
0000076d: call @call_weak_fn with return %0000076f

0000076f:
00000774: R29 := mem[R31, el]:u64
00000779: R30 := mem[R31 + 8, el]:u64
0000077d: R31 := R31 + 0x10
00000782: call R30 with noreturn

0000083c: sub _start(_start_result)
00000885: _start_result :: out u32 = low:32[R0]

00000239:
0000023e: R29 := 0
00000243: R30 := 0
00000249: R5 := R0
00000250: R1 := mem[R31, el]:u64
00000256: R2 := R31 + 8
0000025c: R6 := R31
00000261: R0 := 0x1F000
00000268: R0 := mem[R0 + 0xFD8, el]:u64
0000026d: R3 := 0
00000272: R4 := 0
00000277: R30 := 0x7F0
0000027a: call @__libc_start_main with return %0000027c

0000027c:
0000027f: R30 := 0x7F4
00000282: call @abort with return %00000874

00000874:
00000875: call @call_weak_fn with noreturn

0000083f: sub abort()


00000280:
000006f0: R16 := 0x20000
000006f7: R17 := mem[R16 + 0x38, el]:u64
000006fd: R16 := R16 + 0x38
00000702: call R17 with noreturn

00000840: sub call_weak_fn(call_weak_fn_result)
00000886: call_weak_fn_result :: out u32 = low:32[R0]

00000284:
00000287: R0 := 0x1F000
0000028e: R0 := mem[R0 + 0xFD0, el]:u64
00000294: when R0 = 0 goto %00000292
00000876: goto %00000554

00000292:
0000029a: call R30 with noreturn

00000554:
00000557: goto @__gmon_start__

00000555:
000006da: R16 := 0x20000
000006e1: R17 := mem[R16 + 0x30, el]:u64
000006e7: R16 := R16 + 0x30
000006ec: call R17 with noreturn

00000842: sub deregister_tm_clones(deregister_tm_clones_result)
00000887: deregister_tm_clones_result :: out u32 = low:32[R0]

000002a0:
000002a3: R0 := 0x20000
000002a9: R0 := R0 + 0x78
000002ae: R1 := 0x20000
000002b4: R1 := R1 + 0x78
000002ba: #1 := ~R0
000002bf: #2 := R1 + ~R0
000002c5: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002cb: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002cf: ZF := #2 + 1 = 0
000002d3: NF := 63:63[#2 + 1]
000002d9: when ZF goto %000002d7
00000877: goto %00000536

00000536:
00000539: R1 := 0x1F000
00000540: R1 := mem[R1 + 0xFC0, el]:u64
00000545: when R1 = 0 goto %000002d7
00000878: goto %00000549

000002d7:
000002df: call R30 with noreturn

00000549:
0000054d: R16 := R1
00000552: call R16 with noreturn

00000845: sub frame_dummy(frame_dummy_result)
00000888: frame_dummy_result :: out u32 = low:32[R0]

00000376:
00000378: call @register_tm_clones with noreturn

00000846: sub free(free_ptr)
00000889: free_ptr :: in out u64 = R0

000004b8:
0000071c: R16 := 0x20000
00000723: R17 := mem[R16 + 0x48, el]:u64
00000729: R16 := R16 + 0x48
0000072e: call R17 with noreturn

00000847: sub main(main_argc, main_argv, main_result)
0000088a: main_argc :: in u32 = low:32[R0]
0000088b: main_argv :: in out u64 = R1
0000088c: main_result :: out u32 = low:32[R0]

0000037a:
0000037e: #4 := R31 - 0x30
00000384: mem := mem with [#4, el]:u64 <- R29
0000038a: mem := mem with [#4 + 8, el]:u64 <- R30
0000038e: R31 := #4
00000394: R29 := R31
0000039c: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003a3: mem := mem with [R31 + 0x28, el]:u64 <- 0
000003aa: mem := mem with [R31 + 0x20, el]:u64 <- 0
000003af: R0 := 0xB
000003b4: R30 := 0x8F0
000003b7: call @malloc with return %000003b9

000003b9:
000003bd: R1 := R0
000003c2: R0 := 0x20000
000003c8: R0 := R0 + 0x80
000003d0: mem := mem with [R0, el]:u64 <- R1
000003d5: R0 := 0x20000
000003db: R0 := R0 + 0x80
000003e2: R19 := mem[R0, el]:u64
000003e7: R0 := 0x20000
000003ed: R0 := R0 + 0x68
000003f2: R30 := 0x918
000003f5: call @strlen with return %000003f7

000003f7:
000003fb: R2 := R0
00000400: R0 := 0x20000
00000406: R1 := R0 + 0x68
0000040c: R0 := R19
00000411: R30 := 0x92C
00000414: call @memcpy with return %00000416

00000416:
00000419: R0 := 0x20000
0000041f: R0 := R0 + 0x80
00000426: R0 := mem[R0, el]:u64
0000042b: R30 := 0x93C
0000042e: call @puts with return %00000430

00000430:
00000433: R0 := 0x20000
00000439: R0 := R0 + 0x80
00000440: R0 := mem[R0, el]:u64
00000446: R0 := R0 + 4
0000044e: mem := mem with [R31 + 0x28, el]:u64 <- R0
00000455: R0 := mem[R31 + 0x28, el]:u64
0000045c: mem := mem with [R0] <- 0
00000461: R0 := 0x20000
00000467: R0 := R0 + 0x80
0000046e: R19 := mem[R0, el]:u64
00000473: R0 := 0x20000
00000479: R0 := R0 + 0x80
00000480: R0 := mem[R0, el]:u64
00000485: R30 := 0x974
00000487: call @strlen with return %00000489

00000489:
0000048d: R2 := R0
00000492: R1 := 1
00000498: R0 := R19
0000049d: R30 := 0x984
000004a0: call @memset with return %000004a2

000004a2:
000004a5: R0 := 0x20000
000004ab: R0 := R0 + 0x80
000004b2: R0 := mem[R0, el]:u64
000004b7: R30 := 0x994
000004ba: call @free with return %000004bc

000004bc:
000004bf: R0 := 0
000004c6: R19 := mem[R31 + 0x10, el]:u64
000004cd: R29 := mem[R31, el]:u64
000004d2: R30 := mem[R31 + 8, el]:u64
000004d6: R31 := R31 + 0x30
000004db: call R30 with noreturn

00000848: sub malloc(malloc_size, malloc_result)
0000088d: malloc_size :: in u64 = R0
0000088e: malloc_result :: out u64 = R0

000003b5:
000006ae: R16 := 0x20000
000006b5: R17 := mem[R16 + 0x20, el]:u64
000006bb: R16 := R16 + 0x20
000006c0: call R17 with noreturn

00000849: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
0000088f: memcpy_dst :: in out u64 = R0
00000890: memcpy_src :: in out u64 = R1
00000891: memcpy_n :: in u64 = R2
00000892: memcpy_result :: out u64 = R0

00000412:
00000656: R16 := 0x20000
0000065d: R17 := mem[R16, el]:u64
00000663: R16 := R16
00000668: call R17 with noreturn

0000084a: sub memset(memset_buf, memset_c, memset_n, memset_result)
00000893: memset_buf :: in out u64 = R0
00000894: memset_c :: in u32 = low:32[R1]
00000895: memset_n :: in u64 = R2
00000896: memset_result :: out u64 = R0

0000049e:
000006c4: R16 := 0x20000
000006cb: R17 := mem[R16 + 0x28, el]:u64
000006d1: R16 := R16 + 0x28
000006d6: call R17 with noreturn

0000084b: sub puts(puts_s, puts_result)
00000897: puts_s :: in u64 = R0
00000898: puts_result :: out u32 = low:32[R0]

0000042c:
00000706: R16 := 0x20000
0000070d: R17 := mem[R16 + 0x40, el]:u64
00000713: R16 := R16 + 0x40
00000718: call R17 with noreturn

0000084c: sub register_tm_clones(register_tm_clones_result)
00000899: register_tm_clones_result :: out u32 = low:32[R0]

000002e1:
000002e4: R0 := 0x20000
000002ea: R0 := R0 + 0x78
000002ef: R1 := 0x20000
000002f5: R1 := R1 + 0x78
000002fc: R1 := R1 + ~R0 + 1
00000302: R2 := 0.63:63[R1]
00000309: R1 := R2 + (R1 ~>> 3)
0000030f: R1 := extend:64[63:1[R1]]
00000315: when R1 = 0 goto %00000313
00000879: goto %00000518

00000518:
0000051b: R2 := 0x1F000
00000522: R2 := mem[R2 + 0xFE0, el]:u64
00000527: when R2 = 0 goto %00000313
0000087a: goto %0000052b

00000313:
0000031b: call R30 with noreturn

0000052b:
0000052f: R16 := R2
00000534: call R16 with noreturn

0000084f: sub strlen(strlen_s, strlen_result)
0000089a: strlen_s :: in u64 = R0
0000089b: strlen_result :: out u64 = R0

000003f3:
0000066c: R16 := 0x20000
00000673: R17 := mem[R16 + 8, el]:u64
00000679: R16 := R16 + 8
0000067e: call R17 with noreturn
