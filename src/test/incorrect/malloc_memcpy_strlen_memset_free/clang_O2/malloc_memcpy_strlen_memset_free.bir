00000819: program
000007fd: sub __cxa_finalize(__cxa_finalize_result)
0000081a: __cxa_finalize_result :: out u32 = low:32[R0]

0000047f:
00000603: R16 := 0x20000
0000060a: R17 := mem[R16 + 0x18, el]:u64
00000610: R16 := R16 + 0x18
00000615: call R17 with noreturn

000007fe: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000081b: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002db:
000002df: #3 := R31 - 0x20
000002e5: mem := mem with [#3, el]:u64 <- R29
000002eb: mem := mem with [#3 + 8, el]:u64 <- R30
000002ef: R31 := #3
000002f5: R29 := R31
000002fd: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000302: R19 := 0x20000
00000309: R0 := pad:64[mem[R19 + 0x70]]
0000030f: when 0:0[R0] goto %0000030d
000007ff: goto %00000448

00000448:
0000044b: R0 := 0x1F000
00000452: R0 := mem[R0 + 0xFC8, el]:u64
00000458: when R0 = 0 goto %00000456
00000800: goto %0000046f

0000046f:
00000472: R0 := 0x20000
00000479: R0 := mem[R0 + 0x58, el]:u64
0000047e: R30 := 0x8F0
00000481: call @__cxa_finalize with return %00000456

00000456:
0000045e: R30 := 0x8F4
00000460: call @deregister_tm_clones with return %00000462

00000462:
00000465: R0 := 1
0000046d: mem := mem with [R19 + 0x70] <- 7:0[R0]
00000801: goto %0000030d

0000030d:
00000317: R19 := mem[R31 + 0x10, el]:u64
0000031e: R29 := mem[R31, el]:u64
00000323: R30 := mem[R31 + 8, el]:u64
00000327: R31 := R31 + 0x20
0000032c: call R30 with noreturn

00000802: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000081c: __libc_start_main_main :: in u64 = R0
0000081d: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000081e: __libc_start_main_arg3 :: in out u64 = R2
0000081f: __libc_start_main_auxv :: in out u64 = R3
00000820: __libc_start_main_result :: out u32 = low:32[R0]

00000234:
000005ed: R16 := 0x20000
000005f4: R17 := mem[R16 + 0x10, el]:u64
000005fa: R16 := R16 + 0x10
000005ff: call R17 with noreturn

00000803: sub _fini(_fini_result)
00000821: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000804: sub _init(_init_result)
00000822: _init_result :: out u32 = low:32[R0]

00000724:
0000072a: #8 := R31 - 0x10
00000730: mem := mem with [#8, el]:u64 <- R29
00000736: mem := mem with [#8 + 8, el]:u64 <- R30
0000073a: R31 := #8
00000740: R29 := R31
00000745: R30 := 0x738
00000747: call @call_weak_fn with return %00000749

00000749:
0000074e: R29 := mem[R31, el]:u64
00000753: R30 := mem[R31 + 8, el]:u64
00000757: R31 := R31 + 0x10
0000075c: call R30 with noreturn

00000805: sub _start(_start_result)
00000823: _start_result :: out u32 = low:32[R0]

000001f5:
000001fa: R29 := 0
000001ff: R30 := 0
00000205: R5 := R0
0000020c: R1 := mem[R31, el]:u64
00000212: R2 := R31 + 8
00000218: R6 := R31
0000021d: R0 := 0x1F000
00000224: R0 := mem[R0 + 0xFD8, el]:u64
00000229: R3 := 0
0000022e: R4 := 0
00000233: R30 := 0x830
00000236: call @__libc_start_main with return %00000238

00000238:
0000023b: R30 := 0x834
0000023e: call @abort with return %00000806

00000806:
00000807: call @call_weak_fn with noreturn

00000808: sub abort()


0000023c:
0000065b: R16 := 0x20000
00000662: R17 := mem[R16 + 0x38, el]:u64
00000668: R16 := R16 + 0x38
0000066d: call R17 with noreturn

00000809: sub call_weak_fn(call_weak_fn_result)
00000824: call_weak_fn_result :: out u32 = low:32[R0]

00000240:
00000243: R0 := 0x1F000
0000024a: R0 := mem[R0 + 0xFD0, el]:u64
00000250: when R0 = 0 goto %0000024e
0000080a: goto %000004bf

0000024e:
00000256: call R30 with noreturn

000004bf:
000004c2: goto @__gmon_start__

000004c0:
00000645: R16 := 0x20000
0000064c: R17 := mem[R16 + 0x30, el]:u64
00000652: R16 := R16 + 0x30
00000657: call R17 with noreturn

0000080b: sub deregister_tm_clones(deregister_tm_clones_result)
00000825: deregister_tm_clones_result :: out u32 = low:32[R0]

0000025c:
0000025f: R0 := 0x20000
00000265: R0 := R0 + 0x70
0000026a: R1 := 0x20000
00000270: R1 := R1 + 0x70
00000276: #1 := ~R0
0000027b: #2 := R1 + ~R0
00000281: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000287: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000028b: ZF := #2 + 1 = 0
0000028f: NF := 63:63[#2 + 1]
00000295: when ZF goto %00000293
0000080c: goto %000004a1

000004a1:
000004a4: R1 := 0x1F000
000004ab: R1 := mem[R1 + 0xFC0, el]:u64
000004b0: when R1 = 0 goto %00000293
0000080d: goto %000004b4

00000293:
0000029b: call R30 with noreturn

000004b4:
000004b8: R16 := R1
000004bd: call R16 with noreturn

0000080e: sub frame_dummy(frame_dummy_result)
00000826: frame_dummy_result :: out u32 = low:32[R0]

00000332:
00000334: call @register_tm_clones with noreturn

0000080f: sub free(free_ptr)
00000827: free_ptr :: in out u64 = R0

00000413:
00000687: R16 := 0x20000
0000068e: R17 := mem[R16 + 0x48, el]:u64
00000694: R16 := R16 + 0x48
00000699: call R17 with noreturn

00000810: sub main(main_argc, main_argv, main_result)
00000828: main_argc :: in u32 = low:32[R0]
00000829: main_argv :: in out u64 = R1
0000082a: main_result :: out u32 = low:32[R0]

00000336:
0000033a: #4 := R31 - 0x30
00000340: mem := mem with [#4, el]:u64 <- R29
00000346: mem := mem with [#4 + 8, el]:u64 <- R30
0000034a: R31 := #4
00000352: mem := mem with [R31 + 0x10, el]:u64 <- R21
00000358: #5 := R31 + 0x20
0000035e: mem := mem with [#5, el]:u64 <- R20
00000364: mem := mem with [#5 + 8, el]:u64 <- R19
0000036a: R29 := R31
0000036f: R0 := 0xB
00000374: R30 := 0x92C
00000377: call @malloc with return %00000379

00000379:
0000037c: R21 := 0x20000
00000381: R20 := 0x20000
00000387: R20 := R20 + 0x61
0000038d: R19 := R0
00000395: mem := mem with [R21 + 0x78, el]:u64 <- R0
0000039b: R0 := R20
000003a0: R30 := 0x948
000003a3: call @strlen with return %000003a5

000003a5:
000003a9: R2 := R0
000003af: R0 := R19
000003b5: R1 := R20
000003ba: R30 := 0x958
000003bd: call @memcpy with return %000003bf

000003bf:
000003c3: R0 := R19
000003c8: R30 := 0x960
000003cb: call @puts with return %000003cd

000003cd:
000003d2: R8 := mem[R21 + 0x78, el]:u64
000003d9: mem := mem with [R8 + 4] <- 0
000003e0: R19 := mem[R21 + 0x78, el]:u64
000003e6: R0 := R19
000003eb: R30 := 0x974
000003ed: call @strlen with return %000003ef

000003ef:
000003f3: R2 := R0
000003f9: R0 := R19
000003fe: R1 := 1
00000403: R30 := 0x984
00000406: call @memset with return %00000408

00000408:
0000040d: R0 := mem[R21 + 0x78, el]:u64
00000412: R30 := 0x98C
00000415: call @free with return %00000417

00000417:
0000041a: R0 := 0
00000420: #6 := R31 + 0x20
00000425: R20 := mem[#6, el]:u64
0000042a: R19 := mem[#6 + 8, el]:u64
00000431: R21 := mem[R31 + 0x10, el]:u64
00000438: R29 := mem[R31, el]:u64
0000043d: R30 := mem[R31 + 8, el]:u64
00000441: R31 := R31 + 0x30
00000446: call R30 with noreturn

00000811: sub malloc(malloc_size, malloc_result)
0000082b: malloc_size :: in u64 = R0
0000082c: malloc_result :: out u64 = R0

00000375:
00000619: R16 := 0x20000
00000620: R17 := mem[R16 + 0x20, el]:u64
00000626: R16 := R16 + 0x20
0000062b: call R17 with noreturn

00000812: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
0000082d: memcpy_dst :: in out u64 = R0
0000082e: memcpy_src :: in out u64 = R1
0000082f: memcpy_n :: in u64 = R2
00000830: memcpy_result :: out u64 = R0

000003bb:
000005c1: R16 := 0x20000
000005c8: R17 := mem[R16, el]:u64
000005ce: R16 := R16
000005d3: call R17 with noreturn

00000813: sub memset(memset_buf, memset_c, memset_n, memset_result)
00000831: memset_buf :: in out u64 = R0
00000832: memset_c :: in u32 = low:32[R1]
00000833: memset_n :: in u64 = R2
00000834: memset_result :: out u64 = R0

00000404:
0000062f: R16 := 0x20000
00000636: R17 := mem[R16 + 0x28, el]:u64
0000063c: R16 := R16 + 0x28
00000641: call R17 with noreturn

00000814: sub puts(puts_s, puts_result)
00000835: puts_s :: in u64 = R0
00000836: puts_result :: out u32 = low:32[R0]

000003c9:
00000671: R16 := 0x20000
00000678: R17 := mem[R16 + 0x40, el]:u64
0000067e: R16 := R16 + 0x40
00000683: call R17 with noreturn

00000815: sub register_tm_clones(register_tm_clones_result)
00000837: register_tm_clones_result :: out u32 = low:32[R0]

0000029d:
000002a0: R0 := 0x20000
000002a6: R0 := R0 + 0x70
000002ab: R1 := 0x20000
000002b1: R1 := R1 + 0x70
000002b8: R1 := R1 + ~R0 + 1
000002be: R2 := 0.63:63[R1]
000002c5: R1 := R2 + (R1 ~>> 3)
000002cb: R1 := extend:64[63:1[R1]]
000002d1: when R1 = 0 goto %000002cf
00000816: goto %00000483

00000483:
00000486: R2 := 0x1F000
0000048d: R2 := mem[R2 + 0xFE0, el]:u64
00000492: when R2 = 0 goto %000002cf
00000817: goto %00000496

000002cf:
000002d7: call R30 with noreturn

00000496:
0000049a: R16 := R2
0000049f: call R16 with noreturn

00000818: sub strlen(strlen_s, strlen_result)
00000838: strlen_s :: in u64 = R0
00000839: strlen_result :: out u64 = R0

000003a1:
000005d7: R16 := 0x20000
000005de: R17 := mem[R16 + 8, el]:u64
000005e4: R16 := R16 + 8
000005e9: call R17 with noreturn
