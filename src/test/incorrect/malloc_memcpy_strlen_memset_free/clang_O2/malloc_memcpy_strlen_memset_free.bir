000007d5: program
0000078e: sub __cxa_finalize(__cxa_finalize_result)
000007d6: __cxa_finalize_result :: out u32 = low:32[R0]

0000047f:
00000603: R16 := 0x11000
0000060a: R17 := mem[R16 + 0x18, el]:u64
00000610: R16 := R16 + 0x18
00000615: call R17 with noreturn

0000078f: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000007d7: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002da:
000002de: #3 := R31 - 0x20
000002e4: mem := mem with [#3, el]:u64 <- R29
000002ea: mem := mem with [#3 + 8, el]:u64 <- R30
000002ee: R31 := #3
000002f4: R29 := R31
000002fc: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000301: R19 := 0x11000
00000308: R0 := pad:64[mem[R19 + 0x70]]
0000030f: when 31:0[R0] <> 0 goto %0000030d
000007cb: goto %00000448

00000448:
0000044b: R0 := 0x10000
00000452: R0 := mem[R0 + 0xFC8, el]:u64
00000458: when R0 = 0 goto %00000456
000007cc: goto %0000046f

0000046f:
00000472: R0 := 0x11000
00000479: R0 := mem[R0 + 0x58, el]:u64
0000047e: R30 := 0x8B0
00000481: call @__cxa_finalize with return %00000456

00000456:
0000045e: R30 := 0x8B4
00000460: call @deregister_tm_clones with return %00000462

00000462:
00000465: R0 := 1
0000046d: mem := mem with [R19 + 0x70] <- 7:0[R0]
000007cd: goto %0000030d

0000030d:
00000317: R19 := mem[R31 + 0x10, el]:u64
0000031e: R29 := mem[R31, el]:u64
00000323: R30 := mem[R31 + 8, el]:u64
00000327: R31 := R31 + 0x20
0000032c: call R30 with noreturn

00000793: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000007d8: __libc_start_main_main :: in u64 = R0
000007d9: __libc_start_main_arg2 :: in u32 = low:32[R1]
000007da: __libc_start_main_arg3 :: in out u64 = R2
000007db: __libc_start_main_auxv :: in out u64 = R3
000007dc: __libc_start_main_result :: out u32 = low:32[R0]

00000233:
000005ed: R16 := 0x11000
000005f4: R17 := mem[R16 + 0x10, el]:u64
000005fa: R16 := R16 + 0x10
000005ff: call R17 with noreturn

00000794: sub _fini(_fini_result)
000007dd: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000795: sub _init(_init_result)
000007de: _init_result :: out u32 = low:32[R0]

000006b5:
000006bb: #8 := R31 - 0x10
000006c1: mem := mem with [#8, el]:u64 <- R29
000006c7: mem := mem with [#8 + 8, el]:u64 <- R30
000006cb: R31 := #8
000006d1: R29 := R31
000006d6: R30 := 0x6E8
000006d8: call @call_weak_fn with return %000006da

000006da:
000006df: R29 := mem[R31, el]:u64
000006e4: R30 := mem[R31 + 8, el]:u64
000006e8: R31 := R31 + 0x10
000006ed: call R30 with noreturn

00000796: sub _start(_start_result)
000007df: _start_result :: out u32 = low:32[R0]

000001f4:
000001f9: R29 := 0
000001fe: R30 := 0
00000204: R5 := R0
0000020b: R1 := mem[R31, el]:u64
00000211: R2 := R31 + 8
00000217: R6 := R31
0000021c: R0 := 0x10000
00000223: R0 := mem[R0 + 0xFD8, el]:u64
00000228: R3 := 0
0000022d: R4 := 0
00000232: R30 := 0x7F0
00000235: call @__libc_start_main with return %00000237

00000237:
0000023a: R30 := 0x7F4
0000023d: call @abort with return %000007ce

000007ce:
000007cf: call @call_weak_fn with noreturn

00000799: sub abort()


0000023b:
0000065b: R16 := 0x11000
00000662: R17 := mem[R16 + 0x38, el]:u64
00000668: R16 := R16 + 0x38
0000066d: call R17 with noreturn

0000079a: sub call_weak_fn(call_weak_fn_result)
000007e0: call_weak_fn_result :: out u32 = low:32[R0]

0000023f:
00000242: R0 := 0x10000
00000249: R0 := mem[R0 + 0xFD0, el]:u64
0000024f: when R0 = 0 goto %0000024d
000007d0: goto %000004bf

0000024d:
00000255: call R30 with noreturn

000004bf:
000004c2: goto @__gmon_start__

000004c0:
00000645: R16 := 0x11000
0000064c: R17 := mem[R16 + 0x30, el]:u64
00000652: R16 := R16 + 0x30
00000657: call R17 with noreturn

0000079c: sub deregister_tm_clones(deregister_tm_clones_result)
000007e1: deregister_tm_clones_result :: out u32 = low:32[R0]

0000025b:
0000025e: R0 := 0x11000
00000264: R0 := R0 + 0x70
00000269: R1 := 0x11000
0000026f: R1 := R1 + 0x70
00000275: #1 := ~R0
0000027a: #2 := R1 + ~R0
00000280: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000286: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000028a: ZF := #2 + 1 = 0
0000028e: NF := 63:63[#2 + 1]
00000294: when ZF goto %00000292
000007d1: goto %000004a1

000004a1:
000004a4: R1 := 0x10000
000004ab: R1 := mem[R1 + 0xFC0, el]:u64
000004b0: when R1 = 0 goto %00000292
000007d2: goto %000004b4

00000292:
0000029a: call R30 with noreturn

000004b4:
000004b8: R16 := R1
000004bd: call R16 with noreturn

0000079f: sub frame_dummy(frame_dummy_result)
000007e2: frame_dummy_result :: out u32 = low:32[R0]

00000332:
00000334: call @register_tm_clones with noreturn

000007a0: sub free(free_ptr)
000007e3: free_ptr :: in out u64 = R0

00000413:
00000687: R16 := 0x11000
0000068e: R17 := mem[R16 + 0x48, el]:u64
00000694: R16 := R16 + 0x48
00000699: call R17 with noreturn

000007a1: sub main(main_argc, main_argv, main_result)
000007e4: main_argc :: in u32 = low:32[R0]
000007e5: main_argv :: in out u64 = R1
000007e6: main_result :: out u32 = low:32[R0]

00000336:
0000033a: #4 := R31 - 0x30
00000340: mem := mem with [#4, el]:u64 <- R29
00000346: mem := mem with [#4 + 8, el]:u64 <- R30
0000034a: R31 := #4
00000352: mem := mem with [R31 + 0x10, el]:u64 <- R21
00000358: #5 := R31 + 0x20
0000035e: mem := mem with [#5, el]:u64 <- R20
00000364: mem := mem with [#5 + 8, el]:u64 <- R19
0000036a: R29 := R31
0000036f: R0 := 0xB
00000374: R30 := 0x8EC
00000377: call @malloc with return %00000379

00000379:
0000037c: R21 := 0x11000
00000381: R20 := 0x11000
00000387: R20 := R20 + 0x61
0000038d: R19 := R0
00000395: mem := mem with [R21 + 0x78, el]:u64 <- R0
0000039b: R0 := R20
000003a0: R30 := 0x908
000003a3: call @strlen with return %000003a5

000003a5:
000003a9: R2 := R0
000003af: R0 := R19
000003b5: R1 := R20
000003ba: R30 := 0x918
000003bd: call @memcpy with return %000003bf

000003bf:
000003c3: R0 := R19
000003c8: R30 := 0x920
000003cb: call @puts with return %000003cd

000003cd:
000003d2: R8 := mem[R21 + 0x78, el]:u64
000003d9: mem := mem with [R8 + 4] <- 0
000003e0: R19 := mem[R21 + 0x78, el]:u64
000003e6: R0 := R19
000003eb: R30 := 0x934
000003ed: call @strlen with return %000003ef

000003ef:
000003f3: R2 := R0
000003f9: R0 := R19
000003fe: R1 := 1
00000403: R30 := 0x944
00000406: call @memset with return %00000408

00000408:
0000040d: R0 := mem[R21 + 0x78, el]:u64
00000412: R30 := 0x94C
00000415: call @free with return %00000417

00000417:
0000041a: R0 := 0
00000420: #6 := R31 + 0x20
00000425: R20 := mem[#6, el]:u64
0000042a: R19 := mem[#6 + 8, el]:u64
00000431: R21 := mem[R31 + 0x10, el]:u64
00000438: R29 := mem[R31, el]:u64
0000043d: R30 := mem[R31 + 8, el]:u64
00000441: R31 := R31 + 0x30
00000446: call R30 with noreturn

000007a2: sub malloc(malloc_size, malloc_result)
000007e7: malloc_size :: in u64 = R0
000007e8: malloc_result :: out u64 = R0

00000375:
00000619: R16 := 0x11000
00000620: R17 := mem[R16 + 0x20, el]:u64
00000626: R16 := R16 + 0x20
0000062b: call R17 with noreturn

000007a3: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
000007e9: memcpy_dst :: in out u64 = R0
000007ea: memcpy_src :: in out u64 = R1
000007eb: memcpy_n :: in u64 = R2
000007ec: memcpy_result :: out u64 = R0

000003bb:
000005c1: R16 := 0x11000
000005c8: R17 := mem[R16, el]:u64
000005ce: R16 := R16
000005d3: call R17 with noreturn

000007a4: sub memset(memset_buf, memset_c, memset_n, memset_result)
000007ed: memset_buf :: in out u64 = R0
000007ee: memset_c :: in u32 = low:32[R1]
000007ef: memset_n :: in u64 = R2
000007f0: memset_result :: out u64 = R0

00000404:
0000062f: R16 := 0x11000
00000636: R17 := mem[R16 + 0x28, el]:u64
0000063c: R16 := R16 + 0x28
00000641: call R17 with noreturn

000007a5: sub puts(puts_s, puts_result)
000007f1: puts_s :: in u64 = R0
000007f2: puts_result :: out u32 = low:32[R0]

000003c9:
00000671: R16 := 0x11000
00000678: R17 := mem[R16 + 0x40, el]:u64
0000067e: R16 := R16 + 0x40
00000683: call R17 with noreturn

000007a6: sub register_tm_clones(register_tm_clones_result)
000007f3: register_tm_clones_result :: out u32 = low:32[R0]

0000029c:
0000029f: R0 := 0x11000
000002a5: R0 := R0 + 0x70
000002aa: R1 := 0x11000
000002b0: R1 := R1 + 0x70
000002b7: R1 := R1 + ~R0 + 1
000002bd: R2 := 0.63:63[R1]
000002c4: R1 := R2 + (R1 ~>> 3)
000002ca: R1 := extend:64[63:1[R1]]
000002d0: when R1 = 0 goto %000002ce
000007d3: goto %00000483

00000483:
00000486: R2 := 0x10000
0000048d: R2 := mem[R2 + 0xFE0, el]:u64
00000492: when R2 = 0 goto %000002ce
000007d4: goto %00000496

000002ce:
000002d6: call R30 with noreturn

00000496:
0000049a: R16 := R2
0000049f: call R16 with noreturn

000007a9: sub strlen(strlen_s, strlen_result)
000007f4: strlen_s :: in u64 = R0
000007f5: strlen_result :: out u64 = R0

000003a1:
000005d7: R16 := 0x11000
000005de: R17 := mem[R16 + 8, el]:u64
000005e4: R16 := R16 + 8
000005e9: call R17 with noreturn
