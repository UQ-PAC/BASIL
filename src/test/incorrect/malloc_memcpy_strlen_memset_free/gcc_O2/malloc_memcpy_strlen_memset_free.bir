00000805: program
000007e9: sub __cxa_finalize(__cxa_finalize_result)
00000806: __cxa_finalize_result :: out u32 = low:32[R0]

000004cd:
00000651: R16 := 0x20000
00000658: R17 := mem[R16 + 0x18, el]:u64
0000065e: R16 := R16 + 0x18
00000663: call R17 with noreturn

000007ea: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000807: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000043b:
0000043f: #6 := R31 - 0x20
00000445: mem := mem with [#6, el]:u64 <- R29
0000044b: mem := mem with [#6 + 8, el]:u64 <- R30
0000044f: R31 := #6
00000455: R29 := R31
0000045d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000462: R19 := 0x20000
00000469: R0 := pad:64[mem[R19 + 0x70]]
0000046f: when 0:0[R0] goto %0000046d
000007eb: goto %00000496

00000496:
00000499: R0 := 0x1F000
000004a0: R0 := mem[R0 + 0xFC8, el]:u64
000004a6: when R0 = 0 goto %000004a4
000007ec: goto %000004bd

000004bd:
000004c0: R0 := 0x20000
000004c7: R0 := mem[R0 + 0x58, el]:u64
000004cc: R30 := 0x970
000004cf: call @__cxa_finalize with return %000004a4

000004a4:
000004ac: R30 := 0x974
000004ae: call @deregister_tm_clones with return %000004b0

000004b0:
000004b3: R0 := 1
000004bb: mem := mem with [R19 + 0x70] <- 7:0[R0]
000007ed: goto %0000046d

0000046d:
00000477: R19 := mem[R31 + 0x10, el]:u64
0000047e: R29 := mem[R31, el]:u64
00000483: R30 := mem[R31 + 8, el]:u64
00000487: R31 := R31 + 0x20
0000048c: call R30 with noreturn

000007ee: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000808: __libc_start_main_main :: in u64 = R0
00000809: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000080a: __libc_start_main_arg3 :: in out u64 = R2
0000080b: __libc_start_main_auxv :: in out u64 = R3
0000080c: __libc_start_main_result :: out u32 = low:32[R0]

00000394:
0000063b: R16 := 0x20000
00000642: R17 := mem[R16 + 0x10, el]:u64
00000648: R16 := R16 + 0x10
0000064d: call R17 with noreturn

000007ef: sub _fini(_fini_result)
0000080d: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000007f0: sub _init(_init_result)
0000080e: _init_result :: out u32 = low:32[R0]

00000703:
00000709: #8 := R31 - 0x10
0000070f: mem := mem with [#8, el]:u64 <- R29
00000715: mem := mem with [#8 + 8, el]:u64 <- R30
00000719: R31 := #8
0000071f: R29 := R31
00000724: R30 := 0x6E8
00000726: call @call_weak_fn with return %00000728

00000728:
0000072d: R29 := mem[R31, el]:u64
00000732: R30 := mem[R31 + 8, el]:u64
00000736: R31 := R31 + 0x10
0000073b: call R30 with noreturn

000007f1: sub _start(_start_result)
0000080f: _start_result :: out u32 = low:32[R0]

00000355:
0000035a: R29 := 0
0000035f: R30 := 0
00000365: R5 := R0
0000036c: R1 := mem[R31, el]:u64
00000372: R2 := R31 + 8
00000378: R6 := R31
0000037d: R0 := 0x1F000
00000384: R0 := mem[R0 + 0xFD8, el]:u64
00000389: R3 := 0
0000038e: R4 := 0
00000393: R30 := 0x8B0
00000396: call @__libc_start_main with return %00000398

00000398:
0000039b: R30 := 0x8B4
0000039e: call @abort with return %000007f2

000007f2:
000007f3: call @call_weak_fn with noreturn

000007f4: sub abort()


0000039c:
000006a9: R16 := 0x20000
000006b0: R17 := mem[R16 + 0x38, el]:u64
000006b6: R16 := R16 + 0x38
000006bb: call R17 with noreturn

000007f5: sub call_weak_fn(call_weak_fn_result)
00000810: call_weak_fn_result :: out u32 = low:32[R0]

000003a0:
000003a3: R0 := 0x1F000
000003aa: R0 := mem[R0 + 0xFD0, el]:u64
000003b0: when R0 = 0 goto %000003ae
000007f6: goto %0000050d

000003ae:
000003b6: call R30 with noreturn

0000050d:
00000510: goto @__gmon_start__

0000050e:
00000693: R16 := 0x20000
0000069a: R17 := mem[R16 + 0x30, el]:u64
000006a0: R16 := R16 + 0x30
000006a5: call R17 with noreturn

000007f7: sub deregister_tm_clones(deregister_tm_clones_result)
00000811: deregister_tm_clones_result :: out u32 = low:32[R0]

000003bc:
000003bf: R0 := 0x20000
000003c5: R0 := R0 + 0x70
000003ca: R1 := 0x20000
000003d0: R1 := R1 + 0x70
000003d6: #4 := ~R0
000003db: #5 := R1 + ~R0
000003e1: VF := extend:65[#5 + 1] <> extend:65[R1] + extend:65[#4] + 1
000003e7: CF := pad:65[#5 + 1] <> pad:65[R1] + pad:65[#4] + 1
000003eb: ZF := #5 + 1 = 0
000003ef: NF := 63:63[#5 + 1]
000003f5: when ZF goto %000003f3
000007f8: goto %000004ef

000004ef:
000004f2: R1 := 0x1F000
000004f9: R1 := mem[R1 + 0xFC0, el]:u64
000004fe: when R1 = 0 goto %000003f3
000007f9: goto %00000502

000003f3:
000003fb: call R30 with noreturn

00000502:
00000506: R16 := R1
0000050b: call R16 with noreturn

000007fa: sub frame_dummy(frame_dummy_result)
00000812: frame_dummy_result :: out u32 = low:32[R0]

00000492:
00000494: call @register_tm_clones with noreturn

000007fb: sub free(free_ptr)
00000813: free_ptr :: in out u64 = R0

00000306:
000006d5: R16 := 0x20000
000006dc: R17 := mem[R16 + 0x48, el]:u64
000006e2: R16 := R16 + 0x48
000006e7: call R17 with noreturn

000007fc: sub main(main_argc, main_argv, main_result)
00000814: main_argc :: in u32 = low:32[R0]
00000815: main_argv :: in out u64 = R1
00000816: main_result :: out u32 = low:32[R0]

00000229:
0000022d: #1 := R31 - 0x30
00000233: mem := mem with [#1, el]:u64 <- R29
00000239: mem := mem with [#1 + 8, el]:u64 <- R30
0000023d: R31 := #1
00000242: R0 := 0xB
00000248: R29 := R31
0000024e: #2 := R31 + 0x10
00000254: mem := mem with [#2, el]:u64 <- R19
0000025a: mem := mem with [#2 + 8, el]:u64 <- R20
0000025f: R20 := 0x20000
00000267: mem := mem with [R31 + 0x20, el]:u64 <- R21
0000026c: R30 := 0x7DC
0000026f: call @malloc with return %00000271

00000271:
00000274: R21 := 0x20000
0000027a: R21 := R21 + 0x60
00000280: R19 := R0
00000286: R0 := R21
0000028e: mem := mem with [R20 + 0x78, el]:u64 <- R19
00000293: R30 := 0x7F4
00000296: call @strlen with return %00000298

00000298:
0000029c: R1 := R21
000002a2: R2 := R0
000002a8: R0 := R19
000002ad: R30 := 0x804
000002b0: call @memcpy with return %000002b2

000002b2:
000002b6: R0 := R19
000002bb: R30 := 0x80C
000002be: call @puts with return %000002c0

000002c0:
000002c5: R0 := mem[R20 + 0x78, el]:u64
000002cc: mem := mem with [R0 + 4] <- 0
000002d3: R19 := mem[R20 + 0x78, el]:u64
000002d9: R0 := R19
000002de: R30 := 0x820
000002e0: call @strlen with return %000002e2

000002e2:
000002e5: R1 := 1
000002eb: R2 := R0
000002f1: R0 := R19
000002f6: R30 := 0x830
000002f9: call @memset with return %000002fb

000002fb:
00000300: R0 := mem[R20 + 0x78, el]:u64
00000305: R30 := 0x838
00000308: call @free with return %0000030a

0000030a:
0000030e: #3 := R31 + 0x10
00000313: R19 := mem[#3, el]:u64
00000318: R20 := mem[#3 + 8, el]:u64
0000031d: R0 := 0
00000324: R21 := mem[R31 + 0x20, el]:u64
0000032b: R29 := mem[R31, el]:u64
00000330: R30 := mem[R31 + 8, el]:u64
00000334: R31 := R31 + 0x30
00000339: call R30 with noreturn

000007fd: sub malloc(malloc_size, malloc_result)
00000817: malloc_size :: in u64 = R0
00000818: malloc_result :: out u64 = R0

0000026d:
00000667: R16 := 0x20000
0000066e: R17 := mem[R16 + 0x20, el]:u64
00000674: R16 := R16 + 0x20
00000679: call R17 with noreturn

000007fe: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
00000819: memcpy_dst :: in out u64 = R0
0000081a: memcpy_src :: in out u64 = R1
0000081b: memcpy_n :: in u64 = R2
0000081c: memcpy_result :: out u64 = R0

000002ae:
0000060f: R16 := 0x20000
00000616: R17 := mem[R16, el]:u64
0000061c: R16 := R16
00000621: call R17 with noreturn

000007ff: sub memset(memset_buf, memset_c, memset_n, memset_result)
0000081d: memset_buf :: in out u64 = R0
0000081e: memset_c :: in u32 = low:32[R1]
0000081f: memset_n :: in u64 = R2
00000820: memset_result :: out u64 = R0

000002f7:
0000067d: R16 := 0x20000
00000684: R17 := mem[R16 + 0x28, el]:u64
0000068a: R16 := R16 + 0x28
0000068f: call R17 with noreturn

00000800: sub puts(puts_s, puts_result)
00000821: puts_s :: in u64 = R0
00000822: puts_result :: out u32 = low:32[R0]

000002bc:
000006bf: R16 := 0x20000
000006c6: R17 := mem[R16 + 0x40, el]:u64
000006cc: R16 := R16 + 0x40
000006d1: call R17 with noreturn

00000801: sub register_tm_clones(register_tm_clones_result)
00000823: register_tm_clones_result :: out u32 = low:32[R0]

000003fd:
00000400: R0 := 0x20000
00000406: R0 := R0 + 0x70
0000040b: R1 := 0x20000
00000411: R1 := R1 + 0x70
00000418: R1 := R1 + ~R0 + 1
0000041e: R2 := 0.63:63[R1]
00000425: R1 := R2 + (R1 ~>> 3)
0000042b: R1 := extend:64[63:1[R1]]
00000431: when R1 = 0 goto %0000042f
00000802: goto %000004d1

000004d1:
000004d4: R2 := 0x1F000
000004db: R2 := mem[R2 + 0xFE0, el]:u64
000004e0: when R2 = 0 goto %0000042f
00000803: goto %000004e4

0000042f:
00000437: call R30 with noreturn

000004e4:
000004e8: R16 := R2
000004ed: call R16 with noreturn

00000804: sub strlen(strlen_s, strlen_result)
00000824: strlen_s :: in u64 = R0
00000825: strlen_result :: out u64 = R0

00000294:
00000625: R16 := 0x20000
0000062c: R17 := mem[R16 + 8, el]:u64
00000632: R16 := R16 + 8
00000637: call R17 with noreturn
