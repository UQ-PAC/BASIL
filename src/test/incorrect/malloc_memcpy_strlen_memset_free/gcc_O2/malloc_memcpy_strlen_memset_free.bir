00000830: program
000007ec: sub __cxa_finalize(__cxa_finalize_result)
00000831: __cxa_finalize_result :: out u32 = low:32[R0]

000004d0:
0000063e: R16 := 0x10000
00000645: R17 := mem[R16 + 0xF90, el]:u64
0000064b: R16 := R16 + 0xF90
00000650: call R17 with noreturn

000007ed: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000832: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000043d:
00000441: #6 := R31 - 0x20
00000447: mem := mem with [#6, el]:u64 <- R29
0000044d: mem := mem with [#6 + 8, el]:u64 <- R30
00000451: R31 := #6
00000457: R29 := R31
0000045f: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000464: R19 := 0x11000
0000046b: R0 := pad:64[mem[R19 + 0x20]]
00000472: when 31:0[R0] <> 0 goto %00000470
00000826: goto %00000499

00000499:
0000049c: R0 := 0x10000
000004a3: R0 := mem[R0 + 0xFE0, el]:u64
000004a9: when R0 = 0 goto %000004a7
00000827: goto %000004c0

000004c0:
000004c3: R0 := 0x11000
000004ca: R0 := mem[R0 + 8, el]:u64
000004cf: R30 := 0x970
000004d2: call @__cxa_finalize with return %000004a7

000004a7:
000004af: R30 := 0x974
000004b1: call @deregister_tm_clones with return %000004b3

000004b3:
000004b6: R0 := 1
000004be: mem := mem with [R19 + 0x20] <- 7:0[R0]
00000828: goto %00000470

00000470:
0000047a: R19 := mem[R31 + 0x10, el]:u64
00000481: R29 := mem[R31, el]:u64
00000486: R30 := mem[R31 + 8, el]:u64
0000048a: R31 := R31 + 0x20
0000048f: call R30 with noreturn

000007f1: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000833: __libc_start_main_main :: in u64 = R0
00000834: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000835: __libc_start_main_arg3 :: in out u64 = R2
00000836: __libc_start_main_auxv :: in out u64 = R3
00000837: __libc_start_main_result :: out u32 = low:32[R0]

00000396:
00000628: R16 := 0x10000
0000062f: R17 := mem[R16 + 0xF88, el]:u64
00000635: R16 := R16 + 0xF88
0000063a: call R17 with noreturn

000007f2: sub __memcpy_chk(__memcpy_chk_result)
00000838: __memcpy_chk_result :: out u32 = low:32[R0]

000002b2:
00000654: R16 := 0x10000
0000065b: R17 := mem[R16 + 0xF98, el]:u64
00000661: R16 := R16 + 0xF98
00000666: call R17 with noreturn

000007f3: sub _fini(_fini_result)
00000839: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000007f4: sub _init(_init_result)
0000083a: _init_result :: out u32 = low:32[R0]

00000706:
0000070c: #8 := R31 - 0x10
00000712: mem := mem with [#8, el]:u64 <- R29
00000718: mem := mem with [#8 + 8, el]:u64 <- R30
0000071c: R31 := #8
00000722: R29 := R31
00000727: R30 := 0x6E8
00000729: call @call_weak_fn with return %0000072b

0000072b:
00000730: R29 := mem[R31, el]:u64
00000735: R30 := mem[R31 + 8, el]:u64
00000739: R31 := R31 + 0x10
0000073e: call R30 with noreturn

000007f5: sub _start(_start_result)
0000083b: _start_result :: out u32 = low:32[R0]

00000357:
0000035c: R29 := 0
00000361: R30 := 0
00000367: R5 := R0
0000036e: R1 := mem[R31, el]:u64
00000374: R2 := R31 + 8
0000037a: R6 := R31
0000037f: R0 := 0x10000
00000386: R0 := mem[R0 + 0xFF0, el]:u64
0000038b: R3 := 0
00000390: R4 := 0
00000395: R30 := 0x8B0
00000398: call @__libc_start_main with return %0000039a

0000039a:
0000039d: R30 := 0x8B4
000003a0: call @abort with return %00000829

00000829:
0000082a: call @call_weak_fn with noreturn

000007f8: sub abort()


0000039e:
000006ac: R16 := 0x10000
000006b3: R17 := mem[R16 + 0xFB8, el]:u64
000006b9: R16 := R16 + 0xFB8
000006be: call R17 with noreturn

000007f9: sub call_weak_fn(call_weak_fn_result)
0000083c: call_weak_fn_result :: out u32 = low:32[R0]

000003a2:
000003a5: R0 := 0x10000
000003ac: R0 := mem[R0 + 0xFE8, el]:u64
000003b2: when R0 = 0 goto %000003b0
0000082b: goto %00000510

000003b0:
000003b8: call R30 with noreturn

00000510:
00000513: goto @__gmon_start__

00000511:
00000696: R16 := 0x10000
0000069d: R17 := mem[R16 + 0xFB0, el]:u64
000006a3: R16 := R16 + 0xFB0
000006a8: call R17 with noreturn

000007fb: sub deregister_tm_clones(deregister_tm_clones_result)
0000083d: deregister_tm_clones_result :: out u32 = low:32[R0]

000003be:
000003c1: R0 := 0x11000
000003c7: R0 := R0 + 0x20
000003cc: R1 := 0x11000
000003d2: R1 := R1 + 0x20
000003d8: #4 := ~R0
000003dd: #5 := R1 + ~R0
000003e3: VF := extend:65[#5 + 1] <> extend:65[R1] + extend:65[#4] + 1
000003e9: CF := pad:65[#5 + 1] <> pad:65[R1] + pad:65[#4] + 1
000003ed: ZF := #5 + 1 = 0
000003f1: NF := 63:63[#5 + 1]
000003f7: when ZF goto %000003f5
0000082c: goto %000004f2

000004f2:
000004f5: R1 := 0x10000
000004fc: R1 := mem[R1 + 0xFD8, el]:u64
00000501: when R1 = 0 goto %000003f5
0000082d: goto %00000505

000003f5:
000003fd: call R30 with noreturn

00000505:
00000509: R16 := R1
0000050e: call R16 with noreturn

000007fe: sub frame_dummy(frame_dummy_result)
0000083e: frame_dummy_result :: out u32 = low:32[R0]

00000495:
00000497: call @register_tm_clones with noreturn

000007ff: sub free(free_ptr)
0000083f: free_ptr :: in out u64 = R0

0000030a:
000006d8: R16 := 0x10000
000006df: R17 := mem[R16 + 0xFC8, el]:u64
000006e5: R16 := R16 + 0xFC8
000006ea: call R17 with noreturn

00000800: sub main(main_argc, main_argv, main_result)
00000840: main_argc :: in u32 = low:32[R0]
00000841: main_argv :: in out u64 = R1
00000842: main_result :: out u32 = low:32[R0]

00000228:
0000022c: #1 := R31 - 0x30
00000232: mem := mem with [#1, el]:u64 <- R29
00000238: mem := mem with [#1 + 8, el]:u64 <- R30
0000023c: R31 := #1
00000241: R0 := 0xB
00000247: R29 := R31
0000024d: #2 := R31 + 0x10
00000253: mem := mem with [#2, el]:u64 <- R19
00000259: mem := mem with [#2 + 8, el]:u64 <- R20
0000025e: R20 := 0x11000
00000266: mem := mem with [R31 + 0x20, el]:u64 <- R21
0000026b: R30 := 0x7DC
0000026e: call @malloc with return %00000270

00000270:
00000273: R21 := 0x11000
00000279: R21 := R21 + 0x10
0000027f: R19 := R0
00000285: R0 := R21
0000028d: mem := mem with [R20 + 0x28, el]:u64 <- R19
00000292: R30 := 0x7F4
00000295: call @strlen with return %00000297

00000297:
0000029b: R1 := R21
000002a1: R2 := R0
000002a6: R3 := 0xB
000002ac: R0 := R19
000002b1: R30 := 0x808
000002b4: call @__memcpy_chk with return %000002b6

000002b6:
000002ba: R0 := R19
000002bf: R30 := 0x810
000002c2: call @puts with return %000002c4

000002c4:
000002c9: R0 := mem[R20 + 0x28, el]:u64
000002d0: mem := mem with [R0 + 4] <- 0
000002d7: R19 := mem[R20 + 0x28, el]:u64
000002dd: R0 := R19
000002e2: R30 := 0x824
000002e4: call @strlen with return %000002e6

000002e6:
000002e9: R1 := 1
000002ef: R2 := R0
000002f5: R0 := R19
000002fa: R30 := 0x834
000002fd: call @memset with return %000002ff

000002ff:
00000304: R0 := mem[R20 + 0x28, el]:u64
00000309: R30 := 0x83C
0000030c: call @free with return %0000030e

0000030e:
00000311: R0 := 0
00000317: #3 := R31 + 0x10
0000031c: R19 := mem[#3, el]:u64
00000321: R20 := mem[#3 + 8, el]:u64
00000328: R21 := mem[R31 + 0x20, el]:u64
0000032f: R29 := mem[R31, el]:u64
00000334: R30 := mem[R31 + 8, el]:u64
00000338: R31 := R31 + 0x30
0000033d: call R30 with noreturn

00000801: sub malloc(malloc_size, malloc_result)
00000843: malloc_size :: in u64 = R0
00000844: malloc_result :: out u64 = R0

0000026c:
0000066a: R16 := 0x10000
00000671: R17 := mem[R16 + 0xFA0, el]:u64
00000677: R16 := R16 + 0xFA0
0000067c: call R17 with noreturn

00000802: sub memset(memset_buf, memset_c, memset_n, memset_result)
00000845: memset_buf :: in out u64 = R0
00000846: memset_c :: in u32 = low:32[R1]
00000847: memset_n :: in u64 = R2
00000848: memset_result :: out u64 = R0

000002fb:
00000680: R16 := 0x10000
00000687: R17 := mem[R16 + 0xFA8, el]:u64
0000068d: R16 := R16 + 0xFA8
00000692: call R17 with noreturn

00000803: sub puts(puts_s, puts_result)
00000849: puts_s :: in u64 = R0
0000084a: puts_result :: out u32 = low:32[R0]

000002c0:
000006c2: R16 := 0x10000
000006c9: R17 := mem[R16 + 0xFC0, el]:u64
000006cf: R16 := R16 + 0xFC0
000006d4: call R17 with noreturn

00000804: sub register_tm_clones(register_tm_clones_result)
0000084b: register_tm_clones_result :: out u32 = low:32[R0]

000003ff:
00000402: R0 := 0x11000
00000408: R0 := R0 + 0x20
0000040d: R1 := 0x11000
00000413: R1 := R1 + 0x20
0000041a: R1 := R1 + ~R0 + 1
00000420: R2 := 0.63:63[R1]
00000427: R1 := R2 + (R1 ~>> 3)
0000042d: R1 := extend:64[63:1[R1]]
00000433: when R1 = 0 goto %00000431
0000082e: goto %000004d4

000004d4:
000004d7: R2 := 0x10000
000004de: R2 := mem[R2 + 0xFF8, el]:u64
000004e3: when R2 = 0 goto %00000431
0000082f: goto %000004e7

00000431:
00000439: call R30 with noreturn

000004e7:
000004eb: R16 := R2
000004f0: call R16 with noreturn

00000807: sub strlen(strlen_s, strlen_result)
0000084c: strlen_s :: in u64 = R0
0000084d: strlen_result :: out u64 = R0

00000293:
00000612: R16 := 0x10000
00000619: R17 := mem[R16 + 0xF80, el]:u64
0000061f: R16 := R16 + 0xF80
00000624: call R17 with noreturn
