000008c0: program
00000879: sub __cxa_finalize(__cxa_finalize_result)
000008c1: __cxa_finalize_result :: out u32 = low:32[R0]

00000526:
000006ca: R16 := 0x20000
000006d2: R17 := mem[R16 + 0x18, el]:u64
000006d9: R16 := R16 + 0x18
000006de: call R17 with noreturn

0000087a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008c2: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000047d:
00000484: #77 := R31 - 0x20
00000489: mem := mem with [#77, el]:u64 <- R29
0000048e: mem := mem with [#77 + 8, el]:u64 <- R30
00000492: R31 := #77
00000499: R29 := R31
000004a1: mem := mem with [R31 + 0x10, el]:u64 <- R19
000004a7: R19 := 0x20000
000004b0: R0 := pad:32[mem[R19 + 0x70]]
000004bc: #79 := ~~0:0[R0]
000004b6: when #79 goto %000004b4
000008b6: goto %000004e4

000004e4:
000004e8: R0 := 0x1F000
000004f0: R0 := mem[R0 + 0xFC8, el]:u64
000004fc: #83 := R0 = 0
000004f6: when #83 goto %000004f4
000008b7: goto %00000514

00000514:
00000518: R0 := 0x20000
00000520: R0 := mem[R0 + 0x58, el]:u64
00000525: R30 := 0x970
00000528: call @__cxa_finalize with return %000004f4

000004f4:
00000501: R30 := 0x974
00000503: call @deregister_tm_clones with return %00000505

00000505:
0000050a: R0 := 1
00000512: mem := mem with [R19 + 0x70] <- low:8[31:0[R0]]
000008b8: goto %000004b4

000004b4:
000004c4: R19 := mem[R31 + 0x10, el]:u64
000004ce: R29 := mem[R31, el]:u64
000004d2: R30 := mem[R31 + 8, el]:u64
000004d5: R31 := R31 + 0x20
000004da: call R30 with noreturn

0000087e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008c3: __libc_start_main_main :: in u64 = R0
000008c4: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008c5: __libc_start_main_arg3 :: in out u64 = R2
000008c6: __libc_start_main_auxv :: in out u64 = R3
000008c7: __libc_start_main_result :: out u32 = low:32[R0]

000003c1:
000006b1: R16 := 0x20000
000006b9: R17 := mem[R16 + 0x10, el]:u64
000006c0: R16 := R16 + 0x10
000006c5: call R17 with noreturn

0000087f: sub _fini(_fini_result)
000008c8: _fini_result :: out u32 = low:32[R0]

00000020:
00000029: #3 := R31 - 0x10
0000002e: mem := mem with [#3, el]:u64 <- R29
00000033: mem := mem with [#3 + 8, el]:u64 <- R30
00000037: R31 := #3
0000003e: R29 := R31
00000048: R29 := mem[R31, el]:u64
0000004c: R30 := mem[R31 + 8, el]:u64
0000004f: R31 := R31 + 0x10
00000054: call R30 with noreturn

00000880: sub _init(_init_result)
000008c9: _init_result :: out u32 = low:32[R0]

00000790:
00000799: #114 := R31 - 0x10
0000079e: mem := mem with [#114, el]:u64 <- R29
000007a3: mem := mem with [#114 + 8, el]:u64 <- R30
000007a7: R31 := #114
000007ae: R29 := R31
000007b3: R30 := 0x6E8
000007b5: call @call_weak_fn with return %000007b7

000007b7:
000007bf: R29 := mem[R31, el]:u64
000007c3: R30 := mem[R31 + 8, el]:u64
000007c6: R31 := R31 + 0x10
000007cb: call R30 with noreturn

00000881: sub _start(_start_result)
000008ca: _start_result :: out u32 = low:32[R0]

00000377:
0000037d: R29 := 0
00000383: R30 := 0
0000038b: R5 := R0
00000393: R1 := mem[R31, el]:u64
0000039a: R2 := R31 + 8
000003a1: R6 := R31
000003a7: R0 := 0x1F000
000003af: R0 := mem[R0 + 0xFD8, el]:u64
000003b5: R3 := 0
000003bb: R4 := 0
000003c0: R30 := 0x8B0
000003c3: call @__libc_start_main with return %000003c5

000003c5:
000003c8: R30 := 0x8B4
000003cb: call @abort with return %000008b9

000008b9:
000008ba: call @call_weak_fn with noreturn

00000884: sub abort()


000003c9:
0000072e: R16 := 0x20000
00000736: R17 := mem[R16 + 0x38, el]:u64
0000073d: R16 := R16 + 0x38
00000742: call R17 with noreturn

00000885: sub call_weak_fn(call_weak_fn_result)
000008cb: call_weak_fn_result :: out u32 = low:32[R0]

000003cd:
000003d1: R0 := 0x1F000
000003d9: R0 := mem[R0 + 0xFD0, el]:u64
000003e5: #55 := R0 = 0
000003df: when #55 goto %000003dd
000008bb: goto %00000578

000003dd:
000003ea: call R30 with noreturn

00000578:
0000057b: goto @__gmon_start__

00000579:
00000715: R16 := 0x20000
0000071d: R17 := mem[R16 + 0x30, el]:u64
00000724: R16 := R16 + 0x30
00000729: call R17 with noreturn

00000887: sub deregister_tm_clones(deregister_tm_clones_result)
000008cc: deregister_tm_clones_result :: out u32 = low:32[R0]

000003f0:
000003f4: R0 := 0x20000
000003fb: R0 := R0 + 0x70
00000401: R1 := 0x20000
00000408: R1 := R1 + 0x70
00000410: #59 := 1 + ~R0 + R1
00000414: NF := 63:63[#59]
00000417: VF := 63:63[R1] & 63:63[~R0] & ~63:63[#59] | ~63:63[R1] &
          ~63:63[~R0] & 63:63[#59]
0000041a: ZF := #59 = 0
0000041d: CF := 63:63[R1] & 63:63[~R0] | 63:63[~R0] & ~63:63[#59] | 63:63[R1]
          & ~63:63[#59]
0000042b: #64 := ZF
00000425: when #64 goto %00000423
000008bc: goto %00000551

00000551:
00000555: R1 := 0x1F000
0000055d: R1 := mem[R1 + 0xFC0, el]:u64
00000568: #91 := R1 = 0
00000562: when #91 goto %00000423
000008bd: goto %0000056b

00000423:
00000430: call R30 with noreturn

0000056b:
00000571: R16 := R1
00000576: call R16 with noreturn

0000088a: sub frame_dummy(frame_dummy_result)
000008cd: frame_dummy_result :: out u32 = low:32[R0]

000004e0:
000004e2: call @register_tm_clones with noreturn

0000088b: sub free(free_ptr)
000008ce: free_ptr :: in out u64 = R0

00000327:
00000760: R16 := 0x20000
00000768: R17 := mem[R16 + 0x48, el]:u64
0000076f: R16 := R16 + 0x48
00000774: call R17 with noreturn

0000088c: sub main(main_argc, main_argv, main_result)
000008cf: main_argc :: in u32 = low:32[R0]
000008d0: main_argv :: in out u64 = R1
000008d1: main_result :: out u32 = low:32[R0]

0000022c:
00000233: #9 := R31 - 0x30
00000238: mem := mem with [#9, el]:u64 <- R29
0000023d: mem := mem with [#9 + 8, el]:u64 <- R30
00000241: R31 := #9
00000247: R0 := 0xB
0000024e: R29 := R31
00000256: #14 := R31 + 0x10
0000025b: mem := mem with [#14, el]:u64 <- R19
00000260: mem := mem with [#14 + 8, el]:u64 <- R20
00000266: R20 := 0x20000
0000026e: mem := mem with [R31 + 0x20, el]:u64 <- R21
00000273: R30 := 0x7DC
00000276: call @malloc with return %00000278

00000278:
0000027c: R21 := 0x20000
00000283: R21 := R21 + 0x60
0000028b: R19 := R0
00000293: R0 := R21
0000029b: mem := mem with [R20 + 0x78, el]:u64 <- R19
000002a0: R30 := 0x7F4
000002a3: call @strlen with return %000002a5

000002a5:
000002ab: R1 := R21
000002b3: R2 := R0
000002bb: R0 := R19
000002c0: R30 := 0x804
000002c3: call @memcpy with return %000002c5

000002c5:
000002cb: R0 := R19
000002d0: R30 := 0x80C
000002d3: call @puts with return %000002d5

000002d5:
000002db: R0 := mem[R20 + 0x78, el]:u64
000002e3: mem := mem with [R0 + 4] <- 0
000002eb: R19 := mem[R20 + 0x78, el]:u64
000002f3: R0 := R19
000002f8: R30 := 0x820
000002fa: call @strlen with return %000002fc

000002fc:
00000301: R1 := 1
00000309: R2 := R0
00000311: R0 := R19
00000316: R30 := 0x830
00000319: call @memset with return %0000031b

0000031b:
00000321: R0 := mem[R20 + 0x78, el]:u64
00000326: R30 := 0x838
00000329: call @free with return %0000032b

0000032b:
00000332: R19 := mem[R31 + 0x10, el]:u64
00000336: R20 := mem[R31 + 0x18, el]:u64
0000033d: R0 := 0
00000345: R21 := mem[R31 + 0x20, el]:u64
0000034f: R29 := mem[R31, el]:u64
00000353: R30 := mem[R31 + 8, el]:u64
00000356: R31 := R31 + 0x30
0000035b: call R30 with noreturn

0000088d: sub malloc(malloc_size, malloc_result)
000008d2: malloc_size :: in u64 = R0
000008d3: malloc_result :: out u64 = R0

00000274:
000006e3: R16 := 0x20000
000006eb: R17 := mem[R16 + 0x20, el]:u64
000006f2: R16 := R16 + 0x20
000006f7: call R17 with noreturn

0000088e: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
000008d4: memcpy_dst :: in out u64 = R0
000008d5: memcpy_src :: in out u64 = R1
000008d6: memcpy_n :: in u64 = R2
000008d7: memcpy_result :: out u64 = R0

000002c1:
0000067f: R16 := 0x20000
00000687: R17 := mem[R16, el]:u64
0000068e: R16 := R16
00000693: call R17 with noreturn

0000088f: sub memset(memset_buf, memset_c, memset_n, memset_result)
000008d8: memset_buf :: in out u64 = R0
000008d9: memset_c :: in u32 = low:32[R1]
000008da: memset_n :: in u64 = R2
000008db: memset_result :: out u64 = R0

00000317:
000006fc: R16 := 0x20000
00000704: R17 := mem[R16 + 0x28, el]:u64
0000070b: R16 := R16 + 0x28
00000710: call R17 with noreturn

00000890: sub puts(puts_s, puts_result)
000008dc: puts_s :: in u64 = R0
000008dd: puts_result :: out u32 = low:32[R0]

000002d1:
00000747: R16 := 0x20000
0000074f: R17 := mem[R16 + 0x40, el]:u64
00000756: R16 := R16 + 0x40
0000075b: call R17 with noreturn

00000891: sub register_tm_clones(register_tm_clones_result)
000008de: register_tm_clones_result :: out u32 = low:32[R0]

00000432:
00000436: R0 := 0x20000
0000043d: R0 := R0 + 0x70
00000443: R1 := 0x20000
0000044a: R1 := R1 + 0x70
00000452: R1 := R1 - R0
00000459: R2 := R1 >> 0x3F
00000461: R1 := R2 + (R1 ~>> 3)
00000468: R1 := R1 >> 1
00000474: #73 := R1 = 0
0000046e: when #73 goto %0000046c
000008be: goto %0000052a

0000052a:
0000052e: R2 := 0x1F000
00000536: R2 := mem[R2 + 0xFE0, el]:u64
00000541: #86 := R2 = 0
0000053b: when #86 goto %0000046c
000008bf: goto %00000544

0000046c:
00000479: call R30 with noreturn

00000544:
0000054a: R16 := R2
0000054f: call R16 with noreturn

00000894: sub strlen(strlen_s, strlen_result)
000008df: strlen_s :: in u64 = R0
000008e0: strlen_result :: out u64 = R0

000002a1:
00000698: R16 := 0x20000
000006a0: R17 := mem[R16 + 8, el]:u64
000006a7: R16 := R16 + 8
000006ac: call R17 with noreturn
