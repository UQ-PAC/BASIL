000008f1: program
000008d5: sub __cxa_finalize(__cxa_finalize_result)
000008f2: __cxa_finalize_result :: out u32 = low:32[R0]

0000057e:
00000722: R16 := 0x20000
0000072a: R17 := mem[R16 + 0x18, el]:u64
00000731: R16 := R16 + 0x18
00000736: call R17 with noreturn

000008d6: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008f3: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000342:
00000349: #34 := R31 - 0x20
0000034e: mem := mem with [#34, el]:u64 <- R29
00000353: mem := mem with [#34 + 8, el]:u64 <- R30
00000357: R31 := #34
0000035e: R29 := R31
00000366: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000036c: R19 := 0x20000
00000375: R0 := pad:32[mem[R19 + 0x78]]
00000381: #36 := ~~0:0[R0]
0000037b: when #36 goto %00000379
000008d7: goto %0000053c

0000053c:
00000540: R0 := 0x1F000
00000548: R0 := mem[R0 + 0xFC8, el]:u64
00000554: #69 := R0 = 0
0000054e: when #69 goto %0000054c
000008d8: goto %0000056c

0000056c:
00000570: R0 := 0x20000
00000578: R0 := mem[R0 + 0x58, el]:u64
0000057d: R30 := 0x8B0
00000580: call @__cxa_finalize with return %0000054c

0000054c:
00000559: R30 := 0x8B4
0000055b: call @deregister_tm_clones with return %0000055d

0000055d:
00000562: R0 := 1
0000056a: mem := mem with [R19 + 0x78] <- low:8[31:0[R0]]
000008d9: goto %00000379

00000379:
00000389: R19 := mem[R31 + 0x10, el]:u64
00000393: R29 := mem[R31, el]:u64
00000397: R30 := mem[R31 + 8, el]:u64
0000039a: R31 := R31 + 0x20
0000039f: call R30 with noreturn

000008da: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008f4: __libc_start_main_main :: in u64 = R0
000008f5: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008f6: __libc_start_main_arg3 :: in out u64 = R2
000008f7: __libc_start_main_auxv :: in out u64 = R3
000008f8: __libc_start_main_result :: out u32 = low:32[R0]

00000286:
00000709: R16 := 0x20000
00000711: R17 := mem[R16 + 0x10, el]:u64
00000718: R16 := R16 + 0x10
0000071d: call R17 with noreturn

000008db: sub _fini(_fini_result)
000008f9: _fini_result :: out u32 = low:32[R0]

00000020:
00000029: #3 := R31 - 0x10
0000002e: mem := mem with [#3, el]:u64 <- R29
00000033: mem := mem with [#3 + 8, el]:u64 <- R30
00000037: R31 := #3
0000003e: R29 := R31
00000048: R29 := mem[R31, el]:u64
0000004c: R30 := mem[R31 + 8, el]:u64
0000004f: R31 := R31 + 0x10
00000054: call R30 with noreturn

000008dc: sub _init(_init_result)
000008fa: _init_result :: out u32 = low:32[R0]

000007e8:
000007f1: #100 := R31 - 0x10
000007f6: mem := mem with [#100, el]:u64 <- R29
000007fb: mem := mem with [#100 + 8, el]:u64 <- R30
000007ff: R31 := #100
00000806: R29 := R31
0000080b: R30 := 0x6E8
0000080d: call @call_weak_fn with return %0000080f

0000080f:
00000817: R29 := mem[R31, el]:u64
0000081b: R30 := mem[R31 + 8, el]:u64
0000081e: R31 := R31 + 0x10
00000823: call R30 with noreturn

000008dd: sub _start(_start_result)
000008fb: _start_result :: out u32 = low:32[R0]

0000023c:
00000242: R29 := 0
00000248: R30 := 0
00000250: R5 := R0
00000258: R1 := mem[R31, el]:u64
0000025f: R2 := R31 + 8
00000266: R6 := R31
0000026c: R0 := 0x1F000
00000274: R0 := mem[R0 + 0xFD8, el]:u64
0000027a: R3 := 0
00000280: R4 := 0
00000285: R30 := 0x7F0
00000288: call @__libc_start_main with return %0000028a

0000028a:
0000028d: R30 := 0x7F4
00000290: call @abort with return %000008de

000008de:
000008df: call @call_weak_fn with noreturn

000008e0: sub abort()


0000028e:
00000786: R16 := 0x20000
0000078e: R17 := mem[R16 + 0x38, el]:u64
00000795: R16 := R16 + 0x38
0000079a: call R17 with noreturn

000008e1: sub call_weak_fn(call_weak_fn_result)
000008fc: call_weak_fn_result :: out u32 = low:32[R0]

00000292:
00000296: R0 := 0x1F000
0000029e: R0 := mem[R0 + 0xFD0, el]:u64
000002aa: #12 := R0 = 0
000002a4: when #12 goto %000002a2
000008e2: goto %000005d0

000002a2:
000002af: call R30 with noreturn

000005d0:
000005d3: goto @__gmon_start__

000005d1:
0000076d: R16 := 0x20000
00000775: R17 := mem[R16 + 0x30, el]:u64
0000077c: R16 := R16 + 0x30
00000781: call R17 with noreturn

000008e3: sub deregister_tm_clones(deregister_tm_clones_result)
000008fd: deregister_tm_clones_result :: out u32 = low:32[R0]

000002b5:
000002b9: R0 := 0x20000
000002c0: R0 := R0 + 0x78
000002c6: R1 := 0x20000
000002cd: R1 := R1 + 0x78
000002d5: #16 := 1 + ~R0 + R1
000002d9: NF := 63:63[#16]
000002dc: VF := 63:63[R1] & 63:63[~R0] & ~63:63[#16] | ~63:63[R1] &
          ~63:63[~R0] & 63:63[#16]
000002df: ZF := #16 = 0
000002e2: CF := 63:63[R1] & 63:63[~R0] | 63:63[~R0] & ~63:63[#16] | 63:63[R1]
          & ~63:63[#16]
000002f0: #21 := ZF
000002ea: when #21 goto %000002e8
000008e4: goto %000005a9

000005a9:
000005ad: R1 := 0x1F000
000005b5: R1 := mem[R1 + 0xFC0, el]:u64
000005c0: #77 := R1 = 0
000005ba: when #77 goto %000002e8
000008e5: goto %000005c3

000002e8:
000002f5: call R30 with noreturn

000005c3:
000005c9: R16 := R1
000005ce: call R16 with noreturn

000008e6: sub frame_dummy(frame_dummy_result)
000008fe: frame_dummy_result :: out u32 = low:32[R0]

000003a5:
000003a7: call @register_tm_clones with noreturn

000008e7: sub free(free_ptr)
000008ff: free_ptr :: in out u64 = R0

00000513:
000007b8: R16 := 0x20000
000007c0: R17 := mem[R16 + 0x48, el]:u64
000007c7: R16 := R16 + 0x48
000007cc: call R17 with noreturn

000008e8: sub main(main_argc, main_argv, main_result)
00000900: main_argc :: in u32 = low:32[R0]
00000901: main_argv :: in out u64 = R1
00000902: main_result :: out u32 = low:32[R0]

000003a9:
000003b0: #42 := R31 - 0x30
000003b5: mem := mem with [#42, el]:u64 <- R29
000003ba: mem := mem with [#42 + 8, el]:u64 <- R30
000003be: R31 := #42
000003c5: R29 := R31
000003cd: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003d5: mem := mem with [R31 + 0x28, el]:u64 <- 0
000003dd: mem := mem with [R31 + 0x20, el]:u64 <- 0
000003e3: R0 := 0xB
000003e8: R30 := 0x8F0
000003eb: call @malloc with return %000003ed

000003ed:
000003f3: R1 := R0
000003f9: R0 := 0x20000
00000400: R0 := R0 + 0x80
00000408: mem := mem with [R0, el]:u64 <- R1
0000040e: R0 := 0x20000
00000415: R0 := R0 + 0x80
0000041d: R19 := mem[R0, el]:u64
00000423: R0 := 0x20000
0000042a: R0 := R0 + 0x68
0000042f: R30 := 0x918
00000432: call @strlen with return %00000434

00000434:
0000043a: R2 := R0
00000440: R0 := 0x20000
00000447: R1 := R0 + 0x68
0000044f: R0 := R19
00000454: R30 := 0x92C
00000457: call @memcpy with return %00000459

00000459:
0000045d: R0 := 0x20000
00000464: R0 := R0 + 0x80
0000046c: R0 := mem[R0, el]:u64
00000471: R30 := 0x93C
00000474: call @puts with return %00000476

00000476:
0000047a: R0 := 0x20000
00000481: R0 := R0 + 0x80
00000489: R0 := mem[R0, el]:u64
00000490: R0 := R0 + 4
00000498: mem := mem with [R31 + 0x28, el]:u64 <- R0
000004a0: R0 := mem[R31 + 0x28, el]:u64
000004a8: mem := mem with [R0] <- 0
000004ae: R0 := 0x20000
000004b5: R0 := R0 + 0x80
000004bd: R19 := mem[R0, el]:u64
000004c3: R0 := 0x20000
000004ca: R0 := R0 + 0x80
000004d2: R0 := mem[R0, el]:u64
000004d7: R30 := 0x974
000004d9: call @strlen with return %000004db

000004db:
000004e1: R2 := R0
000004e8: R1 := 1
000004f0: R0 := R19
000004f5: R30 := 0x984
000004f8: call @memset with return %000004fa

000004fa:
000004fe: R0 := 0x20000
00000505: R0 := R0 + 0x80
0000050d: R0 := mem[R0, el]:u64
00000512: R30 := 0x994
00000515: call @free with return %00000517

00000517:
0000051c: R0 := 0
00000524: R19 := mem[R31 + 0x10, el]:u64
0000052e: R29 := mem[R31, el]:u64
00000532: R30 := mem[R31 + 8, el]:u64
00000535: R31 := R31 + 0x30
0000053a: call R30 with noreturn

000008e9: sub malloc(malloc_size, malloc_result)
00000903: malloc_size :: in u64 = R0
00000904: malloc_result :: out u64 = R0

000003e9:
0000073b: R16 := 0x20000
00000743: R17 := mem[R16 + 0x20, el]:u64
0000074a: R16 := R16 + 0x20
0000074f: call R17 with noreturn

000008ea: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
00000905: memcpy_dst :: in out u64 = R0
00000906: memcpy_src :: in out u64 = R1
00000907: memcpy_n :: in u64 = R2
00000908: memcpy_result :: out u64 = R0

00000455:
000006d7: R16 := 0x20000
000006df: R17 := mem[R16, el]:u64
000006e6: R16 := R16
000006eb: call R17 with noreturn

000008eb: sub memset(memset_buf, memset_c, memset_n, memset_result)
00000909: memset_buf :: in out u64 = R0
0000090a: memset_c :: in u32 = low:32[R1]
0000090b: memset_n :: in u64 = R2
0000090c: memset_result :: out u64 = R0

000004f6:
00000754: R16 := 0x20000
0000075c: R17 := mem[R16 + 0x28, el]:u64
00000763: R16 := R16 + 0x28
00000768: call R17 with noreturn

000008ec: sub puts(puts_s, puts_result)
0000090d: puts_s :: in u64 = R0
0000090e: puts_result :: out u32 = low:32[R0]

00000472:
0000079f: R16 := 0x20000
000007a7: R17 := mem[R16 + 0x40, el]:u64
000007ae: R16 := R16 + 0x40
000007b3: call R17 with noreturn

000008ed: sub register_tm_clones(register_tm_clones_result)
0000090f: register_tm_clones_result :: out u32 = low:32[R0]

000002f7:
000002fb: R0 := 0x20000
00000302: R0 := R0 + 0x78
00000308: R1 := 0x20000
0000030f: R1 := R1 + 0x78
00000317: R1 := R1 - R0
0000031e: R2 := R1 >> 0x3F
00000326: R1 := R2 + (R1 ~>> 3)
0000032d: R1 := R1 >> 1
00000339: #30 := R1 = 0
00000333: when #30 goto %00000331
000008ee: goto %00000582

00000582:
00000586: R2 := 0x1F000
0000058e: R2 := mem[R2 + 0xFE0, el]:u64
00000599: #72 := R2 = 0
00000593: when #72 goto %00000331
000008ef: goto %0000059c

00000331:
0000033e: call R30 with noreturn

0000059c:
000005a2: R16 := R2
000005a7: call R16 with noreturn

000008f0: sub strlen(strlen_s, strlen_result)
00000910: strlen_s :: in u64 = R0
00000911: strlen_result :: out u64 = R0

00000430:
000006f0: R16 := 0x20000
000006f8: R17 := mem[R16 + 8, el]:u64
000006ff: R16 := R16 + 8
00000704: call R17 with noreturn
