00000b64: program
00000b4c: sub __cxa_finalize(__cxa_finalize_result)
00000b65: __cxa_finalize_result :: out u32 = low:32[RAX]

00000885:
00000b49: call @__cxa_finalize:external with noreturn

00000b4d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000b66: __do_global_dtors_aux_result :: out u32 = low:32[RAX]

00000514:
0000052c: #12582884 := mem[0x4050]
00000530: CF := mem[0x4050] < 0
00000536: OF := high:1[mem[0x4050] & (mem[0x4050] ^ #12582884)]
0000053b: AF := 0x10 = (0x10 & (#12582884 ^ mem[0x4050]))
00000540: PF :=
          ~low:1[let $0 = #12582884 >> 4 ^ #12582884 in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
00000544: SF := high:1[#12582884]
00000548: ZF := 0 = #12582884
0000054f: when ~ZF goto %0000054c
00000b4e: goto %000007d8

0000054c:
0000055d: #12582882 := mem[RSP, el]:u64
00000561: RSP := RSP + 8
00000564: call #12582882 with noreturn

000007d8:
000007e4: #12582870 := RBP
000007e8: RSP := RSP - 8
000007ee: mem := mem with [RSP, el]:u64 <- #12582870
00000806: #12582869 := mem[0x3FE0, el]:u64
0000080a: CF := mem[0x3FE0, el]:u64 < 0
00000810: OF := high:1[mem[0x3FE0, el]:u64 &
          (mem[0x3FE0, el]:u64 ^ #12582869)]
00000815: AF := 0x10 = (0x10 & (#12582869 ^ mem[0x3FE0, el]:u64))
0000081a: PF :=
          ~low:1[let $0 = #12582869 >> 4 ^ #12582869 in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
0000081e: SF := high:1[#12582869]
00000822: ZF := 0 = #12582869
0000082a: RBP := RSP
00000831: when ZF goto %0000082e
00000b4f: goto %00000877

00000877:
0000087d: RDI := mem[0x4038, el]:u64
00000889: RSP := RSP - 8
0000088e: mem := mem with [RSP, el]:u64 <- 0x1167
00000890: call @__cxa_finalize with return %0000082e

0000082e:
0000083d: RSP := RSP - 8
00000842: mem := mem with [RSP, el]:u64 <- 0x116C
00000844: call @deregister_tm_clones with return %00000846

00000846:
0000084c: mem := mem with [0x4050] <- 1
00000858: RBP := mem[RSP, el]:u64
0000085c: RSP := RSP + 8
00000869: #12582867 := mem[RSP, el]:u64
0000086d: RSP := RSP + 8
00000870: call #12582867 with noreturn

00000b50: sub _fini(_fini_result)
00000b67: _fini_result :: out u32 = low:32[RAX]

00000015:
00000038: #12582911 := RSP
0000003c: RSP := RSP - 8
00000040: CF := #12582911 < 8
00000046: OF := high:1[(#12582911 ^ 8) & (#12582911 ^ RSP)]
0000004b: AF := 0x10 = (0x10 & (RSP ^ #12582911 ^ 8))
00000050: PF :=
          ~low:1[let $0 = RSP >> 4 ^ RSP in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
00000054: SF := high:1[RSP]
00000058: ZF := 0 = RSP
00000075: #12582908 := RSP
00000079: RSP := RSP + 8
0000007e: CF := RSP < #12582908
00000086: OF := ~high:1[#12582908] & (high:1[#12582908] | high:1[RSP]) &
          ~(high:1[#12582908] & high:1[RSP])
0000008b: AF := 0x10 = (0x10 & (RSP ^ #12582908 ^ 8))
00000090: PF :=
          ~low:1[let $0 = RSP >> 4 ^ RSP in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
00000094: SF := high:1[RSP]
00000098: ZF := 0 = RSP
000000a5: #12582905 := mem[RSP, el]:u64
000000a9: RSP := RSP + 8
000000ac: call #12582905 with noreturn

00000b51: sub _init(_init_result)
00000b68: _init_result :: out u32 = low:32[RAX]

00000a5c:
00000a74: #12582855 := RSP
00000a78: RSP := RSP - 8
00000a7c: CF := #12582855 < 8
00000a82: OF := high:1[(#12582855 ^ 8) & (#12582855 ^ RSP)]
00000a87: AF := 0x10 = (0x10 & (RSP ^ #12582855 ^ 8))
00000a8c: PF :=
          ~low:1[let $0 = RSP >> 4 ^ RSP in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
00000a90: SF := high:1[RSP]
00000a94: ZF := 0 = RSP
00000a9c: RAX := mem[0x3FD0, el]:u64
00000aae: #12582852 := RAX
00000ab1: OF := 0
00000ab4: CF := 0
00000ab7: AF := unknown[bits]:u1
00000abc: PF :=
          ~low:1[let $0 = #12582852 >> 4 ^ #12582852 in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
00000ac0: SF := high:1[#12582852]
00000ac4: ZF := 0 = #12582852
00000acb: when ZF goto %00000ac8
00000b52: goto %00000b22

00000b22:
00000b2e: #12582846 := RAX
00000b32: RSP := RSP - 8
00000b37: mem := mem with [RSP, el]:u64 <- 0x1012
00000b3a: call #12582846 with return %00000ac8

00000ac8:
00000ae9: #12582850 := RSP
00000aed: RSP := RSP + 8
00000af2: CF := RSP < #12582850
00000afa: OF := ~high:1[#12582850] & (high:1[#12582850] | high:1[RSP]) &
          ~(high:1[#12582850] & high:1[RSP])
00000aff: AF := 0x10 = (0x10 & (RSP ^ #12582850 ^ 8))
00000b04: PF :=
          ~low:1[let $0 = RSP >> 4 ^ RSP in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
00000b08: SF := high:1[RSP]
00000b0c: ZF := 0 = RSP
00000b19: #12582847 := mem[RSP, el]:u64
00000b1d: RSP := RSP + 8
00000b20: call #12582847 with noreturn

00000b53: sub _start(_start_result)
00000b69: _start_result :: out u32 = low:32[RAX]

00000251:
0000025b: RBP := 0
0000025e: AF := unknown[bits]:u1
00000261: ZF := 1
00000264: PF := 1
00000267: OF := 0
0000026a: CF := 0
0000026d: SF := 0
00000275: R9 := RDX
00000281: RSI := mem[RSP, el]:u64
00000285: RSP := RSP + 8
0000028d: RDX := RSP
0000029f: RSP := RSP & 0xFFFFFFFFFFFFFFF0
000002a2: OF := 0
000002a5: CF := 0
000002a8: AF := unknown[bits]:u1
000002ad: PF :=
          ~low:1[let $0 = RSP >> 4 ^ RSP in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
000002b1: SF := high:1[RSP]
000002b5: ZF := 0 = RSP
000002c3: #12582903 := RAX
000002c7: RSP := RSP - 8
000002cd: mem := mem with [RSP, el]:u64 <- #12582903
000002db: #12582902 := RSP
000002df: RSP := RSP - 8
000002e5: mem := mem with [RSP, el]:u64 <- #12582902
000002f1: R8 := 0
000002f4: AF := unknown[bits]:u1
000002f7: ZF := 1
000002fa: PF := 1
000002fd: OF := 0
00000300: CF := 0
00000303: SF := 0
0000030f: RCX := 0
00000312: AF := unknown[bits]:u1
00000315: ZF := 1
00000318: PF := 1
0000031b: OF := 0
0000031e: CF := 0
00000321: SF := 0
00000327: RDI := 0x1190
00000335: #12582901 := mem[0x3FC0, el]:u64
00000339: RSP := RSP - 8
0000033e: mem := mem with [RSP, el]:u64 <- 0x10C1
00000341: call @__libc_start_main with return %00000343

00000343:
00000346: call @intrinsic:hlt with return %00000348

00000348:
00000b54: call @deregister_tm_clones with noreturn

00000b55: sub deregister_tm_clones(deregister_tm_clones_result)
00000b6a: deregister_tm_clones_result :: out u32 = low:32[RAX]

00000352:
00000356: RDI := 0x4050
0000035c: RAX := 0x4050
00000379: #12582900 := RAX - RDI
0000037e: CF := RAX < RDI
00000385: OF := high:1[(RAX ^ RDI) & (RAX ^ #12582900)]
0000038b: AF := 0x10 = (0x10 & (#12582900 ^ RAX ^ RDI))
00000390: PF :=
          ~low:1[let $0 = #12582900 >> 4 ^ #12582900 in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
00000394: SF := high:1[#12582900]
00000398: ZF := 0 = #12582900
0000039f: when ZF goto %0000039c
00000b56: goto %000008d5

000008d5:
000008db: RAX := mem[0x3FC8, el]:u64
000008ed: #12582864 := RAX
000008f0: OF := 0
000008f3: CF := 0
000008f6: AF := unknown[bits]:u1
000008fb: PF :=
          ~low:1[let $0 = #12582864 >> 4 ^ #12582864 in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
000008ff: SF := high:1[#12582864]
00000903: ZF := 0 = #12582864
00000909: when ZF goto %0000039c
00000b57: goto %0000090d

0000039c:
000003ad: #12582898 := mem[RSP, el]:u64
000003b1: RSP := RSP + 8
000003b4: call #12582898 with noreturn

0000090d:
00000911: call RAX with noreturn

00000b58: sub frame_dummy(frame_dummy_result)
00000b6b: frame_dummy_result :: out u32 = low:32[RAX]

0000056b:
0000056f: call @register_tm_clones with noreturn

00000b59: sub free(free_ptr)
00000b6c: free_ptr :: in out u64 = RDI

00000749:
000009b0: call @free:external with return %000009b2

000009b2:
000009bb: RSP := RSP - 8
000009c0: mem := mem with [RSP, el]:u64 <- 0
000009c4: call @free@plt-0x10 with noreturn

00000b5a: sub free@plt-0x10(free@plt-0x10_result)
00000b6d: free@plt-0x10_result :: out u32 = low:32[RAX]

0000098a:
00000996: #12582862 := mem[0x3FF0, el]:u64
0000099a: RSP := RSP - 8
000009a0: mem := mem with [RSP, el]:u64 <- #12582862
000009a6: call mem[0x3FF8, el]:u64 with noreturn

00000b5b: sub main(main_argc, main_argv, main_result)
00000b6e: main_argc :: in u32 = low:32[RDI]
00000b6f: main_argv :: in out u64 = RSI
00000b70: main_result :: out u32 = low:32[RAX]

00000576:
00000582: #12582881 := RBP
00000586: RSP := RSP - 8
0000058c: mem := mem with [RSP, el]:u64 <- #12582881
00000594: RBP := RSP
000005ae: #12582880 := RSP
000005b2: RSP := RSP - 0x20
000005b6: CF := #12582880 < 0x20
000005bc: OF := high:1[(#12582880 ^ 0x20) & (#12582880 ^ RSP)]
000005c1: AF := 0x10 = (0x10 & (RSP ^ #12582880 ^ 0x20))
000005c6: PF :=
          ~low:1[let $0 = RSP >> 4 ^ RSP in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
000005ca: SF := high:1[RSP]
000005ce: ZF := 0 = RSP
000005d8: mem := mem with [RBP - 8, el]:u64 <- 0
000005e2: mem := mem with [RBP - 0x10, el]:u64 <- 0
000005e8: RDI := 0xB
000005f4: RSP := RSP - 8
000005f9: mem := mem with [RSP, el]:u64 <- 0x11B2
000005fb: call @malloc with return %000005fd

000005fd:
00000605: mem := mem with [0x4058, el]:u64 <- RAX
0000060d: RAX := mem[0x4058, el]:u64
00000619: mem := mem with [RBP - 0x20, el]:u64 <- RAX
0000061f: RDI := 0x4041
0000062b: RSP := RSP - 8
00000630: mem := mem with [RSP, el]:u64 <- 0x11D0
00000632: call @strlen with return %00000634

00000634:
0000063c: RDI := mem[RBP - 0x20, el]:u64
00000644: RDX := RAX
0000064a: RSI := 0x4041
00000656: RSP := RSP - 8
0000065b: mem := mem with [RSP, el]:u64 <- 0x11E3
0000065d: call @memcpy with return %0000065f

0000065f:
00000665: RDI := mem[0x4058, el]:u64
00000671: RSP := RSP - 8
00000676: mem := mem with [RSP, el]:u64 <- 0x11EF
00000678: call @puts with return %0000067a

0000067a:
00000680: RAX := mem[0x4058, el]:u64
0000069d: #12582877 := RAX
000006a1: RAX := RAX + 4
000006a6: CF := RAX < #12582877
000006ae: OF := ~high:1[#12582877] & (high:1[#12582877] | high:1[RAX]) &
          ~(high:1[#12582877] & high:1[RAX])
000006b3: AF := 0x10 = (0x10 & (RAX ^ #12582877 ^ 4))
000006b8: PF :=
          ~low:1[let $0 = RAX >> 4 ^ RAX in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
000006bc: SF := high:1[RAX]
000006c0: ZF := 0 = RAX
000006cc: mem := mem with [RBP - 8, el]:u64 <- RAX
000006d6: RAX := mem[RBP - 8, el]:u64
000006e0: mem := mem with [RAX] <- 0
000006e8: RAX := mem[0x4058, el]:u64
000006f4: mem := mem with [RBP - 0x18, el]:u64 <- RAX
000006fc: RDI := mem[0x4058, el]:u64
00000707: RSP := RSP - 8
0000070c: mem := mem with [RSP, el]:u64 <- 0x121C
0000070e: call @strlen with return %00000710

00000710:
00000718: RDI := mem[RBP - 0x18, el]:u64
00000720: RDX := RAX
00000726: RSI := 1
00000732: RSP := RSP - 8
00000737: mem := mem with [RSP, el]:u64 <- 0x122D
00000739: call @memset with return %0000073b

0000073b:
00000741: RDI := mem[0x4058, el]:u64
0000074d: RSP := RSP - 8
00000752: mem := mem with [RSP, el]:u64 <- 0x1239
00000754: call @free with return %00000756

00000756:
00000760: RAX := 0
00000763: AF := unknown[bits]:u1
00000766: ZF := 1
00000769: PF := 1
0000076c: OF := 0
0000076f: CF := 0
00000772: SF := 0
0000078f: #12582874 := RSP
00000793: RSP := RSP + 0x20
00000798: CF := RSP < #12582874
000007a0: OF := ~high:1[#12582874] & (high:1[#12582874] | high:1[RSP]) &
          ~(high:1[#12582874] & high:1[RSP])
000007a5: AF := 0x10 = (0x10 & (RSP ^ #12582874 ^ 0x20))
000007aa: PF :=
          ~low:1[let $0 = RSP >> 4 ^ RSP in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
000007ae: SF := high:1[RSP]
000007b2: ZF := 0 = RSP
000007be: RBP := mem[RSP, el]:u64
000007c2: RSP := RSP + 8
000007cf: #12582871 := mem[RSP, el]:u64
000007d3: RSP := RSP + 8
000007d6: call #12582871 with noreturn

00000b5c: sub malloc(malloc_size, malloc_result)
00000b71: malloc_size :: in u64 = RDI
00000b72: malloc_result :: out u64 = RAX

000005f0:
00000a2d: call @malloc:external with return %00000a2f

00000a2f:
00000a38: RSP := RSP - 8
00000a3d: mem := mem with [RSP, el]:u64 <- 5
00000a41: call @free@plt-0x10 with noreturn

00000b5d: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
00000b73: memcpy_dst :: in out u64 = RDI
00000b74: memcpy_src :: in out u64 = RSI
00000b75: memcpy_n :: in u64 = RDX
00000b76: memcpy_result :: out u64 = RAX

00000652:
00000a14: call @memcpy:external with return %00000a16

00000a16:
00000a1f: RSP := RSP - 8
00000a24: mem := mem with [RSP, el]:u64 <- 4
00000a28: call @free@plt-0x10 with noreturn

00000b5e: sub memset(memset_buf, memset_c, memset_n, memset_result)
00000b77: memset_buf :: in out u64 = RDI
00000b78: memset_c :: in u32 = low:32[RSI]
00000b79: memset_n :: in u64 = RDX
00000b7a: memset_result :: out u64 = RAX

0000072e:
000009fb: call @memset:external with return %000009fd

000009fd:
00000a06: RSP := RSP - 8
00000a0b: mem := mem with [RSP, el]:u64 <- 3
00000a0f: call @free@plt-0x10 with noreturn

00000b5f: sub puts(puts_s, puts_result)
00000b7b: puts_s :: in u64 = RDI
00000b7c: puts_result :: out u32 = low:32[RAX]

0000066d:
000009c9: call @puts:external with return %000009cb

000009cb:
000009d4: RSP := RSP - 8
000009d9: mem := mem with [RSP, el]:u64 <- 1
000009dd: call @free@plt-0x10 with noreturn

00000b60: sub register_tm_clones(register_tm_clones_result)
00000b7d: register_tm_clones_result :: out u32 = low:32[RAX]

000003bb:
000003bf: RDI := 0x4050
000003c5: RSI := 0x4050
000003e5: #12582897 := RSI
000003e9: #12582896 := RDI
000003ee: RSI := RSI - RDI
000003f3: CF := #12582897 < #12582896
000003fa: OF := high:1[(#12582897 ^ #12582896) & (#12582897 ^ RSI)]
00000400: AF := 0x10 = (0x10 & (RSI ^ #12582897 ^ #12582896))
00000405: PF :=
          ~low:1[let $0 = RSI >> 4 ^ RSI in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
00000409: SF := high:1[RSI]
0000040d: ZF := 0 = RSI
00000415: RAX := RSI
0000042a: #12582894 := RSI
0000042e: RSI := RSI >> 0x3F
00000432: CF := high:1[#12582894 << 1]
00000436: SF := high:1[RSI]
0000043a: ZF := 0 = RSI
0000043f: PF :=
          ~low:1[let $0 = RSI >> 4 ^ RSI in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
00000442: AF := unknown[bits]:u1
00000445: OF := unknown[bits]:u1
0000045a: #12582892 := RAX
0000045e: RAX := RAX ~>> 3
00000462: CF := high:1[#12582892 << 0x3D]
00000466: SF := high:1[RAX]
0000046a: ZF := 0 = RAX
0000046f: PF :=
          ~low:1[let $0 = RAX >> 4 ^ RAX in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
00000472: AF := unknown[bits]:u1
00000475: OF := unknown[bits]:u1
00000497: #12582890 := RSI
0000049b: #12582889 := RAX
000004a0: RSI := RSI + #12582889
000004a5: CF := RSI < #12582890
000004ae: OF := high:1[#12582890] = high:1[#12582889] &
          (high:1[#12582890] | high:1[RSI]) &
          ~(high:1[#12582890] & high:1[RSI])
000004b4: AF := 0x10 = (0x10 & (RSI ^ #12582890 ^ #12582889))
000004b9: PF :=
          ~low:1[let $0 = RSI >> 4 ^ RSI in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
000004bd: SF := high:1[RSI]
000004c1: ZF := 0 = RSI
000004d6: #12582887 := RSI
000004da: RSI := RSI ~>> 1
000004de: CF := high:1[#12582887 << 0x3F]
000004e2: SF := high:1[RSI]
000004e6: ZF := 0 = RSI
000004eb: PF :=
          ~low:1[let $0 = RSI >> 4 ^ RSI in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
000004ee: AF := unknown[bits]:u1
000004f1: OF := 0
000004f8: when ZF goto %000004f5
00000b61: goto %00000892

00000892:
00000898: RAX := mem[0x3FD8, el]:u64
000008aa: #12582866 := RAX
000008ad: OF := 0
000008b0: CF := 0
000008b3: AF := unknown[bits]:u1
000008b8: PF :=
          ~low:1[let $0 = #12582866 >> 4 ^ #12582866 in
                 let $1 = $0 >> 2 ^ $0 in $1 >> 1 ^ $1]
000008bc: SF := high:1[#12582866]
000008c0: ZF := 0 = #12582866
000008c6: when ZF goto %000004f5
00000b62: goto %000008ca

000004f5:
00000506: #12582885 := mem[RSP, el]:u64
0000050a: RSP := RSP + 8
0000050d: call #12582885 with noreturn

000008ca:
000008ce: call RAX with noreturn

00000b63: sub strlen(strlen_s, strlen_result)
00000b7e: strlen_s :: in u64 = RDI
00000b7f: strlen_result :: out u64 = RAX

00000627:
000009e2: call @strlen:external with return %000009e4

000009e4:
000009ed: RSP := RSP - 8
000009f2: mem := mem with [RSP, el]:u64 <- 2
000009f6: call @free@plt-0x10 with noreturn

0000033f: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000b80: __libc_start_main_main :: in u64 = RDI
00000b81: __libc_start_main_arg2 :: in u32 = low:32[RSI]
00000b82: __libc_start_main_arg3 :: in out u64 = RDX
00000b83: __libc_start_main_auxv :: in out u64 = RCX
00000b84: __libc_start_main_result :: out u32 = low:32[RAX]

00000344: sub intrinsic:hlt()


000009ae: sub free:external(free:external_result)
00000b85: free:external_result :: out u32 = low:32[RAX]

000009c7: sub puts:external(puts:external_result)
00000b86: puts:external_result :: out u32 = low:32[RAX]

000009e0: sub strlen:external(strlen:external_result)
00000b87: strlen:external_result :: out u32 = low:32[RAX]

000009f9: sub memset:external(memset:external_result)
00000b88: memset:external_result :: out u32 = low:32[RAX]

00000a12: sub memcpy:external(memcpy:external_result)
00000b89: memcpy:external_result :: out u32 = low:32[RAX]

00000a2b: sub malloc:external(malloc:external_result)
00000b8a: malloc:external_result :: out u32 = low:32[RAX]

00000b47: sub __cxa_finalize:external(__cxa_finalize:external_result)
00000b8b: __cxa_finalize:external_result :: out u32 = low:32[RAX]
