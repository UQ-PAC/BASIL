000008a9: program
00000862: sub __cxa_finalize(__cxa_finalize_result)
000008aa: __cxa_finalize_result :: out u32 = low:32[R0]

000004d2:
00000656: R16 := 0x20000
0000065d: R17 := mem[R16 + 0x18, el]:u64
00000663: R16 := R16 + 0x18
00000668: call R17 with noreturn

00000863: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008ab: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002ff:
00000303: #3 := R31 - 0x20
00000309: mem := mem with [#3, el]:u64 <- R29
0000030f: mem := mem with [#3 + 8, el]:u64 <- R30
00000313: R31 := #3
00000319: R29 := R31
00000321: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000326: R19 := 0x20000
0000032d: R0 := pad:64[mem[R19 + 0x70]]
00000333: when 0:0[R0] goto %00000331
0000089f: goto %0000049b

0000049b:
0000049e: R0 := 0x1F000
000004a5: R0 := mem[R0 + 0xFC8, el]:u64
000004ab: when R0 = 0 goto %000004a9
000008a0: goto %000004c2

000004c2:
000004c5: R0 := 0x20000
000004cc: R0 := mem[R0 + 0x58, el]:u64
000004d1: R30 := 0x8F0
000004d4: call @__cxa_finalize with return %000004a9

000004a9:
000004b1: R30 := 0x8F4
000004b3: call @deregister_tm_clones with return %000004b5

000004b5:
000004b8: R0 := 1
000004c0: mem := mem with [R19 + 0x70] <- 7:0[R0]
000008a1: goto %00000331

00000331:
0000033b: R19 := mem[R31 + 0x10, el]:u64
00000342: R29 := mem[R31, el]:u64
00000347: R30 := mem[R31 + 8, el]:u64
0000034b: R31 := R31 + 0x20
00000350: call R30 with noreturn

00000867: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008ac: __libc_start_main_main :: in u64 = R0
000008ad: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008ae: __libc_start_main_arg3 :: in out u64 = R2
000008af: __libc_start_main_auxv :: in out u64 = R3
000008b0: __libc_start_main_result :: out u32 = low:32[R0]

00000258:
00000640: R16 := 0x20000
00000647: R17 := mem[R16 + 0x10, el]:u64
0000064d: R16 := R16 + 0x10
00000652: call R17 with noreturn

00000868: sub _fini(_fini_result)
000008b1: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000869: sub _init(_init_result)
000008b2: _init_result :: out u32 = low:32[R0]

00000780:
00000786: #7 := R31 - 0x10
0000078c: mem := mem with [#7, el]:u64 <- R29
00000792: mem := mem with [#7 + 8, el]:u64 <- R30
00000796: R31 := #7
0000079c: R29 := R31
000007a1: R30 := 0x738
000007a3: call @call_weak_fn with return %000007a5

000007a5:
000007aa: R29 := mem[R31, el]:u64
000007af: R30 := mem[R31 + 8, el]:u64
000007b3: R31 := R31 + 0x10
000007b8: call R30 with noreturn

0000086a: sub _start(_start_result)
000008b3: _start_result :: out u32 = low:32[R0]

00000219:
0000021e: R29 := 0
00000223: R30 := 0
00000229: R5 := R0
00000230: R1 := mem[R31, el]:u64
00000236: R2 := R31 + 8
0000023c: R6 := R31
00000241: R0 := 0x1F000
00000248: R0 := mem[R0 + 0xFD8, el]:u64
0000024d: R3 := 0
00000252: R4 := 0
00000257: R30 := 0x830
0000025a: call @__libc_start_main with return %0000025c

0000025c:
0000025f: R30 := 0x834
00000262: call @abort with return %000008a2

000008a2:
000008a3: call @call_weak_fn with noreturn

0000086d: sub abort()


00000260:
000006ae: R16 := 0x20000
000006b5: R17 := mem[R16 + 0x38, el]:u64
000006bb: R16 := R16 + 0x38
000006c0: call R17 with noreturn

0000086e: sub call_weak_fn(call_weak_fn_result)
000008b4: call_weak_fn_result :: out u32 = low:32[R0]

00000264:
00000267: R0 := 0x1F000
0000026e: R0 := mem[R0 + 0xFD0, el]:u64
00000274: when R0 = 0 goto %00000272
000008a4: goto %00000512

00000272:
0000027a: call R30 with noreturn

00000512:
00000515: goto @__gmon_start__

00000513:
00000698: R16 := 0x20000
0000069f: R17 := mem[R16 + 0x30, el]:u64
000006a5: R16 := R16 + 0x30
000006aa: call R17 with noreturn

00000870: sub deregister_tm_clones(deregister_tm_clones_result)
000008b5: deregister_tm_clones_result :: out u32 = low:32[R0]

00000280:
00000283: R0 := 0x20000
00000289: R0 := R0 + 0x70
0000028e: R1 := 0x20000
00000294: R1 := R1 + 0x70
0000029a: #1 := ~R0
0000029f: #2 := R1 + ~R0
000002a5: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002ab: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002af: ZF := #2 + 1 = 0
000002b3: NF := 63:63[#2 + 1]
000002b9: when ZF goto %000002b7
000008a5: goto %000004f4

000004f4:
000004f7: R1 := 0x1F000
000004fe: R1 := mem[R1 + 0xFC0, el]:u64
00000503: when R1 = 0 goto %000002b7
000008a6: goto %00000507

000002b7:
000002bf: call R30 with noreturn

00000507:
0000050b: R16 := R1
00000510: call R16 with noreturn

00000873: sub frame_dummy(frame_dummy_result)
000008b6: frame_dummy_result :: out u32 = low:32[R0]

00000356:
00000358: call @register_tm_clones with noreturn

00000874: sub free(free_ptr)
000008b7: free_ptr :: in out u64 = R0

00000477:
000006da: R16 := 0x20000
000006e1: R17 := mem[R16 + 0x48, el]:u64
000006e7: R16 := R16 + 0x48
000006ec: call R17 with noreturn

00000875: sub main(main_argc, main_argv, main_result)
000008b8: main_argc :: in u32 = low:32[R0]
000008b9: main_argv :: in out u64 = R1
000008ba: main_result :: out u32 = low:32[R0]

0000035a:
0000035e: R31 := R31 - 0x40
00000364: #4 := R31 + 0x30
0000036a: mem := mem with [#4, el]:u64 <- R29
00000370: mem := mem with [#4 + 8, el]:u64 <- R30
00000376: R29 := R31 + 0x30
0000037d: mem := mem with [R29 - 8, el]:u64 <- 0
00000384: mem := mem with [R29 - 0x10, el]:u64 <- 0
00000389: R0 := 0xB
0000038e: R30 := 0x930
00000391: call @malloc with return %00000393

00000393:
00000396: R8 := 0x20000
0000039e: mem := mem with [R31 + 0x18, el]:u64 <- R8
000003a6: mem := mem with [R8 + 0x78, el]:u64 <- R0
000003ad: R8 := mem[R8 + 0x78, el]:u64
000003b5: mem := mem with [R31 + 8, el]:u64 <- R8
000003ba: R0 := 0x20000
000003c0: R0 := R0 + 0x61
000003c8: mem := mem with [R31, el]:u64 <- R0
000003cd: R30 := 0x954
000003d0: call @strlen with return %000003d2

000003d2:
000003d7: R1 := mem[R31, el]:u64
000003dd: R2 := R0
000003e4: R0 := mem[R31 + 8, el]:u64
000003e9: R30 := 0x964
000003ec: call @memcpy with return %000003ee

000003ee:
000003f3: R8 := mem[R31 + 0x18, el]:u64
000003fa: R0 := mem[R8 + 0x78, el]:u64
000003ff: R30 := 0x970
00000402: call @puts with return %00000404

00000404:
00000409: R8 := mem[R31 + 0x18, el]:u64
00000410: R9 := mem[R8 + 0x78, el]:u64
00000416: R9 := R9 + 4
0000041e: mem := mem with [R29 - 8, el]:u64 <- R9
00000425: R9 := mem[R29 - 8, el]:u64
0000042c: mem := mem with [R9] <- 0
00000433: R9 := mem[R8 + 0x78, el]:u64
0000043b: mem := mem with [R31 + 0x10, el]:u64 <- R9
00000442: R0 := mem[R8 + 0x78, el]:u64
00000447: R30 := 0x998
00000449: call @strlen with return %0000044b

0000044b:
0000044f: R2 := R0
00000456: R0 := mem[R31 + 0x10, el]:u64
0000045b: R1 := 1
00000460: R30 := 0x9A8
00000463: call @memset with return %00000465

00000465:
0000046a: R8 := mem[R31 + 0x18, el]:u64
00000471: R0 := mem[R8 + 0x78, el]:u64
00000476: R30 := 0x9B4
00000479: call @free with return %0000047b

0000047b:
0000047e: R0 := 0
00000484: #5 := R31 + 0x30
00000489: R29 := mem[#5, el]:u64
0000048e: R30 := mem[#5 + 8, el]:u64
00000494: R31 := R31 + 0x40
00000499: call R30 with noreturn

00000876: sub malloc(malloc_size, malloc_result)
000008bb: malloc_size :: in u64 = R0
000008bc: malloc_result :: out u64 = R0

0000038f:
0000066c: R16 := 0x20000
00000673: R17 := mem[R16 + 0x20, el]:u64
00000679: R16 := R16 + 0x20
0000067e: call R17 with noreturn

00000877: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
000008bd: memcpy_dst :: in out u64 = R0
000008be: memcpy_src :: in out u64 = R1
000008bf: memcpy_n :: in u64 = R2
000008c0: memcpy_result :: out u64 = R0

000003ea:
00000614: R16 := 0x20000
0000061b: R17 := mem[R16, el]:u64
00000621: R16 := R16
00000626: call R17 with noreturn

00000878: sub memset(memset_buf, memset_c, memset_n, memset_result)
000008c1: memset_buf :: in out u64 = R0
000008c2: memset_c :: in u32 = low:32[R1]
000008c3: memset_n :: in u64 = R2
000008c4: memset_result :: out u64 = R0

00000461:
00000682: R16 := 0x20000
00000689: R17 := mem[R16 + 0x28, el]:u64
0000068f: R16 := R16 + 0x28
00000694: call R17 with noreturn

00000879: sub puts(puts_s, puts_result)
000008c5: puts_s :: in u64 = R0
000008c6: puts_result :: out u32 = low:32[R0]

00000400:
000006c4: R16 := 0x20000
000006cb: R17 := mem[R16 + 0x40, el]:u64
000006d1: R16 := R16 + 0x40
000006d6: call R17 with noreturn

0000087a: sub register_tm_clones(register_tm_clones_result)
000008c7: register_tm_clones_result :: out u32 = low:32[R0]

000002c1:
000002c4: R0 := 0x20000
000002ca: R0 := R0 + 0x70
000002cf: R1 := 0x20000
000002d5: R1 := R1 + 0x70
000002dc: R1 := R1 + ~R0 + 1
000002e2: R2 := 0.63:63[R1]
000002e9: R1 := R2 + (R1 ~>> 3)
000002ef: R1 := extend:64[63:1[R1]]
000002f5: when R1 = 0 goto %000002f3
000008a7: goto %000004d6

000004d6:
000004d9: R2 := 0x1F000
000004e0: R2 := mem[R2 + 0xFE0, el]:u64
000004e5: when R2 = 0 goto %000002f3
000008a8: goto %000004e9

000002f3:
000002fb: call R30 with noreturn

000004e9:
000004ed: R16 := R2
000004f2: call R16 with noreturn

0000087d: sub strlen(strlen_s, strlen_result)
000008c8: strlen_s :: in u64 = R0
000008c9: strlen_result :: out u64 = R0

000003ce:
0000062a: R16 := 0x20000
00000631: R17 := mem[R16 + 8, el]:u64
00000637: R16 := R16 + 8
0000063c: call R17 with noreturn
