var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 1980bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main_1812();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_VF, Gamma_ZF, Gamma_mem, Gamma_stack, NF, R0, R31, R8, R9, VF, ZF, mem, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le(mem, 1980bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 1980bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main_1812()
{
  var Cse0__5_1_2: bv32;
  var Cse0__5_2_8: bv32;
  var Cse0__5_4_1: bv32;
  var Gamma_Cse0__5_1_2: bool;
  var Gamma_Cse0__5_2_8: bool;
  var Gamma_Cse0__5_4_1: bool;
  var Gamma_load3: bool;
  var Gamma_load4: bool;
  var Gamma_load5: bool;
  var Gamma_load6: bool;
  var Gamma_load7: bool;
  var Gamma_load8: bool;
  var load3: bv32;
  var load4: bv32;
  var load5: bv32;
  var load6: bv32;
  var load7: bv32;
  var load8: bv32;
  main_1812__0__5~JKHoJWR8~6Qpjlk4xLag:
    assume {:captureState "main_1812__0__5~JKHoJWR8~6Qpjlk4xLag"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), true);
    assume {:captureState "1816_0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 8bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R0);
    assume {:captureState "1820_0"} true;
    load4, Gamma_load4 := memory_load32_le(stack, bvadd64(R31, 8bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 8bv64));
    R9, Gamma_R9 := zero_extend32_32(load4), Gamma_load4;
    R8, Gamma_R8 := 69632bv64, true;
    call rely();
    assert (L(mem, bvadd64(R8, 52bv64)) ==> Gamma_R9);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R8, 52bv64), R9[32:0]), gamma_store32(Gamma_mem, bvadd64(R8, 52bv64), Gamma_R9);
    assume {:captureState "1832_0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 4bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 4bv64), true);
    assume {:captureState "1836_0"} true;
    call rely();
    load5, Gamma_load5 := memory_load32_le(mem, bvadd64(R8, 52bv64)), (gamma_load32(Gamma_mem, bvadd64(R8, 52bv64)) || L(mem, bvadd64(R8, 52bv64)));
    R8, Gamma_R8 := zero_extend32_32(load5), Gamma_load5;
    Cse0__5_2_8, Gamma_Cse0__5_2_8 := bvadd32(R8[32:0], 0bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp32(Cse0__5_2_8, Cse0__5_2_8)), Gamma_Cse0__5_2_8;
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_2_8), bvadd33(zero_extend1_32(R8[32:0]), 4294967296bv33))), (Gamma_R8 && Gamma_Cse0__5_2_8);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_2_8, 0bv32), Gamma_Cse0__5_2_8;
    NF, Gamma_NF := Cse0__5_2_8[32:31], Gamma_Cse0__5_2_8;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5_2_8), Gamma_Cse0__5_2_8;
    assert Gamma_ZF;
    goto main_1812__0__5~JKHoJWR8~6Qpjlk4xLag$__0, main_1812__0__5~JKHoJWR8~6Qpjlk4xLag$__1;
  main_1812__0__5~JKHoJWR8~6Qpjlk4xLag$__1:
    assume {:captureState "main_1812__0__5~JKHoJWR8~6Qpjlk4xLag$__1"} true;
    assume (!(ZF == 1bv1));
    R8, Gamma_R8 := 1bv64, true;
    assert Gamma_R8;
    goto main_1812__0__5~JKHoJWR8~6Qpjlk4xLag_goto_main_1812__3__4zQQ78p3RBGN7NOzIYTxvg, main_1812__0__5~JKHoJWR8~6Qpjlk4xLag_goto_main_1812__1__KuIORB~IS7~W8tkjfAUb_Q;
  main_1812__0__5~JKHoJWR8~6Qpjlk4xLag$__0:
    assume {:captureState "main_1812__0__5~JKHoJWR8~6Qpjlk4xLag$__0"} true;
    assume (ZF == 1bv1);
    R8, Gamma_R8 := 0bv64, true;
    assert Gamma_R8;
    goto main_1812__0__5~JKHoJWR8~6Qpjlk4xLag_goto_main_1812__3__4zQQ78p3RBGN7NOzIYTxvg, main_1812__0__5~JKHoJWR8~6Qpjlk4xLag_goto_main_1812__1__KuIORB~IS7~W8tkjfAUb_Q;
  main_1812__0__5~JKHoJWR8~6Qpjlk4xLag_goto_main_1812__1__KuIORB~IS7~W8tkjfAUb_Q:
    assume {:captureState "main_1812__0__5~JKHoJWR8~6Qpjlk4xLag_goto_main_1812__1__KuIORB~IS7~W8tkjfAUb_Q"} true;
    assume (!(R8[1:0] == 1bv1));
    goto main_1812__1__KuIORB~IS7~W8tkjfAUb_Q;
  main_1812__1__KuIORB~IS7~W8tkjfAUb_Q:
    assume {:captureState "main_1812__1__KuIORB~IS7~W8tkjfAUb_Q"} true;
    goto main_1812__2__YnjHRw7ZSTa3I0Dc55xViw;
  main_1812__2__YnjHRw7ZSTa3I0Dc55xViw:
    assume {:captureState "main_1812__2__YnjHRw7ZSTa3I0Dc55xViw"} true;
    R8, Gamma_R8 := 3bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 4bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 4bv64), Gamma_R8);
    assume {:captureState "1864_0"} true;
    goto main_1812__3__4zQQ78p3RBGN7NOzIYTxvg;
  main_1812__0__5~JKHoJWR8~6Qpjlk4xLag_goto_main_1812__3__4zQQ78p3RBGN7NOzIYTxvg:
    assume {:captureState "main_1812__0__5~JKHoJWR8~6Qpjlk4xLag_goto_main_1812__3__4zQQ78p3RBGN7NOzIYTxvg"} true;
    assume (R8[1:0] == 1bv1);
    goto main_1812__3__4zQQ78p3RBGN7NOzIYTxvg;
  main_1812__3__4zQQ78p3RBGN7NOzIYTxvg:
    assume {:captureState "main_1812__3__4zQQ78p3RBGN7NOzIYTxvg"} true;
    R8, Gamma_R8 := 69632bv64, true;
    call rely();
    load3, Gamma_load3 := memory_load32_le(mem, bvadd64(R8, 52bv64)), (gamma_load32(Gamma_mem, bvadd64(R8, 52bv64)) || L(mem, bvadd64(R8, 52bv64)));
    R8, Gamma_R8 := zero_extend32_32(load3), Gamma_load3;
    Cse0__5_1_2, Gamma_Cse0__5_1_2 := bvadd32(R8[32:0], 4294967295bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_1_2), bvadd33(sign_extend1_32(R8[32:0]), 8589934591bv33))), (Gamma_R8 && Gamma_Cse0__5_1_2);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_1_2), bvadd33(zero_extend1_32(R8[32:0]), 4294967295bv33))), (Gamma_R8 && Gamma_Cse0__5_1_2);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_1_2, 0bv32), Gamma_Cse0__5_1_2;
    NF, Gamma_NF := Cse0__5_1_2[32:31], Gamma_Cse0__5_1_2;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5_1_2), Gamma_Cse0__5_1_2;
    assert Gamma_ZF;
    goto main_1812__3__4zQQ78p3RBGN7NOzIYTxvg$__0, main_1812__3__4zQQ78p3RBGN7NOzIYTxvg$__1;
  main_1812__3__4zQQ78p3RBGN7NOzIYTxvg$__1:
    assume {:captureState "main_1812__3__4zQQ78p3RBGN7NOzIYTxvg$__1"} true;
    assume (!(ZF == 1bv1));
    R8, Gamma_R8 := 1bv64, true;
    assert Gamma_R8;
    goto main_1812__3__4zQQ78p3RBGN7NOzIYTxvg_goto_main_1812__6__Bi8U6733SjiyOwaLV4yoGg, main_1812__3__4zQQ78p3RBGN7NOzIYTxvg_goto_main_1812__4__mvvj12GjRhuZDH0mklvA1Q;
  main_1812__3__4zQQ78p3RBGN7NOzIYTxvg$__0:
    assume {:captureState "main_1812__3__4zQQ78p3RBGN7NOzIYTxvg$__0"} true;
    assume (ZF == 1bv1);
    R8, Gamma_R8 := 0bv64, true;
    assert Gamma_R8;
    goto main_1812__3__4zQQ78p3RBGN7NOzIYTxvg_goto_main_1812__6__Bi8U6733SjiyOwaLV4yoGg, main_1812__3__4zQQ78p3RBGN7NOzIYTxvg_goto_main_1812__4__mvvj12GjRhuZDH0mklvA1Q;
  main_1812__3__4zQQ78p3RBGN7NOzIYTxvg_goto_main_1812__4__mvvj12GjRhuZDH0mklvA1Q:
    assume {:captureState "main_1812__3__4zQQ78p3RBGN7NOzIYTxvg_goto_main_1812__4__mvvj12GjRhuZDH0mklvA1Q"} true;
    assume (!(R8[1:0] == 1bv1));
    goto main_1812__4__mvvj12GjRhuZDH0mklvA1Q;
  main_1812__4__mvvj12GjRhuZDH0mklvA1Q:
    assume {:captureState "main_1812__4__mvvj12GjRhuZDH0mklvA1Q"} true;
    goto main_1812__5__qyZYtjM~TZG82G5a2M8umw;
  main_1812__5__qyZYtjM~TZG82G5a2M8umw:
    assume {:captureState "main_1812__5__qyZYtjM~TZG82G5a2M8umw"} true;
    R8, Gamma_R8 := 5bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 4bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 4bv64), Gamma_R8);
    assume {:captureState "1900_0"} true;
    goto main_1812__6__Bi8U6733SjiyOwaLV4yoGg;
  main_1812__3__4zQQ78p3RBGN7NOzIYTxvg_goto_main_1812__6__Bi8U6733SjiyOwaLV4yoGg:
    assume {:captureState "main_1812__3__4zQQ78p3RBGN7NOzIYTxvg_goto_main_1812__6__Bi8U6733SjiyOwaLV4yoGg"} true;
    assume (R8[1:0] == 1bv1);
    goto main_1812__6__Bi8U6733SjiyOwaLV4yoGg;
  main_1812__6__Bi8U6733SjiyOwaLV4yoGg:
    assume {:captureState "main_1812__6__Bi8U6733SjiyOwaLV4yoGg"} true;
    load7, Gamma_load7 := memory_load32_le(stack, bvadd64(R31, 4bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 4bv64));
    R8, Gamma_R8 := zero_extend32_32(load7), Gamma_load7;
    Cse0__5_4_1, Gamma_Cse0__5_4_1 := bvadd32(R8[32:0], 4294967293bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_4_1), bvadd33(sign_extend1_32(R8[32:0]), 8589934589bv33))), (Gamma_R8 && Gamma_Cse0__5_4_1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_4_1), bvadd33(zero_extend1_32(R8[32:0]), 4294967293bv33))), (Gamma_R8 && Gamma_Cse0__5_4_1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_4_1, 0bv32), Gamma_Cse0__5_4_1;
    NF, Gamma_NF := Cse0__5_4_1[32:31], Gamma_Cse0__5_4_1;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5_4_1), Gamma_Cse0__5_4_1;
    assert Gamma_ZF;
    goto main_1812__6__Bi8U6733SjiyOwaLV4yoGg$__0, main_1812__6__Bi8U6733SjiyOwaLV4yoGg$__1;
  main_1812__6__Bi8U6733SjiyOwaLV4yoGg$__1:
    assume {:captureState "main_1812__6__Bi8U6733SjiyOwaLV4yoGg$__1"} true;
    assume (!(ZF == 1bv1));
    R8, Gamma_R8 := 1bv64, true;
    assert Gamma_R8;
    goto main_1812__6__Bi8U6733SjiyOwaLV4yoGg_goto_main_1812__9__ZE4m7PzcQaiZtThKfMYMbw, main_1812__6__Bi8U6733SjiyOwaLV4yoGg_goto_main_1812__7__Ke1U9A74QzyX5d6~BvAXuA;
  main_1812__6__Bi8U6733SjiyOwaLV4yoGg$__0:
    assume {:captureState "main_1812__6__Bi8U6733SjiyOwaLV4yoGg$__0"} true;
    assume (ZF == 1bv1);
    R8, Gamma_R8 := 0bv64, true;
    assert Gamma_R8;
    goto main_1812__6__Bi8U6733SjiyOwaLV4yoGg_goto_main_1812__9__ZE4m7PzcQaiZtThKfMYMbw, main_1812__6__Bi8U6733SjiyOwaLV4yoGg_goto_main_1812__7__Ke1U9A74QzyX5d6~BvAXuA;
  main_1812__6__Bi8U6733SjiyOwaLV4yoGg_goto_main_1812__7__Ke1U9A74QzyX5d6~BvAXuA:
    assume {:captureState "main_1812__6__Bi8U6733SjiyOwaLV4yoGg_goto_main_1812__7__Ke1U9A74QzyX5d6~BvAXuA"} true;
    assume (!(R8[1:0] == 1bv1));
    goto main_1812__7__Ke1U9A74QzyX5d6~BvAXuA;
  main_1812__7__Ke1U9A74QzyX5d6~BvAXuA:
    assume {:captureState "main_1812__7__Ke1U9A74QzyX5d6~BvAXuA"} true;
    goto main_1812__8__Y0H3mt1KQG6tdER4yPd20Q;
  main_1812__8__Y0H3mt1KQG6tdER4yPd20Q:
    assume {:captureState "main_1812__8__Y0H3mt1KQG6tdER4yPd20Q"} true;
    R8, Gamma_R8 := 69632bv64, true;
    call rely();
    load6, Gamma_load6 := memory_load32_le(mem, bvadd64(R8, 56bv64)), (gamma_load32(Gamma_mem, bvadd64(R8, 56bv64)) || L(mem, bvadd64(R8, 56bv64)));
    R8, Gamma_R8 := zero_extend32_32(load6), Gamma_load6;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 4bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 4bv64), Gamma_R8);
    assume {:captureState "1936_0"} true;
    goto main_1812__9__ZE4m7PzcQaiZtThKfMYMbw;
  main_1812__6__Bi8U6733SjiyOwaLV4yoGg_goto_main_1812__9__ZE4m7PzcQaiZtThKfMYMbw:
    assume {:captureState "main_1812__6__Bi8U6733SjiyOwaLV4yoGg_goto_main_1812__9__ZE4m7PzcQaiZtThKfMYMbw"} true;
    assume (R8[1:0] == 1bv1);
    goto main_1812__9__ZE4m7PzcQaiZtThKfMYMbw;
  main_1812__9__ZE4m7PzcQaiZtThKfMYMbw:
    assume {:captureState "main_1812__9__ZE4m7PzcQaiZtThKfMYMbw"} true;
    R8, Gamma_R8 := 69632bv64, true;
    call rely();
    load8, Gamma_load8 := memory_load32_le(mem, bvadd64(R8, 56bv64)), (gamma_load32(Gamma_mem, bvadd64(R8, 56bv64)) || L(mem, bvadd64(R8, 56bv64)));
    R0, Gamma_R0 := zero_extend32_32(load8), Gamma_load8;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_1812_basil_return;
  main_1812_basil_return:
    assume {:captureState "main_1812_basil_return"} true;
    return;
}

