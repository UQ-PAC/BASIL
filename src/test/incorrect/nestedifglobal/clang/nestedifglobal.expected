var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1976bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1977bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1978bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1979bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main(R0_in: bv64, Gamma_R0_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load8_le(mem, 1976bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1977bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1978bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1979bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load8_le(mem, 1976bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1977bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1978bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1979bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool)
{
  var Gamma_R0_2: bool;
  var Gamma_R8_10: bool;
  var Gamma_R8_15: bool;
  var Gamma_R8_17: bool;
  var Gamma_R8_2: bool;
  var Gamma_R8_22: bool;
  var Gamma_R8_24: bool;
  var Gamma_R8_26: bool;
  var Gamma_R8_7: bool;
  var Gamma_R9_1: bool;
  var R0_2: bv64;
  var R8_10: bv32;
  var R8_15: bv64;
  var R8_17: bv32;
  var R8_2: bv32;
  var R8_22: bv64;
  var R8_24: bv64;
  var R8_26: bv64;
  var R8_7: bv64;
  var R9_1: bv64;
  lmain:
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), R0_in[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), Gamma_R0_in);
    R9_1, Gamma_R9_1 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551608bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64));
    call rely();
    assert (L(mem, 69684bv64) ==> Gamma_R9_1);
    mem, Gamma_mem := memory_store32_le(mem, 69684bv64, R9_1[32:0]), gamma_store32(Gamma_mem, 69684bv64, Gamma_R9_1);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), true);
    call rely();
    R8_2, Gamma_R8_2 := memory_load32_le(mem, 69684bv64), (gamma_load32(Gamma_mem, 69684bv64) || L(mem, 69684bv64));
    assert Gamma_R8_2;
    goto lmain_goto_l00000390, lmain_goto_l00000393;
  lmain_goto_l00000393:
    assume (!(R8_2 == 0bv32));
    R8_7, Gamma_R8_7 := 1bv64, true;
    goto l00000396;
  lmain_goto_l00000390:
    assume (R8_2 == 0bv32);
    R8_7, Gamma_R8_7 := 0bv64, true;
    goto l00000396;
  l00000396:
    assert Gamma_R8_7;
    goto l00000396_goto_l0000039e, l00000396_goto_l0000045d;
  l00000396_goto_l0000045d:
    assume (!(R8_7[1:0] == 1bv1));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), 3bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), true);
    goto l0000039e;
  l00000396_goto_l0000039e:
    assume (R8_7[1:0] == 1bv1);
    goto l0000039e;
  l0000039e:
    call rely();
    R8_10, Gamma_R8_10 := memory_load32_le(mem, 69684bv64), (gamma_load32(Gamma_mem, 69684bv64) || L(mem, 69684bv64));
    assert Gamma_R8_10;
    goto l0000039e_goto_l000003ce, l0000039e_goto_l000003d1;
  l0000039e_goto_l000003d1:
    assume (!(R8_10 == 1bv32));
    R8_15, Gamma_R8_15 := 1bv64, true;
    goto l000003d4;
  l0000039e_goto_l000003ce:
    assume (R8_10 == 1bv32);
    R8_15, Gamma_R8_15 := 0bv64, true;
    goto l000003d4;
  l000003d4:
    assert Gamma_R8_15;
    goto l000003d4_goto_l000003dc, l000003d4_goto_l00000448;
  l000003d4_goto_l00000448:
    assume (!(R8_15[1:0] == 1bv1));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), 5bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), true);
    goto l000003dc;
  l000003d4_goto_l000003dc:
    assume (R8_15[1:0] == 1bv1);
    goto l000003dc;
  l000003dc:
    R8_17, Gamma_R8_17 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551604bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64));
    assert Gamma_R8_17;
    goto l000003dc_goto_l00000407, l000003dc_goto_l0000040a;
  l000003dc_goto_l0000040a:
    assume (!(R8_17 == 3bv32));
    R8_22, Gamma_R8_22 := 1bv64, true;
    goto l0000040d;
  l000003dc_goto_l00000407:
    assume (R8_17 == 3bv32);
    R8_22, Gamma_R8_22 := 0bv64, true;
    goto l0000040d;
  l0000040d:
    assert Gamma_R8_22;
    goto l0000040d_goto_l00000415, l0000040d_goto_l0000042c;
  l0000040d_goto_l0000042c:
    assume (!(R8_22[1:0] == 1bv1));
    call rely();
    R8_24, Gamma_R8_24 := zero_extend32_32(memory_load32_le(mem, 69688bv64)), (gamma_load32(Gamma_mem, 69688bv64) || L(mem, 69688bv64));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), R8_24[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), Gamma_R8_24);
    R8_26, Gamma_R8_26 := R8_24, Gamma_R8_24;
    goto l00000415;
  l0000040d_goto_l00000415:
    assume (R8_22[1:0] == 1bv1);
    R8_26, Gamma_R8_26 := R8_22, Gamma_R8_22;
    goto l00000415;
  l00000415:
    R0_2, Gamma_R0_2 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551612bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64));
    goto main_basil_return;
  main_basil_return:
    R0_out, R31_out, R8_out, R9_out := R0_2, R31_in, R8_26, R9_1;
    Gamma_R0_out, Gamma_R31_out, Gamma_R8_out, Gamma_R9_out := Gamma_R0_2, Gamma_R31_in, Gamma_R8_26, Gamma_R9_1;
    return;
}

