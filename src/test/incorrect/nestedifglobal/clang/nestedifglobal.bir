0000071d: program
00000704: sub __cxa_finalize(__cxa_finalize_result)
0000071e: __cxa_finalize_result :: out u32 = low:32[R0]

00000486:
0000057e: R16 := 0x11000
00000585: R17 := mem[R16 + 8, el]:u64
0000058b: R16 := R16 + 8
00000590: call R17 with noreturn

00000705: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000071f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002d2:
000002d6: #3 := R31 - 0x20
000002dc: mem := mem with [#3, el]:u64 <- R29
000002e2: mem := mem with [#3 + 8, el]:u64 <- R30
000002e6: R31 := #3
000002ec: R29 := R31
000002f4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002f9: R19 := 0x11000
00000300: R0 := pad:64[mem[R19 + 0x30]]
00000307: when 31:0[R0] <> 0 goto %00000305
00000706: goto %0000044f

0000044f:
00000452: R0 := 0x10000
00000459: R0 := mem[R0 + 0xFC8, el]:u64
0000045f: when R0 = 0 goto %0000045d
00000707: goto %00000476

00000476:
00000479: R0 := 0x11000
00000480: R0 := mem[R0 + 0x28, el]:u64
00000485: R30 := 0x6F0
00000488: call @__cxa_finalize with return %0000045d

0000045d:
00000465: R30 := 0x6F4
00000467: call @deregister_tm_clones with return %00000469

00000469:
0000046c: R0 := 1
00000474: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000708: goto %00000305

00000305:
0000030f: R19 := mem[R31 + 0x10, el]:u64
00000316: R29 := mem[R31, el]:u64
0000031b: R30 := mem[R31 + 8, el]:u64
0000031f: R31 := R31 + 0x20
00000324: call R30 with noreturn

00000709: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000720: __libc_start_main_main :: in u64 = R0
00000721: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000722: __libc_start_main_arg3 :: in out u64 = R2
00000723: __libc_start_main_auxv :: in out u64 = R3
00000724: __libc_start_main_result :: out u32 = low:32[R0]

0000022b:
00000568: R16 := 0x11000
0000056f: R17 := mem[R16, el]:u64
00000575: R16 := R16
0000057a: call R17 with noreturn

0000070a: sub _fini(_fini_result)
00000725: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000070b: sub _init(_init_result)
00000726: _init_result :: out u32 = low:32[R0]

00000645:
0000064b: #8 := R31 - 0x10
00000651: mem := mem with [#8, el]:u64 <- R29
00000657: mem := mem with [#8 + 8, el]:u64 <- R30
0000065b: R31 := #8
00000661: R29 := R31
00000666: R30 := 0x590
00000668: call @call_weak_fn with return %0000066a

0000066a:
0000066f: R29 := mem[R31, el]:u64
00000674: R30 := mem[R31 + 8, el]:u64
00000678: R31 := R31 + 0x10
0000067d: call R30 with noreturn

0000070c: sub _start(_start_result)
00000727: _start_result :: out u32 = low:32[R0]

000001ec:
000001f1: R29 := 0
000001f6: R30 := 0
000001fc: R5 := R0
00000203: R1 := mem[R31, el]:u64
00000209: R2 := R31 + 8
0000020f: R6 := R31
00000214: R0 := 0x10000
0000021b: R0 := mem[R0 + 0xFD8, el]:u64
00000220: R3 := 0
00000225: R4 := 0
0000022a: R30 := 0x630
0000022d: call @__libc_start_main with return %0000022f

0000022f:
00000232: R30 := 0x634
00000235: call @abort with return %0000070d

0000070d:
0000070e: call @call_weak_fn with noreturn

0000070f: sub abort()


00000233:
000005aa: R16 := 0x11000
000005b1: R17 := mem[R16 + 0x18, el]:u64
000005b7: R16 := R16 + 0x18
000005bc: call R17 with noreturn

00000710: sub call_weak_fn(call_weak_fn_result)
00000728: call_weak_fn_result :: out u32 = low:32[R0]

00000237:
0000023a: R0 := 0x10000
00000241: R0 := mem[R0 + 0xFD0, el]:u64
00000247: when R0 = 0 goto %00000245
00000711: goto %000004c6

00000245:
0000024d: call R30 with noreturn

000004c6:
000004c9: goto @__gmon_start__

000004c7:
00000594: R16 := 0x11000
0000059b: R17 := mem[R16 + 0x10, el]:u64
000005a1: R16 := R16 + 0x10
000005a6: call R17 with noreturn

00000712: sub deregister_tm_clones(deregister_tm_clones_result)
00000729: deregister_tm_clones_result :: out u32 = low:32[R0]

00000253:
00000256: R0 := 0x11000
0000025c: R0 := R0 + 0x30
00000261: R1 := 0x11000
00000267: R1 := R1 + 0x30
0000026d: #1 := ~R0
00000272: #2 := R1 + ~R0
00000278: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000027e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000282: ZF := #2 + 1 = 0
00000286: NF := 63:63[#2 + 1]
0000028c: when ZF goto %0000028a
00000713: goto %000004a8

000004a8:
000004ab: R1 := 0x10000
000004b2: R1 := mem[R1 + 0xFC0, el]:u64
000004b7: when R1 = 0 goto %0000028a
00000714: goto %000004bb

0000028a:
00000292: call R30 with noreturn

000004bb:
000004bf: R16 := R1
000004c4: call R16 with noreturn

00000715: sub frame_dummy(frame_dummy_result)
0000072a: frame_dummy_result :: out u32 = low:32[R0]

0000032a:
0000032c: call @register_tm_clones with noreturn

00000716: sub main(main_argc, main_argv, main_result)
0000072b: main_argc :: in u32 = low:32[R0]
0000072c: main_argv :: in out u64 = R1
0000072d: main_result :: out u32 = low:32[R0]

0000032e:
00000332: R31 := R31 - 0x10
00000339: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000340: mem := mem with [R31 + 8, el]:u32 <- 0
00000345: R8 := 0x11000
0000034c: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000352: #4 := 31:0[R8] - 1
00000357: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
0000035c: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000360: ZF := #4 + 1 = 0
00000364: NF := 31:31[#4 + 1]
00000368: R8 := pad:64[#4 + 1]
00000374: when ZF goto %0000036d
00000375: goto %00000370

00000370:
00000371: R8 := 1
00000377: goto %00000373

0000036d:
0000036e: R8 := 0
00000376: goto %00000373

00000373:
0000037d: when 0:0[R8] goto %0000037b
00000717: goto %0000043a

0000043a:
0000043d: goto %0000043b

0000043b:
00000441: R8 := 3
00000449: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000044d: goto %0000037b

0000037b:
00000383: R8 := 0x11000
0000038a: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000390: #5 := 31:0[R8] - 2
00000395: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] - 1
0000039a: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFF
0000039e: ZF := #5 + 1 = 0
000003a2: NF := 31:31[#5 + 1]
000003a6: R8 := pad:64[#5 + 1]
000003b2: when ZF goto %000003ab
000003b3: goto %000003ae

000003ae:
000003af: R8 := 1
000003b5: goto %000003b1

000003ab:
000003ac: R8 := 0
000003b4: goto %000003b1

000003b1:
000003bb: when 0:0[R8] goto %000003b9
00000718: goto %00000425

00000425:
00000428: goto %00000426

00000426:
0000042c: R8 := 5
00000434: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000438: goto %000003b9

000003b9:
000003c3: R8 := pad:64[mem[R31 + 8, el]:u32]
000003c9: #6 := 31:0[R8] - 4
000003ce: VF := extend:33[#6 + 1] <> extend:33[31:0[R8]] - 3
000003d3: CF := pad:33[#6 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFD
000003d7: ZF := #6 + 1 = 0
000003db: NF := 31:31[#6 + 1]
000003df: R8 := pad:64[#6 + 1]
000003eb: when ZF goto %000003e4
000003ec: goto %000003e7

000003e7:
000003e8: R8 := 1
000003ee: goto %000003ea

000003e4:
000003e5: R8 := 0
000003ed: goto %000003ea

000003ea:
000003f4: when 0:0[R8] goto %000003f2
00000719: goto %00000409

00000409:
0000040c: goto %0000040a

0000040a:
00000410: R8 := 0x11000
00000417: R8 := pad:64[mem[R8 + 0x38, el]:u32]
0000041f: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000423: goto %000003f2

000003f2:
000003fc: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000402: R31 := R31 + 0x10
00000407: call R30 with noreturn

0000071a: sub register_tm_clones(register_tm_clones_result)
0000072e: register_tm_clones_result :: out u32 = low:32[R0]

00000294:
00000297: R0 := 0x11000
0000029d: R0 := R0 + 0x30
000002a2: R1 := 0x11000
000002a8: R1 := R1 + 0x30
000002af: R1 := R1 + ~R0 + 1
000002b5: R2 := 0.63:63[R1]
000002bc: R1 := R2 + (R1 ~>> 3)
000002c2: R1 := extend:64[63:1[R1]]
000002c8: when R1 = 0 goto %000002c6
0000071b: goto %0000048a

0000048a:
0000048d: R2 := 0x10000
00000494: R2 := mem[R2 + 0xFE0, el]:u64
00000499: when R2 = 0 goto %000002c6
0000071c: goto %0000049d

000002c6:
000002ce: call R30 with noreturn

0000049d:
000004a1: R16 := R2
000004a6: call R16 with noreturn
