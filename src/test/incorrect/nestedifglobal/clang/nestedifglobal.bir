00000751: program
00000738: sub __cxa_finalize(__cxa_finalize_result)
00000752: __cxa_finalize_result :: out u32 = low:32[R0]

000004b2:
000005aa: R16 := 0x11000
000005b1: R17 := mem[R16 + 8, el]:u64
000005b7: R16 := R16 + 8
000005bc: call R17 with noreturn

00000739: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000753: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002e2:
000002e6: #3 := R31 - 0x20
000002ec: mem := mem with [#3, el]:u64 <- R29
000002f2: mem := mem with [#3 + 8, el]:u64 <- R30
000002f6: R31 := #3
000002fc: R29 := R31
00000304: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000309: R19 := 0x11000
00000310: R0 := pad:64[mem[R19 + 0x30]]
00000317: when 31:0[R0] <> 0 goto %00000315
0000073a: goto %0000047b

0000047b:
0000047e: R0 := 0x10000
00000485: R0 := mem[R0 + 0xFC8, el]:u64
0000048b: when R0 = 0 goto %00000489
0000073b: goto %000004a2

000004a2:
000004a5: R0 := 0x11000
000004ac: R0 := mem[R0 + 0x28, el]:u64
000004b1: R30 := 0x6F0
000004b4: call @__cxa_finalize with return %00000489

00000489:
00000491: R30 := 0x6F4
00000493: call @deregister_tm_clones with return %00000495

00000495:
00000498: R0 := 1
000004a0: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000073c: goto %00000315

00000315:
0000031f: R19 := mem[R31 + 0x10, el]:u64
00000326: R29 := mem[R31, el]:u64
0000032b: R30 := mem[R31 + 8, el]:u64
0000032f: R31 := R31 + 0x20
00000334: call R30 with noreturn

0000073d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000754: __libc_start_main_main :: in u64 = R0
00000755: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000756: __libc_start_main_arg3 :: in out u64 = R2
00000757: __libc_start_main_auxv :: in out u64 = R3
00000758: __libc_start_main_result :: out u32 = low:32[R0]

0000023b:
00000594: R16 := 0x11000
0000059b: R17 := mem[R16, el]:u64
000005a1: R16 := R16
000005a6: call R17 with noreturn

0000073e: sub _fini(_fini_result)
00000759: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000073f: sub _init(_init_result)
0000075a: _init_result :: out u32 = low:32[R0]

00000675:
0000067b: #8 := R31 - 0x10
00000681: mem := mem with [#8, el]:u64 <- R29
00000687: mem := mem with [#8 + 8, el]:u64 <- R30
0000068b: R31 := #8
00000691: R29 := R31
00000696: R30 := 0x590
00000698: call @call_weak_fn with return %0000069a

0000069a:
0000069f: R29 := mem[R31, el]:u64
000006a4: R30 := mem[R31 + 8, el]:u64
000006a8: R31 := R31 + 0x10
000006ad: call R30 with noreturn

00000740: sub _start(_start_result)
0000075b: _start_result :: out u32 = low:32[R0]

000001fc:
00000201: R29 := 0
00000206: R30 := 0
0000020c: R5 := R0
00000213: R1 := mem[R31, el]:u64
00000219: R2 := R31 + 8
0000021f: R6 := R31
00000224: R0 := 0x10000
0000022b: R0 := mem[R0 + 0xFD8, el]:u64
00000230: R3 := 0
00000235: R4 := 0
0000023a: R30 := 0x630
0000023d: call @__libc_start_main with return %0000023f

0000023f:
00000242: R30 := 0x634
00000245: call @abort with return %00000741

00000741:
00000742: call @call_weak_fn with noreturn

00000743: sub abort()


00000243:
000005d6: R16 := 0x11000
000005dd: R17 := mem[R16 + 0x18, el]:u64
000005e3: R16 := R16 + 0x18
000005e8: call R17 with noreturn

00000744: sub call_weak_fn(call_weak_fn_result)
0000075c: call_weak_fn_result :: out u32 = low:32[R0]

00000247:
0000024a: R0 := 0x10000
00000251: R0 := mem[R0 + 0xFD0, el]:u64
00000257: when R0 = 0 goto %00000255
00000745: goto %000004f2

00000255:
0000025d: call R30 with noreturn

000004f2:
000004f5: goto @__gmon_start__

000004f3:
000005c0: R16 := 0x11000
000005c7: R17 := mem[R16 + 0x10, el]:u64
000005cd: R16 := R16 + 0x10
000005d2: call R17 with noreturn

00000746: sub deregister_tm_clones(deregister_tm_clones_result)
0000075d: deregister_tm_clones_result :: out u32 = low:32[R0]

00000263:
00000266: R0 := 0x11000
0000026c: R0 := R0 + 0x30
00000271: R1 := 0x11000
00000277: R1 := R1 + 0x30
0000027d: #1 := ~R0
00000282: #2 := R1 + ~R0
00000288: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000028e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000292: ZF := #2 + 1 = 0
00000296: NF := 63:63[#2 + 1]
0000029c: when ZF goto %0000029a
00000747: goto %000004d4

000004d4:
000004d7: R1 := 0x10000
000004de: R1 := mem[R1 + 0xFC0, el]:u64
000004e3: when R1 = 0 goto %0000029a
00000748: goto %000004e7

0000029a:
000002a2: call R30 with noreturn

000004e7:
000004eb: R16 := R1
000004f0: call R16 with noreturn

00000749: sub frame_dummy(frame_dummy_result)
0000075e: frame_dummy_result :: out u32 = low:32[R0]

0000033a:
0000033c: call @register_tm_clones with noreturn

0000074a: sub main(main_argc, main_argv, main_result)
0000075f: main_argc :: in u32 = low:32[R0]
00000760: main_argv :: in out u64 = R1
00000761: main_result :: out u32 = low:32[R0]

0000033e:
00000342: R31 := R31 - 0x10
00000349: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000351: mem := mem with [R31 + 8, el]:u32 <- 31:0[R0]
00000358: R9 := pad:64[mem[R31 + 8, el]:u32]
0000035d: R8 := 0x11000
00000365: mem := mem with [R8 + 0x34, el]:u32 <- 31:0[R9]
0000036c: mem := mem with [R31 + 4, el]:u32 <- 0
00000373: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000379: #4 := 31:0[R8] - 1
0000037e: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000383: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000387: ZF := #4 + 1 = 0
0000038b: NF := 31:31[#4 + 1]
0000038f: R8 := pad:64[#4 + 1]
0000039b: when ZF goto %00000394
0000039c: goto %00000397

00000397:
00000398: R8 := 1
0000039e: goto %0000039a

00000394:
00000395: R8 := 0
0000039d: goto %0000039a

0000039a:
000003a4: when 0:0[R8] goto %000003a2
0000074b: goto %00000466

00000466:
00000469: goto %00000467

00000467:
0000046d: R8 := 3
00000475: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000479: goto %000003a2

000003a2:
000003aa: R8 := 0x11000
000003b1: R8 := pad:64[mem[R8 + 0x34, el]:u32]
000003b7: #5 := 31:0[R8] - 2
000003bc: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] - 1
000003c1: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFF
000003c5: ZF := #5 + 1 = 0
000003c9: NF := 31:31[#5 + 1]
000003cd: R8 := pad:64[#5 + 1]
000003d9: when ZF goto %000003d2
000003da: goto %000003d5

000003d5:
000003d6: R8 := 1
000003dc: goto %000003d8

000003d2:
000003d3: R8 := 0
000003db: goto %000003d8

000003d8:
000003e2: when 0:0[R8] goto %000003e0
0000074c: goto %00000451

00000451:
00000454: goto %00000452

00000452:
00000458: R8 := 5
00000460: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000464: goto %000003e0

000003e0:
000003ea: R8 := pad:64[mem[R31 + 4, el]:u32]
000003f0: #6 := 31:0[R8] - 4
000003f5: VF := extend:33[#6 + 1] <> extend:33[31:0[R8]] - 3
000003fa: CF := pad:33[#6 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFD
000003fe: ZF := #6 + 1 = 0
00000402: NF := 31:31[#6 + 1]
00000406: R8 := pad:64[#6 + 1]
00000412: when ZF goto %0000040b
00000413: goto %0000040e

0000040e:
0000040f: R8 := 1
00000415: goto %00000411

0000040b:
0000040c: R8 := 0
00000414: goto %00000411

00000411:
0000041b: when 0:0[R8] goto %00000419
0000074d: goto %00000435

00000435:
00000438: goto %00000436

00000436:
0000043c: R8 := 0x11000
00000443: R8 := pad:64[mem[R8 + 0x38, el]:u32]
0000044b: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
0000044f: goto %00000419

00000419:
00000421: R8 := 0x11000
00000428: R0 := pad:64[mem[R8 + 0x38, el]:u32]
0000042e: R31 := R31 + 0x10
00000433: call R30 with noreturn

0000074e: sub register_tm_clones(register_tm_clones_result)
00000762: register_tm_clones_result :: out u32 = low:32[R0]

000002a4:
000002a7: R0 := 0x11000
000002ad: R0 := R0 + 0x30
000002b2: R1 := 0x11000
000002b8: R1 := R1 + 0x30
000002bf: R1 := R1 + ~R0 + 1
000002c5: R2 := 0.63:63[R1]
000002cc: R1 := R2 + (R1 ~>> 3)
000002d2: R1 := extend:64[63:1[R1]]
000002d8: when R1 = 0 goto %000002d6
0000074f: goto %000004b6

000004b6:
000004b9: R2 := 0x10000
000004c0: R2 := mem[R2 + 0xFE0, el]:u64
000004c5: when R2 = 0 goto %000002d6
00000750: goto %000004c9

000002d6:
000002de: call R30 with noreturn

000004c9:
000004cd: R16 := R2
000004d2: call R16 with noreturn
