var {:extern} $CF: bv1;
var {:extern} $Gamma_CF: bool;
var {:extern} $Gamma_NF: bool;
var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_R9: bool;
var {:extern} $Gamma_VF: bool;
var {:extern} $Gamma_ZF: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $NF: bv1;
var {:extern} $R0: bv64;
var {:extern} $R31: bv64;
var {:extern} $R8: bv64;
var {:extern} $R9: bv64;
var {:extern} $VF: bv1;
var {:extern} $ZF: bv1;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp64(bv64, bv64) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 32"} sign_extend32_32(bv32) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 2060bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69056bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le($mem, 69576bv64) == 69684bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$main_1876();
  modifies $CF, $Gamma_CF, $Gamma_NF, $Gamma_R0, $Gamma_R31, $Gamma_R8, $Gamma_R9, $Gamma_VF, $Gamma_ZF, $Gamma_mem, $Gamma_stack, $NF, $R0, $R31, $R8, $R9, $VF, $ZF, $mem, $stack;
  free requires (memory_load64_le($mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le($mem, 2060bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69048bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69056bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69568bv64) == 69688bv64);
  free requires (memory_load64_le($mem, 69576bv64) == 69684bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1876bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 2060bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69056bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le($mem, 69576bv64) == 69684bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

implementation p$main_1876()
{
  var #Cse0__5_11: bv64;
  var #Cse0__5_7: bv64;
  var #Cse1__5_10: bv32;
  var #Cse1__5_6: bv32;
  var #Exp14__5_1: bv64;
  var #Exp14__5_12: bv64;
  var #Exp14__5_13: bv32;
  var #Exp14__5_14: bv32;
  var #Exp14__5_2: bv32;
  var #Exp14__5_3: bv64;
  var #Exp14__5_4: bv32;
  var #Exp14__5_5: bv32;
  var #Exp14__5_8: bv64;
  var #Exp14__5_9: bv32;
  var #Gamma_Cse0__5_11: bool;
  var #Gamma_Cse0__5_7: bool;
  var #Gamma_Cse1__5_10: bool;
  var #Gamma_Cse1__5_6: bool;
  var #Gamma_Exp14__5_1: bool;
  var #Gamma_Exp14__5_12: bool;
  var #Gamma_Exp14__5_13: bool;
  var #Gamma_Exp14__5_14: bool;
  var #Gamma_Exp14__5_2: bool;
  var #Gamma_Exp14__5_3: bool;
  var #Gamma_Exp14__5_4: bool;
  var #Gamma_Exp14__5_5: bool;
  var #Gamma_Exp14__5_8: bool;
  var #Gamma_Exp14__5_9: bool;
  b#main_entry:
    assume {:captureState "main_entry (lr6o4ptnRiK3TGR1gpiWGg==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551584bv64), $Gamma_R31;
    $R8, $Gamma_R8 := 65536bv64, true;
    call p$rely();
    #Exp14__5_12, #Gamma_Exp14__5_12 := memory_load64_le($mem, bvadd64($R8, 4040bv64)), (gamma_load64($Gamma_mem, bvadd64($R8, 4040bv64)) || L($mem, bvadd64($R8, 4040bv64)));
    $R8, $Gamma_R8 := #Exp14__5_12, #Gamma_Exp14__5_12;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 8bv64), $R8), gamma_store64($Gamma_stack, bvadd64($R31, 8bv64), $Gamma_R8);
    assume {:captureState "1888_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 28bv64), 0bv32), gamma_store32($Gamma_stack, bvadd64($R31, 28bv64), true);
    assume {:captureState "1892_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 24bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 24bv64), $Gamma_R0);
    assume {:captureState "1896_0"} true;
    #Exp14__5_13, #Gamma_Exp14__5_13 := memory_load32_le($stack, bvadd64($R31, 24bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 24bv64));
    $R9, $Gamma_R9 := zero_extend32_32(#Exp14__5_13), #Gamma_Exp14__5_13;
    call p$rely();
    assert (L($mem, $R8) ==> $Gamma_R9);
    $mem, $Gamma_mem := memory_store32_le($mem, $R8, $R9[32:0]), gamma_store32($Gamma_mem, $R8, $Gamma_R9);
    assume {:captureState "1904_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 20bv64), 0bv32), gamma_store32($Gamma_stack, bvadd64($R31, 20bv64), true);
    assume {:captureState "1908_0"} true;
    call p$rely();
    #Exp14__5_14, #Gamma_Exp14__5_14 := memory_load32_le($mem, $R8), (gamma_load32($Gamma_mem, $R8) || L($mem, $R8));
    $R8, $Gamma_R8 := zero_extend32_32(#Exp14__5_14), #Gamma_Exp14__5_14;
    $VF, $Gamma_VF := 0bv1, true;
    $CF, $Gamma_CF := 1bv1, true;
    $ZF, $Gamma_ZF := bvcomp32($R8[32:0], 0bv32), $Gamma_R8;
    $NF, $Gamma_NF := $R8[32:31], $Gamma_R8;
    $R8, $Gamma_R8 := zero_extend32_32($R8[32:0]), $Gamma_R8;
    assert $Gamma_ZF;
    goto b#main_41, b#main_43;
  b#main_43:
    assume {:captureState "main_43"} true;
    assume (!($ZF == 1bv1));
    $R8, $Gamma_R8 := 1bv64, true;
    assert $Gamma_R8;
    goto b#main_33, b#main_39;
  b#main_41:
    assume {:captureState "main_41"} true;
    assume ($ZF == 1bv1);
    $R8, $Gamma_R8 := 0bv64, true;
    assert $Gamma_R8;
    goto b#main_33, b#main_39;
  b#main_39:
    assume {:captureState "main_39"} true;
    assume (!($R8[1:0] == 1bv1));
    goto b#main_37;
  b#main_37:
    assume {:captureState "main_37 (b8tsihT4Q6a/SWPo4w8HoA==)"} true;
    goto b#main_35;
  b#main_35:
    assume {:captureState "main_35 (rlVqjjqoR6uHwOYvPCS15g==)"} true;
    $R8, $Gamma_R8 := 3bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 20bv64), $R8[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 20bv64), $Gamma_R8);
    assume {:captureState "1936_0"} true;
    goto b#main_31;
  b#main_33:
    assume {:captureState "main_33"} true;
    assume ($R8[1:0] == 1bv1);
    goto b#main_31;
  b#main_31:
    assume {:captureState "main_31 (gFBdrsFTRkSCdIsDFMk6qA==)"} true;
    #Exp14__5_8, #Gamma_Exp14__5_8 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R8, $Gamma_R8 := #Exp14__5_8, #Gamma_Exp14__5_8;
    call p$rely();
    #Exp14__5_9, #Gamma_Exp14__5_9 := memory_load32_le($mem, $R8), (gamma_load32($Gamma_mem, $R8) || L($mem, $R8));
    $R8, $Gamma_R8 := zero_extend32_32(#Exp14__5_9), #Gamma_Exp14__5_9;
    #Cse1__5_10, #Gamma_Cse1__5_10 := bvadd32($R8[32:0], 4294967295bv32), $Gamma_R8;
    #Cse0__5_11, #Gamma_Cse0__5_11 := zero_extend32_32(bvadd32($R8[32:0], 4294967295bv32)), $Gamma_R8;
    $VF, $Gamma_VF := bvnot1(bvcomp64(sign_extend32_32(#Cse1__5_10), bvadd64(sign_extend32_32($R8[32:0]), 18446744073709551615bv64))), ($Gamma_R8 && #Gamma_Cse1__5_10);
    $CF, $Gamma_CF := bvnot1(bvcomp64(#Cse0__5_11, bvadd64(zero_extend32_32($R8[32:0]), 4294967295bv64))), ($Gamma_R8 && #Gamma_Cse0__5_11);
    $ZF, $Gamma_ZF := bvcomp32(#Cse1__5_10, 0bv32), #Gamma_Cse1__5_10;
    $NF, $Gamma_NF := #Cse1__5_10[32:31], #Gamma_Cse1__5_10;
    $R8, $Gamma_R8 := #Cse0__5_11, #Gamma_Cse0__5_11;
    assert $Gamma_ZF;
    goto b#main_27, b#main_29;
  b#main_29:
    assume {:captureState "main_29"} true;
    assume (!($ZF == 1bv1));
    $R8, $Gamma_R8 := 1bv64, true;
    assert $Gamma_R8;
    goto b#main_19, b#main_25;
  b#main_27:
    assume {:captureState "main_27"} true;
    assume ($ZF == 1bv1);
    $R8, $Gamma_R8 := 0bv64, true;
    assert $Gamma_R8;
    goto b#main_19, b#main_25;
  b#main_25:
    assume {:captureState "main_25"} true;
    assume (!($R8[1:0] == 1bv1));
    goto b#main_23;
  b#main_23:
    assume {:captureState "main_23 (wK9NYU4TTr+D8gXPiCk+7w==)"} true;
    goto b#main_21;
  b#main_21:
    assume {:captureState "main_21 (Y/R8k4zNQOW7WdsmX6n3Vw==)"} true;
    $R8, $Gamma_R8 := 5bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 20bv64), $R8[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 20bv64), $Gamma_R8);
    assume {:captureState "1972_0"} true;
    goto b#main_17;
  b#main_19:
    assume {:captureState "main_19"} true;
    assume ($R8[1:0] == 1bv1);
    goto b#main_17;
  b#main_17:
    assume {:captureState "main_17 (lFxxVCVARIKoZ6fzUj5YPw==)"} true;
    #Exp14__5_5, #Gamma_Exp14__5_5 := memory_load32_le($stack, bvadd64($R31, 20bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 20bv64));
    $R8, $Gamma_R8 := zero_extend32_32(#Exp14__5_5), #Gamma_Exp14__5_5;
    #Cse1__5_6, #Gamma_Cse1__5_6 := bvadd32($R8[32:0], 4294967293bv32), $Gamma_R8;
    #Cse0__5_7, #Gamma_Cse0__5_7 := zero_extend32_32(bvadd32($R8[32:0], 4294967293bv32)), $Gamma_R8;
    $VF, $Gamma_VF := bvnot1(bvcomp64(sign_extend32_32(#Cse1__5_6), bvadd64(sign_extend32_32($R8[32:0]), 18446744073709551613bv64))), ($Gamma_R8 && #Gamma_Cse1__5_6);
    $CF, $Gamma_CF := bvnot1(bvcomp64(#Cse0__5_7, bvadd64(zero_extend32_32($R8[32:0]), 4294967293bv64))), ($Gamma_R8 && #Gamma_Cse0__5_7);
    $ZF, $Gamma_ZF := bvcomp32(#Cse1__5_6, 0bv32), #Gamma_Cse1__5_6;
    $NF, $Gamma_NF := #Cse1__5_6[32:31], #Gamma_Cse1__5_6;
    $R8, $Gamma_R8 := #Cse0__5_7, #Gamma_Cse0__5_7;
    assert $Gamma_ZF;
    goto b#main_13, b#main_15;
  b#main_15:
    assume {:captureState "main_15"} true;
    assume (!($ZF == 1bv1));
    $R8, $Gamma_R8 := 1bv64, true;
    assert $Gamma_R8;
    goto b#main_5, b#main_11;
  b#main_13:
    assume {:captureState "main_13"} true;
    assume ($ZF == 1bv1);
    $R8, $Gamma_R8 := 0bv64, true;
    assert $Gamma_R8;
    goto b#main_5, b#main_11;
  b#main_11:
    assume {:captureState "main_11"} true;
    assume (!($R8[1:0] == 1bv1));
    goto b#main_9;
  b#main_9:
    assume {:captureState "main_9 (G0vHB4sSQ3yHYTbHJG37zQ==)"} true;
    goto b#main_7;
  b#main_7:
    assume {:captureState "main_7 (LyxvLr79TJCmN7I2k2Z9dA==)"} true;
    $R8, $Gamma_R8 := 65536bv64, true;
    call p$rely();
    #Exp14__5_3, #Gamma_Exp14__5_3 := memory_load64_le($mem, bvadd64($R8, 4032bv64)), (gamma_load64($Gamma_mem, bvadd64($R8, 4032bv64)) || L($mem, bvadd64($R8, 4032bv64)));
    $R8, $Gamma_R8 := #Exp14__5_3, #Gamma_Exp14__5_3;
    call p$rely();
    #Exp14__5_4, #Gamma_Exp14__5_4 := memory_load32_le($mem, $R8), (gamma_load32($Gamma_mem, $R8) || L($mem, $R8));
    $R8, $Gamma_R8 := zero_extend32_32(#Exp14__5_4), #Gamma_Exp14__5_4;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 20bv64), $R8[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 20bv64), $Gamma_R8);
    assume {:captureState "2012_0"} true;
    goto b#main_3;
  b#main_5:
    assume {:captureState "main_5"} true;
    assume ($R8[1:0] == 1bv1);
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (24sQpyZMTFejNeMkgQiWnw==)"} true;
    $R8, $Gamma_R8 := 65536bv64, true;
    call p$rely();
    #Exp14__5_1, #Gamma_Exp14__5_1 := memory_load64_le($mem, bvadd64($R8, 4032bv64)), (gamma_load64($Gamma_mem, bvadd64($R8, 4032bv64)) || L($mem, bvadd64($R8, 4032bv64)));
    $R8, $Gamma_R8 := #Exp14__5_1, #Gamma_Exp14__5_1;
    call p$rely();
    #Exp14__5_2, #Gamma_Exp14__5_2 := memory_load32_le($mem, $R8), (gamma_load32($Gamma_mem, $R8) || L($mem, $R8));
    $R0, $Gamma_R0 := zero_extend32_32(#Exp14__5_2), #Gamma_Exp14__5_2;
    $R31, $Gamma_R31 := bvadd64($R31, 32bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

