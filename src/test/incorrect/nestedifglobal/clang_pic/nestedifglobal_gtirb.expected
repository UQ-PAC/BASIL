var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:inline} byte_extract64_64(value: bv64, offset: bv64) returns (bv8) {
  bvlshr64(value,bvmul64(offset,8bv64))[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then byte_extract64_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2060bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2061bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2062bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2063bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main(R0_in: bv64, Gamma_R0_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load8_le(mem, 2060bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2061bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2062bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2063bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1792bv64);
  free ensures (memory_load8_le(mem, 2060bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2061bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2062bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2063bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool)
{
  var Gamma_R0_2: bool;
  var Gamma_R31_11: bool;
  var Gamma_R31_16: bool;
  var Gamma_R31_18: bool;
  var Gamma_R31_2: bool;
  var Gamma_R31_20: bool;
  var Gamma_R31_25: bool;
  var Gamma_R31_27: bool;
  var Gamma_R31_29: bool;
  var Gamma_R31_7: bool;
  var Gamma_R31_9: bool;
  var Gamma_R8_11: bool;
  var Gamma_R8_13: bool;
  var Gamma_R8_14: bool;
  var Gamma_R8_15: bool;
  var Gamma_R8_17: bool;
  var Gamma_R8_2: bool;
  var Gamma_R8_20: bool;
  var Gamma_R8_23: bool;
  var Gamma_R8_25: bool;
  var Gamma_R8_26: bool;
  var Gamma_R8_28: bool;
  var Gamma_R8_3: bool;
  var Gamma_R8_31: bool;
  var Gamma_R8_34: bool;
  var Gamma_R8_36: bool;
  var Gamma_R8_37: bool;
  var Gamma_R8_38: bool;
  var Gamma_R8_40: bool;
  var Gamma_R8_5: bool;
  var Gamma_R8_8: bool;
  var Gamma_R9_1: bool;
  var Gamma_R9_10: bool;
  var Gamma_R9_15: bool;
  var Gamma_R9_17: bool;
  var Gamma_R9_19: bool;
  var Gamma_R9_24: bool;
  var Gamma_R9_26: bool;
  var Gamma_R9_28: bool;
  var Gamma_R9_6: bool;
  var Gamma_R9_8: bool;
  var R0_2: bv64;
  var R31_11: bv64;
  var R31_16: bv64;
  var R31_18: bv64;
  var R31_2: bv64;
  var R31_20: bv64;
  var R31_25: bv64;
  var R31_27: bv64;
  var R31_29: bv64;
  var R31_7: bv64;
  var R31_9: bv64;
  var R8_11: bv64;
  var R8_13: bv64;
  var R8_14: bv64;
  var R8_15: bv64;
  var R8_17: bv64;
  var R8_2: bv64;
  var R8_20: bv64;
  var R8_23: bv64;
  var R8_25: bv64;
  var R8_26: bv64;
  var R8_28: bv64;
  var R8_3: bv64;
  var R8_31: bv64;
  var R8_34: bv64;
  var R8_36: bv64;
  var R8_37: bv64;
  var R8_38: bv64;
  var R8_40: bv64;
  var R8_5: bv64;
  var R8_8: bv64;
  var R9_1: bv64;
  var R9_10: bv64;
  var R9_15: bv64;
  var R9_17: bv64;
  var R9_19: bv64;
  var R9_24: bv64;
  var R9_26: bv64;
  var R9_28: bv64;
  var R9_6: bv64;
  var R9_8: bv64;
  $main$__0__$T93CJsvjRiGkLGM3lm~zUw:
    R31_2, Gamma_R31_2 := bvadd64(R31_in, 18446744073709551584bv64), Gamma_R31_in;
    call rely();
    R8_2, Gamma_R8_2 := memory_load64_le(mem, 69576bv64), (gamma_load64(Gamma_mem, 69576bv64) || L(mem, 69576bv64));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551592bv64), R8_2), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64), Gamma_R8_2);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), R0_in[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), Gamma_R0_in);
    R9_1, Gamma_R9_1 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551608bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64));
    call rely();
    assert (L(mem, R8_2) ==> Gamma_R9_1);
    mem, Gamma_mem := memory_store32_le(mem, R8_2, R9_1[32:0]), gamma_store32(Gamma_mem, R8_2, Gamma_R9_1);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), true);
    call rely();
    R8_3, Gamma_R8_3 := zero_extend32_32(memory_load32_le(mem, R8_2)), (gamma_load32(Gamma_mem, R8_2) || L(mem, R8_2));
    assert Gamma_R8_3;
    goto $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__0, $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__1;
  $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__1:
    assume (!(R8_3[32:0] == 0bv32));
    R8_5, Gamma_R8_5 := 1bv64, true;
    goto $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__1_phi_$main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ, $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__1_phi_$main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__1__$XR5j_yKuQR24HXECGUTTaw;
  $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__1_phi_$main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__1__$XR5j_yKuQR24HXECGUTTaw:
    R9_6, Gamma_R9_6 := R9_1, Gamma_R9_1;
    R31_7, Gamma_R31_7 := R31_2, Gamma_R31_2;
    R8_11, Gamma_R8_11 := R8_5, Gamma_R8_5;
    assert Gamma_R8_11;
    goto $main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__1__$XR5j_yKuQR24HXECGUTTaw;
  $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__1_phi_$main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ:
    R9_8, Gamma_R9_8 := R9_1, Gamma_R9_1;
    R31_9, Gamma_R31_9 := R31_2, Gamma_R31_2;
    R8_13, Gamma_R8_13 := R8_5, Gamma_R8_5;
    assert Gamma_R8_13;
    goto $main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ;
  $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__0:
    assume (R8_3[32:0] == 0bv32);
    R8_8, Gamma_R8_8 := 0bv64, true;
    goto $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__0_phi_$main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ, $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__0_phi_$main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__1__$XR5j_yKuQR24HXECGUTTaw;
  $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__0_phi_$main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__1__$XR5j_yKuQR24HXECGUTTaw:
    R9_6, Gamma_R9_6 := R9_1, Gamma_R9_1;
    R31_7, Gamma_R31_7 := R31_2, Gamma_R31_2;
    R8_11, Gamma_R8_11 := R8_8, Gamma_R8_8;
    assert Gamma_R8_11;
    goto $main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__1__$XR5j_yKuQR24HXECGUTTaw;
  $main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__1__$XR5j_yKuQR24HXECGUTTaw:
    assume (!(R8_11[1:0] == 1bv1));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_7, 20bv64), 3bv32), gamma_store32(Gamma_stack, bvadd64(R31_7, 20bv64), true);
    R9_10, Gamma_R9_10 := R9_6, Gamma_R9_6;
    R31_11, Gamma_R31_11 := R31_7, Gamma_R31_7;
    goto $main$__3__$BQu4h3vlSRawGkdd3zg0DQ;
  $main$__0__$T93CJsvjRiGkLGM3lm~zUw$__0_phi_$main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ:
    R9_8, Gamma_R9_8 := R9_1, Gamma_R9_1;
    R31_9, Gamma_R31_9 := R31_2, Gamma_R31_2;
    R8_13, Gamma_R8_13 := R8_8, Gamma_R8_8;
    assert Gamma_R8_13;
    goto $main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ;
  $main$__0__$T93CJsvjRiGkLGM3lm~zUw_goto_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ:
    assume (R8_13[1:0] == 1bv1);
    R9_10, Gamma_R9_10 := R9_8, Gamma_R9_8;
    R31_11, Gamma_R31_11 := R31_9, Gamma_R31_9;
    goto $main$__3__$BQu4h3vlSRawGkdd3zg0DQ;
  $main$__3__$BQu4h3vlSRawGkdd3zg0DQ:
    R8_14, Gamma_R8_14 := memory_load64_le(stack, bvadd64(R31_11, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31_11, 8bv64));
    call rely();
    R8_15, Gamma_R8_15 := zero_extend32_32(memory_load32_le(mem, R8_14)), (gamma_load32(Gamma_mem, R8_14) || L(mem, R8_14));
    assert Gamma_R8_15;
    goto $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__0, $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__1;
  $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__1:
    assume (!(R8_15[32:0] == 1bv32));
    R8_17, Gamma_R8_17 := 1bv64, true;
    goto $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__1_phi_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__6__$ScgHlHhCS1WcMwxSLBCjog, $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__1_phi_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__4__$kgyF7X0vQAeoGY79WFpAXw;
  $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__1_phi_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__4__$kgyF7X0vQAeoGY79WFpAXw:
    R9_15, Gamma_R9_15 := R9_10, Gamma_R9_10;
    R31_16, Gamma_R31_16 := R31_11, Gamma_R31_11;
    R8_23, Gamma_R8_23 := R8_17, Gamma_R8_17;
    assert Gamma_R8_23;
    goto $main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__4__$kgyF7X0vQAeoGY79WFpAXw;
  $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__1_phi_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__6__$ScgHlHhCS1WcMwxSLBCjog:
    R9_17, Gamma_R9_17 := R9_10, Gamma_R9_10;
    R31_18, Gamma_R31_18 := R31_11, Gamma_R31_11;
    R8_25, Gamma_R8_25 := R8_17, Gamma_R8_17;
    assert Gamma_R8_25;
    goto $main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__6__$ScgHlHhCS1WcMwxSLBCjog;
  $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__0:
    assume (R8_15[32:0] == 1bv32);
    R8_20, Gamma_R8_20 := 0bv64, true;
    goto $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__0_phi_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__6__$ScgHlHhCS1WcMwxSLBCjog, $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__0_phi_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__4__$kgyF7X0vQAeoGY79WFpAXw;
  $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__0_phi_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__4__$kgyF7X0vQAeoGY79WFpAXw:
    R9_15, Gamma_R9_15 := R9_10, Gamma_R9_10;
    R31_16, Gamma_R31_16 := R31_11, Gamma_R31_11;
    R8_23, Gamma_R8_23 := R8_20, Gamma_R8_20;
    assert Gamma_R8_23;
    goto $main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__4__$kgyF7X0vQAeoGY79WFpAXw;
  $main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__4__$kgyF7X0vQAeoGY79WFpAXw:
    assume (!(R8_23[1:0] == 1bv1));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_16, 20bv64), 5bv32), gamma_store32(Gamma_stack, bvadd64(R31_16, 20bv64), true);
    R9_19, Gamma_R9_19 := R9_15, Gamma_R9_15;
    R31_20, Gamma_R31_20 := R31_16, Gamma_R31_16;
    goto $main$__6__$ScgHlHhCS1WcMwxSLBCjog;
  $main$__3__$BQu4h3vlSRawGkdd3zg0DQ$__0_phi_$main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__6__$ScgHlHhCS1WcMwxSLBCjog:
    R9_17, Gamma_R9_17 := R9_10, Gamma_R9_10;
    R31_18, Gamma_R31_18 := R31_11, Gamma_R31_11;
    R8_25, Gamma_R8_25 := R8_20, Gamma_R8_20;
    assert Gamma_R8_25;
    goto $main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__6__$ScgHlHhCS1WcMwxSLBCjog;
  $main$__3__$BQu4h3vlSRawGkdd3zg0DQ_goto_$main$__6__$ScgHlHhCS1WcMwxSLBCjog:
    assume (R8_25[1:0] == 1bv1);
    R9_19, Gamma_R9_19 := R9_17, Gamma_R9_17;
    R31_20, Gamma_R31_20 := R31_18, Gamma_R31_18;
    goto $main$__6__$ScgHlHhCS1WcMwxSLBCjog;
  $main$__6__$ScgHlHhCS1WcMwxSLBCjog:
    R8_26, Gamma_R8_26 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_20, 20bv64))), gamma_load32(Gamma_stack, bvadd64(R31_20, 20bv64));
    assert Gamma_R8_26;
    goto $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__0, $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__1;
  $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__1:
    assume (!(R8_26[32:0] == 3bv32));
    R8_28, Gamma_R8_28 := 1bv64, true;
    goto $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__1_phi_$main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__9__$WNf_4UJFTCupBtDlyt4H0A, $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__1_phi_$main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__7__$PJQQ~S5hQ3isxVg_lohkuQ;
  $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__1_phi_$main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__7__$PJQQ~S5hQ3isxVg_lohkuQ:
    R9_24, Gamma_R9_24 := R9_19, Gamma_R9_19;
    R31_25, Gamma_R31_25 := R31_20, Gamma_R31_20;
    R8_34, Gamma_R8_34 := R8_28, Gamma_R8_28;
    assert Gamma_R8_34;
    goto $main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__7__$PJQQ~S5hQ3isxVg_lohkuQ;
  $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__1_phi_$main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__9__$WNf_4UJFTCupBtDlyt4H0A:
    R9_26, Gamma_R9_26 := R9_19, Gamma_R9_19;
    R31_27, Gamma_R31_27 := R31_20, Gamma_R31_20;
    R8_38, Gamma_R8_38 := R8_28, Gamma_R8_28;
    assert Gamma_R8_38;
    goto $main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__9__$WNf_4UJFTCupBtDlyt4H0A;
  $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__0:
    assume (R8_26[32:0] == 3bv32);
    R8_31, Gamma_R8_31 := 0bv64, true;
    goto $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__0_phi_$main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__9__$WNf_4UJFTCupBtDlyt4H0A, $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__0_phi_$main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__7__$PJQQ~S5hQ3isxVg_lohkuQ;
  $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__0_phi_$main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__7__$PJQQ~S5hQ3isxVg_lohkuQ:
    R9_24, Gamma_R9_24 := R9_19, Gamma_R9_19;
    R31_25, Gamma_R31_25 := R31_20, Gamma_R31_20;
    R8_34, Gamma_R8_34 := R8_31, Gamma_R8_31;
    assert Gamma_R8_34;
    goto $main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__7__$PJQQ~S5hQ3isxVg_lohkuQ;
  $main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__7__$PJQQ~S5hQ3isxVg_lohkuQ:
    assume (!(R8_34[1:0] == 1bv1));
    call rely();
    R8_36, Gamma_R8_36 := memory_load64_le(mem, 69568bv64), (gamma_load64(Gamma_mem, 69568bv64) || L(mem, 69568bv64));
    call rely();
    R8_37, Gamma_R8_37 := zero_extend32_32(memory_load32_le(mem, R8_36)), (gamma_load32(Gamma_mem, R8_36) || L(mem, R8_36));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_25, 20bv64), R8_37[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_25, 20bv64), Gamma_R8_37);
    R9_28, Gamma_R9_28 := R9_24, Gamma_R9_24;
    R31_29, Gamma_R31_29 := R31_25, Gamma_R31_25;
    goto $main$__9__$WNf_4UJFTCupBtDlyt4H0A;
  $main$__6__$ScgHlHhCS1WcMwxSLBCjog$__0_phi_$main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__9__$WNf_4UJFTCupBtDlyt4H0A:
    R9_26, Gamma_R9_26 := R9_19, Gamma_R9_19;
    R31_27, Gamma_R31_27 := R31_20, Gamma_R31_20;
    R8_38, Gamma_R8_38 := R8_31, Gamma_R8_31;
    assert Gamma_R8_38;
    goto $main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__9__$WNf_4UJFTCupBtDlyt4H0A;
  $main$__6__$ScgHlHhCS1WcMwxSLBCjog_goto_$main$__9__$WNf_4UJFTCupBtDlyt4H0A:
    assume (R8_38[1:0] == 1bv1);
    R9_28, Gamma_R9_28 := R9_26, Gamma_R9_26;
    R31_29, Gamma_R31_29 := R31_27, Gamma_R31_27;
    goto $main$__9__$WNf_4UJFTCupBtDlyt4H0A;
  $main$__9__$WNf_4UJFTCupBtDlyt4H0A:
    call rely();
    R8_40, Gamma_R8_40 := memory_load64_le(mem, 69568bv64), (gamma_load64(Gamma_mem, 69568bv64) || L(mem, 69568bv64));
    call rely();
    R0_2, Gamma_R0_2 := zero_extend32_32(memory_load32_le(mem, R8_40)), (gamma_load32(Gamma_mem, R8_40) || L(mem, R8_40));
    goto main_basil_return;
  main_basil_return:
    R0_out, R31_out, R8_out, R9_out := R0_2, bvadd64(R31_29, 32bv64), R8_40, R9_28;
    Gamma_R0_out, Gamma_R31_out, Gamma_R8_out, Gamma_R9_out := Gamma_R0_2, Gamma_R31_29, Gamma_R8_40, Gamma_R9_28;
    return;
}

