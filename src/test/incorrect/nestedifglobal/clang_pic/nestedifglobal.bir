000006fa: program
000006e1: sub __cxa_finalize(__cxa_finalize_result)
000006fb: __cxa_finalize_result :: out u32 = low:32[R0]

000004e1:
000005d9: R16 := 0x11000
000005e0: R17 := mem[R16 + 8, el]:u64
000005e6: R16 := R16 + 8
000005eb: call R17 with noreturn

000006e2: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006fc: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002f2:
000002f6: #3 := R31 - 0x20
000002fc: mem := mem with [#3, el]:u64 <- R29
00000302: mem := mem with [#3 + 8, el]:u64 <- R30
00000306: R31 := #3
0000030c: R29 := R31
00000314: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000319: R19 := 0x11000
00000320: R0 := pad:64[mem[R19 + 0x30]]
00000327: when 31:0[R0] <> 0 goto %00000325
000006e3: goto %000004aa

000004aa:
000004ad: R0 := 0x10000
000004b4: R0 := mem[R0 + 0xFB8, el]:u64
000004ba: when R0 = 0 goto %000004b8
000006e4: goto %000004d1

000004d1:
000004d4: R0 := 0x11000
000004db: R0 := mem[R0 + 0x28, el]:u64
000004e0: R30 := 0x730
000004e3: call @__cxa_finalize with return %000004b8

000004b8:
000004c0: R30 := 0x734
000004c2: call @deregister_tm_clones with return %000004c4

000004c4:
000004c7: R0 := 1
000004cf: mem := mem with [R19 + 0x30] <- 7:0[R0]
000006e5: goto %00000325

00000325:
0000032f: R19 := mem[R31 + 0x10, el]:u64
00000336: R29 := mem[R31, el]:u64
0000033b: R30 := mem[R31 + 8, el]:u64
0000033f: R31 := R31 + 0x20
00000344: call R30 with noreturn

000006e6: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006fd: __libc_start_main_main :: in u64 = R0
000006fe: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006ff: __libc_start_main_arg3 :: in out u64 = R2
00000700: __libc_start_main_auxv :: in out u64 = R3
00000701: __libc_start_main_result :: out u32 = low:32[R0]

0000024b:
000005c3: R16 := 0x11000
000005ca: R17 := mem[R16, el]:u64
000005d0: R16 := R16
000005d5: call R17 with noreturn

000006e7: sub _fini(_fini_result)
00000702: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000006e8: sub _init(_init_result)
00000703: _init_result :: out u32 = low:32[R0]

00000633:
00000639: #8 := R31 - 0x10
0000063f: mem := mem with [#8, el]:u64 <- R29
00000645: mem := mem with [#8 + 8, el]:u64 <- R30
00000649: R31 := #8
0000064f: R29 := R31
00000654: R30 := 0x5C0
00000656: call @call_weak_fn with return %00000658

00000658:
0000065d: R29 := mem[R31, el]:u64
00000662: R30 := mem[R31 + 8, el]:u64
00000666: R31 := R31 + 0x10
0000066b: call R30 with noreturn

000006e9: sub _start(_start_result)
00000704: _start_result :: out u32 = low:32[R0]

0000020c:
00000211: R29 := 0
00000216: R30 := 0
0000021c: R5 := R0
00000223: R1 := mem[R31, el]:u64
00000229: R2 := R31 + 8
0000022f: R6 := R31
00000234: R0 := 0x10000
0000023b: R0 := mem[R0 + 0xFD8, el]:u64
00000240: R3 := 0
00000245: R4 := 0
0000024a: R30 := 0x670
0000024d: call @__libc_start_main with return %0000024f

0000024f:
00000252: R30 := 0x674
00000255: call @abort with return %000006ea

000006ea:
000006eb: call @call_weak_fn with noreturn

000006ec: sub abort()


00000253:
00000605: R16 := 0x11000
0000060c: R17 := mem[R16 + 0x18, el]:u64
00000612: R16 := R16 + 0x18
00000617: call R17 with noreturn

000006ed: sub call_weak_fn(call_weak_fn_result)
00000705: call_weak_fn_result :: out u32 = low:32[R0]

00000257:
0000025a: R0 := 0x10000
00000261: R0 := mem[R0 + 0xFD0, el]:u64
00000267: when R0 = 0 goto %00000265
000006ee: goto %00000521

00000265:
0000026d: call R30 with noreturn

00000521:
00000524: goto @__gmon_start__

00000522:
000005ef: R16 := 0x11000
000005f6: R17 := mem[R16 + 0x10, el]:u64
000005fc: R16 := R16 + 0x10
00000601: call R17 with noreturn

000006ef: sub deregister_tm_clones(deregister_tm_clones_result)
00000706: deregister_tm_clones_result :: out u32 = low:32[R0]

00000273:
00000276: R0 := 0x11000
0000027c: R0 := R0 + 0x30
00000281: R1 := 0x11000
00000287: R1 := R1 + 0x30
0000028d: #1 := ~R0
00000292: #2 := R1 + ~R0
00000298: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000029e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002a2: ZF := #2 + 1 = 0
000002a6: NF := 63:63[#2 + 1]
000002ac: when ZF goto %000002aa
000006f0: goto %00000503

00000503:
00000506: R1 := 0x10000
0000050d: R1 := mem[R1 + 0xFB0, el]:u64
00000512: when R1 = 0 goto %000002aa
000006f1: goto %00000516

000002aa:
000002b2: call R30 with noreturn

00000516:
0000051a: R16 := R1
0000051f: call R16 with noreturn

000006f2: sub frame_dummy(frame_dummy_result)
00000707: frame_dummy_result :: out u32 = low:32[R0]

0000034a:
0000034c: call @register_tm_clones with noreturn

000006f3: sub main(main_argc, main_argv, main_result)
00000708: main_argc :: in u32 = low:32[R0]
00000709: main_argv :: in out u64 = R1
0000070a: main_result :: out u32 = low:32[R0]

0000034e:
00000352: R31 := R31 - 0x20
00000357: R8 := 0x10000
0000035e: R8 := mem[R8 + 0xFC8, el]:u64
00000366: mem := mem with [R31 + 8, el]:u64 <- R8
0000036d: mem := mem with [R31 + 0x1C, el]:u32 <- 0
00000375: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
0000037c: R9 := pad:64[mem[R31 + 0x18, el]:u32]
00000384: mem := mem with [R8, el]:u32 <- 31:0[R9]
0000038b: mem := mem with [R31 + 0x14, el]:u32 <- 0
00000392: R8 := pad:64[mem[R8, el]:u32]
00000398: #4 := 31:0[R8] - 1
0000039d: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
000003a2: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
000003a6: ZF := #4 + 1 = 0
000003aa: NF := 31:31[#4 + 1]
000003ae: R8 := pad:64[#4 + 1]
000003ba: when ZF goto %000003b3
000003bb: goto %000003b6

000003b6:
000003b7: R8 := 1
000003bd: goto %000003b9

000003b3:
000003b4: R8 := 0
000003bc: goto %000003b9

000003b9:
000003c3: when 0:0[R8] goto %000003c1
000006f4: goto %00000495

00000495:
00000498: goto %00000496

00000496:
0000049c: R8 := 3
000004a4: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R8]
000004a8: goto %000003c1

000003c1:
000003cb: R8 := mem[R31 + 8, el]:u64
000003d2: R8 := pad:64[mem[R8, el]:u32]
000003d8: #5 := 31:0[R8] - 2
000003dd: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] - 1
000003e2: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFF
000003e6: ZF := #5 + 1 = 0
000003ea: NF := 31:31[#5 + 1]
000003ee: R8 := pad:64[#5 + 1]
000003fa: when ZF goto %000003f3
000003fb: goto %000003f6

000003f6:
000003f7: R8 := 1
000003fd: goto %000003f9

000003f3:
000003f4: R8 := 0
000003fc: goto %000003f9

000003f9:
00000403: when 0:0[R8] goto %00000401
000006f5: goto %00000480

00000480:
00000483: goto %00000481

00000481:
00000487: R8 := 5
0000048f: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R8]
00000493: goto %00000401

00000401:
0000040b: R8 := pad:64[mem[R31 + 0x14, el]:u32]
00000411: #6 := 31:0[R8] - 4
00000416: VF := extend:33[#6 + 1] <> extend:33[31:0[R8]] - 3
0000041b: CF := pad:33[#6 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFD
0000041f: ZF := #6 + 1 = 0
00000423: NF := 31:31[#6 + 1]
00000427: R8 := pad:64[#6 + 1]
00000433: when ZF goto %0000042c
00000434: goto %0000042f

0000042f:
00000430: R8 := 1
00000436: goto %00000432

0000042c:
0000042d: R8 := 0
00000435: goto %00000432

00000432:
0000043c: when 0:0[R8] goto %0000043a
000006f6: goto %0000045d

0000045d:
00000460: goto %0000045e

0000045e:
00000464: R8 := 0x10000
0000046b: R8 := mem[R8 + 0xFC0, el]:u64
00000472: R8 := pad:64[mem[R8, el]:u32]
0000047a: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R8]
0000047e: goto %0000043a

0000043a:
00000442: R8 := 0x10000
00000449: R8 := mem[R8 + 0xFC0, el]:u64
00000450: R0 := pad:64[mem[R8, el]:u32]
00000456: R31 := R31 + 0x20
0000045b: call R30 with noreturn

000006f7: sub register_tm_clones(register_tm_clones_result)
0000070b: register_tm_clones_result :: out u32 = low:32[R0]

000002b4:
000002b7: R0 := 0x11000
000002bd: R0 := R0 + 0x30
000002c2: R1 := 0x11000
000002c8: R1 := R1 + 0x30
000002cf: R1 := R1 + ~R0 + 1
000002d5: R2 := 0.63:63[R1]
000002dc: R1 := R2 + (R1 ~>> 3)
000002e2: R1 := extend:64[63:1[R1]]
000002e8: when R1 = 0 goto %000002e6
000006f8: goto %000004e5

000004e5:
000004e8: R2 := 0x10000
000004ef: R2 := mem[R2 + 0xFE0, el]:u64
000004f4: when R2 = 0 goto %000002e6
000006f9: goto %000004f8

000002e6:
000002ee: call R30 with noreturn

000004f8:
000004fc: R16 := R2
00000501: call R16 with noreturn
