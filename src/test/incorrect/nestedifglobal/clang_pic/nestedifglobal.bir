00000703: program
000006cb: sub __cxa_finalize(__cxa_finalize_result)
00000704: __cxa_finalize_result :: out u32 = low:32[R0]

000004cd:
000005c5: R16 := 0x11000
000005cc: R17 := mem[R16 + 8, el]:u64
000005d2: R16 := R16 + 8
000005d7: call R17 with noreturn

000006cc: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000705: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002ea:
000002ee: #3 := R31 - 0x20
000002f4: mem := mem with [#3, el]:u64 <- R29
000002fa: mem := mem with [#3 + 8, el]:u64 <- R30
000002fe: R31 := #3
00000304: R29 := R31
0000030c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000311: R19 := 0x11000
00000318: R0 := pad:64[mem[R19 + 0x30]]
0000031f: when 31:0[R0] <> 0 goto %0000031d
000006f6: goto %00000496

00000496:
00000499: R0 := 0x10000
000004a0: R0 := mem[R0 + 0xFB8, el]:u64
000004a6: when R0 = 0 goto %000004a4
000006f7: goto %000004bd

000004bd:
000004c0: R0 := 0x11000
000004c7: R0 := mem[R0 + 0x28, el]:u64
000004cc: R30 := 0x730
000004cf: call @__cxa_finalize with return %000004a4

000004a4:
000004ac: R30 := 0x734
000004ae: call @deregister_tm_clones with return %000004b0

000004b0:
000004b3: R0 := 1
000004bb: mem := mem with [R19 + 0x30] <- 7:0[R0]
000006f8: goto %0000031d

0000031d:
00000327: R19 := mem[R31 + 0x10, el]:u64
0000032e: R29 := mem[R31, el]:u64
00000333: R30 := mem[R31 + 8, el]:u64
00000337: R31 := R31 + 0x20
0000033c: call R30 with noreturn

000006d0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000706: __libc_start_main_main :: in u64 = R0
00000707: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000708: __libc_start_main_arg3 :: in out u64 = R2
00000709: __libc_start_main_auxv :: in out u64 = R3
0000070a: __libc_start_main_result :: out u32 = low:32[R0]

00000243:
000005af: R16 := 0x11000
000005b6: R17 := mem[R16, el]:u64
000005bc: R16 := R16
000005c1: call R17 with noreturn

000006d1: sub _fini(_fini_result)
0000070b: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000006d2: sub _init(_init_result)
0000070c: _init_result :: out u32 = low:32[R0]

0000061f:
00000625: #8 := R31 - 0x10
0000062b: mem := mem with [#8, el]:u64 <- R29
00000631: mem := mem with [#8 + 8, el]:u64 <- R30
00000635: R31 := #8
0000063b: R29 := R31
00000640: R30 := 0x5C0
00000642: call @call_weak_fn with return %00000644

00000644:
00000649: R29 := mem[R31, el]:u64
0000064e: R30 := mem[R31 + 8, el]:u64
00000652: R31 := R31 + 0x10
00000657: call R30 with noreturn

000006d3: sub _start(_start_result)
0000070d: _start_result :: out u32 = low:32[R0]

00000204:
00000209: R29 := 0
0000020e: R30 := 0
00000214: R5 := R0
0000021b: R1 := mem[R31, el]:u64
00000221: R2 := R31 + 8
00000227: R6 := R31
0000022c: R0 := 0x10000
00000233: R0 := mem[R0 + 0xFD8, el]:u64
00000238: R3 := 0
0000023d: R4 := 0
00000242: R30 := 0x670
00000245: call @__libc_start_main with return %00000247

00000247:
0000024a: R30 := 0x674
0000024d: call @abort with return %000006f9

000006f9:
000006fa: call @call_weak_fn with noreturn

000006d6: sub abort()


0000024b:
000005f1: R16 := 0x11000
000005f8: R17 := mem[R16 + 0x18, el]:u64
000005fe: R16 := R16 + 0x18
00000603: call R17 with noreturn

000006d7: sub call_weak_fn(call_weak_fn_result)
0000070e: call_weak_fn_result :: out u32 = low:32[R0]

0000024f:
00000252: R0 := 0x10000
00000259: R0 := mem[R0 + 0xFD0, el]:u64
0000025f: when R0 = 0 goto %0000025d
000006fb: goto %0000050d

0000025d:
00000265: call R30 with noreturn

0000050d:
00000510: goto @__gmon_start__

0000050e:
000005db: R16 := 0x11000
000005e2: R17 := mem[R16 + 0x10, el]:u64
000005e8: R16 := R16 + 0x10
000005ed: call R17 with noreturn

000006d9: sub deregister_tm_clones(deregister_tm_clones_result)
0000070f: deregister_tm_clones_result :: out u32 = low:32[R0]

0000026b:
0000026e: R0 := 0x11000
00000274: R0 := R0 + 0x30
00000279: R1 := 0x11000
0000027f: R1 := R1 + 0x30
00000285: #1 := ~R0
0000028a: #2 := R1 + ~R0
00000290: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000296: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000029a: ZF := #2 + 1 = 0
0000029e: NF := 63:63[#2 + 1]
000002a4: when ZF goto %000002a2
000006fc: goto %000004ef

000004ef:
000004f2: R1 := 0x10000
000004f9: R1 := mem[R1 + 0xFB0, el]:u64
000004fe: when R1 = 0 goto %000002a2
000006fd: goto %00000502

000002a2:
000002aa: call R30 with noreturn

00000502:
00000506: R16 := R1
0000050b: call R16 with noreturn

000006dc: sub frame_dummy(frame_dummy_result)
00000710: frame_dummy_result :: out u32 = low:32[R0]

00000342:
00000344: call @register_tm_clones with noreturn

000006dd: sub main(main_argc, main_argv, main_result)
00000711: main_argc :: in u32 = low:32[R0]
00000712: main_argv :: in out u64 = R1
00000713: main_result :: out u32 = low:32[R0]

00000346:
0000034a: R31 := R31 - 0x20
0000034f: R8 := 0x10000
00000356: R8 := mem[R8 + 0xFC8, el]:u64
0000035e: mem := mem with [R31 + 8, el]:u64 <- R8
00000365: mem := mem with [R31 + 0x1C, el]:u32 <- 0
0000036d: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
00000374: R9 := pad:64[mem[R31 + 0x18, el]:u32]
0000037c: mem := mem with [R8, el]:u32 <- 31:0[R9]
00000383: mem := mem with [R31 + 0x14, el]:u32 <- 0
0000038a: R8 := pad:64[mem[R8, el]:u32]
00000390: #4 := 31:0[R8] - 1
00000395: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
0000039a: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
0000039e: ZF := #4 + 1 = 0
000003a2: NF := 31:31[#4 + 1]
000003a6: R8 := pad:64[#4 + 1]
000003b2: when ZF goto %000003ab
000003b3: goto %000003ae

000003ae:
000003af: R8 := 1
000003b5: goto %000003b1

000003ab:
000003ac: R8 := 0
000003b4: goto %000003b1

000003b1:
000003bb: when 0:0[R8] goto %000003b9
000006fe: goto %00000481

00000481:
00000484: goto %00000482

00000482:
00000488: R8 := 3
00000490: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R8]
00000494: goto %000003b9

000003b9:
000003c3: R8 := mem[R31 + 8, el]:u64
000003ca: R8 := pad:64[mem[R8, el]:u32]
000003d0: #5 := 31:0[R8] - 2
000003d5: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] - 1
000003da: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFF
000003de: ZF := #5 + 1 = 0
000003e2: NF := 31:31[#5 + 1]
000003e6: R8 := pad:64[#5 + 1]
000003f2: when ZF goto %000003eb
000003f3: goto %000003ee

000003ee:
000003ef: R8 := 1
000003f5: goto %000003f1

000003eb:
000003ec: R8 := 0
000003f4: goto %000003f1

000003f1:
000003fb: when 0:0[R8] goto %000003f9
000006ff: goto %0000046c

0000046c:
0000046f: goto %0000046d

0000046d:
00000473: R8 := 5
0000047b: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R8]
0000047f: goto %000003f9

000003f9:
00000403: R8 := pad:64[mem[R31 + 0x14, el]:u32]
00000409: #6 := 31:0[R8] - 4
0000040e: VF := extend:33[#6 + 1] <> extend:33[31:0[R8]] - 3
00000413: CF := pad:33[#6 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFD
00000417: ZF := #6 + 1 = 0
0000041b: NF := 31:31[#6 + 1]
0000041f: R8 := pad:64[#6 + 1]
0000042b: when ZF goto %00000424
0000042c: goto %00000427

00000427:
00000428: R8 := 1
0000042e: goto %0000042a

00000424:
00000425: R8 := 0
0000042d: goto %0000042a

0000042a:
00000434: when 0:0[R8] goto %00000432
00000700: goto %00000449

00000449:
0000044c: goto %0000044a

0000044a:
00000450: R8 := 0x10000
00000457: R8 := mem[R8 + 0xFC0, el]:u64
0000045e: R8 := pad:64[mem[R8, el]:u32]
00000466: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R8]
0000046a: goto %00000432

00000432:
0000043c: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000442: R31 := R31 + 0x20
00000447: call R30 with noreturn

000006e1: sub register_tm_clones(register_tm_clones_result)
00000714: register_tm_clones_result :: out u32 = low:32[R0]

000002ac:
000002af: R0 := 0x11000
000002b5: R0 := R0 + 0x30
000002ba: R1 := 0x11000
000002c0: R1 := R1 + 0x30
000002c7: R1 := R1 + ~R0 + 1
000002cd: R2 := 0.63:63[R1]
000002d4: R1 := R2 + (R1 ~>> 3)
000002da: R1 := extend:64[63:1[R1]]
000002e0: when R1 = 0 goto %000002de
00000701: goto %000004d1

000004d1:
000004d4: R2 := 0x10000
000004db: R2 := mem[R2 + 0xFE0, el]:u64
000004e0: when R2 = 0 goto %000002de
00000702: goto %000004e4

000002de:
000002e6: call R30 with noreturn

000004e4:
000004e8: R16 := R2
000004ed: call R16 with noreturn
