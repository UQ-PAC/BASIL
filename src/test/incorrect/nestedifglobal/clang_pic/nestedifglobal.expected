var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:inline} byte_extract64_64(value: bv64, offset: bv64) returns (bv8) {
  bvlshr64(value,bvmul64(offset,8bv64))[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then byte_extract64_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2052bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2053bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2054bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2055bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main(R0_in: bv64, Gamma_R0_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load8_le(mem, 2052bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2053bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2054bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2055bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1792bv64);
  free ensures (memory_load8_le(mem, 2052bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2053bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2054bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2055bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool)
{
  var Gamma_R0_2: bool;
  var Gamma_R8_10: bool;
  var Gamma_R8_11: bool;
  var Gamma_R8_16: bool;
  var Gamma_R8_18: bool;
  var Gamma_R8_2: bool;
  var Gamma_R8_23: bool;
  var Gamma_R8_25: bool;
  var Gamma_R8_26: bool;
  var Gamma_R8_28: bool;
  var Gamma_R8_3: bool;
  var Gamma_R8_8: bool;
  var Gamma_R9_1: bool;
  var R0_2: bv64;
  var R8_10: bv64;
  var R8_11: bv32;
  var R8_16: bv64;
  var R8_18: bv32;
  var R8_2: bv64;
  var R8_23: bv64;
  var R8_25: bv64;
  var R8_26: bv64;
  var R8_28: bv64;
  var R8_3: bv32;
  var R8_8: bv64;
  var R9_1: bv64;
  lmain:
    call rely();
    R8_2, Gamma_R8_2 := memory_load64_le(mem, 69576bv64), (gamma_load64(Gamma_mem, 69576bv64) || L(mem, 69576bv64));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551592bv64), R8_2), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64), Gamma_R8_2);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), R0_in[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), Gamma_R0_in);
    R9_1, Gamma_R9_1 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551608bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64));
    call rely();
    assert (L(mem, R8_2) ==> Gamma_R9_1);
    mem, Gamma_mem := memory_store32_le(mem, R8_2, R9_1[32:0]), gamma_store32(Gamma_mem, R8_2, Gamma_R9_1);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), true);
    call rely();
    R8_3, Gamma_R8_3 := memory_load32_le(mem, R8_2), (gamma_load32(Gamma_mem, R8_2) || L(mem, R8_2));
    assert Gamma_R8_3;
    goto lmain_goto_l000003ab, lmain_goto_l000003ae;
  lmain_goto_l000003ae:
    assume (!(R8_3 == 0bv32));
    R8_8, Gamma_R8_8 := 1bv64, true;
    goto l000003b1;
  lmain_goto_l000003ab:
    assume (R8_3 == 0bv32);
    R8_8, Gamma_R8_8 := 0bv64, true;
    goto l000003b1;
  l000003b1:
    assert Gamma_R8_8;
    goto l000003b1_goto_l000003b9, l000003b1_goto_l00000481;
  l000003b1_goto_l00000481:
    assume (!(R8_8[1:0] == 1bv1));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), 3bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), true);
    goto l000003b9;
  l000003b1_goto_l000003b9:
    assume (R8_8[1:0] == 1bv1);
    goto l000003b9;
  l000003b9:
    R8_10, Gamma_R8_10 := memory_load64_le(stack, bvadd64(R31_in, 18446744073709551592bv64)), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64));
    call rely();
    R8_11, Gamma_R8_11 := memory_load32_le(mem, R8_10), (gamma_load32(Gamma_mem, R8_10) || L(mem, R8_10));
    assert Gamma_R8_11;
    goto l000003b9_goto_l000003eb, l000003b9_goto_l000003ee;
  l000003b9_goto_l000003ee:
    assume (!(R8_11 == 1bv32));
    R8_16, Gamma_R8_16 := 1bv64, true;
    goto l000003f1;
  l000003b9_goto_l000003eb:
    assume (R8_11 == 1bv32);
    R8_16, Gamma_R8_16 := 0bv64, true;
    goto l000003f1;
  l000003f1:
    assert Gamma_R8_16;
    goto l000003f1_goto_l000003f9, l000003f1_goto_l0000046c;
  l000003f1_goto_l0000046c:
    assume (!(R8_16[1:0] == 1bv1));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), 5bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), true);
    goto l000003f9;
  l000003f1_goto_l000003f9:
    assume (R8_16[1:0] == 1bv1);
    goto l000003f9;
  l000003f9:
    R8_18, Gamma_R8_18 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551604bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64));
    assert Gamma_R8_18;
    goto l000003f9_goto_l00000424, l000003f9_goto_l00000427;
  l000003f9_goto_l00000427:
    assume (!(R8_18 == 3bv32));
    R8_23, Gamma_R8_23 := 1bv64, true;
    goto l0000042a;
  l000003f9_goto_l00000424:
    assume (R8_18 == 3bv32);
    R8_23, Gamma_R8_23 := 0bv64, true;
    goto l0000042a;
  l0000042a:
    assert Gamma_R8_23;
    goto l0000042a_goto_l00000432, l0000042a_goto_l00000449;
  l0000042a_goto_l00000449:
    assume (!(R8_23[1:0] == 1bv1));
    call rely();
    R8_25, Gamma_R8_25 := memory_load64_le(mem, 69568bv64), (gamma_load64(Gamma_mem, 69568bv64) || L(mem, 69568bv64));
    call rely();
    R8_26, Gamma_R8_26 := zero_extend32_32(memory_load32_le(mem, R8_25)), (gamma_load32(Gamma_mem, R8_25) || L(mem, R8_25));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), R8_26[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), Gamma_R8_26);
    R8_28, Gamma_R8_28 := R8_26, Gamma_R8_26;
    goto l00000432;
  l0000042a_goto_l00000432:
    assume (R8_23[1:0] == 1bv1);
    R8_28, Gamma_R8_28 := R8_23, Gamma_R8_23;
    goto l00000432;
  l00000432:
    R0_2, Gamma_R0_2 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551612bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64));
    goto main_basil_return;
  main_basil_return:
    R0_out, R31_out, R8_out, R9_out := R0_2, R31_in, R8_28, R9_1;
    Gamma_R0_out, Gamma_R31_out, Gamma_R8_out, Gamma_R9_out := Gamma_R0_2, Gamma_R31_in, Gamma_R8_28, Gamma_R9_1;
    return;
}

