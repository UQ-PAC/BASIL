var {:extern} $CF: bv1;
var {:extern} $Gamma_CF: bool;
var {:extern} $Gamma_NF: bool;
var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R1: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_VF: bool;
var {:extern} $Gamma_ZF: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $NF: bv1;
var {:extern} $R0: bv64;
var {:extern} $R1: bv64;
var {:extern} $R31: bv64;
var {:extern} $VF: bv1;
var {:extern} $ZF: bv1;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp64(bv64, bv64) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} {:bvbuiltin "sign_extend 32"} sign_extend32_32(bv32) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 2028bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69000bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 69656bv64);
  free ensures (memory_load64_le($mem, 69600bv64) == 69652bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$main_1876();
  modifies $CF, $Gamma_CF, $Gamma_NF, $Gamma_R0, $Gamma_R1, $Gamma_R31, $Gamma_VF, $Gamma_ZF, $Gamma_mem, $Gamma_stack, $NF, $R0, $R1, $R31, $VF, $ZF, $mem, $stack;
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le($mem, 2028bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69000bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69008bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 69656bv64);
  free requires (memory_load64_le($mem, 69600bv64) == 69652bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1876bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 2028bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69000bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 69656bv64);
  free ensures (memory_load64_le($mem, 69600bv64) == 69652bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_1876()
{
  var #Cse0__5_12: bv32;
  var #Cse0__5_21: bv32;
  var #Exp14__5_11: bv32;
  var #Exp14__5_13: bv64;
  var #Exp14__5_14: bv32;
  var #Exp14__5_15: bv64;
  var #Exp14__5_16: bv32;
  var #Exp14__5_17: bv64;
  var #Exp14__5_18: bv32;
  var #Exp14__5_19: bv64;
  var #Exp14__5_20: bv32;
  var #Exp14__5_22: bv64;
  var #Exp14__5_23: bv32;
  var #Gamma_Cse0__5_12: bool;
  var #Gamma_Cse0__5_21: bool;
  var #Gamma_Exp14__5_11: bool;
  var #Gamma_Exp14__5_13: bool;
  var #Gamma_Exp14__5_14: bool;
  var #Gamma_Exp14__5_15: bool;
  var #Gamma_Exp14__5_16: bool;
  var #Gamma_Exp14__5_17: bool;
  var #Gamma_Exp14__5_18: bool;
  var #Gamma_Exp14__5_19: bool;
  var #Gamma_Exp14__5_20: bool;
  var #Gamma_Exp14__5_22: bool;
  var #Gamma_Exp14__5_23: bool;
  b#main_entry:
    assume {:captureState "main_entry (6JJvkaLhTaWXaEL0+yxKxg==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551584bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), $Gamma_R0);
    assume {:captureState "1880_0"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #Exp14__5_13, #Gamma_Exp14__5_13 := memory_load64_le($mem, bvadd64($R0, 4064bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4064bv64)) || L($mem, bvadd64($R0, 4064bv64)));
    $R0, $Gamma_R0 := #Exp14__5_13, #Gamma_Exp14__5_13;
    #Exp14__5_14, #Gamma_Exp14__5_14 := memory_load32_le($stack, bvadd64($R31, 12bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 12bv64));
    $R1, $Gamma_R1 := zero_extend32_32(#Exp14__5_14), #Gamma_Exp14__5_14;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store32_le($mem, $R0, $R1[32:0]), gamma_store32($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "1896_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 28bv64), 0bv32), gamma_store32($Gamma_stack, bvadd64($R31, 28bv64), true);
    assume {:captureState "1900_0"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #Exp14__5_15, #Gamma_Exp14__5_15 := memory_load64_le($mem, bvadd64($R0, 4064bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4064bv64)) || L($mem, bvadd64($R0, 4064bv64)));
    $R0, $Gamma_R0 := #Exp14__5_15, #Gamma_Exp14__5_15;
    call p$rely();
    #Exp14__5_16, #Gamma_Exp14__5_16 := memory_load32_le($mem, $R0), (gamma_load32($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := zero_extend32_32(#Exp14__5_16), #Gamma_Exp14__5_16;
    $VF, $Gamma_VF := 0bv1, true;
    $CF, $Gamma_CF := 1bv1, true;
    $ZF, $Gamma_ZF := bvcomp32($R0[32:0], 0bv32), $Gamma_R0;
    $NF, $Gamma_NF := $R0[32:31], $Gamma_R0;
    assert $Gamma_ZF;
    goto b#main_21, b#main_25;
  b#main_25:
    assume {:captureState "main_25"} true;
    assume (!(!($ZF == 1bv1)));
    $R0, $Gamma_R0 := 3bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 28bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 28bv64), $Gamma_R0);
    assume {:captureState "1928_0"} true;
    goto b#main_23;
  b#main_23:
    assume {:captureState "main_23 (OuTzy8qRTci75taVjGinFQ==)"} true;
    goto b#main_19;
  b#main_21:
    assume {:captureState "main_21"} true;
    assume (!($ZF == 1bv1));
    goto b#main_19;
  b#main_19:
    assume {:captureState "main_19 (rCSSdLZcRB2TKAu9h+WCqg==)"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #Exp14__5_19, #Gamma_Exp14__5_19 := memory_load64_le($mem, bvadd64($R0, 4064bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4064bv64)) || L($mem, bvadd64($R0, 4064bv64)));
    $R0, $Gamma_R0 := #Exp14__5_19, #Gamma_Exp14__5_19;
    call p$rely();
    #Exp14__5_20, #Gamma_Exp14__5_20 := memory_load32_le($mem, $R0), (gamma_load32($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := zero_extend32_32(#Exp14__5_20), #Gamma_Exp14__5_20;
    #Cse0__5_21, #Gamma_Cse0__5_21 := bvadd32($R0[32:0], 4294967295bv32), $Gamma_R0;
    $VF, $Gamma_VF := bvnot1(bvcomp64(sign_extend32_32(#Cse0__5_21), bvadd64(sign_extend32_32($R0[32:0]), 18446744073709551615bv64))), ($Gamma_R0 && #Gamma_Cse0__5_21);
    $CF, $Gamma_CF := bvnot1(bvcomp64(zero_extend32_32(#Cse0__5_21), bvadd64(zero_extend32_32($R0[32:0]), 4294967295bv64))), ($Gamma_R0 && #Gamma_Cse0__5_21);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_21, 0bv32), #Gamma_Cse0__5_21;
    $NF, $Gamma_NF := #Cse0__5_21[32:31], #Gamma_Cse0__5_21;
    assert $Gamma_ZF;
    goto b#main_13, b#main_17;
  b#main_17:
    assume {:captureState "main_17"} true;
    assume (!(!($ZF == 1bv1)));
    $R0, $Gamma_R0 := 5bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 28bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 28bv64), $Gamma_R0);
    assume {:captureState "1956_0"} true;
    goto b#main_15;
  b#main_15:
    assume {:captureState "main_15 (ZLfuz7OtTNOS9GLtqSI1gg==)"} true;
    goto b#main_11;
  b#main_13:
    assume {:captureState "main_13"} true;
    assume (!($ZF == 1bv1));
    goto b#main_11;
  b#main_11:
    assume {:captureState "main_11 (HVqN0/3+RWiLPKsHRvUqeg==)"} true;
    #Exp14__5_11, #Gamma_Exp14__5_11 := memory_load32_le($stack, bvadd64($R31, 28bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 28bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#Exp14__5_11), #Gamma_Exp14__5_11;
    #Cse0__5_12, #Gamma_Cse0__5_12 := bvadd32($R0[32:0], 4294967293bv32), $Gamma_R0;
    $VF, $Gamma_VF := bvnot1(bvcomp64(sign_extend32_32(#Cse0__5_12), bvadd64(sign_extend32_32($R0[32:0]), 18446744073709551613bv64))), ($Gamma_R0 && #Gamma_Cse0__5_12);
    $CF, $Gamma_CF := bvnot1(bvcomp64(zero_extend32_32(#Cse0__5_12), bvadd64(zero_extend32_32($R0[32:0]), 4294967293bv64))), ($Gamma_R0 && #Gamma_Cse0__5_12);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_12, 0bv32), #Gamma_Cse0__5_12;
    $NF, $Gamma_NF := #Cse0__5_12[32:31], #Gamma_Cse0__5_12;
    assert $Gamma_ZF;
    goto b#main_5, b#main_9;
  b#main_9:
    assume {:captureState "main_9"} true;
    assume (!(!($ZF == 1bv1)));
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #Exp14__5_17, #Gamma_Exp14__5_17 := memory_load64_le($mem, bvadd64($R0, 4056bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4056bv64)) || L($mem, bvadd64($R0, 4056bv64)));
    $R0, $Gamma_R0 := #Exp14__5_17, #Gamma_Exp14__5_17;
    call p$rely();
    #Exp14__5_18, #Gamma_Exp14__5_18 := memory_load32_le($mem, $R0), (gamma_load32($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := zero_extend32_32(#Exp14__5_18), #Gamma_Exp14__5_18;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 28bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 28bv64), $Gamma_R0);
    assume {:captureState "1984_0"} true;
    goto b#main_7;
  b#main_7:
    assume {:captureState "main_7 (32fWxY7+R++JNJOFTmT+Sg==)"} true;
    goto b#main_3;
  b#main_5:
    assume {:captureState "main_5"} true;
    assume (!($ZF == 1bv1));
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (lr6o4ptnRiK3TGR1gpiWGg==)"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #Exp14__5_22, #Gamma_Exp14__5_22 := memory_load64_le($mem, bvadd64($R0, 4056bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4056bv64)) || L($mem, bvadd64($R0, 4056bv64)));
    $R0, $Gamma_R0 := #Exp14__5_22, #Gamma_Exp14__5_22;
    call p$rely();
    #Exp14__5_23, #Gamma_Exp14__5_23 := memory_load32_le($mem, $R0), (gamma_load32($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := zero_extend32_32(#Exp14__5_23), #Gamma_Exp14__5_23;
    $R31, $Gamma_R31 := bvadd64($R31, 32bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

