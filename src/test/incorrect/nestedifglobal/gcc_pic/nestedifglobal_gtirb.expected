var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2028bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2029bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2030bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2031bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1872bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main(R0_in: bv64, Gamma_R0_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R31_out: bv64, Gamma_R31_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 2028bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2029bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2030bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2031bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 69656bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1872bv64);
  free ensures (memory_load8_le(mem, 2028bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2029bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2030bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2031bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1872bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R31_out: bv64, Gamma_R31_out: bool)
{
  var Gamma_R0_10: bool;
  var Gamma_R0_12: bool;
  var Gamma_R0_14: bool;
  var Gamma_R0_15: bool;
  var Gamma_R0_17: bool;
  var Gamma_R0_18: bool;
  var Gamma_R0_3: bool;
  var Gamma_R0_5: bool;
  var Gamma_R0_6: bool;
  var Gamma_R0_9: bool;
  var Gamma_R1_1: bool;
  var Gamma_R1_10: bool;
  var Gamma_R1_4: bool;
  var Gamma_R1_7: bool;
  var Gamma_R31_11: bool;
  var Gamma_R31_2: bool;
  var Gamma_R31_5: bool;
  var Gamma_R31_8: bool;
  var R0_10: bv64;
  var R0_12: bv64;
  var R0_14: bv64;
  var R0_15: bv64;
  var R0_17: bv64;
  var R0_18: bv64;
  var R0_3: bv64;
  var R0_5: bv64;
  var R0_6: bv64;
  var R0_9: bv64;
  var R1_1: bv64;
  var R1_10: bv64;
  var R1_4: bv64;
  var R1_7: bv64;
  var R31_11: bv64;
  var R31_2: bv64;
  var R31_5: bv64;
  var R31_8: bv64;
  $main$__0__$_4YKHPc_R16UBSwXbttMHg:
    R31_2, Gamma_R31_2 := bvadd64(R31_in, 18446744073709551584bv64), Gamma_R31_in;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551596bv64), R0_in[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64), Gamma_R0_in);
    call rely();
    R0_3, Gamma_R0_3 := memory_load64_le(mem, 69600bv64), (gamma_load64(Gamma_mem, 69600bv64) || L(mem, 69600bv64));
    R1_1, Gamma_R1_1 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551596bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64));
    call rely();
    assert (L(mem, R0_3) ==> Gamma_R1_1);
    mem, Gamma_mem := memory_store32_le(mem, R0_3, R1_1[32:0]), gamma_store32(Gamma_mem, R0_3, Gamma_R1_1);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    call rely();
    R0_5, Gamma_R0_5 := memory_load64_le(mem, 69600bv64), (gamma_load64(Gamma_mem, 69600bv64) || L(mem, 69600bv64));
    call rely();
    R0_6, Gamma_R0_6 := zero_extend32_32(memory_load32_le(mem, R0_5)), (gamma_load32(Gamma_mem, R0_5) || L(mem, R0_5));
    assert Gamma_R0_6;
    goto $main$__0__$_4YKHPc_R16UBSwXbttMHg_goto_$main$__2__$suhWjK9FQk6egl8Kq7bkzA, $main$__0__$_4YKHPc_R16UBSwXbttMHg_goto_$main$__1__$JFpnTYKyQUOhK~aVMxMB9w;
  $main$__0__$_4YKHPc_R16UBSwXbttMHg_goto_$main$__1__$JFpnTYKyQUOhK~aVMxMB9w:
    assume (R0_6[32:0] == 0bv32);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 3bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    R31_5, Gamma_R31_5 := R31_2, Gamma_R31_2;
    R1_4, Gamma_R1_4 := R1_1, Gamma_R1_1;
    goto $main$__2__$suhWjK9FQk6egl8Kq7bkzA;
  $main$__0__$_4YKHPc_R16UBSwXbttMHg_goto_$main$__2__$suhWjK9FQk6egl8Kq7bkzA:
    assume (!(R0_6[32:0] == 0bv32));
    R31_5, Gamma_R31_5 := R31_2, Gamma_R31_2;
    R1_4, Gamma_R1_4 := R1_1, Gamma_R1_1;
    goto $main$__2__$suhWjK9FQk6egl8Kq7bkzA;
  $main$__2__$suhWjK9FQk6egl8Kq7bkzA:
    call rely();
    R0_9, Gamma_R0_9 := memory_load64_le(mem, 69600bv64), (gamma_load64(Gamma_mem, 69600bv64) || L(mem, 69600bv64));
    call rely();
    R0_10, Gamma_R0_10 := zero_extend32_32(memory_load32_le(mem, R0_9)), (gamma_load32(Gamma_mem, R0_9) || L(mem, R0_9));
    assert Gamma_R0_10;
    goto $main$__2__$suhWjK9FQk6egl8Kq7bkzA_goto_$main$__4__$pjW61HZrTOmndoem0ZAjmQ, $main$__2__$suhWjK9FQk6egl8Kq7bkzA_goto_$main$__3__$25~YyveSSxKjFiy3ZvDL7w;
  $main$__2__$suhWjK9FQk6egl8Kq7bkzA_goto_$main$__3__$25~YyveSSxKjFiy3ZvDL7w:
    assume (R0_10[32:0] == 1bv32);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_5, 28bv64), 5bv32), gamma_store32(Gamma_stack, bvadd64(R31_5, 28bv64), true);
    R31_8, Gamma_R31_8 := R31_5, Gamma_R31_5;
    R1_7, Gamma_R1_7 := R1_4, Gamma_R1_4;
    goto $main$__4__$pjW61HZrTOmndoem0ZAjmQ;
  $main$__2__$suhWjK9FQk6egl8Kq7bkzA_goto_$main$__4__$pjW61HZrTOmndoem0ZAjmQ:
    assume (!(R0_10[32:0] == 1bv32));
    R31_8, Gamma_R31_8 := R31_5, Gamma_R31_5;
    R1_7, Gamma_R1_7 := R1_4, Gamma_R1_4;
    goto $main$__4__$pjW61HZrTOmndoem0ZAjmQ;
  $main$__4__$pjW61HZrTOmndoem0ZAjmQ:
    R0_12, Gamma_R0_12 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_8, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31_8, 28bv64));
    assert Gamma_R0_12;
    goto $main$__4__$pjW61HZrTOmndoem0ZAjmQ_goto_$main$__6__$~1v8YRimTzWott7vgkSlCw, $main$__4__$pjW61HZrTOmndoem0ZAjmQ_goto_$main$__5__$7jJxdga~TUGdn0Pj55GVWw;
  $main$__4__$pjW61HZrTOmndoem0ZAjmQ_goto_$main$__5__$7jJxdga~TUGdn0Pj55GVWw:
    assume (R0_12[32:0] == 3bv32);
    call rely();
    R0_14, Gamma_R0_14 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    R0_15, Gamma_R0_15 := zero_extend32_32(memory_load32_le(mem, R0_14)), (gamma_load32(Gamma_mem, R0_14) || L(mem, R0_14));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_8, 28bv64), R0_15[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_8, 28bv64), Gamma_R0_15);
    R31_11, Gamma_R31_11 := R31_8, Gamma_R31_8;
    R1_10, Gamma_R1_10 := R1_7, Gamma_R1_7;
    goto $main$__6__$~1v8YRimTzWott7vgkSlCw;
  $main$__4__$pjW61HZrTOmndoem0ZAjmQ_goto_$main$__6__$~1v8YRimTzWott7vgkSlCw:
    assume (!(R0_12[32:0] == 3bv32));
    R31_11, Gamma_R31_11 := R31_8, Gamma_R31_8;
    R1_10, Gamma_R1_10 := R1_7, Gamma_R1_7;
    goto $main$__6__$~1v8YRimTzWott7vgkSlCw;
  $main$__6__$~1v8YRimTzWott7vgkSlCw:
    call rely();
    R0_17, Gamma_R0_17 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    R0_18, Gamma_R0_18 := zero_extend32_32(memory_load32_le(mem, R0_17)), (gamma_load32(Gamma_mem, R0_17) || L(mem, R0_17));
    goto main_basil_return;
  main_basil_return:
    R0_out, R1_out, R31_out := R0_18, R1_10, bvadd64(R31_11, 32bv64);
    Gamma_R0_out, Gamma_R1_out, Gamma_R31_out := Gamma_R0_18, Gamma_R1_10, Gamma_R31_11;
    return;
}

