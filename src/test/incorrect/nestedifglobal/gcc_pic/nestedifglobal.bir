000006a8: program
0000066a: sub __cxa_finalize(__cxa_finalize_result)
000006a9: __cxa_finalize_result :: out u32 = low:32[R0]

00000472:
0000056a: R16 := 0x20000
00000571: R17 := mem[R16 + 8, el]:u64
00000577: R16 := R16 + 8
0000057c: call R17 with noreturn

0000066b: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006aa: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002d3:
000002d7: #3 := R31 - 0x20
000002dd: mem := mem with [#3, el]:u64 <- R29
000002e3: mem := mem with [#3 + 8, el]:u64 <- R30
000002e7: R31 := #3
000002ed: R29 := R31
000002f5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002fa: R19 := 0x20000
00000301: R0 := pad:64[mem[R19 + 0x30]]
00000307: when 0:0[R0] goto %00000305
00000698: goto %0000043b

0000043b:
0000043e: R0 := 0x1F000
00000445: R0 := mem[R0 + 0xFB8, el]:u64
0000044b: when R0 = 0 goto %00000449
00000699: goto %00000462

00000462:
00000465: R0 := 0x20000
0000046c: R0 := mem[R0 + 0x28, el]:u64
00000471: R30 := 0x730
00000474: call @__cxa_finalize with return %00000449

00000449:
00000451: R30 := 0x734
00000453: call @deregister_tm_clones with return %00000455

00000455:
00000458: R0 := 1
00000460: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000069a: goto %00000305

00000305:
0000030f: R19 := mem[R31 + 0x10, el]:u64
00000316: R29 := mem[R31, el]:u64
0000031b: R30 := mem[R31 + 8, el]:u64
0000031f: R31 := R31 + 0x20
00000324: call R30 with noreturn

0000066f: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006ab: __libc_start_main_main :: in u64 = R0
000006ac: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006ad: __libc_start_main_arg3 :: in out u64 = R2
000006ae: __libc_start_main_auxv :: in out u64 = R3
000006af: __libc_start_main_result :: out u32 = low:32[R0]

0000022c:
00000554: R16 := 0x20000
0000055b: R17 := mem[R16, el]:u64
00000561: R16 := R16
00000566: call R17 with noreturn

00000670: sub _fini(_fini_result)
000006b0: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000671: sub _init(_init_result)
000006b1: _init_result :: out u32 = low:32[R0]

000005c4:
000005ca: #8 := R31 - 0x10
000005d0: mem := mem with [#8, el]:u64 <- R29
000005d6: mem := mem with [#8 + 8, el]:u64 <- R30
000005da: R31 := #8
000005e0: R29 := R31
000005e5: R30 := 0x5C0
000005e7: call @call_weak_fn with return %000005e9

000005e9:
000005ee: R29 := mem[R31, el]:u64
000005f3: R30 := mem[R31 + 8, el]:u64
000005f7: R31 := R31 + 0x10
000005fc: call R30 with noreturn

00000672: sub _start(_start_result)
000006b2: _start_result :: out u32 = low:32[R0]

000001ed:
000001f2: R29 := 0
000001f7: R30 := 0
000001fd: R5 := R0
00000204: R1 := mem[R31, el]:u64
0000020a: R2 := R31 + 8
00000210: R6 := R31
00000215: R0 := 0x1F000
0000021c: R0 := mem[R0 + 0xFD8, el]:u64
00000221: R3 := 0
00000226: R4 := 0
0000022b: R30 := 0x670
0000022e: call @__libc_start_main with return %00000230

00000230:
00000233: R30 := 0x674
00000236: call @abort with return %0000069b

0000069b:
0000069c: call @call_weak_fn with noreturn

00000675: sub abort()


00000234:
00000596: R16 := 0x20000
0000059d: R17 := mem[R16 + 0x18, el]:u64
000005a3: R16 := R16 + 0x18
000005a8: call R17 with noreturn

00000676: sub call_weak_fn(call_weak_fn_result)
000006b3: call_weak_fn_result :: out u32 = low:32[R0]

00000238:
0000023b: R0 := 0x1F000
00000242: R0 := mem[R0 + 0xFD0, el]:u64
00000248: when R0 = 0 goto %00000246
0000069d: goto %000004b2

00000246:
0000024e: call R30 with noreturn

000004b2:
000004b5: goto @__gmon_start__

000004b3:
00000580: R16 := 0x20000
00000587: R17 := mem[R16 + 0x10, el]:u64
0000058d: R16 := R16 + 0x10
00000592: call R17 with noreturn

00000678: sub deregister_tm_clones(deregister_tm_clones_result)
000006b4: deregister_tm_clones_result :: out u32 = low:32[R0]

00000254:
00000257: R0 := 0x20000
0000025d: R0 := R0 + 0x30
00000262: R1 := 0x20000
00000268: R1 := R1 + 0x30
0000026e: #1 := ~R0
00000273: #2 := R1 + ~R0
00000279: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000027f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000283: ZF := #2 + 1 = 0
00000287: NF := 63:63[#2 + 1]
0000028d: when ZF goto %0000028b
0000069e: goto %00000494

00000494:
00000497: R1 := 0x1F000
0000049e: R1 := mem[R1 + 0xFB0, el]:u64
000004a3: when R1 = 0 goto %0000028b
0000069f: goto %000004a7

0000028b:
00000293: call R30 with noreturn

000004a7:
000004ab: R16 := R1
000004b0: call R16 with noreturn

0000067b: sub frame_dummy(frame_dummy_result)
000006b5: frame_dummy_result :: out u32 = low:32[R0]

0000032a:
0000032c: call @register_tm_clones with noreturn

0000067c: sub main(main_argc, main_argv, main_result)
000006b6: main_argc :: in u32 = low:32[R0]
000006b7: main_argv :: in out u64 = R1
000006b8: main_result :: out u32 = low:32[R0]

0000032e:
00000332: R31 := R31 - 0x20
0000033a: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000033f: R0 := 0x1F000
00000346: R0 := mem[R0 + 0xFC8, el]:u64
0000034d: R1 := pad:64[mem[R31 + 0xC, el]:u32]
00000355: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000035c: mem := mem with [R31 + 0x1C, el]:u32 <- 0
00000361: R0 := 0x1F000
00000368: R0 := mem[R0 + 0xFC8, el]:u64
0000036f: R0 := pad:64[mem[R0, el]:u32]
00000375: #4 := 31:0[R0] - 1
0000037a: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
0000037f: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000383: ZF := #4 + 1 = 0
00000387: NF := 31:31[#4 + 1]
0000038d: when ZF <> 1 goto %0000038b
000006a0: goto %0000042e

0000042e:
00000431: R0 := 3
00000439: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000006a1: goto %0000038b

0000038b:
00000393: R0 := 0x1F000
0000039a: R0 := mem[R0 + 0xFC8, el]:u64
000003a1: R0 := pad:64[mem[R0, el]:u32]
000003a7: #5 := 31:0[R0] - 2
000003ac: VF := extend:33[#5 + 1] <> extend:33[31:0[R0]] - 1
000003b1: CF := pad:33[#5 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFF
000003b5: ZF := #5 + 1 = 0
000003b9: NF := 31:31[#5 + 1]
000003bf: when ZF <> 1 goto %000003bd
000006a2: goto %00000421

00000421:
00000424: R0 := 5
0000042c: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000006a3: goto %000003bd

000003bd:
000003c7: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000003cd: #6 := 31:0[R0] - 4
000003d2: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] - 3
000003d7: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFD
000003db: ZF := #6 + 1 = 0
000003df: NF := 31:31[#6 + 1]
000003e5: when ZF <> 1 goto %000003e3
000006a4: goto %00000406

00000406:
00000409: R0 := 0x1F000
00000410: R0 := mem[R0 + 0xFC0, el]:u64
00000417: R0 := pad:64[mem[R0, el]:u32]
0000041f: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000006a5: goto %000003e3

000003e3:
000003eb: R0 := 0x1F000
000003f2: R0 := mem[R0 + 0xFC0, el]:u64
000003f9: R0 := pad:64[mem[R0, el]:u32]
000003ff: R31 := R31 + 0x20
00000404: call R30 with noreturn

00000683: sub register_tm_clones(register_tm_clones_result)
000006b9: register_tm_clones_result :: out u32 = low:32[R0]

00000295:
00000298: R0 := 0x20000
0000029e: R0 := R0 + 0x30
000002a3: R1 := 0x20000
000002a9: R1 := R1 + 0x30
000002b0: R1 := R1 + ~R0 + 1
000002b6: R2 := 0.63:63[R1]
000002bd: R1 := R2 + (R1 ~>> 3)
000002c3: R1 := extend:64[63:1[R1]]
000002c9: when R1 = 0 goto %000002c7
000006a6: goto %00000476

00000476:
00000479: R2 := 0x1F000
00000480: R2 := mem[R2 + 0xFE0, el]:u64
00000485: when R2 = 0 goto %000002c7
000006a7: goto %00000489

000002c7:
000002cf: call R30 with noreturn

00000489:
0000048d: R16 := R2
00000492: call R16 with noreturn
