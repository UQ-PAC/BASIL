var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R31: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 1964bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main_1812();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R1, Gamma_R31, Gamma_VF, Gamma_ZF, Gamma_mem, Gamma_stack, NF, R0, R1, R31, VF, ZF, mem, stack;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le(mem, 1964bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 1964bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main_1812()
{
  var Cse0__5_4_1: bv32;
  var Cse0__5_5_3: bv32;
  var Cse0__5_6_10: bv32;
  var Gamma_Cse0__5_4_1: bool;
  var Gamma_Cse0__5_5_3: bool;
  var Gamma_Cse0__5_6_10: bool;
  var Gamma_load0: bool;
  var Gamma_load1: bool;
  var Gamma_load2: bool;
  var Gamma_load3: bool;
  var Gamma_load4: bool;
  var Gamma_load5: bool;
  var load0: bv32;
  var load1: bv32;
  var load2: bv32;
  var load3: bv32;
  var load4: bv32;
  var load5: bv32;
  main_1812__0__9yseNFkhTuK04TK0yW3DZQ:
    assume {:captureState "main_1812__0__9yseNFkhTuK04TK0yW3DZQ"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R0);
    assume {:captureState "1816_0"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 20bv64), Gamma_R0;
    load4, Gamma_load4 := memory_load32_le(stack, bvadd64(R31, 12bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    R1, Gamma_R1 := zero_extend32_32(load4), Gamma_load4;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "1832_0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), true);
    assume {:captureState "1836_0"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 20bv64), Gamma_R0;
    call rely();
    load5, Gamma_load5 := memory_load32_le(mem, R0), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := zero_extend32_32(load5), Gamma_load5;
    Cse0__5_6_10, Gamma_Cse0__5_6_10 := bvadd32(R0[32:0], 0bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp32(Cse0__5_6_10, Cse0__5_6_10)), Gamma_Cse0__5_6_10;
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_6_10), bvadd33(zero_extend1_32(R0[32:0]), 4294967296bv33))), (Gamma_R0 && Gamma_Cse0__5_6_10);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_6_10, 0bv32), Gamma_Cse0__5_6_10;
    NF, Gamma_NF := Cse0__5_6_10[32:31], Gamma_Cse0__5_6_10;
    assert Gamma_ZF;
    goto main_1812__0__9yseNFkhTuK04TK0yW3DZQ_goto_main_1812__2__yfXOQSPfSoG_R~3nzeQfBw, main_1812__0__9yseNFkhTuK04TK0yW3DZQ_goto_main_1812__1__hCnLZz43RxuSXmdEBY0pRw;
  main_1812__0__9yseNFkhTuK04TK0yW3DZQ_goto_main_1812__1__hCnLZz43RxuSXmdEBY0pRw:
    assume {:captureState "main_1812__0__9yseNFkhTuK04TK0yW3DZQ_goto_main_1812__1__hCnLZz43RxuSXmdEBY0pRw"} true;
    assume (!(!(ZF == 1bv1)));
    R0, Gamma_R0 := 3bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    assume {:captureState "1864_0"} true;
    goto main_1812__1__hCnLZz43RxuSXmdEBY0pRw;
  main_1812__1__hCnLZz43RxuSXmdEBY0pRw:
    assume {:captureState "main_1812__1__hCnLZz43RxuSXmdEBY0pRw"} true;
    goto main_1812__2__yfXOQSPfSoG_R~3nzeQfBw;
  main_1812__0__9yseNFkhTuK04TK0yW3DZQ_goto_main_1812__2__yfXOQSPfSoG_R~3nzeQfBw:
    assume {:captureState "main_1812__0__9yseNFkhTuK04TK0yW3DZQ_goto_main_1812__2__yfXOQSPfSoG_R~3nzeQfBw"} true;
    assume (!(ZF == 1bv1));
    goto main_1812__2__yfXOQSPfSoG_R~3nzeQfBw;
  main_1812__2__yfXOQSPfSoG_R~3nzeQfBw:
    assume {:captureState "main_1812__2__yfXOQSPfSoG_R~3nzeQfBw"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 20bv64), Gamma_R0;
    call rely();
    load3, Gamma_load3 := memory_load32_le(mem, R0), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := zero_extend32_32(load3), Gamma_load3;
    Cse0__5_5_3, Gamma_Cse0__5_5_3 := bvadd32(R0[32:0], 4294967295bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_5_3), bvadd33(sign_extend1_32(R0[32:0]), 8589934591bv33))), (Gamma_R0 && Gamma_Cse0__5_5_3);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_5_3), bvadd33(zero_extend1_32(R0[32:0]), 4294967295bv33))), (Gamma_R0 && Gamma_Cse0__5_5_3);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_5_3, 0bv32), Gamma_Cse0__5_5_3;
    NF, Gamma_NF := Cse0__5_5_3[32:31], Gamma_Cse0__5_5_3;
    assert Gamma_ZF;
    goto main_1812__2__yfXOQSPfSoG_R~3nzeQfBw_goto_main_1812__4__oqZU9BW6TP6kbuw3LSxXQA, main_1812__2__yfXOQSPfSoG_R~3nzeQfBw_goto_main_1812__3__9kAXtc8KTiCv7~xlE1Ofpg;
  main_1812__2__yfXOQSPfSoG_R~3nzeQfBw_goto_main_1812__3__9kAXtc8KTiCv7~xlE1Ofpg:
    assume {:captureState "main_1812__2__yfXOQSPfSoG_R~3nzeQfBw_goto_main_1812__3__9kAXtc8KTiCv7~xlE1Ofpg"} true;
    assume (!(!(ZF == 1bv1)));
    R0, Gamma_R0 := 5bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    assume {:captureState "1892_0"} true;
    goto main_1812__3__9kAXtc8KTiCv7~xlE1Ofpg;
  main_1812__3__9kAXtc8KTiCv7~xlE1Ofpg:
    assume {:captureState "main_1812__3__9kAXtc8KTiCv7~xlE1Ofpg"} true;
    goto main_1812__4__oqZU9BW6TP6kbuw3LSxXQA;
  main_1812__2__yfXOQSPfSoG_R~3nzeQfBw_goto_main_1812__4__oqZU9BW6TP6kbuw3LSxXQA:
    assume {:captureState "main_1812__2__yfXOQSPfSoG_R~3nzeQfBw_goto_main_1812__4__oqZU9BW6TP6kbuw3LSxXQA"} true;
    assume (!(ZF == 1bv1));
    goto main_1812__4__oqZU9BW6TP6kbuw3LSxXQA;
  main_1812__4__oqZU9BW6TP6kbuw3LSxXQA:
    assume {:captureState "main_1812__4__oqZU9BW6TP6kbuw3LSxXQA"} true;
    load2, Gamma_load2 := memory_load32_le(stack, bvadd64(R31, 28bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    R0, Gamma_R0 := zero_extend32_32(load2), Gamma_load2;
    Cse0__5_4_1, Gamma_Cse0__5_4_1 := bvadd32(R0[32:0], 4294967293bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_4_1), bvadd33(sign_extend1_32(R0[32:0]), 8589934589bv33))), (Gamma_R0 && Gamma_Cse0__5_4_1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_4_1), bvadd33(zero_extend1_32(R0[32:0]), 4294967293bv33))), (Gamma_R0 && Gamma_Cse0__5_4_1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_4_1, 0bv32), Gamma_Cse0__5_4_1;
    NF, Gamma_NF := Cse0__5_4_1[32:31], Gamma_Cse0__5_4_1;
    assert Gamma_ZF;
    goto main_1812__4__oqZU9BW6TP6kbuw3LSxXQA_goto_main_1812__6__dkXkbQHUTxKWR8e~2scKWw, main_1812__4__oqZU9BW6TP6kbuw3LSxXQA_goto_main_1812__5__NGQwXgNySXKcztP0lKywGA;
  main_1812__4__oqZU9BW6TP6kbuw3LSxXQA_goto_main_1812__5__NGQwXgNySXKcztP0lKywGA:
    assume {:captureState "main_1812__4__oqZU9BW6TP6kbuw3LSxXQA_goto_main_1812__5__NGQwXgNySXKcztP0lKywGA"} true;
    assume (!(!(ZF == 1bv1)));
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 24bv64), Gamma_R0;
    call rely();
    load0, Gamma_load0 := memory_load32_le(mem, R0), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := zero_extend32_32(load0), Gamma_load0;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    assume {:captureState "1920_0"} true;
    goto main_1812__5__NGQwXgNySXKcztP0lKywGA;
  main_1812__5__NGQwXgNySXKcztP0lKywGA:
    assume {:captureState "main_1812__5__NGQwXgNySXKcztP0lKywGA"} true;
    goto main_1812__6__dkXkbQHUTxKWR8e~2scKWw;
  main_1812__4__oqZU9BW6TP6kbuw3LSxXQA_goto_main_1812__6__dkXkbQHUTxKWR8e~2scKWw:
    assume {:captureState "main_1812__4__oqZU9BW6TP6kbuw3LSxXQA_goto_main_1812__6__dkXkbQHUTxKWR8e~2scKWw"} true;
    assume (!(ZF == 1bv1));
    goto main_1812__6__dkXkbQHUTxKWR8e~2scKWw;
  main_1812__6__dkXkbQHUTxKWR8e~2scKWw:
    assume {:captureState "main_1812__6__dkXkbQHUTxKWR8e~2scKWw"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 24bv64), Gamma_R0;
    call rely();
    load1, Gamma_load1 := memory_load32_le(mem, R0), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := zero_extend32_32(load1), Gamma_load1;
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto main_1812_basil_return;
  main_1812_basil_return:
    assume {:captureState "main_1812_basil_return"} true;
    return;
}

