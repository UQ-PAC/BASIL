000006ae: program
00000692: sub __cxa_finalize(__cxa_finalize_result)
000006af: __cxa_finalize_result :: out u32 = low:32[R0]

00000422:
0000051a: R16 := 0x10000
00000521: R17 := mem[R16 + 0xFB8, el]:u64
00000527: R16 := R16 + 0xFB8
0000052c: call R17 with noreturn

00000693: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006b0: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002b6:
000002ba: #3 := R31 - 0x20
000002c0: mem := mem with [#3, el]:u64 <- R29
000002c6: mem := mem with [#3 + 8, el]:u64 <- R30
000002ca: R31 := #3
000002d0: R29 := R31
000002d8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002dd: R19 := 0x11000
000002e4: R0 := pad:64[mem[R19 + 0x10]]
000002eb: when 31:0[R0] <> 0 goto %000002e9
00000694: goto %000003eb

000003eb:
000003ee: R0 := 0x10000
000003f5: R0 := mem[R0 + 0xFE0, el]:u64
000003fb: when R0 = 0 goto %000003f9
00000695: goto %00000412

00000412:
00000415: R0 := 0x11000
0000041c: R0 := mem[R0 + 8, el]:u64
00000421: R30 := 0x6F0
00000424: call @__cxa_finalize with return %000003f9

000003f9:
00000401: R30 := 0x6F4
00000403: call @deregister_tm_clones with return %00000405

00000405:
00000408: R0 := 1
00000410: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000696: goto %000002e9

000002e9:
000002f3: R19 := mem[R31 + 0x10, el]:u64
000002fa: R29 := mem[R31, el]:u64
000002ff: R30 := mem[R31 + 8, el]:u64
00000303: R31 := R31 + 0x20
00000308: call R30 with noreturn

00000697: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006b1: __libc_start_main_main :: in u64 = R0
000006b2: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006b3: __libc_start_main_arg3 :: in out u64 = R2
000006b4: __libc_start_main_auxv :: in out u64 = R3
000006b5: __libc_start_main_result :: out u32 = low:32[R0]

0000020f:
00000504: R16 := 0x10000
0000050b: R17 := mem[R16 + 0xFB0, el]:u64
00000511: R16 := R16 + 0xFB0
00000516: call R17 with noreturn

00000698: sub _fini(_fini_result)
000006b6: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000699: sub _init(_init_result)
000006b7: _init_result :: out u32 = low:32[R0]

000005da:
000005e0: #8 := R31 - 0x10
000005e6: mem := mem with [#8, el]:u64 <- R29
000005ec: mem := mem with [#8 + 8, el]:u64 <- R30
000005f0: R31 := #8
000005f6: R29 := R31
000005fb: R30 := 0x590
000005fd: call @call_weak_fn with return %000005ff

000005ff:
00000604: R29 := mem[R31, el]:u64
00000609: R30 := mem[R31 + 8, el]:u64
0000060d: R31 := R31 + 0x10
00000612: call R30 with noreturn

0000069a: sub _start(_start_result)
000006b8: _start_result :: out u32 = low:32[R0]

000001d0:
000001d5: R29 := 0
000001da: R30 := 0
000001e0: R5 := R0
000001e7: R1 := mem[R31, el]:u64
000001ed: R2 := R31 + 8
000001f3: R6 := R31
000001f8: R0 := 0x10000
000001ff: R0 := mem[R0 + 0xFF0, el]:u64
00000204: R3 := 0
00000209: R4 := 0
0000020e: R30 := 0x630
00000211: call @__libc_start_main with return %00000213

00000213:
00000216: R30 := 0x634
00000219: call @abort with return %0000069b

0000069b:
0000069c: call @call_weak_fn with noreturn

0000069d: sub abort()


00000217:
00000546: R16 := 0x10000
0000054d: R17 := mem[R16 + 0xFC8, el]:u64
00000553: R16 := R16 + 0xFC8
00000558: call R17 with noreturn

0000069e: sub call_weak_fn(call_weak_fn_result)
000006b9: call_weak_fn_result :: out u32 = low:32[R0]

0000021b:
0000021e: R0 := 0x10000
00000225: R0 := mem[R0 + 0xFE8, el]:u64
0000022b: when R0 = 0 goto %00000229
0000069f: goto %00000462

00000229:
00000231: call R30 with noreturn

00000462:
00000465: goto @__gmon_start__

00000463:
00000530: R16 := 0x10000
00000537: R17 := mem[R16 + 0xFC0, el]:u64
0000053d: R16 := R16 + 0xFC0
00000542: call R17 with noreturn

000006a0: sub deregister_tm_clones(deregister_tm_clones_result)
000006ba: deregister_tm_clones_result :: out u32 = low:32[R0]

00000237:
0000023a: R0 := 0x11000
00000240: R0 := R0 + 0x10
00000245: R1 := 0x11000
0000024b: R1 := R1 + 0x10
00000251: #1 := ~R0
00000256: #2 := R1 + ~R0
0000025c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000262: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000266: ZF := #2 + 1 = 0
0000026a: NF := 63:63[#2 + 1]
00000270: when ZF goto %0000026e
000006a1: goto %00000444

00000444:
00000447: R1 := 0x10000
0000044e: R1 := mem[R1 + 0xFD8, el]:u64
00000453: when R1 = 0 goto %0000026e
000006a2: goto %00000457

0000026e:
00000276: call R30 with noreturn

00000457:
0000045b: R16 := R1
00000460: call R16 with noreturn

000006a3: sub frame_dummy(frame_dummy_result)
000006bb: frame_dummy_result :: out u32 = low:32[R0]

0000030e:
00000310: call @register_tm_clones with noreturn

000006a4: sub main(main_argc, main_argv, main_result)
000006bc: main_argc :: in u32 = low:32[R0]
000006bd: main_argv :: in out u64 = R1
000006be: main_result :: out u32 = low:32[R0]

00000312:
00000316: R31 := R31 - 0x10
0000031d: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000322: R0 := 0x11000
00000328: R0 := R0 + 0x14
0000032f: R0 := pad:64[mem[R0, el]:u32]
00000335: #4 := 31:0[R0] - 1
0000033a: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
0000033f: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000343: ZF := #4 + 1 = 0
00000347: NF := 31:31[#4 + 1]
0000034d: when ZF <> 1 goto %0000034b
000006a5: goto %000003de

000003de:
000003e1: R0 := 3
000003e9: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000006a6: goto %0000034b

0000034b:
00000353: R0 := 0x11000
00000359: R0 := R0 + 0x14
00000360: R0 := pad:64[mem[R0, el]:u32]
00000366: #5 := 31:0[R0] - 2
0000036b: VF := extend:33[#5 + 1] <> extend:33[31:0[R0]] - 1
00000370: CF := pad:33[#5 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFF
00000374: ZF := #5 + 1 = 0
00000378: NF := 31:31[#5 + 1]
0000037e: when ZF <> 1 goto %0000037c
000006a7: goto %000003d1

000003d1:
000003d4: R0 := 5
000003dc: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000006a8: goto %0000037c

0000037c:
00000386: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000038c: #6 := 31:0[R0] - 4
00000391: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] - 3
00000396: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFD
0000039a: ZF := #6 + 1 = 0
0000039e: NF := 31:31[#6 + 1]
000003a4: when ZF <> 1 goto %000003a2
000006a9: goto %000003b7

000003b7:
000003ba: R0 := 0x11000
000003c0: R0 := R0 + 0x18
000003c7: R0 := pad:64[mem[R0, el]:u32]
000003cf: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000006aa: goto %000003a2

000003a2:
000003aa: R0 := 0
000003b0: R31 := R31 + 0x10
000003b5: call R30 with noreturn

000006ab: sub register_tm_clones(register_tm_clones_result)
000006bf: register_tm_clones_result :: out u32 = low:32[R0]

00000278:
0000027b: R0 := 0x11000
00000281: R0 := R0 + 0x10
00000286: R1 := 0x11000
0000028c: R1 := R1 + 0x10
00000293: R1 := R1 + ~R0 + 1
00000299: R2 := 0.63:63[R1]
000002a0: R1 := R2 + (R1 ~>> 3)
000002a6: R1 := extend:64[63:1[R1]]
000002ac: when R1 = 0 goto %000002aa
000006ac: goto %00000426

00000426:
00000429: R2 := 0x10000
00000430: R2 := mem[R2 + 0xFF8, el]:u64
00000435: when R2 = 0 goto %000002aa
000006ad: goto %00000439

000002aa:
000002b2: call R30 with noreturn

00000439:
0000043d: R16 := R2
00000442: call R16 with noreturn
