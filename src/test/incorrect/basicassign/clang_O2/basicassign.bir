00000593: program
0000057d: sub __cxa_finalize(__cxa_finalize_result)
00000594: __cxa_finalize_result :: out u32 = low:32[R0]

00000331:
00000429: R16 := 0x11000
00000430: R17 := mem[R16 + 8, el]:u64
00000436: R16 := R16 + 8
0000043b: call R17 with noreturn

0000057e: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000595: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000026e:
00000272: #3 := R31 - 0x20
00000278: mem := mem with [#3, el]:u64 <- R29
0000027e: mem := mem with [#3 + 8, el]:u64 <- R30
00000282: R31 := #3
00000288: R29 := R31
00000290: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000295: R19 := 0x11000
0000029c: R0 := pad:64[mem[R19 + 0x30]]
000002a3: when 31:0[R0] <> 0 goto %000002a1
0000057f: goto %000002fa

000002fa:
000002fd: R0 := 0x10000
00000304: R0 := mem[R0 + 0xFC8, el]:u64
0000030a: when R0 = 0 goto %00000308
00000580: goto %00000321

00000321:
00000324: R0 := 0x11000
0000032b: R0 := mem[R0 + 0x28, el]:u64
00000330: R30 := 0x6F0
00000333: call @__cxa_finalize with return %00000308

00000308:
00000310: R30 := 0x6F4
00000312: call @deregister_tm_clones with return %00000314

00000314:
00000317: R0 := 1
0000031f: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000581: goto %000002a1

000002a1:
000002ab: R19 := mem[R31 + 0x10, el]:u64
000002b2: R29 := mem[R31, el]:u64
000002b7: R30 := mem[R31 + 8, el]:u64
000002bb: R31 := R31 + 0x20
000002c0: call R30 with noreturn

00000582: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000596: __libc_start_main_main :: in u64 = R0
00000597: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000598: __libc_start_main_arg3 :: in out u64 = R2
00000599: __libc_start_main_auxv :: in out u64 = R3
0000059a: __libc_start_main_result :: out u32 = low:32[R0]

000001c7:
00000413: R16 := 0x11000
0000041a: R17 := mem[R16, el]:u64
00000420: R16 := R16
00000425: call R17 with noreturn

00000583: sub _fini(_fini_result)
0000059b: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000584: sub _init(_init_result)
0000059c: _init_result :: out u32 = low:32[R0]

000004d7:
000004dd: #5 := R31 - 0x10
000004e3: mem := mem with [#5, el]:u64 <- R29
000004e9: mem := mem with [#5 + 8, el]:u64 <- R30
000004ed: R31 := #5
000004f3: R29 := R31
000004f8: R30 := 0x590
000004fa: call @call_weak_fn with return %000004fc

000004fc:
00000501: R29 := mem[R31, el]:u64
00000506: R30 := mem[R31 + 8, el]:u64
0000050a: R31 := R31 + 0x10
0000050f: call R30 with noreturn

00000585: sub _start(_start_result)
0000059d: _start_result :: out u32 = low:32[R0]

00000188:
0000018d: R29 := 0
00000192: R30 := 0
00000198: R5 := R0
0000019f: R1 := mem[R31, el]:u64
000001a5: R2 := R31 + 8
000001ab: R6 := R31
000001b0: R0 := 0x10000
000001b7: R0 := mem[R0 + 0xFD8, el]:u64
000001bc: R3 := 0
000001c1: R4 := 0
000001c6: R30 := 0x630
000001c9: call @__libc_start_main with return %000001cb

000001cb:
000001ce: R30 := 0x634
000001d1: call @abort with return %00000586

00000586:
00000587: call @call_weak_fn with noreturn

00000588: sub abort()


000001cf:
00000455: R16 := 0x11000
0000045c: R17 := mem[R16 + 0x18, el]:u64
00000462: R16 := R16 + 0x18
00000467: call R17 with noreturn

00000589: sub call_weak_fn(call_weak_fn_result)
0000059e: call_weak_fn_result :: out u32 = low:32[R0]

000001d3:
000001d6: R0 := 0x10000
000001dd: R0 := mem[R0 + 0xFD0, el]:u64
000001e3: when R0 = 0 goto %000001e1
0000058a: goto %00000371

000001e1:
000001e9: call R30 with noreturn

00000371:
00000374: goto @__gmon_start__

00000372:
0000043f: R16 := 0x11000
00000446: R17 := mem[R16 + 0x10, el]:u64
0000044c: R16 := R16 + 0x10
00000451: call R17 with noreturn

0000058b: sub deregister_tm_clones(deregister_tm_clones_result)
0000059f: deregister_tm_clones_result :: out u32 = low:32[R0]

000001ef:
000001f2: R0 := 0x11000
000001f8: R0 := R0 + 0x30
000001fd: R1 := 0x11000
00000203: R1 := R1 + 0x30
00000209: #1 := ~R0
0000020e: #2 := R1 + ~R0
00000214: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000021a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000021e: ZF := #2 + 1 = 0
00000222: NF := 63:63[#2 + 1]
00000228: when ZF goto %00000226
0000058c: goto %00000353

00000353:
00000356: R1 := 0x10000
0000035d: R1 := mem[R1 + 0xFC0, el]:u64
00000362: when R1 = 0 goto %00000226
0000058d: goto %00000366

00000226:
0000022e: call R30 with noreturn

00000366:
0000036a: R16 := R1
0000036f: call R16 with noreturn

0000058e: sub frame_dummy(frame_dummy_result)
000005a0: frame_dummy_result :: out u32 = low:32[R0]

000002c6:
000002c8: call @register_tm_clones with noreturn

0000058f: sub main(main_argc, main_argv, main_result)
000005a1: main_argc :: in u32 = low:32[R0]
000005a2: main_argv :: in out u64 = R1
000005a3: main_result :: out u32 = low:32[R0]

000002ca:
000002cd: R8 := 0x11000
000002d2: R0 := 0
000002d7: R9 := 0x11000
000002dc: R10 := 0x11000
000002e3: R8 := pad:64[mem[R8 + 0x34, el]:u32]
000002eb: mem := mem with [R9 + 0x38, el]:u32 <- 31:0[R8]
000002f3: mem := mem with [R10 + 0x3C, el]:u32 <- 31:0[R8]
000002f8: call R30 with noreturn

00000590: sub register_tm_clones(register_tm_clones_result)
000005a4: register_tm_clones_result :: out u32 = low:32[R0]

00000230:
00000233: R0 := 0x11000
00000239: R0 := R0 + 0x30
0000023e: R1 := 0x11000
00000244: R1 := R1 + 0x30
0000024b: R1 := R1 + ~R0 + 1
00000251: R2 := 0.63:63[R1]
00000258: R1 := R2 + (R1 ~>> 3)
0000025e: R1 := extend:64[63:1[R1]]
00000264: when R1 = 0 goto %00000262
00000591: goto %00000335

00000335:
00000338: R2 := 0x10000
0000033f: R2 := mem[R2 + 0xFE0, el]:u64
00000344: when R2 = 0 goto %00000262
00000592: goto %00000348

00000262:
0000026a: call R30 with noreturn

00000348:
0000034c: R16 := R2
00000351: call R16 with noreturn
