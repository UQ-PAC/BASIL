00000bd0: program
00000bba: sub __cxa_finalize(__cxa_finalize_result)
00000bd1: __cxa_finalize_result :: out u32 = low:32[R0]

00000962:
00000a5a: R16 := 0x11000
00000a61: R17 := mem[R16 + 8, el]:u64
00000a67: R16 := R16 + 8
00000a6c: call R17 with noreturn

00000bbb: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000bd2: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000873:
00000877: #3 := R31 - 0x20
0000087d: mem := mem with [#3, el]:u64 <- R29
00000883: mem := mem with [#3 + 8, el]:u64 <- R30
00000887: R31 := #3
0000088d: R29 := R31
00000895: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000089a: R19 := 0x11000
000008a1: R0 := pad:64[mem[R19 + 0x30]]
000008a8: when 31:0[R0] <> 0 goto %000008a6
00000bbc: goto %0000092b

0000092b:
0000092e: R0 := 0x10000
00000935: R0 := mem[R0 + 0xFC8, el]:u64
0000093b: when R0 = 0 goto %00000939
00000bbd: goto %00000952

00000952:
00000955: R0 := 0x11000
0000095c: R0 := mem[R0 + 0x28, el]:u64
00000961: R30 := 0x6F0
00000964: call @__cxa_finalize with return %00000939

00000939:
00000941: R30 := 0x6F4
00000943: call @deregister_tm_clones with return %00000945

00000945:
00000948: R0 := 1
00000950: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000bbe: goto %000008a6

000008a6:
000008b0: R19 := mem[R31 + 0x10, el]:u64
000008b7: R29 := mem[R31, el]:u64
000008bc: R30 := mem[R31 + 8, el]:u64
000008c0: R31 := R31 + 0x20
000008c5: call R30 with noreturn

00000bbf: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000bd3: __libc_start_main_main :: in u64 = R0
00000bd4: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000bd5: __libc_start_main_arg3 :: in out u64 = R2
00000bd6: __libc_start_main_auxv :: in out u64 = R3
00000bd7: __libc_start_main_result :: out u32 = low:32[R0]

000007cc:
00000a44: R16 := 0x11000
00000a4b: R17 := mem[R16, el]:u64
00000a51: R16 := R16
00000a56: call R17 with noreturn

00000bc0: sub _fini(_fini_result)
00000bd8: _fini_result :: out u32 = low:32[R0]

0000060c:
00000612: #0 := R31 - 0x10
00000618: mem := mem with [#0, el]:u64 <- R29
0000061e: mem := mem with [#0 + 8, el]:u64 <- R30
00000622: R31 := #0
00000628: R29 := R31
0000062f: R29 := mem[R31, el]:u64
00000634: R30 := mem[R31 + 8, el]:u64
00000638: R31 := R31 + 0x10
0000063d: call R30 with noreturn

00000bc1: sub _init(_init_result)
00000bd9: _init_result :: out u32 = low:32[R0]

00000b0e:
00000b14: #5 := R31 - 0x10
00000b1a: mem := mem with [#5, el]:u64 <- R29
00000b20: mem := mem with [#5 + 8, el]:u64 <- R30
00000b24: R31 := #5
00000b2a: R29 := R31
00000b2f: R30 := 0x590
00000b31: call @call_weak_fn with return %00000b33

00000b33:
00000b38: R29 := mem[R31, el]:u64
00000b3d: R30 := mem[R31 + 8, el]:u64
00000b41: R31 := R31 + 0x10
00000b46: call R30 with noreturn

00000bc2: sub _start(_start_result)
00000bda: _start_result :: out u32 = low:32[R0]

0000078d:
00000792: R29 := 0
00000797: R30 := 0
0000079d: R5 := R0
000007a4: R1 := mem[R31, el]:u64
000007aa: R2 := R31 + 8
000007b0: R6 := R31
000007b5: R0 := 0x10000
000007bc: R0 := mem[R0 + 0xFD8, el]:u64
000007c1: R3 := 0
000007c6: R4 := 0
000007cb: R30 := 0x630
000007ce: call @__libc_start_main with return %000007d0

000007d0:
000007d3: R30 := 0x634
000007d6: call @abort with return %00000bc3

00000bc3:
00000bc4: call @call_weak_fn with noreturn

00000bc5: sub abort()


000007d4:
00000a86: R16 := 0x11000
00000a8d: R17 := mem[R16 + 0x18, el]:u64
00000a93: R16 := R16 + 0x18
00000a98: call R17 with noreturn

00000bc6: sub call_weak_fn(call_weak_fn_result)
00000bdb: call_weak_fn_result :: out u32 = low:32[R0]

000007d8:
000007db: R0 := 0x10000
000007e2: R0 := mem[R0 + 0xFD0, el]:u64
000007e8: when R0 = 0 goto %000007e6
00000bc7: goto %000009a2

000007e6:
000007ee: call R30 with noreturn

000009a2:
000009a5: goto @__gmon_start__

000009a3:
00000a70: R16 := 0x11000
00000a77: R17 := mem[R16 + 0x10, el]:u64
00000a7d: R16 := R16 + 0x10
00000a82: call R17 with noreturn

00000bc8: sub deregister_tm_clones(deregister_tm_clones_result)
00000bdc: deregister_tm_clones_result :: out u32 = low:32[R0]

000007f4:
000007f7: R0 := 0x11000
000007fd: R0 := R0 + 0x30
00000802: R1 := 0x11000
00000808: R1 := R1 + 0x30
0000080e: #1 := ~R0
00000813: #2 := R1 + ~R0
00000819: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000081f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000823: ZF := #2 + 1 = 0
00000827: NF := 63:63[#2 + 1]
0000082d: when ZF goto %0000082b
00000bc9: goto %00000984

00000984:
00000987: R1 := 0x10000
0000098e: R1 := mem[R1 + 0xFC0, el]:u64
00000993: when R1 = 0 goto %0000082b
00000bca: goto %00000997

0000082b:
00000833: call R30 with noreturn

00000997:
0000099b: R16 := R1
000009a0: call R16 with noreturn

00000bcb: sub frame_dummy(frame_dummy_result)
00000bdd: frame_dummy_result :: out u32 = low:32[R0]

000008cb:
000008cd: call @register_tm_clones with noreturn

00000bcc: sub main(main_argc, main_argv, main_result)
00000bde: main_argc :: in u32 = low:32[R0]
00000bdf: main_argv :: in out u64 = R1
00000be0: main_result :: out u32 = low:32[R0]

000008cf:
000008d2: R10 := 0x11000
000008d9: R9 := pad:64[mem[R10 + 0x34, el]:u32]
000008de: R8 := 0x11000
000008e6: mem := mem with [R8 + 0x38, el]:u32 <- 31:0[R9]
000008eb: R0 := 0
000008f2: mem := mem with [R8 + 0x38, el]:u32 <- 0
000008f9: R11 := pad:64[mem[R8 + 0x38, el]:u32]
000008fe: R9 := 0x11000
00000906: mem := mem with [R9 + 0x3C, el]:u32 <- 31:0[R11]
0000090d: R10 := pad:64[mem[R10 + 0x34, el]:u32]
00000915: mem := mem with [R8 + 0x38, el]:u32 <- 31:0[R10]
0000091c: R8 := pad:64[mem[R8 + 0x38, el]:u32]
00000924: mem := mem with [R9 + 0x3C, el]:u32 <- 31:0[R8]
00000929: call R30 with noreturn

00000bcd: sub register_tm_clones(register_tm_clones_result)
00000be1: register_tm_clones_result :: out u32 = low:32[R0]

00000835:
00000838: R0 := 0x11000
0000083e: R0 := R0 + 0x30
00000843: R1 := 0x11000
00000849: R1 := R1 + 0x30
00000850: R1 := R1 + ~R0 + 1
00000856: R2 := 0.63:63[R1]
0000085d: R1 := R2 + (R1 ~>> 3)
00000863: R1 := extend:64[63:1[R1]]
00000869: when R1 = 0 goto %00000867
00000bce: goto %00000966

00000966:
00000969: R2 := 0x10000
00000970: R2 := mem[R2 + 0xFE0, el]:u64
00000975: when R2 = 0 goto %00000867
00000bcf: goto %00000979

00000867:
0000086f: call R30 with noreturn

00000979:
0000097d: R16 := R2
00000982: call R16 with noreturn
