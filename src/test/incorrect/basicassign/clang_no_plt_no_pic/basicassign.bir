000005a5: program
00000573: sub __cxa_finalize(__cxa_finalize_result)
000005a6: __cxa_finalize_result :: out u32 = low:32[R0]

00000375:
0000046d: R16 := 0x20000
00000474: R17 := mem[R16 + 8, el]:u64
0000047a: R16 := R16 + 8
0000047f: call R17 with noreturn

00000574: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005a7: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000287:
0000028b: #3 := R31 - 0x20
00000291: mem := mem with [#3, el]:u64 <- R29
00000297: mem := mem with [#3 + 8, el]:u64 <- R30
0000029b: R31 := #3
000002a1: R29 := R31
000002a9: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ae: R19 := 0x20000
000002b5: R0 := pad:64[mem[R19 + 0x30]]
000002bb: when 0:0[R0] goto %000002b9
0000059b: goto %0000033e

0000033e:
00000341: R0 := 0x1F000
00000348: R0 := mem[R0 + 0xFC8, el]:u64
0000034e: when R0 = 0 goto %0000034c
0000059c: goto %00000365

00000365:
00000368: R0 := 0x20000
0000036f: R0 := mem[R0 + 0x28, el]:u64
00000374: R30 := 0x730
00000377: call @__cxa_finalize with return %0000034c

0000034c:
00000354: R30 := 0x734
00000356: call @deregister_tm_clones with return %00000358

00000358:
0000035b: R0 := 1
00000363: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000059d: goto %000002b9

000002b9:
000002c3: R19 := mem[R31 + 0x10, el]:u64
000002ca: R29 := mem[R31, el]:u64
000002cf: R30 := mem[R31 + 8, el]:u64
000002d3: R31 := R31 + 0x20
000002d8: call R30 with noreturn

00000578: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005a8: __libc_start_main_main :: in u64 = R0
000005a9: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005aa: __libc_start_main_arg3 :: in out u64 = R2
000005ab: __libc_start_main_auxv :: in out u64 = R3
000005ac: __libc_start_main_result :: out u32 = low:32[R0]

000001e0:
00000457: R16 := 0x20000
0000045e: R17 := mem[R16, el]:u64
00000464: R16 := R16
00000469: call R17 with noreturn

00000579: sub _fini(_fini_result)
000005ad: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000057a: sub _init(_init_result)
000005ae: _init_result :: out u32 = low:32[R0]

000004c7:
000004cd: #5 := R31 - 0x10
000004d3: mem := mem with [#5, el]:u64 <- R29
000004d9: mem := mem with [#5 + 8, el]:u64 <- R30
000004dd: R31 := #5
000004e3: R29 := R31
000004e8: R30 := 0x5C8
000004ea: call @call_weak_fn with return %000004ec

000004ec:
000004f1: R29 := mem[R31, el]:u64
000004f6: R30 := mem[R31 + 8, el]:u64
000004fa: R31 := R31 + 0x10
000004ff: call R30 with noreturn

0000057b: sub _start(_start_result)
000005af: _start_result :: out u32 = low:32[R0]

000001a1:
000001a6: R29 := 0
000001ab: R30 := 0
000001b1: R5 := R0
000001b8: R1 := mem[R31, el]:u64
000001be: R2 := R31 + 8
000001c4: R6 := R31
000001c9: R0 := 0x1F000
000001d0: R0 := mem[R0 + 0xFD8, el]:u64
000001d5: R3 := 0
000001da: R4 := 0
000001df: R30 := 0x670
000001e2: call @__libc_start_main with return %000001e4

000001e4:
000001e7: R30 := 0x674
000001ea: call @abort with return %0000059e

0000059e:
0000059f: call @call_weak_fn with noreturn

0000057e: sub abort()


000001e8:
00000499: R16 := 0x20000
000004a0: R17 := mem[R16 + 0x18, el]:u64
000004a6: R16 := R16 + 0x18
000004ab: call R17 with noreturn

0000057f: sub call_weak_fn(call_weak_fn_result)
000005b0: call_weak_fn_result :: out u32 = low:32[R0]

000001ec:
000001ef: R0 := 0x1F000
000001f6: R0 := mem[R0 + 0xFD0, el]:u64
000001fc: when R0 = 0 goto %000001fa
000005a0: goto %000003b5

000001fa:
00000202: call R30 with noreturn

000003b5:
000003b8: goto @__gmon_start__

000003b6:
00000483: R16 := 0x20000
0000048a: R17 := mem[R16 + 0x10, el]:u64
00000490: R16 := R16 + 0x10
00000495: call R17 with noreturn

00000581: sub deregister_tm_clones(deregister_tm_clones_result)
000005b1: deregister_tm_clones_result :: out u32 = low:32[R0]

00000208:
0000020b: R0 := 0x20000
00000211: R0 := R0 + 0x30
00000216: R1 := 0x20000
0000021c: R1 := R1 + 0x30
00000222: #1 := ~R0
00000227: #2 := R1 + ~R0
0000022d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000233: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000237: ZF := #2 + 1 = 0
0000023b: NF := 63:63[#2 + 1]
00000241: when ZF goto %0000023f
000005a1: goto %00000397

00000397:
0000039a: R1 := 0x1F000
000003a1: R1 := mem[R1 + 0xFC0, el]:u64
000003a6: when R1 = 0 goto %0000023f
000005a2: goto %000003aa

0000023f:
00000247: call R30 with noreturn

000003aa:
000003ae: R16 := R1
000003b3: call R16 with noreturn

00000584: sub frame_dummy(frame_dummy_result)
000005b2: frame_dummy_result :: out u32 = low:32[R0]

000002de:
000002e0: call @register_tm_clones with noreturn

00000585: sub main(main_argc, main_argv, main_result)
000005b3: main_argc :: in u32 = low:32[R0]
000005b4: main_argv :: in out u64 = R1
000005b5: main_result :: out u32 = low:32[R0]

000002e2:
000002e5: R10 := 0x20000
000002ec: R9 := pad:64[mem[R10 + 0x34, el]:u32]
000002f1: R8 := 0x20000
000002f9: mem := mem with [R8 + 0x38, el]:u32 <- 31:0[R9]
000002fe: R0 := 0
00000305: mem := mem with [R8 + 0x38, el]:u32 <- 0
0000030c: R11 := pad:64[mem[R8 + 0x38, el]:u32]
00000311: R9 := 0x20000
00000319: mem := mem with [R9 + 0x3C, el]:u32 <- 31:0[R11]
00000320: R10 := pad:64[mem[R10 + 0x34, el]:u32]
00000328: mem := mem with [R8 + 0x38, el]:u32 <- 31:0[R10]
0000032f: R8 := pad:64[mem[R8 + 0x38, el]:u32]
00000337: mem := mem with [R9 + 0x3C, el]:u32 <- 31:0[R8]
0000033c: call R30 with noreturn

00000586: sub register_tm_clones(register_tm_clones_result)
000005b6: register_tm_clones_result :: out u32 = low:32[R0]

00000249:
0000024c: R0 := 0x20000
00000252: R0 := R0 + 0x30
00000257: R1 := 0x20000
0000025d: R1 := R1 + 0x30
00000264: R1 := R1 + ~R0 + 1
0000026a: R2 := 0.63:63[R1]
00000271: R1 := R2 + (R1 ~>> 3)
00000277: R1 := extend:64[63:1[R1]]
0000027d: when R1 = 0 goto %0000027b
000005a3: goto %00000379

00000379:
0000037c: R2 := 0x1F000
00000383: R2 := mem[R2 + 0xFE0, el]:u64
00000388: when R2 = 0 goto %0000027b
000005a4: goto %0000038c

0000027b:
00000283: call R30 with noreturn

0000038c:
00000390: R16 := R2
00000395: call R16 with noreturn
