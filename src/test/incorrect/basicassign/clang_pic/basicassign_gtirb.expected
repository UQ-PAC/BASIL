var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R10: bool;
var {:extern} $Gamma_R11: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_R9: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R10: bv64;
var {:extern} $R11: bv64;
var {:extern} $R8: bv64;
var {:extern} $R9: bv64;
var {:extern} $mem: [bv64]bv8;
const {:extern} $secret_addr: bv64;
axiom ($secret_addr == 69684bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69688bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69692bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  (if (#index == $z_addr) then true else (if (#index == $secret_addr) then false else (if (#index == $x_addr) then false else false)))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures (forall #i: bv64::  ((($mem[#i] == old($mem[#i])) ==> ($Gamma_mem[#i] == old($Gamma_mem[#i])))));
  ensures (memory_load32_le($mem, $x_addr) == old(memory_load32_le($mem, $x_addr)));
  free ensures (memory_load32_le($mem, 1964bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69040bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69048bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69560bv64) == 69692bv64);
  free ensures (memory_load64_le($mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le($mem, 69584bv64) == 69684bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures (memory_load32_le($mem, $x_addr) == old(memory_load32_le($mem, $x_addr)));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

implementation {:extern} p$rely_reflexive()
{
  assert (memory_load32_le($mem, $x_addr) == memory_load32_le($mem, $x_addr));
}

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$main_1876();
  modifies $Gamma_R0, $Gamma_R10, $Gamma_R11, $Gamma_R8, $Gamma_R9, $Gamma_mem, $R0, $R10, $R11, $R8, $R9, $mem;
  free requires (memory_load64_le($mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le($mem, 1964bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69040bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69048bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69560bv64) == 69692bv64);
  free requires (memory_load64_le($mem, 69568bv64) == 69688bv64);
  free requires (memory_load64_le($mem, 69584bv64) == 69684bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1876bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures (memory_load32_le($mem, 1964bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69040bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69048bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69560bv64) == 69692bv64);
  free ensures (memory_load64_le($mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le($mem, 69584bv64) == 69684bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

implementation p$main_1876()
{
  var #Gamma_load14: bool;
  var #Gamma_load15: bool;
  var #Gamma_load16: bool;
  var #Gamma_load17: bool;
  var #Gamma_load18: bool;
  var #Gamma_load19: bool;
  var #Gamma_load20: bool;
  var #load14: bv64;
  var #load15: bv64;
  var #load16: bv32;
  var #load17: bv32;
  var #load18: bv64;
  var #load19: bv32;
  var #load20: bv32;
  b#main_entry:
    assume {:captureState "main_entry (fMW2XwMARUyjjFoB482nbQ==)"} true;
    $R8, $Gamma_R8 := 65536bv64, true;
    call p$rely();
    #load14, #Gamma_load14 := memory_load64_le($mem, bvadd64($R8, 4032bv64)), (gamma_load64($Gamma_mem, bvadd64($R8, 4032bv64)) || L($mem, bvadd64($R8, 4032bv64)));
    $R8, $Gamma_R8 := #load14, #Gamma_load14;
    $R10, $Gamma_R10 := 65536bv64, true;
    call p$rely();
    #load15, #Gamma_load15 := memory_load64_le($mem, bvadd64($R10, 4048bv64)), (gamma_load64($Gamma_mem, bvadd64($R10, 4048bv64)) || L($mem, bvadd64($R10, 4048bv64)));
    $R10, $Gamma_R10 := #load15, #Gamma_load15;
    call p$rely();
    #load16, #Gamma_load16 := memory_load32_le($mem, $R10), (gamma_load32($Gamma_mem, $R10) || L($mem, $R10));
    $R9, $Gamma_R9 := zero_extend32_32(#load16), #Gamma_load16;
    call p$rely();
    assert (L($mem, $R8) ==> $Gamma_R9);
    $mem, $Gamma_mem := memory_store32_le($mem, $R8, $R9[32:0]), gamma_store32($Gamma_mem, $R8, $Gamma_R9);
    assume {:captureState "1896_0"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    call p$rely();
    assert (L($mem, $R8) ==> true);
    $mem, $Gamma_mem := memory_store32_le($mem, $R8, 0bv32), gamma_store32($Gamma_mem, $R8, true);
    assume {:captureState "1904_0"} true;
    call p$rely();
    #load17, #Gamma_load17 := memory_load32_le($mem, $R8), (gamma_load32($Gamma_mem, $R8) || L($mem, $R8));
    $R11, $Gamma_R11 := zero_extend32_32(#load17), #Gamma_load17;
    $R9, $Gamma_R9 := 65536bv64, true;
    call p$rely();
    #load18, #Gamma_load18 := memory_load64_le($mem, bvadd64($R9, 4024bv64)), (gamma_load64($Gamma_mem, bvadd64($R9, 4024bv64)) || L($mem, bvadd64($R9, 4024bv64)));
    $R9, $Gamma_R9 := #load18, #Gamma_load18;
    call p$rely();
    assert (L($mem, $R9) ==> $Gamma_R11);
    $mem, $Gamma_mem := memory_store32_le($mem, $R9, $R11[32:0]), gamma_store32($Gamma_mem, $R9, $Gamma_R11);
    assume {:captureState "1920_0"} true;
    call p$rely();
    #load19, #Gamma_load19 := memory_load32_le($mem, $R10), (gamma_load32($Gamma_mem, $R10) || L($mem, $R10));
    $R10, $Gamma_R10 := zero_extend32_32(#load19), #Gamma_load19;
    call p$rely();
    assert (L($mem, $R8) ==> $Gamma_R10);
    $mem, $Gamma_mem := memory_store32_le($mem, $R8, $R10[32:0]), gamma_store32($Gamma_mem, $R8, $Gamma_R10);
    assume {:captureState "1928_0"} true;
    call p$rely();
    #load20, #Gamma_load20 := memory_load32_le($mem, $R8), (gamma_load32($Gamma_mem, $R8) || L($mem, $R8));
    $R8, $Gamma_R8 := zero_extend32_32(#load20), #Gamma_load20;
    call p$rely();
    assert (L($mem, $R9) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store32_le($mem, $R9, $R8[32:0]), gamma_store32($Gamma_mem, $R9, $Gamma_R8);
    assume {:captureState "1936_0"} true;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

