000005e3: program
000005cd: sub __cxa_finalize(__cxa_finalize_result)
000005e4: __cxa_finalize_result :: out u32 = low:32[R0]

00000375:
0000046d: R16 := 0x11000
00000474: R17 := mem[R16 + 8, el]:u64
0000047a: R16 := R16 + 8
0000047f: call R17 with noreturn

000005ce: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005e5: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000286:
0000028a: #3 := R31 - 0x20
00000290: mem := mem with [#3, el]:u64 <- R29
00000296: mem := mem with [#3 + 8, el]:u64 <- R30
0000029a: R31 := #3
000002a0: R29 := R31
000002a8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ad: R19 := 0x11000
000002b4: R0 := pad:64[mem[R19 + 0x30]]
000002bb: when 31:0[R0] <> 0 goto %000002b9
000005cf: goto %0000033e

0000033e:
00000341: R0 := 0x10000
00000348: R0 := mem[R0 + 0xFC8, el]:u64
0000034e: when R0 = 0 goto %0000034c
000005d0: goto %00000365

00000365:
00000368: R0 := 0x11000
0000036f: R0 := mem[R0 + 0x28, el]:u64
00000374: R30 := 0x6F0
00000377: call @__cxa_finalize with return %0000034c

0000034c:
00000354: R30 := 0x6F4
00000356: call @deregister_tm_clones with return %00000358

00000358:
0000035b: R0 := 1
00000363: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005d1: goto %000002b9

000002b9:
000002c3: R19 := mem[R31 + 0x10, el]:u64
000002ca: R29 := mem[R31, el]:u64
000002cf: R30 := mem[R31 + 8, el]:u64
000002d3: R31 := R31 + 0x20
000002d8: call R30 with noreturn

000005d2: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005e6: __libc_start_main_main :: in u64 = R0
000005e7: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005e8: __libc_start_main_arg3 :: in out u64 = R2
000005e9: __libc_start_main_auxv :: in out u64 = R3
000005ea: __libc_start_main_result :: out u32 = low:32[R0]

000001df:
00000457: R16 := 0x11000
0000045e: R17 := mem[R16, el]:u64
00000464: R16 := R16
00000469: call R17 with noreturn

000005d3: sub _fini(_fini_result)
000005eb: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005d4: sub _init(_init_result)
000005ec: _init_result :: out u32 = low:32[R0]

00000521:
00000527: #5 := R31 - 0x10
0000052d: mem := mem with [#5, el]:u64 <- R29
00000533: mem := mem with [#5 + 8, el]:u64 <- R30
00000537: R31 := #5
0000053d: R29 := R31
00000542: R30 := 0x590
00000544: call @call_weak_fn with return %00000546

00000546:
0000054b: R29 := mem[R31, el]:u64
00000550: R30 := mem[R31 + 8, el]:u64
00000554: R31 := R31 + 0x10
00000559: call R30 with noreturn

000005d5: sub _start(_start_result)
000005ed: _start_result :: out u32 = low:32[R0]

000001a0:
000001a5: R29 := 0
000001aa: R30 := 0
000001b0: R5 := R0
000001b7: R1 := mem[R31, el]:u64
000001bd: R2 := R31 + 8
000001c3: R6 := R31
000001c8: R0 := 0x10000
000001cf: R0 := mem[R0 + 0xFD8, el]:u64
000001d4: R3 := 0
000001d9: R4 := 0
000001de: R30 := 0x630
000001e1: call @__libc_start_main with return %000001e3

000001e3:
000001e6: R30 := 0x634
000001e9: call @abort with return %000005d6

000005d6:
000005d7: call @call_weak_fn with noreturn

000005d8: sub abort()


000001e7:
00000499: R16 := 0x11000
000004a0: R17 := mem[R16 + 0x18, el]:u64
000004a6: R16 := R16 + 0x18
000004ab: call R17 with noreturn

000005d9: sub call_weak_fn(call_weak_fn_result)
000005ee: call_weak_fn_result :: out u32 = low:32[R0]

000001eb:
000001ee: R0 := 0x10000
000001f5: R0 := mem[R0 + 0xFD0, el]:u64
000001fb: when R0 = 0 goto %000001f9
000005da: goto %000003b5

000001f9:
00000201: call R30 with noreturn

000003b5:
000003b8: goto @__gmon_start__

000003b6:
00000483: R16 := 0x11000
0000048a: R17 := mem[R16 + 0x10, el]:u64
00000490: R16 := R16 + 0x10
00000495: call R17 with noreturn

000005db: sub deregister_tm_clones(deregister_tm_clones_result)
000005ef: deregister_tm_clones_result :: out u32 = low:32[R0]

00000207:
0000020a: R0 := 0x11000
00000210: R0 := R0 + 0x30
00000215: R1 := 0x11000
0000021b: R1 := R1 + 0x30
00000221: #1 := ~R0
00000226: #2 := R1 + ~R0
0000022c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000232: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000236: ZF := #2 + 1 = 0
0000023a: NF := 63:63[#2 + 1]
00000240: when ZF goto %0000023e
000005dc: goto %00000397

00000397:
0000039a: R1 := 0x10000
000003a1: R1 := mem[R1 + 0xFC0, el]:u64
000003a6: when R1 = 0 goto %0000023e
000005dd: goto %000003aa

0000023e:
00000246: call R30 with noreturn

000003aa:
000003ae: R16 := R1
000003b3: call R16 with noreturn

000005de: sub frame_dummy(frame_dummy_result)
000005f0: frame_dummy_result :: out u32 = low:32[R0]

000002de:
000002e0: call @register_tm_clones with noreturn

000005df: sub main(main_argc, main_argv, main_result)
000005f1: main_argc :: in u32 = low:32[R0]
000005f2: main_argv :: in out u64 = R1
000005f3: main_result :: out u32 = low:32[R0]

000002e2:
000002e5: R10 := 0x11000
000002ec: R9 := pad:64[mem[R10 + 0x34, el]:u32]
000002f1: R8 := 0x11000
000002f9: mem := mem with [R8 + 0x38, el]:u32 <- 31:0[R9]
000002fe: R0 := 0
00000305: mem := mem with [R8 + 0x38, el]:u32 <- 0
0000030c: R11 := pad:64[mem[R8 + 0x38, el]:u32]
00000311: R9 := 0x11000
00000319: mem := mem with [R9 + 0x3C, el]:u32 <- 31:0[R11]
00000320: R10 := pad:64[mem[R10 + 0x34, el]:u32]
00000328: mem := mem with [R8 + 0x38, el]:u32 <- 31:0[R10]
0000032f: R8 := pad:64[mem[R8 + 0x38, el]:u32]
00000337: mem := mem with [R9 + 0x3C, el]:u32 <- 31:0[R8]
0000033c: call R30 with noreturn

000005e0: sub register_tm_clones(register_tm_clones_result)
000005f4: register_tm_clones_result :: out u32 = low:32[R0]

00000248:
0000024b: R0 := 0x11000
00000251: R0 := R0 + 0x30
00000256: R1 := 0x11000
0000025c: R1 := R1 + 0x30
00000263: R1 := R1 + ~R0 + 1
00000269: R2 := 0.63:63[R1]
00000270: R1 := R2 + (R1 ~>> 3)
00000276: R1 := extend:64[63:1[R1]]
0000027c: when R1 = 0 goto %0000027a
000005e1: goto %00000379

00000379:
0000037c: R2 := 0x10000
00000383: R2 := mem[R2 + 0xFE0, el]:u64
00000388: when R2 = 0 goto %0000027a
000005e2: goto %0000038c

0000027a:
00000282: call R30 with noreturn

0000038c:
00000390: R16 := R2
00000395: call R16 with noreturn
