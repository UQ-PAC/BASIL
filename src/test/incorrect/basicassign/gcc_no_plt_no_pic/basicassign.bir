00000d2c: program
00000d16: sub __cxa_finalize(__cxa_finalize_result)
00000d2d: __cxa_finalize_result :: out u32 = low:32[R0]

00000aa0:
00000b98: R16 := 0x10000
00000b9f: R17 := mem[R16 + 0xFB8, el]:u64
00000ba5: R16 := R16 + 0xFB8
00000baa: call R17 with noreturn

00000d17: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000d2e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000095d:
00000961: #3 := R31 - 0x20
00000967: mem := mem with [#3, el]:u64 <- R29
0000096d: mem := mem with [#3 + 8, el]:u64 <- R30
00000971: R31 := #3
00000977: R29 := R31
0000097f: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000984: R19 := 0x11000
0000098b: R0 := pad:64[mem[R19 + 0x10]]
00000992: when 31:0[R0] <> 0 goto %00000990
00000d18: goto %00000a69

00000a69:
00000a6c: R0 := 0x10000
00000a73: R0 := mem[R0 + 0xFE0, el]:u64
00000a79: when R0 = 0 goto %00000a77
00000d19: goto %00000a90

00000a90:
00000a93: R0 := 0x11000
00000a9a: R0 := mem[R0 + 8, el]:u64
00000a9f: R30 := 0x6F0
00000aa2: call @__cxa_finalize with return %00000a77

00000a77:
00000a7f: R30 := 0x6F4
00000a81: call @deregister_tm_clones with return %00000a83

00000a83:
00000a86: R0 := 1
00000a8e: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000d1a: goto %00000990

00000990:
0000099a: R19 := mem[R31 + 0x10, el]:u64
000009a1: R29 := mem[R31, el]:u64
000009a6: R30 := mem[R31 + 8, el]:u64
000009aa: R31 := R31 + 0x20
000009af: call R30 with noreturn

00000d1b: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000d2f: __libc_start_main_main :: in u64 = R0
00000d30: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000d31: __libc_start_main_arg3 :: in out u64 = R2
00000d32: __libc_start_main_auxv :: in out u64 = R3
00000d33: __libc_start_main_result :: out u32 = low:32[R0]

000008b6:
00000b82: R16 := 0x10000
00000b89: R17 := mem[R16 + 0xFB0, el]:u64
00000b8f: R16 := R16 + 0xFB0
00000b94: call R17 with noreturn

00000d1c: sub _fini(_fini_result)
00000d34: _fini_result :: out u32 = low:32[R0]

000006ba:
000006c0: #0 := R31 - 0x10
000006c6: mem := mem with [#0, el]:u64 <- R29
000006cc: mem := mem with [#0 + 8, el]:u64 <- R30
000006d0: R31 := #0
000006d6: R29 := R31
000006dd: R29 := mem[R31, el]:u64
000006e2: R30 := mem[R31 + 8, el]:u64
000006e6: R31 := R31 + 0x10
000006eb: call R30 with noreturn

00000d1d: sub _init(_init_result)
00000d35: _init_result :: out u32 = low:32[R0]

00000c5b:
00000c61: #5 := R31 - 0x10
00000c67: mem := mem with [#5, el]:u64 <- R29
00000c6d: mem := mem with [#5 + 8, el]:u64 <- R30
00000c71: R31 := #5
00000c77: R29 := R31
00000c7c: R30 := 0x590
00000c7e: call @call_weak_fn with return %00000c80

00000c80:
00000c85: R29 := mem[R31, el]:u64
00000c8a: R30 := mem[R31 + 8, el]:u64
00000c8e: R31 := R31 + 0x10
00000c93: call R30 with noreturn

00000d1e: sub _start(_start_result)
00000d36: _start_result :: out u32 = low:32[R0]

00000877:
0000087c: R29 := 0
00000881: R30 := 0
00000887: R5 := R0
0000088e: R1 := mem[R31, el]:u64
00000894: R2 := R31 + 8
0000089a: R6 := R31
0000089f: R0 := 0x10000
000008a6: R0 := mem[R0 + 0xFF0, el]:u64
000008ab: R3 := 0
000008b0: R4 := 0
000008b5: R30 := 0x630
000008b8: call @__libc_start_main with return %000008ba

000008ba:
000008bd: R30 := 0x634
000008c0: call @abort with return %00000d1f

00000d1f:
00000d20: call @call_weak_fn with noreturn

00000d21: sub abort()


000008be:
00000bc4: R16 := 0x10000
00000bcb: R17 := mem[R16 + 0xFC8, el]:u64
00000bd1: R16 := R16 + 0xFC8
00000bd6: call R17 with noreturn

00000d22: sub call_weak_fn(call_weak_fn_result)
00000d37: call_weak_fn_result :: out u32 = low:32[R0]

000008c2:
000008c5: R0 := 0x10000
000008cc: R0 := mem[R0 + 0xFE8, el]:u64
000008d2: when R0 = 0 goto %000008d0
00000d23: goto %00000ae0

000008d0:
000008d8: call R30 with noreturn

00000ae0:
00000ae3: goto @__gmon_start__

00000ae1:
00000bae: R16 := 0x10000
00000bb5: R17 := mem[R16 + 0xFC0, el]:u64
00000bbb: R16 := R16 + 0xFC0
00000bc0: call R17 with noreturn

00000d24: sub deregister_tm_clones(deregister_tm_clones_result)
00000d38: deregister_tm_clones_result :: out u32 = low:32[R0]

000008de:
000008e1: R0 := 0x11000
000008e7: R0 := R0 + 0x10
000008ec: R1 := 0x11000
000008f2: R1 := R1 + 0x10
000008f8: #1 := ~R0
000008fd: #2 := R1 + ~R0
00000903: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000909: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000090d: ZF := #2 + 1 = 0
00000911: NF := 63:63[#2 + 1]
00000917: when ZF goto %00000915
00000d25: goto %00000ac2

00000ac2:
00000ac5: R1 := 0x10000
00000acc: R1 := mem[R1 + 0xFD8, el]:u64
00000ad1: when R1 = 0 goto %00000915
00000d26: goto %00000ad5

00000915:
0000091d: call R30 with noreturn

00000ad5:
00000ad9: R16 := R1
00000ade: call R16 with noreturn

00000d27: sub frame_dummy(frame_dummy_result)
00000d39: frame_dummy_result :: out u32 = low:32[R0]

000009b5:
000009b7: call @register_tm_clones with noreturn

00000d28: sub main(main_argc, main_argv, main_result)
00000d3a: main_argc :: in u32 = low:32[R0]
00000d3b: main_argv :: in out u64 = R1
00000d3c: main_result :: out u32 = low:32[R0]

000009b9:
000009bc: R0 := 0x11000
000009c2: R0 := R0 + 0x1C
000009c9: R1 := pad:64[mem[R0, el]:u32]
000009ce: R0 := 0x11000
000009d4: R0 := R0 + 0x14
000009dc: mem := mem with [R0, el]:u32 <- 31:0[R1]
000009e1: R0 := 0x11000
000009e7: R0 := R0 + 0x14
000009ee: mem := mem with [R0, el]:u32 <- 0
000009f3: R0 := 0x11000
000009f9: R0 := R0 + 0x14
00000a00: R1 := pad:64[mem[R0, el]:u32]
00000a05: R0 := 0x11000
00000a0b: R0 := R0 + 0x18
00000a13: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000a18: R0 := 0x11000
00000a1e: R0 := R0 + 0x1C
00000a25: R1 := pad:64[mem[R0, el]:u32]
00000a2a: R0 := 0x11000
00000a30: R0 := R0 + 0x14
00000a38: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000a3d: R0 := 0x11000
00000a43: R0 := R0 + 0x14
00000a4a: R1 := pad:64[mem[R0, el]:u32]
00000a4f: R0 := 0x11000
00000a55: R0 := R0 + 0x18
00000a5d: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000a62: R0 := 0
00000a67: call R30 with noreturn

00000d29: sub register_tm_clones(register_tm_clones_result)
00000d3d: register_tm_clones_result :: out u32 = low:32[R0]

0000091f:
00000922: R0 := 0x11000
00000928: R0 := R0 + 0x10
0000092d: R1 := 0x11000
00000933: R1 := R1 + 0x10
0000093a: R1 := R1 + ~R0 + 1
00000940: R2 := 0.63:63[R1]
00000947: R1 := R2 + (R1 ~>> 3)
0000094d: R1 := extend:64[63:1[R1]]
00000953: when R1 = 0 goto %00000951
00000d2a: goto %00000aa4

00000aa4:
00000aa7: R2 := 0x10000
00000aae: R2 := mem[R2 + 0xFF8, el]:u64
00000ab3: when R2 = 0 goto %00000951
00000d2b: goto %00000ab7

00000951:
00000959: call R30 with noreturn

00000ab7:
00000abb: R16 := R2
00000ac0: call R16 with noreturn
