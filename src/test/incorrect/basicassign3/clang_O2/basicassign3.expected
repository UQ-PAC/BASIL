var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
const {:extern} $secret_addr: bv64;
axiom ($secret_addr == 131089bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 131090bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $secret_addr) then false else (if (index == $z_addr) then true else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 2312bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 130424bv64) == 2256bv64);
  free ensures (memory_load64_le(mem, 130432bv64) == 2176bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 131090bv64);
  free ensures (memory_load64_le(mem, 131048bv64) == 131089bv64);
  free ensures (memory_load64_le(mem, 131056bv64) == 2260bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R8, Gamma_R9, Gamma_mem, R0, R8, R9, mem;
  free requires (memory_load64_le(mem, 131072bv64) == 0bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free requires (memory_load32_le(mem, 2312bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 130424bv64) == 2256bv64);
  free requires (memory_load64_le(mem, 130432bv64) == 2176bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 131090bv64);
  free requires (memory_load64_le(mem, 131048bv64) == 131089bv64);
  free requires (memory_load64_le(mem, 131056bv64) == 2260bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free ensures (memory_load32_le(mem, 2312bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 130424bv64) == 2256bv64);
  free ensures (memory_load64_le(mem, 130432bv64) == 2176bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 131090bv64);
  free ensures (memory_load64_le(mem, 131048bv64) == 131089bv64);
  free ensures (memory_load64_le(mem, 131056bv64) == 2260bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);

implementation main()
{
  var $load$18: bv64;
  var $load$19: bv8;
  var $load$20: bv64;
  var Gamma_$load$18: bool;
  var Gamma_$load$19: bool;
  var Gamma_$load$20: bool;
  lmain:
    assume {:captureState "lmain"} true;
    R8, Gamma_R8 := 126976bv64, true;
    R9, Gamma_R9 := 126976bv64, true;
    R0, Gamma_R0 := 0bv64, true;
    call rely();
    $load$18, Gamma_$load$18 := memory_load64_le(mem, bvadd64(R8, 4072bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4072bv64)) || L(mem, bvadd64(R8, 4072bv64)));
    R8, Gamma_R8 := $load$18, Gamma_$load$18;
    call rely();
    $load$19, Gamma_$load$19 := memory_load8_le(mem, R8), (gamma_load8(Gamma_mem, R8) || L(mem, R8));
    R8, Gamma_R8 := zero_extend56_8($load$19), Gamma_$load$19;
    call rely();
    $load$20, Gamma_$load$20 := memory_load64_le(mem, bvadd64(R9, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R9, 4056bv64)) || L(mem, bvadd64(R9, 4056bv64)));
    R9, Gamma_R9 := $load$20, Gamma_$load$20;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store8_le(mem, R9, R8[8:0]), gamma_store8(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "%00000294"} true;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

