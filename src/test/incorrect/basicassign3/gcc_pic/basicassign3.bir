000005dc: program
000005aa: sub __cxa_finalize(__cxa_finalize_result)
000005dd: __cxa_finalize_result :: out u32 = low:32[R0]

000003be:
000004b6: R16 := 0x20000
000004bd: R17 := mem[R16 + 8, el]:u64
000004c3: R16 := R16 + 8
000004c8: call R17 with noreturn

000005ab: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005de: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002a3:
000002a7: #3 := R31 - 0x20
000002ad: mem := mem with [#3, el]:u64 <- R29
000002b3: mem := mem with [#3 + 8, el]:u64 <- R30
000002b7: R31 := #3
000002bd: R29 := R31
000002c5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ca: R19 := 0x20000
000002d1: R0 := pad:64[mem[R19 + 0x30]]
000002d7: when 0:0[R0] goto %000002d5
000005d2: goto %00000387

00000387:
0000038a: R0 := 0x1F000
00000391: R0 := mem[R0 + 0xFB8, el]:u64
00000397: when R0 = 0 goto %00000395
000005d3: goto %000003ae

000003ae:
000003b1: R0 := 0x20000
000003b8: R0 := mem[R0 + 0x28, el]:u64
000003bd: R30 := 0x730
000003c0: call @__cxa_finalize with return %00000395

00000395:
0000039d: R30 := 0x734
0000039f: call @deregister_tm_clones with return %000003a1

000003a1:
000003a4: R0 := 1
000003ac: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005d4: goto %000002d5

000002d5:
000002df: R19 := mem[R31 + 0x10, el]:u64
000002e6: R29 := mem[R31, el]:u64
000002eb: R30 := mem[R31 + 8, el]:u64
000002ef: R31 := R31 + 0x20
000002f4: call R30 with noreturn

000005af: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005df: __libc_start_main_main :: in u64 = R0
000005e0: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005e1: __libc_start_main_arg3 :: in out u64 = R2
000005e2: __libc_start_main_auxv :: in out u64 = R3
000005e3: __libc_start_main_result :: out u32 = low:32[R0]

000001fc:
000004a0: R16 := 0x20000
000004a7: R17 := mem[R16, el]:u64
000004ad: R16 := R16
000004b2: call R17 with noreturn

000005b0: sub _fini(_fini_result)
000005e4: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005b1: sub _init(_init_result)
000005e5: _init_result :: out u32 = low:32[R0]

00000510:
00000516: #5 := R31 - 0x10
0000051c: mem := mem with [#5, el]:u64 <- R29
00000522: mem := mem with [#5 + 8, el]:u64 <- R30
00000526: R31 := #5
0000052c: R29 := R31
00000531: R30 := 0x5C0
00000533: call @call_weak_fn with return %00000535

00000535:
0000053a: R29 := mem[R31, el]:u64
0000053f: R30 := mem[R31 + 8, el]:u64
00000543: R31 := R31 + 0x10
00000548: call R30 with noreturn

000005b2: sub _start(_start_result)
000005e6: _start_result :: out u32 = low:32[R0]

000001bd:
000001c2: R29 := 0
000001c7: R30 := 0
000001cd: R5 := R0
000001d4: R1 := mem[R31, el]:u64
000001da: R2 := R31 + 8
000001e0: R6 := R31
000001e5: R0 := 0x1F000
000001ec: R0 := mem[R0 + 0xFD8, el]:u64
000001f1: R3 := 0
000001f6: R4 := 0
000001fb: R30 := 0x670
000001fe: call @__libc_start_main with return %00000200

00000200:
00000203: R30 := 0x674
00000206: call @abort with return %000005d5

000005d5:
000005d6: call @call_weak_fn with noreturn

000005b5: sub abort()


00000204:
000004e2: R16 := 0x20000
000004e9: R17 := mem[R16 + 0x18, el]:u64
000004ef: R16 := R16 + 0x18
000004f4: call R17 with noreturn

000005b6: sub call_weak_fn(call_weak_fn_result)
000005e7: call_weak_fn_result :: out u32 = low:32[R0]

00000208:
0000020b: R0 := 0x1F000
00000212: R0 := mem[R0 + 0xFC8, el]:u64
00000218: when R0 = 0 goto %00000216
000005d7: goto %000003fe

00000216:
0000021e: call R30 with noreturn

000003fe:
00000401: goto @__gmon_start__

000003ff:
000004cc: R16 := 0x20000
000004d3: R17 := mem[R16 + 0x10, el]:u64
000004d9: R16 := R16 + 0x10
000004de: call R17 with noreturn

000005b8: sub deregister_tm_clones(deregister_tm_clones_result)
000005e8: deregister_tm_clones_result :: out u32 = low:32[R0]

00000224:
00000227: R0 := 0x20000
0000022d: R0 := R0 + 0x30
00000232: R1 := 0x20000
00000238: R1 := R1 + 0x30
0000023e: #1 := ~R0
00000243: #2 := R1 + ~R0
00000249: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000253: ZF := #2 + 1 = 0
00000257: NF := 63:63[#2 + 1]
0000025d: when ZF goto %0000025b
000005d8: goto %000003e0

000003e0:
000003e3: R1 := 0x1F000
000003ea: R1 := mem[R1 + 0xFB0, el]:u64
000003ef: when R1 = 0 goto %0000025b
000005d9: goto %000003f3

0000025b:
00000263: call R30 with noreturn

000003f3:
000003f7: R16 := R1
000003fc: call R16 with noreturn

000005bb: sub frame_dummy(frame_dummy_result)
000005e9: frame_dummy_result :: out u32 = low:32[R0]

000002fa:
000002fc: call @register_tm_clones with noreturn

000005bc: sub main(main_argc, main_argv, main_result)
000005ea: main_argc :: in u32 = low:32[R0]
000005eb: main_argv :: in out u64 = R1
000005ec: main_result :: out u32 = low:32[R0]

000002fe:
00000302: R31 := R31 - 0x10
00000307: R0 := 0x1F000
0000030e: R0 := mem[R0 + 0xFD0, el]:u64
00000315: R0 := pad:64[mem[R0]]
0000031d: mem := mem with [R31 + 0xF] <- 7:0[R0]
00000324: mem := mem with [R31 + 0xF] <- 0
00000329: R0 := 0x1F000
00000330: R0 := mem[R0 + 0xFC0, el]:u64
00000337: R1 := pad:64[mem[R31 + 0xF]]
0000033f: mem := mem with [R0] <- 7:0[R1]
00000344: R0 := 0x1F000
0000034b: R0 := mem[R0 + 0xFD0, el]:u64
00000352: R0 := pad:64[mem[R0]]
0000035a: mem := mem with [R31 + 0xF] <- 7:0[R0]
0000035f: R0 := 0x1F000
00000366: R0 := mem[R0 + 0xFC0, el]:u64
0000036d: R1 := pad:64[mem[R31 + 0xF]]
00000375: mem := mem with [R0] <- 7:0[R1]
0000037a: R0 := 0
00000380: R31 := R31 + 0x10
00000385: call R30 with noreturn

000005bd: sub register_tm_clones(register_tm_clones_result)
000005ed: register_tm_clones_result :: out u32 = low:32[R0]

00000265:
00000268: R0 := 0x20000
0000026e: R0 := R0 + 0x30
00000273: R1 := 0x20000
00000279: R1 := R1 + 0x30
00000280: R1 := R1 + ~R0 + 1
00000286: R2 := 0.63:63[R1]
0000028d: R1 := R2 + (R1 ~>> 3)
00000293: R1 := extend:64[63:1[R1]]
00000299: when R1 = 0 goto %00000297
000005da: goto %000003c2

000003c2:
000003c5: R2 := 0x1F000
000003cc: R2 := mem[R2 + 0xFE0, el]:u64
000003d1: when R2 = 0 goto %00000297
000005db: goto %000003d5

00000297:
0000029f: call R30 with noreturn

000003d5:
000003d9: R16 := R2
000003de: call R16 with noreturn
