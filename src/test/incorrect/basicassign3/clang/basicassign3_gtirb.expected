var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R10: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R10: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $secret_addr: bv64;
axiom ($secret_addr == 69681bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69682bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $secret_addr) then false else (if (index == $z_addr) then true else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 24"} zero_extend24_8(bv8) returns (bv32);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 1892bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main_1812();
  modifies Gamma_R0, Gamma_R10, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R10, R31, R8, R9, mem, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le(mem, 1892bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 1892bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main_1812()
{
  var Gamma_load5: bool;
  var Gamma_load6: bool;
  var Gamma_load7: bool;
  var Gamma_load8: bool;
  var load5: bv8;
  var load6: bv8;
  var load7: bv8;
  var load8: bv8;
  main_1812__0__MRIfZSIyTFWNRJjkc4x55g:
    assume {:captureState "main_1812__0__MRIfZSIyTFWNRJjkc4x55g"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    R8, Gamma_R8 := 69632bv64, true;
    call rely();
    load5, Gamma_load5 := memory_load8_le(mem, bvadd64(R8, 49bv64)), (gamma_load8(Gamma_mem, bvadd64(R8, 49bv64)) || L(mem, bvadd64(R8, 49bv64)));
    R9, Gamma_R9 := zero_extend32_32(zero_extend24_8(load5)), Gamma_load5;
    stack, Gamma_stack := memory_store8_le(stack, bvadd64(R31, 15bv64), R9[8:0]), gamma_store8(Gamma_stack, bvadd64(R31, 15bv64), Gamma_R9);
    assume {:captureState "1824_0"} true;
    stack, Gamma_stack := memory_store8_le(stack, bvadd64(R31, 15bv64), 0bv8), gamma_store8(Gamma_stack, bvadd64(R31, 15bv64), true);
    assume {:captureState "1828_0"} true;
    load6, Gamma_load6 := memory_load8_le(stack, bvadd64(R31, 15bv64)), gamma_load8(Gamma_stack, bvadd64(R31, 15bv64));
    R10, Gamma_R10 := zero_extend32_32(zero_extend24_8(load6)), Gamma_load6;
    R9, Gamma_R9 := 69632bv64, true;
    call rely();
    assert (L(mem, bvadd64(R9, 50bv64)) ==> Gamma_R10);
    mem, Gamma_mem := memory_store8_le(mem, bvadd64(R9, 50bv64), R10[8:0]), gamma_store8(Gamma_mem, bvadd64(R9, 50bv64), Gamma_R10);
    assume {:captureState "1840_0"} true;
    call rely();
    load7, Gamma_load7 := memory_load8_le(mem, bvadd64(R8, 49bv64)), (gamma_load8(Gamma_mem, bvadd64(R8, 49bv64)) || L(mem, bvadd64(R8, 49bv64)));
    R8, Gamma_R8 := zero_extend32_32(zero_extend24_8(load7)), Gamma_load7;
    stack, Gamma_stack := memory_store8_le(stack, bvadd64(R31, 15bv64), R8[8:0]), gamma_store8(Gamma_stack, bvadd64(R31, 15bv64), Gamma_R8);
    assume {:captureState "1848_0"} true;
    load8, Gamma_load8 := memory_load8_le(stack, bvadd64(R31, 15bv64)), gamma_load8(Gamma_stack, bvadd64(R31, 15bv64));
    R8, Gamma_R8 := zero_extend32_32(zero_extend24_8(load8)), Gamma_load8;
    call rely();
    assert (L(mem, bvadd64(R9, 50bv64)) ==> Gamma_R8);
    mem, Gamma_mem := memory_store8_le(mem, bvadd64(R9, 50bv64), R8[8:0]), gamma_store8(Gamma_mem, bvadd64(R9, 50bv64), Gamma_R8);
    assume {:captureState "1856_0"} true;
    R0, Gamma_R0 := 0bv64, true;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_1812_basil_return;
  main_1812_basil_return:
    assume {:captureState "main_1812_basil_return"} true;
    return;
}

