var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $secret_addr: bv64;
axiom ($secret_addr == 69681bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69682bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $secret_addr) then false else (if (index == $z_addr) then true else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value]
}

function {:extern} {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1964bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1965bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1966bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1967bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69681bv64);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69682bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main(R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R10_out: bv64, Gamma_R10_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load8_le(mem, 1964bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1965bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1966bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1967bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 69681bv64);
  free requires (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69682bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1792bv64);
  free ensures (memory_load8_le(mem, 1964bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1965bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1966bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1967bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69681bv64);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69682bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);

implementation main(R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R10_out: bv64, Gamma_R10_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool)
{
  var Gamma_R10_1: bool;
  var Gamma_R8_2: bool;
  var Gamma_R8_3: bool;
  var Gamma_R8_4: bool;
  var Gamma_R9_1: bool;
  var Gamma_R9_3: bool;
  var R10_1: bv64;
  var R8_2: bv64;
  var R8_3: bv64;
  var R8_4: bv64;
  var R9_1: bv64;
  var R9_3: bv64;
  $main$__0__$3y3_IhBrScqKSl092foduA:
    call rely();
    R8_2, Gamma_R8_2 := memory_load64_le(mem, 69584bv64), (gamma_load64(Gamma_mem, 69584bv64) || L(mem, 69584bv64));
    call rely();
    R9_1, Gamma_R9_1 := zero_extend56_8(memory_load8_le(mem, R8_2)), (gamma_load8(Gamma_mem, R8_2) || L(mem, R8_2));
    stack, Gamma_stack := memory_store8_le(stack, bvadd64(R31_in, 18446744073709551615bv64), R9_1[8:0]), gamma_store8(Gamma_stack, bvadd64(R31_in, 18446744073709551615bv64), Gamma_R9_1);
    stack, Gamma_stack := memory_store8_le(stack, bvadd64(R31_in, 18446744073709551615bv64), 0bv8), gamma_store8(Gamma_stack, bvadd64(R31_in, 18446744073709551615bv64), true);
    R10_1, Gamma_R10_1 := zero_extend56_8(memory_load8_le(stack, bvadd64(R31_in, 18446744073709551615bv64))), gamma_load8(Gamma_stack, bvadd64(R31_in, 18446744073709551615bv64));
    call rely();
    R9_3, Gamma_R9_3 := memory_load64_le(mem, 69568bv64), (gamma_load64(Gamma_mem, 69568bv64) || L(mem, 69568bv64));
    call rely();
    assert (L(mem, R9_3) ==> Gamma_R10_1);
    mem, Gamma_mem := memory_store8_le(mem, R9_3, R10_1[8:0]), gamma_store8(Gamma_mem, R9_3, Gamma_R10_1);
    call rely();
    R8_3, Gamma_R8_3 := zero_extend56_8(memory_load8_le(mem, R8_2)), (gamma_load8(Gamma_mem, R8_2) || L(mem, R8_2));
    stack, Gamma_stack := memory_store8_le(stack, bvadd64(R31_in, 18446744073709551615bv64), R8_3[8:0]), gamma_store8(Gamma_stack, bvadd64(R31_in, 18446744073709551615bv64), Gamma_R8_3);
    R8_4, Gamma_R8_4 := zero_extend56_8(memory_load8_le(stack, bvadd64(R31_in, 18446744073709551615bv64))), gamma_load8(Gamma_stack, bvadd64(R31_in, 18446744073709551615bv64));
    call rely();
    assert (L(mem, R9_3) ==> Gamma_R8_4);
    mem, Gamma_mem := memory_store8_le(mem, R9_3, R8_4[8:0]), gamma_store8(Gamma_mem, R9_3, Gamma_R8_4);
    goto main_basil_return;
  main_basil_return:
    R0_out, R10_out, R31_out, R8_out, R9_out := 0bv64, R10_1, R31_in, R8_4, R9_3;
    Gamma_R0_out, Gamma_R10_out, Gamma_R31_out, Gamma_R8_out, Gamma_R9_out := true, Gamma_R10_1, Gamma_R31_in, Gamma_R8_4, Gamma_R9_3;
    return;
}

