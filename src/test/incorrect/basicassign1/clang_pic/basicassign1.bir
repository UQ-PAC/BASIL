000005c9: program
00000597: sub __cxa_finalize(__cxa_finalize_result)
000005ca: __cxa_finalize_result :: out u32 = low:32[R0]

00000396:
0000048e: R16 := 0x20000
00000495: R17 := mem[R16 + 8, el]:u64
0000049b: R16 := R16 + 8
000004a0: call R17 with noreturn

00000598: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005cb: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000293:
00000297: #3 := R31 - 0x20
0000029d: mem := mem with [#3, el]:u64 <- R29
000002a3: mem := mem with [#3 + 8, el]:u64 <- R30
000002a7: R31 := #3
000002ad: R29 := R31
000002b5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ba: R19 := 0x20000
000002c1: R0 := pad:64[mem[R19 + 0x30]]
000002c7: when 0:0[R0] goto %000002c5
000005bf: goto %0000035f

0000035f:
00000362: R0 := 0x1F000
00000369: R0 := mem[R0 + 0xFB8, el]:u64
0000036f: when R0 = 0 goto %0000036d
000005c0: goto %00000386

00000386:
00000389: R0 := 0x20000
00000390: R0 := mem[R0 + 0x28, el]:u64
00000395: R30 := 0x770
00000398: call @__cxa_finalize with return %0000036d

0000036d:
00000375: R30 := 0x774
00000377: call @deregister_tm_clones with return %00000379

00000379:
0000037c: R0 := 1
00000384: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005c1: goto %000002c5

000002c5:
000002cf: R19 := mem[R31 + 0x10, el]:u64
000002d6: R29 := mem[R31, el]:u64
000002db: R30 := mem[R31 + 8, el]:u64
000002df: R31 := R31 + 0x20
000002e4: call R30 with noreturn

0000059c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005cc: __libc_start_main_main :: in u64 = R0
000005cd: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005ce: __libc_start_main_arg3 :: in out u64 = R2
000005cf: __libc_start_main_auxv :: in out u64 = R3
000005d0: __libc_start_main_result :: out u32 = low:32[R0]

000001ec:
00000478: R16 := 0x20000
0000047f: R17 := mem[R16, el]:u64
00000485: R16 := R16
0000048a: call R17 with noreturn

0000059d: sub _fini(_fini_result)
000005d1: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000059e: sub _init(_init_result)
000005d2: _init_result :: out u32 = low:32[R0]

000004e8:
000004ee: #5 := R31 - 0x10
000004f4: mem := mem with [#5, el]:u64 <- R29
000004fa: mem := mem with [#5 + 8, el]:u64 <- R30
000004fe: R31 := #5
00000504: R29 := R31
00000509: R30 := 0x5F8
0000050b: call @call_weak_fn with return %0000050d

0000050d:
00000512: R29 := mem[R31, el]:u64
00000517: R30 := mem[R31 + 8, el]:u64
0000051b: R31 := R31 + 0x10
00000520: call R30 with noreturn

0000059f: sub _start(_start_result)
000005d3: _start_result :: out u32 = low:32[R0]

000001ad:
000001b2: R29 := 0
000001b7: R30 := 0
000001bd: R5 := R0
000001c4: R1 := mem[R31, el]:u64
000001ca: R2 := R31 + 8
000001d0: R6 := R31
000001d5: R0 := 0x1F000
000001dc: R0 := mem[R0 + 0xFD8, el]:u64
000001e1: R3 := 0
000001e6: R4 := 0
000001eb: R30 := 0x6B0
000001ee: call @__libc_start_main with return %000001f0

000001f0:
000001f3: R30 := 0x6B4
000001f6: call @abort with return %000005c2

000005c2:
000005c3: call @call_weak_fn with noreturn

000005a2: sub abort()


000001f4:
000004ba: R16 := 0x20000
000004c1: R17 := mem[R16 + 0x18, el]:u64
000004c7: R16 := R16 + 0x18
000004cc: call R17 with noreturn

000005a3: sub call_weak_fn(call_weak_fn_result)
000005d4: call_weak_fn_result :: out u32 = low:32[R0]

000001f8:
000001fb: R0 := 0x1F000
00000202: R0 := mem[R0 + 0xFC8, el]:u64
00000208: when R0 = 0 goto %00000206
000005c4: goto %000003d6

00000206:
0000020e: call R30 with noreturn

000003d6:
000003d9: goto @__gmon_start__

000003d7:
000004a4: R16 := 0x20000
000004ab: R17 := mem[R16 + 0x10, el]:u64
000004b1: R16 := R16 + 0x10
000004b6: call R17 with noreturn

000005a5: sub deregister_tm_clones(deregister_tm_clones_result)
000005d5: deregister_tm_clones_result :: out u32 = low:32[R0]

00000214:
00000217: R0 := 0x20000
0000021d: R0 := R0 + 0x30
00000222: R1 := 0x20000
00000228: R1 := R1 + 0x30
0000022e: #1 := ~R0
00000233: #2 := R1 + ~R0
00000239: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000243: ZF := #2 + 1 = 0
00000247: NF := 63:63[#2 + 1]
0000024d: when ZF goto %0000024b
000005c5: goto %000003b8

000003b8:
000003bb: R1 := 0x1F000
000003c2: R1 := mem[R1 + 0xFB0, el]:u64
000003c7: when R1 = 0 goto %0000024b
000005c6: goto %000003cb

0000024b:
00000253: call R30 with noreturn

000003cb:
000003cf: R16 := R1
000003d4: call R16 with noreturn

000005a8: sub frame_dummy(frame_dummy_result)
000005d6: frame_dummy_result :: out u32 = low:32[R0]

000002ea:
000002ec: call @register_tm_clones with noreturn

000005a9: sub main(main_argc, main_argv, main_result)
000005d7: main_argc :: in u32 = low:32[R0]
000005d8: main_argv :: in out u64 = R1
000005d9: main_result :: out u32 = low:32[R0]

000002ee:
000002f2: R31 := R31 - 0x10
000002f7: R8 := 0x1F000
000002fe: R8 := mem[R8 + 0xFD0, el]:u64
00000305: R9 := pad:64[mem[R8, el]:u32]
0000030d: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R9]
00000312: R0 := 0
00000319: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000320: R10 := pad:64[mem[R31 + 0xC, el]:u32]
00000325: R9 := 0x1F000
0000032c: R9 := mem[R9 + 0xFC0, el]:u64
00000334: mem := mem with [R9, el]:u32 <- 31:0[R10]
0000033b: R8 := pad:64[mem[R8, el]:u32]
00000343: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000034a: R8 := pad:64[mem[R31 + 0xC, el]:u32]
00000352: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000358: R31 := R31 + 0x10
0000035d: call R30 with noreturn

000005aa: sub register_tm_clones(register_tm_clones_result)
000005da: register_tm_clones_result :: out u32 = low:32[R0]

00000255:
00000258: R0 := 0x20000
0000025e: R0 := R0 + 0x30
00000263: R1 := 0x20000
00000269: R1 := R1 + 0x30
00000270: R1 := R1 + ~R0 + 1
00000276: R2 := 0.63:63[R1]
0000027d: R1 := R2 + (R1 ~>> 3)
00000283: R1 := extend:64[63:1[R1]]
00000289: when R1 = 0 goto %00000287
000005c7: goto %0000039a

0000039a:
0000039d: R2 := 0x1F000
000003a4: R2 := mem[R2 + 0xFE0, el]:u64
000003a9: when R2 = 0 goto %00000287
000005c8: goto %000003ad

00000287:
0000028f: call R30 with noreturn

000003ad:
000003b1: R16 := R2
000003b6: call R16 with noreturn
