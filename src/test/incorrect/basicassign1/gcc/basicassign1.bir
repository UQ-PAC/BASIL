00000652: program
00000620: sub __cxa_finalize(__cxa_finalize_result)
00000653: __cxa_finalize_result :: out u32 = low:32[R0]

000003ba:
000004b2: R16 := 0x20000
000004b9: R17 := mem[R16 + 8, el]:u64
000004bf: R16 := R16 + 8
000004c4: call R17 with noreturn

00000621: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000654: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002a3:
000002a7: #3 := R31 - 0x20
000002ad: mem := mem with [#3, el]:u64 <- R29
000002b3: mem := mem with [#3 + 8, el]:u64 <- R30
000002b7: R31 := #3
000002bd: R29 := R31
000002c5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ca: R19 := 0x20000
000002d1: R0 := pad:64[mem[R19 + 0x30]]
000002d7: when 0:0[R0] goto %000002d5
00000648: goto %00000383

00000383:
00000386: R0 := 0x1F000
0000038d: R0 := mem[R0 + 0xFC8, el]:u64
00000393: when R0 = 0 goto %00000391
00000649: goto %000003aa

000003aa:
000003ad: R0 := 0x20000
000003b4: R0 := mem[R0 + 0x28, el]:u64
000003b9: R30 := 0x6F0
000003bc: call @__cxa_finalize with return %00000391

00000391:
00000399: R30 := 0x6F4
0000039b: call @deregister_tm_clones with return %0000039d

0000039d:
000003a0: R0 := 1
000003a8: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000064a: goto %000002d5

000002d5:
000002df: R19 := mem[R31 + 0x10, el]:u64
000002e6: R29 := mem[R31, el]:u64
000002eb: R30 := mem[R31 + 8, el]:u64
000002ef: R31 := R31 + 0x20
000002f4: call R30 with noreturn

00000625: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000655: __libc_start_main_main :: in u64 = R0
00000656: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000657: __libc_start_main_arg3 :: in out u64 = R2
00000658: __libc_start_main_auxv :: in out u64 = R3
00000659: __libc_start_main_result :: out u32 = low:32[R0]

000001fc:
0000049c: R16 := 0x20000
000004a3: R17 := mem[R16, el]:u64
000004a9: R16 := R16
000004ae: call R17 with noreturn

00000626: sub _fini(_fini_result)
0000065a: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000627: sub _init(_init_result)
0000065b: _init_result :: out u32 = low:32[R0]

0000056d:
00000573: #5 := R31 - 0x10
00000579: mem := mem with [#5, el]:u64 <- R29
0000057f: mem := mem with [#5 + 8, el]:u64 <- R30
00000583: R31 := #5
00000589: R29 := R31
0000058e: R30 := 0x590
00000590: call @call_weak_fn with return %00000592

00000592:
00000597: R29 := mem[R31, el]:u64
0000059c: R30 := mem[R31 + 8, el]:u64
000005a0: R31 := R31 + 0x10
000005a5: call R30 with noreturn

00000628: sub _start(_start_result)
0000065c: _start_result :: out u32 = low:32[R0]

000001bd:
000001c2: R29 := 0
000001c7: R30 := 0
000001cd: R5 := R0
000001d4: R1 := mem[R31, el]:u64
000001da: R2 := R31 + 8
000001e0: R6 := R31
000001e5: R0 := 0x1F000
000001ec: R0 := mem[R0 + 0xFD8, el]:u64
000001f1: R3 := 0
000001f6: R4 := 0
000001fb: R30 := 0x630
000001fe: call @__libc_start_main with return %00000200

00000200:
00000203: R30 := 0x634
00000206: call @abort with return %0000064b

0000064b:
0000064c: call @call_weak_fn with noreturn

0000062b: sub abort()


00000204:
000004de: R16 := 0x20000
000004e5: R17 := mem[R16 + 0x18, el]:u64
000004eb: R16 := R16 + 0x18
000004f0: call R17 with noreturn

0000062c: sub call_weak_fn(call_weak_fn_result)
0000065d: call_weak_fn_result :: out u32 = low:32[R0]

00000208:
0000020b: R0 := 0x1F000
00000212: R0 := mem[R0 + 0xFD0, el]:u64
00000218: when R0 = 0 goto %00000216
0000064d: goto %000003fa

00000216:
0000021e: call R30 with noreturn

000003fa:
000003fd: goto @__gmon_start__

000003fb:
000004c8: R16 := 0x20000
000004cf: R17 := mem[R16 + 0x10, el]:u64
000004d5: R16 := R16 + 0x10
000004da: call R17 with noreturn

0000062e: sub deregister_tm_clones(deregister_tm_clones_result)
0000065e: deregister_tm_clones_result :: out u32 = low:32[R0]

00000224:
00000227: R0 := 0x20000
0000022d: R0 := R0 + 0x30
00000232: R1 := 0x20000
00000238: R1 := R1 + 0x30
0000023e: #1 := ~R0
00000243: #2 := R1 + ~R0
00000249: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000253: ZF := #2 + 1 = 0
00000257: NF := 63:63[#2 + 1]
0000025d: when ZF goto %0000025b
0000064e: goto %000003dc

000003dc:
000003df: R1 := 0x1F000
000003e6: R1 := mem[R1 + 0xFC0, el]:u64
000003eb: when R1 = 0 goto %0000025b
0000064f: goto %000003ef

0000025b:
00000263: call R30 with noreturn

000003ef:
000003f3: R16 := R1
000003f8: call R16 with noreturn

00000631: sub frame_dummy(frame_dummy_result)
0000065f: frame_dummy_result :: out u32 = low:32[R0]

000002fa:
000002fc: call @register_tm_clones with noreturn

00000632: sub main(main_argc, main_argv, main_result)
00000660: main_argc :: in u32 = low:32[R0]
00000661: main_argv :: in out u64 = R1
00000662: main_result :: out u32 = low:32[R0]

000002fe:
00000302: R31 := R31 - 0x10
00000307: R0 := 0x20000
0000030d: R0 := R0 + 0x38
00000314: R0 := pad:64[mem[R0, el]:u32]
0000031c: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000323: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000328: R0 := 0x20000
0000032e: R0 := R0 + 0x34
00000335: R1 := pad:64[mem[R31 + 0xC, el]:u32]
0000033d: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000342: R0 := 0x20000
00000348: R0 := R0 + 0x38
0000034f: R0 := pad:64[mem[R0, el]:u32]
00000357: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000035c: R0 := 0x20000
00000362: R0 := R0 + 0x34
00000369: R1 := pad:64[mem[R31 + 0xC, el]:u32]
00000371: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000376: R0 := 0
0000037c: R31 := R31 + 0x10
00000381: call R30 with noreturn

00000633: sub register_tm_clones(register_tm_clones_result)
00000663: register_tm_clones_result :: out u32 = low:32[R0]

00000265:
00000268: R0 := 0x20000
0000026e: R0 := R0 + 0x30
00000273: R1 := 0x20000
00000279: R1 := R1 + 0x30
00000280: R1 := R1 + ~R0 + 1
00000286: R2 := 0.63:63[R1]
0000028d: R1 := R2 + (R1 ~>> 3)
00000293: R1 := extend:64[63:1[R1]]
00000299: when R1 = 0 goto %00000297
00000650: goto %000003be

000003be:
000003c1: R2 := 0x1F000
000003c8: R2 := mem[R2 + 0xFE0, el]:u64
000003cd: when R2 = 0 goto %00000297
00000651: goto %000003d1

00000297:
0000029f: call R30 with noreturn

000003d1:
000003d5: R16 := R2
000003da: call R16 with noreturn
