var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R1: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R1: bv64;
var {:extern} $R31: bv64;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69652bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  (if (#index == $z_addr) then true else false)
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 1980bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69000bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 69652bv64);
  free ensures (memory_load64_le($mem, 69608bv64) == 69656bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$main_1876();
  modifies $Gamma_R0, $Gamma_R1, $Gamma_R31, $Gamma_mem, $Gamma_stack, $R0, $R1, $R31, $mem, $stack;
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le($mem, 1980bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69000bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69008bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 69652bv64);
  free requires (memory_load64_le($mem, 69608bv64) == 69656bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1876bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 1980bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69000bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 69652bv64);
  free ensures (memory_load64_le($mem, 69608bv64) == 69656bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_1876()
{
  var #Gamma_load19: bool;
  var #Gamma_load20: bool;
  var #Gamma_load21: bool;
  var #Gamma_load22: bool;
  var #Gamma_load23: bool;
  var #Gamma_load24: bool;
  var #Gamma_load25: bool;
  var #Gamma_load26: bool;
  var #load19: bv64;
  var #load20: bv32;
  var #load21: bv64;
  var #load22: bv32;
  var #load23: bv64;
  var #load24: bv32;
  var #load25: bv64;
  var #load26: bv32;
  b#main_entry:
    assume {:captureState "main_entry (A8+XTH6JTGm30lc5MnGYaQ==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551600bv64), $Gamma_R31;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load19, #Gamma_load19 := memory_load64_le($mem, bvadd64($R0, 4072bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4072bv64)) || L($mem, bvadd64($R0, 4072bv64)));
    $R0, $Gamma_R0 := #load19, #Gamma_load19;
    call p$rely();
    #load20, #Gamma_load20 := memory_load32_le($mem, $R0), (gamma_load32($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := zero_extend32_32(#load20), #Gamma_load20;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), $Gamma_R0);
    assume {:captureState "1892_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), 0bv32), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), true);
    assume {:captureState "1896_0"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load21, #Gamma_load21 := memory_load64_le($mem, bvadd64($R0, 4056bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4056bv64)) || L($mem, bvadd64($R0, 4056bv64)));
    $R0, $Gamma_R0 := #load21, #Gamma_load21;
    #load22, #Gamma_load22 := memory_load32_le($stack, bvadd64($R31, 12bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 12bv64));
    $R1, $Gamma_R1 := zero_extend32_32(#load22), #Gamma_load22;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store32_le($mem, $R0, $R1[32:0]), gamma_store32($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "1912_0"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load23, #Gamma_load23 := memory_load64_le($mem, bvadd64($R0, 4072bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4072bv64)) || L($mem, bvadd64($R0, 4072bv64)));
    $R0, $Gamma_R0 := #load23, #Gamma_load23;
    call p$rely();
    #load24, #Gamma_load24 := memory_load32_le($mem, $R0), (gamma_load32($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := zero_extend32_32(#load24), #Gamma_load24;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), $Gamma_R0);
    assume {:captureState "1928_0"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load25, #Gamma_load25 := memory_load64_le($mem, bvadd64($R0, 4056bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4056bv64)) || L($mem, bvadd64($R0, 4056bv64)));
    $R0, $Gamma_R0 := #load25, #Gamma_load25;
    #load26, #Gamma_load26 := memory_load32_le($stack, bvadd64($R31, 12bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 12bv64));
    $R1, $Gamma_R1 := zero_extend32_32(#load26), #Gamma_load26;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store32_le($mem, $R0, $R1[32:0]), gamma_store32($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "1944_0"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    $R31, $Gamma_R31 := bvadd64($R31, 16bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

