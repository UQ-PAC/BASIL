00000bea: program
00000bd4: sub __cxa_finalize(__cxa_finalize_result)
00000beb: __cxa_finalize_result :: out u32 = low:32[R0]

0000097a:
00000a72: R16 := 0x11000
00000a79: R17 := mem[R16 + 8, el]:u64
00000a7f: R16 := R16 + 8
00000a84: call R17 with noreturn

00000bd5: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000bec: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000884:
00000888: #3 := R31 - 0x20
0000088e: mem := mem with [#3, el]:u64 <- R29
00000894: mem := mem with [#3 + 8, el]:u64 <- R30
00000898: R31 := #3
0000089e: R29 := R31
000008a6: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008ab: R19 := 0x11000
000008b2: R0 := pad:64[mem[R19 + 0x30]]
000008b9: when 31:0[R0] <> 0 goto %000008b7
00000bd6: goto %00000943

00000943:
00000946: R0 := 0x10000
0000094d: R0 := mem[R0 + 0xFC8, el]:u64
00000953: when R0 = 0 goto %00000951
00000bd7: goto %0000096a

0000096a:
0000096d: R0 := 0x11000
00000974: R0 := mem[R0 + 0x28, el]:u64
00000979: R30 := 0x6F0
0000097c: call @__cxa_finalize with return %00000951

00000951:
00000959: R30 := 0x6F4
0000095b: call @deregister_tm_clones with return %0000095d

0000095d:
00000960: R0 := 1
00000968: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000bd8: goto %000008b7

000008b7:
000008c1: R19 := mem[R31 + 0x10, el]:u64
000008c8: R29 := mem[R31, el]:u64
000008cd: R30 := mem[R31 + 8, el]:u64
000008d1: R31 := R31 + 0x20
000008d6: call R30 with noreturn

00000bd9: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000bed: __libc_start_main_main :: in u64 = R0
00000bee: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000bef: __libc_start_main_arg3 :: in out u64 = R2
00000bf0: __libc_start_main_auxv :: in out u64 = R3
00000bf1: __libc_start_main_result :: out u32 = low:32[R0]

000007dd:
00000a5c: R16 := 0x11000
00000a63: R17 := mem[R16, el]:u64
00000a69: R16 := R16
00000a6e: call R17 with noreturn

00000bda: sub _fini(_fini_result)
00000bf2: _fini_result :: out u32 = low:32[R0]

00000619:
0000061f: #0 := R31 - 0x10
00000625: mem := mem with [#0, el]:u64 <- R29
0000062b: mem := mem with [#0 + 8, el]:u64 <- R30
0000062f: R31 := #0
00000635: R29 := R31
0000063c: R29 := mem[R31, el]:u64
00000641: R30 := mem[R31 + 8, el]:u64
00000645: R31 := R31 + 0x10
0000064a: call R30 with noreturn

00000bdb: sub _init(_init_result)
00000bf3: _init_result :: out u32 = low:32[R0]

00000b27:
00000b2d: #5 := R31 - 0x10
00000b33: mem := mem with [#5, el]:u64 <- R29
00000b39: mem := mem with [#5 + 8, el]:u64 <- R30
00000b3d: R31 := #5
00000b43: R29 := R31
00000b48: R30 := 0x590
00000b4a: call @call_weak_fn with return %00000b4c

00000b4c:
00000b51: R29 := mem[R31, el]:u64
00000b56: R30 := mem[R31 + 8, el]:u64
00000b5a: R31 := R31 + 0x10
00000b5f: call R30 with noreturn

00000bdc: sub _start(_start_result)
00000bf4: _start_result :: out u32 = low:32[R0]

0000079e:
000007a3: R29 := 0
000007a8: R30 := 0
000007ae: R5 := R0
000007b5: R1 := mem[R31, el]:u64
000007bb: R2 := R31 + 8
000007c1: R6 := R31
000007c6: R0 := 0x10000
000007cd: R0 := mem[R0 + 0xFD8, el]:u64
000007d2: R3 := 0
000007d7: R4 := 0
000007dc: R30 := 0x630
000007df: call @__libc_start_main with return %000007e1

000007e1:
000007e4: R30 := 0x634
000007e7: call @abort with return %00000bdd

00000bdd:
00000bde: call @call_weak_fn with noreturn

00000bdf: sub abort()


000007e5:
00000a9e: R16 := 0x11000
00000aa5: R17 := mem[R16 + 0x18, el]:u64
00000aab: R16 := R16 + 0x18
00000ab0: call R17 with noreturn

00000be0: sub call_weak_fn(call_weak_fn_result)
00000bf5: call_weak_fn_result :: out u32 = low:32[R0]

000007e9:
000007ec: R0 := 0x10000
000007f3: R0 := mem[R0 + 0xFD0, el]:u64
000007f9: when R0 = 0 goto %000007f7
00000be1: goto %000009ba

000007f7:
000007ff: call R30 with noreturn

000009ba:
000009bd: goto @__gmon_start__

000009bb:
00000a88: R16 := 0x11000
00000a8f: R17 := mem[R16 + 0x10, el]:u64
00000a95: R16 := R16 + 0x10
00000a9a: call R17 with noreturn

00000be2: sub deregister_tm_clones(deregister_tm_clones_result)
00000bf6: deregister_tm_clones_result :: out u32 = low:32[R0]

00000805:
00000808: R0 := 0x11000
0000080e: R0 := R0 + 0x30
00000813: R1 := 0x11000
00000819: R1 := R1 + 0x30
0000081f: #1 := ~R0
00000824: #2 := R1 + ~R0
0000082a: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000830: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000834: ZF := #2 + 1 = 0
00000838: NF := 63:63[#2 + 1]
0000083e: when ZF goto %0000083c
00000be3: goto %0000099c

0000099c:
0000099f: R1 := 0x10000
000009a6: R1 := mem[R1 + 0xFC0, el]:u64
000009ab: when R1 = 0 goto %0000083c
00000be4: goto %000009af

0000083c:
00000844: call R30 with noreturn

000009af:
000009b3: R16 := R1
000009b8: call R16 with noreturn

00000be5: sub frame_dummy(frame_dummy_result)
00000bf7: frame_dummy_result :: out u32 = low:32[R0]

000008dc:
000008de: call @register_tm_clones with noreturn

00000be6: sub main(main_argc, main_argv, main_result)
00000bf8: main_argc :: in u32 = low:32[R0]
00000bf9: main_argv :: in out u64 = R1
00000bfa: main_result :: out u32 = low:32[R0]

000008e0:
000008e4: R31 := R31 - 0x10
000008e9: R8 := 0x11000
000008f0: R9 := mem[R8 + 0x38, el]:u64
000008f8: mem := mem with [R31 + 8, el]:u64 <- R9
000008ff: mem := mem with [R31 + 8, el]:u64 <- 0
00000906: R10 := mem[R31 + 8, el]:u64
0000090b: R9 := 0x11000
00000913: mem := mem with [R9 + 0x40, el]:u64 <- R10
0000091a: R8 := mem[R8 + 0x38, el]:u64
00000922: mem := mem with [R31 + 8, el]:u64 <- R8
00000929: R8 := mem[R31 + 8, el]:u64
00000931: mem := mem with [R9 + 0x40, el]:u64 <- R8
00000936: R0 := 0
0000093c: R31 := R31 + 0x10
00000941: call R30 with noreturn

00000be7: sub register_tm_clones(register_tm_clones_result)
00000bfb: register_tm_clones_result :: out u32 = low:32[R0]

00000846:
00000849: R0 := 0x11000
0000084f: R0 := R0 + 0x30
00000854: R1 := 0x11000
0000085a: R1 := R1 + 0x30
00000861: R1 := R1 + ~R0 + 1
00000867: R2 := 0.63:63[R1]
0000086e: R1 := R2 + (R1 ~>> 3)
00000874: R1 := extend:64[63:1[R1]]
0000087a: when R1 = 0 goto %00000878
00000be8: goto %0000097e

0000097e:
00000981: R2 := 0x10000
00000988: R2 := mem[R2 + 0xFE0, el]:u64
0000098d: when R2 = 0 goto %00000878
00000be9: goto %00000991

00000878:
00000880: call R30 with noreturn

00000991:
00000995: R16 := R2
0000099a: call R16 with noreturn
