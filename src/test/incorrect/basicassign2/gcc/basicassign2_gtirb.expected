var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R1: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R1: bv64;
var {:extern} $R31: bv64;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $secret_addr: bv64;
axiom ($secret_addr == 69664bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69656bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  (if (bvsge64(#index, $z_addr) && bvslt64(#index, bvadd64($z_addr, 8bv64))) then true else (if (bvsge64(#index, $secret_addr) && bvslt64(#index, bvadd64($secret_addr, 8bv64))) then false else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsge"} bvsge64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvslt"} bvslt64(bv64, bv64) returns (bool);
function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 1916bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$main_1812();
  modifies $Gamma_R0, $Gamma_R1, $Gamma_R31, $Gamma_mem, $Gamma_stack, $R0, $R1, $R31, $mem, $stack;
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le($mem, 1916bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 1916bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_1812()
{
  var #Gamma_load16: bool;
  var #Gamma_load17: bool;
  var #Gamma_load18: bool;
  var #Gamma_load19: bool;
  var #load16: bv64;
  var #load17: bv64;
  var #load18: bv64;
  var #load19: bv64;
  b#main_entry:
    assume {:captureState "main_entry (RSR08m7kSH6UIQCFKlRaqg==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551600bv64), $Gamma_R31;
    $R0, $Gamma_R0 := 69632bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 32bv64), $Gamma_R0;
    call p$rely();
    #load16, #Gamma_load16 := memory_load64_le($mem, $R0), (gamma_load64($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := #load16, #Gamma_load16;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 8bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 8bv64), $Gamma_R0);
    assume {:captureState "1828_0"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 8bv64), 0bv64), gamma_store64($Gamma_stack, bvadd64($R31, 8bv64), true);
    assume {:captureState "1832_0"} true;
    $R0, $Gamma_R0 := 69632bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 24bv64), $Gamma_R0;
    #load17, #Gamma_load17 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R1, $Gamma_R1 := #load17, #Gamma_load17;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store64_le($mem, $R0, $R1), gamma_store64($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "1848_0"} true;
    $R0, $Gamma_R0 := 69632bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 32bv64), $Gamma_R0;
    call p$rely();
    #load18, #Gamma_load18 := memory_load64_le($mem, $R0), (gamma_load64($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := #load18, #Gamma_load18;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 8bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 8bv64), $Gamma_R0);
    assume {:captureState "1864_0"} true;
    $R0, $Gamma_R0 := 69632bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 24bv64), $Gamma_R0;
    #load19, #Gamma_load19 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R1, $Gamma_R1 := #load19, #Gamma_load19;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store64_le($mem, $R0, $R1), gamma_store64($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "1880_0"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    $R31, $Gamma_R31 := bvadd64($R31, 16bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

