var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $secret_addr: bv64;
axiom ($secret_addr == 69664bv64);
const $z_addr: bv64;
axiom ($z_addr == 69656bv64);
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $z_addr) then true else (if (index == $secret_addr) then false else false))
}

function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure main(main_argc: bv32, Gamma_main_argc: bool, main_argv: bv64, Gamma_main_argv: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (main_argv_out: bv64, Gamma_main_argv_out: bool, main_result: bv32, Gamma_main_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
  requires (memory_load8_le(mem, 1916bv64) == 1bv8);
  requires (memory_load8_le(mem, 1917bv64) == 0bv8);
  requires (memory_load8_le(mem, 1918bv64) == 2bv8);
  requires (memory_load8_le(mem, 1919bv64) == 0bv8);
  requires (memory_load8_le(mem, 69528bv64) == 0bv8);
  requires (memory_load8_le(mem, 69529bv64) == 0bv8);
  requires (memory_load8_le(mem, 69530bv64) == 0bv8);
  requires (memory_load8_le(mem, 69531bv64) == 0bv8);
  requires (memory_load8_le(mem, 69532bv64) == 0bv8);
  requires (memory_load8_le(mem, 69533bv64) == 0bv8);
  requires (memory_load8_le(mem, 69534bv64) == 0bv8);
  requires (memory_load8_le(mem, 69535bv64) == 0bv8);
  requires (memory_load8_le(mem, 69536bv64) == 0bv8);
  requires (memory_load8_le(mem, 69537bv64) == 0bv8);
  requires (memory_load8_le(mem, 69538bv64) == 0bv8);
  requires (memory_load8_le(mem, 69539bv64) == 0bv8);
  requires (memory_load8_le(mem, 69540bv64) == 0bv8);
  requires (memory_load8_le(mem, 69541bv64) == 0bv8);
  requires (memory_load8_le(mem, 69542bv64) == 0bv8);
  requires (memory_load8_le(mem, 69543bv64) == 0bv8);
  requires (memory_load8_le(mem, 69544bv64) == 0bv8);
  requires (memory_load8_le(mem, 69545bv64) == 0bv8);
  requires (memory_load8_le(mem, 69546bv64) == 0bv8);
  requires (memory_load8_le(mem, 69547bv64) == 0bv8);
  requires (memory_load8_le(mem, 69548bv64) == 0bv8);
  requires (memory_load8_le(mem, 69549bv64) == 0bv8);
  requires (memory_load8_le(mem, 69550bv64) == 0bv8);
  requires (memory_load8_le(mem, 69551bv64) == 0bv8);
  requires (memory_load8_le(mem, 69552bv64) == 160bv8);
  requires (memory_load8_le(mem, 69553bv64) == 5bv8);
  requires (memory_load8_le(mem, 69554bv64) == 0bv8);
  requires (memory_load8_le(mem, 69555bv64) == 0bv8);
  requires (memory_load8_le(mem, 69556bv64) == 0bv8);
  requires (memory_load8_le(mem, 69557bv64) == 0bv8);
  requires (memory_load8_le(mem, 69558bv64) == 0bv8);
  requires (memory_load8_le(mem, 69559bv64) == 0bv8);
  requires (memory_load8_le(mem, 69560bv64) == 160bv8);
  requires (memory_load8_le(mem, 69561bv64) == 5bv8);
  requires (memory_load8_le(mem, 69562bv64) == 0bv8);
  requires (memory_load8_le(mem, 69563bv64) == 0bv8);
  requires (memory_load8_le(mem, 69564bv64) == 0bv8);
  requires (memory_load8_le(mem, 69565bv64) == 0bv8);
  requires (memory_load8_le(mem, 69566bv64) == 0bv8);
  requires (memory_load8_le(mem, 69567bv64) == 0bv8);
  requires (memory_load8_le(mem, 69568bv64) == 160bv8);
  requires (memory_load8_le(mem, 69569bv64) == 5bv8);
  requires (memory_load8_le(mem, 69570bv64) == 0bv8);
  requires (memory_load8_le(mem, 69571bv64) == 0bv8);
  requires (memory_load8_le(mem, 69572bv64) == 0bv8);
  requires (memory_load8_le(mem, 69573bv64) == 0bv8);
  requires (memory_load8_le(mem, 69574bv64) == 0bv8);
  requires (memory_load8_le(mem, 69575bv64) == 0bv8);
  requires (memory_load8_le(mem, 69576bv64) == 160bv8);
  requires (memory_load8_le(mem, 69577bv64) == 5bv8);
  requires (memory_load8_le(mem, 69578bv64) == 0bv8);
  requires (memory_load8_le(mem, 69579bv64) == 0bv8);
  requires (memory_load8_le(mem, 69580bv64) == 0bv8);
  requires (memory_load8_le(mem, 69581bv64) == 0bv8);
  requires (memory_load8_le(mem, 69582bv64) == 0bv8);
  requires (memory_load8_le(mem, 69583bv64) == 0bv8);
  requires (memory_load8_le(mem, 69584bv64) == 168bv8);
  requires (memory_load8_le(mem, 69585bv64) == 13bv8);
  requires (memory_load8_le(mem, 69586bv64) == 1bv8);
  requires (memory_load8_le(mem, 69587bv64) == 0bv8);
  requires (memory_load8_le(mem, 69588bv64) == 0bv8);
  requires (memory_load8_le(mem, 69589bv64) == 0bv8);
  requires (memory_load8_le(mem, 69590bv64) == 0bv8);
  requires (memory_load8_le(mem, 69591bv64) == 0bv8);
  requires (memory_load8_le(mem, 69592bv64) == 0bv8);
  requires (memory_load8_le(mem, 69593bv64) == 0bv8);
  requires (memory_load8_le(mem, 69594bv64) == 0bv8);
  requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  requires (memory_load8_le(mem, 69600bv64) == 0bv8);
  requires (memory_load8_le(mem, 69601bv64) == 0bv8);
  requires (memory_load8_le(mem, 69602bv64) == 0bv8);
  requires (memory_load8_le(mem, 69603bv64) == 0bv8);
  requires (memory_load8_le(mem, 69604bv64) == 0bv8);
  requires (memory_load8_le(mem, 69605bv64) == 0bv8);
  requires (memory_load8_le(mem, 69606bv64) == 0bv8);
  requires (memory_load8_le(mem, 69607bv64) == 0bv8);
  requires (memory_load8_le(mem, 69608bv64) == 0bv8);
  requires (memory_load8_le(mem, 69609bv64) == 0bv8);
  requires (memory_load8_le(mem, 69610bv64) == 0bv8);
  requires (memory_load8_le(mem, 69611bv64) == 0bv8);
  requires (memory_load8_le(mem, 69612bv64) == 0bv8);
  requires (memory_load8_le(mem, 69613bv64) == 0bv8);
  requires (memory_load8_le(mem, 69614bv64) == 0bv8);
  requires (memory_load8_le(mem, 69615bv64) == 0bv8);
  requires (memory_load8_le(mem, 69616bv64) == 20bv8);
  requires (memory_load8_le(mem, 69617bv64) == 7bv8);
  requires (memory_load8_le(mem, 69618bv64) == 0bv8);
  requires (memory_load8_le(mem, 69619bv64) == 0bv8);
  requires (memory_load8_le(mem, 69620bv64) == 0bv8);
  requires (memory_load8_le(mem, 69621bv64) == 0bv8);
  requires (memory_load8_le(mem, 69622bv64) == 0bv8);
  requires (memory_load8_le(mem, 69623bv64) == 0bv8);
  requires (memory_load8_le(mem, 69624bv64) == 0bv8);
  requires (memory_load8_le(mem, 69625bv64) == 0bv8);
  requires (memory_load8_le(mem, 69626bv64) == 0bv8);
  requires (memory_load8_le(mem, 69627bv64) == 0bv8);
  requires (memory_load8_le(mem, 69628bv64) == 0bv8);
  requires (memory_load8_le(mem, 69629bv64) == 0bv8);
  requires (memory_load8_le(mem, 69630bv64) == 0bv8);
  requires (memory_load8_le(mem, 69631bv64) == 0bv8);
  requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  requires (memory_load8_le(mem, 69647bv64) == 0bv8);
{
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R1: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R0, Gamma_R0 := zero_extend32_32(main_argc), Gamma_main_argc;
  R1, Gamma_R1 := main_argv, Gamma_main_argv;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lmain:
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 32bv64), Gamma_R0;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, R0), (gamma_load64(Gamma_mem, R0) || L(mem, R0));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 8bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R0);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 8bv64), 0bv64), gamma_store64(Gamma_stack, bvadd64(R31, 8bv64), true);
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 24bv64), Gamma_R0;
    R1, Gamma_R1 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store64_le(mem, R0, R1), gamma_store64(Gamma_mem, R0, Gamma_R1);
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 32bv64), Gamma_R0;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, R0), (gamma_load64(Gamma_mem, R0) || L(mem, R0));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 8bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R0);
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 24bv64), Gamma_R0;
    R1, Gamma_R1 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store64_le(mem, R0, R1), gamma_store64(Gamma_mem, R0, Gamma_R1);
    R0, Gamma_R0 := 0bv64, true;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    main_argv_out, Gamma_main_argv_out := R1, Gamma_R1;
    main_result, Gamma_main_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}
