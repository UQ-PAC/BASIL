var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R1: bool;
var {:extern} $Gamma_R16: bool;
var {:extern} $Gamma_R17: bool;
var {:extern} $Gamma_R19: bool;
var {:extern} $Gamma_R2: bool;
var {:extern} $Gamma_R20: bool;
var {:extern} $Gamma_R21: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_malloc_base: [bv64]bool;
var {:extern} $Gamma_malloc_count: [bv64]bool;
var {:extern} $Gamma_malloc_end: [bv64]bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R1: bv64;
var {:extern} $R16: bv64;
var {:extern} $R17: bv64;
var {:extern} $R19: bv64;
var {:extern} $R2: bv64;
var {:extern} $R20: bv64;
var {:extern} $R21: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $R8: bv64;
var {:extern} $malloc_base: [bv64]bv8;
var {:extern} $malloc_count: [bv64]bv8;
var {:extern} $malloc_end: [bv64]bv8;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $buf_addr: bv64;
axiom ($buf_addr == 69752bv64);
const {:extern} $password_addr: bv64;
axiom ($password_addr == 69728bv64);
const {:extern} $stext_addr: bv64;
axiom ($stext_addr == 69729bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvuge"} bvuge64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvugt"} bvugt64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_load8(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  #gammaMap[#index]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} gamma_store8(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_load8_le(#memory: [bv64]bv8, #index: bv64) returns (bv8) {
  #memory[#index]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

function {:extern} memory_store8_le(#memory: [bv64]bv8, #index: bv64, #value: bv8) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]]
}

procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free ensures (memory_load64_le($mem, 69720bv64) == 69720bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$memcpy();
  modifies $Gamma_mem, $mem;
  free requires (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free requires (memory_load64_le($mem, 69720bv64) == 69720bv64);
  ensures (forall i: bv64 :: ($Gamma_mem[i] == if (bvule64($R0, i) && bvult64(i, bvadd64($R0, $R2))) then gamma_load8(($Gamma_mem), bvadd64(bvsub64(i, $R0), $R1)) else old(gamma_load8($Gamma_mem, i))));
  ensures (forall i: bv64 :: ($mem[i] == if (bvule64($R0, i) && bvult64(i,bvadd64($R0, $R2))) then memory_load8_le(($mem), bvadd64(bvsub64(i, $R0), $R1)) else old(memory_load8_le($mem, i))));
  free ensures (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free ensures (memory_load64_le($mem, 69720bv64) == 69720bv64);

procedure p$#free();
  requires (forall i : int, j: bv64 :: ($malloc_base[i] == $R0 && bvuge64(j, $R0) && bvult64(j,  $malloc_end[i])) ==> $Gamma_mem[j]);
  free requires (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free requires (memory_load64_le($mem, 69720bv64) == 69720bv64);
  free ensures (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free ensures (memory_load64_le($mem, 69720bv64) == 69720bv64);

procedure p$memset();
  modifies $Gamma_mem, $mem;
  requires $Gamma_R1;
  free requires (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free requires (memory_load64_le($mem, 69720bv64) == 69720bv64);
  ensures ((memory_load64_le($mem, $buf_addr) == old(memory_load64_le($mem, $buf_addr))) && (memory_load8_le($mem, $password_addr) == old(memory_load8_le($mem, $password_addr))));
  ensures (forall i: bv64 :: ($Gamma_mem[i] == if (bvule64($R0, i) && bvult64(i,bvadd64($R0, $R2))) then $Gamma_R1 else old(gamma_load8($Gamma_mem, i))));
  ensures (forall i: bv64 :: ($mem[i] == if (bvule64($R0, i) && bvult64(i,bvadd64($R0, $R2))) then $R1[8:0] else old(memory_load8_le($mem, i))));
  free ensures (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free ensures (memory_load64_le($mem, 69720bv64) == 69720bv64);

procedure p$puts();
  free requires (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free requires (memory_load64_le($mem, 69720bv64) == 69720bv64);
  free ensures (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free ensures (memory_load64_le($mem, 69720bv64) == 69720bv64);

procedure p$strlen();
  modifies $Gamma_R0, $R0;
  free requires (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free requires (memory_load64_le($mem, 69720bv64) == 69720bv64);
  ensures $Gamma_R0 == true;
  ensures (forall i: bv64 :: (bvule64(old($R0), i)) && (bvult64(i, bvadd64(old($R0), $R0))) ==> $mem[i] != 0bv8);
  ensures (memory_load8_le($mem, bvadd64(old($R0), $R0)) == 0bv8);
  ensures (bvult64(old($R0), bvadd64(bvadd64(old($R0), $R0), 1bv64)));
  free ensures (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free ensures (memory_load64_le($mem, 69720bv64) == 69720bv64);

procedure p$malloc();
  modifies $Gamma_R0, $Gamma_malloc_base, $Gamma_malloc_count, $Gamma_malloc_end, $R0, $malloc_base, $malloc_count, $malloc_end;
  requires bvugt64($R0, 0bv64);
  requires $Gamma_R0 == true;
  free requires (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free requires (memory_load64_le($mem, 69720bv64) == 69720bv64);
  ensures $Gamma_R0 == true;
  ensures $malloc_count == old($malloc_count) + 1;
  ensures bvugt64($malloc_end[$malloc_count], $malloc_base[$malloc_count]);
  ensures $R0 == $malloc_base[$malloc_count];
  ensures $malloc_end[$malloc_count] == bvadd64($R0, old($R0));
  ensures (forall i: int :: i != $malloc_count ==> bvugt64($malloc_base[$malloc_count], $malloc_end[i]) || bvult64($malloc_end[$malloc_count], $malloc_base[i]));
  ensures (forall i: int :: i != $malloc_count ==> $malloc_base[i] == old($malloc_base[i]) && $malloc_end[i] == old($malloc_end[i]));
  ensures bvuge64($R0, 100000000bv64);
  ensures (forall i : bv64 :: (bvuge64(i, $R0) && bvult64(i, bvadd64($R0, old($R0)))) ==> ($Gamma_mem[i] && gamma_load8($Gamma_mem, i)));
  free ensures (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free ensures (memory_load64_le($mem, 69720bv64) == 69720bv64);

procedure p$main_2260();
  modifies $Gamma_R0, $Gamma_R1, $Gamma_R16, $Gamma_R17, $Gamma_R19, $Gamma_R2, $Gamma_R20, $Gamma_R21, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_R8, $Gamma_malloc_base, $Gamma_malloc_count, $Gamma_malloc_end, $Gamma_mem, $Gamma_stack, $R0, $R1, $R16, $R17, $R19, $R2, $R20, $R21, $R29, $R30, $R31, $R8, $malloc_base, $malloc_count, $malloc_end, $mem, $stack;
  requires (gamma_load8($Gamma_mem, $password_addr) == false);
  requires $malloc_count == 0;
  requires gamma_load32($Gamma_mem, memory_load64_le($mem, $stext_addr));
  requires $R31 == 100bv64;
  free requires (memory_load64_le($mem, 69712bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69720bv64) == 69720bv64);
  free requires (memory_load64_le($mem, 69728bv64) == 7021176082073351431bv64);
  free requires (memory_load8_le($mem, 69736bv64) == 115bv8);
  free requires (memory_load8_le($mem, 69737bv64) == 115bv8);
  free requires (memory_load8_le($mem, 69738bv64) == 0bv8);
  free requires (memory_load8_le($mem, 69739bv64) == 0bv8);
  free requires (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free requires (memory_load64_le($mem, 69720bv64) == 69720bv64);
  free ensures ($Gamma_R19 == old($Gamma_R19));
  free ensures ($Gamma_R20 == old($Gamma_R20));
  free ensures ($Gamma_R21 == old($Gamma_R21));
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R19 == old($R19));
  free ensures ($R20 == old($R20));
  free ensures ($R21 == old($R21));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 2420bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2256bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 2176bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2260bv64);
  free ensures (memory_load64_le($mem, 69720bv64) == 69720bv64);

implementation p$main_2260()
{
  var #Cse0__5_7: bv64;
  var #Cse0__5_8: bv64;
  var #Cse0__5_9: bv64;
  var #Gamma_Cse0__5_7: bool;
  var #Gamma_Cse0__5_8: bool;
  var #Gamma_Cse0__5_9: bool;
  var #Gamma_load0: bool;
  var #Gamma_load11: bool;
  var #Gamma_load17: bool;
  var #Gamma_load22: bool;
  var #Gamma_load24: bool;
  var #Gamma_load26: bool;
  var #Gamma_load27: bool;
  var #Gamma_load28: bool;
  var #Gamma_load29: bool;
  var #Gamma_load30: bool;
  var #Gamma_load31: bool;
  var #Gamma_load32: bool;
  var #Gamma_load33: bool;
  var #Gamma_load8: bool;
  var #load0: bv64;
  var #load11: bv64;
  var #load17: bv64;
  var #load22: bv64;
  var #load24: bv64;
  var #load26: bv64;
  var #load27: bv64;
  var #load28: bv64;
  var #load29: bv64;
  var #load30: bv64;
  var #load31: bv64;
  var #load32: bv64;
  var #load33: bv64;
  var #load8: bv64;
  b#main_entry:
    assume {:captureState "main_entry (qNLF8IbgQe2/b7xV5htbvA==)"} true;
    #Cse0__5_8, #Gamma_Cse0__5_8 := bvadd64($R31, 18446744073709551568bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_8, $R29), gamma_store64($Gamma_stack, #Cse0__5_8, $Gamma_R29);
    assume {:captureState "2260_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_8, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_8, 8bv64), $Gamma_R30);
    assume {:captureState "2260_2"} true;
    $R31, $Gamma_R31 := #Cse0__5_8, #Gamma_Cse0__5_8;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 16bv64), $R21), gamma_store64($Gamma_stack, bvadd64($R31, 16bv64), $Gamma_R21);
    assume {:captureState "2264_0"} true;
    #Cse0__5_9, #Gamma_Cse0__5_9 := bvadd64($R31, 32bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_9, $R20), gamma_store64($Gamma_stack, #Cse0__5_9, $Gamma_R20);
    assume {:captureState "2268_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_9, 8bv64), $R19), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_9, 8bv64), $Gamma_R19);
    assume {:captureState "2268_2"} true;
    $R29, $Gamma_R29 := $R31, $Gamma_R31;
    $R0, $Gamma_R0 := 11bv64, true;
    $R30, $Gamma_R30 := 2284bv64, true;
    goto b#FUN_750_entry_41;
  b#FUN_750_entry_41:
    assume {:captureState "FUN_750_entry_41"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load8, #Gamma_load8 := memory_load64_le($mem, bvadd64($R16, 32bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 32bv64)) || L($mem, bvadd64($R16, 32bv64)));
    $R17, $Gamma_R17 := #load8, #Gamma_load8;
    $R16, $Gamma_R16 := bvadd64($R16, 32bv64), $Gamma_R16;
    call p$malloc();
    goto b#FUN_750_basil_return_1_42;
  b#FUN_750_basil_return_1_42:
    assume {:captureState "FUN_750_basil_return_1_42"} true;
    goto b#_inlineret_3;
  b#_inlineret_3:
    assume {:captureState "_inlineret_3 (qNLF8IbgQe2/b7xV5htbvA==)"} true;
    goto b#main_15;
  b#main_15:
    assume {:captureState "main_15 (KokgDeXqTNmxIsqipjoYFw==)"} true;
    $R21, $Gamma_R21 := 69632bv64, true;
    $R20, $Gamma_R20 := 69632bv64, true;
    $R20, $Gamma_R20 := bvadd64($R20, 97bv64), $Gamma_R20;
    $R19, $Gamma_R19 := $R0, $Gamma_R0;
    call p$rely();
    assert (L($mem, bvadd64($R21, 120bv64)) ==> $Gamma_R0);
    $mem, $Gamma_mem := memory_store64_le($mem, bvadd64($R21, 120bv64), $R0), gamma_store64($Gamma_mem, bvadd64($R21, 120bv64), $Gamma_R0);
    assume {:captureState "2300_0"} true;
    $R0, $Gamma_R0 := $R20, $Gamma_R20;
    $R30, $Gamma_R30 := 2312bv64, true;
    goto b#FUN_720_entry_45;
  b#FUN_720_entry_45:
    assume {:captureState "FUN_720_entry_45"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load17, #Gamma_load17 := memory_load64_le($mem, bvadd64($R16, 8bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 8bv64)) || L($mem, bvadd64($R16, 8bv64)));
    $R17, $Gamma_R17 := #load17, #Gamma_load17;
    $R16, $Gamma_R16 := bvadd64($R16, 8bv64), $Gamma_R16;
    call p$strlen();
    goto b#FUN_720_basil_return_1_46;
  b#FUN_720_basil_return_1_46:
    assume {:captureState "FUN_720_basil_return_1_46"} true;
    goto b#_inlineret_5;
  b#_inlineret_5:
    assume {:captureState "_inlineret_5 (KokgDeXqTNmxIsqipjoYFw==)"} true;
    goto b#main_13;
  b#main_13:
    assume {:captureState "main_13 (z9UW6NHURIKQQboF6fXnXw==)"} true;
    $R2, $Gamma_R2 := $R0, $Gamma_R0;
    $R0, $Gamma_R0 := $R19, $Gamma_R19;
    $R1, $Gamma_R1 := $R20, $Gamma_R20;
    $R30, $Gamma_R30 := 2328bv64, true;
    goto b#FUN_710_entry_53;
  b#FUN_710_entry_53:
    assume {:captureState "FUN_710_entry_53"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load0, #Gamma_load0 := memory_load64_le($mem, $R16), (gamma_load64($Gamma_mem, $R16) || L($mem, $R16));
    $R17, $Gamma_R17 := #load0, #Gamma_load0;
    $R16, $Gamma_R16 := $R16, $Gamma_R16;
    call p$memcpy();
    goto b#FUN_710_basil_return_1_54;
  b#FUN_710_basil_return_1_54:
    assume {:captureState "FUN_710_basil_return_1_54"} true;
    goto b#_inlineret_9;
  b#_inlineret_9:
    assume {:captureState "_inlineret_9 (z9UW6NHURIKQQboF6fXnXw==)"} true;
    goto b#main_11;
  b#main_11:
    assume {:captureState "main_11 (yUs2zDHRTyq+QQao9WrwDw==)"} true;
    $R0, $Gamma_R0 := $R19, $Gamma_R19;
    $R30, $Gamma_R30 := 2336bv64, true;
    goto b#FUN_790_entry_47;
  b#FUN_790_entry_47:
    assume {:captureState "FUN_790_entry_47"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load22, #Gamma_load22 := memory_load64_le($mem, bvadd64($R16, 64bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 64bv64)) || L($mem, bvadd64($R16, 64bv64)));
    $R17, $Gamma_R17 := #load22, #Gamma_load22;
    $R16, $Gamma_R16 := bvadd64($R16, 64bv64), $Gamma_R16;
    call p$puts();
    goto b#FUN_790_basil_return_1_48;
  b#FUN_790_basil_return_1_48:
    assume {:captureState "FUN_790_basil_return_1_48"} true;
    goto b#_inlineret_6;
  b#_inlineret_6:
    assume {:captureState "_inlineret_6 (yUs2zDHRTyq+QQao9WrwDw==)"} true;
    goto b#main_9;
  b#main_9:
    assume {:captureState "main_9 (pd/uGjCVQayPXSwXvUAoSA==)"} true;
    call p$rely();
    #load26, #Gamma_load26 := memory_load64_le($mem, bvadd64($R21, 120bv64)), (gamma_load64($Gamma_mem, bvadd64($R21, 120bv64)) || L($mem, bvadd64($R21, 120bv64)));
    $R8, $Gamma_R8 := #load26, #Gamma_load26;
    call p$rely();
    assert (L($mem, bvadd64($R8, 4bv64)) ==> true);
    $mem, $Gamma_mem := memory_store8_le($mem, bvadd64($R8, 4bv64), 0bv8), gamma_store8($Gamma_mem, bvadd64($R8, 4bv64), true);
    assume {:captureState "2340_0"} true;
    call p$rely();
    #load27, #Gamma_load27 := memory_load64_le($mem, bvadd64($R21, 120bv64)), (gamma_load64($Gamma_mem, bvadd64($R21, 120bv64)) || L($mem, bvadd64($R21, 120bv64)));
    $R19, $Gamma_R19 := #load27, #Gamma_load27;
    $R0, $Gamma_R0 := $R19, $Gamma_R19;
    $R30, $Gamma_R30 := 2356bv64, true;
    goto b#FUN_720_entry_43;
  b#FUN_720_entry_43:
    assume {:captureState "FUN_720_entry_43"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load17, #Gamma_load17 := memory_load64_le($mem, bvadd64($R16, 8bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 8bv64)) || L($mem, bvadd64($R16, 8bv64)));
    $R17, $Gamma_R17 := #load17, #Gamma_load17;
    $R16, $Gamma_R16 := bvadd64($R16, 8bv64), $Gamma_R16;
    call p$strlen();
    goto b#FUN_720_basil_return_1_44;
  b#FUN_720_basil_return_1_44:
    assume {:captureState "FUN_720_basil_return_1_44"} true;
    goto b#_inlineret_4;
  b#_inlineret_4:
    assume {:captureState "_inlineret_4 (pd/uGjCVQayPXSwXvUAoSA==)"} true;
    goto b#main_7;
  b#main_7:
    assume {:captureState "main_7 (N9lV0cxbTLCF3QVs5gNxIQ==)"} true;
    $R2, $Gamma_R2 := $R0, $Gamma_R0;
    $R0, $Gamma_R0 := $R19, $Gamma_R19;
    $R1, $Gamma_R1 := 1bv64, true;
    $R30, $Gamma_R30 := 2372bv64, true;
    goto b#FUN_760_entry_49;
  b#FUN_760_entry_49:
    assume {:captureState "FUN_760_entry_49"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load24, #Gamma_load24 := memory_load64_le($mem, bvadd64($R16, 40bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 40bv64)) || L($mem, bvadd64($R16, 40bv64)));
    $R17, $Gamma_R17 := #load24, #Gamma_load24;
    $R16, $Gamma_R16 := bvadd64($R16, 40bv64), $Gamma_R16;
    call p$memset();
    goto b#FUN_760_basil_return_1_50;
  b#FUN_760_basil_return_1_50:
    assume {:captureState "FUN_760_basil_return_1_50"} true;
    goto b#_inlineret_7;
  b#_inlineret_7:
    assume {:captureState "_inlineret_7 (N9lV0cxbTLCF3QVs5gNxIQ==)"} true;
    goto b#main_5;
  b#main_5:
    assume {:captureState "main_5 (bDOPbSvGS8SruKg7ZWS5fw==)"} true;
    call p$rely();
    #load33, #Gamma_load33 := memory_load64_le($mem, bvadd64($R21, 120bv64)), (gamma_load64($Gamma_mem, bvadd64($R21, 120bv64)) || L($mem, bvadd64($R21, 120bv64)));
    $R0, $Gamma_R0 := #load33, #Gamma_load33;
    $R30, $Gamma_R30 := 2380bv64, true;
    goto b#FUN_7a0_entry_51;
  b#FUN_7a0_entry_51:
    assume {:captureState "FUN_7a0_entry_51"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load11, #Gamma_load11 := memory_load64_le($mem, bvadd64($R16, 72bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 72bv64)) || L($mem, bvadd64($R16, 72bv64)));
    $R17, $Gamma_R17 := #load11, #Gamma_load11;
    $R16, $Gamma_R16 := bvadd64($R16, 72bv64), $Gamma_R16;
    call p$#free();
    goto b#FUN_7a0_basil_return_1_52;
  b#FUN_7a0_basil_return_1_52:
    assume {:captureState "FUN_7a0_basil_return_1_52"} true;
    goto b#_inlineret_8;
  b#_inlineret_8:
    assume {:captureState "_inlineret_8 (bDOPbSvGS8SruKg7ZWS5fw==)"} true;
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (cKUEm88XTFe/E92iZYtd1Q==)"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    #Cse0__5_7, #Gamma_Cse0__5_7 := bvadd64($R31, 32bv64), $Gamma_R31;
    #load28, #Gamma_load28 := memory_load64_le($stack, #Cse0__5_7), gamma_load64($Gamma_stack, #Cse0__5_7);
    $R20, $Gamma_R20 := #load28, #Gamma_load28;
    #load29, #Gamma_load29 := memory_load64_le($stack, bvadd64(#Cse0__5_7, 8bv64)), gamma_load64($Gamma_stack, bvadd64(#Cse0__5_7, 8bv64));
    $R19, $Gamma_R19 := #load29, #Gamma_load29;
    #load30, #Gamma_load30 := memory_load64_le($stack, bvadd64($R31, 16bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 16bv64));
    $R21, $Gamma_R21 := #load30, #Gamma_load30;
    #load31, #Gamma_load31 := memory_load64_le($stack, $R31), gamma_load64($Gamma_stack, $R31);
    $R29, $Gamma_R29 := #load31, #Gamma_load31;
    #load32, #Gamma_load32 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R30, $Gamma_R30 := #load32, #Gamma_load32;
    $R31, $Gamma_R31 := bvadd64($R31, 48bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

