0000064b: program
00000633: sub __cxa_finalize(__cxa_finalize_result)
0000064c: __cxa_finalize_result :: out u32 = low:32[R0]

000003b9:
000004b1: R16 := 0x20000
000004b8: R17 := mem[R16 + 8, el]:u64
000004be: R16 := R16 + 8
000004c3: call R17 with noreturn

00000634: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000064d: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000300:
00000304: #3 := R31 - 0x20
0000030a: mem := mem with [#3, el]:u64 <- R29
00000310: mem := mem with [#3 + 8, el]:u64 <- R30
00000314: R31 := #3
0000031a: R29 := R31
00000322: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000327: R19 := 0x20000
0000032e: R0 := pad:64[mem[R19 + 0x30]]
00000334: when 0:0[R0] goto %00000332
00000635: goto %00000382

00000382:
00000385: R0 := 0x1F000
0000038c: R0 := mem[R0 + 0xFC8, el]:u64
00000392: when R0 = 0 goto %00000390
00000636: goto %000003a9

000003a9:
000003ac: R0 := 0x20000
000003b3: R0 := mem[R0 + 0x28, el]:u64
000003b8: R30 := 0x73C
000003bb: call @__cxa_finalize with return %00000390

00000390:
00000398: R30 := 0x740
0000039a: call @deregister_tm_clones with return %0000039c

0000039c:
0000039f: R0 := 1
000003a7: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000637: goto %00000332

00000332:
0000033c: R19 := mem[R31 + 0x10, el]:u64
00000343: R29 := mem[R31, el]:u64
00000348: R30 := mem[R31 + 8, el]:u64
0000034c: R31 := R31 + 0x20
00000351: call R30 with noreturn

00000638: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000064e: __libc_start_main_main :: in u64 = R0
0000064f: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000650: __libc_start_main_arg3 :: in out u64 = R2
00000651: __libc_start_main_auxv :: in out u64 = R3
00000652: __libc_start_main_result :: out u32 = low:32[R0]

00000253:
0000049b: R16 := 0x20000
000004a2: R17 := mem[R16, el]:u64
000004a8: R16 := R16
000004ad: call R17 with noreturn

00000639: sub _fini(_fini_result)
00000653: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000063a: sub _init(_init_result)
00000654: _init_result :: out u32 = low:32[R0]

00000576:
0000057c: #5 := R31 - 0x10
00000582: mem := mem with [#5, el]:u64 <- R29
00000588: mem := mem with [#5 + 8, el]:u64 <- R30
0000058c: R31 := #5
00000592: R29 := R31
00000597: R30 := 0x590
00000599: call @call_weak_fn with return %0000059b

0000059b:
000005a0: R29 := mem[R31, el]:u64
000005a5: R30 := mem[R31 + 8, el]:u64
000005a9: R31 := R31 + 0x10
000005ae: call R30 with noreturn

0000063b: sub _start(_start_result)
00000655: _start_result :: out u32 = low:32[R0]

00000214:
00000219: R29 := 0
0000021e: R30 := 0
00000224: R5 := R0
0000022b: R1 := mem[R31, el]:u64
00000231: R2 := R31 + 8
00000237: R6 := R31
0000023c: R0 := 0x1F000
00000243: R0 := mem[R0 + 0xFD8, el]:u64
00000248: R3 := 0
0000024d: R4 := 0
00000252: R30 := 0x670
00000255: call @__libc_start_main with return %00000257

00000257:
0000025a: R30 := 0x674
0000025d: call @abort with return %0000063c

0000063c:
0000063d: call @call_weak_fn with noreturn

0000063e: sub abort()


0000025b:
000004dd: R16 := 0x20000
000004e4: R17 := mem[R16 + 0x18, el]:u64
000004ea: R16 := R16 + 0x18
000004ef: call R17 with noreturn

0000063f: sub call_weak_fn(call_weak_fn_result)
00000656: call_weak_fn_result :: out u32 = low:32[R0]

0000025f:
00000262: R0 := 0x1F000
00000269: R0 := mem[R0 + 0xFD0, el]:u64
0000026f: when R0 = 0 goto %0000026d
00000640: goto %000003f9

0000026d:
00000275: call R30 with noreturn

000003f9:
000003fc: goto @__gmon_start__

000003fa:
000004c7: R16 := 0x20000
000004ce: R17 := mem[R16 + 0x10, el]:u64
000004d4: R16 := R16 + 0x10
000004d9: call R17 with noreturn

00000641: sub deregister_tm_clones(deregister_tm_clones_result)
00000657: deregister_tm_clones_result :: out u32 = low:32[R0]

00000283:
00000286: R0 := 0x20000
0000028c: R0 := R0 + 0x30
00000291: R1 := 0x20000
00000297: R1 := R1 + 0x30
0000029d: #1 := ~R0
000002a2: #2 := R1 + ~R0
000002a8: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002ae: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002b2: ZF := #2 + 1 = 0
000002b6: NF := 63:63[#2 + 1]
000002bc: when ZF goto %000002ba
00000642: goto %000003db

000003db:
000003de: R1 := 0x1F000
000003e5: R1 := mem[R1 + 0xFC0, el]:u64
000003ea: when R1 = 0 goto %000002ba
00000643: goto %000003ee

000002ba:
000002c2: call R30 with noreturn

000003ee:
000003f2: R16 := R1
000003f7: call R16 with noreturn

00000644: sub f(f_result)
00000658: f_result :: out u32 = low:32[R0]

00000377:
0000037b: R0 := pad:64[30:0[R0].0]
00000380: call R30 with noreturn

00000645: sub frame_dummy(frame_dummy_result)
00000659: frame_dummy_result :: out u32 = low:32[R0]

00000359:
0000035b: call @register_tm_clones with noreturn

00000646: sub g(g_result)
0000065a: g_result :: out u32 = low:32[R0]

0000036b:
00000370: R0 := pad:64[31:0[R0] + 31:0[R1]]
00000375: call R30 with noreturn

00000647: sub main(main_argc, main_argv, main_result)
0000065b: main_argc :: in u32 = low:32[R0]
0000065c: main_argv :: in out u64 = R1
0000065d: main_result :: out u32 = low:32[R0]

000001e5:
000001e8: R0 := 0x20000
000001ef: R0 := pad:64[mem[R0 + 0x34, el]:u32]
000001f5: R0 := pad:64[30:0[R0].0]
000001fa: call R30 with noreturn

00000648: sub register_tm_clones(register_tm_clones_result)
0000065e: register_tm_clones_result :: out u32 = low:32[R0]

000002c4:
000002c7: R0 := 0x20000
000002cd: R0 := R0 + 0x30
000002d2: R1 := 0x20000
000002d8: R1 := R1 + 0x30
000002df: R1 := R1 + ~R0 + 1
000002e5: R2 := 0.63:63[R1]
000002ec: R1 := R2 + (R1 ~>> 3)
000002f2: R1 := extend:64[63:1[R1]]
000002f8: when R1 = 0 goto %000002f6
00000649: goto %000003bd

000003bd:
000003c0: R2 := 0x1F000
000003c7: R2 := mem[R2 + 0xFE0, el]:u64
000003cc: when R2 = 0 goto %000002f6
0000064a: goto %000003d0

000002f6:
000002fe: call R30 with noreturn

000003d0:
000003d4: R16 := R2
000003d9: call R16 with noreturn
