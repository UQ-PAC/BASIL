000006ae: program
00000697: sub __cxa_finalize(__cxa_finalize_result)
000006af: __cxa_finalize_result :: out u32 = low:32[R0]

0000041b:
00000513: R16 := 0x20000
0000051a: R17 := mem[R16 + 8, el]:u64
00000520: R16 := R16 + 8
00000525: call R17 with noreturn

00000698: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006b0: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000379:
0000037d: #5 := R31 - 0x20
00000383: mem := mem with [#5, el]:u64 <- R29
00000389: mem := mem with [#5 + 8, el]:u64 <- R30
0000038d: R31 := #5
00000393: R29 := R31
0000039b: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003a0: R19 := 0x20000
000003a7: R0 := pad:64[mem[R19 + 0x30]]
000003ad: when 0:0[R0] goto %000003ab
00000699: goto %000003e4

000003e4:
000003e7: R0 := 0x1F000
000003ee: R0 := mem[R0 + 0xFC8, el]:u64
000003f4: when R0 = 0 goto %000003f2
0000069a: goto %0000040b

0000040b:
0000040e: R0 := 0x20000
00000415: R0 := mem[R0 + 0x28, el]:u64
0000041a: R30 := 0x73C
0000041d: call @__cxa_finalize with return %000003f2

000003f2:
000003fa: R30 := 0x740
000003fc: call @deregister_tm_clones with return %000003fe

000003fe:
00000401: R0 := 1
00000409: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000069b: goto %000003ab

000003ab:
000003b5: R19 := mem[R31 + 0x10, el]:u64
000003bc: R29 := mem[R31, el]:u64
000003c1: R30 := mem[R31 + 8, el]:u64
000003c5: R31 := R31 + 0x20
000003ca: call R30 with noreturn

0000069c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006b1: __libc_start_main_main :: in u64 = R0
000006b2: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006b3: __libc_start_main_arg3 :: in out u64 = R2
000006b4: __libc_start_main_auxv :: in out u64 = R3
000006b5: __libc_start_main_result :: out u32 = low:32[R0]

000002cc:
000004fd: R16 := 0x20000
00000504: R17 := mem[R16, el]:u64
0000050a: R16 := R16
0000050f: call R17 with noreturn

0000069d: sub _fini(_fini_result)
000006b6: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000069e: sub _init(_init_result)
000006b7: _init_result :: out u32 = low:32[R0]

000005d9:
000005df: #7 := R31 - 0x10
000005e5: mem := mem with [#7, el]:u64 <- R29
000005eb: mem := mem with [#7 + 8, el]:u64 <- R30
000005ef: R31 := #7
000005f5: R29 := R31
000005fa: R30 := 0x590
000005fc: call @call_weak_fn with return %000005fe

000005fe:
00000603: R29 := mem[R31, el]:u64
00000608: R30 := mem[R31 + 8, el]:u64
0000060c: R31 := R31 + 0x10
00000611: call R30 with noreturn

0000069f: sub _start(_start_result)
000006b8: _start_result :: out u32 = low:32[R0]

0000028d:
00000292: R29 := 0
00000297: R30 := 0
0000029d: R5 := R0
000002a4: R1 := mem[R31, el]:u64
000002aa: R2 := R31 + 8
000002b0: R6 := R31
000002b5: R0 := 0x1F000
000002bc: R0 := mem[R0 + 0xFD8, el]:u64
000002c1: R3 := 0
000002c6: R4 := 0
000002cb: R30 := 0x670
000002ce: call @__libc_start_main with return %000002d0

000002d0:
000002d3: R30 := 0x674
000002d6: call @abort with return %000006a0

000006a0:
000006a1: call @call_weak_fn with noreturn

000006a2: sub abort()


000002d4:
0000053f: R16 := 0x20000
00000546: R17 := mem[R16 + 0x18, el]:u64
0000054c: R16 := R16 + 0x18
00000551: call R17 with noreturn

000006a3: sub call_weak_fn(call_weak_fn_result)
000006b9: call_weak_fn_result :: out u32 = low:32[R0]

000002d8:
000002db: R0 := 0x1F000
000002e2: R0 := mem[R0 + 0xFD0, el]:u64
000002e8: when R0 = 0 goto %000002e6
000006a4: goto %0000045b

000002e6:
000002ee: call R30 with noreturn

0000045b:
0000045e: goto @__gmon_start__

0000045c:
00000529: R16 := 0x20000
00000530: R17 := mem[R16 + 0x10, el]:u64
00000536: R16 := R16 + 0x10
0000053b: call R17 with noreturn

000006a5: sub deregister_tm_clones(deregister_tm_clones_result)
000006ba: deregister_tm_clones_result :: out u32 = low:32[R0]

000002fc:
000002ff: R0 := 0x20000
00000305: R0 := R0 + 0x30
0000030a: R1 := 0x20000
00000310: R1 := R1 + 0x30
00000316: #3 := ~R0
0000031b: #4 := R1 + ~R0
00000321: VF := extend:65[#4 + 1] <> extend:65[R1] + extend:65[#3] + 1
00000327: CF := pad:65[#4 + 1] <> pad:65[R1] + pad:65[#3] + 1
0000032b: ZF := #4 + 1 = 0
0000032f: NF := 63:63[#4 + 1]
00000335: when ZF goto %00000333
000006a6: goto %0000043d

0000043d:
00000440: R1 := 0x1F000
00000447: R1 := mem[R1 + 0xFC0, el]:u64
0000044c: when R1 = 0 goto %00000333
000006a7: goto %00000450

00000333:
0000033b: call R30 with noreturn

00000450:
00000454: R16 := R1
00000459: call R16 with noreturn

000006a8: sub f(f_result)
000006bb: f_result :: out u32 = low:32[R0]

00000220:
00000226: R2 := 0x20000
0000022d: R2 := pad:64[mem[R2 + 0x34, el]:u32]
00000233: #2 := 31:0[R2]
00000238: VF := 0
0000023d: CF := pad:33[#2] <> pad:33[31:0[R2]] - 0x100000000
00000241: ZF := #2 = 0
00000245: NF := 31:31[#2]
00000253: when ZF goto %0000024b
00000254: goto %0000024f

0000024f:
00000250: R0 := pad:64[31:0[R0]]
00000256: goto %00000252

0000024b:
0000024c: R0 := pad:64[31:0[R1]]
00000255: goto %00000252

00000252:
0000025b: call R30 with noreturn

000006a9: sub frame_dummy(frame_dummy_result)
000006bc: frame_dummy_result :: out u32 = low:32[R0]

000003d2:
000003d4: call @register_tm_clones with noreturn

000006aa: sub main(main_argc, main_argv, main_result)
000006bd: main_argc :: in u32 = low:32[R0]
000006be: main_argv :: in out u64 = R1
000006bf: main_result :: out u32 = low:32[R0]

000001e9:
000001ec: R3 := 0x20000
000001f2: R3 := R3 + 0x34
000001f8: #1 := R31 - 0x10
000001fe: mem := mem with [#1, el]:u64 <- R29
00000204: mem := mem with [#1 + 8, el]:u64 <- R30
00000208: R31 := #1
0000020d: R1 := 1
00000213: R29 := R31
0000021a: R0 := pad:64[mem[R3 + 4, el]:u32]
0000021f: R30 := 0x61C
00000222: call @f with return %0000025d

0000025d:
00000261: R1 := pad:64[31:0[R0]]
00000268: R29 := mem[R31, el]:u64
0000026d: R30 := mem[R31 + 8, el]:u64
00000271: R31 := R31 + 0x10
00000276: R0 := 0
0000027e: mem := mem with [R3 + 4, el]:u32 <- 31:0[R1]
00000283: call R30 with noreturn

000006ab: sub register_tm_clones(register_tm_clones_result)
000006c0: register_tm_clones_result :: out u32 = low:32[R0]

0000033d:
00000340: R0 := 0x20000
00000346: R0 := R0 + 0x30
0000034b: R1 := 0x20000
00000351: R1 := R1 + 0x30
00000358: R1 := R1 + ~R0 + 1
0000035e: R2 := 0.63:63[R1]
00000365: R1 := R2 + (R1 ~>> 3)
0000036b: R1 := extend:64[63:1[R1]]
00000371: when R1 = 0 goto %0000036f
000006ac: goto %0000041f

0000041f:
00000422: R2 := 0x1F000
00000429: R2 := mem[R2 + 0xFE0, el]:u64
0000042e: when R2 = 0 goto %0000036f
000006ad: goto %00000432

0000036f:
00000377: call R30 with noreturn

00000432:
00000436: R16 := R2
0000043b: call R16 with noreturn
