00001293: program
00001261: sub __cxa_finalize(__cxa_finalize_result)
00001294: __cxa_finalize_result :: out u32 = low:32[R0]

00000c87:
00000e55: R16 := 0x11000
00000e5c: R17 := mem[R16 + 0xF40, el]:u64
00000e62: R16 := R16 + 0xF40
00000e67: call R17 with noreturn

00001262: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00001295: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000059a:
0000059e: #3 := R31 - 0x20
000005a4: mem := mem with [#3, el]:u64 <- R29
000005aa: mem := mem with [#3 + 8, el]:u64 <- R30
000005ae: R31 := #3
000005b4: R29 := R31
000005bc: mem := mem with [R31 + 0x10, el]:u64 <- R19
000005c1: R19 := 0x12000
000005c8: R0 := pad:64[mem[R19 + 0x10]]
000005cf: when 31:0[R0] <> 0 goto %000005cd
00001263: goto %00000c50

00000c50:
00000c53: R0 := 0x11000
00000c5a: R0 := mem[R0 + 0xFC0, el]:u64
00000c60: when R0 = 0 goto %00000c5e
00001264: goto %00000c77

00000c77:
00000c7a: R0 := 0x12000
00000c81: R0 := mem[R0 + 8, el]:u64
00000c86: R30 := 0xB30
00000c89: call @__cxa_finalize with return %00000c5e

00000c5e:
00000c66: R30 := 0xB34
00000c68: call @deregister_tm_clones with return %00000c6a

00000c6a:
00000c6d: R0 := 1
00000c75: mem := mem with [R19 + 0x10] <- 7:0[R0]
00001265: goto %000005cd

000005cd:
000005d7: R19 := mem[R31 + 0x10, el]:u64
000005de: R29 := mem[R31, el]:u64
000005e3: R30 := mem[R31 + 8, el]:u64
000005e7: R31 := R31 + 0x20
000005ec: call R30 with noreturn

00001266: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00001296: __libc_start_main_main :: in u64 = R0
00001297: __libc_start_main_arg2 :: in u32 = low:32[R1]
00001298: __libc_start_main_arg3 :: in out u64 = R2
00001299: __libc_start_main_auxv :: in out u64 = R3
0000129a: __libc_start_main_result :: out u32 = low:32[R0]

000004f3:
00000e3f: R16 := 0x11000
00000e46: R17 := mem[R16 + 0xF38, el]:u64
00000e4c: R16 := R16 + 0xF38
00000e51: call R17 with noreturn

00001267: sub _fini(_fini_result)
0000129b: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00001268: sub _init(_init_result)
0000129c: _init_result :: out u32 = low:32[R0]

000010c0:
000010c6: #21 := R31 - 0x10
000010cc: mem := mem with [#21, el]:u64 <- R29
000010d2: mem := mem with [#21 + 8, el]:u64 <- R30
000010d6: R31 := #21
000010dc: R29 := R31
000010e1: R30 := 0x918
000010e3: call @call_weak_fn with return %000010e5

000010e5:
000010ea: R29 := mem[R31, el]:u64
000010ef: R30 := mem[R31 + 8, el]:u64
000010f3: R31 := R31 + 0x10
000010f8: call R30 with noreturn

00001269: sub _start(_start_result)
0000129d: _start_result :: out u32 = low:32[R0]

000004b4:
000004b9: R29 := 0
000004be: R30 := 0
000004c4: R5 := R0
000004cb: R1 := mem[R31, el]:u64
000004d1: R2 := R31 + 8
000004d7: R6 := R31
000004dc: R0 := 0x11000
000004e3: R0 := mem[R0 + 0xFF0, el]:u64
000004e8: R3 := 0
000004ed: R4 := 0
000004f2: R30 := 0xA70
000004f5: call @__libc_start_main with return %000004f7

000004f7:
000004fa: R30 := 0xA74
000004fd: call @abort with return %0000126a

0000126a:
0000126b: call @call_weak_fn with noreturn

0000126c: sub abort()


000004fb:
00000eef: R16 := 0x11000
00000ef6: R17 := mem[R16 + 0xF78, el]:u64
00000efc: R16 := R16 + 0xF78
00000f01: call R17 with noreturn

0000126d: sub call_weak_fn(call_weak_fn_result)
0000129e: call_weak_fn_result :: out u32 = low:32[R0]

000004ff:
00000502: R0 := 0x11000
00000509: R0 := mem[R0 + 0xFD8, el]:u64
0000050f: when R0 = 0 goto %0000050d
0000126e: goto %00000cc7

0000050d:
00000515: call R30 with noreturn

00000cc7:
00000cca: goto @__gmon_start__

00000cc8:
00000ed9: R16 := 0x11000
00000ee0: R17 := mem[R16 + 0xF70, el]:u64
00000ee6: R16 := R16 + 0xF70
00000eeb: call R17 with noreturn

0000126f: sub closeFile(closeFile_result)
0000129f: closeFile_result :: out u32 = low:32[R0]

00000a9f:
00000aa3: #17 := R31 - 0x10
00000aa9: mem := mem with [#17, el]:u64 <- R29
00000aaf: mem := mem with [#17 + 8, el]:u64 <- R30
00000ab3: R31 := #17
00000ab9: R29 := R31
00000abe: R0 := 0x11000
00000ac5: R0 := mem[R0 + 0xFE8, el]:u64
00000acc: R0 := mem[R0, el]:u64
00000ad2: #18 := R0 - 1
00000ad7: VF := extend:65[#18 + 1] <> extend:65[R0] + 0
00000adc: CF := pad:65[#18 + 1] <> pad:65[R0] - 0x10000000000000000
00000ae0: ZF := #18 + 1 = 0
00000ae4: NF := 63:63[#18 + 1]
00000aea: when ZF goto %00000ae8
00001270: goto %00000b04

00000b04:
00000b07: R0 := 0x11000
00000b0e: R0 := mem[R0 + 0xFE8, el]:u64
00000b15: R0 := mem[R0, el]:u64
00000b1a: R30 := 0xE60
00000b1d: call @fclose with return %00000b1f

00000b1f:
00000b22: R0 := 0x11000
00000b29: R0 := mem[R0 + 0xFC8, el]:u64
00000b30: R0 := mem[R0, el]:u64
00000b35: R30 := 0xE70
00000b38: call @free with return %00000b3a

00000b3a:
00000b3d: R0 := 0x11000
00000b44: R0 := mem[R0 + 0xFE8, el]:u64
00000b4b: mem := mem with [R0, el]:u64 <- 0
00000b50: R0 := 0x11000
00000b57: R0 := mem[R0 + 0xFC8, el]:u64
00000b5e: mem := mem with [R0, el]:u64 <- 0
00000b63: R0 := 0x1000
00000b69: R0 := R0 + 0xE0
00000b6e: R30 := 0xE94
00000b70: call @puts with return %00000ae8

00000ae8:
00000af4: R29 := mem[R31, el]:u64
00000af9: R30 := mem[R31 + 8, el]:u64
00000afd: R31 := R31 + 0x10
00000b02: call R30 with noreturn

00001271: sub deregister_tm_clones(deregister_tm_clones_result)
000012a0: deregister_tm_clones_result :: out u32 = low:32[R0]

0000051b:
0000051e: R0 := 0x12000
00000524: R0 := R0 + 0x10
00000529: R1 := 0x12000
0000052f: R1 := R1 + 0x10
00000535: #1 := ~R0
0000053a: #2 := R1 + ~R0
00000540: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000546: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000054a: ZF := #2 + 1 = 0
0000054e: NF := 63:63[#2 + 1]
00000554: when ZF goto %00000552
00001272: goto %00000ca9

00000ca9:
00000cac: R1 := 0x11000
00000cb3: R1 := mem[R1 + 0xFB8, el]:u64
00000cb8: when R1 = 0 goto %00000552
00001273: goto %00000cbc

00000552:
0000055a: call R30 with noreturn

00000cbc:
00000cc0: R16 := R1
00000cc5: call R16 with noreturn

00001274: sub exit(exit_code)
000012a1: exit_code :: in u32 = low:32[R0]

00000bf9:
00000e29: R16 := 0x11000
00000e30: R17 := mem[R16 + 0xF30, el]:u64
00000e36: R16 := R16 + 0xF30
00000e3b: call R17 with noreturn

00001275: sub fclose(fclose_fp, fclose_result)
000012a2: fclose_fp :: in out u64 = R0
000012a3: fclose_result :: out u32 = low:32[R0]

00000b1b:
00000e6b: R16 := 0x11000
00000e72: R17 := mem[R16 + 0xF48, el]:u64
00000e78: R16 := R16 + 0xF48
00000e7d: call R17 with noreturn

00001276: sub fgets(fgets_s, fgets_size, fgets_stream, fgets_result)
000012a4: fgets_s :: in out u64 = R0
000012a5: fgets_size :: in u32 = low:32[R1]
000012a6: fgets_stream :: in out u64 = R2
000012a7: fgets_result :: out u64 = R0

0000066d:
00000f73: R16 := 0x11000
00000f7a: R17 := mem[R16 + 0xFA8, el]:u64
00000f80: R16 := R16 + 0xFA8
00000f85: call R17 with noreturn

00001277: sub fopen(fopen_path, fopen_mode, fopen_result)
000012a8: fopen_path :: in u64 = R0
000012a9: fopen_mode :: in u64 = R1
000012aa: fopen_result :: out u64 = R0

00000964:
00000e81: R16 := 0x11000
00000e88: R17 := mem[R16 + 0xF50, el]:u64
00000e8e: R16 := R16 + 0xF50
00000e93: call R17 with noreturn

00001278: sub frame_dummy(frame_dummy_result)
000012ab: frame_dummy_result :: out u32 = low:32[R0]

000005f2:
000005f4: call @register_tm_clones with noreturn

00001279: sub free(free_ptr)
000012ac: free_ptr :: in out u64 = R0

00000b36:
00000f31: R16 := 0x11000
00000f38: R17 := mem[R16 + 0xF90, el]:u64
00000f3e: R16 := R16 + 0xF90
00000f43: call R17 with noreturn

0000127a: sub handleInput(handleInput_result)
000012ad: handleInput_result :: out u32 = low:32[R0]

000006ae:
000006b5: #5 := R31 - 0x30
000006bb: mem := mem with [#5, el]:u64 <- R29
000006c1: mem := mem with [#5 + 8, el]:u64 <- R30
000006c5: R31 := #5
000006cb: R29 := R31
000006d3: mem := mem with [R31 + 0x18, el]:u64 <- R0
000006d8: R0 := 0
000006de: R1 := R0 + 0xEE0
000006e5: R0 := mem[R31 + 0x18, el]:u64
000006ea: R30 := 0xBE0
000006ed: call @strcmp with return %000006ef

000006ef:
000006f3: #6 := 31:0[R0] - 1
000006f8: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] + 0
000006fd: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000701: ZF := #6 + 1 = 0
00000705: NF := 31:31[#6 + 1]
0000070b: when ZF <> 1 goto %00000709
0000127b: goto %00000c41

00000709:
00000711: R2 := 5
00000716: R0 := 0
0000071c: R1 := R0 + 0xEE8
00000723: R0 := mem[R31 + 0x18, el]:u64
00000728: R30 := 0xC04
0000072b: call @strncmp with return %0000072d

0000072d:
00000731: #7 := 31:0[R0] - 1
00000736: VF := extend:33[#7 + 1] <> extend:33[31:0[R0]] + 0
0000073b: CF := pad:33[#7 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000073f: ZF := #7 + 1 = 0
00000743: NF := 31:31[#7 + 1]
00000749: when ZF <> 1 goto %00000747
0000127c: goto %00000c1a

00000747:
0000074f: R0 := 0
00000755: R1 := R0 + 0xEF0
0000075c: R0 := mem[R31 + 0x18, el]:u64
00000761: R30 := 0xC34
00000763: call @strcmp with return %00000765

00000765:
00000769: #8 := 31:0[R0] - 1
0000076e: VF := extend:33[#8 + 1] <> extend:33[31:0[R0]] + 0
00000773: CF := pad:33[#8 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000777: ZF := #8 + 1 = 0
0000077b: NF := 31:31[#8 + 1]
00000781: when ZF <> 1 goto %0000077f
0000127d: goto %00000c0f

0000077f:
00000787: R0 := 0
0000078d: R1 := R0 + 0xEF8
00000794: R0 := mem[R31 + 0x18, el]:u64
00000799: R30 := 0xC54
0000079b: call @strcmp with return %0000079d

0000079d:
000007a1: #9 := 31:0[R0] - 1
000007a6: VF := extend:33[#9 + 1] <> extend:33[31:0[R0]] + 0
000007ab: CF := pad:33[#9 + 1] <> pad:33[31:0[R0]] - 0x100000000
000007af: ZF := #9 + 1 = 0
000007b3: NF := 31:31[#9 + 1]
000007b9: when ZF <> 1 goto %000007b7
0000127e: goto %00000c04

000007b7:
000007bf: R0 := 0
000007c5: R1 := R0 + 0xF00
000007cc: R0 := mem[R31 + 0x18, el]:u64
000007d1: R30 := 0xC74
000007d3: call @strcmp with return %000007d5

000007d5:
000007d9: #10 := 31:0[R0] - 1
000007de: VF := extend:33[#10 + 1] <> extend:33[31:0[R0]] + 0
000007e3: CF := pad:33[#10 + 1] <> pad:33[31:0[R0]] - 0x100000000
000007e7: ZF := #10 + 1 = 0
000007eb: NF := 31:31[#10 + 1]
000007f1: when ZF <> 1 goto %000007ef
0000127f: goto %00000bbe

00000bbe:
00000bc1: R0 := 0x11000
00000bc8: R0 := mem[R0 + 0xFE8, el]:u64
00000bcf: R0 := mem[R0, el]:u64
00000bd5: #19 := R0 - 1
00000bda: VF := extend:65[#19 + 1] <> extend:65[R0] + 0
00000bdf: CF := pad:65[#19 + 1] <> pad:65[R0] - 0x10000000000000000
00000be3: ZF := #19 + 1 = 0
00000be7: NF := 63:63[#19 + 1]
00000bed: when ZF goto %00000beb
00001280: goto %00000bfd

00000bfd:
00000c00: R30 := 0xC94
00000c02: call @closeFile with return %00000beb

00000beb:
00000bf3: R0 := 0
00000bf8: R30 := 0xC9C
00000bfb: call @exit with return %000007ef

000007ef:
000007f7: R0 := 0
000007fd: R0 := R0 + 0xF08
00000802: R30 := 0xCA8
00000805: call @puts with return %00000807

00000c04:
00000c07: R30 := 0xC60
00000c09: call @closeFile with return %00000c0b

00000c0b:
00000c0d: goto %00000807

00000c0f:
00000c12: R30 := 0xC40
00000c14: call @saveFile with return %00000c16

00000c16:
00000c18: goto %00000807

00000c1a:
00000c1f: R0 := mem[R31 + 0x18, el]:u64
00000c25: R0 := R0 + 5
00000c2d: mem := mem with [R31 + 0x28, el]:u64 <- R0
00000c34: R0 := mem[R31 + 0x28, el]:u64
00000c39: R30 := 0xC20
00000c3b: call @openFile with return %00000c3d

00000c3d:
00000c3f: goto %00000807

00000c41:
00000c44: R30 := 0xBEC
00000c46: call @printHelp with return %00000c48

00000c48:
00000c4a: goto %00000807

00000807:
0000080e: R29 := mem[R31, el]:u64
00000813: R30 := mem[R31 + 8, el]:u64
00000817: R31 := R31 + 0x30
0000081c: call R30 with noreturn

00001281: sub main(main_argc, main_argv, main_result)
000012ae: main_argc :: in u32 = low:32[R0]
000012af: main_argv :: in out u64 = R1
000012b0: main_result :: out u32 = low:32[R0]

000005f6:
000005fa: #4 := R31 - 0x120
00000600: mem := mem with [#4, el]:u64 <- R29
00000606: mem := mem with [#4 + 8, el]:u64 <- R30
0000060a: R31 := #4
00000610: R29 := R31
00000615: R0 := 0x11000
0000061c: R0 := mem[R0 + 0xFE0, el]:u64
00000623: R1 := mem[R0, el]:u64
0000062b: mem := mem with [R31 + 0x118, el]:u64 <- R1
00000630: R1 := 0
00001282: goto %00000632

00000632:
00000635: R0 := 0
0000063b: R0 := R0 + 0xEC0
00000640: R30 := 0xB7C
00000643: call @printf with return %00000645

00000645:
00000648: R0 := 0x11000
0000064f: R0 := mem[R0 + 0xFD0, el]:u64
00000656: R1 := mem[R0, el]:u64
0000065c: R0 := R31 + 0x18
00000662: R2 := R1
00000667: R1 := 0x100
0000066c: R30 := 0xB98
0000066f: call @fgets with return %00000671

00000671:
00000675: R2 := R31 + 0x18
0000067a: R0 := 0
00000680: R1 := R0 + 0xED8
00000686: R0 := R2
0000068b: R30 := 0xBAC
0000068e: call @strcspn with return %00000690

00000690:
00000694: R1 := R0
0000069a: R0 := R31 + 0x18
000006a2: mem := mem with [R0 + R1] <- 0
000006a8: R0 := R31 + 0x18
000006ad: R30 := 0xBC0
000006b0: call @handleInput with return %00000c4c

00000c4c:
00000c4e: goto %00000632

00001283: sub openFile(openFile_result)
000012b1: openFile_result :: out u32 = low:32[R0]

000008bd:
000008c1: #12 := R31 - 0x20
000008c7: mem := mem with [#12, el]:u64 <- R29
000008cd: mem := mem with [#12 + 8, el]:u64 <- R30
000008d1: R31 := #12
000008d7: R29 := R31
000008df: mem := mem with [R31 + 0x18, el]:u64 <- R0
000008e4: R0 := 0x11000
000008eb: R0 := mem[R0 + 0xFE8, el]:u64
000008f2: R0 := mem[R0, el]:u64
000008f8: #13 := R0 - 1
000008fd: VF := extend:65[#13 + 1] <> extend:65[R0] + 0
00000902: CF := pad:65[#13 + 1] <> pad:65[R0] - 0x10000000000000000
00000906: ZF := #13 + 1 = 0
0000090a: NF := 63:63[#13 + 1]
00000910: when ZF goto %0000090e
00001284: goto %00000bb7

00000bb7:
00000bba: R30 := 0xD34
00000bbc: call @closeFile with return %0000090e

0000090e:
00000918: R0 := mem[R31 + 0x18, el]:u64
0000091d: R30 := 0xD3C
00000920: call @strdup with return %00000922

00000922:
00000926: R1 := R0
0000092b: R0 := 0x11000
00000932: R0 := mem[R0 + 0xFC8, el]:u64
0000093a: mem := mem with [R0, el]:u64 <- R1
0000093f: R0 := 0x11000
00000946: R0 := mem[R0 + 0xFC8, el]:u64
0000094d: R2 := mem[R0, el]:u64
00000952: R0 := 0x1000
00000958: R1 := R0 + 0x60
0000095e: R0 := R2
00000963: R30 := 0xD68
00000966: call @fopen with return %00000968

00000968:
0000096c: R1 := R0
00000971: R0 := 0x11000
00000978: R0 := mem[R0 + 0xFE8, el]:u64
00000980: mem := mem with [R0, el]:u64 <- R1
00000985: R0 := 0x11000
0000098c: R0 := mem[R0 + 0xFE8, el]:u64
00000993: R0 := mem[R0, el]:u64
00000999: #14 := R0 - 1
0000099e: VF := extend:65[#14 + 1] <> extend:65[R0] + 0
000009a3: CF := pad:65[#14 + 1] <> pad:65[R0] - 0x10000000000000000
000009a7: ZF := #14 + 1 = 0
000009ab: NF := 63:63[#14 + 1]
000009b1: when ZF <> 1 goto %000009af
00001285: goto %00000b88

000009af:
000009b7: R0 := 0x11000
000009be: R0 := mem[R0 + 0xFC8, el]:u64
000009c5: R0 := mem[R0, el]:u64
000009cb: R1 := R0
000009d0: R0 := 0x1000
000009d6: R0 := R0 + 0x88
000009db: R30 := 0xDC8
000009dd: call @printf with return %000009df

00000b88:
00000b8b: R0 := 0x11000
00000b92: R0 := mem[R0 + 0xFC8, el]:u64
00000b99: R0 := mem[R0, el]:u64
00000b9f: R1 := R0
00000ba4: R0 := 0x1000
00000baa: R0 := R0 + 0x68
00000baf: R30 := 0xDA8
00000bb1: call @printf with return %00000bb3

00000bb3:
00000bb5: goto %000009df

000009df:
000009e6: R29 := mem[R31, el]:u64
000009eb: R30 := mem[R31 + 8, el]:u64
000009ef: R31 := R31 + 0x20
000009f4: call R30 with noreturn

00001286: sub printHelp(printHelp_result)
000012b2: printHelp_result :: out u32 = low:32[R0]

0000081e:
00000822: #11 := R31 - 0x10
00000828: mem := mem with [#11, el]:u64 <- R29
0000082e: mem := mem with [#11 + 8, el]:u64 <- R30
00000832: R31 := #11
00000838: R29 := R31
0000083d: R0 := 0
00000843: R0 := R0 + 0xF40
00000848: R30 := 0xCC8
0000084a: call @puts with return %0000084c

0000084c:
0000084f: R0 := 0
00000855: R0 := R0 + 0xF50
0000085a: R30 := 0xCD4
0000085c: call @puts with return %0000085e

0000085e:
00000861: R0 := 0
00000867: R0 := R0 + 0xF88
0000086c: R30 := 0xCE0
0000086e: call @puts with return %00000870

00000870:
00000873: R0 := 0
00000879: R0 := R0 + 0xFC0
0000087e: R30 := 0xCEC
00000880: call @puts with return %00000882

00000882:
00000885: R0 := 0x1000
0000088b: R0 := R0
00000890: R30 := 0xCF8
00000892: call @puts with return %00000894

00000894:
00000897: R0 := 0x1000
0000089d: R0 := R0 + 0x30
000008a2: R30 := 0xD04
000008a4: call @puts with return %000008a6

000008a6:
000008ad: R29 := mem[R31, el]:u64
000008b2: R30 := mem[R31 + 8, el]:u64
000008b6: R31 := R31 + 0x10
000008bb: call R30 with noreturn

00001287: sub printf(printf_format, printf_result)
000012b3: printf_format :: in u64 = R0
000012b4: printf_result :: out u32 = low:32[R0]

00000641:
00000f5d: R16 := 0x11000
00000f64: R17 := mem[R16 + 0xFA0, el]:u64
00000f6a: R16 := R16 + 0xFA0
00000f6f: call R17 with noreturn

00001288: sub puts(puts_s, puts_result)
000012b5: puts_s :: in u64 = R0
000012b6: puts_result :: out u32 = low:32[R0]

00000803:
00000f05: R16 := 0x11000
00000f0c: R17 := mem[R16 + 0xF80, el]:u64
00000f12: R16 := R16 + 0xF80
00000f17: call R17 with noreturn

00001289: sub register_tm_clones(register_tm_clones_result)
000012b7: register_tm_clones_result :: out u32 = low:32[R0]

0000055c:
0000055f: R0 := 0x12000
00000565: R0 := R0 + 0x10
0000056a: R1 := 0x12000
00000570: R1 := R1 + 0x10
00000577: R1 := R1 + ~R0 + 1
0000057d: R2 := 0.63:63[R1]
00000584: R1 := R2 + (R1 ~>> 3)
0000058a: R1 := extend:64[63:1[R1]]
00000590: when R1 = 0 goto %0000058e
0000128a: goto %00000c8b

00000c8b:
00000c8e: R2 := 0x11000
00000c95: R2 := mem[R2 + 0xFF8, el]:u64
00000c9a: when R2 = 0 goto %0000058e
0000128b: goto %00000c9e

0000058e:
00000596: call R30 with noreturn

00000c9e:
00000ca2: R16 := R2
00000ca7: call R16 with noreturn

0000128c: sub rewind(rewind_result)
000012b8: rewind_result :: out u32 = low:32[R0]

00000a5b:
00000ead: R16 := 0x11000
00000eb4: R17 := mem[R16 + 0xF60, el]:u64
00000eba: R16 := R16 + 0xF60
00000ebf: call R17 with noreturn

0000128d: sub saveFile(saveFile_result)
000012b9: saveFile_result :: out u32 = low:32[R0]

000009f6:
000009fa: #15 := R31 - 0x10
00000a00: mem := mem with [#15, el]:u64 <- R29
00000a06: mem := mem with [#15 + 8, el]:u64 <- R30
00000a0a: R31 := #15
00000a10: R29 := R31
00000a15: R0 := 0x11000
00000a1c: R0 := mem[R0 + 0xFE8, el]:u64
00000a23: R0 := mem[R0, el]:u64
00000a29: #16 := R0 - 1
00000a2e: VF := extend:65[#16 + 1] <> extend:65[R0] + 0
00000a33: CF := pad:65[#16 + 1] <> pad:65[R0] - 0x10000000000000000
00000a37: ZF := #16 + 1 = 0
00000a3b: NF := 63:63[#16 + 1]
00000a41: when ZF <> 1 goto %00000a3f
0000128e: goto %00000b72

00000a3f:
00000a47: R0 := 0x11000
00000a4e: R0 := mem[R0 + 0xFE8, el]:u64
00000a55: R0 := mem[R0, el]:u64
00000a5a: R30 := 0xE10
00000a5d: call @rewind with return %00000a5f

00000a5f:
00000a62: R0 := 0x11000
00000a69: R0 := mem[R0 + 0xFC8, el]:u64
00000a70: R0 := mem[R0, el]:u64
00000a76: R1 := R0
00000a7b: R0 := 0x1000
00000a81: R0 := R0 + 0xC0
00000a86: R30 := 0xE2C
00000a88: call @printf with return %00000a8a

00000b72:
00000b75: R0 := 0x1000
00000b7b: R0 := R0 + 0xA0
00000b80: R30 := 0xDFC
00000b82: call @puts with return %00000b84

00000b84:
00000b86: goto %00000a8a

00000a8a:
00000a8f: R29 := mem[R31, el]:u64
00000a94: R30 := mem[R31 + 8, el]:u64
00000a98: R31 := R31 + 0x10
00000a9d: call R30 with noreturn

0000128f: sub strcmp(strcmp_s1, strcmp_s2, strcmp_result)
000012ba: strcmp_s1 :: in u64 = R0
000012bb: strcmp_s2 :: in u64 = R1
000012bc: strcmp_result :: out u32 = low:32[R0]

000006eb:
00000f1b: R16 := 0x11000
00000f22: R17 := mem[R16 + 0xF88, el]:u64
00000f28: R16 := R16 + 0xF88
00000f2d: call R17 with noreturn

00001290: sub strcspn(strcspn_s, strcspn_reject, strcspn_result)
000012bd: strcspn_s :: in u64 = R0
000012be: strcspn_reject :: in u64 = R1
000012bf: strcspn_result :: out u64 = R0

0000068c:
00000f47: R16 := 0x11000
00000f4e: R17 := mem[R16 + 0xF98, el]:u64
00000f54: R16 := R16 + 0xF98
00000f59: call R17 with noreturn

00001291: sub strdup(strdup_s, strdup_result)
000012c0: strdup_s :: in u64 = R0
000012c1: strdup_result :: out u64 = R0

0000091e:
00000ec3: R16 := 0x11000
00000eca: R17 := mem[R16 + 0xF68, el]:u64
00000ed0: R16 := R16 + 0xF68
00000ed5: call R17 with noreturn

00001292: sub strncmp(strncmp_s1, strncmp_s2, strncmp_n, strncmp_result)
000012c2: strncmp_s1 :: in u64 = R0
000012c3: strncmp_s2 :: in u64 = R1
000012c4: strncmp_n :: in u64 = R2
000012c5: strncmp_result :: out u32 = low:32[R0]

00000729:
00000e97: R16 := 0x11000
00000e9e: R17 := mem[R16 + 0xF58, el]:u64
00000ea4: R16 := R16 + 0xF58
00000ea9: call R17 with noreturn
