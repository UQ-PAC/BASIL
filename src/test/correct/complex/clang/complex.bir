00001201: program
000011d1: sub __cxa_finalize(__cxa_finalize_result)
00001202: __cxa_finalize_result :: out u32 = low:32[R0]

00000d37:
00000ef5: R16 := 0x12000
00000efc: R17 := mem[R16 + 0x10, el]:u64
00000f02: R16 := R16 + 0x10
00000f07: call R17 with noreturn

000011d2: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00001203: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000005be:
000005c2: #3 := R31 - 0x20
000005c8: mem := mem with [#3, el]:u64 <- R29
000005ce: mem := mem with [#3 + 8, el]:u64 <- R30
000005d2: R31 := #3
000005d8: R29 := R31
000005e0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000005e5: R19 := 0x12000
000005ec: R0 := pad:64[mem[R19 + 0x88]]
000005f3: when 31:0[R0] <> 0 goto %000005f1
000011d3: goto %00000d00

00000d00:
00000d03: R0 := 0x11000
00000d0a: R0 := mem[R0 + 0xFC0, el]:u64
00000d10: when R0 = 0 goto %00000d0e
000011d4: goto %00000d27

00000d27:
00000d2a: R0 := 0x12000
00000d31: R0 := mem[R0 + 0x80, el]:u64
00000d36: R30 := 0xA70
00000d39: call @__cxa_finalize with return %00000d0e

00000d0e:
00000d16: R30 := 0xA74
00000d18: call @deregister_tm_clones with return %00000d1a

00000d1a:
00000d1d: R0 := 1
00000d25: mem := mem with [R19 + 0x88] <- 7:0[R0]
000011d5: goto %000005f1

000005f1:
000005fb: R19 := mem[R31 + 0x10, el]:u64
00000602: R29 := mem[R31, el]:u64
00000607: R30 := mem[R31 + 8, el]:u64
0000060b: R31 := R31 + 0x20
00000610: call R30 with noreturn

000011d6: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00001204: __libc_start_main_main :: in u64 = R0
00001205: __libc_start_main_arg2 :: in u32 = low:32[R1]
00001206: __libc_start_main_arg3 :: in out u64 = R2
00001207: __libc_start_main_auxv :: in out u64 = R3
00001208: __libc_start_main_result :: out u32 = low:32[R0]

00000517:
00000edf: R16 := 0x12000
00000ee6: R17 := mem[R16 + 8, el]:u64
00000eec: R16 := R16 + 8
00000ef1: call R17 with noreturn

000011d7: sub _fini(_fini_result)
00001209: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000011d8: sub _init(_init_result)
0000120a: _init_result :: out u32 = low:32[R0]

0000102b:
00001031: #24 := R31 - 0x10
00001037: mem := mem with [#24, el]:u64 <- R29
0000103d: mem := mem with [#24 + 8, el]:u64 <- R30
00001041: R31 := #24
00001047: R29 := R31
0000104c: R30 := 0x838
0000104e: call @call_weak_fn with return %00001050

00001050:
00001055: R29 := mem[R31, el]:u64
0000105a: R30 := mem[R31 + 8, el]:u64
0000105e: R31 := R31 + 0x10
00001063: call R30 with noreturn

000011d9: sub _start(_start_result)
0000120b: _start_result :: out u32 = low:32[R0]

000004d8:
000004dd: R29 := 0
000004e2: R30 := 0
000004e8: R5 := R0
000004ef: R1 := mem[R31, el]:u64
000004f5: R2 := R31 + 8
000004fb: R6 := R31
00000500: R0 := 0x11000
00000507: R0 := mem[R0 + 0xFD8, el]:u64
0000050c: R3 := 0
00000511: R4 := 0
00000516: R30 := 0x9B0
00000519: call @__libc_start_main with return %0000051b

0000051b:
0000051e: R30 := 0x9B4
00000521: call @abort with return %000011da

000011da:
000011db: call @call_weak_fn with noreturn

000011dc: sub abort()


0000051f:
00000f8f: R16 := 0x12000
00000f96: R17 := mem[R16 + 0x48, el]:u64
00000f9c: R16 := R16 + 0x48
00000fa1: call R17 with noreturn

000011dd: sub call_weak_fn(call_weak_fn_result)
0000120c: call_weak_fn_result :: out u32 = low:32[R0]

00000523:
00000526: R0 := 0x11000
0000052d: R0 := mem[R0 + 0xFD0, el]:u64
00000533: when R0 = 0 goto %00000531
000011de: goto %00000d77

00000531:
00000539: call R30 with noreturn

00000d77:
00000d7a: goto @__gmon_start__

00000d78:
00000f79: R16 := 0x12000
00000f80: R17 := mem[R16 + 0x40, el]:u64
00000f86: R16 := R16 + 0x40
00000f8b: call R17 with noreturn

000011df: sub closeFile(closeFile_result)
0000120d: closeFile_result :: out u32 = low:32[R0]

00000b12:
00000b16: R31 := R31 - 0x20
00000b1c: #19 := R31 + 0x10
00000b22: mem := mem with [#19, el]:u64 <- R29
00000b28: mem := mem with [#19 + 8, el]:u64 <- R30
00000b2e: R29 := R31 + 0x10
00000b33: R8 := 0x12000
00000b3a: R8 := mem[R8 + 0x98, el]:u64
00000b40: #20 := R8 - 1
00000b45: VF := extend:65[#20 + 1] <> extend:65[R8] + 0
00000b4a: CF := pad:65[#20 + 1] <> pad:65[R8] - 0x10000000000000000
00000b4e: ZF := #20 + 1 = 0
00000b52: NF := 63:63[#20 + 1]
00000b56: R8 := #20 + 1
00000b62: when ZF <> 1 goto %00000b5b
00000b63: goto %00000b5e

00000b5e:
00000b5f: R8 := 1
00000b65: goto %00000b61

00000b5b:
00000b5c: R8 := 0
00000b64: goto %00000b61

00000b61:
00000b6b: when 0:0[R8] goto %00000b69
000011e0: goto %00000b89

00000b89:
00000b8c: goto %00000b8a

00000b8a:
00000b90: R8 := 0x12000
00000b98: mem := mem with [R31, el]:u64 <- R8
00000b9f: R0 := mem[R8 + 0x98, el]:u64
00000ba4: R30 := 0xDC8
00000ba7: call @fclose with return %00000ba9

00000ba9:
00000bac: R8 := 0x12000
00000bb4: mem := mem with [R31 + 8, el]:u64 <- R8
00000bbb: R0 := mem[R8 + 0x90, el]:u64
00000bc0: R30 := 0xDD8
00000bc3: call @free with return %00000bc5

00000bc5:
00000bca: R9 := mem[R31, el]:u64
00000bd1: R8 := mem[R31 + 8, el]:u64
00000bd8: mem := mem with [R9 + 0x98, el]:u64 <- 0
00000bdf: mem := mem with [R8 + 0x90, el]:u64 <- 0
00000be4: R0 := 0
00000bea: R0 := R0 + 0xFEC
00000bef: R30 := 0xDF4
00000bf1: call @printf with return %00000bf3

00000bf3:
00000bf5: goto %00000b69

00000b69:
00000b72: #21 := R31 + 0x10
00000b77: R29 := mem[#21, el]:u64
00000b7c: R30 := mem[#21 + 8, el]:u64
00000b82: R31 := R31 + 0x20
00000b87: call R30 with noreturn

000011e1: sub deregister_tm_clones(deregister_tm_clones_result)
0000120e: deregister_tm_clones_result :: out u32 = low:32[R0]

0000053f:
00000542: R0 := 0x12000
00000548: R0 := R0 + 0x88
0000054d: R1 := 0x12000
00000553: R1 := R1 + 0x88
00000559: #1 := ~R0
0000055e: #2 := R1 + ~R0
00000564: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000056a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000056e: ZF := #2 + 1 = 0
00000572: NF := 63:63[#2 + 1]
00000578: when ZF goto %00000576
000011e2: goto %00000d59

00000d59:
00000d5c: R1 := 0x11000
00000d63: R1 := mem[R1 + 0xFB8, el]:u64
00000d68: when R1 = 0 goto %00000576
000011e3: goto %00000d6c

00000576:
0000057e: call R30 with noreturn

00000d6c:
00000d70: R16 := R1
00000d75: call R16 with noreturn

000011e4: sub exit(exit_code)
0000120f: exit_code :: in u32 = low:32[R0]

00000c91:
00000ec9: R16 := 0x12000
00000ed0: R17 := mem[R16, el]:u64
00000ed6: R16 := R16
00000edb: call R17 with noreturn

000011e5: sub fclose(fclose_fp, fclose_result)
00001210: fclose_fp :: in out u64 = R0
00001211: fclose_result :: out u32 = low:32[R0]

00000ba5:
00000f0b: R16 := 0x12000
00000f12: R17 := mem[R16 + 0x18, el]:u64
00000f18: R16 := R16 + 0x18
00000f1d: call R17 with noreturn

000011e6: sub fgets(fgets_s, fgets_size, fgets_stream, fgets_result)
00001212: fgets_s :: in out u64 = R0
00001213: fgets_size :: in u32 = low:32[R1]
00001214: fgets_stream :: in out u64 = R2
00001215: fgets_result :: out u64 = R0

00000688:
00000ffd: R16 := 0x12000
00001004: R17 := mem[R16 + 0x70, el]:u64
0000100a: R16 := R16 + 0x70
0000100f: call R17 with noreturn

000011e7: sub fopen(fopen_path, fopen_mode, fopen_result)
00001216: fopen_path :: in u64 = R0
00001217: fopen_mode :: in u64 = R1
00001218: fopen_result :: out u64 = R0

00000949:
00000f21: R16 := 0x12000
00000f28: R17 := mem[R16 + 0x20, el]:u64
00000f2e: R16 := R16 + 0x20
00000f33: call R17 with noreturn

000011e8: sub frame_dummy(frame_dummy_result)
00001219: frame_dummy_result :: out u32 = low:32[R0]

00000616:
00000618: call @register_tm_clones with noreturn

000011e9: sub free(free_ptr)
0000121a: free_ptr :: in out u64 = R0

00000bc1:
00000fbb: R16 := 0x12000
00000fc2: R17 := mem[R16 + 0x58, el]:u64
00000fc8: R16 := R16 + 0x58
00000fcd: call R17 with noreturn

000011ea: sub handleInput(handleInput_result)
0000121b: handleInput_result :: out u32 = low:32[R0]

000006cb:
000006d2: R31 := R31 - 0x20
000006d8: #5 := R31 + 0x10
000006de: mem := mem with [#5, el]:u64 <- R29
000006e4: mem := mem with [#5 + 8, el]:u64 <- R30
000006ea: R29 := R31 + 0x10
000006f2: mem := mem with [R31 + 8, el]:u64 <- R0
000006f9: R0 := mem[R31 + 8, el]:u64
000006fe: R1 := 0
00000704: R1 := R1 + 0xE2E
00000709: R30 := 0xB20
0000070c: call @strcmp with return %0000070e

0000070e:
00000712: #6 := 31:0[R0] - 1
00000717: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] + 0
0000071c: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000720: ZF := #6 + 1 = 0
00000724: NF := 31:31[#6 + 1]
00000728: R8 := pad:64[#6 + 1]
00000734: when ZF goto %0000072d
00000735: goto %00000730

00000730:
00000731: R8 := 1
00000737: goto %00000733

0000072d:
0000072e: R8 := 0
00000736: goto %00000733

00000733:
0000073d: when 0:0[R8] goto %0000073b
000011eb: goto %00000ced

0000073b:
00000745: R0 := mem[R31 + 8, el]:u64
0000074a: R1 := 0
00000750: R1 := R1 + 0xE33
00000755: R2 := 5
0000075a: R30 := 0xB4C
0000075d: call @strncmp with return %0000075f

0000075f:
00000763: #7 := 31:0[R0] - 1
00000768: VF := extend:33[#7 + 1] <> extend:33[31:0[R0]] + 0
0000076d: CF := pad:33[#7 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000771: ZF := #7 + 1 = 0
00000775: NF := 31:31[#7 + 1]
00000779: R8 := pad:64[#7 + 1]
00000785: when ZF goto %0000077e
00000786: goto %00000781

00000781:
00000782: R8 := 1
00000788: goto %00000784

0000077e:
0000077f: R8 := 0
00000787: goto %00000784

00000784:
0000078e: when 0:0[R8] goto %0000078c
000011ec: goto %00000cc2

0000078c:
00000796: R0 := mem[R31 + 8, el]:u64
0000079b: R1 := 0
000007a1: R1 := R1 + 0xE39
000007a6: R30 := 0xB84
000007a8: call @strcmp with return %000007aa

000007aa:
000007ae: #8 := 31:0[R0] - 1
000007b3: VF := extend:33[#8 + 1] <> extend:33[31:0[R0]] + 0
000007b8: CF := pad:33[#8 + 1] <> pad:33[31:0[R0]] - 0x100000000
000007bc: ZF := #8 + 1 = 0
000007c0: NF := 31:31[#8 + 1]
000007c4: R8 := pad:64[#8 + 1]
000007d0: when ZF goto %000007c9
000007d1: goto %000007cc

000007cc:
000007cd: R8 := 1
000007d3: goto %000007cf

000007c9:
000007ca: R8 := 0
000007d2: goto %000007cf

000007cf:
000007d9: when 0:0[R8] goto %000007d7
000011ed: goto %00000cb3

000007d7:
000007e1: R0 := mem[R31 + 8, el]:u64
000007e6: R1 := 0
000007ec: R1 := R1 + 0xE3E
000007f1: R30 := 0xBAC
000007f3: call @strcmp with return %000007f5

000007f5:
000007f9: #9 := 31:0[R0] - 1
000007fe: VF := extend:33[#9 + 1] <> extend:33[31:0[R0]] + 0
00000803: CF := pad:33[#9 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000807: ZF := #9 + 1 = 0
0000080b: NF := 31:31[#9 + 1]
0000080f: R8 := pad:64[#9 + 1]
0000081b: when ZF goto %00000814
0000081c: goto %00000817

00000817:
00000818: R8 := 1
0000081e: goto %0000081a

00000814:
00000815: R8 := 0
0000081d: goto %0000081a

0000081a:
00000824: when 0:0[R8] goto %00000822
000011ee: goto %00000ca4

00000822:
0000082c: R0 := mem[R31 + 8, el]:u64
00000831: R1 := 0
00000837: R1 := R1 + 0xE44
0000083c: R30 := 0xBD4
0000083e: call @strcmp with return %00000840

00000840:
00000844: #10 := 31:0[R0] - 1
00000849: VF := extend:33[#10 + 1] <> extend:33[31:0[R0]] + 0
0000084e: CF := pad:33[#10 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000852: ZF := #10 + 1 = 0
00000856: NF := 31:31[#10 + 1]
0000085a: R8 := pad:64[#10 + 1]
00000866: when ZF goto %0000085f
00000867: goto %00000862

00000862:
00000863: R8 := 1
00000869: goto %00000865

0000085f:
00000860: R8 := 0
00000868: goto %00000865

00000865:
0000086f: when 0:0[R8] goto %0000086d
000011ef: goto %00000c46

00000c46:
00000c49: goto %00000c47

00000c47:
00000c4d: R8 := 0x12000
00000c54: R8 := mem[R8 + 0x98, el]:u64
00000c5a: #22 := R8 - 1
00000c5f: VF := extend:65[#22 + 1] <> extend:65[R8] + 0
00000c64: CF := pad:65[#22 + 1] <> pad:65[R8] - 0x10000000000000000
00000c68: ZF := #22 + 1 = 0
00000c6c: NF := 63:63[#22 + 1]
00000c70: R8 := #22 + 1
00000c7c: when ZF <> 1 goto %00000c75
00000c7d: goto %00000c78

00000c78:
00000c79: R8 := 1
00000c7f: goto %00000c7b

00000c75:
00000c76: R8 := 0
00000c7e: goto %00000c7b

00000c7b:
00000c85: when 0:0[R8] goto %00000c83
000011f0: goto %00000c95

00000c95:
00000c98: goto %00000c96

00000c96:
00000c9c: R30 := 0xC00
00000c9e: call @closeFile with return %00000ca0

00000ca0:
00000ca2: goto %00000c83

00000c83:
00000c8b: R0 := 0
00000c90: R30 := 0xC0C
00000c93: call @exit with return %0000086d

0000086d:
00000875: R0 := 0
0000087b: R0 := R0 + 0xE49
00000880: R30 := 0xC18
00000882: call @printf with return %00000884

00000884:
00000887: goto %00000885

00000885:
0000088b: goto %00000889

00000ca4:
00000ca7: goto %00000ca5

00000ca5:
00000cab: R30 := 0xBC0
00000cad: call @closeFile with return %00000caf

00000caf:
00000cb1: goto %00000889

00000889:
0000088f: goto %0000088d

00000cb3:
00000cb6: goto %00000cb4

00000cb4:
00000cba: R30 := 0xB98
00000cbc: call @saveFile with return %00000cbe

00000cbe:
00000cc0: goto %0000088d

0000088d:
00000893: goto %00000891

00000cc2:
00000cc5: goto %00000cc3

00000cc3:
00000ccb: R8 := mem[R31 + 8, el]:u64
00000cd1: R8 := R8 + 5
00000cd9: mem := mem with [R31, el]:u64 <- R8
00000ce0: R0 := mem[R31, el]:u64
00000ce5: R30 := 0xB70
00000ce7: call @openFile with return %00000ce9

00000ce9:
00000ceb: goto %00000891

00000891:
00000897: goto %00000895

00000ced:
00000cf0: goto %00000cee

00000cee:
00000cf4: R30 := 0xB34
00000cf6: call @printHelp with return %00000cf8

00000cf8:
00000cfa: goto %00000895

00000895:
0000089c: #11 := R31 + 0x10
000008a1: R29 := mem[#11, el]:u64
000008a6: R30 := mem[#11 + 8, el]:u64
000008ac: R31 := R31 + 0x20
000008b1: call R30 with noreturn

000011f1: sub main(main_argc, main_argv, main_result)
0000121c: main_argc :: in u32 = low:32[R0]
0000121d: main_argv :: in out u64 = R1
0000121e: main_result :: out u32 = low:32[R0]

0000061a:
0000061e: R31 := R31 - 0x130
00000624: #4 := R31 + 0x110
0000062a: mem := mem with [#4, el]:u64 <- R29
00000630: mem := mem with [#4 + 8, el]:u64 <- R30
00000638: mem := mem with [R31 + 0x120, el]:u64 <- R28
0000063e: R29 := R31 + 0x110
00000645: mem := mem with [R29 - 4, el]:u32 <- 0
0000064a: goto %00000648

00000648:
0000064e: R0 := 0
00000654: R0 := R0 + 0xE1C
00000659: R30 := 0xAB8
0000065c: call @printf with return %0000065e

0000065e:
00000661: R8 := 0x11000
00000668: R8 := mem[R8 + 0xFC8, el]:u64
0000066f: R2 := mem[R8, el]:u64
00000675: R0 := R31 + 0xC
0000067d: mem := mem with [R31, el]:u64 <- R0
00000682: R1 := 0x100
00000687: R30 := 0xAD4
0000068a: call @fgets with return %0000068c

0000068c:
00000691: R0 := mem[R31, el]:u64
00000696: R1 := 0
0000069c: R1 := R1 + 0xFB3
000006a1: R30 := 0xAE4
000006a4: call @strcspn with return %000006a6

000006a6:
000006aa: R9 := R0
000006b1: R0 := mem[R31, el]:u64
000006b7: R8 := R0
000006be: R8 := R8 + R9
000006c5: mem := mem with [R8] <- 0
000006ca: R30 := 0xAFC
000006cd: call @handleInput with return %00000cfc

00000cfc:
00000cfe: goto %00000648

000011f2: sub openFile(openFile_result)
0000121f: openFile_result :: out u32 = low:32[R0]

000008b3:
000008b7: R31 := R31 - 0x20
000008bd: #12 := R31 + 0x10
000008c3: mem := mem with [#12, el]:u64 <- R29
000008c9: mem := mem with [#12 + 8, el]:u64 <- R30
000008cf: R29 := R31 + 0x10
000008d7: mem := mem with [R31 + 8, el]:u64 <- R0
000008dc: R8 := 0x12000
000008e3: R8 := mem[R8 + 0x98, el]:u64
000008e9: #13 := R8 - 1
000008ee: VF := extend:65[#13 + 1] <> extend:65[R8] + 0
000008f3: CF := pad:65[#13 + 1] <> pad:65[R8] - 0x10000000000000000
000008f7: ZF := #13 + 1 = 0
000008fb: NF := 63:63[#13 + 1]
000008ff: R8 := #13 + 1
0000090b: when ZF <> 1 goto %00000904
0000090c: goto %00000907

00000907:
00000908: R8 := 1
0000090e: goto %0000090a

00000904:
00000905: R8 := 0
0000090d: goto %0000090a

0000090a:
00000914: when 0:0[R8] goto %00000912
000011f3: goto %00000c37

00000c37:
00000c3a: goto %00000c38

00000c38:
00000c3e: R30 := 0xC64
00000c40: call @closeFile with return %00000c42

00000c42:
00000c44: goto %00000912

00000912:
0000091c: R0 := mem[R31 + 8, el]:u64
00000921: R30 := 0xC70
00000924: call @strdup with return %00000926

00000926:
00000929: R8 := 0x12000
00000931: mem := mem with [R8 + 0x90, el]:u64 <- R0
00000938: R0 := mem[R8 + 0x90, el]:u64
0000093d: R1 := 0
00000943: R1 := R1 + 0xF86
00000948: R30 := 0xC88
0000094b: call @fopen with return %0000094d

0000094d:
00000950: R8 := 0x12000
00000958: mem := mem with [R8 + 0x98, el]:u64 <- R0
0000095f: R8 := mem[R8 + 0x98, el]:u64
00000965: #14 := R8 - 1
0000096a: VF := extend:65[#14 + 1] <> extend:65[R8] + 0
0000096f: CF := pad:65[#14 + 1] <> pad:65[R8] - 0x10000000000000000
00000973: ZF := #14 + 1 = 0
00000977: NF := 63:63[#14 + 1]
0000097b: R8 := #14 + 1
00000987: when ZF goto %00000980
00000988: goto %00000983

00000983:
00000984: R8 := 1
0000098a: goto %00000986

00000980:
00000981: R8 := 0
00000989: goto %00000986

00000986:
00000990: when 0:0[R8] goto %0000098e
000011f4: goto %00000c11

0000098e:
00000996: R8 := 0x12000
0000099d: R1 := mem[R8 + 0x90, el]:u64
000009a2: R0 := 0
000009a8: R0 := R0 + 0xFA3
000009ad: R30 := 0xCD0
000009af: call @printf with return %000009b1

000009b1:
000009b4: goto %000009b2

00000c11:
00000c14: goto %00000c12

00000c12:
00000c18: R8 := 0x12000
00000c1f: R1 := mem[R8 + 0x90, el]:u64
00000c24: R0 := 0
00000c2a: R0 := R0 + 0xF89
00000c2f: R30 := 0xCB8
00000c31: call @printf with return %00000c33

00000c33:
00000c35: goto %000009b2

000009b2:
000009b9: #15 := R31 + 0x10
000009be: R29 := mem[#15, el]:u64
000009c3: R30 := mem[#15 + 8, el]:u64
000009c9: R31 := R31 + 0x20
000009ce: call R30 with noreturn

000011f5: sub printHelp(printHelp_result)
00001220: printHelp_result :: out u32 = low:32[R0]

000009d0:
000009d4: #16 := R31 - 0x10
000009da: mem := mem with [#16, el]:u64 <- R29
000009e0: mem := mem with [#16 + 8, el]:u64 <- R30
000009e4: R31 := #16
000009ea: R29 := R31
000009ef: R0 := 0
000009f5: R0 := R0 + 0xE7F
000009fa: R30 := 0xCF4
000009fc: call @printf with return %000009fe

000009fe:
00000a01: R0 := 0
00000a07: R0 := R0 + 0xE8A
00000a0c: R30 := 0xD00
00000a0e: call @printf with return %00000a10

00000a10:
00000a13: R0 := 0
00000a19: R0 := R0 + 0xEBE
00000a1e: R30 := 0xD0C
00000a20: call @printf with return %00000a22

00000a22:
00000a25: R0 := 0
00000a2b: R0 := R0 + 0xEF0
00000a30: R30 := 0xD18
00000a32: call @printf with return %00000a34

00000a34:
00000a37: R0 := 0
00000a3d: R0 := R0 + 0xF2B
00000a42: R30 := 0xD24
00000a44: call @printf with return %00000a46

00000a46:
00000a49: R0 := 0
00000a4f: R0 := R0 + 0xF5C
00000a54: R30 := 0xD30
00000a56: call @printf with return %00000a58

00000a58:
00000a5d: R29 := mem[R31, el]:u64
00000a62: R30 := mem[R31 + 8, el]:u64
00000a66: R31 := R31 + 0x10
00000a6b: call R30 with noreturn

000011f6: sub printf(printf_format, printf_result)
00001221: printf_format :: in u64 = R0
00001222: printf_result :: out u32 = low:32[R0]

0000065a:
00000fe7: R16 := 0x12000
00000fee: R17 := mem[R16 + 0x68, el]:u64
00000ff4: R16 := R16 + 0x68
00000ff9: call R17 with noreturn

000011f7: sub register_tm_clones(register_tm_clones_result)
00001223: register_tm_clones_result :: out u32 = low:32[R0]

00000580:
00000583: R0 := 0x12000
00000589: R0 := R0 + 0x88
0000058e: R1 := 0x12000
00000594: R1 := R1 + 0x88
0000059b: R1 := R1 + ~R0 + 1
000005a1: R2 := 0.63:63[R1]
000005a8: R1 := R2 + (R1 ~>> 3)
000005ae: R1 := extend:64[63:1[R1]]
000005b4: when R1 = 0 goto %000005b2
000011f8: goto %00000d3b

00000d3b:
00000d3e: R2 := 0x11000
00000d45: R2 := mem[R2 + 0xFE0, el]:u64
00000d4a: when R2 = 0 goto %000005b2
000011f9: goto %00000d4e

000005b2:
000005ba: call R30 with noreturn

00000d4e:
00000d52: R16 := R2
00000d57: call R16 with noreturn

000011fa: sub rewind(rewind_result)
00001224: rewind_result :: out u32 = low:32[R0]

00000ad7:
00000f4d: R16 := 0x12000
00000f54: R17 := mem[R16 + 0x30, el]:u64
00000f5a: R16 := R16 + 0x30
00000f5f: call R17 with noreturn

000011fb: sub saveFile(saveFile_result)
00001225: saveFile_result :: out u32 = low:32[R0]

00000a6d:
00000a71: #17 := R31 - 0x10
00000a77: mem := mem with [#17, el]:u64 <- R29
00000a7d: mem := mem with [#17 + 8, el]:u64 <- R30
00000a81: R31 := #17
00000a87: R29 := R31
00000a8c: R8 := 0x12000
00000a93: R8 := mem[R8 + 0x98, el]:u64
00000a99: #18 := R8 - 1
00000a9e: VF := extend:65[#18 + 1] <> extend:65[R8] + 0
00000aa3: CF := pad:65[#18 + 1] <> pad:65[R8] - 0x10000000000000000
00000aa7: ZF := #18 + 1 = 0
00000aab: NF := 63:63[#18 + 1]
00000aaf: R8 := #18 + 1
00000abb: when ZF goto %00000ab4
00000abc: goto %00000ab7

00000ab7:
00000ab8: R8 := 1
00000abe: goto %00000aba

00000ab4:
00000ab5: R8 := 0
00000abd: goto %00000aba

00000aba:
00000ac4: when 0:0[R8] goto %00000ac2
000011fc: goto %00000bf7

00000ac2:
00000aca: R8 := 0x12000
00000ad1: R0 := mem[R8 + 0x98, el]:u64
00000ad6: R30 := 0xD74
00000ad9: call @rewind with return %00000adb

00000adb:
00000ade: R8 := 0x12000
00000ae5: R1 := mem[R8 + 0x90, el]:u64
00000aea: R0 := 0
00000af0: R0 := R0 + 0xFD0
00000af5: R30 := 0xD88
00000af7: call @printf with return %00000af9

00000af9:
00000afc: goto %00000afa

00000bf7:
00000bfa: goto %00000bf8

00000bf8:
00000bfe: R0 := 0
00000c04: R0 := R0 + 0xFB5
00000c09: R30 := 0xD64
00000c0b: call @printf with return %00000c0d

00000c0d:
00000c0f: goto %00000afa

00000afa:
00000b02: R29 := mem[R31, el]:u64
00000b07: R30 := mem[R31 + 8, el]:u64
00000b0b: R31 := R31 + 0x10
00000b10: call R30 with noreturn

000011fd: sub strcmp(strcmp_s1, strcmp_s2, strcmp_result)
00001226: strcmp_s1 :: in u64 = R0
00001227: strcmp_s2 :: in u64 = R1
00001228: strcmp_result :: out u32 = low:32[R0]

0000070a:
00000fa5: R16 := 0x12000
00000fac: R17 := mem[R16 + 0x50, el]:u64
00000fb2: R16 := R16 + 0x50
00000fb7: call R17 with noreturn

000011fe: sub strcspn(strcspn_s, strcspn_reject, strcspn_result)
00001229: strcspn_s :: in u64 = R0
0000122a: strcspn_reject :: in u64 = R1
0000122b: strcspn_result :: out u64 = R0

000006a2:
00000fd1: R16 := 0x12000
00000fd8: R17 := mem[R16 + 0x60, el]:u64
00000fde: R16 := R16 + 0x60
00000fe3: call R17 with noreturn

000011ff: sub strdup(strdup_s, strdup_result)
0000122c: strdup_s :: in u64 = R0
0000122d: strdup_result :: out u64 = R0

00000922:
00000f63: R16 := 0x12000
00000f6a: R17 := mem[R16 + 0x38, el]:u64
00000f70: R16 := R16 + 0x38
00000f75: call R17 with noreturn

00001200: sub strncmp(strncmp_s1, strncmp_s2, strncmp_n, strncmp_result)
0000122e: strncmp_s1 :: in u64 = R0
0000122f: strncmp_s2 :: in u64 = R1
00001230: strncmp_n :: in u64 = R2
00001231: strncmp_result :: out u32 = low:32[R0]

0000075b:
00000f37: R16 := 0x12000
00000f3e: R17 := mem[R16 + 0x28, el]:u64
00000f44: R16 := R16 + 0x28
00000f49: call R17 with noreturn
