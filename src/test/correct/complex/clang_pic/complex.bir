000013c2: program
00001392: sub __cxa_finalize(__cxa_finalize_result)
000013c3: __cxa_finalize_result :: out u32 = low:32[R0]

00000dba:
00000f78: R16 := 0x12000
00000f7f: R17 := mem[R16 + 0x10, el]:u64
00000f85: R16 := R16 + 0x10
00000f8a: call R17 with noreturn

00001393: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000013c4: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000005ea:
000005ee: #3 := R31 - 0x20
000005f4: mem := mem with [#3, el]:u64 <- R29
000005fa: mem := mem with [#3 + 8, el]:u64 <- R30
000005fe: R31 := #3
00000604: R29 := R31
0000060c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000611: R19 := 0x12000
00000618: R0 := pad:64[mem[R19 + 0x88]]
0000061f: when 31:0[R0] <> 0 goto %0000061d
00001394: goto %00000d83

00000d83:
00000d86: R0 := 0x11000
00000d8d: R0 := mem[R0 + 0xFB0, el]:u64
00000d93: when R0 = 0 goto %00000d91
00001395: goto %00000daa

00000daa:
00000dad: R0 := 0x12000
00000db4: R0 := mem[R0 + 0x80, el]:u64
00000db9: R30 := 0xA70
00000dbc: call @__cxa_finalize with return %00000d91

00000d91:
00000d99: R30 := 0xA74
00000d9b: call @deregister_tm_clones with return %00000d9d

00000d9d:
00000da0: R0 := 1
00000da8: mem := mem with [R19 + 0x88] <- 7:0[R0]
00001396: goto %0000061d

0000061d:
00000627: R19 := mem[R31 + 0x10, el]:u64
0000062e: R29 := mem[R31, el]:u64
00000633: R30 := mem[R31 + 8, el]:u64
00000637: R31 := R31 + 0x20
0000063c: call R30 with noreturn

00001397: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000013c5: __libc_start_main_main :: in u64 = R0
000013c6: __libc_start_main_arg2 :: in u32 = low:32[R1]
000013c7: __libc_start_main_arg3 :: in out u64 = R2
000013c8: __libc_start_main_auxv :: in out u64 = R3
000013c9: __libc_start_main_result :: out u32 = low:32[R0]

00000543:
00000f62: R16 := 0x12000
00000f69: R17 := mem[R16 + 8, el]:u64
00000f6f: R16 := R16 + 8
00000f74: call R17 with noreturn

00001398: sub _fini(_fini_result)
000013ca: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00001399: sub _init(_init_result)
000013cb: _init_result :: out u32 = low:32[R0]

000011e1:
000011e7: #24 := R31 - 0x10
000011ed: mem := mem with [#24, el]:u64 <- R29
000011f3: mem := mem with [#24 + 8, el]:u64 <- R30
000011f7: R31 := #24
000011fd: R29 := R31
00001202: R30 := 0x868
00001204: call @call_weak_fn with return %00001206

00001206:
0000120b: R29 := mem[R31, el]:u64
00001210: R30 := mem[R31 + 8, el]:u64
00001214: R31 := R31 + 0x10
00001219: call R30 with noreturn

0000139a: sub _start(_start_result)
000013cc: _start_result :: out u32 = low:32[R0]

00000504:
00000509: R29 := 0
0000050e: R30 := 0
00000514: R5 := R0
0000051b: R1 := mem[R31, el]:u64
00000521: R2 := R31 + 8
00000527: R6 := R31
0000052c: R0 := 0x11000
00000533: R0 := mem[R0 + 0xFD8, el]:u64
00000538: R3 := 0
0000053d: R4 := 0
00000542: R30 := 0x9B0
00000545: call @__libc_start_main with return %00000547

00000547:
0000054a: R30 := 0x9B4
0000054d: call @abort with return %0000139b

0000139b:
0000139c: call @call_weak_fn with noreturn

0000139d: sub abort()


0000054b:
00001012: R16 := 0x12000
00001019: R17 := mem[R16 + 0x48, el]:u64
0000101f: R16 := R16 + 0x48
00001024: call R17 with noreturn

0000139e: sub call_weak_fn(call_weak_fn_result)
000013cd: call_weak_fn_result :: out u32 = low:32[R0]

0000054f:
00000552: R0 := 0x11000
00000559: R0 := mem[R0 + 0xFC8, el]:u64
0000055f: when R0 = 0 goto %0000055d
0000139f: goto %00000dfa

0000055d:
00000565: call R30 with noreturn

00000dfa:
00000dfd: goto @__gmon_start__

00000dfb:
00000ffc: R16 := 0x12000
00001003: R17 := mem[R16 + 0x40, el]:u64
00001009: R16 := R16 + 0x40
0000100e: call R17 with noreturn

000013a0: sub closeFile(closeFile_result)
000013ce: closeFile_result :: out u32 = low:32[R0]

00000b7c:
00000b80: R31 := R31 - 0x20
00000b86: #19 := R31 + 0x10
00000b8c: mem := mem with [#19, el]:u64 <- R29
00000b92: mem := mem with [#19 + 8, el]:u64 <- R30
00000b98: R29 := R31 + 0x10
00000b9d: R8 := 0x11000
00000ba4: R8 := mem[R8 + 0xFD0, el]:u64
00000bac: mem := mem with [R31 + 8, el]:u64 <- R8
00000bb3: R8 := mem[R8, el]:u64
00000bb9: #20 := R8 - 1
00000bbe: VF := extend:65[#20 + 1] <> extend:65[R8] + 0
00000bc3: CF := pad:65[#20 + 1] <> pad:65[R8] - 0x10000000000000000
00000bc7: ZF := #20 + 1 = 0
00000bcb: NF := 63:63[#20 + 1]
00000bcf: R8 := #20 + 1
00000bdb: when ZF <> 1 goto %00000bd4
00000bdc: goto %00000bd7

00000bd7:
00000bd8: R8 := 1
00000bde: goto %00000bda

00000bd4:
00000bd5: R8 := 0
00000bdd: goto %00000bda

00000bda:
00000be4: when 0:0[R8] goto %00000be2
000013a1: goto %00000c02

00000c02:
00000c05: goto %00000c03

00000c03:
00000c0b: R8 := mem[R31 + 8, el]:u64
00000c12: R0 := mem[R8, el]:u64
00000c17: R30 := 0xDF0
00000c1a: call @fclose with return %00000c1c

00000c1c:
00000c1f: R8 := 0x11000
00000c26: R8 := mem[R8 + 0xFB8, el]:u64
00000c2e: mem := mem with [R31, el]:u64 <- R8
00000c35: R0 := mem[R8, el]:u64
00000c3a: R30 := 0xE04
00000c3d: call @free with return %00000c3f

00000c3f:
00000c44: R9 := mem[R31 + 8, el]:u64
00000c4b: R8 := mem[R31, el]:u64
00000c52: mem := mem with [R9, el]:u64 <- 0
00000c59: mem := mem with [R8, el]:u64 <- 0
00000c5e: R0 := 0x1000
00000c64: R0 := R0 + 0x18
00000c69: R30 := 0xE20
00000c6b: call @printf with return %00000c6d

00000c6d:
00000c6f: goto %00000be2

00000be2:
00000beb: #21 := R31 + 0x10
00000bf0: R29 := mem[#21, el]:u64
00000bf5: R30 := mem[#21 + 8, el]:u64
00000bfb: R31 := R31 + 0x20
00000c00: call R30 with noreturn

000013a2: sub deregister_tm_clones(deregister_tm_clones_result)
000013cf: deregister_tm_clones_result :: out u32 = low:32[R0]

0000056b:
0000056e: R0 := 0x12000
00000574: R0 := R0 + 0x88
00000579: R1 := 0x12000
0000057f: R1 := R1 + 0x88
00000585: #1 := ~R0
0000058a: #2 := R1 + ~R0
00000590: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000596: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000059a: ZF := #2 + 1 = 0
0000059e: NF := 63:63[#2 + 1]
000005a4: when ZF goto %000005a2
000013a3: goto %00000ddc

00000ddc:
00000ddf: R1 := 0x11000
00000de6: R1 := mem[R1 + 0xFA8, el]:u64
00000deb: when R1 = 0 goto %000005a2
000013a4: goto %00000def

000005a2:
000005aa: call R30 with noreturn

00000def:
00000df3: R16 := R1
00000df8: call R16 with noreturn

000013a5: sub exit(exit_code)
000013d0: exit_code :: in u32 = low:32[R0]

00000d14:
00000f4c: R16 := 0x12000
00000f53: R17 := mem[R16, el]:u64
00000f59: R16 := R16
00000f5e: call R17 with noreturn

000013a6: sub fclose(fclose_fp, fclose_result)
000013d1: fclose_fp :: in out u64 = R0
000013d2: fclose_result :: out u32 = low:32[R0]

00000c18:
00000f8e: R16 := 0x12000
00000f95: R17 := mem[R16 + 0x18, el]:u64
00000f9b: R16 := R16 + 0x18
00000fa0: call R17 with noreturn

000013a7: sub fgets(fgets_s, fgets_size, fgets_stream, fgets_result)
000013d3: fgets_s :: in out u64 = R0
000013d4: fgets_size :: in u32 = low:32[R1]
000013d5: fgets_stream :: in out u64 = R2
000013d6: fgets_result :: out u64 = R0

000006b4:
00001080: R16 := 0x12000
00001087: R17 := mem[R16 + 0x70, el]:u64
0000108d: R16 := R16 + 0x70
00001092: call R17 with noreturn

000013a8: sub fopen(fopen_path, fopen_mode, fopen_result)
000013d7: fopen_path :: in u64 = R0
000013d8: fopen_mode :: in u64 = R1
000013d9: fopen_result :: out u64 = R0

0000099a:
00000fa4: R16 := 0x12000
00000fab: R17 := mem[R16 + 0x20, el]:u64
00000fb1: R16 := R16 + 0x20
00000fb6: call R17 with noreturn

000013a9: sub frame_dummy(frame_dummy_result)
000013da: frame_dummy_result :: out u32 = low:32[R0]

00000642:
00000644: call @register_tm_clones with noreturn

000013aa: sub free(free_ptr)
000013db: free_ptr :: in out u64 = R0

00000c3b:
0000103e: R16 := 0x12000
00001045: R17 := mem[R16 + 0x58, el]:u64
0000104b: R16 := R16 + 0x58
00001050: call R17 with noreturn

000013ab: sub handleInput(handleInput_result)
000013dc: handleInput_result :: out u32 = low:32[R0]

000006f7:
000006fe: R31 := R31 - 0x20
00000704: #5 := R31 + 0x10
0000070a: mem := mem with [#5, el]:u64 <- R29
00000710: mem := mem with [#5 + 8, el]:u64 <- R30
00000716: R29 := R31 + 0x10
0000071e: mem := mem with [R31 + 8, el]:u64 <- R0
00000725: R0 := mem[R31 + 8, el]:u64
0000072a: R1 := 0
00000730: R1 := R1 + 0xE5A
00000735: R30 := 0xB20
00000738: call @strcmp with return %0000073a

0000073a:
0000073e: #6 := 31:0[R0] - 1
00000743: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] + 0
00000748: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000074c: ZF := #6 + 1 = 0
00000750: NF := 31:31[#6 + 1]
00000754: R8 := pad:64[#6 + 1]
00000760: when ZF goto %00000759
00000761: goto %0000075c

0000075c:
0000075d: R8 := 1
00000763: goto %0000075f

00000759:
0000075a: R8 := 0
00000762: goto %0000075f

0000075f:
00000769: when 0:0[R8] goto %00000767
000013ac: goto %00000d70

00000767:
00000771: R0 := mem[R31 + 8, el]:u64
00000776: R1 := 0
0000077c: R1 := R1 + 0xE5F
00000781: R2 := 5
00000786: R30 := 0xB4C
00000789: call @strncmp with return %0000078b

0000078b:
0000078f: #7 := 31:0[R0] - 1
00000794: VF := extend:33[#7 + 1] <> extend:33[31:0[R0]] + 0
00000799: CF := pad:33[#7 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000079d: ZF := #7 + 1 = 0
000007a1: NF := 31:31[#7 + 1]
000007a5: R8 := pad:64[#7 + 1]
000007b1: when ZF goto %000007aa
000007b2: goto %000007ad

000007ad:
000007ae: R8 := 1
000007b4: goto %000007b0

000007aa:
000007ab: R8 := 0
000007b3: goto %000007b0

000007b0:
000007ba: when 0:0[R8] goto %000007b8
000013ad: goto %00000d45

000007b8:
000007c2: R0 := mem[R31 + 8, el]:u64
000007c7: R1 := 0
000007cd: R1 := R1 + 0xE65
000007d2: R30 := 0xB84
000007d4: call @strcmp with return %000007d6

000007d6:
000007da: #8 := 31:0[R0] - 1
000007df: VF := extend:33[#8 + 1] <> extend:33[31:0[R0]] + 0
000007e4: CF := pad:33[#8 + 1] <> pad:33[31:0[R0]] - 0x100000000
000007e8: ZF := #8 + 1 = 0
000007ec: NF := 31:31[#8 + 1]
000007f0: R8 := pad:64[#8 + 1]
000007fc: when ZF goto %000007f5
000007fd: goto %000007f8

000007f8:
000007f9: R8 := 1
000007ff: goto %000007fb

000007f5:
000007f6: R8 := 0
000007fe: goto %000007fb

000007fb:
00000805: when 0:0[R8] goto %00000803
000013ae: goto %00000d36

00000803:
0000080d: R0 := mem[R31 + 8, el]:u64
00000812: R1 := 0
00000818: R1 := R1 + 0xE6A
0000081d: R30 := 0xBAC
0000081f: call @strcmp with return %00000821

00000821:
00000825: #9 := 31:0[R0] - 1
0000082a: VF := extend:33[#9 + 1] <> extend:33[31:0[R0]] + 0
0000082f: CF := pad:33[#9 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000833: ZF := #9 + 1 = 0
00000837: NF := 31:31[#9 + 1]
0000083b: R8 := pad:64[#9 + 1]
00000847: when ZF goto %00000840
00000848: goto %00000843

00000843:
00000844: R8 := 1
0000084a: goto %00000846

00000840:
00000841: R8 := 0
00000849: goto %00000846

00000846:
00000850: when 0:0[R8] goto %0000084e
000013af: goto %00000d27

0000084e:
00000858: R0 := mem[R31 + 8, el]:u64
0000085d: R1 := 0
00000863: R1 := R1 + 0xE70
00000868: R30 := 0xBD4
0000086a: call @strcmp with return %0000086c

0000086c:
00000870: #10 := 31:0[R0] - 1
00000875: VF := extend:33[#10 + 1] <> extend:33[31:0[R0]] + 0
0000087a: CF := pad:33[#10 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000087e: ZF := #10 + 1 = 0
00000882: NF := 31:31[#10 + 1]
00000886: R8 := pad:64[#10 + 1]
00000892: when ZF goto %0000088b
00000893: goto %0000088e

0000088e:
0000088f: R8 := 1
00000895: goto %00000891

0000088b:
0000088c: R8 := 0
00000894: goto %00000891

00000891:
0000089b: when 0:0[R8] goto %00000899
000013b0: goto %00000cc2

00000cc2:
00000cc5: goto %00000cc3

00000cc3:
00000cc9: R8 := 0x11000
00000cd0: R8 := mem[R8 + 0xFD0, el]:u64
00000cd7: R8 := mem[R8, el]:u64
00000cdd: #22 := R8 - 1
00000ce2: VF := extend:65[#22 + 1] <> extend:65[R8] + 0
00000ce7: CF := pad:65[#22 + 1] <> pad:65[R8] - 0x10000000000000000
00000ceb: ZF := #22 + 1 = 0
00000cef: NF := 63:63[#22 + 1]
00000cf3: R8 := #22 + 1
00000cff: when ZF <> 1 goto %00000cf8
00000d00: goto %00000cfb

00000cfb:
00000cfc: R8 := 1
00000d02: goto %00000cfe

00000cf8:
00000cf9: R8 := 0
00000d01: goto %00000cfe

00000cfe:
00000d08: when 0:0[R8] goto %00000d06
000013b1: goto %00000d18

00000d18:
00000d1b: goto %00000d19

00000d19:
00000d1f: R30 := 0xC04
00000d21: call @closeFile with return %00000d23

00000d23:
00000d25: goto %00000d06

00000d06:
00000d0e: R0 := 0
00000d13: R30 := 0xC10
00000d16: call @exit with return %00000899

00000899:
000008a1: R0 := 0
000008a7: R0 := R0 + 0xE75
000008ac: R30 := 0xC1C
000008ae: call @printf with return %000008b0

000008b0:
000008b3: goto %000008b1

000008b1:
000008b7: goto %000008b5

00000d27:
00000d2a: goto %00000d28

00000d28:
00000d2e: R30 := 0xBC0
00000d30: call @closeFile with return %00000d32

00000d32:
00000d34: goto %000008b5

000008b5:
000008bb: goto %000008b9

00000d36:
00000d39: goto %00000d37

00000d37:
00000d3d: R30 := 0xB98
00000d3f: call @saveFile with return %00000d41

00000d41:
00000d43: goto %000008b9

000008b9:
000008bf: goto %000008bd

00000d45:
00000d48: goto %00000d46

00000d46:
00000d4e: R8 := mem[R31 + 8, el]:u64
00000d54: R8 := R8 + 5
00000d5c: mem := mem with [R31, el]:u64 <- R8
00000d63: R0 := mem[R31, el]:u64
00000d68: R30 := 0xB70
00000d6a: call @openFile with return %00000d6c

00000d6c:
00000d6e: goto %000008bd

000008bd:
000008c3: goto %000008c1

00000d70:
00000d73: goto %00000d71

00000d71:
00000d77: R30 := 0xB34
00000d79: call @printHelp with return %00000d7b

00000d7b:
00000d7d: goto %000008c1

000008c1:
000008c8: #11 := R31 + 0x10
000008cd: R29 := mem[#11, el]:u64
000008d2: R30 := mem[#11 + 8, el]:u64
000008d8: R31 := R31 + 0x20
000008dd: call R30 with noreturn

000013b2: sub main(main_argc, main_argv, main_result)
000013dd: main_argc :: in u32 = low:32[R0]
000013de: main_argv :: in out u64 = R1
000013df: main_result :: out u32 = low:32[R0]

00000646:
0000064a: R31 := R31 - 0x130
00000650: #4 := R31 + 0x110
00000656: mem := mem with [#4, el]:u64 <- R29
0000065c: mem := mem with [#4 + 8, el]:u64 <- R30
00000664: mem := mem with [R31 + 0x120, el]:u64 <- R28
0000066a: R29 := R31 + 0x110
00000671: mem := mem with [R29 - 4, el]:u32 <- 0
00000676: goto %00000674

00000674:
0000067a: R0 := 0
00000680: R0 := R0 + 0xE48
00000685: R30 := 0xAB8
00000688: call @printf with return %0000068a

0000068a:
0000068d: R8 := 0x11000
00000694: R8 := mem[R8 + 0xFC0, el]:u64
0000069b: R2 := mem[R8, el]:u64
000006a1: R0 := R31 + 0xC
000006a9: mem := mem with [R31, el]:u64 <- R0
000006ae: R1 := 0x100
000006b3: R30 := 0xAD4
000006b6: call @fgets with return %000006b8

000006b8:
000006bd: R0 := mem[R31, el]:u64
000006c2: R1 := 0
000006c8: R1 := R1 + 0xFDF
000006cd: R30 := 0xAE4
000006d0: call @strcspn with return %000006d2

000006d2:
000006d6: R9 := R0
000006dd: R0 := mem[R31, el]:u64
000006e3: R8 := R0
000006ea: R8 := R8 + R9
000006f1: mem := mem with [R8] <- 0
000006f6: R30 := 0xAFC
000006f9: call @handleInput with return %00000d7f

00000d7f:
00000d81: goto %00000674

000013b3: sub openFile(openFile_result)
000013e0: openFile_result :: out u32 = low:32[R0]

000008df:
000008e3: R31 := R31 - 0x30
000008e9: #12 := R31 + 0x20
000008ef: mem := mem with [#12, el]:u64 <- R29
000008f5: mem := mem with [#12 + 8, el]:u64 <- R30
000008fb: R29 := R31 + 0x20
00000900: R8 := 0x11000
00000907: R8 := mem[R8 + 0xFD0, el]:u64
0000090f: mem := mem with [R31 + 8, el]:u64 <- R8
00000914: R9 := 0x11000
0000091b: R9 := mem[R9 + 0xFB8, el]:u64
00000923: mem := mem with [R31 + 0x10, el]:u64 <- R9
0000092b: mem := mem with [R29 - 8, el]:u64 <- R0
00000932: R8 := mem[R8, el]:u64
00000938: #13 := R8 - 1
0000093d: VF := extend:65[#13 + 1] <> extend:65[R8] + 0
00000942: CF := pad:65[#13 + 1] <> pad:65[R8] - 0x10000000000000000
00000946: ZF := #13 + 1 = 0
0000094a: NF := 63:63[#13 + 1]
0000094e: R8 := #13 + 1
0000095a: when ZF <> 1 goto %00000953
0000095b: goto %00000956

00000956:
00000957: R8 := 1
0000095d: goto %00000959

00000953:
00000954: R8 := 0
0000095c: goto %00000959

00000959:
00000963: when 0:0[R8] goto %00000961
000013b4: goto %00000cb3

00000cb3:
00000cb6: goto %00000cb4

00000cb4:
00000cba: R30 := 0xC7C
00000cbc: call @closeFile with return %00000cbe

00000cbe:
00000cc0: goto %00000961

00000961:
0000096b: R0 := mem[R29 - 8, el]:u64
00000970: R30 := 0xC88
00000973: call @strdup with return %00000975

00000975:
0000097a: R8 := mem[R31 + 0x10, el]:u64
00000982: mem := mem with [R8, el]:u64 <- R0
00000989: R0 := mem[R8, el]:u64
0000098e: R1 := 0
00000994: R1 := R1 + 0xFB2
00000999: R30 := 0xCA0
0000099c: call @fopen with return %0000099e

0000099e:
000009a3: R8 := mem[R31 + 8, el]:u64
000009ab: mem := mem with [R8, el]:u64 <- R0
000009b2: R8 := mem[R8, el]:u64
000009b8: #14 := R8 - 1
000009bd: VF := extend:65[#14 + 1] <> extend:65[R8] + 0
000009c2: CF := pad:65[#14 + 1] <> pad:65[R8] - 0x10000000000000000
000009c6: ZF := #14 + 1 = 0
000009ca: NF := 63:63[#14 + 1]
000009ce: R8 := #14 + 1
000009da: when ZF goto %000009d3
000009db: goto %000009d6

000009d6:
000009d7: R8 := 1
000009dd: goto %000009d9

000009d3:
000009d4: R8 := 0
000009dc: goto %000009d9

000009d9:
000009e3: when 0:0[R8] goto %000009e1
000013b5: goto %00000c8b

000009e1:
000009eb: R8 := mem[R31 + 0x10, el]:u64
000009f2: R1 := mem[R8, el]:u64
000009f7: R0 := 0
000009fd: R0 := R0 + 0xFCF
00000a02: R30 := 0xCE8
00000a04: call @printf with return %00000a06

00000a06:
00000a09: goto %00000a07

00000c8b:
00000c8e: goto %00000c8c

00000c8c:
00000c94: R8 := mem[R31 + 0x10, el]:u64
00000c9b: R1 := mem[R8, el]:u64
00000ca0: R0 := 0
00000ca6: R0 := R0 + 0xFB5
00000cab: R30 := 0xCD0
00000cad: call @printf with return %00000caf

00000caf:
00000cb1: goto %00000a07

00000a07:
00000a0e: #15 := R31 + 0x20
00000a13: R29 := mem[#15, el]:u64
00000a18: R30 := mem[#15 + 8, el]:u64
00000a1e: R31 := R31 + 0x30
00000a23: call R30 with noreturn

000013b6: sub printHelp(printHelp_result)
000013e1: printHelp_result :: out u32 = low:32[R0]

00000a25:
00000a29: #16 := R31 - 0x10
00000a2f: mem := mem with [#16, el]:u64 <- R29
00000a35: mem := mem with [#16 + 8, el]:u64 <- R30
00000a39: R31 := #16
00000a3f: R29 := R31
00000a44: R0 := 0
00000a4a: R0 := R0 + 0xEAB
00000a4f: R30 := 0xD0C
00000a51: call @printf with return %00000a53

00000a53:
00000a56: R0 := 0
00000a5c: R0 := R0 + 0xEB6
00000a61: R30 := 0xD18
00000a63: call @printf with return %00000a65

00000a65:
00000a68: R0 := 0
00000a6e: R0 := R0 + 0xEEA
00000a73: R30 := 0xD24
00000a75: call @printf with return %00000a77

00000a77:
00000a7a: R0 := 0
00000a80: R0 := R0 + 0xF1C
00000a85: R30 := 0xD30
00000a87: call @printf with return %00000a89

00000a89:
00000a8c: R0 := 0
00000a92: R0 := R0 + 0xF57
00000a97: R30 := 0xD3C
00000a99: call @printf with return %00000a9b

00000a9b:
00000a9e: R0 := 0
00000aa4: R0 := R0 + 0xF88
00000aa9: R30 := 0xD48
00000aab: call @printf with return %00000aad

00000aad:
00000ab2: R29 := mem[R31, el]:u64
00000ab7: R30 := mem[R31 + 8, el]:u64
00000abb: R31 := R31 + 0x10
00000ac0: call R30 with noreturn

000013b7: sub printf(printf_format, printf_result)
000013e2: printf_format :: in u64 = R0
000013e3: printf_result :: out u32 = low:32[R0]

00000686:
0000106a: R16 := 0x12000
00001071: R17 := mem[R16 + 0x68, el]:u64
00001077: R16 := R16 + 0x68
0000107c: call R17 with noreturn

000013b8: sub register_tm_clones(register_tm_clones_result)
000013e4: register_tm_clones_result :: out u32 = low:32[R0]

000005ac:
000005af: R0 := 0x12000
000005b5: R0 := R0 + 0x88
000005ba: R1 := 0x12000
000005c0: R1 := R1 + 0x88
000005c7: R1 := R1 + ~R0 + 1
000005cd: R2 := 0.63:63[R1]
000005d4: R1 := R2 + (R1 ~>> 3)
000005da: R1 := extend:64[63:1[R1]]
000005e0: when R1 = 0 goto %000005de
000013b9: goto %00000dbe

00000dbe:
00000dc1: R2 := 0x11000
00000dc8: R2 := mem[R2 + 0xFE0, el]:u64
00000dcd: when R2 = 0 goto %000005de
000013ba: goto %00000dd1

000005de:
000005e6: call R30 with noreturn

00000dd1:
00000dd5: R16 := R2
00000dda: call R16 with noreturn

000013bb: sub rewind(rewind_result)
000013e5: rewind_result :: out u32 = low:32[R0]

00000b3a:
00000fd0: R16 := 0x12000
00000fd7: R17 := mem[R16 + 0x30, el]:u64
00000fdd: R16 := R16 + 0x30
00000fe2: call R17 with noreturn

000013bc: sub saveFile(saveFile_result)
000013e6: saveFile_result :: out u32 = low:32[R0]

00000ac2:
00000ac6: #17 := R31 - 0x10
00000acc: mem := mem with [#17, el]:u64 <- R29
00000ad2: mem := mem with [#17 + 8, el]:u64 <- R30
00000ad6: R31 := #17
00000adc: R29 := R31
00000ae1: R8 := 0x11000
00000ae8: R8 := mem[R8 + 0xFD0, el]:u64
00000aef: R8 := mem[R8, el]:u64
00000af5: #18 := R8 - 1
00000afa: VF := extend:65[#18 + 1] <> extend:65[R8] + 0
00000aff: CF := pad:65[#18 + 1] <> pad:65[R8] - 0x10000000000000000
00000b03: ZF := #18 + 1 = 0
00000b07: NF := 63:63[#18 + 1]
00000b0b: R8 := #18 + 1
00000b17: when ZF goto %00000b10
00000b18: goto %00000b13

00000b13:
00000b14: R8 := 1
00000b1a: goto %00000b16

00000b10:
00000b11: R8 := 0
00000b19: goto %00000b16

00000b16:
00000b20: when 0:0[R8] goto %00000b1e
000013bd: goto %00000c71

00000b1e:
00000b26: R8 := 0x11000
00000b2d: R8 := mem[R8 + 0xFD0, el]:u64
00000b34: R0 := mem[R8, el]:u64
00000b39: R30 := 0xD94
00000b3c: call @rewind with return %00000b3e

00000b3e:
00000b41: R8 := 0x11000
00000b48: R8 := mem[R8 + 0xFB8, el]:u64
00000b4f: R1 := mem[R8, el]:u64
00000b54: R0 := 0
00000b5a: R0 := R0 + 0xFFC
00000b5f: R30 := 0xDAC
00000b61: call @printf with return %00000b63

00000b63:
00000b66: goto %00000b64

00000c71:
00000c74: goto %00000c72

00000c72:
00000c78: R0 := 0
00000c7e: R0 := R0 + 0xFE1
00000c83: R30 := 0xD80
00000c85: call @printf with return %00000c87

00000c87:
00000c89: goto %00000b64

00000b64:
00000b6c: R29 := mem[R31, el]:u64
00000b71: R30 := mem[R31 + 8, el]:u64
00000b75: R31 := R31 + 0x10
00000b7a: call R30 with noreturn

000013be: sub strcmp(strcmp_s1, strcmp_s2, strcmp_result)
000013e7: strcmp_s1 :: in u64 = R0
000013e8: strcmp_s2 :: in u64 = R1
000013e9: strcmp_result :: out u32 = low:32[R0]

00000736:
00001028: R16 := 0x12000
0000102f: R17 := mem[R16 + 0x50, el]:u64
00001035: R16 := R16 + 0x50
0000103a: call R17 with noreturn

000013bf: sub strcspn(strcspn_s, strcspn_reject, strcspn_result)
000013ea: strcspn_s :: in u64 = R0
000013eb: strcspn_reject :: in u64 = R1
000013ec: strcspn_result :: out u64 = R0

000006ce:
00001054: R16 := 0x12000
0000105b: R17 := mem[R16 + 0x60, el]:u64
00001061: R16 := R16 + 0x60
00001066: call R17 with noreturn

000013c0: sub strdup(strdup_s, strdup_result)
000013ed: strdup_s :: in u64 = R0
000013ee: strdup_result :: out u64 = R0

00000971:
00000fe6: R16 := 0x12000
00000fed: R17 := mem[R16 + 0x38, el]:u64
00000ff3: R16 := R16 + 0x38
00000ff8: call R17 with noreturn

000013c1: sub strncmp(strncmp_s1, strncmp_s2, strncmp_n, strncmp_result)
000013ef: strncmp_s1 :: in u64 = R0
000013f0: strncmp_s2 :: in u64 = R1
000013f1: strncmp_n :: in u64 = R2
000013f2: strncmp_result :: out u32 = low:32[R0]

00000787:
00000fba: R16 := 0x12000
00000fc1: R17 := mem[R16 + 0x28, el]:u64
00000fc7: R16 := R16 + 0x28
00000fcc: call R17 with noreturn
