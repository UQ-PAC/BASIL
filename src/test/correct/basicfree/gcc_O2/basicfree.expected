var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1896bv64);
function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure main(main_argc: bv32, Gamma_main_argc: bool, main_argv: bv64, Gamma_main_argv: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (main_argv_out: bv64, Gamma_main_argv_out: bool, main_result: bv32, Gamma_main_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
  requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  requires (memory_load8_le(mem, 69647bv64) == 0bv8);
{
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R1: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R0, Gamma_R0 := zero_extend32_32(main_argc), Gamma_main_argc;
  R1, Gamma_R1 := main_argv, Gamma_main_argv;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lmain:
    main_argv_out, Gamma_main_argv_out := R1, Gamma_R1;
    main_result, Gamma_main_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}
