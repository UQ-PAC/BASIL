var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2076bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2076bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2077bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2078bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2079bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69000bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 2004bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure FUN_680();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load8_le(mem, 2076bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2077bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2078bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2079bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69000bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 2004bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2076bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2077bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2078bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2079bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69000bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 2004bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation FUN_680()
{
  $FUN_680$__0__$Munhgh3nShysDJa~x_gpnQ:
    assume {:captureState "$FUN_680$__0__$Munhgh3nShysDJa~x_gpnQ"} true;
    R16, Gamma_R16 := 65536bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, bvadd64(R16, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 4040bv64)) || L(mem, bvadd64(R16, 4040bv64)));
    R16, Gamma_R16 := bvadd64(R16, 4040bv64), Gamma_R16;
    call #free();
    assume false; //no return target
}

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R29, R30, R31, mem, stack;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 2076bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2077bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2078bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2079bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69000bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 2004bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 2076bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2077bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2078bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2079bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69000bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 2004bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main()
{
  var Cse0__5$1$0: bv64;
  var Gamma_Cse0__5$1$0: bool;
  $main$__0__$SVwwAKxIQmqlA4JVB4NRNA:
    assume {:captureState "$main$__0__$SVwwAKxIQmqlA4JVB4NRNA"} true;
    Cse0__5$1$0, Gamma_Cse0__5$1$0 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5$1$0, R29), gamma_store64(Gamma_stack, Cse0__5$1$0, Gamma_R29);
    assume {:captureState "2004$1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5$1$0, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5$1$0, 8bv64), Gamma_R30);
    assume {:captureState "2004$2"} true;
    R31, Gamma_R31 := Cse0__5$1$0, Gamma_Cse0__5$1$0;
    R29, Gamma_R29 := R31, Gamma_R31;
    R0, Gamma_R0 := 4bv64, true;
    R30, Gamma_R30 := 2020bv64, true;
    call FUN_650();
    goto $main$__1__$9qt6Bm68Rve4QS0F_cEB3w;
  $main$__1__$9qt6Bm68Rve4QS0F_cEB3w:
    assume {:captureState "$main$__1__$9qt6Bm68Rve4QS0F_cEB3w"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 24bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 24bv64), Gamma_R0);
    assume {:captureState "2020$0"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 24bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 24bv64));
    R1, Gamma_R1 := 1bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "2032$0"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 24bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 24bv64));
    R30, Gamma_R30 := 2044bv64, true;
    call FUN_680();
    goto $main$__2__$JmJ8ydmEQ0KG2aqp3uFiQw;
  $main$__2__$JmJ8ydmEQ0KG2aqp3uFiQw:
    assume {:captureState "$main$__2__$JmJ8ydmEQ0KG2aqp3uFiQw"} true;
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

procedure FUN_650();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load8_le(mem, 2076bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2077bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2078bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2079bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69000bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 2004bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2076bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2077bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2078bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2079bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69000bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 2004bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation FUN_650()
{
  $FUN_650$__0__$6QXyVlMjT_e0YItUboXIPw:
    assume {:captureState "$FUN_650$__0__$6QXyVlMjT_e0YItUboXIPw"} true;
    R16, Gamma_R16 := 65536bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, bvadd64(R16, 4016bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 4016bv64)) || L(mem, bvadd64(R16, 4016bv64)));
    R16, Gamma_R16 := bvadd64(R16, 4016bv64), Gamma_R16;
    call malloc();
    assume false; //no return target
}

procedure #free();
  free requires (memory_load8_le(mem, 2076bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2077bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2078bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2079bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69000bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 2004bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2076bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2077bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2078bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2079bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69000bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 2004bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure malloc();
  free requires (memory_load8_le(mem, 2076bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2077bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2078bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2079bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69000bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 2004bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2076bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2077bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2078bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2079bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69000bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 2004bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

