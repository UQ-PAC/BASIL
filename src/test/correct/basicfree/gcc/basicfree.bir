000005e7: program
000005b0: sub __cxa_finalize(__cxa_finalize_result)
000005e8: __cxa_finalize_result :: out u32 = low:32[R0]

00000380:
00000498: R16 := 0x10000
0000049f: R17 := mem[R16 + 0xFA8, el]:u64
000004a5: R16 := R16 + 0xFA8
000004aa: call R17 with noreturn

000005b1: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005e9: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000282:
00000286: #3 := R31 - 0x20
0000028c: mem := mem with [#3, el]:u64 <- R29
00000292: mem := mem with [#3 + 8, el]:u64 <- R30
00000296: R31 := #3
0000029c: R29 := R31
000002a4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002a9: R19 := 0x11000
000002b0: R0 := pad:64[mem[R19 + 0x10]]
000002b7: when 31:0[R0] <> 0 goto %000002b5
000005dd: goto %00000349

00000349:
0000034c: R0 := 0x10000
00000353: R0 := mem[R0 + 0xFE0, el]:u64
00000359: when R0 = 0 goto %00000357
000005de: goto %00000370

00000370:
00000373: R0 := 0x11000
0000037a: R0 := mem[R0 + 8, el]:u64
0000037f: R30 := 0x7B0
00000382: call @__cxa_finalize with return %00000357

00000357:
0000035f: R30 := 0x7B4
00000361: call @deregister_tm_clones with return %00000363

00000363:
00000366: R0 := 1
0000036e: mem := mem with [R19 + 0x10] <- 7:0[R0]
000005df: goto %000002b5

000002b5:
000002bf: R19 := mem[R31 + 0x10, el]:u64
000002c6: R29 := mem[R31, el]:u64
000002cb: R30 := mem[R31 + 8, el]:u64
000002cf: R31 := R31 + 0x20
000002d4: call R30 with noreturn

000005b5: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005ea: __libc_start_main_main :: in u64 = R0
000005eb: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005ec: __libc_start_main_arg3 :: in out u64 = R2
000005ed: __libc_start_main_auxv :: in out u64 = R3
000005ee: __libc_start_main_result :: out u32 = low:32[R0]

000001db:
00000482: R16 := 0x10000
00000489: R17 := mem[R16 + 0xFA0, el]:u64
0000048f: R16 := R16 + 0xFA0
00000494: call R17 with noreturn

000005b6: sub _fini(_fini_result)
000005ef: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005b7: sub _init(_init_result)
000005f0: _init_result :: out u32 = low:32[R0]

0000051e:
00000524: #6 := R31 - 0x10
0000052a: mem := mem with [#6, el]:u64 <- R29
00000530: mem := mem with [#6 + 8, el]:u64 <- R30
00000534: R31 := #6
0000053a: R29 := R31
0000053f: R30 := 0x600
00000541: call @call_weak_fn with return %00000543

00000543:
00000548: R29 := mem[R31, el]:u64
0000054d: R30 := mem[R31 + 8, el]:u64
00000551: R31 := R31 + 0x10
00000556: call R30 with noreturn

000005b8: sub _start(_start_result)
000005f1: _start_result :: out u32 = low:32[R0]

0000019c:
000001a1: R29 := 0
000001a6: R30 := 0
000001ac: R5 := R0
000001b3: R1 := mem[R31, el]:u64
000001b9: R2 := R31 + 8
000001bf: R6 := R31
000001c4: R0 := 0x10000
000001cb: R0 := mem[R0 + 0xFF0, el]:u64
000001d0: R3 := 0
000001d5: R4 := 0
000001da: R30 := 0x6F0
000001dd: call @__libc_start_main with return %000001df

000001df:
000001e2: R30 := 0x6F4
000001e5: call @abort with return %000005e0

000005e0:
000005e1: call @call_weak_fn with noreturn

000005bb: sub abort()


000001e3:
000004da: R16 := 0x10000
000004e1: R17 := mem[R16 + 0xFC0, el]:u64
000004e7: R16 := R16 + 0xFC0
000004ec: call R17 with noreturn

000005bc: sub call_weak_fn(call_weak_fn_result)
000005f2: call_weak_fn_result :: out u32 = low:32[R0]

000001e7:
000001ea: R0 := 0x10000
000001f1: R0 := mem[R0 + 0xFE8, el]:u64
000001f7: when R0 = 0 goto %000001f5
000005e2: goto %000003c0

000001f5:
000001fd: call R30 with noreturn

000003c0:
000003c3: goto @__gmon_start__

000003c1:
000004c4: R16 := 0x10000
000004cb: R17 := mem[R16 + 0xFB8, el]:u64
000004d1: R16 := R16 + 0xFB8
000004d6: call R17 with noreturn

000005be: sub deregister_tm_clones(deregister_tm_clones_result)
000005f3: deregister_tm_clones_result :: out u32 = low:32[R0]

00000203:
00000206: R0 := 0x11000
0000020c: R0 := R0 + 0x10
00000211: R1 := 0x11000
00000217: R1 := R1 + 0x10
0000021d: #1 := ~R0
00000222: #2 := R1 + ~R0
00000228: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000022e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000232: ZF := #2 + 1 = 0
00000236: NF := 63:63[#2 + 1]
0000023c: when ZF goto %0000023a
000005e3: goto %000003a2

000003a2:
000003a5: R1 := 0x10000
000003ac: R1 := mem[R1 + 0xFD8, el]:u64
000003b1: when R1 = 0 goto %0000023a
000005e4: goto %000003b5

0000023a:
00000242: call R30 with noreturn

000003b5:
000003b9: R16 := R1
000003be: call R16 with noreturn

000005c1: sub frame_dummy(frame_dummy_result)
000005f4: frame_dummy_result :: out u32 = low:32[R0]

000002da:
000002dc: call @register_tm_clones with noreturn

000005c2: sub free(free_ptr)
000005f5: free_ptr :: in out u64 = R0

0000032e:
000004f0: R16 := 0x10000
000004f7: R17 := mem[R16 + 0xFC8, el]:u64
000004fd: R16 := R16 + 0xFC8
00000502: call R17 with noreturn

000005c3: sub main(main_argc, main_argv, main_result)
000005f6: main_argc :: in u32 = low:32[R0]
000005f7: main_argv :: in out u64 = R1
000005f8: main_result :: out u32 = low:32[R0]

000002de:
000002e2: #4 := R31 - 0x20
000002e8: mem := mem with [#4, el]:u64 <- R29
000002ee: mem := mem with [#4 + 8, el]:u64 <- R30
000002f2: R31 := #4
000002f8: R29 := R31
000002fd: R0 := 4
00000302: R30 := 0x7E4
00000305: call @malloc with return %00000307

00000307:
0000030d: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000314: R0 := mem[R31 + 0x18, el]:u64
00000319: R1 := 1
00000321: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000328: R0 := mem[R31 + 0x18, el]:u64
0000032d: R30 := 0x7FC
00000330: call @free with return %00000332

00000332:
00000339: R29 := mem[R31, el]:u64
0000033e: R30 := mem[R31 + 8, el]:u64
00000342: R31 := R31 + 0x20
00000347: call R30 with noreturn

000005c4: sub malloc(malloc_size, malloc_result)
000005f9: malloc_size :: in u64 = R0
000005fa: malloc_result :: out u64 = R0

00000303:
000004ae: R16 := 0x10000
000004b5: R17 := mem[R16 + 0xFB0, el]:u64
000004bb: R16 := R16 + 0xFB0
000004c0: call R17 with noreturn

000005c5: sub register_tm_clones(register_tm_clones_result)
000005fb: register_tm_clones_result :: out u32 = low:32[R0]

00000244:
00000247: R0 := 0x11000
0000024d: R0 := R0 + 0x10
00000252: R1 := 0x11000
00000258: R1 := R1 + 0x10
0000025f: R1 := R1 + ~R0 + 1
00000265: R2 := 0.63:63[R1]
0000026c: R1 := R2 + (R1 ~>> 3)
00000272: R1 := extend:64[63:1[R1]]
00000278: when R1 = 0 goto %00000276
000005e5: goto %00000384

00000384:
00000387: R2 := 0x10000
0000038e: R2 := mem[R2 + 0xFF8, el]:u64
00000393: when R2 = 0 goto %00000276
000005e6: goto %00000397

00000276:
0000027e: call R30 with noreturn

00000397:
0000039b: R16 := R2
000003a0: call R16 with noreturn
