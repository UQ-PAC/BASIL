00000bb3: program
00000b9b: sub __cxa_finalize(__cxa_finalize_result)
00000bb4: __cxa_finalize_result :: out u32 = low:32[R0]

0000096a:
00000a82: R16 := 0x11000
00000a89: R17 := mem[R16 + 8, el]:u64
00000a8f: R16 := R16 + 8
00000a94: call R17 with noreturn

00000b9c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000bb5: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000866:
0000086a: #3 := R31 - 0x20
00000870: mem := mem with [#3, el]:u64 <- R29
00000876: mem := mem with [#3 + 8, el]:u64 <- R30
0000087a: R31 := #3
00000880: R29 := R31
00000888: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000088d: R19 := 0x11000
00000894: R0 := pad:64[mem[R19 + 0x40]]
0000089b: when 31:0[R0] <> 0 goto %00000899
00000b9d: goto %00000933

00000933:
00000936: R0 := 0x10000
0000093d: R0 := mem[R0 + 0xFC8, el]:u64
00000943: when R0 = 0 goto %00000941
00000b9e: goto %0000095a

0000095a:
0000095d: R0 := 0x11000
00000964: R0 := mem[R0 + 0x38, el]:u64
00000969: R30 := 0x7B0
0000096c: call @__cxa_finalize with return %00000941

00000941:
00000949: R30 := 0x7B4
0000094b: call @deregister_tm_clones with return %0000094d

0000094d:
00000950: R0 := 1
00000958: mem := mem with [R19 + 0x40] <- 7:0[R0]
00000b9f: goto %00000899

00000899:
000008a3: R19 := mem[R31 + 0x10, el]:u64
000008aa: R29 := mem[R31, el]:u64
000008af: R30 := mem[R31 + 8, el]:u64
000008b3: R31 := R31 + 0x20
000008b8: call R30 with noreturn

00000ba0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000bb6: __libc_start_main_main :: in u64 = R0
00000bb7: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000bb8: __libc_start_main_arg3 :: in out u64 = R2
00000bb9: __libc_start_main_auxv :: in out u64 = R3
00000bba: __libc_start_main_result :: out u32 = low:32[R0]

000007bf:
00000a6c: R16 := 0x11000
00000a73: R17 := mem[R16, el]:u64
00000a79: R16 := R16
00000a7e: call R17 with noreturn

00000ba1: sub _fini(_fini_result)
00000bbb: _fini_result :: out u32 = low:32[R0]

000005ff:
00000605: #0 := R31 - 0x10
0000060b: mem := mem with [#0, el]:u64 <- R29
00000611: mem := mem with [#0 + 8, el]:u64 <- R30
00000615: R31 := #0
0000061b: R29 := R31
00000622: R29 := mem[R31, el]:u64
00000627: R30 := mem[R31 + 8, el]:u64
0000062b: R31 := R31 + 0x10
00000630: call R30 with noreturn

00000ba2: sub _init(_init_result)
00000bbc: _init_result :: out u32 = low:32[R0]

00000b08:
00000b0e: #7 := R31 - 0x10
00000b14: mem := mem with [#7, el]:u64 <- R29
00000b1a: mem := mem with [#7 + 8, el]:u64 <- R30
00000b1e: R31 := #7
00000b24: R29 := R31
00000b29: R30 := 0x600
00000b2b: call @call_weak_fn with return %00000b2d

00000b2d:
00000b32: R29 := mem[R31, el]:u64
00000b37: R30 := mem[R31 + 8, el]:u64
00000b3b: R31 := R31 + 0x10
00000b40: call R30 with noreturn

00000ba3: sub _start(_start_result)
00000bbd: _start_result :: out u32 = low:32[R0]

00000780:
00000785: R29 := 0
0000078a: R30 := 0
00000790: R5 := R0
00000797: R1 := mem[R31, el]:u64
0000079d: R2 := R31 + 8
000007a3: R6 := R31
000007a8: R0 := 0x10000
000007af: R0 := mem[R0 + 0xFD8, el]:u64
000007b4: R3 := 0
000007b9: R4 := 0
000007be: R30 := 0x6F0
000007c1: call @__libc_start_main with return %000007c3

000007c3:
000007c6: R30 := 0x6F4
000007c9: call @abort with return %00000ba4

00000ba4:
00000ba5: call @call_weak_fn with noreturn

00000ba6: sub abort()


000007c7:
00000ac4: R16 := 0x11000
00000acb: R17 := mem[R16 + 0x20, el]:u64
00000ad1: R16 := R16 + 0x20
00000ad6: call R17 with noreturn

00000ba7: sub call_weak_fn(call_weak_fn_result)
00000bbe: call_weak_fn_result :: out u32 = low:32[R0]

000007cb:
000007ce: R0 := 0x10000
000007d5: R0 := mem[R0 + 0xFD0, el]:u64
000007db: when R0 = 0 goto %000007d9
00000ba8: goto %000009aa

000007d9:
000007e1: call R30 with noreturn

000009aa:
000009ad: goto @__gmon_start__

000009ab:
00000aae: R16 := 0x11000
00000ab5: R17 := mem[R16 + 0x18, el]:u64
00000abb: R16 := R16 + 0x18
00000ac0: call R17 with noreturn

00000ba9: sub deregister_tm_clones(deregister_tm_clones_result)
00000bbf: deregister_tm_clones_result :: out u32 = low:32[R0]

000007e7:
000007ea: R0 := 0x11000
000007f0: R0 := R0 + 0x40
000007f5: R1 := 0x11000
000007fb: R1 := R1 + 0x40
00000801: #1 := ~R0
00000806: #2 := R1 + ~R0
0000080c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000812: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000816: ZF := #2 + 1 = 0
0000081a: NF := 63:63[#2 + 1]
00000820: when ZF goto %0000081e
00000baa: goto %0000098c

0000098c:
0000098f: R1 := 0x10000
00000996: R1 := mem[R1 + 0xFC0, el]:u64
0000099b: when R1 = 0 goto %0000081e
00000bab: goto %0000099f

0000081e:
00000826: call R30 with noreturn

0000099f:
000009a3: R16 := R1
000009a8: call R16 with noreturn

00000bac: sub frame_dummy(frame_dummy_result)
00000bc0: frame_dummy_result :: out u32 = low:32[R0]

000008be:
000008c0: call @register_tm_clones with noreturn

00000bad: sub free(free_ptr)
00000bc1: free_ptr :: in out u64 = R0

00000914:
00000ada: R16 := 0x11000
00000ae1: R17 := mem[R16 + 0x28, el]:u64
00000ae7: R16 := R16 + 0x28
00000aec: call R17 with noreturn

00000bae: sub main(main_argc, main_argv, main_result)
00000bc2: main_argc :: in u32 = low:32[R0]
00000bc3: main_argv :: in out u64 = R1
00000bc4: main_result :: out u32 = low:32[R0]

000008c2:
000008c6: R31 := R31 - 0x20
000008cc: #4 := R31 + 0x10
000008d2: mem := mem with [#4, el]:u64 <- R29
000008d8: mem := mem with [#4 + 8, el]:u64 <- R30
000008de: R29 := R31 + 0x10
000008e3: R0 := 4
000008e8: R30 := 0x7E8
000008eb: call @malloc with return %000008ed

000008ed:
000008f3: mem := mem with [R31 + 8, el]:u64 <- R0
000008fa: R9 := mem[R31 + 8, el]:u64
000008ff: R8 := 1
00000907: mem := mem with [R9, el]:u32 <- 31:0[R8]
0000090e: R0 := mem[R31 + 8, el]:u64
00000913: R30 := 0x800
00000916: call @free with return %00000918

00000918:
0000091c: #5 := R31 + 0x10
00000921: R29 := mem[#5, el]:u64
00000926: R30 := mem[#5 + 8, el]:u64
0000092c: R31 := R31 + 0x20
00000931: call R30 with noreturn

00000baf: sub malloc(malloc_size, malloc_result)
00000bc5: malloc_size :: in u64 = R0
00000bc6: malloc_result :: out u64 = R0

000008e9:
00000a98: R16 := 0x11000
00000a9f: R17 := mem[R16 + 0x10, el]:u64
00000aa5: R16 := R16 + 0x10
00000aaa: call R17 with noreturn

00000bb0: sub register_tm_clones(register_tm_clones_result)
00000bc7: register_tm_clones_result :: out u32 = low:32[R0]

00000828:
0000082b: R0 := 0x11000
00000831: R0 := R0 + 0x40
00000836: R1 := 0x11000
0000083c: R1 := R1 + 0x40
00000843: R1 := R1 + ~R0 + 1
00000849: R2 := 0.63:63[R1]
00000850: R1 := R2 + (R1 ~>> 3)
00000856: R1 := extend:64[63:1[R1]]
0000085c: when R1 = 0 goto %0000085a
00000bb1: goto %0000096e

0000096e:
00000971: R2 := 0x10000
00000978: R2 := mem[R2 + 0xFE0, el]:u64
0000097d: when R2 = 0 goto %0000085a
00000bb2: goto %00000981

0000085a:
00000862: call R30 with noreturn

00000981:
00000985: R16 := R2
0000098a: call R16 with noreturn
