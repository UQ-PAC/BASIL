0000050d: program
000004db: sub __cxa_finalize(__cxa_finalize_result)
0000050e: __cxa_finalize_result :: out u32 = low:32[R0]

000002ea:
000003e2: R16 := 0x20000
000003e9: R17 := mem[R16 + 8, el]:u64
000003ef: R16 := R16 + 8
000003f4: call R17 with noreturn

000004dc: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000050f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000253:
00000257: #3 := R31 - 0x20
0000025d: mem := mem with [#3, el]:u64 <- R29
00000263: mem := mem with [#3 + 8, el]:u64 <- R30
00000267: R31 := #3
0000026d: R29 := R31
00000275: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000027a: R19 := 0x20000
00000281: R0 := pad:64[mem[R19 + 0x30]]
00000287: when 0:0[R0] goto %00000285
00000503: goto %000002b3

000002b3:
000002b6: R0 := 0x1F000
000002bd: R0 := mem[R0 + 0xFC8, el]:u64
000002c3: when R0 = 0 goto %000002c1
00000504: goto %000002da

000002da:
000002dd: R0 := 0x20000
000002e4: R0 := mem[R0 + 0x28, el]:u64
000002e9: R30 := 0x730
000002ec: call @__cxa_finalize with return %000002c1

000002c1:
000002c9: R30 := 0x734
000002cb: call @deregister_tm_clones with return %000002cd

000002cd:
000002d0: R0 := 1
000002d8: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000505: goto %00000285

00000285:
0000028f: R19 := mem[R31 + 0x10, el]:u64
00000296: R29 := mem[R31, el]:u64
0000029b: R30 := mem[R31 + 8, el]:u64
0000029f: R31 := R31 + 0x20
000002a4: call R30 with noreturn

000004e0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000510: __libc_start_main_main :: in u64 = R0
00000511: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000512: __libc_start_main_arg3 :: in out u64 = R2
00000513: __libc_start_main_auxv :: in out u64 = R3
00000514: __libc_start_main_result :: out u32 = low:32[R0]

000001ac:
000003cc: R16 := 0x20000
000003d3: R17 := mem[R16, el]:u64
000003d9: R16 := R16
000003de: call R17 with noreturn

000004e1: sub _fini(_fini_result)
00000515: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000004e2: sub _init(_init_result)
00000516: _init_result :: out u32 = low:32[R0]

0000043c:
00000442: #5 := R31 - 0x10
00000448: mem := mem with [#5, el]:u64 <- R29
0000044e: mem := mem with [#5 + 8, el]:u64 <- R30
00000452: R31 := #5
00000458: R29 := R31
0000045d: R30 := 0x5C8
0000045f: call @call_weak_fn with return %00000461

00000461:
00000466: R29 := mem[R31, el]:u64
0000046b: R30 := mem[R31 + 8, el]:u64
0000046f: R31 := R31 + 0x10
00000474: call R30 with noreturn

000004e3: sub _start(_start_result)
00000517: _start_result :: out u32 = low:32[R0]

0000016d:
00000172: R29 := 0
00000177: R30 := 0
0000017d: R5 := R0
00000184: R1 := mem[R31, el]:u64
0000018a: R2 := R31 + 8
00000190: R6 := R31
00000195: R0 := 0x1F000
0000019c: R0 := mem[R0 + 0xFD8, el]:u64
000001a1: R3 := 0
000001a6: R4 := 0
000001ab: R30 := 0x670
000001ae: call @__libc_start_main with return %000001b0

000001b0:
000001b3: R30 := 0x674
000001b6: call @abort with return %00000506

00000506:
00000507: call @call_weak_fn with noreturn

000004e6: sub abort()


000001b4:
0000040e: R16 := 0x20000
00000415: R17 := mem[R16 + 0x18, el]:u64
0000041b: R16 := R16 + 0x18
00000420: call R17 with noreturn

000004e7: sub call_weak_fn(call_weak_fn_result)
00000518: call_weak_fn_result :: out u32 = low:32[R0]

000001b8:
000001bb: R0 := 0x1F000
000001c2: R0 := mem[R0 + 0xFD0, el]:u64
000001c8: when R0 = 0 goto %000001c6
00000508: goto %0000032a

000001c6:
000001ce: call R30 with noreturn

0000032a:
0000032d: goto @__gmon_start__

0000032b:
000003f8: R16 := 0x20000
000003ff: R17 := mem[R16 + 0x10, el]:u64
00000405: R16 := R16 + 0x10
0000040a: call R17 with noreturn

000004e9: sub deregister_tm_clones(deregister_tm_clones_result)
00000519: deregister_tm_clones_result :: out u32 = low:32[R0]

000001d4:
000001d7: R0 := 0x20000
000001dd: R0 := R0 + 0x30
000001e2: R1 := 0x20000
000001e8: R1 := R1 + 0x30
000001ee: #1 := ~R0
000001f3: #2 := R1 + ~R0
000001f9: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000001ff: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000203: ZF := #2 + 1 = 0
00000207: NF := 63:63[#2 + 1]
0000020d: when ZF goto %0000020b
00000509: goto %0000030c

0000030c:
0000030f: R1 := 0x1F000
00000316: R1 := mem[R1 + 0xFC0, el]:u64
0000031b: when R1 = 0 goto %0000020b
0000050a: goto %0000031f

0000020b:
00000213: call R30 with noreturn

0000031f:
00000323: R16 := R1
00000328: call R16 with noreturn

000004ec: sub frame_dummy(frame_dummy_result)
0000051a: frame_dummy_result :: out u32 = low:32[R0]

000002aa:
000002ac: call @register_tm_clones with noreturn

000004ed: sub main(main_argc, main_argv, main_result)
0000051b: main_argc :: in u32 = low:32[R0]
0000051c: main_argv :: in out u64 = R1
0000051d: main_result :: out u32 = low:32[R0]

000002ae:
000002b1: call R30 with noreturn

000004ee: sub register_tm_clones(register_tm_clones_result)
0000051e: register_tm_clones_result :: out u32 = low:32[R0]

00000215:
00000218: R0 := 0x20000
0000021e: R0 := R0 + 0x30
00000223: R1 := 0x20000
00000229: R1 := R1 + 0x30
00000230: R1 := R1 + ~R0 + 1
00000236: R2 := 0.63:63[R1]
0000023d: R1 := R2 + (R1 ~>> 3)
00000243: R1 := extend:64[63:1[R1]]
00000249: when R1 = 0 goto %00000247
0000050b: goto %000002ee

000002ee:
000002f1: R2 := 0x1F000
000002f8: R2 := mem[R2 + 0xFE0, el]:u64
000002fd: when R2 = 0 goto %00000247
0000050c: goto %00000301

00000247:
0000024f: call R30 with noreturn

00000301:
00000305: R16 := R2
0000030a: call R16 with noreturn
