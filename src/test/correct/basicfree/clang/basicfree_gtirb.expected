var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R16: bool;
var {:extern} $Gamma_R17: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_R9: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R16: bv64;
var {:extern} $R17: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $R8: bv64;
var {:extern} $R9: bv64;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $_DYNAMIC_addr: bv64;
axiom ($_DYNAMIC_addr == 69080bv64);
const {:extern} $_GLOBAL_OFFSET_TABLE__addr: bv64;
axiom ($_GLOBAL_OFFSET_TABLE__addr == 69560bv64);
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2080bv64);
const {:extern} $__FRAME_END___addr: bv64;
axiom ($__FRAME_END___addr == 2340bv64);
const {:extern} $__abi_tag_addr: bv64;
axiom ($__abi_tag_addr == 632bv64);
const {:extern} $__do_global_dtors_aux_fini_array_entry_addr: bv64;
axiom ($__do_global_dtors_aux_fini_array_entry_addr == 69072bv64);
const {:extern} $__frame_dummy_init_array_entry_addr: bv64;
axiom ($__frame_dummy_init_array_entry_addr == 69064bv64);
const {:extern} $completed.0_addr: bv64;
axiom ($completed.0_addr == 69696bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 2080bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2000bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1920bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2004bv64);
  free ensures (memory_load64_le($mem, 69688bv64) == 69688bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$malloc();
  free requires (memory_load32_le($mem, 2080bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 2000bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1920bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2004bv64);
  free requires (memory_load64_le($mem, 69688bv64) == 69688bv64);
  free ensures (memory_load32_le($mem, 2080bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2000bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1920bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2004bv64);
  free ensures (memory_load64_le($mem, 69688bv64) == 69688bv64);

procedure p$#free();
  free requires (memory_load32_le($mem, 2080bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 2000bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1920bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2004bv64);
  free requires (memory_load64_le($mem, 69688bv64) == 69688bv64);
  free ensures (memory_load32_le($mem, 2080bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2000bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1920bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2004bv64);
  free ensures (memory_load64_le($mem, 69688bv64) == 69688bv64);

procedure p$main_2004();
  modifies $Gamma_R0, $Gamma_R16, $Gamma_R17, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_R8, $Gamma_R9, $Gamma_mem, $Gamma_stack, $R0, $R16, $R17, $R29, $R30, $R31, $R8, $R9, $mem, $stack;
  free requires (memory_load64_le($mem, 69680bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69688bv64) == 69688bv64);
  free requires (memory_load32_le($mem, 2080bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 2000bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1920bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2004bv64);
  free requires (memory_load64_le($mem, 69688bv64) == 69688bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 2080bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 2000bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1920bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2004bv64);
  free ensures (memory_load64_le($mem, 69688bv64) == 69688bv64);

implementation p$main_2004()
{
  var #Cse0__5_5: bv64;
  var #Cse0__5_6: bv64;
  var #Gamma_Cse0__5_5: bool;
  var #Gamma_Cse0__5_6: bool;
  var #Gamma_load13: bool;
  var #Gamma_load14: bool;
  var #Gamma_load15: bool;
  var #Gamma_load16: bool;
  var #Gamma_load17: bool;
  var #Gamma_load19: bool;
  var #load13: bv64;
  var #load14: bv64;
  var #load15: bv64;
  var #load16: bv64;
  var #load17: bv64;
  var #load19: bv64;
  b#main_entry:
    assume {:captureState "main_entry (AaLXFLvRTeKg3QkcY/Eoyw==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551584bv64), $Gamma_R31;
    #Cse0__5_5, #Gamma_Cse0__5_5 := bvadd64($R31, 16bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_5, $R29), gamma_store64($Gamma_stack, #Cse0__5_5, $Gamma_R29);
    assume {:captureState "2008_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_5, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_5, 8bv64), $Gamma_R30);
    assume {:captureState "2008_2"} true;
    $R29, $Gamma_R29 := bvadd64($R31, 16bv64), $Gamma_R31;
    $R0, $Gamma_R0 := 4bv64, true;
    $R30, $Gamma_R30 := 2024bv64, true;
    goto b#FUN_650_entry_31;
  b#FUN_650_entry_31:
    assume {:captureState "FUN_650_entry_31"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load13, #Gamma_load13 := memory_load64_le($mem, bvadd64($R16, 16bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 16bv64)) || L($mem, bvadd64($R16, 16bv64)));
    $R17, $Gamma_R17 := #load13, #Gamma_load13;
    $R16, $Gamma_R16 := bvadd64($R16, 16bv64), $Gamma_R16;
    call p$malloc();
    goto b#FUN_650_basil_return_1_32;
  b#FUN_650_basil_return_1_32:
    assume {:captureState "FUN_650_basil_return_1_32"} true;
    goto b#_inlineret_4;
  b#_inlineret_4:
    assume {:captureState "_inlineret_4 (AaLXFLvRTeKg3QkcY/Eoyw==)"} true;
    goto b#main_5;
  b#main_5:
    assume {:captureState "main_5 (sf+3otWHTPClXjl5/L1xPQ==)"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 8bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 8bv64), $Gamma_R0);
    assume {:captureState "2024_0"} true;
    #load16, #Gamma_load16 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R9, $Gamma_R9 := #load16, #Gamma_load16;
    $R8, $Gamma_R8 := 1bv64, true;
    call p$rely();
    assert (L($mem, $R9) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store32_le($mem, $R9, $R8[32:0]), gamma_store32($Gamma_mem, $R9, $Gamma_R8);
    assume {:captureState "2036_0"} true;
    #load17, #Gamma_load17 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R0, $Gamma_R0 := #load17, #Gamma_load17;
    $R30, $Gamma_R30 := 2048bv64, true;
    goto b#FUN_680_entry_29;
  b#FUN_680_entry_29:
    assume {:captureState "FUN_680_entry_29"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load19, #Gamma_load19 := memory_load64_le($mem, bvadd64($R16, 40bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 40bv64)) || L($mem, bvadd64($R16, 40bv64)));
    $R17, $Gamma_R17 := #load19, #Gamma_load19;
    $R16, $Gamma_R16 := bvadd64($R16, 40bv64), $Gamma_R16;
    call p$#free();
    goto b#FUN_680_basil_return_1_30;
  b#FUN_680_basil_return_1_30:
    assume {:captureState "FUN_680_basil_return_1_30"} true;
    goto b#_inlineret_3;
  b#_inlineret_3:
    assume {:captureState "_inlineret_3 (sf+3otWHTPClXjl5/L1xPQ==)"} true;
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (GmXGrcwFTMKJEOfTLmGTjg==)"} true;
    #Cse0__5_6, #Gamma_Cse0__5_6 := bvadd64($R31, 16bv64), $Gamma_R31;
    #load14, #Gamma_load14 := memory_load64_le($stack, #Cse0__5_6), gamma_load64($Gamma_stack, #Cse0__5_6);
    $R29, $Gamma_R29 := #load14, #Gamma_load14;
    #load15, #Gamma_load15 := memory_load64_le($stack, bvadd64(#Cse0__5_6, 8bv64)), gamma_load64($Gamma_stack, bvadd64(#Cse0__5_6, 8bv64));
    $R30, $Gamma_R30 := #load15, #Gamma_load15;
    $R31, $Gamma_R31 := bvadd64($R31, 32bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

