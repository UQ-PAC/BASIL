var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2080bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 2080bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69064bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2004bv64);
  free ensures (memory_load64_le(mem, 69688bv64) == 69688bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure #free_1664();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load32_le(mem, 2080bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69064bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2004bv64);
  free requires (memory_load64_le(mem, 69688bv64) == 69688bv64);
  free ensures (memory_load32_le(mem, 2080bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69064bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2004bv64);
  free ensures (memory_load64_le(mem, 69688bv64) == 69688bv64);

procedure main_2004();
  modifies Gamma_R0, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R16, R17, R29, R30, R31, R8, R9, mem, stack;
  free requires (memory_load64_le(mem, 69680bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69688bv64) == 69688bv64);
  free requires (memory_load32_le(mem, 2080bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69064bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2004bv64);
  free requires (memory_load64_le(mem, 69688bv64) == 69688bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 2080bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69064bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2004bv64);
  free ensures (memory_load64_le(mem, 69688bv64) == 69688bv64);

implementation main_2004()
{
  var #4: bv64;
  var #5: bv64;
  var Gamma_#4: bool;
  var Gamma_#5: bool;
  var Gamma_load19: bool;
  var Gamma_load20: bool;
  var Gamma_load21: bool;
  var Gamma_load22: bool;
  var load19: bv64;
  var load20: bv64;
  var load21: bv64;
  var load22: bv64;
  lmain:
    assume {:captureState "lmain"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    #4, Gamma_#4 := bvadd64(R31, 16bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #4, R29), gamma_store64(Gamma_stack, #4, Gamma_R29);
    assume {:captureState "%000002f2"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#4, 8bv64), Gamma_R30);
    assume {:captureState "%000002f8"} true;
    R29, Gamma_R29 := bvadd64(R31, 16bv64), Gamma_R31;
    R0, Gamma_R0 := 4bv64, true;
    R30, Gamma_R30 := 2024bv64, true;
    call malloc_1616();
    goto l0000030d;
  l0000030d:
    assume {:captureState "l0000030d"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 8bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R0);
    assume {:captureState "%00000313"} true;
    load19, Gamma_load19 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R9, Gamma_R9 := load19, Gamma_load19;
    R8, Gamma_R8 := 1bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "%00000327"} true;
    load20, Gamma_load20 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R0, Gamma_R0 := load20, Gamma_load20;
    R30, Gamma_R30 := 2048bv64, true;
    call #free_1664();
    goto l00000338;
  l00000338:
    assume {:captureState "l00000338"} true;
    #5, Gamma_#5 := bvadd64(R31, 16bv64), Gamma_R31;
    load21, Gamma_load21 := memory_load64_le(stack, #5), gamma_load64(Gamma_stack, #5);
    R29, Gamma_R29 := load21, Gamma_load21;
    load22, Gamma_load22 := memory_load64_le(stack, bvadd64(#5, 8bv64)), gamma_load64(Gamma_stack, bvadd64(#5, 8bv64));
    R30, Gamma_R30 := load22, Gamma_load22;
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto main_2004_basil_return;
  main_2004_basil_return:
    assume {:captureState "main_2004_basil_return"} true;
    return;
}

procedure malloc_1616();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load32_le(mem, 2080bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69064bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2004bv64);
  free requires (memory_load64_le(mem, 69688bv64) == 69688bv64);
  free ensures (memory_load32_le(mem, 2080bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69064bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2004bv64);
  free ensures (memory_load64_le(mem, 69688bv64) == 69688bv64);

