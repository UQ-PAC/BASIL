000006cd: program
0000069b: sub __cxa_finalize(__cxa_finalize_result)
000006ce: __cxa_finalize_result :: out u32 = low:32[R0]

00000425:
0000051d: R16 := 0x20000
00000524: R17 := mem[R16 + 8, el]:u64
0000052a: R16 := R16 + 8
0000052f: call R17 with noreturn

0000069c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006cf: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c3:
000002c7: #3 := R31 - 0x20
000002cd: mem := mem with [#3, el]:u64 <- R29
000002d3: mem := mem with [#3 + 8, el]:u64 <- R30
000002d7: R31 := #3
000002dd: R29 := R31
000002e5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ea: R19 := 0x20000
000002f1: R0 := pad:64[mem[R19 + 0x30]]
000002f7: when 0:0[R0] goto %000002f5
000006c3: goto %000003ee

000003ee:
000003f1: R0 := 0x1F000
000003f8: R0 := mem[R0 + 0xFC8, el]:u64
000003fe: when R0 = 0 goto %000003fc
000006c4: goto %00000415

00000415:
00000418: R0 := 0x20000
0000041f: R0 := mem[R0 + 0x28, el]:u64
00000424: R30 := 0x6F0
00000427: call @__cxa_finalize with return %000003fc

000003fc:
00000404: R30 := 0x6F4
00000406: call @deregister_tm_clones with return %00000408

00000408:
0000040b: R0 := 1
00000413: mem := mem with [R19 + 0x30] <- 7:0[R0]
000006c5: goto %000002f5

000002f5:
000002ff: R19 := mem[R31 + 0x10, el]:u64
00000306: R29 := mem[R31, el]:u64
0000030b: R30 := mem[R31 + 8, el]:u64
0000030f: R31 := R31 + 0x20
00000314: call R30 with noreturn

000006a0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006d0: __libc_start_main_main :: in u64 = R0
000006d1: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006d2: __libc_start_main_arg3 :: in out u64 = R2
000006d3: __libc_start_main_auxv :: in out u64 = R3
000006d4: __libc_start_main_result :: out u32 = low:32[R0]

0000021c:
00000507: R16 := 0x20000
0000050e: R17 := mem[R16, el]:u64
00000514: R16 := R16
00000519: call R17 with noreturn

000006a1: sub _fini(_fini_result)
000006d5: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000006a2: sub _init(_init_result)
000006d6: _init_result :: out u32 = low:32[R0]

000005e0:
000005e6: #5 := R31 - 0x10
000005ec: mem := mem with [#5, el]:u64 <- R29
000005f2: mem := mem with [#5 + 8, el]:u64 <- R30
000005f6: R31 := #5
000005fc: R29 := R31
00000601: R30 := 0x590
00000603: call @call_weak_fn with return %00000605

00000605:
0000060a: R29 := mem[R31, el]:u64
0000060f: R30 := mem[R31 + 8, el]:u64
00000613: R31 := R31 + 0x10
00000618: call R30 with noreturn

000006a3: sub _start(_start_result)
000006d7: _start_result :: out u32 = low:32[R0]

000001dd:
000001e2: R29 := 0
000001e7: R30 := 0
000001ed: R5 := R0
000001f4: R1 := mem[R31, el]:u64
000001fa: R2 := R31 + 8
00000200: R6 := R31
00000205: R0 := 0x1F000
0000020c: R0 := mem[R0 + 0xFD8, el]:u64
00000211: R3 := 0
00000216: R4 := 0
0000021b: R30 := 0x630
0000021e: call @__libc_start_main with return %00000220

00000220:
00000223: R30 := 0x634
00000226: call @abort with return %000006c6

000006c6:
000006c7: call @call_weak_fn with noreturn

000006a6: sub abort()


00000224:
00000549: R16 := 0x20000
00000550: R17 := mem[R16 + 0x18, el]:u64
00000556: R16 := R16 + 0x18
0000055b: call R17 with noreturn

000006a7: sub call_weak_fn(call_weak_fn_result)
000006d8: call_weak_fn_result :: out u32 = low:32[R0]

00000228:
0000022b: R0 := 0x1F000
00000232: R0 := mem[R0 + 0xFD0, el]:u64
00000238: when R0 = 0 goto %00000236
000006c8: goto %00000465

00000236:
0000023e: call R30 with noreturn

00000465:
00000468: goto @__gmon_start__

00000466:
00000533: R16 := 0x20000
0000053a: R17 := mem[R16 + 0x10, el]:u64
00000540: R16 := R16 + 0x10
00000545: call R17 with noreturn

000006a9: sub deregister_tm_clones(deregister_tm_clones_result)
000006d9: deregister_tm_clones_result :: out u32 = low:32[R0]

00000244:
00000247: R0 := 0x20000
0000024d: R0 := R0 + 0x30
00000252: R1 := 0x20000
00000258: R1 := R1 + 0x30
0000025e: #1 := ~R0
00000263: #2 := R1 + ~R0
00000269: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000026f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000273: ZF := #2 + 1 = 0
00000277: NF := 63:63[#2 + 1]
0000027d: when ZF goto %0000027b
000006c9: goto %00000447

00000447:
0000044a: R1 := 0x1F000
00000451: R1 := mem[R1 + 0xFC0, el]:u64
00000456: when R1 = 0 goto %0000027b
000006ca: goto %0000045a

0000027b:
00000283: call R30 with noreturn

0000045a:
0000045e: R16 := R1
00000463: call R16 with noreturn

000006ac: sub frame_dummy(frame_dummy_result)
000006da: frame_dummy_result :: out u32 = low:32[R0]

0000031a:
0000031c: call @register_tm_clones with noreturn

000006ad: sub main(main_argc, main_argv, main_result)
000006db: main_argc :: in u32 = low:32[R0]
000006dc: main_argv :: in out u64 = R1
000006dd: main_result :: out u32 = low:32[R0]

0000031e:
00000322: R31 := R31 - 0x20
0000032a: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000332: mem := mem with [R31, el]:u64 <- R1
00000337: R0 := 2
0000033f: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000344: R0 := 3
0000034c: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
00000353: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
0000035a: R0 := pad:64[mem[R31 + 0x18, el]:u32]
00000361: R0 := pad:64[31:0[R1] ^ 31:0[R0]]
00000369: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R0]
00000370: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
00000377: R0 := pad:64[mem[R31 + 0x14, el]:u32]
0000037e: R0 := pad:64[31:0[R1] | 31:0[R0]]
00000386: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
0000038b: R0 := 0x1E
00000393: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000398: R0 := 0x11
000003a0: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
000003a7: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000003ae: R1 := pad:64[mem[R31 + 0x18, el]:u32]
000003bc: when 31:0[R1] = 0 goto %000003b3
000003bd: goto %000003b8

000003b8:
000003b9: R2 := pad:64[31:0[extend:33[31:0[R0]] /$ extend:33[31:0[R1]]]]
000003bf: goto %000003bb

000003b3:
000003b4: R2 := 0
000003be: goto %000003bb

000003bb:
000003c6: R1 := pad:64[mem[R31 + 0x18, el]:u32]
000003cd: R1 := pad:64[31:0[pad:64[31:0[R2]] * pad:64[31:0[R1]]]]
000003d4: R0 := pad:64[31:0[R0] + ~31:0[R1] + 1]
000003dc: mem := mem with [R31 + 0x14, el]:u32 <- 31:0[R0]
000003e1: R0 := 0
000003e7: R31 := R31 + 0x20
000003ec: call R30 with noreturn

000006ae: sub register_tm_clones(register_tm_clones_result)
000006de: register_tm_clones_result :: out u32 = low:32[R0]

00000285:
00000288: R0 := 0x20000
0000028e: R0 := R0 + 0x30
00000293: R1 := 0x20000
00000299: R1 := R1 + 0x30
000002a0: R1 := R1 + ~R0 + 1
000002a6: R2 := 0.63:63[R1]
000002ad: R1 := R2 + (R1 ~>> 3)
000002b3: R1 := extend:64[63:1[R1]]
000002b9: when R1 = 0 goto %000002b7
000006cb: goto %00000429

00000429:
0000042c: R2 := 0x1F000
00000433: R2 := mem[R2 + 0xFE0, el]:u64
00000438: when R2 = 0 goto %000002b7
000006cc: goto %0000043c

000002b7:
000002bf: call R30 with noreturn

0000043c:
00000440: R16 := R2
00000445: call R16 with noreturn
