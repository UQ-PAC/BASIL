var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1948bv64);
function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvneg"} bvneg32(bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvor"} bvor32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvsdiv"} bvsdiv33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvxor"} bvxor32(bv32, bv32) returns (bv32);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:inline} byte_extract64_64(value: bv64, offset: bv64) returns (bv8) {
  bvlshr64(value,bvmul64(offset,8bv64))[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then byte_extract64_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1948bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1949bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1950bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1951bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main(R0_in: bv64, Gamma_R0_in: bool, R1_in: bv64, Gamma_R1_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R2_out: bv64, Gamma_R2_out: bool, R31_out: bv64, Gamma_R31_out: bool);
  modifies Gamma_stack, stack;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 1948bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1949bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1950bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1951bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 1948bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1949bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1950bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1951bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R1_in: bv64, Gamma_R1_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R2_out: bv64, Gamma_R2_out: bool, R31_out: bv64, Gamma_R31_out: bool)
{
  var Gamma_R0_10: bool;
  var Gamma_R0_13: bool;
  var Gamma_R0_4: bool;
  var Gamma_R0_5: bool;
  var Gamma_R0_6: bool;
  var Gamma_R0_7: bool;
  var Gamma_R1_2: bool;
  var Gamma_R1_3: bool;
  var Gamma_R1_4: bool;
  var Gamma_R1_5: bool;
  var Gamma_R1_6: bool;
  var Gamma_R2_1: bool;
  var Gamma_R2_4: bool;
  var R0_10: bv32;
  var R0_13: bv32;
  var R0_4: bv32;
  var R0_5: bv32;
  var R0_6: bv32;
  var R0_7: bv32;
  var R1_2: bv32;
  var R1_3: bv32;
  var R1_4: bv32;
  var R1_5: bv32;
  var R1_6: bv64;
  var R2_1: bv64;
  var R2_4: bv64;
  $main$__0__$B9tkaGtQRX6xFjqGS87lEw:
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551596bv64), R0_in[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64), Gamma_R0_in);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551584bv64), R1_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551584bv64), Gamma_R1_in);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), 2bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), true);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), 3bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), true);
    R1_2, Gamma_R1_2 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551604bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64));
    R0_4, Gamma_R0_4 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551608bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64));
    R0_5, Gamma_R0_5 := bvxor32(R1_2, R0_4), (Gamma_R0_4 && Gamma_R1_2);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), R0_5), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), Gamma_R0_5);
    R1_3, Gamma_R1_3 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551604bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64));
    R0_6, Gamma_R0_6 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551612bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64));
    R0_7, Gamma_R0_7 := bvor32(R1_3, R0_6), (Gamma_R0_6 && Gamma_R1_3);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), R0_7), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), Gamma_R0_7);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), 30bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), true);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), 17bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), true);
    R0_10, Gamma_R0_10 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551604bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64));
    R1_4, Gamma_R1_4 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551608bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64));
    assert Gamma_R1_4;
    goto $main$__0__$B9tkaGtQRX6xFjqGS87lEw$__0, $main$__0__$B9tkaGtQRX6xFjqGS87lEw$__1;
  $main$__0__$B9tkaGtQRX6xFjqGS87lEw$__1:
    assume (!(R1_4 == 0bv32));
    R2_1, Gamma_R2_1 := zero_extend32_32(bvsdiv33(sign_extend1_32(R0_10), sign_extend1_32(R1_4))[32:0]), (Gamma_R1_4 && Gamma_R0_10);
    R2_4, Gamma_R2_4 := R2_1, Gamma_R2_1;
    goto $main$__0__$B9tkaGtQRX6xFjqGS87lEw$__2;
  $main$__0__$B9tkaGtQRX6xFjqGS87lEw$__0:
    assume (R1_4 == 0bv32);
    R2_4, Gamma_R2_4 := 0bv64, true;
    goto $main$__0__$B9tkaGtQRX6xFjqGS87lEw$__2;
  $main$__0__$B9tkaGtQRX6xFjqGS87lEw$__2:
    R1_5, Gamma_R1_5 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551608bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64));
    R1_6, Gamma_R1_6 := zero_extend32_32(bvmul64(zero_extend32_32(R2_4[32:0]), zero_extend32_32(R1_5))[32:0]), (Gamma_R1_5 && Gamma_R2_4);
    R0_13, Gamma_R0_13 := bvadd32(R0_10, bvneg32(R1_6[32:0])), (Gamma_R1_6 && Gamma_R0_10);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), R0_13), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), Gamma_R0_13);
    goto main_basil_return;
  main_basil_return:
    R0_out, R1_out, R2_out, R31_out := 0bv64, R1_6, R2_4, R31_in;
    Gamma_R0_out, Gamma_R1_out, Gamma_R2_out, Gamma_R31_out := true, Gamma_R1_6, Gamma_R2_4, Gamma_R31_in;
    return;
}

