000006d9: program
000006c3: sub __cxa_finalize(__cxa_finalize_result)
000006da: __cxa_finalize_result :: out u32 = low:32[R0]

0000044b:
00000543: R16 := 0x11000
0000054a: R17 := mem[R16 + 8, el]:u64
00000550: R16 := R16 + 8
00000555: call R17 with noreturn

000006c4: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006db: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c6:
000002ca: #3 := R31 - 0x20
000002d0: mem := mem with [#3, el]:u64 <- R29
000002d6: mem := mem with [#3 + 8, el]:u64 <- R30
000002da: R31 := #3
000002e0: R29 := R31
000002e8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ed: R19 := 0x11000
000002f4: R0 := pad:64[mem[R19 + 0x30]]
000002fb: when 31:0[R0] <> 0 goto %000002f9
000006c5: goto %00000414

00000414:
00000417: R0 := 0x10000
0000041e: R0 := mem[R0 + 0xFC8, el]:u64
00000424: when R0 = 0 goto %00000422
000006c6: goto %0000043b

0000043b:
0000043e: R0 := 0x11000
00000445: R0 := mem[R0 + 0x28, el]:u64
0000044a: R30 := 0x6F0
0000044d: call @__cxa_finalize with return %00000422

00000422:
0000042a: R30 := 0x6F4
0000042c: call @deregister_tm_clones with return %0000042e

0000042e:
00000431: R0 := 1
00000439: mem := mem with [R19 + 0x30] <- 7:0[R0]
000006c7: goto %000002f9

000002f9:
00000303: R19 := mem[R31 + 0x10, el]:u64
0000030a: R29 := mem[R31, el]:u64
0000030f: R30 := mem[R31 + 8, el]:u64
00000313: R31 := R31 + 0x20
00000318: call R30 with noreturn

000006c8: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006dc: __libc_start_main_main :: in u64 = R0
000006dd: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006de: __libc_start_main_arg3 :: in out u64 = R2
000006df: __libc_start_main_auxv :: in out u64 = R3
000006e0: __libc_start_main_result :: out u32 = low:32[R0]

0000021f:
0000052d: R16 := 0x11000
00000534: R17 := mem[R16, el]:u64
0000053a: R16 := R16
0000053f: call R17 with noreturn

000006c9: sub _fini(_fini_result)
000006e1: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000006ca: sub _init(_init_result)
000006e2: _init_result :: out u32 = low:32[R0]

00000607:
0000060d: #7 := R31 - 0x10
00000613: mem := mem with [#7, el]:u64 <- R29
00000619: mem := mem with [#7 + 8, el]:u64 <- R30
0000061d: R31 := #7
00000623: R29 := R31
00000628: R30 := 0x590
0000062a: call @call_weak_fn with return %0000062c

0000062c:
00000631: R29 := mem[R31, el]:u64
00000636: R30 := mem[R31 + 8, el]:u64
0000063a: R31 := R31 + 0x10
0000063f: call R30 with noreturn

000006cb: sub _start(_start_result)
000006e3: _start_result :: out u32 = low:32[R0]

000001e0:
000001e5: R29 := 0
000001ea: R30 := 0
000001f0: R5 := R0
000001f7: R1 := mem[R31, el]:u64
000001fd: R2 := R31 + 8
00000203: R6 := R31
00000208: R0 := 0x10000
0000020f: R0 := mem[R0 + 0xFD8, el]:u64
00000214: R3 := 0
00000219: R4 := 0
0000021e: R30 := 0x630
00000221: call @__libc_start_main with return %00000223

00000223:
00000226: R30 := 0x634
00000229: call @abort with return %000006cc

000006cc:
000006cd: call @call_weak_fn with noreturn

000006ce: sub abort()


00000227:
0000056f: R16 := 0x11000
00000576: R17 := mem[R16 + 0x18, el]:u64
0000057c: R16 := R16 + 0x18
00000581: call R17 with noreturn

000006cf: sub call_weak_fn(call_weak_fn_result)
000006e4: call_weak_fn_result :: out u32 = low:32[R0]

0000022b:
0000022e: R0 := 0x10000
00000235: R0 := mem[R0 + 0xFD0, el]:u64
0000023b: when R0 = 0 goto %00000239
000006d0: goto %0000048b

00000239:
00000241: call R30 with noreturn

0000048b:
0000048e: goto @__gmon_start__

0000048c:
00000559: R16 := 0x11000
00000560: R17 := mem[R16 + 0x10, el]:u64
00000566: R16 := R16 + 0x10
0000056b: call R17 with noreturn

000006d1: sub deregister_tm_clones(deregister_tm_clones_result)
000006e5: deregister_tm_clones_result :: out u32 = low:32[R0]

00000247:
0000024a: R0 := 0x11000
00000250: R0 := R0 + 0x30
00000255: R1 := 0x11000
0000025b: R1 := R1 + 0x30
00000261: #1 := ~R0
00000266: #2 := R1 + ~R0
0000026c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000272: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000276: ZF := #2 + 1 = 0
0000027a: NF := 63:63[#2 + 1]
00000280: when ZF goto %0000027e
000006d2: goto %0000046d

0000046d:
00000470: R1 := 0x10000
00000477: R1 := mem[R1 + 0xFC0, el]:u64
0000047c: when R1 = 0 goto %0000027e
000006d3: goto %00000480

0000027e:
00000286: call R30 with noreturn

00000480:
00000484: R16 := R1
00000489: call R16 with noreturn

000006d4: sub frame_dummy(frame_dummy_result)
000006e6: frame_dummy_result :: out u32 = low:32[R0]

0000031e:
00000320: call @register_tm_clones with noreturn

000006d5: sub main(main_argc, main_argv, main_result)
000006e7: main_argc :: in u32 = low:32[R0]
000006e8: main_argv :: in out u64 = R1
000006e9: main_result :: out u32 = low:32[R0]

00000322:
00000326: R31 := R31 - 0x20
0000032c: R8 := pad:64[31:0[R0]]
00000331: R0 := 0
00000338: mem := mem with [R31 + 0x1C, el]:u32 <- 0
00000340: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R8]
00000348: mem := mem with [R31 + 0x10, el]:u64 <- R1
0000034d: R8 := 2
00000355: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000035a: R8 := 3
00000362: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000369: R8 := pad:64[mem[R31 + 0xC, el]:u32]
00000370: R9 := pad:64[mem[R31 + 8, el]:u32]
00000377: R8 := pad:64[31:0[R8] ^ 31:0[R9]]
0000037f: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000386: R8 := pad:64[mem[R31 + 0xC, el]:u32]
0000038d: R9 := pad:64[mem[R31 + 4, el]:u32]
00000394: R8 := pad:64[31:0[R8] | 31:0[R9]]
0000039c: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003a1: R8 := 0x1E
000003a9: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
000003ae: R8 := 0x11
000003b6: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003bd: R8 := pad:64[mem[R31 + 0xC, el]:u32]
000003c4: R10 := pad:64[mem[R31 + 8, el]:u32]
000003d2: when 31:0[R10] = 0 goto %000003c9
000003d3: goto %000003ce

000003ce:
000003cf: R9 := pad:64[31:0[extend:33[31:0[R8]] /$ extend:33[31:0[R10]]]]
000003d5: goto %000003d1

000003c9:
000003ca: R9 := 0
000003d4: goto %000003d1

000003d1:
000003dc: R9 := pad:64[31:0[pad:64[31:0[R9]] * pad:64[31:0[R10]]]]
000003e2: #4 := ~31:0[R9]
000003e7: #5 := 31:0[R8] + ~31:0[R9]
000003ed: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] + extend:33[#4] + 1
000003f3: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] + pad:33[#4] + 1
000003f7: ZF := #5 + 1 = 0
000003fb: NF := 31:31[#5 + 1]
000003ff: R8 := pad:64[#5 + 1]
00000407: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
0000040d: R31 := R31 + 0x20
00000412: call R30 with noreturn

000006d6: sub register_tm_clones(register_tm_clones_result)
000006ea: register_tm_clones_result :: out u32 = low:32[R0]

00000288:
0000028b: R0 := 0x11000
00000291: R0 := R0 + 0x30
00000296: R1 := 0x11000
0000029c: R1 := R1 + 0x30
000002a3: R1 := R1 + ~R0 + 1
000002a9: R2 := 0.63:63[R1]
000002b0: R1 := R2 + (R1 ~>> 3)
000002b6: R1 := extend:64[63:1[R1]]
000002bc: when R1 = 0 goto %000002ba
000006d7: goto %0000044f

0000044f:
00000452: R2 := 0x10000
00000459: R2 := mem[R2 + 0xFE0, el]:u64
0000045e: when R2 = 0 goto %000002ba
000006d8: goto %00000462

000002ba:
000002c2: call R30 with noreturn

00000462:
00000466: R16 := R2
0000046b: call R16 with noreturn
