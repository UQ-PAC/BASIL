0000068b: program
00000659: sub __cxa_finalize(__cxa_finalize_result)
0000068c: __cxa_finalize_result :: out u32 = low:32[R0]

0000044b:
00000543: R16 := 0x20000
0000054a: R17 := mem[R16 + 8, el]:u64
00000550: R16 := R16 + 8
00000555: call R17 with noreturn

0000065a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000068d: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c7:
000002cb: #3 := R31 - 0x20
000002d1: mem := mem with [#3, el]:u64 <- R29
000002d7: mem := mem with [#3 + 8, el]:u64 <- R30
000002db: R31 := #3
000002e1: R29 := R31
000002e9: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ee: R19 := 0x20000
000002f5: R0 := pad:64[mem[R19 + 0x30]]
000002fb: when 0:0[R0] goto %000002f9
00000681: goto %00000414

00000414:
00000417: R0 := 0x1F000
0000041e: R0 := mem[R0 + 0xFC8, el]:u64
00000424: when R0 = 0 goto %00000422
00000682: goto %0000043b

0000043b:
0000043e: R0 := 0x20000
00000445: R0 := mem[R0 + 0x28, el]:u64
0000044a: R30 := 0x730
0000044d: call @__cxa_finalize with return %00000422

00000422:
0000042a: R30 := 0x734
0000042c: call @deregister_tm_clones with return %0000042e

0000042e:
00000431: R0 := 1
00000439: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000683: goto %000002f9

000002f9:
00000303: R19 := mem[R31 + 0x10, el]:u64
0000030a: R29 := mem[R31, el]:u64
0000030f: R30 := mem[R31 + 8, el]:u64
00000313: R31 := R31 + 0x20
00000318: call R30 with noreturn

0000065e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000068e: __libc_start_main_main :: in u64 = R0
0000068f: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000690: __libc_start_main_arg3 :: in out u64 = R2
00000691: __libc_start_main_auxv :: in out u64 = R3
00000692: __libc_start_main_result :: out u32 = low:32[R0]

00000220:
0000052d: R16 := 0x20000
00000534: R17 := mem[R16, el]:u64
0000053a: R16 := R16
0000053f: call R17 with noreturn

0000065f: sub _fini(_fini_result)
00000693: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000660: sub _init(_init_result)
00000694: _init_result :: out u32 = low:32[R0]

0000059d:
000005a3: #7 := R31 - 0x10
000005a9: mem := mem with [#7, el]:u64 <- R29
000005af: mem := mem with [#7 + 8, el]:u64 <- R30
000005b3: R31 := #7
000005b9: R29 := R31
000005be: R30 := 0x5C8
000005c0: call @call_weak_fn with return %000005c2

000005c2:
000005c7: R29 := mem[R31, el]:u64
000005cc: R30 := mem[R31 + 8, el]:u64
000005d0: R31 := R31 + 0x10
000005d5: call R30 with noreturn

00000661: sub _start(_start_result)
00000695: _start_result :: out u32 = low:32[R0]

000001e1:
000001e6: R29 := 0
000001eb: R30 := 0
000001f1: R5 := R0
000001f8: R1 := mem[R31, el]:u64
000001fe: R2 := R31 + 8
00000204: R6 := R31
00000209: R0 := 0x1F000
00000210: R0 := mem[R0 + 0xFD8, el]:u64
00000215: R3 := 0
0000021a: R4 := 0
0000021f: R30 := 0x670
00000222: call @__libc_start_main with return %00000224

00000224:
00000227: R30 := 0x674
0000022a: call @abort with return %00000684

00000684:
00000685: call @call_weak_fn with noreturn

00000664: sub abort()


00000228:
0000056f: R16 := 0x20000
00000576: R17 := mem[R16 + 0x18, el]:u64
0000057c: R16 := R16 + 0x18
00000581: call R17 with noreturn

00000665: sub call_weak_fn(call_weak_fn_result)
00000696: call_weak_fn_result :: out u32 = low:32[R0]

0000022c:
0000022f: R0 := 0x1F000
00000236: R0 := mem[R0 + 0xFD0, el]:u64
0000023c: when R0 = 0 goto %0000023a
00000686: goto %0000048b

0000023a:
00000242: call R30 with noreturn

0000048b:
0000048e: goto @__gmon_start__

0000048c:
00000559: R16 := 0x20000
00000560: R17 := mem[R16 + 0x10, el]:u64
00000566: R16 := R16 + 0x10
0000056b: call R17 with noreturn

00000667: sub deregister_tm_clones(deregister_tm_clones_result)
00000697: deregister_tm_clones_result :: out u32 = low:32[R0]

00000248:
0000024b: R0 := 0x20000
00000251: R0 := R0 + 0x30
00000256: R1 := 0x20000
0000025c: R1 := R1 + 0x30
00000262: #1 := ~R0
00000267: #2 := R1 + ~R0
0000026d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000273: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000277: ZF := #2 + 1 = 0
0000027b: NF := 63:63[#2 + 1]
00000281: when ZF goto %0000027f
00000687: goto %0000046d

0000046d:
00000470: R1 := 0x1F000
00000477: R1 := mem[R1 + 0xFC0, el]:u64
0000047c: when R1 = 0 goto %0000027f
00000688: goto %00000480

0000027f:
00000287: call R30 with noreturn

00000480:
00000484: R16 := R1
00000489: call R16 with noreturn

0000066a: sub frame_dummy(frame_dummy_result)
00000698: frame_dummy_result :: out u32 = low:32[R0]

0000031e:
00000320: call @register_tm_clones with noreturn

0000066b: sub main(main_argc, main_argv, main_result)
00000699: main_argc :: in u32 = low:32[R0]
0000069a: main_argv :: in out u64 = R1
0000069b: main_result :: out u32 = low:32[R0]

00000322:
00000326: R31 := R31 - 0x20
0000032c: R8 := pad:64[31:0[R0]]
00000331: R0 := 0
00000338: mem := mem with [R31 + 0x1C, el]:u32 <- 0
00000340: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R8]
00000348: mem := mem with [R31 + 0x10, el]:u64 <- R1
0000034d: R8 := 2
00000355: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000035a: R8 := 3
00000362: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000369: R8 := pad:64[mem[R31 + 0xC, el]:u32]
00000370: R9 := pad:64[mem[R31 + 8, el]:u32]
00000377: R8 := pad:64[31:0[R8] ^ 31:0[R9]]
0000037f: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000386: R8 := pad:64[mem[R31 + 0xC, el]:u32]
0000038d: R9 := pad:64[mem[R31 + 4, el]:u32]
00000394: R8 := pad:64[31:0[R8] | 31:0[R9]]
0000039c: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003a1: R8 := 0x1E
000003a9: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
000003ae: R8 := 0x11
000003b6: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003bd: R8 := pad:64[mem[R31 + 0xC, el]:u32]
000003c4: R10 := pad:64[mem[R31 + 8, el]:u32]
000003d2: when 31:0[R10] = 0 goto %000003c9
000003d3: goto %000003ce

000003ce:
000003cf: R9 := pad:64[31:0[extend:33[31:0[R8]] /$ extend:33[31:0[R10]]]]
000003d5: goto %000003d1

000003c9:
000003ca: R9 := 0
000003d4: goto %000003d1

000003d1:
000003dc: R9 := pad:64[31:0[pad:64[31:0[R9]] * pad:64[31:0[R10]]]]
000003e2: #4 := ~31:0[R9]
000003e7: #5 := 31:0[R8] + ~31:0[R9]
000003ed: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] + extend:33[#4] + 1
000003f3: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] + pad:33[#4] + 1
000003f7: ZF := #5 + 1 = 0
000003fb: NF := 31:31[#5 + 1]
000003ff: R8 := pad:64[#5 + 1]
00000407: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
0000040d: R31 := R31 + 0x20
00000412: call R30 with noreturn

0000066c: sub register_tm_clones(register_tm_clones_result)
0000069c: register_tm_clones_result :: out u32 = low:32[R0]

00000289:
0000028c: R0 := 0x20000
00000292: R0 := R0 + 0x30
00000297: R1 := 0x20000
0000029d: R1 := R1 + 0x30
000002a4: R1 := R1 + ~R0 + 1
000002aa: R2 := 0.63:63[R1]
000002b1: R1 := R2 + (R1 ~>> 3)
000002b7: R1 := extend:64[63:1[R1]]
000002bd: when R1 = 0 goto %000002bb
00000689: goto %0000044f

0000044f:
00000452: R2 := 0x1F000
00000459: R2 := mem[R2 + 0xFE0, el]:u64
0000045e: when R2 = 0 goto %000002bb
0000068a: goto %00000462

000002bb:
000002c3: call R30 with noreturn

00000462:
00000466: R16 := R2
0000046b: call R16 with noreturn
