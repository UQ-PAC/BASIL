000005d5: program
000005a3: sub __cxa_finalize(__cxa_finalize_result)
000005d6: __cxa_finalize_result :: out u32 = low:32[R0]

00000347:
0000043f: R16 := 0x20000
00000446: R17 := mem[R16 + 8, el]:u64
0000044c: R16 := R16 + 8
00000451: call R17 with noreturn

000005a4: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005d7: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002b5:
000002b9: #3 := R31 - 0x20
000002bf: mem := mem with [#3, el]:u64 <- R29
000002c5: mem := mem with [#3 + 8, el]:u64 <- R30
000002c9: R31 := #3
000002cf: R29 := R31
000002d7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002dc: R19 := 0x20000
000002e3: R0 := pad:64[mem[R19 + 0x30]]
000002e9: when 0:0[R0] goto %000002e7
000005cb: goto %00000310

00000310:
00000313: R0 := 0x1F000
0000031a: R0 := mem[R0 + 0xFC8, el]:u64
00000320: when R0 = 0 goto %0000031e
000005cc: goto %00000337

00000337:
0000033a: R0 := 0x20000
00000341: R0 := mem[R0 + 0x28, el]:u64
00000346: R30 := 0x730
00000349: call @__cxa_finalize with return %0000031e

0000031e:
00000326: R30 := 0x734
00000328: call @deregister_tm_clones with return %0000032a

0000032a:
0000032d: R0 := 1
00000335: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005cd: goto %000002e7

000002e7:
000002f1: R19 := mem[R31 + 0x10, el]:u64
000002f8: R29 := mem[R31, el]:u64
000002fd: R30 := mem[R31 + 8, el]:u64
00000301: R31 := R31 + 0x20
00000306: call R30 with noreturn

000005a8: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005d8: __libc_start_main_main :: in u64 = R0
000005d9: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005da: __libc_start_main_arg3 :: in out u64 = R2
000005db: __libc_start_main_auxv :: in out u64 = R3
000005dc: __libc_start_main_result :: out u32 = low:32[R0]

0000020e:
00000429: R16 := 0x20000
00000430: R17 := mem[R16, el]:u64
00000436: R16 := R16
0000043b: call R17 with noreturn

000005a9: sub _fini(_fini_result)
000005dd: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005aa: sub _init(_init_result)
000005de: _init_result :: out u32 = low:32[R0]

000004f5:
000004fb: #5 := R31 - 0x10
00000501: mem := mem with [#5, el]:u64 <- R29
00000507: mem := mem with [#5 + 8, el]:u64 <- R30
0000050b: R31 := #5
00000511: R29 := R31
00000516: R30 := 0x590
00000518: call @call_weak_fn with return %0000051a

0000051a:
0000051f: R29 := mem[R31, el]:u64
00000524: R30 := mem[R31 + 8, el]:u64
00000528: R31 := R31 + 0x10
0000052d: call R30 with noreturn

000005ab: sub _start(_start_result)
000005df: _start_result :: out u32 = low:32[R0]

000001cf:
000001d4: R29 := 0
000001d9: R30 := 0
000001df: R5 := R0
000001e6: R1 := mem[R31, el]:u64
000001ec: R2 := R31 + 8
000001f2: R6 := R31
000001f7: R0 := 0x1F000
000001fe: R0 := mem[R0 + 0xFD8, el]:u64
00000203: R3 := 0
00000208: R4 := 0
0000020d: R30 := 0x670
00000210: call @__libc_start_main with return %00000212

00000212:
00000215: R30 := 0x674
00000218: call @abort with return %000005ce

000005ce:
000005cf: call @call_weak_fn with noreturn

000005ae: sub abort()


00000216:
0000046b: R16 := 0x20000
00000472: R17 := mem[R16 + 0x18, el]:u64
00000478: R16 := R16 + 0x18
0000047d: call R17 with noreturn

000005af: sub call_weak_fn(call_weak_fn_result)
000005e0: call_weak_fn_result :: out u32 = low:32[R0]

0000021a:
0000021d: R0 := 0x1F000
00000224: R0 := mem[R0 + 0xFD0, el]:u64
0000022a: when R0 = 0 goto %00000228
000005d0: goto %00000387

00000228:
00000230: call R30 with noreturn

00000387:
0000038a: goto @__gmon_start__

00000388:
00000455: R16 := 0x20000
0000045c: R17 := mem[R16 + 0x10, el]:u64
00000462: R16 := R16 + 0x10
00000467: call R17 with noreturn

000005b1: sub deregister_tm_clones(deregister_tm_clones_result)
000005e1: deregister_tm_clones_result :: out u32 = low:32[R0]

00000236:
00000239: R0 := 0x20000
0000023f: R0 := R0 + 0x30
00000244: R1 := 0x20000
0000024a: R1 := R1 + 0x30
00000250: #1 := ~R0
00000255: #2 := R1 + ~R0
0000025b: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000261: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000265: ZF := #2 + 1 = 0
00000269: NF := 63:63[#2 + 1]
0000026f: when ZF goto %0000026d
000005d1: goto %00000369

00000369:
0000036c: R1 := 0x1F000
00000373: R1 := mem[R1 + 0xFC0, el]:u64
00000378: when R1 = 0 goto %0000026d
000005d2: goto %0000037c

0000026d:
00000275: call R30 with noreturn

0000037c:
00000380: R16 := R1
00000385: call R16 with noreturn

000005b4: sub frame_dummy(frame_dummy_result)
000005e2: frame_dummy_result :: out u32 = low:32[R0]

0000030c:
0000030e: call @register_tm_clones with noreturn

000005b5: sub main(main_argc, main_argv, main_result)
000005e3: main_argc :: in u32 = low:32[R0]
000005e4: main_argv :: in out u64 = R1
000005e5: main_result :: out u32 = low:32[R0]

000001a9:
000001ac: R0 := 0
000001b1: call R30 with noreturn

000005b6: sub register_tm_clones(register_tm_clones_result)
000005e6: register_tm_clones_result :: out u32 = low:32[R0]

00000277:
0000027a: R0 := 0x20000
00000280: R0 := R0 + 0x30
00000285: R1 := 0x20000
0000028b: R1 := R1 + 0x30
00000292: R1 := R1 + ~R0 + 1
00000298: R2 := 0.63:63[R1]
0000029f: R1 := R2 + (R1 ~>> 3)
000002a5: R1 := extend:64[63:1[R1]]
000002ab: when R1 = 0 goto %000002a9
000005d3: goto %0000034b

0000034b:
0000034e: R2 := 0x1F000
00000355: R2 := mem[R2 + 0xFE0, el]:u64
0000035a: when R2 = 0 goto %000002a9
000005d4: goto %0000035e

000002a9:
000002b1: call R30 with noreturn

0000035e:
00000362: R16 := R2
00000367: call R16 with noreturn
