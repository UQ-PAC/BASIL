00000517: program
000004e5: sub __cxa_finalize(__cxa_finalize_result)
00000518: __cxa_finalize_result :: out u32 = low:32[R0]

000002f3:
000003eb: R16 := 0x20000
000003f2: R17 := mem[R16 + 8, el]:u64
000003f8: R16 := R16 + 8
000003fd: call R17 with noreturn

000004e6: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000519: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000257:
0000025b: #3 := R31 - 0x20
00000261: mem := mem with [#3, el]:u64 <- R29
00000267: mem := mem with [#3 + 8, el]:u64 <- R30
0000026b: R31 := #3
00000271: R29 := R31
00000279: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000027e: R19 := 0x20000
00000285: R0 := pad:64[mem[R19 + 0x30]]
0000028b: when 0:0[R0] goto %00000289
0000050d: goto %000002bc

000002bc:
000002bf: R0 := 0x1F000
000002c6: R0 := mem[R0 + 0xFC8, el]:u64
000002cc: when R0 = 0 goto %000002ca
0000050e: goto %000002e3

000002e3:
000002e6: R0 := 0x20000
000002ed: R0 := mem[R0 + 0x28, el]:u64
000002f2: R30 := 0x730
000002f5: call @__cxa_finalize with return %000002ca

000002ca:
000002d2: R30 := 0x734
000002d4: call @deregister_tm_clones with return %000002d6

000002d6:
000002d9: R0 := 1
000002e1: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000050f: goto %00000289

00000289:
00000293: R19 := mem[R31 + 0x10, el]:u64
0000029a: R29 := mem[R31, el]:u64
0000029f: R30 := mem[R31 + 8, el]:u64
000002a3: R31 := R31 + 0x20
000002a8: call R30 with noreturn

000004ea: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000051a: __libc_start_main_main :: in u64 = R0
0000051b: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000051c: __libc_start_main_arg3 :: in out u64 = R2
0000051d: __libc_start_main_auxv :: in out u64 = R3
0000051e: __libc_start_main_result :: out u32 = low:32[R0]

000001b0:
000003d5: R16 := 0x20000
000003dc: R17 := mem[R16, el]:u64
000003e2: R16 := R16
000003e7: call R17 with noreturn

000004eb: sub _fini(_fini_result)
0000051f: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000004ec: sub _init(_init_result)
00000520: _init_result :: out u32 = low:32[R0]

00000445:
0000044b: #5 := R31 - 0x10
00000451: mem := mem with [#5, el]:u64 <- R29
00000457: mem := mem with [#5 + 8, el]:u64 <- R30
0000045b: R31 := #5
00000461: R29 := R31
00000466: R30 := 0x5C8
00000468: call @call_weak_fn with return %0000046a

0000046a:
0000046f: R29 := mem[R31, el]:u64
00000474: R30 := mem[R31 + 8, el]:u64
00000478: R31 := R31 + 0x10
0000047d: call R30 with noreturn

000004ed: sub _start(_start_result)
00000521: _start_result :: out u32 = low:32[R0]

00000171:
00000176: R29 := 0
0000017b: R30 := 0
00000181: R5 := R0
00000188: R1 := mem[R31, el]:u64
0000018e: R2 := R31 + 8
00000194: R6 := R31
00000199: R0 := 0x1F000
000001a0: R0 := mem[R0 + 0xFD8, el]:u64
000001a5: R3 := 0
000001aa: R4 := 0
000001af: R30 := 0x670
000001b2: call @__libc_start_main with return %000001b4

000001b4:
000001b7: R30 := 0x674
000001ba: call @abort with return %00000510

00000510:
00000511: call @call_weak_fn with noreturn

000004f0: sub abort()


000001b8:
00000417: R16 := 0x20000
0000041e: R17 := mem[R16 + 0x18, el]:u64
00000424: R16 := R16 + 0x18
00000429: call R17 with noreturn

000004f1: sub call_weak_fn(call_weak_fn_result)
00000522: call_weak_fn_result :: out u32 = low:32[R0]

000001bc:
000001bf: R0 := 0x1F000
000001c6: R0 := mem[R0 + 0xFD0, el]:u64
000001cc: when R0 = 0 goto %000001ca
00000512: goto %00000333

000001ca:
000001d2: call R30 with noreturn

00000333:
00000336: goto @__gmon_start__

00000334:
00000401: R16 := 0x20000
00000408: R17 := mem[R16 + 0x10, el]:u64
0000040e: R16 := R16 + 0x10
00000413: call R17 with noreturn

000004f3: sub deregister_tm_clones(deregister_tm_clones_result)
00000523: deregister_tm_clones_result :: out u32 = low:32[R0]

000001d8:
000001db: R0 := 0x20000
000001e1: R0 := R0 + 0x30
000001e6: R1 := 0x20000
000001ec: R1 := R1 + 0x30
000001f2: #1 := ~R0
000001f7: #2 := R1 + ~R0
000001fd: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000203: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000207: ZF := #2 + 1 = 0
0000020b: NF := 63:63[#2 + 1]
00000211: when ZF goto %0000020f
00000513: goto %00000315

00000315:
00000318: R1 := 0x1F000
0000031f: R1 := mem[R1 + 0xFC0, el]:u64
00000324: when R1 = 0 goto %0000020f
00000514: goto %00000328

0000020f:
00000217: call R30 with noreturn

00000328:
0000032c: R16 := R1
00000331: call R16 with noreturn

000004f6: sub frame_dummy(frame_dummy_result)
00000524: frame_dummy_result :: out u32 = low:32[R0]

000002ae:
000002b0: call @register_tm_clones with noreturn

000004f7: sub main(main_argc, main_argv, main_result)
00000525: main_argc :: in u32 = low:32[R0]
00000526: main_argv :: in out u64 = R1
00000527: main_result :: out u32 = low:32[R0]

000002b2:
000002b5: R0 := 0
000002ba: call R30 with noreturn

000004f8: sub register_tm_clones(register_tm_clones_result)
00000528: register_tm_clones_result :: out u32 = low:32[R0]

00000219:
0000021c: R0 := 0x20000
00000222: R0 := R0 + 0x30
00000227: R1 := 0x20000
0000022d: R1 := R1 + 0x30
00000234: R1 := R1 + ~R0 + 1
0000023a: R2 := 0.63:63[R1]
00000241: R1 := R2 + (R1 ~>> 3)
00000247: R1 := extend:64[63:1[R1]]
0000024d: when R1 = 0 goto %0000024b
00000515: goto %000002f7

000002f7:
000002fa: R2 := 0x1F000
00000301: R2 := mem[R2 + 0xFE0, el]:u64
00000306: when R2 = 0 goto %0000024b
00000516: goto %0000030a

0000024b:
00000253: call R30 with noreturn

0000030a:
0000030e: R16 := R2
00000313: call R16 with noreturn
