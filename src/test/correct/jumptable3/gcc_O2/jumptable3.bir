000009e1: program
000009a7: sub __cxa_finalize(__cxa_finalize_result)
000009e2: __cxa_finalize_result :: out u32 = low:32[R0]

00000699:
0000079b: R16 := 0x20000
000007a2: R17 := mem[R16 + 8, el]:u64
000007a8: R16 := R16 + 8
000007ad: call R17 with noreturn

000009a8: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000009e3: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000005a0:
000005a4: #4 := R31 - 0x20
000005aa: mem := mem with [#4, el]:u64 <- R29
000005b0: mem := mem with [#4 + 8, el]:u64 <- R30
000005b4: R31 := #4
000005ba: R29 := R31
000005c2: mem := mem with [R31 + 0x10, el]:u64 <- R19
000005c7: R19 := 0x20000
000005ce: R0 := pad:64[mem[R19 + 0x34]]
000005d4: when 0:0[R0] goto %000005d2
000009d6: goto %00000662

00000662:
00000665: R0 := 0x1F000
0000066c: R0 := mem[R0 + 0xFC8, el]:u64
00000672: when R0 = 0 goto %00000670
000009d7: goto %00000689

00000689:
0000068c: R0 := 0x20000
00000693: R0 := mem[R0 + 0x28, el]:u64
00000698: R30 := 0x830
0000069b: call @__cxa_finalize with return %00000670

00000670:
00000678: R30 := 0x834
0000067a: call @deregister_tm_clones with return %0000067c

0000067c:
0000067f: R0 := 1
00000687: mem := mem with [R19 + 0x34] <- 7:0[R0]
000009d8: goto %000005d2

000005d2:
000005dc: R19 := mem[R31 + 0x10, el]:u64
000005e3: R29 := mem[R31, el]:u64
000005e8: R30 := mem[R31 + 8, el]:u64
000005ec: R31 := R31 + 0x20
000005f1: call R30 with noreturn

000009ac: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000009e4: __libc_start_main_main :: in u64 = R0
000009e5: __libc_start_main_arg2 :: in u32 = low:32[R1]
000009e6: __libc_start_main_arg3 :: in out u64 = R2
000009e7: __libc_start_main_auxv :: in out u64 = R3
000009e8: __libc_start_main_result :: out u32 = low:32[R0]

000004f9:
00000785: R16 := 0x20000
0000078c: R17 := mem[R16, el]:u64
00000792: R16 := R16
00000797: call R17 with noreturn

000009ad: sub _fini(_fini_result)
000009e9: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000009ae: sub _init(_init_result)
000009ea: _init_result :: out u32 = low:32[R0]

000008a5:
000008ab: #6 := R31 - 0x10
000008b1: mem := mem with [#6, el]:u64 <- R29
000008b7: mem := mem with [#6 + 8, el]:u64 <- R30
000008bb: R31 := #6
000008c1: R29 := R31
000008c6: R30 := 0x590
000008c8: call @call_weak_fn with return %000008ca

000008ca:
000008cf: R29 := mem[R31, el]:u64
000008d4: R30 := mem[R31 + 8, el]:u64
000008d8: R31 := R31 + 0x10
000008dd: call R30 with noreturn

000009af: sub _start(_start_result)
000009eb: _start_result :: out u32 = low:32[R0]

000004ba:
000004bf: R29 := 0
000004c4: R30 := 0
000004ca: R5 := R0
000004d1: R1 := mem[R31, el]:u64
000004d7: R2 := R31 + 8
000004dd: R6 := R31
000004e2: R0 := 0x1F000
000004e9: R0 := mem[R0 + 0xFD8, el]:u64
000004ee: R3 := 0
000004f3: R4 := 0
000004f8: R30 := 0x770
000004fb: call @__libc_start_main with return %000004fd

000004fd:
00000500: R30 := 0x774
00000503: call @abort with return %000009d9

000009d9:
000009da: call @call_weak_fn with noreturn

000009b2: sub abort()


00000501:
000007c7: R16 := 0x20000
000007ce: R17 := mem[R16 + 0x18, el]:u64
000007d4: R16 := R16 + 0x18
000007d9: call R17 with noreturn

000009b3: sub add_six(add_six_result)
000009ec: add_six_result :: out u32 = low:32[R0]

00000620:
00000623: R1 := 0x20000
0000062a: R0 := pad:64[mem[R1 + 0x30, el]:u32]
00000630: R0 := pad:64[31:0[R0] + 6]
00000638: mem := mem with [R1 + 0x30, el]:u32 <- 31:0[R0]
0000063d: call R30 with noreturn

000009b4: sub add_two(add_two_result)
000009ed: add_two_result :: out u32 = low:32[R0]

00000601:
00000604: R1 := 0x20000
0000060b: R0 := pad:64[mem[R1 + 0x30, el]:u32]
00000611: R0 := pad:64[31:0[R0] + 2]
00000619: mem := mem with [R1 + 0x30, el]:u32 <- 31:0[R0]
0000061e: call R30 with noreturn

000009b5: sub call_weak_fn(call_weak_fn_result)
000009ee: call_weak_fn_result :: out u32 = low:32[R0]

00000505:
00000508: R0 := 0x1F000
0000050f: R0 := mem[R0 + 0xFD0, el]:u64
00000515: when R0 = 0 goto %00000513
000009db: goto %000006d9

00000513:
0000051b: call R30 with noreturn

000006d9:
000006dc: goto @__gmon_start__

000006da:
000007b1: R16 := 0x20000
000007b8: R17 := mem[R16 + 0x10, el]:u64
000007be: R16 := R16 + 0x10
000007c3: call R17 with noreturn

000009b7: sub deregister_tm_clones(deregister_tm_clones_result)
000009ef: deregister_tm_clones_result :: out u32 = low:32[R0]

00000521:
00000524: R0 := 0x20000
0000052a: R0 := R0 + 0x38
0000052f: R1 := 0x20000
00000535: R1 := R1 + 0x38
0000053b: #2 := ~R0
00000540: #3 := R1 + ~R0
00000546: VF := extend:65[#3 + 1] <> extend:65[R1] + extend:65[#2] + 1
0000054c: CF := pad:65[#3 + 1] <> pad:65[R1] + pad:65[#2] + 1
00000550: ZF := #3 + 1 = 0
00000554: NF := 63:63[#3 + 1]
0000055a: when ZF goto %00000558
000009dc: goto %000006bb

000006bb:
000006be: R1 := 0x1F000
000006c5: R1 := mem[R1 + 0xFC0, el]:u64
000006ca: when R1 = 0 goto %00000558
000009dd: goto %000006ce

00000558:
00000560: call R30 with noreturn

000006ce:
000006d2: R16 := R1
000006d7: call R16 with noreturn

000009ba: sub frame_dummy(frame_dummy_result)
000009f0: frame_dummy_result :: out u32 = low:32[R0]

000005f7:
000005f9: call @register_tm_clones with noreturn

000009bb: sub main(main_argc, main_argv, main_result)
000009f1: main_argc :: in u32 = low:32[R0]
000009f2: main_argv :: in out u64 = R1
000009f3: main_result :: out u32 = low:32[R0]

000002f9:
000002fd: #1 := 31:0[R0] - 0xC
00000302: VF := extend:33[#1 + 1] <> extend:33[31:0[R0]] - 0xB
00000307: CF := pad:33[#1 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF5
0000030b: ZF := #1 + 1 = 0
0000030f: NF := 31:31[#1 + 1]
00000316: when ~(CF & ~ZF) goto %00000314
000009de: goto %000006de

00000314:
0000031c: R1 := 0
00000322: R1 := R1 + 0x8BC
0000032a: R1 := pad:64[mem[R1 + pad:64[31:0[R0]]]]
0000032f: R0 := 0x628
00000336: R1 := R0 + extend:64[7:0[R1].0]
0000033b: call R1 with noreturn

000006de:
000006e1: R0 := 1
000006e6: call R30 with noreturn

000009bd: sub register_tm_clones(register_tm_clones_result)
000009f4: register_tm_clones_result :: out u32 = low:32[R0]

00000562:
00000565: R0 := 0x20000
0000056b: R0 := R0 + 0x38
00000570: R1 := 0x20000
00000576: R1 := R1 + 0x38
0000057d: R1 := R1 + ~R0 + 1
00000583: R2 := 0.63:63[R1]
0000058a: R1 := R2 + (R1 ~>> 3)
00000590: R1 := extend:64[63:1[R1]]
00000596: when R1 = 0 goto %00000594
000009df: goto %0000069d

0000069d:
000006a0: R2 := 0x1F000
000006a7: R2 := mem[R2 + 0xFE0, el]:u64
000006ac: when R2 = 0 goto %00000594
000009e0: goto %000006b0

00000594:
0000059c: call R30 with noreturn

000006b0:
000006b4: R16 := R2
000006b9: call R16 with noreturn

000009c0: sub sub_seven(sub_seven_result)
000009f5: sub_seven_result :: out u32 = low:32[R0]

00000643:
00000646: R1 := 0x20000
0000064d: R0 := pad:64[mem[R1 + 0x30, el]:u32]
00000653: R0 := pad:64[31:0[R0] - 7]
0000065b: mem := mem with [R1 + 0x30, el]:u32 <- 31:0[R0]
00000660: call R30 with noreturn
