var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvand"} bvand1(bv1, bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2232bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2233bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2234bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2235bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 2128bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R1, Gamma_VF, Gamma_ZF, Gamma_mem, NF, R0, R1, VF, ZF, mem;
  requires (Gamma_R0 == true);
  free requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69648bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69649bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69650bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69651bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2232bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2233bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2234bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2235bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 2128bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 2048bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2232bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2233bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2234bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2235bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 2128bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main()
{
  var #1: bv32;
  var #10: bv32;
  var #11: bv32;
  var #12: bv32;
  var #13: bv32;
  var #5: bv32;
  var #6: bv32;
  var #7: bv32;
  var #8: bv32;
  var #9: bv32;
  var Gamma_#1: bool;
  var Gamma_#10: bool;
  var Gamma_#11: bool;
  var Gamma_#12: bool;
  var Gamma_#13: bool;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  var Gamma_#7: bool;
  var Gamma_#8: bool;
  var Gamma_#9: bool;
  lmain:
    assume {:captureState "lmain"} true;
    R1, Gamma_R1 := 69632bv64, true;
    #1, Gamma_#1 := bvadd32(R0[32:0], 4294967289bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#1, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934586bv33))), (Gamma_R0 && Gamma_#1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#1, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967290bv33))), (Gamma_R0 && Gamma_#1);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#1, 1bv32), 0bv32), Gamma_#1;
    NF, Gamma_NF := bvadd32(#1, 1bv32)[32:31], Gamma_#1;
    assert Gamma_ZF;
    goto lmain_goto_l00000317, lmain_goto_l00000753;
  l00000753:
    assume {:captureState "l00000753"} true;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l00000753_goto_l0000075c, l00000753_goto_l000006e8;
  l000006e8:
    assume {:captureState "l000006e8"} true;
    R1, Gamma_R1 := 69632bv64, true;
    #8, Gamma_#8 := bvadd32(R0[32:0], 4294967286bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#8, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934583bv33))), (Gamma_R0 && Gamma_#8);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#8, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967287bv33))), (Gamma_R0 && Gamma_#8);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#8, 1bv32), 0bv32), Gamma_#8;
    NF, Gamma_NF := bvadd32(#8, 1bv32)[32:31], Gamma_#8;
    assert Gamma_ZF;
    goto l000006e8_goto_l0000070c, l000006e8_goto_l000005f9;
  l000005f9:
    assume {:captureState "l000005f9"} true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 8bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%0000060c"} true;
    goto l00000360;
  l0000070c:
    assume {:captureState "l0000070c"} true;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l0000070c_goto_l00000644, l0000070c_goto_l00000715;
  l00000644:
    assume {:captureState "l00000644"} true;
    #6, Gamma_#6 := bvadd32(R0[32:0], 4294967288bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#6, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934585bv33))), (Gamma_R0 && Gamma_#6);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#6, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967289bv33))), (Gamma_R0 && Gamma_#6);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#6, 1bv32), 0bv32), Gamma_#6;
    NF, Gamma_NF := bvadd32(#6, 1bv32)[32:31], Gamma_#6;
    assert Gamma_ZF;
    goto l00000644_goto_l00000663, l00000644_goto_l00000331;
  l00000663:
    assume {:captureState "l00000663"} true;
    #7, Gamma_#7 := bvadd32(R0[32:0], 4294967287bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#7, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934584bv33))), (Gamma_R0 && Gamma_#7);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#7, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967288bv33))), (Gamma_R0 && Gamma_#7);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#7, 1bv32), 0bv32), Gamma_#7;
    NF, Gamma_NF := bvadd32(#7, 1bv32)[32:31], Gamma_#7;
    assert Gamma_ZF;
    goto l00000663_goto_l0000036b, l00000663_goto_l00000347;
  l00000715:
    assume {:captureState "l00000715"} true;
    #9, Gamma_#9 := bvadd32(R0[32:0], 4294967285bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#9, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934582bv33))), (Gamma_R0 && Gamma_#9);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#9, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967286bv33))), (Gamma_R0 && Gamma_#9);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#9, 1bv32), 0bv32), Gamma_#9;
    NF, Gamma_NF := bvadd32(#9, 1bv32)[32:31], Gamma_#9;
    assert Gamma_ZF;
    goto l00000715_goto_l00000734, l00000715_goto_l00000612;
  l00000612:
    assume {:captureState "l00000612"} true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 1bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%00000625"} true;
    goto l00000628;
  l00000734:
    assume {:captureState "l00000734"} true;
    #10, Gamma_#10 := bvadd32(R0[32:0], 4294967284bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#10, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934581bv33))), (Gamma_R0 && Gamma_#10);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#10, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967285bv33))), (Gamma_R0 && Gamma_#10);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#10, 1bv32), 0bv32), Gamma_#10;
    NF, Gamma_NF := bvadd32(#10, 1bv32)[32:31], Gamma_#10;
    assert Gamma_ZF;
    goto l00000734_goto_l0000036b, l00000734_goto_l00000628;
  l00000628:
    assume {:captureState "l00000628"} true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 4294967291bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%0000063e"} true;
    goto l00000360;
  l0000075c:
    assume {:captureState "l0000075c"} true;
    #11, Gamma_#11 := bvadd32(R0[32:0], 4294967292bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#11, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934589bv33))), (Gamma_R0 && Gamma_#11);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#11, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967293bv33))), (Gamma_R0 && Gamma_#11);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#11, 1bv32), 0bv32), Gamma_#11;
    NF, Gamma_NF := bvadd32(#11, 1bv32)[32:31], Gamma_#11;
    assert Gamma_ZF;
    goto l0000075c_goto_l0000077b, l0000075c_goto_l0000069c;
  l0000069c:
    assume {:captureState "l0000069c"} true;
    R1, Gamma_R1 := 69632bv64, true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 4294967291bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%000006b4"} true;
    goto l00000360;
  l0000077b:
    assume {:captureState "l0000077b"} true;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l0000077b_goto_l00000784, l0000077b_goto_l000005bc;
  l000005bc:
    assume {:captureState "l000005bc"} true;
    #5, Gamma_#5 := bvadd32(R0[32:0], 4294967291bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#5, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934588bv33))), (Gamma_R0 && Gamma_#5);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#5, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967292bv33))), (Gamma_R0 && Gamma_#5);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#5, 1bv32), 0bv32), Gamma_#5;
    NF, Gamma_NF := bvadd32(#5, 1bv32)[32:31], Gamma_#5;
    assert Gamma_ZF;
    goto l000005bc_goto_l00000682, l000005bc_goto_l000005d6;
  l000005d6:
    assume {:captureState "l000005d6"} true;
    R1, Gamma_R1 := 69632bv64, true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 6bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%000005f3"} true;
    goto l00000360;
  l00000682:
    assume {:captureState "l00000682"} true;
    R1, Gamma_R1 := 69632bv64, true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 8bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%0000069a"} true;
    goto l00000317;
  l00000317:
    assume {:captureState "l00000317"} true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 6bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%0000032f"} true;
    goto l00000331;
  l00000331:
    assume {:captureState "l00000331"} true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 4294967289bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%00000344"} true;
    goto l00000347;
  l00000347:
    assume {:captureState "l00000347"} true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 4294967295bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%0000035d"} true;
    goto l00000360;
  l00000784:
    assume {:captureState "l00000784"} true;
    R1, Gamma_R1 := 69632bv64, true;
    #12, Gamma_#12 := bvadd32(R0[32:0], 4294967294bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#12, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934591bv33))), (Gamma_R0 && Gamma_#12);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#12, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967295bv33))), (Gamma_R0 && Gamma_#12);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#12, 1bv32), 0bv32), Gamma_#12;
    NF, Gamma_NF := bvadd32(#12, 1bv32)[32:31], Gamma_#12;
    assert Gamma_ZF;
    goto l00000784_goto_l000006ba, l00000784_goto_l000007a8;
  l000006ba:
    assume {:captureState "l000006ba"} true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 6bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%000006cd"} true;
    goto l000006d0;
  l000007a8:
    assume {:captureState "l000007a8"} true;
    #13, Gamma_#13 := bvadd32(R0[32:0], 4294967293bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#13, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934590bv33))), (Gamma_R0 && Gamma_#13);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#13, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967294bv33))), (Gamma_R0 && Gamma_#13);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#13, 1bv32), 0bv32), Gamma_#13;
    NF, Gamma_NF := bvadd32(#13, 1bv32)[32:31], Gamma_#13;
    assert Gamma_ZF;
    goto l000007a8_goto_l00000368, l000007a8_goto_l000006d0;
  l00000368:
    assume {:captureState "l00000368"} true;
    assert Gamma_R0;
    goto l00000368_goto_l0000036b, l00000368_goto_l000005a3;
  l0000036b:
    assume {:captureState "l0000036b"} true;
    R0, Gamma_R0 := 1bv64, true;
    goto main_return;
  l000005a3:
    assume {:captureState "l000005a3"} true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 2bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%000005b6"} true;
    goto l00000360;
  l000006d0:
    assume {:captureState "l000006d0"} true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 4294967289bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%000006e6"} true;
    goto l00000360;
  l00000360:
    assume {:captureState "l00000360"} true;
    goto main_return;
  lmain_goto_l00000317:
    assume {:captureState "lmain_goto_l00000317"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l00000317;
  lmain_goto_l00000753:
    assume {:captureState "lmain_goto_l00000753"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l00000753;
  l00000753_goto_l000006e8:
    assume {:captureState "l00000753_goto_l000006e8"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l000006e8;
  l00000753_goto_l0000075c:
    assume {:captureState "l00000753_goto_l0000075c"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l0000075c;
  l000006e8_goto_l000005f9:
    assume {:captureState "l000006e8_goto_l000005f9"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l000005f9;
  l000006e8_goto_l0000070c:
    assume {:captureState "l000006e8_goto_l0000070c"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l0000070c;
  l0000070c_goto_l00000644:
    assume {:captureState "l0000070c_goto_l00000644"} true;
    assume (bvnot1(bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1))) != 0bv1);
    goto l00000644;
  l0000070c_goto_l00000715:
    assume {:captureState "l0000070c_goto_l00000715"} true;
    assume (bvnot1(bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1))) == 0bv1);
    goto l00000715;
  l00000644_goto_l00000331:
    assume {:captureState "l00000644_goto_l00000331"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l00000331;
  l00000644_goto_l00000663:
    assume {:captureState "l00000644_goto_l00000663"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l00000663;
  l00000663_goto_l0000036b:
    assume {:captureState "l00000663_goto_l0000036b"} true;
    assume (bvnot1(bvcomp1(ZF, 1bv1)) != 0bv1);
    goto l0000036b;
  l00000663_goto_l00000347:
    assume {:captureState "l00000663_goto_l00000347"} true;
    assume (bvnot1(bvcomp1(ZF, 1bv1)) == 0bv1);
    goto l00000347;
  l00000715_goto_l00000612:
    assume {:captureState "l00000715_goto_l00000612"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l00000612;
  l00000715_goto_l00000734:
    assume {:captureState "l00000715_goto_l00000734"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l00000734;
  l00000734_goto_l0000036b:
    assume {:captureState "l00000734_goto_l0000036b"} true;
    assume (bvnot1(bvcomp1(ZF, 1bv1)) != 0bv1);
    goto l0000036b;
  l00000734_goto_l00000628:
    assume {:captureState "l00000734_goto_l00000628"} true;
    assume (bvnot1(bvcomp1(ZF, 1bv1)) == 0bv1);
    goto l00000628;
  l0000075c_goto_l0000069c:
    assume {:captureState "l0000075c_goto_l0000069c"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l0000069c;
  l0000075c_goto_l0000077b:
    assume {:captureState "l0000075c_goto_l0000077b"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l0000077b;
  l0000077b_goto_l000005bc:
    assume {:captureState "l0000077b_goto_l000005bc"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l000005bc;
  l0000077b_goto_l00000784:
    assume {:captureState "l0000077b_goto_l00000784"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l00000784;
  l000005bc_goto_l000005d6:
    assume {:captureState "l000005bc_goto_l000005d6"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l000005d6;
  l000005bc_goto_l00000682:
    assume {:captureState "l000005bc_goto_l00000682"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l00000682;
  l00000784_goto_l000006ba:
    assume {:captureState "l00000784_goto_l000006ba"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l000006ba;
  l00000784_goto_l000007a8:
    assume {:captureState "l00000784_goto_l000007a8"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l000007a8;
  l000007a8_goto_l00000368:
    assume {:captureState "l000007a8_goto_l00000368"} true;
    assume (bvnot1(bvcomp1(ZF, 1bv1)) != 0bv1);
    goto l00000368;
  l000007a8_goto_l000006d0:
    assume {:captureState "l000007a8_goto_l000006d0"} true;
    assume (bvnot1(bvcomp1(ZF, 1bv1)) == 0bv1);
    goto l000006d0;
  l00000368_goto_l0000036b:
    assume {:captureState "l00000368_goto_l0000036b"} true;
    assume (bvnot1(bvcomp32(R0[32:0], 0bv32)) != 0bv1);
    goto l0000036b;
  l00000368_goto_l000005a3:
    assume {:captureState "l00000368_goto_l000005a3"} true;
    assume (bvnot1(bvcomp32(R0[32:0], 0bv32)) == 0bv1);
    goto l000005a3;
  main_return:
    assume {:captureState "main_return"} true;
    return;
}

