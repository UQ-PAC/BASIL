var Gamma_R0: bool;
var Gamma_R1: bool;
var Gamma_mem: [bv64]bool;
var R0: bv64;
var R1: bv64;
var mem: [bv64]bv8;
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvand"} bvand1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure main()
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  requires (Gamma_R0 == true);
  free requires (memory_load8_le(mem, 2232bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2233bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2234bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2235bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69528bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69529bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69530bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69531bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69532bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69533bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69534bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69535bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69536bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69537bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69538bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69539bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69540bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69541bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69542bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69543bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69544bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69545bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69546bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69547bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69548bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69549bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69550bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69551bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69552bv64) == 160bv8);
  free requires (memory_load8_le(mem, 69553bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69554bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69555bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69556bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69557bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69558bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69559bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69560bv64) == 160bv8);
  free requires (memory_load8_le(mem, 69561bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69562bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69563bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69564bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69565bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69566bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69567bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69568bv64) == 160bv8);
  free requires (memory_load8_le(mem, 69569bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69570bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69571bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69572bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69573bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69574bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69575bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69576bv64) == 160bv8);
  free requires (memory_load8_le(mem, 69577bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69578bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69579bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69580bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69581bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69582bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69583bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69584bv64) == 168bv8);
  free requires (memory_load8_le(mem, 69585bv64) == 13bv8);
  free requires (memory_load8_le(mem, 69586bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69587bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69588bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69589bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69590bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69591bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69592bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69593bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69594bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69600bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69601bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69602bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69603bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69604bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69605bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69606bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69607bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69608bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69609bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69610bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69611bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69612bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69613bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69614bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69615bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69616bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69617bv64) == 6bv8);
  free requires (memory_load8_le(mem, 69618bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69619bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69620bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69621bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69622bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69623bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69624bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69625bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69626bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69627bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69628bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69629bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69630bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69631bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69648bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69649bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69650bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69651bv64) == 0bv8);
{
  var #1: bv32;
  var #10: bv32;
  var #11: bv32;
  var #12: bv32;
  var #13: bv32;
  var #5: bv32;
  var #6: bv32;
  var #7: bv32;
  var #8: bv32;
  var #9: bv32;
  var CF: bv1;
  var Gamma_#1: bool;
  var Gamma_#10: bool;
  var Gamma_#11: bool;
  var Gamma_#12: bool;
  var Gamma_#13: bool;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  var Gamma_#7: bool;
  var Gamma_#8: bool;
  var Gamma_#9: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var VF: bv1;
  var ZF: bv1;
  lmain:
    R1, Gamma_R1 := 69632bv64, true;
    #1, Gamma_#1 := bvadd32(R0[32:0], 4294967289bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#1, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934586bv33))), (Gamma_R0 && Gamma_#1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#1, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967290bv33))), (Gamma_R0 && Gamma_#1);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#1, 1bv32), 0bv32), Gamma_#1;
    NF, Gamma_NF := bvadd32(#1, 1bv32)[32:31], Gamma_#1;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l00000317;
    }
    goto l00000753;
  l00000753:
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000006e8;
    }
    goto l0000075c;
  l000006e8:
    R1, Gamma_R1 := 69632bv64, true;
    #8, Gamma_#8 := bvadd32(R0[32:0], 4294967286bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#8, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934583bv33))), (Gamma_R0 && Gamma_#8);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#8, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967287bv33))), (Gamma_R0 && Gamma_#8);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#8, 1bv32), 0bv32), Gamma_#8;
    NF, Gamma_NF := bvadd32(#8, 1bv32)[32:31], Gamma_#8;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l000005f9;
    }
    goto l0000070c;
  l000005f9:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 8bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l00000360;
  l0000070c:
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvnot1(bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1))) != 0bv1)) {
      goto l00000644;
    }
    goto l00000715;
  l00000644:
    #6, Gamma_#6 := bvadd32(R0[32:0], 4294967288bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#6, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934585bv33))), (Gamma_R0 && Gamma_#6);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#6, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967289bv33))), (Gamma_R0 && Gamma_#6);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#6, 1bv32), 0bv32), Gamma_#6;
    NF, Gamma_NF := bvadd32(#6, 1bv32)[32:31], Gamma_#6;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l00000331;
    }
    goto l00000663;
  l00000663:
    #7, Gamma_#7 := bvadd32(R0[32:0], 4294967287bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#7, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934584bv33))), (Gamma_R0 && Gamma_#7);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#7, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967288bv33))), (Gamma_R0 && Gamma_#7);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#7, 1bv32), 0bv32), Gamma_#7;
    NF, Gamma_NF := bvadd32(#7, 1bv32)[32:31], Gamma_#7;
    assert Gamma_ZF;
    if ((bvnot1(bvcomp1(ZF, 1bv1)) != 0bv1)) {
      goto l0000036b;
    }
    goto l00000347;
  l00000715:
    #9, Gamma_#9 := bvadd32(R0[32:0], 4294967285bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#9, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934582bv33))), (Gamma_R0 && Gamma_#9);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#9, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967286bv33))), (Gamma_R0 && Gamma_#9);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#9, 1bv32), 0bv32), Gamma_#9;
    NF, Gamma_NF := bvadd32(#9, 1bv32)[32:31], Gamma_#9;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l00000612;
    }
    goto l00000734;
  l00000612:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 1bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l00000628;
  l00000734:
    #10, Gamma_#10 := bvadd32(R0[32:0], 4294967284bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#10, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934581bv33))), (Gamma_R0 && Gamma_#10);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#10, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967285bv33))), (Gamma_R0 && Gamma_#10);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#10, 1bv32), 0bv32), Gamma_#10;
    NF, Gamma_NF := bvadd32(#10, 1bv32)[32:31], Gamma_#10;
    assert Gamma_ZF;
    if ((bvnot1(bvcomp1(ZF, 1bv1)) != 0bv1)) {
      goto l0000036b;
    }
    goto l00000628;
  l00000628:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 4294967291bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l00000360;
  l0000075c:
    #11, Gamma_#11 := bvadd32(R0[32:0], 4294967292bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#11, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934589bv33))), (Gamma_R0 && Gamma_#11);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#11, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967293bv33))), (Gamma_R0 && Gamma_#11);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#11, 1bv32), 0bv32), Gamma_#11;
    NF, Gamma_NF := bvadd32(#11, 1bv32)[32:31], Gamma_#11;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l0000069c;
    }
    goto l0000077b;
  l0000069c:
    R1, Gamma_R1 := 69632bv64, true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 4294967291bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l00000360;
  l0000077b:
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000005bc;
    }
    goto l00000784;
  l000005bc:
    #5, Gamma_#5 := bvadd32(R0[32:0], 4294967291bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#5, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934588bv33))), (Gamma_R0 && Gamma_#5);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#5, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967292bv33))), (Gamma_R0 && Gamma_#5);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#5, 1bv32), 0bv32), Gamma_#5;
    NF, Gamma_NF := bvadd32(#5, 1bv32)[32:31], Gamma_#5;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l000005d6;
    }
    goto l00000682;
  l000005d6:
    R1, Gamma_R1 := 69632bv64, true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 6bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l00000360;
  l00000682:
    R1, Gamma_R1 := 69632bv64, true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 8bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l00000317;
  l00000317:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 6bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l00000331;
  l00000331:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 4294967289bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l00000347;
  l00000347:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 4294967295bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l00000360;
  l00000784:
    R1, Gamma_R1 := 69632bv64, true;
    #12, Gamma_#12 := bvadd32(R0[32:0], 4294967294bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#12, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934591bv33))), (Gamma_R0 && Gamma_#12);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#12, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967295bv33))), (Gamma_R0 && Gamma_#12);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#12, 1bv32), 0bv32), Gamma_#12;
    NF, Gamma_NF := bvadd32(#12, 1bv32)[32:31], Gamma_#12;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l000006ba;
    }
    goto l000007a8;
  l000006ba:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 6bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l000006d0;
  l000007a8:
    #13, Gamma_#13 := bvadd32(R0[32:0], 4294967293bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#13, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934590bv33))), (Gamma_R0 && Gamma_#13);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#13, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967294bv33))), (Gamma_R0 && Gamma_#13);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#13, 1bv32), 0bv32), Gamma_#13;
    NF, Gamma_NF := bvadd32(#13, 1bv32)[32:31], Gamma_#13;
    assert Gamma_ZF;
    if ((bvnot1(bvcomp1(ZF, 1bv1)) != 0bv1)) {
      goto l00000368;
    }
    goto l000006d0;
  l00000368:
    assert Gamma_R0;
    if ((bvnot1(bvcomp32(R0[32:0], 0bv32)) != 0bv1)) {
      goto l0000036b;
    }
    goto l000005a3;
  l0000036b:
    R0, Gamma_R0 := 1bv64, true;
    return;
  l000005a3:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 2bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l00000360;
  l000006d0:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 4294967289bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    goto l00000360;
  l00000360:
    return;
}
