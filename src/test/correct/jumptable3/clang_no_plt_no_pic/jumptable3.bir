0000126d: program
00001253: sub __cxa_finalize(__cxa_finalize_result)
0000126e: __cxa_finalize_result :: out u32 = low:32[R0]

00000f7f:
00001077: R16 := 0x11000
0000107e: R17 := mem[R16 + 8, el]:u64
00001084: R16 := R16 + 8
00001089: call R17 with noreturn

00001254: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000126f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000cbb:
00000cbf: #3 := R31 - 0x20
00000cc5: mem := mem with [#3, el]:u64 <- R29
00000ccb: mem := mem with [#3 + 8, el]:u64 <- R30
00000ccf: R31 := #3
00000cd5: R29 := R31
00000cdd: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000ce2: R19 := 0x11000
00000ce9: R0 := pad:64[mem[R19 + 0x34]]
00000cf0: when 31:0[R0] <> 0 goto %00000cee
00001255: goto %00000f48

00000f48:
00000f4b: R0 := 0x10000
00000f52: R0 := mem[R0 + 0xFC8, el]:u64
00000f58: when R0 = 0 goto %00000f56
00001256: goto %00000f6f

00000f6f:
00000f72: R0 := 0x11000
00000f79: R0 := mem[R0 + 0x28, el]:u64
00000f7e: R30 := 0x6F0
00000f81: call @__cxa_finalize with return %00000f56

00000f56:
00000f5e: R30 := 0x6F4
00000f60: call @deregister_tm_clones with return %00000f62

00000f62:
00000f65: R0 := 1
00000f6d: mem := mem with [R19 + 0x34] <- 7:0[R0]
00001257: goto %00000cee

00000cee:
00000cf8: R19 := mem[R31 + 0x10, el]:u64
00000cff: R29 := mem[R31, el]:u64
00000d04: R30 := mem[R31 + 8, el]:u64
00000d08: R31 := R31 + 0x20
00000d0d: call R30 with noreturn

00001258: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00001270: __libc_start_main_main :: in u64 = R0
00001271: __libc_start_main_arg2 :: in u32 = low:32[R1]
00001272: __libc_start_main_arg3 :: in out u64 = R2
00001273: __libc_start_main_auxv :: in out u64 = R3
00001274: __libc_start_main_result :: out u32 = low:32[R0]

00000c14:
00001061: R16 := 0x11000
00001068: R17 := mem[R16, el]:u64
0000106e: R16 := R16
00001073: call R17 with noreturn

00001259: sub _fini(_fini_result)
00001275: _fini_result :: out u32 = low:32[R0]

0000095c:
00000962: #0 := R31 - 0x10
00000968: mem := mem with [#0, el]:u64 <- R29
0000096e: mem := mem with [#0 + 8, el]:u64 <- R30
00000972: R31 := #0
00000978: R29 := R31
0000097f: R29 := mem[R31, el]:u64
00000984: R30 := mem[R31 + 8, el]:u64
00000988: R31 := R31 + 0x10
0000098d: call R30 with noreturn

0000125a: sub _init(_init_result)
00001276: _init_result :: out u32 = low:32[R0]

00001169:
0000116f: #10 := R31 - 0x10
00001175: mem := mem with [#10, el]:u64 <- R29
0000117b: mem := mem with [#10 + 8, el]:u64 <- R30
0000117f: R31 := #10
00001185: R29 := R31
0000118a: R30 := 0x590
0000118c: call @call_weak_fn with return %0000118e

0000118e:
00001193: R29 := mem[R31, el]:u64
00001198: R30 := mem[R31 + 8, el]:u64
0000119c: R31 := R31 + 0x10
000011a1: call R30 with noreturn

0000125b: sub _start(_start_result)
00001277: _start_result :: out u32 = low:32[R0]

00000bd5:
00000bda: R29 := 0
00000bdf: R30 := 0
00000be5: R5 := R0
00000bec: R1 := mem[R31, el]:u64
00000bf2: R2 := R31 + 8
00000bf8: R6 := R31
00000bfd: R0 := 0x10000
00000c04: R0 := mem[R0 + 0xFD8, el]:u64
00000c09: R3 := 0
00000c0e: R4 := 0
00000c13: R30 := 0x630
00000c16: call @__libc_start_main with return %00000c18

00000c18:
00000c1b: R30 := 0x634
00000c1e: call @abort with return %0000125c

0000125c:
0000125d: call @call_weak_fn with noreturn

0000125e: sub abort()


00000c1c:
000010a3: R16 := 0x11000
000010aa: R17 := mem[R16 + 0x18, el]:u64
000010b0: R16 := R16 + 0x18
000010b5: call R17 with noreturn

0000125f: sub add_six(add_six_result)
00001278: add_six_result :: out u32 = low:32[R0]

00000d36:
00000d39: R9 := 0x11000
00000d40: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000d46: R8 := pad:64[31:0[R8] + 6]
00000d4e: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000d53: call R30 with noreturn

00001260: sub add_two(add_two_result)
00001279: add_two_result :: out u32 = low:32[R0]

00000d17:
00000d1a: R9 := 0x11000
00000d21: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000d27: R8 := pad:64[31:0[R8] + 2]
00000d2f: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000d34: call R30 with noreturn

00001261: sub call_weak_fn(call_weak_fn_result)
0000127a: call_weak_fn_result :: out u32 = low:32[R0]

00000c20:
00000c23: R0 := 0x10000
00000c2a: R0 := mem[R0 + 0xFD0, el]:u64
00000c30: when R0 = 0 goto %00000c2e
00001262: goto %00000fbf

00000c2e:
00000c36: call R30 with noreturn

00000fbf:
00000fc2: goto @__gmon_start__

00000fc0:
0000108d: R16 := 0x11000
00001094: R17 := mem[R16 + 0x10, el]:u64
0000109a: R16 := R16 + 0x10
0000109f: call R17 with noreturn

00001263: sub deregister_tm_clones(deregister_tm_clones_result)
0000127b: deregister_tm_clones_result :: out u32 = low:32[R0]

00000c3c:
00000c3f: R0 := 0x11000
00000c45: R0 := R0 + 0x38
00000c4a: R1 := 0x11000
00000c50: R1 := R1 + 0x38
00000c56: #1 := ~R0
00000c5b: #2 := R1 + ~R0
00000c61: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000c67: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000c6b: ZF := #2 + 1 = 0
00000c6f: NF := 63:63[#2 + 1]
00000c75: when ZF goto %00000c73
00001264: goto %00000fa1

00000fa1:
00000fa4: R1 := 0x10000
00000fab: R1 := mem[R1 + 0xFC0, el]:u64
00000fb0: when R1 = 0 goto %00000c73
00001265: goto %00000fb4

00000c73:
00000c7b: call R30 with noreturn

00000fb4:
00000fb8: R16 := R1
00000fbd: call R16 with noreturn

00001266: sub frame_dummy(frame_dummy_result)
0000127c: frame_dummy_result :: out u32 = low:32[R0]

00000d13:
00000d15: call @register_tm_clones with noreturn

00001267: sub main(main_argc, main_argv, main_result)
0000127d: main_argc :: in u32 = low:32[R0]
0000127e: main_argv :: in out u64 = R1
0000127f: main_result :: out u32 = low:32[R0]

00000d8a:
00000d8e: R31 := R31 - 0x30
00000d94: #5 := R31 + 0x20
00000d9a: mem := mem with [#5, el]:u64 <- R29
00000da0: mem := mem with [#5 + 8, el]:u64 <- R30
00000da6: R29 := R31 + 0x20
00000dad: mem := mem with [R29 - 4, el]:u32 <- 0
00000db5: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
00000dbd: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000dc4: R8 := pad:64[mem[R29 - 8, el]:u32]
00000dca: #6 := 31:0[R8] - 1
00000dcf: VF := extend:33[#6 + 1] <> extend:33[31:0[R8]] + 0
00000dd4: CF := pad:33[#6 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000dd8: ZF := #6 + 1 = 0
00000ddc: NF := 31:31[#6 + 1]
00000de0: R8 := pad:64[#6 + 1]
00000de8: mem := mem with [R31 + 8, el]:u64 <- R8
00000dee: #7 := R8 - 0xC
00000df3: VF := extend:65[#7 + 1] <> extend:65[R8] - 0xB
00000df8: CF := pad:65[#7 + 1] <> pad:65[R8] + 0xFFFFFFFFFFFFFFF5
00000dfc: ZF := #7 + 1 = 0
00000e00: NF := 63:63[#7 + 1]
00000e04: R8 := #7 + 1
00000e11: when ~(CF & ~ZF) goto %00000e0a
00000e12: goto %00000e0d

00000e0d:
00000e0e: R8 := 1
00000e14: goto %00000e10

00000e0a:
00000e0b: R8 := 0
00000e13: goto %00000e10

00000e10:
00000e1a: when 0:0[R8] goto %00000e18
00001268: goto %00000e68

00000e18:
00000e20: R8 := 1
00000e28: mem := mem with [R29 - 4, el]:u32 <- 31:0[R8]
00000e2d: goto %00000e2b

00000e2b:
00000e33: R0 := pad:64[mem[R29 - 4, el]:u32]
00000e39: #8 := R31 + 0x20
00000e3e: R29 := mem[#8, el]:u64
00000e43: R30 := mem[#8 + 8, el]:u64
00000e49: R31 := R31 + 0x30
00000e4e: call R30 with noreturn

00000e68:
00000e6d: R11 := mem[R31 + 8, el]:u64
00000e72: R10 := 0
00000e78: R10 := R10 + 0x85C
00000e7d: R8 := 0x78C
00000e85: R9 := extend:64[mem[R10 + (61:0[R11].0), el]:u32]
00000e8c: R8 := R8 + R9
00000e91: call R8 with noreturn

00001269: sub register_tm_clones(register_tm_clones_result)
00001280: register_tm_clones_result :: out u32 = low:32[R0]

00000c7d:
00000c80: R0 := 0x11000
00000c86: R0 := R0 + 0x38
00000c8b: R1 := 0x11000
00000c91: R1 := R1 + 0x38
00000c98: R1 := R1 + ~R0 + 1
00000c9e: R2 := 0.63:63[R1]
00000ca5: R1 := R2 + (R1 ~>> 3)
00000cab: R1 := extend:64[63:1[R1]]
00000cb1: when R1 = 0 goto %00000caf
0000126a: goto %00000f83

00000f83:
00000f86: R2 := 0x10000
00000f8d: R2 := mem[R2 + 0xFE0, el]:u64
00000f92: when R2 = 0 goto %00000caf
0000126b: goto %00000f96

00000caf:
00000cb7: call R30 with noreturn

00000f96:
00000f9a: R16 := R2
00000f9f: call R16 with noreturn

0000126c: sub sub_seven(sub_seven_result)
00001281: sub_seven_result :: out u32 = low:32[R0]

00000d55:
00000d58: R9 := 0x11000
00000d5f: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000d65: #4 := 31:0[R8] - 8
00000d6a: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 7
00000d6f: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFF9
00000d73: ZF := #4 + 1 = 0
00000d77: NF := 31:31[#4 + 1]
00000d7b: R8 := pad:64[#4 + 1]
00000d83: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000d88: call R30 with noreturn
