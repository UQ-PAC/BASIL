00000d84: program
00000d1e: sub __cxa_finalize(__cxa_finalize_result)
00000d85: __cxa_finalize_result :: out u32 = low:32[R0]

000009dc:
00000ad4: R16 := 0x10000
00000adb: R17 := mem[R16 + 0xFB8, el]:u64
00000ae1: R16 := R16 + 0xFB8
00000ae6: call R17 with noreturn

00000d1f: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000d86: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000045a:
0000045e: #3 := R31 - 0x20
00000464: mem := mem with [#3, el]:u64 <- R29
0000046a: mem := mem with [#3 + 8, el]:u64 <- R30
0000046e: R31 := #3
00000474: R29 := R31
0000047c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000481: R19 := 0x11000
00000488: R0 := pad:64[mem[R19 + 0x14]]
0000048f: when 31:0[R0] <> 0 goto %0000048d
00000d63: goto %000009a5

000009a5:
000009a8: R0 := 0x10000
000009af: R0 := mem[R0 + 0xFE0, el]:u64
000009b5: when R0 = 0 goto %000009b3
00000d64: goto %000009cc

000009cc:
000009cf: R0 := 0x11000
000009d6: R0 := mem[R0 + 8, el]:u64
000009db: R30 := 0x6F0
000009de: call @__cxa_finalize with return %000009b3

000009b3:
000009bb: R30 := 0x6F4
000009bd: call @deregister_tm_clones with return %000009bf

000009bf:
000009c2: R0 := 1
000009ca: mem := mem with [R19 + 0x14] <- 7:0[R0]
00000d65: goto %0000048d

0000048d:
00000497: R19 := mem[R31 + 0x10, el]:u64
0000049e: R29 := mem[R31, el]:u64
000004a3: R30 := mem[R31 + 8, el]:u64
000004a7: R31 := R31 + 0x20
000004ac: call R30 with noreturn

00000d23: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000d87: __libc_start_main_main :: in u64 = R0
00000d88: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000d89: __libc_start_main_arg3 :: in out u64 = R2
00000d8a: __libc_start_main_auxv :: in out u64 = R3
00000d8b: __libc_start_main_result :: out u32 = low:32[R0]

000003b3:
00000abe: R16 := 0x10000
00000ac5: R17 := mem[R16 + 0xFB0, el]:u64
00000acb: R16 := R16 + 0xFB0
00000ad0: call R17 with noreturn

00000d24: sub _fini(_fini_result)
00000d8c: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000d25: sub _init(_init_result)
00000d8d: _init_result :: out u32 = low:32[R0]

00000bfd:
00000c03: #28 := R31 - 0x10
00000c09: mem := mem with [#28, el]:u64 <- R29
00000c0f: mem := mem with [#28 + 8, el]:u64 <- R30
00000c13: R31 := #28
00000c19: R29 := R31
00000c1e: R30 := 0x590
00000c20: call @call_weak_fn with return %00000c22

00000c22:
00000c27: R29 := mem[R31, el]:u64
00000c2c: R30 := mem[R31 + 8, el]:u64
00000c30: R31 := R31 + 0x10
00000c35: call R30 with noreturn

00000d26: sub _start(_start_result)
00000d8e: _start_result :: out u32 = low:32[R0]

00000374:
00000379: R29 := 0
0000037e: R30 := 0
00000384: R5 := R0
0000038b: R1 := mem[R31, el]:u64
00000391: R2 := R31 + 8
00000397: R6 := R31
0000039c: R0 := 0x10000
000003a3: R0 := mem[R0 + 0xFF0, el]:u64
000003a8: R3 := 0
000003ad: R4 := 0
000003b2: R30 := 0x630
000003b5: call @__libc_start_main with return %000003b7

000003b7:
000003ba: R30 := 0x634
000003bd: call @abort with return %00000d66

00000d66:
00000d67: call @call_weak_fn with noreturn

00000d29: sub abort()


000003bb:
00000b00: R16 := 0x10000
00000b07: R17 := mem[R16 + 0xFC8, el]:u64
00000b0d: R16 := R16 + 0xFC8
00000b12: call R17 with noreturn

00000d2a: sub add_six(add_six_result)
00000d8f: add_six_result :: out u32 = low:32[R0]

000004e8:
000004eb: R0 := 0x11000
000004f1: R0 := R0 + 0x10
000004f8: R0 := pad:64[mem[R0, el]:u32]
000004fe: R1 := pad:64[31:0[R0] + 6]
00000503: R0 := 0x11000
00000509: R0 := R0 + 0x10
00000511: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000518: call R30 with noreturn

00000d2b: sub add_two(add_two_result)
00000d90: add_two_result :: out u32 = low:32[R0]

000004b6:
000004b9: R0 := 0x11000
000004bf: R0 := R0 + 0x10
000004c6: R0 := pad:64[mem[R0, el]:u32]
000004cc: R1 := pad:64[31:0[R0] + 2]
000004d1: R0 := 0x11000
000004d7: R0 := R0 + 0x10
000004df: mem := mem with [R0, el]:u32 <- 31:0[R1]
000004e6: call R30 with noreturn

00000d2c: sub call_weak_fn(call_weak_fn_result)
00000d91: call_weak_fn_result :: out u32 = low:32[R0]

000003bf:
000003c2: R0 := 0x10000
000003c9: R0 := mem[R0 + 0xFE8, el]:u64
000003cf: when R0 = 0 goto %000003cd
00000d68: goto %00000a1c

000003cd:
000003d5: call R30 with noreturn

00000a1c:
00000a1f: goto @__gmon_start__

00000a1d:
00000aea: R16 := 0x10000
00000af1: R17 := mem[R16 + 0xFC0, el]:u64
00000af7: R16 := R16 + 0xFC0
00000afc: call R17 with noreturn

00000d2e: sub deregister_tm_clones(deregister_tm_clones_result)
00000d92: deregister_tm_clones_result :: out u32 = low:32[R0]

000003db:
000003de: R0 := 0x11000
000003e4: R0 := R0 + 0x18
000003e9: R1 := 0x11000
000003ef: R1 := R1 + 0x18
000003f5: #1 := ~R0
000003fa: #2 := R1 + ~R0
00000400: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000406: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000040a: ZF := #2 + 1 = 0
0000040e: NF := 63:63[#2 + 1]
00000414: when ZF goto %00000412
00000d69: goto %000009fe

000009fe:
00000a01: R1 := 0x10000
00000a08: R1 := mem[R1 + 0xFD8, el]:u64
00000a0d: when R1 = 0 goto %00000412
00000d6a: goto %00000a11

00000412:
0000041a: call R30 with noreturn

00000a11:
00000a15: R16 := R1
00000a1a: call R16 with noreturn

00000d31: sub frame_dummy(frame_dummy_result)
00000d93: frame_dummy_result :: out u32 = low:32[R0]

000004b2:
000004b4: call @register_tm_clones with noreturn

00000d32: sub main(main_argc, main_argv, main_result)
00000d94: main_argc :: in u32 = low:32[R0]
00000d95: main_argv :: in out u64 = R1
00000d96: main_result :: out u32 = low:32[R0]

0000054c:
00000550: #4 := R31 - 0x20
00000556: mem := mem with [#4, el]:u64 <- R29
0000055c: mem := mem with [#4 + 8, el]:u64 <- R30
00000560: R31 := #4
00000566: R29 := R31
0000056e: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000576: mem := mem with [R31 + 0x10, el]:u64 <- R1
0000057d: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000583: #5 := 31:0[R0] - 0xC
00000588: VF := extend:33[#5 + 1] <> extend:33[31:0[R0]] - 0xB
0000058d: CF := pad:33[#5 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF5
00000591: ZF := #5 + 1 = 0
00000595: NF := 31:31[#5 + 1]
0000059b: when ZF goto %00000599
00000d6b: goto %000005e0

000005e0:
000005e5: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000005eb: #6 := 31:0[R0] - 0xC
000005f0: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] - 0xB
000005f5: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF5
000005f9: ZF := #6 + 1 = 0
000005fd: NF := 31:31[#6 + 1]
00000604: when NF = VF & ~ZF goto %000005d7
00000d6c: goto %00000608

00000608:
0000060d: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000613: #7 := 31:0[R0] - 0xB
00000618: VF := extend:33[#7 + 1] <> extend:33[31:0[R0]] - 0xA
0000061d: CF := pad:33[#7 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF6
00000621: ZF := #7 + 1 = 0
00000625: NF := 31:31[#7 + 1]
0000062b: when ZF goto %00000629
00000d6d: goto %00000643

00000629:
00000631: R30 := 0x8F0
00000633: call @sub_seven with return %00000635

00000635:
00000638: R30 := 0x8F4
0000063a: call @add_two with return %0000063c

0000063c:
0000063f: R30 := 0x8F8
00000641: call @add_six with return %00000599

00000599:
000005a1: R30 := 0x8FC
000005a3: call @sub_seven with return %000005a5

000005a5:
000005a8: R30 := 0x900
000005aa: call @add_two with return %000005ac

000005ac:
000005af: goto %000005ad

00000643:
00000648: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000064e: #8 := 31:0[R0] - 0xB
00000653: VF := extend:33[#8 + 1] <> extend:33[31:0[R0]] - 0xA
00000658: CF := pad:33[#8 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF6
0000065c: ZF := #8 + 1 = 0
00000660: NF := 31:31[#8 + 1]
00000667: when NF = VF & ~ZF goto %000005d7
00000d6e: goto %0000066b

0000066b:
00000670: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000676: #9 := 31:0[R0] - 0xA
0000067b: VF := extend:33[#9 + 1] <> extend:33[31:0[R0]] - 9
00000680: CF := pad:33[#9 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF7
00000684: ZF := #9 + 1 = 0
00000688: NF := 31:31[#9 + 1]
0000068e: when ZF goto %0000068c
00000d6f: goto %000006a3

0000068c:
00000694: R30 := 0x8E4
00000696: call @add_two with return %00000698

00000698:
0000069b: R30 := 0x8E8
0000069d: call @add_six with return %0000069f

0000069f:
000006a1: goto %000005ad

000006a3:
000006a8: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000006ae: #10 := 31:0[R0] - 0xA
000006b3: VF := extend:33[#10 + 1] <> extend:33[31:0[R0]] - 9
000006b8: CF := pad:33[#10 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF7
000006bc: ZF := #10 + 1 = 0
000006c0: NF := 31:31[#10 + 1]
000006c7: when NF = VF & ~ZF goto %000005d7
00000d70: goto %000006cb

000006cb:
000006d0: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000006d6: #11 := 31:0[R0] - 9
000006db: VF := extend:33[#11 + 1] <> extend:33[31:0[R0]] - 8
000006e0: CF := pad:33[#11 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF8
000006e4: ZF := #11 + 1 = 0
000006e8: NF := 31:31[#11 + 1]
000006ee: when ZF goto %000006ec
00000d71: goto %00000703

00000703:
00000708: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000070e: #12 := 31:0[R0] - 9
00000713: VF := extend:33[#12 + 1] <> extend:33[31:0[R0]] - 8
00000718: CF := pad:33[#12 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF8
0000071c: ZF := #12 + 1 = 0
00000720: NF := 31:31[#12 + 1]
00000727: when NF = VF & ~ZF goto %000005d7
00000d72: goto %0000072b

0000072b:
00000730: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000736: #13 := 31:0[R0] - 8
0000073b: VF := extend:33[#13 + 1] <> extend:33[31:0[R0]] - 7
00000740: CF := pad:33[#13 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF9
00000744: ZF := #13 + 1 = 0
00000748: NF := 31:31[#13 + 1]
0000074e: when ZF goto %0000074c
00000d73: goto %00000758

00000758:
0000075d: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000763: #14 := 31:0[R0] - 8
00000768: VF := extend:33[#14 + 1] <> extend:33[31:0[R0]] - 7
0000076d: CF := pad:33[#14 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF9
00000771: ZF := #14 + 1 = 0
00000775: NF := 31:31[#14 + 1]
0000077c: when NF = VF & ~ZF goto %000005d7
00000d74: goto %00000780

00000780:
00000785: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000078b: #15 := 31:0[R0] - 7
00000790: VF := extend:33[#15 + 1] <> extend:33[31:0[R0]] - 6
00000795: CF := pad:33[#15 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFA
00000799: ZF := #15 + 1 = 0
0000079d: NF := 31:31[#15 + 1]
000007a3: when ZF goto %000007a1
00000d75: goto %000007ad

000007ad:
000007b2: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000007b8: #16 := 31:0[R0] - 7
000007bd: VF := extend:33[#16 + 1] <> extend:33[31:0[R0]] - 6
000007c2: CF := pad:33[#16 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFA
000007c6: ZF := #16 + 1 = 0
000007ca: NF := 31:31[#16 + 1]
000007d1: when NF = VF & ~ZF goto %000005d7
00000d76: goto %000007d5

000007d5:
000007da: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000007e0: #17 := 31:0[R0] - 6
000007e5: VF := extend:33[#17 + 1] <> extend:33[31:0[R0]] - 5
000007ea: CF := pad:33[#17 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFB
000007ee: ZF := #17 + 1 = 0
000007f2: NF := 31:31[#17 + 1]
000007f8: when ZF goto %000007f6
00000d77: goto %00000809

000007f6:
000007fe: R30 := 0x8C8
00000800: call @add_six with return %00000802

00000802:
00000805: R30 := 0x8CC
00000807: call @add_two with return %000007a1

000007a1:
000007a9: R30 := 0x8D0
000007ab: call @add_six with return %0000074c

0000074c:
00000754: R30 := 0x8D4
00000756: call @sub_seven with return %000006ec

000006ec:
000006f4: R30 := 0x8D8
000006f6: call @sub_seven with return %000006f8

000006f8:
000006fb: R30 := 0x8DC
000006fd: call @add_six with return %000006ff

000006ff:
00000701: goto %000005ad

00000809:
0000080e: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000814: #18 := 31:0[R0] - 6
00000819: VF := extend:33[#18 + 1] <> extend:33[31:0[R0]] - 5
0000081e: CF := pad:33[#18 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFB
00000822: ZF := #18 + 1 = 0
00000826: NF := 31:31[#18 + 1]
0000082d: when NF = VF & ~ZF goto %000005d7
00000d78: goto %00000831

00000831:
00000836: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000083c: #19 := 31:0[R0] - 5
00000841: VF := extend:33[#19 + 1] <> extend:33[31:0[R0]] - 4
00000846: CF := pad:33[#19 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFC
0000084a: ZF := #19 + 1 = 0
0000084e: NF := 31:31[#19 + 1]
00000854: when ZF goto %00000852
00000d79: goto %00000862

00000852:
0000085a: R30 := 0x8C0
0000085c: call @add_six with return %0000085e

0000085e:
00000860: goto %000005ad

00000862:
00000867: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000086d: #20 := 31:0[R0] - 5
00000872: VF := extend:33[#20 + 1] <> extend:33[31:0[R0]] - 4
00000877: CF := pad:33[#20 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFC
0000087b: ZF := #20 + 1 = 0
0000087f: NF := 31:31[#20 + 1]
00000886: when NF = VF & ~ZF goto %000005d7
00000d7a: goto %0000088a

0000088a:
0000088f: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000895: #21 := 31:0[R0] - 4
0000089a: VF := extend:33[#21 + 1] <> extend:33[31:0[R0]] - 3
0000089f: CF := pad:33[#21 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFD
000008a3: ZF := #21 + 1 = 0
000008a7: NF := 31:31[#21 + 1]
000008ad: when ZF goto %000008ab
00000d7b: goto %000008c2

000008ab:
000008b3: R30 := 0x8B4
000008b5: call @add_two with return %000008b7

000008b7:
000008ba: R30 := 0x8B8
000008bc: call @sub_seven with return %000008be

000008be:
000008c0: goto %000005ad

000008c2:
000008c7: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000008cd: #22 := 31:0[R0] - 4
000008d2: VF := extend:33[#22 + 1] <> extend:33[31:0[R0]] - 3
000008d7: CF := pad:33[#22 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFD
000008db: ZF := #22 + 1 = 0
000008df: NF := 31:31[#22 + 1]
000008e6: when NF = VF & ~ZF goto %000005d7
00000d7c: goto %000008ea

000008ea:
000008ef: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000008f5: #23 := 31:0[R0] - 3
000008fa: VF := extend:33[#23 + 1] <> extend:33[31:0[R0]] - 2
000008ff: CF := pad:33[#23 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFE
00000903: ZF := #23 + 1 = 0
00000907: NF := 31:31[#23 + 1]
0000090d: when ZF goto %0000090b
00000d7d: goto %0000091b

0000091b:
00000920: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000926: #24 := 31:0[R0] - 3
0000092b: VF := extend:33[#24 + 1] <> extend:33[31:0[R0]] - 2
00000930: CF := pad:33[#24 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFE
00000934: ZF := #24 + 1 = 0
00000938: NF := 31:31[#24 + 1]
0000093f: when NF = VF & ~ZF goto %000005d7
00000d7e: goto %00000943

00000943:
00000948: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000094e: #25 := 31:0[R0] - 1
00000953: VF := extend:33[#25 + 1] <> extend:33[31:0[R0]] + 0
00000958: CF := pad:33[#25 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000095c: ZF := #25 + 1 = 0
00000960: NF := 31:31[#25 + 1]
00000966: when ZF goto %00000964
00000d7f: goto %0000097b

00000964:
0000096c: R30 := 0x8A0
0000096e: call @add_two with return %00000970

00000970:
00000972: goto %000005ad

0000097b:
00000980: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000986: #26 := 31:0[R0] - 2
0000098b: VF := extend:33[#26 + 1] <> extend:33[31:0[R0]] - 1
00000990: CF := pad:33[#26 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFF
00000994: ZF := #26 + 1 = 0
00000998: NF := 31:31[#26 + 1]
0000099d: when ZF goto %00000974
00000d80: goto %000009a1

00000974:
00000977: R30 := 0x8A8
00000979: call @add_six with return %0000090b

0000090b:
00000913: R30 := 0x8AC
00000915: call @sub_seven with return %00000917

00000917:
00000919: goto %000005ad

000005ad:
000005b3: R0 := 0x11000
000005b9: R0 := R0 + 0x10
000005c0: R0 := pad:64[mem[R0, el]:u32]
00000d81: goto %000005c2

000009a1:
000009a3: goto %000005d7

000005d7:
000005da: R0 := 1
000005de: goto %000005c2

000005c2:
000005c7: R29 := mem[R31, el]:u64
000005cc: R30 := mem[R31 + 8, el]:u64
000005d0: R31 := R31 + 0x20
000005d5: call R30 with noreturn

00000d4a: sub register_tm_clones(register_tm_clones_result)
00000d97: register_tm_clones_result :: out u32 = low:32[R0]

0000041c:
0000041f: R0 := 0x11000
00000425: R0 := R0 + 0x18
0000042a: R1 := 0x11000
00000430: R1 := R1 + 0x18
00000437: R1 := R1 + ~R0 + 1
0000043d: R2 := 0.63:63[R1]
00000444: R1 := R2 + (R1 ~>> 3)
0000044a: R1 := extend:64[63:1[R1]]
00000450: when R1 = 0 goto %0000044e
00000d82: goto %000009e0

000009e0:
000009e3: R2 := 0x10000
000009ea: R2 := mem[R2 + 0xFF8, el]:u64
000009ef: when R2 = 0 goto %0000044e
00000d83: goto %000009f3

0000044e:
00000456: call R30 with noreturn

000009f3:
000009f7: R16 := R2
000009fc: call R16 with noreturn

00000d4d: sub sub_seven(sub_seven_result)
00000d98: sub_seven_result :: out u32 = low:32[R0]

0000051a:
0000051d: R0 := 0x11000
00000523: R0 := R0 + 0x10
0000052a: R0 := pad:64[mem[R0, el]:u32]
00000530: R1 := pad:64[31:0[R0] - 7]
00000535: R0 := 0x11000
0000053b: R0 := R0 + 0x10
00000543: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000054a: call R30 with noreturn
