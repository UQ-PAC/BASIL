var Gamma_R0: bool;
var Gamma_R10: bool;
var Gamma_R11: bool;
var Gamma_R12: bool;
var Gamma_R8: bool;
var Gamma_R9: bool;
var Gamma_mem: [bv64]bool;
var R0: bv64;
var R10: bv64;
var R11: bv64;
var R12: bv64;
var R8: bv64;
var R9: bv64;
var mem: [bv64]bv8;
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvand"} bvand1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
function {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure main()
  modifies Gamma_R0, Gamma_R10, Gamma_R11, Gamma_R12, Gamma_R8, Gamma_R9, R0, R10, R11, R12, R8, R9;
  requires (Gamma_R0 == true);
  free requires (memory_load8_le(mem, 2096bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2097bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2098bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2099bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2100bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2101bv64) == 6bv8);
  free requires (memory_load8_le(mem, 2102bv64) == 9bv8);
  free requires (memory_load8_le(mem, 2103bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2104bv64) == 13bv8);
  free requires (memory_load8_le(mem, 2105bv64) == 17bv8);
  free requires (memory_load8_le(mem, 2106bv64) == 20bv8);
  free requires (memory_load8_le(mem, 2107bv64) == 23bv8);
  free requires (memory_load8_le(mem, 2108bv64) == 26bv8);
  free requires (memory_load8_le(mem, 2109bv64) == 30bv8);
  free requires (memory_load8_le(mem, 2110bv64) == 34bv8);
  free requires (memory_load8_le(mem, 2111bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69560bv64) == 216bv8);
  free requires (memory_load8_le(mem, 69561bv64) == 13bv8);
  free requires (memory_load8_le(mem, 69562bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69563bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69564bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69565bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69566bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69567bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69568bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69569bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69570bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69571bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69572bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69573bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69574bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69575bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69576bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69577bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69578bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69579bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69580bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69581bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69582bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69583bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69584bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69585bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69586bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69587bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69588bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69589bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69590bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69591bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69592bv64) == 80bv8);
  free requires (memory_load8_le(mem, 69593bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69594bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69600bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69601bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69602bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69603bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69604bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69605bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69606bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69607bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69664bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69665bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69666bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69667bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69668bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69669bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69670bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69671bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69672bv64) == 40bv8);
  free requires (memory_load8_le(mem, 69673bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69674bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69680bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69681bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69682bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69683bv64) == 0bv8);
{
  var #4: bv32;
  var CF: bv1;
  var Gamma_#4: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var VF: bv1;
  var ZF: bv1;
  lmain:
    #4, Gamma_#4 := bvadd32(R0[32:0], 4294967284bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#4, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934581bv33))), (Gamma_R0 && Gamma_#4);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#4, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967285bv33))), (Gamma_R0 && Gamma_#4);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#4, 1bv32), 0bv32), Gamma_#4;
    NF, Gamma_NF := bvadd32(#4, 1bv32)[32:31], Gamma_#4;
    assert (Gamma_ZF && Gamma_CF);
    if ((bvand1(bvcomp1(CF, 1bv1), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l0000042a;
    }
    goto l00000439;
  l0000042a:
    R0, Gamma_R0 := 1bv64, true;
    return;
  l00000439:
    R9, Gamma_R9 := zero_extend32_32(R0[32:0]), Gamma_R0;
    R10, Gamma_R10 := 0bv64, true;
    R10, Gamma_R10 := bvadd64(R10, 2100bv64), Gamma_R10;
    R8, Gamma_R8 := 69632bv64, true;
    R11, Gamma_R11 := 1912bv64, true;
    R12, Gamma_R12 := zero_extend56_8(memory_load8_le(mem, bvadd64(R10, R9))), (gamma_load8(Gamma_mem, bvadd64(R10, R9)) || L(mem, bvadd64(R10, R9)));
    R11, Gamma_R11 := bvadd64(R11, (R12[62:0] ++ 0bv2)), (Gamma_R12 && Gamma_R11);
    //UNRESOLVED: call R11
    assume false;
    //no return target
    assume false;
}
