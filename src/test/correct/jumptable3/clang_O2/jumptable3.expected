var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R10: bool;
var {:extern} Gamma_R11: bool;
var {:extern} Gamma_R12: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R10: bv64;
var {:extern} R11: bv64;
var {:extern} R12: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2160bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 131120bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvand"} bvand1(bv1, bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load64_le(mem, 2160bv64) == 2539880450228225bv64);
  free ensures (memory_load64_le(mem, 2168bv64) == 9603246613336333bv64);
  free ensures (memory_load64_le(mem, 130488bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R10, Gamma_R11, Gamma_R12, Gamma_R8, Gamma_R9, Gamma_mem, R0, R10, R11, R12, R8, R9, mem;
  free requires (memory_load8_le(mem, 131104bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131105bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131106bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131107bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131108bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131109bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131110bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131111bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131112bv64) == 40bv8);
  free requires (memory_load8_le(mem, 131113bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131114bv64) == 2bv8);
  free requires (memory_load8_le(mem, 131115bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131116bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131117bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131118bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131119bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131120bv64) == 5bv8);
  free requires (memory_load8_le(mem, 131121bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131122bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131123bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2160bv64) == 2539880450228225bv64);
  free requires (memory_load64_le(mem, 2168bv64) == 9603246613336333bv64);
  free requires (memory_load64_le(mem, 130488bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 130496bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free ensures (memory_load64_le(mem, 2160bv64) == 2539880450228225bv64);
  free ensures (memory_load64_le(mem, 2168bv64) == 9603246613336333bv64);
  free ensures (memory_load64_le(mem, 130488bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);

implementation main()
{
  var #4: bv32;
  var CF: bv1;
  var Gamma_#4: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var VF: bv1;
  var ZF: bv1;
  lmain:
    assume {:captureState "lmain"} true;
    #4, Gamma_#4 := bvadd32(R0[32:0], 4294967284bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#4, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934581bv33))), (Gamma_R0 && Gamma_#4);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#4, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967285bv33))), (Gamma_R0 && Gamma_#4);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#4, 1bv32), 0bv32), Gamma_#4;
    NF, Gamma_NF := bvadd32(#4, 1bv32)[32:31], Gamma_#4;
    assert (Gamma_CF && Gamma_ZF);
    goto lmain_goto_l0000042a, lmain_goto_l00000439;
  l0000042a:
    assume {:captureState "l0000042a"} true;
    R0, Gamma_R0 := 1bv64, true;
    goto main_return;
  l00000439:
    assume {:captureState "l00000439"} true;
    R9, Gamma_R9 := zero_extend32_32(R0[32:0]), Gamma_R0;
    R10, Gamma_R10 := 0bv64, true;
    R10, Gamma_R10 := bvadd64(R10, 2164bv64), Gamma_R10;
    R8, Gamma_R8 := 131072bv64, true;
    R11, Gamma_R11 := 1976bv64, true;
    call rely();
    R12, Gamma_R12 := zero_extend56_8(memory_load8_le(mem, bvadd64(R10, R9))), (gamma_load8(Gamma_mem, bvadd64(R10, R9)) || L(mem, bvadd64(R10, R9)));
    R11, Gamma_R11 := bvadd64(R11, (R12[62:0] ++ 0bv2)), (Gamma_R12 && Gamma_R11);
    //UNRESOLVED: call R11
    assert false;
    //no return target
    assume false;
  lmain_goto_l0000042a:
    assume {:captureState "lmain_goto_l0000042a"} true;
    assume (bvand1(bvcomp1(CF, 1bv1), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l0000042a;
  lmain_goto_l00000439:
    assume {:captureState "lmain_goto_l00000439"} true;
    assume (bvand1(bvcomp1(CF, 1bv1), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l00000439;
  main_return:
    assume {:captureState "main_return"} true;
    return;
}

