000007fc: program
000007c2: sub __cxa_finalize(__cxa_finalize_result)
000007fd: __cxa_finalize_result :: out u32 = low:32[R0]

00000590:
00000688: R16 := 0x20000
0000068f: R17 := mem[R16 + 8, el]:u64
00000695: R16 := R16 + 8
0000069a: call R17 with noreturn

000007c3: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000007fe: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000357:
0000035b: #3 := R31 - 0x20
00000361: mem := mem with [#3, el]:u64 <- R29
00000367: mem := mem with [#3 + 8, el]:u64 <- R30
0000036b: R31 := #3
00000371: R29 := R31
00000379: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000037e: R19 := 0x20000
00000385: R0 := pad:64[mem[R19 + 0x34]]
0000038b: when 0:0[R0] goto %00000389
000007f1: goto %00000559

00000559:
0000055c: R0 := 0x1F000
00000563: R0 := mem[R0 + 0xFC8, el]:u64
00000569: when R0 = 0 goto %00000567
000007f2: goto %00000580

00000580:
00000583: R0 := 0x20000
0000058a: R0 := mem[R0 + 0x28, el]:u64
0000058f: R30 := 0x730
00000592: call @__cxa_finalize with return %00000567

00000567:
0000056f: R30 := 0x734
00000571: call @deregister_tm_clones with return %00000573

00000573:
00000576: R0 := 1
0000057e: mem := mem with [R19 + 0x34] <- 7:0[R0]
000007f3: goto %00000389

00000389:
00000393: R19 := mem[R31 + 0x10, el]:u64
0000039a: R29 := mem[R31, el]:u64
0000039f: R30 := mem[R31 + 8, el]:u64
000003a3: R31 := R31 + 0x20
000003a8: call R30 with noreturn

000007c7: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000007ff: __libc_start_main_main :: in u64 = R0
00000800: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000801: __libc_start_main_arg3 :: in out u64 = R2
00000802: __libc_start_main_auxv :: in out u64 = R3
00000803: __libc_start_main_result :: out u32 = low:32[R0]

000002b0:
00000672: R16 := 0x20000
00000679: R17 := mem[R16, el]:u64
0000067f: R16 := R16
00000684: call R17 with noreturn

000007c8: sub _fini(_fini_result)
00000804: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000007c9: sub _init(_init_result)
00000805: _init_result :: out u32 = low:32[R0]

000006e2:
000006e8: #6 := R31 - 0x10
000006ee: mem := mem with [#6, el]:u64 <- R29
000006f4: mem := mem with [#6 + 8, el]:u64 <- R30
000006f8: R31 := #6
000006fe: R29 := R31
00000703: R30 := 0x5C8
00000705: call @call_weak_fn with return %00000707

00000707:
0000070c: R29 := mem[R31, el]:u64
00000711: R30 := mem[R31 + 8, el]:u64
00000715: R31 := R31 + 0x10
0000071a: call R30 with noreturn

000007ca: sub _start(_start_result)
00000806: _start_result :: out u32 = low:32[R0]

00000271:
00000276: R29 := 0
0000027b: R30 := 0
00000281: R5 := R0
00000288: R1 := mem[R31, el]:u64
0000028e: R2 := R31 + 8
00000294: R6 := R31
00000299: R0 := 0x1F000
000002a0: R0 := mem[R0 + 0xFD8, el]:u64
000002a5: R3 := 0
000002aa: R4 := 0
000002af: R30 := 0x670
000002b2: call @__libc_start_main with return %000002b4

000002b4:
000002b7: R30 := 0x674
000002ba: call @abort with return %000007f4

000007f4:
000007f5: call @call_weak_fn with noreturn

000007cd: sub abort()


000002b8:
000006b4: R16 := 0x20000
000006bb: R17 := mem[R16 + 0x18, el]:u64
000006c1: R16 := R16 + 0x18
000006c6: call R17 with noreturn

000007ce: sub add_six(add_six_result)
00000807: add_six_result :: out u32 = low:32[R0]

000003d1:
000003d4: R8 := 0x20000
000003db: R9 := pad:64[mem[R8 + 0x30, el]:u32]
000003e1: R9 := pad:64[31:0[R9] + 6]
000003e9: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
000003ee: call R30 with noreturn

000007cf: sub add_two(add_two_result)
00000808: add_two_result :: out u32 = low:32[R0]

000003b2:
000003b5: R8 := 0x20000
000003bc: R9 := pad:64[mem[R8 + 0x30, el]:u32]
000003c2: R9 := pad:64[31:0[R9] + 2]
000003ca: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
000003cf: call R30 with noreturn

000007d0: sub call_weak_fn(call_weak_fn_result)
00000809: call_weak_fn_result :: out u32 = low:32[R0]

000002bc:
000002bf: R0 := 0x1F000
000002c6: R0 := mem[R0 + 0xFD0, el]:u64
000002cc: when R0 = 0 goto %000002ca
000007f6: goto %000005d0

000002ca:
000002d2: call R30 with noreturn

000005d0:
000005d3: goto @__gmon_start__

000005d1:
0000069e: R16 := 0x20000
000006a5: R17 := mem[R16 + 0x10, el]:u64
000006ab: R16 := R16 + 0x10
000006b0: call R17 with noreturn

000007d2: sub deregister_tm_clones(deregister_tm_clones_result)
0000080a: deregister_tm_clones_result :: out u32 = low:32[R0]

000002d8:
000002db: R0 := 0x20000
000002e1: R0 := R0 + 0x38
000002e6: R1 := 0x20000
000002ec: R1 := R1 + 0x38
000002f2: #1 := ~R0
000002f7: #2 := R1 + ~R0
000002fd: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000303: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000307: ZF := #2 + 1 = 0
0000030b: NF := 63:63[#2 + 1]
00000311: when ZF goto %0000030f
000007f7: goto %000005b2

000005b2:
000005b5: R1 := 0x1F000
000005bc: R1 := mem[R1 + 0xFC0, el]:u64
000005c1: when R1 = 0 goto %0000030f
000007f8: goto %000005c5

0000030f:
00000317: call R30 with noreturn

000005c5:
000005c9: R16 := R1
000005ce: call R16 with noreturn

000007d5: sub frame_dummy(frame_dummy_result)
0000080b: frame_dummy_result :: out u32 = low:32[R0]

000003ae:
000003b0: call @register_tm_clones with noreturn

000007d6: sub main(main_argc, main_argv, main_result)
0000080c: main_argc :: in u32 = low:32[R0]
0000080d: main_argv :: in out u64 = R1
0000080e: main_result :: out u32 = low:32[R0]

0000040f:
00000413: #4 := 31:0[R0] - 0xC
00000418: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] - 0xB
0000041d: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF5
00000421: ZF := #4 + 1 = 0
00000425: NF := 31:31[#4 + 1]
0000042c: when CF & ~ZF goto %0000042a
000007f9: goto %00000439

0000042a:
00000432: R0 := 1
00000437: call R30 with noreturn

00000439:
0000043d: R9 := pad:64[31:0[R0]]
00000442: R10 := 0
00000448: R10 := R10 + 0x874
0000044d: R8 := 0x20000
00000452: R11 := 0x7B8
0000045a: R12 := pad:64[mem[R10 + R9]]
00000461: R11 := R11 + (61:0[R12].0)
00000466: call R11 with noreturn

000007d8: sub register_tm_clones(register_tm_clones_result)
0000080f: register_tm_clones_result :: out u32 = low:32[R0]

00000319:
0000031c: R0 := 0x20000
00000322: R0 := R0 + 0x38
00000327: R1 := 0x20000
0000032d: R1 := R1 + 0x38
00000334: R1 := R1 + ~R0 + 1
0000033a: R2 := 0.63:63[R1]
00000341: R1 := R2 + (R1 ~>> 3)
00000347: R1 := extend:64[63:1[R1]]
0000034d: when R1 = 0 goto %0000034b
000007fa: goto %00000594

00000594:
00000597: R2 := 0x1F000
0000059e: R2 := mem[R2 + 0xFE0, el]:u64
000005a3: when R2 = 0 goto %0000034b
000007fb: goto %000005a7

0000034b:
00000353: call R30 with noreturn

000005a7:
000005ab: R16 := R2
000005b0: call R16 with noreturn

000007db: sub sub_seven(sub_seven_result)
00000810: sub_seven_result :: out u32 = low:32[R0]

000003f0:
000003f3: R8 := 0x20000
000003fa: R9 := pad:64[mem[R8 + 0x30, el]:u32]
00000400: R9 := pad:64[31:0[R9] - 7]
00000408: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
0000040d: call R30 with noreturn
