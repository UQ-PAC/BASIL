00000cbc: program
00000c56: sub __cxa_finalize(__cxa_finalize_result)
00000cbd: __cxa_finalize_result :: out u32 = low:32[R0]

000009e3:
00000adb: R16 := 0x10000
00000ae2: R17 := mem[R16 + 0xFB0, el]:u64
00000ae8: R16 := R16 + 0xFB0
00000aed: call R17 with noreturn

00000c57: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000cbe: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000045a:
0000045e: #3 := R31 - 0x20
00000464: mem := mem with [#3, el]:u64 <- R29
0000046a: mem := mem with [#3 + 8, el]:u64 <- R30
0000046e: R31 := #3
00000474: R29 := R31
0000047c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000481: R19 := 0x11000
00000488: R0 := pad:64[mem[R19 + 0x14]]
0000048f: when 31:0[R0] <> 0 goto %0000048d
00000c9b: goto %000009ac

000009ac:
000009af: R0 := 0x10000
000009b6: R0 := mem[R0 + 0xFD8, el]:u64
000009bc: when R0 = 0 goto %000009ba
00000c9c: goto %000009d3

000009d3:
000009d6: R0 := 0x11000
000009dd: R0 := mem[R0 + 8, el]:u64
000009e2: R30 := 0x730
000009e5: call @__cxa_finalize with return %000009ba

000009ba:
000009c2: R30 := 0x734
000009c4: call @deregister_tm_clones with return %000009c6

000009c6:
000009c9: R0 := 1
000009d1: mem := mem with [R19 + 0x14] <- 7:0[R0]
00000c9d: goto %0000048d

0000048d:
00000497: R19 := mem[R31 + 0x10, el]:u64
0000049e: R29 := mem[R31, el]:u64
000004a3: R30 := mem[R31 + 8, el]:u64
000004a7: R31 := R31 + 0x20
000004ac: call R30 with noreturn

00000c5b: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000cbf: __libc_start_main_main :: in u64 = R0
00000cc0: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000cc1: __libc_start_main_arg3 :: in out u64 = R2
00000cc2: __libc_start_main_auxv :: in out u64 = R3
00000cc3: __libc_start_main_result :: out u32 = low:32[R0]

000003b3:
00000ac5: R16 := 0x10000
00000acc: R17 := mem[R16 + 0xFA8, el]:u64
00000ad2: R16 := R16 + 0xFA8
00000ad7: call R17 with noreturn

00000c5c: sub _fini(_fini_result)
00000cc4: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000c5d: sub _init(_init_result)
00000cc5: _init_result :: out u32 = low:32[R0]

00000b35:
00000b3b: #28 := R31 - 0x10
00000b41: mem := mem with [#28, el]:u64 <- R29
00000b47: mem := mem with [#28 + 8, el]:u64 <- R30
00000b4b: R31 := #28
00000b51: R29 := R31
00000b56: R30 := 0x5A8
00000b58: call @call_weak_fn with return %00000b5a

00000b5a:
00000b5f: R29 := mem[R31, el]:u64
00000b64: R30 := mem[R31 + 8, el]:u64
00000b68: R31 := R31 + 0x10
00000b6d: call R30 with noreturn

00000c5e: sub _start(_start_result)
00000cc6: _start_result :: out u32 = low:32[R0]

00000374:
00000379: R29 := 0
0000037e: R30 := 0
00000384: R5 := R0
0000038b: R1 := mem[R31, el]:u64
00000391: R2 := R31 + 8
00000397: R6 := R31
0000039c: R0 := 0x10000
000003a3: R0 := mem[R0 + 0xFF0, el]:u64
000003a8: R3 := 0
000003ad: R4 := 0
000003b2: R30 := 0x670
000003b5: call @__libc_start_main with return %000003b7

000003b7:
000003ba: R30 := 0x674
000003bd: call @abort with return %00000c9e

00000c9e:
00000c9f: call @call_weak_fn with noreturn

00000c61: sub abort()


000003bb:
00000b07: R16 := 0x10000
00000b0e: R17 := mem[R16 + 0xFC0, el]:u64
00000b14: R16 := R16 + 0xFC0
00000b19: call R17 with noreturn

00000c62: sub add_six(add_six_result)
00000cc7: add_six_result :: out u32 = low:32[R0]

000004ea:
000004ed: R0 := 0x10000
000004f4: R0 := mem[R0 + 0xFE0, el]:u64
000004fb: R0 := pad:64[mem[R0, el]:u32]
00000501: R1 := pad:64[31:0[R0] + 6]
00000506: R0 := 0x10000
0000050d: R0 := mem[R0 + 0xFE0, el]:u64
00000515: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000051c: call R30 with noreturn

00000c63: sub add_two(add_two_result)
00000cc8: add_two_result :: out u32 = low:32[R0]

000004b6:
000004b9: R0 := 0x10000
000004c0: R0 := mem[R0 + 0xFE0, el]:u64
000004c7: R0 := pad:64[mem[R0, el]:u32]
000004cd: R1 := pad:64[31:0[R0] + 2]
000004d2: R0 := 0x10000
000004d9: R0 := mem[R0 + 0xFE0, el]:u64
000004e1: mem := mem with [R0, el]:u32 <- 31:0[R1]
000004e8: call R30 with noreturn

00000c64: sub call_weak_fn(call_weak_fn_result)
00000cc9: call_weak_fn_result :: out u32 = low:32[R0]

000003bf:
000003c2: R0 := 0x10000
000003c9: R0 := mem[R0 + 0xFE8, el]:u64
000003cf: when R0 = 0 goto %000003cd
00000ca0: goto %00000a23

000003cd:
000003d5: call R30 with noreturn

00000a23:
00000a26: goto @__gmon_start__

00000a24:
00000af1: R16 := 0x10000
00000af8: R17 := mem[R16 + 0xFB8, el]:u64
00000afe: R16 := R16 + 0xFB8
00000b03: call R17 with noreturn

00000c66: sub deregister_tm_clones(deregister_tm_clones_result)
00000cca: deregister_tm_clones_result :: out u32 = low:32[R0]

000003db:
000003de: R0 := 0x11000
000003e4: R0 := R0 + 0x18
000003e9: R1 := 0x11000
000003ef: R1 := R1 + 0x18
000003f5: #1 := ~R0
000003fa: #2 := R1 + ~R0
00000400: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000406: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000040a: ZF := #2 + 1 = 0
0000040e: NF := 63:63[#2 + 1]
00000414: when ZF goto %00000412
00000ca1: goto %00000a05

00000a05:
00000a08: R1 := 0x10000
00000a0f: R1 := mem[R1 + 0xFD0, el]:u64
00000a14: when R1 = 0 goto %00000412
00000ca2: goto %00000a18

00000412:
0000041a: call R30 with noreturn

00000a18:
00000a1c: R16 := R1
00000a21: call R16 with noreturn

00000c69: sub frame_dummy(frame_dummy_result)
00000ccb: frame_dummy_result :: out u32 = low:32[R0]

000004b2:
000004b4: call @register_tm_clones with noreturn

00000c6a: sub main(main_argc, main_argv, main_result)
00000ccc: main_argc :: in u32 = low:32[R0]
00000ccd: main_argv :: in out u64 = R1
00000cce: main_result :: out u32 = low:32[R0]

00000552:
00000556: #4 := R31 - 0x20
0000055c: mem := mem with [#4, el]:u64 <- R29
00000562: mem := mem with [#4 + 8, el]:u64 <- R30
00000566: R31 := #4
0000056c: R29 := R31
00000574: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000057c: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000583: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000589: #5 := 31:0[R0] - 0xC
0000058e: VF := extend:33[#5 + 1] <> extend:33[31:0[R0]] - 0xB
00000593: CF := pad:33[#5 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF5
00000597: ZF := #5 + 1 = 0
0000059b: NF := 31:31[#5 + 1]
000005a1: when ZF goto %0000059f
00000ca3: goto %000005e7

000005e7:
000005ec: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000005f2: #6 := 31:0[R0] - 0xC
000005f7: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] - 0xB
000005fc: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF5
00000600: ZF := #6 + 1 = 0
00000604: NF := 31:31[#6 + 1]
0000060b: when NF = VF & ~ZF goto %000005de
00000ca4: goto %0000060f

0000060f:
00000614: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000061a: #7 := 31:0[R0] - 0xB
0000061f: VF := extend:33[#7 + 1] <> extend:33[31:0[R0]] - 0xA
00000624: CF := pad:33[#7 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF6
00000628: ZF := #7 + 1 = 0
0000062c: NF := 31:31[#7 + 1]
00000632: when ZF goto %00000630
00000ca5: goto %0000064a

00000630:
00000638: R30 := 0x930
0000063a: call @sub_seven with return %0000063c

0000063c:
0000063f: R30 := 0x934
00000641: call @add_two with return %00000643

00000643:
00000646: R30 := 0x938
00000648: call @add_six with return %0000059f

0000059f:
000005a7: R30 := 0x93C
000005a9: call @sub_seven with return %000005ab

000005ab:
000005ae: R30 := 0x940
000005b0: call @add_two with return %000005b2

000005b2:
000005b5: goto %000005b3

0000064a:
0000064f: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000655: #8 := 31:0[R0] - 0xB
0000065a: VF := extend:33[#8 + 1] <> extend:33[31:0[R0]] - 0xA
0000065f: CF := pad:33[#8 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF6
00000663: ZF := #8 + 1 = 0
00000667: NF := 31:31[#8 + 1]
0000066e: when NF = VF & ~ZF goto %000005de
00000ca6: goto %00000672

00000672:
00000677: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000067d: #9 := 31:0[R0] - 0xA
00000682: VF := extend:33[#9 + 1] <> extend:33[31:0[R0]] - 9
00000687: CF := pad:33[#9 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF7
0000068b: ZF := #9 + 1 = 0
0000068f: NF := 31:31[#9 + 1]
00000695: when ZF goto %00000693
00000ca7: goto %000006aa

00000693:
0000069b: R30 := 0x924
0000069d: call @add_two with return %0000069f

0000069f:
000006a2: R30 := 0x928
000006a4: call @add_six with return %000006a6

000006a6:
000006a8: goto %000005b3

000006aa:
000006af: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000006b5: #10 := 31:0[R0] - 0xA
000006ba: VF := extend:33[#10 + 1] <> extend:33[31:0[R0]] - 9
000006bf: CF := pad:33[#10 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF7
000006c3: ZF := #10 + 1 = 0
000006c7: NF := 31:31[#10 + 1]
000006ce: when NF = VF & ~ZF goto %000005de
00000ca8: goto %000006d2

000006d2:
000006d7: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000006dd: #11 := 31:0[R0] - 9
000006e2: VF := extend:33[#11 + 1] <> extend:33[31:0[R0]] - 8
000006e7: CF := pad:33[#11 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF8
000006eb: ZF := #11 + 1 = 0
000006ef: NF := 31:31[#11 + 1]
000006f5: when ZF goto %000006f3
00000ca9: goto %0000070a

0000070a:
0000070f: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000715: #12 := 31:0[R0] - 9
0000071a: VF := extend:33[#12 + 1] <> extend:33[31:0[R0]] - 8
0000071f: CF := pad:33[#12 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF8
00000723: ZF := #12 + 1 = 0
00000727: NF := 31:31[#12 + 1]
0000072e: when NF = VF & ~ZF goto %000005de
00000caa: goto %00000732

00000732:
00000737: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000073d: #13 := 31:0[R0] - 8
00000742: VF := extend:33[#13 + 1] <> extend:33[31:0[R0]] - 7
00000747: CF := pad:33[#13 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF9
0000074b: ZF := #13 + 1 = 0
0000074f: NF := 31:31[#13 + 1]
00000755: when ZF goto %00000753
00000cab: goto %0000075f

0000075f:
00000764: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000076a: #14 := 31:0[R0] - 8
0000076f: VF := extend:33[#14 + 1] <> extend:33[31:0[R0]] - 7
00000774: CF := pad:33[#14 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF9
00000778: ZF := #14 + 1 = 0
0000077c: NF := 31:31[#14 + 1]
00000783: when NF = VF & ~ZF goto %000005de
00000cac: goto %00000787

00000787:
0000078c: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000792: #15 := 31:0[R0] - 7
00000797: VF := extend:33[#15 + 1] <> extend:33[31:0[R0]] - 6
0000079c: CF := pad:33[#15 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFA
000007a0: ZF := #15 + 1 = 0
000007a4: NF := 31:31[#15 + 1]
000007aa: when ZF goto %000007a8
00000cad: goto %000007b4

000007b4:
000007b9: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000007bf: #16 := 31:0[R0] - 7
000007c4: VF := extend:33[#16 + 1] <> extend:33[31:0[R0]] - 6
000007c9: CF := pad:33[#16 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFA
000007cd: ZF := #16 + 1 = 0
000007d1: NF := 31:31[#16 + 1]
000007d8: when NF = VF & ~ZF goto %000005de
00000cae: goto %000007dc

000007dc:
000007e1: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000007e7: #17 := 31:0[R0] - 6
000007ec: VF := extend:33[#17 + 1] <> extend:33[31:0[R0]] - 5
000007f1: CF := pad:33[#17 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFB
000007f5: ZF := #17 + 1 = 0
000007f9: NF := 31:31[#17 + 1]
000007ff: when ZF goto %000007fd
00000caf: goto %00000810

000007fd:
00000805: R30 := 0x908
00000807: call @add_six with return %00000809

00000809:
0000080c: R30 := 0x90C
0000080e: call @add_two with return %000007a8

000007a8:
000007b0: R30 := 0x910
000007b2: call @add_six with return %00000753

00000753:
0000075b: R30 := 0x914
0000075d: call @sub_seven with return %000006f3

000006f3:
000006fb: R30 := 0x918
000006fd: call @sub_seven with return %000006ff

000006ff:
00000702: R30 := 0x91C
00000704: call @add_six with return %00000706

00000706:
00000708: goto %000005b3

00000810:
00000815: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000081b: #18 := 31:0[R0] - 6
00000820: VF := extend:33[#18 + 1] <> extend:33[31:0[R0]] - 5
00000825: CF := pad:33[#18 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFB
00000829: ZF := #18 + 1 = 0
0000082d: NF := 31:31[#18 + 1]
00000834: when NF = VF & ~ZF goto %000005de
00000cb0: goto %00000838

00000838:
0000083d: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000843: #19 := 31:0[R0] - 5
00000848: VF := extend:33[#19 + 1] <> extend:33[31:0[R0]] - 4
0000084d: CF := pad:33[#19 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFC
00000851: ZF := #19 + 1 = 0
00000855: NF := 31:31[#19 + 1]
0000085b: when ZF goto %00000859
00000cb1: goto %00000869

00000859:
00000861: R30 := 0x900
00000863: call @add_six with return %00000865

00000865:
00000867: goto %000005b3

00000869:
0000086e: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000874: #20 := 31:0[R0] - 5
00000879: VF := extend:33[#20 + 1] <> extend:33[31:0[R0]] - 4
0000087e: CF := pad:33[#20 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFC
00000882: ZF := #20 + 1 = 0
00000886: NF := 31:31[#20 + 1]
0000088d: when NF = VF & ~ZF goto %000005de
00000cb2: goto %00000891

00000891:
00000896: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000089c: #21 := 31:0[R0] - 4
000008a1: VF := extend:33[#21 + 1] <> extend:33[31:0[R0]] - 3
000008a6: CF := pad:33[#21 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFD
000008aa: ZF := #21 + 1 = 0
000008ae: NF := 31:31[#21 + 1]
000008b4: when ZF goto %000008b2
00000cb3: goto %000008c9

000008b2:
000008ba: R30 := 0x8F4
000008bc: call @add_two with return %000008be

000008be:
000008c1: R30 := 0x8F8
000008c3: call @sub_seven with return %000008c5

000008c5:
000008c7: goto %000005b3

000008c9:
000008ce: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000008d4: #22 := 31:0[R0] - 4
000008d9: VF := extend:33[#22 + 1] <> extend:33[31:0[R0]] - 3
000008de: CF := pad:33[#22 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFD
000008e2: ZF := #22 + 1 = 0
000008e6: NF := 31:31[#22 + 1]
000008ed: when NF = VF & ~ZF goto %000005de
00000cb4: goto %000008f1

000008f1:
000008f6: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000008fc: #23 := 31:0[R0] - 3
00000901: VF := extend:33[#23 + 1] <> extend:33[31:0[R0]] - 2
00000906: CF := pad:33[#23 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFE
0000090a: ZF := #23 + 1 = 0
0000090e: NF := 31:31[#23 + 1]
00000914: when ZF goto %00000912
00000cb5: goto %00000922

00000922:
00000927: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000092d: #24 := 31:0[R0] - 3
00000932: VF := extend:33[#24 + 1] <> extend:33[31:0[R0]] - 2
00000937: CF := pad:33[#24 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFE
0000093b: ZF := #24 + 1 = 0
0000093f: NF := 31:31[#24 + 1]
00000946: when NF = VF & ~ZF goto %000005de
00000cb6: goto %0000094a

0000094a:
0000094f: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000955: #25 := 31:0[R0] - 1
0000095a: VF := extend:33[#25 + 1] <> extend:33[31:0[R0]] + 0
0000095f: CF := pad:33[#25 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000963: ZF := #25 + 1 = 0
00000967: NF := 31:31[#25 + 1]
0000096d: when ZF goto %0000096b
00000cb7: goto %00000982

0000096b:
00000973: R30 := 0x8E0
00000975: call @add_two with return %00000977

00000977:
00000979: goto %000005b3

00000982:
00000987: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000098d: #26 := 31:0[R0] - 2
00000992: VF := extend:33[#26 + 1] <> extend:33[31:0[R0]] - 1
00000997: CF := pad:33[#26 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFF
0000099b: ZF := #26 + 1 = 0
0000099f: NF := 31:31[#26 + 1]
000009a4: when ZF goto %0000097b
00000cb8: goto %000009a8

0000097b:
0000097e: R30 := 0x8E8
00000980: call @add_six with return %00000912

00000912:
0000091a: R30 := 0x8EC
0000091c: call @sub_seven with return %0000091e

0000091e:
00000920: goto %000005b3

000005b3:
000005b9: R0 := 0x10000
000005c0: R0 := mem[R0 + 0xFE0, el]:u64
000005c7: R0 := pad:64[mem[R0, el]:u32]
00000cb9: goto %000005c9

000009a8:
000009aa: goto %000005de

000005de:
000005e1: R0 := 1
000005e5: goto %000005c9

000005c9:
000005ce: R29 := mem[R31, el]:u64
000005d3: R30 := mem[R31 + 8, el]:u64
000005d7: R31 := R31 + 0x20
000005dc: call R30 with noreturn

00000c82: sub register_tm_clones(register_tm_clones_result)
00000ccf: register_tm_clones_result :: out u32 = low:32[R0]

0000041c:
0000041f: R0 := 0x11000
00000425: R0 := R0 + 0x18
0000042a: R1 := 0x11000
00000430: R1 := R1 + 0x18
00000437: R1 := R1 + ~R0 + 1
0000043d: R2 := 0.63:63[R1]
00000444: R1 := R2 + (R1 ~>> 3)
0000044a: R1 := extend:64[63:1[R1]]
00000450: when R1 = 0 goto %0000044e
00000cba: goto %000009e7

000009e7:
000009ea: R2 := 0x10000
000009f1: R2 := mem[R2 + 0xFF8, el]:u64
000009f6: when R2 = 0 goto %0000044e
00000cbb: goto %000009fa

0000044e:
00000456: call R30 with noreturn

000009fa:
000009fe: R16 := R2
00000a03: call R16 with noreturn

00000c85: sub sub_seven(sub_seven_result)
00000cd0: sub_seven_result :: out u32 = low:32[R0]

0000051e:
00000521: R0 := 0x10000
00000528: R0 := mem[R0 + 0xFE0, el]:u64
0000052f: R0 := pad:64[mem[R0, el]:u32]
00000535: R1 := pad:64[31:0[R0] - 7]
0000053a: R0 := 0x10000
00000541: R0 := mem[R0 + 0xFE0, el]:u64
00000549: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000550: call R30 with noreturn
