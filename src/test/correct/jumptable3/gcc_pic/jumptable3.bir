0000085d: program
00000823: sub __cxa_finalize(__cxa_finalize_result)
0000085e: __cxa_finalize_result :: out u32 = low:32[R0]

000005ea:
000006e2: R16 := 0x20000
000006e9: R17 := mem[R16 + 8, el]:u64
000006ef: R16 := R16 + 8
000006f4: call R17 with noreturn

00000824: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000085f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000373:
00000377: #3 := R31 - 0x20
0000037d: mem := mem with [#3, el]:u64 <- R29
00000383: mem := mem with [#3 + 8, el]:u64 <- R30
00000387: R31 := #3
0000038d: R29 := R31
00000395: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000039a: R19 := 0x20000
000003a1: R0 := pad:64[mem[R19 + 0x34]]
000003a7: when 0:0[R0] goto %000003a5
00000852: goto %000005b3

000005b3:
000005b6: R0 := 0x1F000
000005bd: R0 := mem[R0 + 0xFC0, el]:u64
000005c3: when R0 = 0 goto %000005c1
00000853: goto %000005da

000005da:
000005dd: R0 := 0x20000
000005e4: R0 := mem[R0 + 0x28, el]:u64
000005e9: R30 := 0x730
000005ec: call @__cxa_finalize with return %000005c1

000005c1:
000005c9: R30 := 0x734
000005cb: call @deregister_tm_clones with return %000005cd

000005cd:
000005d0: R0 := 1
000005d8: mem := mem with [R19 + 0x34] <- 7:0[R0]
00000854: goto %000003a5

000003a5:
000003af: R19 := mem[R31 + 0x10, el]:u64
000003b6: R29 := mem[R31, el]:u64
000003bb: R30 := mem[R31 + 8, el]:u64
000003bf: R31 := R31 + 0x20
000003c4: call R30 with noreturn

00000828: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000860: __libc_start_main_main :: in u64 = R0
00000861: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000862: __libc_start_main_arg3 :: in out u64 = R2
00000863: __libc_start_main_auxv :: in out u64 = R3
00000864: __libc_start_main_result :: out u32 = low:32[R0]

000002cc:
000006cc: R16 := 0x20000
000006d3: R17 := mem[R16, el]:u64
000006d9: R16 := R16
000006de: call R17 with noreturn

00000829: sub _fini(_fini_result)
00000865: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000082a: sub _init(_init_result)
00000866: _init_result :: out u32 = low:32[R0]

0000073c:
00000742: #7 := R31 - 0x10
00000748: mem := mem with [#7, el]:u64 <- R29
0000074e: mem := mem with [#7 + 8, el]:u64 <- R30
00000752: R31 := #7
00000758: R29 := R31
0000075d: R30 := 0x5A8
0000075f: call @call_weak_fn with return %00000761

00000761:
00000766: R29 := mem[R31, el]:u64
0000076b: R30 := mem[R31 + 8, el]:u64
0000076f: R31 := R31 + 0x10
00000774: call R30 with noreturn

0000082b: sub _start(_start_result)
00000867: _start_result :: out u32 = low:32[R0]

0000028d:
00000292: R29 := 0
00000297: R30 := 0
0000029d: R5 := R0
000002a4: R1 := mem[R31, el]:u64
000002aa: R2 := R31 + 8
000002b0: R6 := R31
000002b5: R0 := 0x1F000
000002bc: R0 := mem[R0 + 0xFD8, el]:u64
000002c1: R3 := 0
000002c6: R4 := 0
000002cb: R30 := 0x670
000002ce: call @__libc_start_main with return %000002d0

000002d0:
000002d3: R30 := 0x674
000002d6: call @abort with return %00000855

00000855:
00000856: call @call_weak_fn with noreturn

0000082e: sub abort()


000002d4:
0000070e: R16 := 0x20000
00000715: R17 := mem[R16 + 0x18, el]:u64
0000071b: R16 := R16 + 0x18
00000720: call R17 with noreturn

0000082f: sub add_six(add_six_result)
00000868: add_six_result :: out u32 = low:32[R0]

00000402:
00000405: R0 := 0x1F000
0000040c: R0 := mem[R0 + 0xFC8, el]:u64
00000413: R0 := pad:64[mem[R0, el]:u32]
00000419: R1 := pad:64[31:0[R0] + 6]
0000041e: R0 := 0x1F000
00000425: R0 := mem[R0 + 0xFC8, el]:u64
0000042d: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000434: call R30 with noreturn

00000830: sub add_two(add_two_result)
00000869: add_two_result :: out u32 = low:32[R0]

000003ce:
000003d1: R0 := 0x1F000
000003d8: R0 := mem[R0 + 0xFC8, el]:u64
000003df: R0 := pad:64[mem[R0, el]:u32]
000003e5: R1 := pad:64[31:0[R0] + 2]
000003ea: R0 := 0x1F000
000003f1: R0 := mem[R0 + 0xFC8, el]:u64
000003f9: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000400: call R30 with noreturn

00000831: sub call_weak_fn(call_weak_fn_result)
0000086a: call_weak_fn_result :: out u32 = low:32[R0]

000002d8:
000002db: R0 := 0x1F000
000002e2: R0 := mem[R0 + 0xFD0, el]:u64
000002e8: when R0 = 0 goto %000002e6
00000857: goto %0000062a

000002e6:
000002ee: call R30 with noreturn

0000062a:
0000062d: goto @__gmon_start__

0000062b:
000006f8: R16 := 0x20000
000006ff: R17 := mem[R16 + 0x10, el]:u64
00000705: R16 := R16 + 0x10
0000070a: call R17 with noreturn

00000833: sub deregister_tm_clones(deregister_tm_clones_result)
0000086b: deregister_tm_clones_result :: out u32 = low:32[R0]

000002f4:
000002f7: R0 := 0x20000
000002fd: R0 := R0 + 0x38
00000302: R1 := 0x20000
00000308: R1 := R1 + 0x38
0000030e: #1 := ~R0
00000313: #2 := R1 + ~R0
00000319: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000031f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000323: ZF := #2 + 1 = 0
00000327: NF := 63:63[#2 + 1]
0000032d: when ZF goto %0000032b
00000858: goto %0000060c

0000060c:
0000060f: R1 := 0x1F000
00000616: R1 := mem[R1 + 0xFB8, el]:u64
0000061b: when R1 = 0 goto %0000032b
00000859: goto %0000061f

0000032b:
00000333: call R30 with noreturn

0000061f:
00000623: R16 := R1
00000628: call R16 with noreturn

00000836: sub frame_dummy(frame_dummy_result)
0000086c: frame_dummy_result :: out u32 = low:32[R0]

000003ca:
000003cc: call @register_tm_clones with noreturn

00000837: sub main(main_argc, main_argv, main_result)
0000086d: main_argc :: in u32 = low:32[R0]
0000086e: main_argv :: in out u64 = R1
0000086f: main_result :: out u32 = low:32[R0]

0000046a:
0000046e: #4 := R31 - 0x20
00000474: mem := mem with [#4, el]:u64 <- R29
0000047a: mem := mem with [#4 + 8, el]:u64 <- R30
0000047e: R31 := #4
00000484: R29 := R31
0000048c: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000494: mem := mem with [R31 + 0x10, el]:u64 <- R1
0000049b: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000004a1: #5 := 31:0[R0] - 0xC
000004a6: VF := extend:33[#5 + 1] <> extend:33[31:0[R0]] - 0xB
000004ab: CF := pad:33[#5 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF5
000004af: ZF := #5 + 1 = 0
000004b3: NF := 31:31[#5 + 1]
000004ba: when CF & ~ZF goto %000004b8
0000085a: goto %000004ee

000004b8:
000004c0: R0 := 1
000004c5: goto %000004c3

000004c3:
000004cb: R29 := mem[R31, el]:u64
000004d0: R30 := mem[R31 + 8, el]:u64
000004d4: R31 := R31 + 0x20
000004d9: call R30 with noreturn

000004ee:
000004f1: R1 := 0
000004f7: R1 := R1 + 0x890
000004ff: R0 := pad:64[mem[R1 + pad:64[31:0[R0].0], el]:u32]
00000504: R1 := 0x7F4
0000050b: R0 := R1 + extend:64[31:0[R0].0]
00000510: call R0 with noreturn

00000839: sub register_tm_clones(register_tm_clones_result)
00000870: register_tm_clones_result :: out u32 = low:32[R0]

00000335:
00000338: R0 := 0x20000
0000033e: R0 := R0 + 0x38
00000343: R1 := 0x20000
00000349: R1 := R1 + 0x38
00000350: R1 := R1 + ~R0 + 1
00000356: R2 := 0.63:63[R1]
0000035d: R1 := R2 + (R1 ~>> 3)
00000363: R1 := extend:64[63:1[R1]]
00000369: when R1 = 0 goto %00000367
0000085b: goto %000005ee

000005ee:
000005f1: R2 := 0x1F000
000005f8: R2 := mem[R2 + 0xFE0, el]:u64
000005fd: when R2 = 0 goto %00000367
0000085c: goto %00000601

00000367:
0000036f: call R30 with noreturn

00000601:
00000605: R16 := R2
0000060a: call R16 with noreturn

0000083c: sub sub_seven(sub_seven_result)
00000871: sub_seven_result :: out u32 = low:32[R0]

00000436:
00000439: R0 := 0x1F000
00000440: R0 := mem[R0 + 0xFC8, el]:u64
00000447: R0 := pad:64[mem[R0, el]:u32]
0000044d: R1 := pad:64[31:0[R0] - 7]
00000452: R0 := 0x1F000
00000459: R0 := mem[R0 + 0xFC8, el]:u64
00000461: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000468: call R30 with noreturn
