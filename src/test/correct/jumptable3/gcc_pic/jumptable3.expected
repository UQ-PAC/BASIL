var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2188bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 131120bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvand"} bvand1(bv1, bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "sign_extend 30"} sign_extend30_34(bv34) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 30"} zero_extend30_34(bv34) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2188bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2189bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2190bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2191bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2192bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2193bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2194bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2195bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2196bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2197bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2198bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2199bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2200bv64) == 3bv8);
  free ensures (memory_load8_le(mem, 2201bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2202bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2203bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2204bv64) == 5bv8);
  free ensures (memory_load8_le(mem, 2205bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2206bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2207bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2208bv64) == 8bv8);
  free ensures (memory_load8_le(mem, 2209bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2210bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2211bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2212bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2213bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2214bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2215bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2216bv64) == 12bv8);
  free ensures (memory_load8_le(mem, 2217bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2218bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2219bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2220bv64) == 13bv8);
  free ensures (memory_load8_le(mem, 2221bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2222bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2223bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2224bv64) == 14bv8);
  free ensures (memory_load8_le(mem, 2225bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2226bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2227bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2228bv64) == 17bv8);
  free ensures (memory_load8_le(mem, 2229bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2230bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2231bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2232bv64) == 20bv8);
  free ensures (memory_load8_le(mem, 2233bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2234bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2235bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2236bv64) == 23bv8);
  free ensures (memory_load8_le(mem, 2237bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2238bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2239bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 130504bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free ensures (memory_load64_le(mem, 131016bv64) == 131120bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 1872bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R1, R29, R30, R31, mem, stack;
  free requires (memory_load8_le(mem, 131104bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131105bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131106bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131107bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131108bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131109bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131110bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131111bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131112bv64) == 40bv8);
  free requires (memory_load8_le(mem, 131113bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131114bv64) == 2bv8);
  free requires (memory_load8_le(mem, 131115bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131116bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131117bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131118bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131119bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131120bv64) == 5bv8);
  free requires (memory_load8_le(mem, 131121bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131122bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131123bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2188bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2189bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2190bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2191bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2192bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2193bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2194bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2195bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2196bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2197bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2198bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2199bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2200bv64) == 3bv8);
  free requires (memory_load8_le(mem, 2201bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2202bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2203bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2204bv64) == 5bv8);
  free requires (memory_load8_le(mem, 2205bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2206bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2207bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2208bv64) == 8bv8);
  free requires (memory_load8_le(mem, 2209bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2210bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2211bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2212bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2213bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2214bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2215bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2216bv64) == 12bv8);
  free requires (memory_load8_le(mem, 2217bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2218bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2219bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2220bv64) == 13bv8);
  free requires (memory_load8_le(mem, 2221bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2222bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2223bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2224bv64) == 14bv8);
  free requires (memory_load8_le(mem, 2225bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2226bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2227bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2228bv64) == 17bv8);
  free requires (memory_load8_le(mem, 2229bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2230bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2231bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2232bv64) == 20bv8);
  free requires (memory_load8_le(mem, 2233bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2234bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2235bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2236bv64) == 23bv8);
  free requires (memory_load8_le(mem, 2237bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2238bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2239bv64) == 0bv8);
  free requires (memory_load64_le(mem, 130504bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free requires (memory_load64_le(mem, 131016bv64) == 131120bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 130496bv64) == 1872bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 2188bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2189bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2190bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2191bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2192bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2193bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2194bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2195bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2196bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2197bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2198bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2199bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2200bv64) == 3bv8);
  free ensures (memory_load8_le(mem, 2201bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2202bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2203bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2204bv64) == 5bv8);
  free ensures (memory_load8_le(mem, 2205bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2206bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2207bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2208bv64) == 8bv8);
  free ensures (memory_load8_le(mem, 2209bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2210bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2211bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2212bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2213bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2214bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2215bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2216bv64) == 12bv8);
  free ensures (memory_load8_le(mem, 2217bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2218bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2219bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2220bv64) == 13bv8);
  free ensures (memory_load8_le(mem, 2221bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2222bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2223bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2224bv64) == 14bv8);
  free ensures (memory_load8_le(mem, 2225bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2226bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2227bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2228bv64) == 17bv8);
  free ensures (memory_load8_le(mem, 2229bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2230bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2231bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2232bv64) == 20bv8);
  free ensures (memory_load8_le(mem, 2233bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2234bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2235bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2236bv64) == 23bv8);
  free ensures (memory_load8_le(mem, 2237bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2238bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2239bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 130504bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free ensures (memory_load64_le(mem, 131016bv64) == 131120bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 1872bv64);

implementation main()
{
  var #4: bv64;
  var #5: bv32;
  var CF: bv1;
  var Gamma_#4: bool;
  var Gamma_#5: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var VF: bv1;
  var ZF: bv1;
  lmain:
    assume {:captureState "lmain"} true;
    #4, Gamma_#4 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #4, R29), gamma_store64(Gamma_stack, #4, Gamma_R29);
    assume {:captureState "%00000474"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#4, 8bv64), Gamma_R30);
    assume {:captureState "%0000047a"} true;
    R31, Gamma_R31 := #4, Gamma_#4;
    R29, Gamma_R29 := R31, Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    assume {:captureState "%0000048c"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R1), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R1);
    assume {:captureState "%00000494"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #5, Gamma_#5 := bvadd32(R0[32:0], 4294967284bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#5, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934581bv33))), (Gamma_R0 && Gamma_#5);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#5, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967285bv33))), (Gamma_R0 && Gamma_#5);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#5, 1bv32), 0bv32), Gamma_#5;
    NF, Gamma_NF := bvadd32(#5, 1bv32)[32:31], Gamma_#5;
    assert (Gamma_CF && Gamma_ZF);
    goto lmain_goto_l000004b8, lmain_goto_l000004ee;
  l000004b8:
    assume {:captureState "l000004b8"} true;
    R0, Gamma_R0 := 1bv64, true;
    goto l000004c3;
  l000004c3:
    assume {:captureState "l000004c3"} true;
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto main_return;
  l000004ee:
    assume {:captureState "l000004ee"} true;
    R1, Gamma_R1 := 0bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 2192bv64), Gamma_R1;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, zero_extend30_34((R0[32:0] ++ 0bv2))))), (gamma_load32(Gamma_mem, bvadd64(R1, zero_extend30_34((R0[32:0] ++ 0bv2)))) || L(mem, bvadd64(R1, zero_extend30_34((R0[32:0] ++ 0bv2)))));
    R1, Gamma_R1 := 2036bv64, true;
    R0, Gamma_R0 := bvadd64(R1, sign_extend30_34((R0[32:0] ++ 0bv2))), (Gamma_R0 && Gamma_R1);
    //UNRESOLVED: call R0
    assert false;
    //no return target
    assume false;
  lmain_goto_l000004b8:
    assume {:captureState "lmain_goto_l000004b8"} true;
    assume (bvand1(bvcomp1(CF, 1bv1), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l000004b8;
  lmain_goto_l000004ee:
    assume {:captureState "lmain_goto_l000004ee"} true;
    assume (bvand1(bvcomp1(CF, 1bv1), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l000004ee;
  main_return:
    assume {:captureState "main_return"} true;
    return;
}

