var Gamma_R0: bool;
var Gamma_R1: bool;
var Gamma_R29: bool;
var Gamma_R30: bool;
var Gamma_R31: bool;
var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var R0: bv64;
var R1: bv64;
var R29: bv64;
var R30: bv64;
var R31: bv64;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvand"} bvand1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure add_six()
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
{
  ladd_six:
    R0, Gamma_R0 := 65536bv64, true;
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R1, Gamma_R1 := zero_extend32_32(bvadd32(R0[32:0], 6bv32)), Gamma_R0;
    R0, Gamma_R0 := 65536bv64, true;
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    return;
}

procedure add_two()
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
{
  ladd_two:
    R0, Gamma_R0 := 65536bv64, true;
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R1, Gamma_R1 := zero_extend32_32(bvadd32(R0[32:0], 2bv32)), Gamma_R0;
    R0, Gamma_R0 := 65536bv64, true;
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    return;
}

procedure main()
  modifies Gamma_R0, Gamma_R1, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R1, R29, R30, R31, mem, stack;
  requires (Gamma_R0 == true);
  free requires (memory_load8_le(mem, 2420bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2421bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2422bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2423bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69520bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69521bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69522bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69523bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69524bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69525bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69526bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69527bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69528bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69529bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69530bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69531bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69532bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69533bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69534bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69535bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69536bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69537bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69538bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69539bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69540bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69541bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69542bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69543bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69544bv64) == 176bv8);
  free requires (memory_load8_le(mem, 69545bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69546bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69547bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69548bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69549bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69550bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69551bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69552bv64) == 176bv8);
  free requires (memory_load8_le(mem, 69553bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69554bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69555bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69556bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69557bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69558bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69559bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69560bv64) == 176bv8);
  free requires (memory_load8_le(mem, 69561bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69562bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69563bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69564bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69565bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69566bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69567bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69568bv64) == 176bv8);
  free requires (memory_load8_le(mem, 69569bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69570bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69571bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69572bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69573bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69574bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69575bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69576bv64) == 160bv8);
  free requires (memory_load8_le(mem, 69577bv64) == 13bv8);
  free requires (memory_load8_le(mem, 69578bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69579bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69580bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69581bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69582bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69583bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69584bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69585bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69586bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69587bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69588bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69589bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69590bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69591bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69592bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69593bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69594bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69600bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69601bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69602bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69603bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69604bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69605bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69606bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69607bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69608bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69609bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69610bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69611bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69612bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69613bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69614bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69615bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69616bv64) == 192bv8);
  free requires (memory_load8_le(mem, 69617bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69618bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69619bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69620bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69621bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69622bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69623bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69624bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69625bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69626bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69627bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69628bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69629bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69630bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69631bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69648bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69649bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69650bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69651bv64) == 0bv8);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
{
  var #10: bv32;
  var #11: bv32;
  var #12: bv32;
  var #13: bv32;
  var #14: bv32;
  var #15: bv32;
  var #16: bv32;
  var #17: bv32;
  var #18: bv32;
  var #19: bv32;
  var #20: bv32;
  var #21: bv32;
  var #22: bv32;
  var #23: bv32;
  var #24: bv32;
  var #25: bv32;
  var #26: bv32;
  var #4: bv64;
  var #5: bv32;
  var #6: bv32;
  var #7: bv32;
  var #8: bv32;
  var #9: bv32;
  var CF: bv1;
  var Gamma_#10: bool;
  var Gamma_#11: bool;
  var Gamma_#12: bool;
  var Gamma_#13: bool;
  var Gamma_#14: bool;
  var Gamma_#15: bool;
  var Gamma_#16: bool;
  var Gamma_#17: bool;
  var Gamma_#18: bool;
  var Gamma_#19: bool;
  var Gamma_#20: bool;
  var Gamma_#21: bool;
  var Gamma_#22: bool;
  var Gamma_#23: bool;
  var Gamma_#24: bool;
  var Gamma_#25: bool;
  var Gamma_#26: bool;
  var Gamma_#4: bool;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  var Gamma_#7: bool;
  var Gamma_#8: bool;
  var Gamma_#9: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var VF: bv1;
  var ZF: bv1;
  lmain:
    #4, Gamma_#4 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #4, R29), gamma_store64(Gamma_stack, #4, Gamma_R29);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#4, 8bv64), Gamma_R30);
    R31, Gamma_R31 := #4, Gamma_#4;
    R29, Gamma_R29 := R31, Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R1), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R1);
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #5, Gamma_#5 := bvadd32(R0[32:0], 4294967284bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#5, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934581bv33))), (Gamma_R0 && Gamma_#5);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#5, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967285bv33))), (Gamma_R0 && Gamma_#5);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#5, 1bv32), 0bv32), Gamma_#5;
    NF, Gamma_NF := bvadd32(#5, 1bv32)[32:31], Gamma_#5;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l0000059f;
    }
    goto l000005e7;
  l000005e7:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #6, Gamma_#6 := bvadd32(R0[32:0], 4294967284bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#6, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934581bv33))), (Gamma_R0 && Gamma_#6);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#6, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967285bv33))), (Gamma_R0 && Gamma_#6);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#6, 1bv32), 0bv32), Gamma_#6;
    NF, Gamma_NF := bvadd32(#6, 1bv32)[32:31], Gamma_#6;
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000005de;
    }
    goto l0000060f;
  l0000060f:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #7, Gamma_#7 := bvadd32(R0[32:0], 4294967285bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#7, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934582bv33))), (Gamma_R0 && Gamma_#7);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#7, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967286bv33))), (Gamma_R0 && Gamma_#7);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#7, 1bv32), 0bv32), Gamma_#7;
    NF, Gamma_NF := bvadd32(#7, 1bv32)[32:31], Gamma_#7;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l00000630;
    }
    goto l0000064a;
  l00000630:
    R30, Gamma_R30 := 2352bv64, true;
    call sub_seven();
    goto l0000063c;
  l0000063c:
    R30, Gamma_R30 := 2356bv64, true;
    call add_two();
    goto l00000643;
  l00000643:
    R30, Gamma_R30 := 2360bv64, true;
    call add_six();
    goto l0000059f;
  l0000059f:
    R30, Gamma_R30 := 2364bv64, true;
    call sub_seven();
    goto l000005ab;
  l000005ab:
    R30, Gamma_R30 := 2368bv64, true;
    call add_two();
    goto l000005b2;
  l000005b2:
    goto l000005b3;
  l0000064a:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #8, Gamma_#8 := bvadd32(R0[32:0], 4294967285bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#8, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934582bv33))), (Gamma_R0 && Gamma_#8);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#8, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967286bv33))), (Gamma_R0 && Gamma_#8);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#8, 1bv32), 0bv32), Gamma_#8;
    NF, Gamma_NF := bvadd32(#8, 1bv32)[32:31], Gamma_#8;
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000005de;
    }
    goto l00000672;
  l00000672:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #9, Gamma_#9 := bvadd32(R0[32:0], 4294967286bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#9, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934583bv33))), (Gamma_R0 && Gamma_#9);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#9, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967287bv33))), (Gamma_R0 && Gamma_#9);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#9, 1bv32), 0bv32), Gamma_#9;
    NF, Gamma_NF := bvadd32(#9, 1bv32)[32:31], Gamma_#9;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l00000693;
    }
    goto l000006aa;
  l00000693:
    R30, Gamma_R30 := 2340bv64, true;
    call add_two();
    goto l0000069f;
  l0000069f:
    R30, Gamma_R30 := 2344bv64, true;
    call add_six();
    goto l000006a6;
  l000006a6:
    goto l000005b3;
  l000006aa:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #10, Gamma_#10 := bvadd32(R0[32:0], 4294967286bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#10, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934583bv33))), (Gamma_R0 && Gamma_#10);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#10, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967287bv33))), (Gamma_R0 && Gamma_#10);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#10, 1bv32), 0bv32), Gamma_#10;
    NF, Gamma_NF := bvadd32(#10, 1bv32)[32:31], Gamma_#10;
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000005de;
    }
    goto l000006d2;
  l000006d2:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #11, Gamma_#11 := bvadd32(R0[32:0], 4294967287bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#11, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934584bv33))), (Gamma_R0 && Gamma_#11);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#11, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967288bv33))), (Gamma_R0 && Gamma_#11);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#11, 1bv32), 0bv32), Gamma_#11;
    NF, Gamma_NF := bvadd32(#11, 1bv32)[32:31], Gamma_#11;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l000006f3;
    }
    goto l0000070a;
  l0000070a:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #12, Gamma_#12 := bvadd32(R0[32:0], 4294967287bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#12, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934584bv33))), (Gamma_R0 && Gamma_#12);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#12, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967288bv33))), (Gamma_R0 && Gamma_#12);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#12, 1bv32), 0bv32), Gamma_#12;
    NF, Gamma_NF := bvadd32(#12, 1bv32)[32:31], Gamma_#12;
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000005de;
    }
    goto l00000732;
  l00000732:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #13, Gamma_#13 := bvadd32(R0[32:0], 4294967288bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#13, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934585bv33))), (Gamma_R0 && Gamma_#13);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#13, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967289bv33))), (Gamma_R0 && Gamma_#13);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#13, 1bv32), 0bv32), Gamma_#13;
    NF, Gamma_NF := bvadd32(#13, 1bv32)[32:31], Gamma_#13;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l00000753;
    }
    goto l0000075f;
  l0000075f:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #14, Gamma_#14 := bvadd32(R0[32:0], 4294967288bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#14, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934585bv33))), (Gamma_R0 && Gamma_#14);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#14, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967289bv33))), (Gamma_R0 && Gamma_#14);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#14, 1bv32), 0bv32), Gamma_#14;
    NF, Gamma_NF := bvadd32(#14, 1bv32)[32:31], Gamma_#14;
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000005de;
    }
    goto l00000787;
  l00000787:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #15, Gamma_#15 := bvadd32(R0[32:0], 4294967289bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#15, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934586bv33))), (Gamma_R0 && Gamma_#15);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#15, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967290bv33))), (Gamma_R0 && Gamma_#15);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#15, 1bv32), 0bv32), Gamma_#15;
    NF, Gamma_NF := bvadd32(#15, 1bv32)[32:31], Gamma_#15;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l000007a8;
    }
    goto l000007b4;
  l000007b4:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #16, Gamma_#16 := bvadd32(R0[32:0], 4294967289bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#16, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934586bv33))), (Gamma_R0 && Gamma_#16);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#16, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967290bv33))), (Gamma_R0 && Gamma_#16);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#16, 1bv32), 0bv32), Gamma_#16;
    NF, Gamma_NF := bvadd32(#16, 1bv32)[32:31], Gamma_#16;
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000005de;
    }
    goto l000007dc;
  l000007dc:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #17, Gamma_#17 := bvadd32(R0[32:0], 4294967290bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#17, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934587bv33))), (Gamma_R0 && Gamma_#17);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#17, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967291bv33))), (Gamma_R0 && Gamma_#17);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#17, 1bv32), 0bv32), Gamma_#17;
    NF, Gamma_NF := bvadd32(#17, 1bv32)[32:31], Gamma_#17;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l000007fd;
    }
    goto l00000810;
  l000007fd:
    R30, Gamma_R30 := 2312bv64, true;
    call add_six();
    goto l00000809;
  l00000809:
    R30, Gamma_R30 := 2316bv64, true;
    call add_two();
    goto l000007a8;
  l000007a8:
    R30, Gamma_R30 := 2320bv64, true;
    call add_six();
    goto l00000753;
  l00000753:
    R30, Gamma_R30 := 2324bv64, true;
    call sub_seven();
    goto l000006f3;
  l000006f3:
    R30, Gamma_R30 := 2328bv64, true;
    call sub_seven();
    goto l000006ff;
  l000006ff:
    R30, Gamma_R30 := 2332bv64, true;
    call add_six();
    goto l00000706;
  l00000706:
    goto l000005b3;
  l00000810:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #18, Gamma_#18 := bvadd32(R0[32:0], 4294967290bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#18, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934587bv33))), (Gamma_R0 && Gamma_#18);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#18, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967291bv33))), (Gamma_R0 && Gamma_#18);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#18, 1bv32), 0bv32), Gamma_#18;
    NF, Gamma_NF := bvadd32(#18, 1bv32)[32:31], Gamma_#18;
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000005de;
    }
    goto l00000838;
  l00000838:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #19, Gamma_#19 := bvadd32(R0[32:0], 4294967291bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#19, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934588bv33))), (Gamma_R0 && Gamma_#19);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#19, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967292bv33))), (Gamma_R0 && Gamma_#19);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#19, 1bv32), 0bv32), Gamma_#19;
    NF, Gamma_NF := bvadd32(#19, 1bv32)[32:31], Gamma_#19;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l00000859;
    }
    goto l00000869;
  l00000859:
    R30, Gamma_R30 := 2304bv64, true;
    call add_six();
    goto l00000865;
  l00000865:
    goto l000005b3;
  l00000869:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #20, Gamma_#20 := bvadd32(R0[32:0], 4294967291bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#20, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934588bv33))), (Gamma_R0 && Gamma_#20);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#20, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967292bv33))), (Gamma_R0 && Gamma_#20);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#20, 1bv32), 0bv32), Gamma_#20;
    NF, Gamma_NF := bvadd32(#20, 1bv32)[32:31], Gamma_#20;
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000005de;
    }
    goto l00000891;
  l00000891:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #21, Gamma_#21 := bvadd32(R0[32:0], 4294967292bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#21, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934589bv33))), (Gamma_R0 && Gamma_#21);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#21, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967293bv33))), (Gamma_R0 && Gamma_#21);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#21, 1bv32), 0bv32), Gamma_#21;
    NF, Gamma_NF := bvadd32(#21, 1bv32)[32:31], Gamma_#21;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l000008b2;
    }
    goto l000008c9;
  l000008b2:
    R30, Gamma_R30 := 2292bv64, true;
    call add_two();
    goto l000008be;
  l000008be:
    R30, Gamma_R30 := 2296bv64, true;
    call sub_seven();
    goto l000008c5;
  l000008c5:
    goto l000005b3;
  l000008c9:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #22, Gamma_#22 := bvadd32(R0[32:0], 4294967292bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#22, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934589bv33))), (Gamma_R0 && Gamma_#22);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#22, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967293bv33))), (Gamma_R0 && Gamma_#22);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#22, 1bv32), 0bv32), Gamma_#22;
    NF, Gamma_NF := bvadd32(#22, 1bv32)[32:31], Gamma_#22;
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000005de;
    }
    goto l000008f1;
  l000008f1:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #23, Gamma_#23 := bvadd32(R0[32:0], 4294967293bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#23, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934590bv33))), (Gamma_R0 && Gamma_#23);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#23, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967294bv33))), (Gamma_R0 && Gamma_#23);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#23, 1bv32), 0bv32), Gamma_#23;
    NF, Gamma_NF := bvadd32(#23, 1bv32)[32:31], Gamma_#23;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l00000912;
    }
    goto l00000922;
  l00000922:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #24, Gamma_#24 := bvadd32(R0[32:0], 4294967293bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#24, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934590bv33))), (Gamma_R0 && Gamma_#24);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#24, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967294bv33))), (Gamma_R0 && Gamma_#24);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#24, 1bv32), 0bv32), Gamma_#24;
    NF, Gamma_NF := bvadd32(#24, 1bv32)[32:31], Gamma_#24;
    assert (Gamma_ZF && (Gamma_VF && Gamma_NF));
    if ((bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1)) {
      goto l000005de;
    }
    goto l0000094a;
  l0000094a:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #25, Gamma_#25 := bvadd32(R0[32:0], 4294967295bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#25, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 0bv33))), (Gamma_R0 && Gamma_#25);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#25, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967296bv33))), (Gamma_R0 && Gamma_#25);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#25, 1bv32), 0bv32), Gamma_#25;
    NF, Gamma_NF := bvadd32(#25, 1bv32)[32:31], Gamma_#25;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l0000096b;
    }
    goto l00000982;
  l0000096b:
    R30, Gamma_R30 := 2272bv64, true;
    call add_two();
    goto l00000977;
  l00000977:
    goto l000005b3;
  l00000982:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #26, Gamma_#26 := bvadd32(R0[32:0], 4294967294bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#26, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934591bv33))), (Gamma_R0 && Gamma_#26);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#26, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967295bv33))), (Gamma_R0 && Gamma_#26);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#26, 1bv32), 0bv32), Gamma_#26;
    NF, Gamma_NF := bvadd32(#26, 1bv32)[32:31], Gamma_#26;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l0000097b;
    }
    goto l000009a8;
  l0000097b:
    R30, Gamma_R30 := 2280bv64, true;
    call add_six();
    goto l00000912;
  l00000912:
    R30, Gamma_R30 := 2284bv64, true;
    call sub_seven();
    goto l0000091e;
  l0000091e:
    goto l000005b3;
  l000005b3:
    R0, Gamma_R0 := 65536bv64, true;
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    goto l000005c9;
  l000009a8:
    goto l000005de;
  l000005de:
    R0, Gamma_R0 := 1bv64, true;
    goto l000005c9;
  l000005c9:
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    return;
}

procedure sub_seven()
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
{
  lsub_seven:
    R0, Gamma_R0 := 65536bv64, true;
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R1, Gamma_R1 := zero_extend32_32(bvadd32(R0[32:0], 4294967289bv32)), Gamma_R0;
    R0, Gamma_R0 := 65536bv64, true;
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    return;
}
