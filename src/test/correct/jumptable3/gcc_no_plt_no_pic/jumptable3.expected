var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvand"} bvand1(bv1, bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2356bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2357bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2358bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2359bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure add_six();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load8_le(mem, 2356bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2357bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2358bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2359bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2356bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2357bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2358bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2359bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation add_six()
{
  ladd_six:
    assume {:captureState "ladd_six"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 16bv64), Gamma_R0;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R1, Gamma_R1 := zero_extend32_32(bvadd32(R0[32:0], 6bv32)), Gamma_R0;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 16bv64), Gamma_R0;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%0000126c"} true;
    goto add_six_return;
  add_six_return:
    assume {:captureState "add_six_return"} true;
    return;
}

procedure add_two();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load8_le(mem, 2356bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2357bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2358bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2359bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2356bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2357bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2358bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2359bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation add_two()
{
  ladd_two:
    assume {:captureState "ladd_two"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 16bv64), Gamma_R0;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R1, Gamma_R1 := zero_extend32_32(bvadd32(R0[32:0], 2bv32)), Gamma_R0;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 16bv64), Gamma_R0;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%0000123a"} true;
    goto add_two_return;
  add_two_return:
    assume {:captureState "add_two_return"} true;
    return;
}

procedure main();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R1, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_VF, Gamma_ZF, Gamma_mem, Gamma_stack, NF, R0, R1, R29, R30, R31, VF, ZF, mem, stack;
  requires (Gamma_R0 == true);
  free requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69648bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69649bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69650bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69651bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2356bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2357bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2358bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2359bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 2356bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2357bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2358bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2359bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main()
{
  var #10: bv32;
  var #11: bv32;
  var #12: bv32;
  var #13: bv32;
  var #14: bv32;
  var #15: bv32;
  var #16: bv32;
  var #17: bv32;
  var #18: bv32;
  var #19: bv32;
  var #20: bv32;
  var #21: bv32;
  var #22: bv32;
  var #23: bv32;
  var #24: bv32;
  var #25: bv32;
  var #26: bv32;
  var #4: bv64;
  var #5: bv32;
  var #6: bv32;
  var #7: bv32;
  var #8: bv32;
  var #9: bv32;
  var Gamma_#10: bool;
  var Gamma_#11: bool;
  var Gamma_#12: bool;
  var Gamma_#13: bool;
  var Gamma_#14: bool;
  var Gamma_#15: bool;
  var Gamma_#16: bool;
  var Gamma_#17: bool;
  var Gamma_#18: bool;
  var Gamma_#19: bool;
  var Gamma_#20: bool;
  var Gamma_#21: bool;
  var Gamma_#22: bool;
  var Gamma_#23: bool;
  var Gamma_#24: bool;
  var Gamma_#25: bool;
  var Gamma_#26: bool;
  var Gamma_#4: bool;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  var Gamma_#7: bool;
  var Gamma_#8: bool;
  var Gamma_#9: bool;
  lmain:
    assume {:captureState "lmain"} true;
    #4, Gamma_#4 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #4, R29), gamma_store64(Gamma_stack, #4, Gamma_R29);
    assume {:captureState "%000012b1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#4, 8bv64), Gamma_R30);
    assume {:captureState "%000012b7"} true;
    R31, Gamma_R31 := #4, Gamma_#4;
    R29, Gamma_R29 := R31, Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    assume {:captureState "%000012c9"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R1), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R1);
    assume {:captureState "%000012d1"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #5, Gamma_#5 := bvadd32(R0[32:0], 4294967284bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#5, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934581bv33))), (Gamma_R0 && Gamma_#5);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#5, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967285bv33))), (Gamma_R0 && Gamma_#5);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#5, 1bv32), 0bv32), Gamma_#5;
    NF, Gamma_NF := bvadd32(#5, 1bv32)[32:31], Gamma_#5;
    assert Gamma_ZF;
    goto lmain_goto_l0000133b, lmain_goto_l000012f4;
  l0000133b:
    assume {:captureState "l0000133b"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #6, Gamma_#6 := bvadd32(R0[32:0], 4294967284bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#6, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934581bv33))), (Gamma_R0 && Gamma_#6);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#6, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967285bv33))), (Gamma_R0 && Gamma_#6);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#6, 1bv32), 0bv32), Gamma_#6;
    NF, Gamma_NF := bvadd32(#6, 1bv32)[32:31], Gamma_#6;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l0000133b_goto_l00001332, l0000133b_goto_l00001363;
  l00001363:
    assume {:captureState "l00001363"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #7, Gamma_#7 := bvadd32(R0[32:0], 4294967285bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#7, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934582bv33))), (Gamma_R0 && Gamma_#7);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#7, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967286bv33))), (Gamma_R0 && Gamma_#7);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#7, 1bv32), 0bv32), Gamma_#7;
    NF, Gamma_NF := bvadd32(#7, 1bv32)[32:31], Gamma_#7;
    assert Gamma_ZF;
    goto l00001363_goto_l00001384, l00001363_goto_l0000139e;
  l00001384:
    assume {:captureState "l00001384"} true;
    R30, Gamma_R30 := 2288bv64, true;
    call sub_seven();
    goto l00001390;
  l00001390:
    assume {:captureState "l00001390"} true;
    R30, Gamma_R30 := 2292bv64, true;
    call add_two();
    goto l00001397;
  l00001397:
    assume {:captureState "l00001397"} true;
    R30, Gamma_R30 := 2296bv64, true;
    call add_six();
    goto l000012f4;
  l000012f4:
    assume {:captureState "l000012f4"} true;
    R30, Gamma_R30 := 2300bv64, true;
    call sub_seven();
    goto l00001300;
  l00001300:
    assume {:captureState "l00001300"} true;
    R30, Gamma_R30 := 2304bv64, true;
    call add_two();
    goto l00001307;
  l00001307:
    assume {:captureState "l00001307"} true;
    goto l00001308;
  l0000139e:
    assume {:captureState "l0000139e"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #8, Gamma_#8 := bvadd32(R0[32:0], 4294967285bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#8, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934582bv33))), (Gamma_R0 && Gamma_#8);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#8, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967286bv33))), (Gamma_R0 && Gamma_#8);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#8, 1bv32), 0bv32), Gamma_#8;
    NF, Gamma_NF := bvadd32(#8, 1bv32)[32:31], Gamma_#8;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l0000139e_goto_l000013c6, l0000139e_goto_l00001332;
  l000013c6:
    assume {:captureState "l000013c6"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #9, Gamma_#9 := bvadd32(R0[32:0], 4294967286bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#9, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934583bv33))), (Gamma_R0 && Gamma_#9);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#9, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967287bv33))), (Gamma_R0 && Gamma_#9);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#9, 1bv32), 0bv32), Gamma_#9;
    NF, Gamma_NF := bvadd32(#9, 1bv32)[32:31], Gamma_#9;
    assert Gamma_ZF;
    goto l000013c6_goto_l000013e7, l000013c6_goto_l000013fe;
  l000013e7:
    assume {:captureState "l000013e7"} true;
    R30, Gamma_R30 := 2276bv64, true;
    call add_two();
    goto l000013f3;
  l000013f3:
    assume {:captureState "l000013f3"} true;
    R30, Gamma_R30 := 2280bv64, true;
    call add_six();
    goto l000013fa;
  l000013fa:
    assume {:captureState "l000013fa"} true;
    goto l00001308;
  l000013fe:
    assume {:captureState "l000013fe"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #10, Gamma_#10 := bvadd32(R0[32:0], 4294967286bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#10, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934583bv33))), (Gamma_R0 && Gamma_#10);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#10, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967287bv33))), (Gamma_R0 && Gamma_#10);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#10, 1bv32), 0bv32), Gamma_#10;
    NF, Gamma_NF := bvadd32(#10, 1bv32)[32:31], Gamma_#10;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l000013fe_goto_l00001332, l000013fe_goto_l00001426;
  l00001426:
    assume {:captureState "l00001426"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #11, Gamma_#11 := bvadd32(R0[32:0], 4294967287bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#11, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934584bv33))), (Gamma_R0 && Gamma_#11);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#11, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967288bv33))), (Gamma_R0 && Gamma_#11);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#11, 1bv32), 0bv32), Gamma_#11;
    NF, Gamma_NF := bvadd32(#11, 1bv32)[32:31], Gamma_#11;
    assert Gamma_ZF;
    goto l00001426_goto_l0000145e, l00001426_goto_l00001447;
  l0000145e:
    assume {:captureState "l0000145e"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #12, Gamma_#12 := bvadd32(R0[32:0], 4294967287bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#12, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934584bv33))), (Gamma_R0 && Gamma_#12);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#12, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967288bv33))), (Gamma_R0 && Gamma_#12);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#12, 1bv32), 0bv32), Gamma_#12;
    NF, Gamma_NF := bvadd32(#12, 1bv32)[32:31], Gamma_#12;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l0000145e_goto_l00001486, l0000145e_goto_l00001332;
  l00001486:
    assume {:captureState "l00001486"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #13, Gamma_#13 := bvadd32(R0[32:0], 4294967288bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#13, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934585bv33))), (Gamma_R0 && Gamma_#13);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#13, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967289bv33))), (Gamma_R0 && Gamma_#13);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#13, 1bv32), 0bv32), Gamma_#13;
    NF, Gamma_NF := bvadd32(#13, 1bv32)[32:31], Gamma_#13;
    assert Gamma_ZF;
    goto l00001486_goto_l000014b3, l00001486_goto_l000014a7;
  l000014b3:
    assume {:captureState "l000014b3"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #14, Gamma_#14 := bvadd32(R0[32:0], 4294967288bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#14, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934585bv33))), (Gamma_R0 && Gamma_#14);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#14, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967289bv33))), (Gamma_R0 && Gamma_#14);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#14, 1bv32), 0bv32), Gamma_#14;
    NF, Gamma_NF := bvadd32(#14, 1bv32)[32:31], Gamma_#14;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l000014b3_goto_l000014db, l000014b3_goto_l00001332;
  l000014db:
    assume {:captureState "l000014db"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #15, Gamma_#15 := bvadd32(R0[32:0], 4294967289bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#15, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934586bv33))), (Gamma_R0 && Gamma_#15);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#15, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967290bv33))), (Gamma_R0 && Gamma_#15);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#15, 1bv32), 0bv32), Gamma_#15;
    NF, Gamma_NF := bvadd32(#15, 1bv32)[32:31], Gamma_#15;
    assert Gamma_ZF;
    goto l000014db_goto_l000014fc, l000014db_goto_l00001508;
  l00001508:
    assume {:captureState "l00001508"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #16, Gamma_#16 := bvadd32(R0[32:0], 4294967289bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#16, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934586bv33))), (Gamma_R0 && Gamma_#16);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#16, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967290bv33))), (Gamma_R0 && Gamma_#16);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#16, 1bv32), 0bv32), Gamma_#16;
    NF, Gamma_NF := bvadd32(#16, 1bv32)[32:31], Gamma_#16;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l00001508_goto_l00001530, l00001508_goto_l00001332;
  l00001530:
    assume {:captureState "l00001530"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #17, Gamma_#17 := bvadd32(R0[32:0], 4294967290bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#17, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934587bv33))), (Gamma_R0 && Gamma_#17);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#17, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967291bv33))), (Gamma_R0 && Gamma_#17);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#17, 1bv32), 0bv32), Gamma_#17;
    NF, Gamma_NF := bvadd32(#17, 1bv32)[32:31], Gamma_#17;
    assert Gamma_ZF;
    goto l00001530_goto_l00001564, l00001530_goto_l00001551;
  l00001551:
    assume {:captureState "l00001551"} true;
    R30, Gamma_R30 := 2248bv64, true;
    call add_six();
    goto l0000155d;
  l0000155d:
    assume {:captureState "l0000155d"} true;
    R30, Gamma_R30 := 2252bv64, true;
    call add_two();
    goto l000014fc;
  l000014fc:
    assume {:captureState "l000014fc"} true;
    R30, Gamma_R30 := 2256bv64, true;
    call add_six();
    goto l000014a7;
  l000014a7:
    assume {:captureState "l000014a7"} true;
    R30, Gamma_R30 := 2260bv64, true;
    call sub_seven();
    goto l00001447;
  l00001447:
    assume {:captureState "l00001447"} true;
    R30, Gamma_R30 := 2264bv64, true;
    call sub_seven();
    goto l00001453;
  l00001453:
    assume {:captureState "l00001453"} true;
    R30, Gamma_R30 := 2268bv64, true;
    call add_six();
    goto l0000145a;
  l0000145a:
    assume {:captureState "l0000145a"} true;
    goto l00001308;
  l00001564:
    assume {:captureState "l00001564"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #18, Gamma_#18 := bvadd32(R0[32:0], 4294967290bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#18, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934587bv33))), (Gamma_R0 && Gamma_#18);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#18, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967291bv33))), (Gamma_R0 && Gamma_#18);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#18, 1bv32), 0bv32), Gamma_#18;
    NF, Gamma_NF := bvadd32(#18, 1bv32)[32:31], Gamma_#18;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l00001564_goto_l00001332, l00001564_goto_l0000158c;
  l0000158c:
    assume {:captureState "l0000158c"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #19, Gamma_#19 := bvadd32(R0[32:0], 4294967291bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#19, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934588bv33))), (Gamma_R0 && Gamma_#19);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#19, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967292bv33))), (Gamma_R0 && Gamma_#19);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#19, 1bv32), 0bv32), Gamma_#19;
    NF, Gamma_NF := bvadd32(#19, 1bv32)[32:31], Gamma_#19;
    assert Gamma_ZF;
    goto l0000158c_goto_l000015bd, l0000158c_goto_l000015ad;
  l000015ad:
    assume {:captureState "l000015ad"} true;
    R30, Gamma_R30 := 2240bv64, true;
    call add_six();
    goto l000015b9;
  l000015b9:
    assume {:captureState "l000015b9"} true;
    goto l00001308;
  l000015bd:
    assume {:captureState "l000015bd"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #20, Gamma_#20 := bvadd32(R0[32:0], 4294967291bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#20, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934588bv33))), (Gamma_R0 && Gamma_#20);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#20, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967292bv33))), (Gamma_R0 && Gamma_#20);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#20, 1bv32), 0bv32), Gamma_#20;
    NF, Gamma_NF := bvadd32(#20, 1bv32)[32:31], Gamma_#20;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l000015bd_goto_l000015e5, l000015bd_goto_l00001332;
  l000015e5:
    assume {:captureState "l000015e5"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #21, Gamma_#21 := bvadd32(R0[32:0], 4294967292bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#21, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934589bv33))), (Gamma_R0 && Gamma_#21);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#21, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967293bv33))), (Gamma_R0 && Gamma_#21);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#21, 1bv32), 0bv32), Gamma_#21;
    NF, Gamma_NF := bvadd32(#21, 1bv32)[32:31], Gamma_#21;
    assert Gamma_ZF;
    goto l000015e5_goto_l0000161d, l000015e5_goto_l00001606;
  l00001606:
    assume {:captureState "l00001606"} true;
    R30, Gamma_R30 := 2228bv64, true;
    call add_two();
    goto l00001612;
  l00001612:
    assume {:captureState "l00001612"} true;
    R30, Gamma_R30 := 2232bv64, true;
    call sub_seven();
    goto l00001619;
  l00001619:
    assume {:captureState "l00001619"} true;
    goto l00001308;
  l0000161d:
    assume {:captureState "l0000161d"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #22, Gamma_#22 := bvadd32(R0[32:0], 4294967292bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#22, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934589bv33))), (Gamma_R0 && Gamma_#22);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#22, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967293bv33))), (Gamma_R0 && Gamma_#22);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#22, 1bv32), 0bv32), Gamma_#22;
    NF, Gamma_NF := bvadd32(#22, 1bv32)[32:31], Gamma_#22;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l0000161d_goto_l00001645, l0000161d_goto_l00001332;
  l00001645:
    assume {:captureState "l00001645"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #23, Gamma_#23 := bvadd32(R0[32:0], 4294967293bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#23, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934590bv33))), (Gamma_R0 && Gamma_#23);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#23, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967294bv33))), (Gamma_R0 && Gamma_#23);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#23, 1bv32), 0bv32), Gamma_#23;
    NF, Gamma_NF := bvadd32(#23, 1bv32)[32:31], Gamma_#23;
    assert Gamma_ZF;
    goto l00001645_goto_l00001676, l00001645_goto_l00001666;
  l00001676:
    assume {:captureState "l00001676"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #24, Gamma_#24 := bvadd32(R0[32:0], 4294967293bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#24, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934590bv33))), (Gamma_R0 && Gamma_#24);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#24, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967294bv33))), (Gamma_R0 && Gamma_#24);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#24, 1bv32), 0bv32), Gamma_#24;
    NF, Gamma_NF := bvadd32(#24, 1bv32)[32:31], Gamma_#24;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto l00001676_goto_l00001332, l00001676_goto_l0000169e;
  l0000169e:
    assume {:captureState "l0000169e"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #25, Gamma_#25 := bvadd32(R0[32:0], 4294967295bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#25, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 0bv33))), (Gamma_R0 && Gamma_#25);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#25, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967296bv33))), (Gamma_R0 && Gamma_#25);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#25, 1bv32), 0bv32), Gamma_#25;
    NF, Gamma_NF := bvadd32(#25, 1bv32)[32:31], Gamma_#25;
    assert Gamma_ZF;
    goto l0000169e_goto_l000016d6, l0000169e_goto_l000016bf;
  l000016bf:
    assume {:captureState "l000016bf"} true;
    R30, Gamma_R30 := 2208bv64, true;
    call add_two();
    goto l000016cb;
  l000016cb:
    assume {:captureState "l000016cb"} true;
    goto l00001308;
  l000016d6:
    assume {:captureState "l000016d6"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    #26, Gamma_#26 := bvadd32(R0[32:0], 4294967294bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#26, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 8589934591bv33))), (Gamma_R0 && Gamma_#26);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#26, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967295bv33))), (Gamma_R0 && Gamma_#26);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#26, 1bv32), 0bv32), Gamma_#26;
    NF, Gamma_NF := bvadd32(#26, 1bv32)[32:31], Gamma_#26;
    assert Gamma_ZF;
    goto l000016d6_goto_l000016fc, l000016d6_goto_l000016cf;
  l000016cf:
    assume {:captureState "l000016cf"} true;
    R30, Gamma_R30 := 2216bv64, true;
    call add_six();
    goto l00001666;
  l00001666:
    assume {:captureState "l00001666"} true;
    R30, Gamma_R30 := 2220bv64, true;
    call sub_seven();
    goto l00001672;
  l00001672:
    assume {:captureState "l00001672"} true;
    goto l00001308;
  l00001308:
    assume {:captureState "l00001308"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 16bv64), Gamma_R0;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    goto l0000131d;
  l000016fc:
    assume {:captureState "l000016fc"} true;
    goto l00001332;
  l00001332:
    assume {:captureState "l00001332"} true;
    R0, Gamma_R0 := 1bv64, true;
    goto l0000131d;
  l0000131d:
    assume {:captureState "l0000131d"} true;
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto main_return;
  lmain_goto_l000012f4:
    assume {:captureState "lmain_goto_l000012f4"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l000012f4;
  lmain_goto_l0000133b:
    assume {:captureState "lmain_goto_l0000133b"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l0000133b;
  l0000133b_goto_l00001332:
    assume {:captureState "l0000133b_goto_l00001332"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l00001332;
  l0000133b_goto_l00001363:
    assume {:captureState "l0000133b_goto_l00001363"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l00001363;
  l00001363_goto_l00001384:
    assume {:captureState "l00001363_goto_l00001384"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l00001384;
  l00001363_goto_l0000139e:
    assume {:captureState "l00001363_goto_l0000139e"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l0000139e;
  l0000139e_goto_l00001332:
    assume {:captureState "l0000139e_goto_l00001332"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l00001332;
  l0000139e_goto_l000013c6:
    assume {:captureState "l0000139e_goto_l000013c6"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l000013c6;
  l000013c6_goto_l000013e7:
    assume {:captureState "l000013c6_goto_l000013e7"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l000013e7;
  l000013c6_goto_l000013fe:
    assume {:captureState "l000013c6_goto_l000013fe"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l000013fe;
  l000013fe_goto_l00001332:
    assume {:captureState "l000013fe_goto_l00001332"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l00001332;
  l000013fe_goto_l00001426:
    assume {:captureState "l000013fe_goto_l00001426"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l00001426;
  l00001426_goto_l00001447:
    assume {:captureState "l00001426_goto_l00001447"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l00001447;
  l00001426_goto_l0000145e:
    assume {:captureState "l00001426_goto_l0000145e"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l0000145e;
  l0000145e_goto_l00001332:
    assume {:captureState "l0000145e_goto_l00001332"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l00001332;
  l0000145e_goto_l00001486:
    assume {:captureState "l0000145e_goto_l00001486"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l00001486;
  l00001486_goto_l000014a7:
    assume {:captureState "l00001486_goto_l000014a7"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l000014a7;
  l00001486_goto_l000014b3:
    assume {:captureState "l00001486_goto_l000014b3"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l000014b3;
  l000014b3_goto_l00001332:
    assume {:captureState "l000014b3_goto_l00001332"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l00001332;
  l000014b3_goto_l000014db:
    assume {:captureState "l000014b3_goto_l000014db"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l000014db;
  l000014db_goto_l000014fc:
    assume {:captureState "l000014db_goto_l000014fc"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l000014fc;
  l000014db_goto_l00001508:
    assume {:captureState "l000014db_goto_l00001508"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l00001508;
  l00001508_goto_l00001332:
    assume {:captureState "l00001508_goto_l00001332"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l00001332;
  l00001508_goto_l00001530:
    assume {:captureState "l00001508_goto_l00001530"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l00001530;
  l00001530_goto_l00001551:
    assume {:captureState "l00001530_goto_l00001551"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l00001551;
  l00001530_goto_l00001564:
    assume {:captureState "l00001530_goto_l00001564"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l00001564;
  l00001564_goto_l00001332:
    assume {:captureState "l00001564_goto_l00001332"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l00001332;
  l00001564_goto_l0000158c:
    assume {:captureState "l00001564_goto_l0000158c"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l0000158c;
  l0000158c_goto_l000015ad:
    assume {:captureState "l0000158c_goto_l000015ad"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l000015ad;
  l0000158c_goto_l000015bd:
    assume {:captureState "l0000158c_goto_l000015bd"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l000015bd;
  l000015bd_goto_l00001332:
    assume {:captureState "l000015bd_goto_l00001332"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l00001332;
  l000015bd_goto_l000015e5:
    assume {:captureState "l000015bd_goto_l000015e5"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l000015e5;
  l000015e5_goto_l00001606:
    assume {:captureState "l000015e5_goto_l00001606"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l00001606;
  l000015e5_goto_l0000161d:
    assume {:captureState "l000015e5_goto_l0000161d"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l0000161d;
  l0000161d_goto_l00001332:
    assume {:captureState "l0000161d_goto_l00001332"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l00001332;
  l0000161d_goto_l00001645:
    assume {:captureState "l0000161d_goto_l00001645"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l00001645;
  l00001645_goto_l00001666:
    assume {:captureState "l00001645_goto_l00001666"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l00001666;
  l00001645_goto_l00001676:
    assume {:captureState "l00001645_goto_l00001676"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l00001676;
  l00001676_goto_l00001332:
    assume {:captureState "l00001676_goto_l00001332"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) != 0bv1);
    goto l00001332;
  l00001676_goto_l0000169e:
    assume {:captureState "l00001676_goto_l0000169e"} true;
    assume (bvand1(bvcomp1(NF, VF), bvcomp1(ZF, 0bv1)) == 0bv1);
    goto l0000169e;
  l0000169e_goto_l000016bf:
    assume {:captureState "l0000169e_goto_l000016bf"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l000016bf;
  l0000169e_goto_l000016d6:
    assume {:captureState "l0000169e_goto_l000016d6"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l000016d6;
  l000016d6_goto_l000016cf:
    assume {:captureState "l000016d6_goto_l000016cf"} true;
    assume (bvcomp1(ZF, 1bv1) != 0bv1);
    goto l000016cf;
  l000016d6_goto_l000016fc:
    assume {:captureState "l000016d6_goto_l000016fc"} true;
    assume (bvcomp1(ZF, 1bv1) == 0bv1);
    goto l000016fc;
  main_return:
    assume {:captureState "main_return"} true;
    return;
}

procedure sub_seven();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load8_le(mem, 2356bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2357bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2358bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2359bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1920bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2356bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2357bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2358bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2359bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1920bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation sub_seven()
{
  lsub_seven:
    assume {:captureState "lsub_seven"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 16bv64), Gamma_R0;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R1, Gamma_R1 := zero_extend32_32(bvadd32(R0[32:0], 4294967289bv32)), Gamma_R0;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 16bv64), Gamma_R0;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%0000129e"} true;
    goto sub_seven_return;
  sub_seven_return:
    assume {:captureState "sub_seven_return"} true;
    return;
}

