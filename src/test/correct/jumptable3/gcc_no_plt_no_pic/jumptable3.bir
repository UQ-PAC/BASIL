000008eb: program
000008b1: sub __cxa_finalize(__cxa_finalize_result)
000008ec: __cxa_finalize_result :: out u32 = low:32[R0]

000005e3:
000006db: R16 := 0x20000
000006e2: R17 := mem[R16 + 8, el]:u64
000006e8: R16 := R16 + 8
000006ed: call R17 with noreturn

000008b2: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008ed: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000373:
00000377: #3 := R31 - 0x20
0000037d: mem := mem with [#3, el]:u64 <- R29
00000383: mem := mem with [#3 + 8, el]:u64 <- R30
00000387: R31 := #3
0000038d: R29 := R31
00000395: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000039a: R19 := 0x20000
000003a1: R0 := pad:64[mem[R19 + 0x34]]
000003a7: when 0:0[R0] goto %000003a5
000008e0: goto %000005ac

000005ac:
000005af: R0 := 0x1F000
000005b6: R0 := mem[R0 + 0xFC8, el]:u64
000005bc: when R0 = 0 goto %000005ba
000008e1: goto %000005d3

000005d3:
000005d6: R0 := 0x20000
000005dd: R0 := mem[R0 + 0x28, el]:u64
000005e2: R30 := 0x6F0
000005e5: call @__cxa_finalize with return %000005ba

000005ba:
000005c2: R30 := 0x6F4
000005c4: call @deregister_tm_clones with return %000005c6

000005c6:
000005c9: R0 := 1
000005d1: mem := mem with [R19 + 0x34] <- 7:0[R0]
000008e2: goto %000003a5

000003a5:
000003af: R19 := mem[R31 + 0x10, el]:u64
000003b6: R29 := mem[R31, el]:u64
000003bb: R30 := mem[R31 + 8, el]:u64
000003bf: R31 := R31 + 0x20
000003c4: call R30 with noreturn

000008b6: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008ee: __libc_start_main_main :: in u64 = R0
000008ef: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008f0: __libc_start_main_arg3 :: in out u64 = R2
000008f1: __libc_start_main_auxv :: in out u64 = R3
000008f2: __libc_start_main_result :: out u32 = low:32[R0]

000002cc:
000006c5: R16 := 0x20000
000006cc: R17 := mem[R16, el]:u64
000006d2: R16 := R16
000006d7: call R17 with noreturn

000008b7: sub _fini(_fini_result)
000008f3: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000008b8: sub _init(_init_result)
000008f4: _init_result :: out u32 = low:32[R0]

000007ca:
000007d0: #7 := R31 - 0x10
000007d6: mem := mem with [#7, el]:u64 <- R29
000007dc: mem := mem with [#7 + 8, el]:u64 <- R30
000007e0: R31 := #7
000007e6: R29 := R31
000007eb: R30 := 0x590
000007ed: call @call_weak_fn with return %000007ef

000007ef:
000007f4: R29 := mem[R31, el]:u64
000007f9: R30 := mem[R31 + 8, el]:u64
000007fd: R31 := R31 + 0x10
00000802: call R30 with noreturn

000008b9: sub _start(_start_result)
000008f5: _start_result :: out u32 = low:32[R0]

0000028d:
00000292: R29 := 0
00000297: R30 := 0
0000029d: R5 := R0
000002a4: R1 := mem[R31, el]:u64
000002aa: R2 := R31 + 8
000002b0: R6 := R31
000002b5: R0 := 0x1F000
000002bc: R0 := mem[R0 + 0xFD8, el]:u64
000002c1: R3 := 0
000002c6: R4 := 0
000002cb: R30 := 0x630
000002ce: call @__libc_start_main with return %000002d0

000002d0:
000002d3: R30 := 0x634
000002d6: call @abort with return %000008e3

000008e3:
000008e4: call @call_weak_fn with noreturn

000008bc: sub abort()


000002d4:
00000707: R16 := 0x20000
0000070e: R17 := mem[R16 + 0x18, el]:u64
00000714: R16 := R16 + 0x18
00000719: call R17 with noreturn

000008bd: sub add_six(add_six_result)
000008f6: add_six_result :: out u32 = low:32[R0]

00000400:
00000403: R0 := 0x20000
00000409: R0 := R0 + 0x30
00000410: R0 := pad:64[mem[R0, el]:u32]
00000416: R1 := pad:64[31:0[R0] + 6]
0000041b: R0 := 0x20000
00000421: R0 := R0 + 0x30
00000429: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000430: call R30 with noreturn

000008be: sub add_two(add_two_result)
000008f7: add_two_result :: out u32 = low:32[R0]

000003ce:
000003d1: R0 := 0x20000
000003d7: R0 := R0 + 0x30
000003de: R0 := pad:64[mem[R0, el]:u32]
000003e4: R1 := pad:64[31:0[R0] + 2]
000003e9: R0 := 0x20000
000003ef: R0 := R0 + 0x30
000003f7: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003fe: call R30 with noreturn

000008bf: sub call_weak_fn(call_weak_fn_result)
000008f8: call_weak_fn_result :: out u32 = low:32[R0]

000002d8:
000002db: R0 := 0x1F000
000002e2: R0 := mem[R0 + 0xFD0, el]:u64
000002e8: when R0 = 0 goto %000002e6
000008e5: goto %00000623

000002e6:
000002ee: call R30 with noreturn

00000623:
00000626: goto @__gmon_start__

00000624:
000006f1: R16 := 0x20000
000006f8: R17 := mem[R16 + 0x10, el]:u64
000006fe: R16 := R16 + 0x10
00000703: call R17 with noreturn

000008c1: sub deregister_tm_clones(deregister_tm_clones_result)
000008f9: deregister_tm_clones_result :: out u32 = low:32[R0]

000002f4:
000002f7: R0 := 0x20000
000002fd: R0 := R0 + 0x38
00000302: R1 := 0x20000
00000308: R1 := R1 + 0x38
0000030e: #1 := ~R0
00000313: #2 := R1 + ~R0
00000319: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000031f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000323: ZF := #2 + 1 = 0
00000327: NF := 63:63[#2 + 1]
0000032d: when ZF goto %0000032b
000008e6: goto %00000605

00000605:
00000608: R1 := 0x1F000
0000060f: R1 := mem[R1 + 0xFC0, el]:u64
00000614: when R1 = 0 goto %0000032b
000008e7: goto %00000618

0000032b:
00000333: call R30 with noreturn

00000618:
0000061c: R16 := R1
00000621: call R16 with noreturn

000008c4: sub frame_dummy(frame_dummy_result)
000008fa: frame_dummy_result :: out u32 = low:32[R0]

000003ca:
000003cc: call @register_tm_clones with noreturn

000008c5: sub main(main_argc, main_argv, main_result)
000008fb: main_argc :: in u32 = low:32[R0]
000008fc: main_argv :: in out u64 = R1
000008fd: main_result :: out u32 = low:32[R0]

00000464:
00000468: #4 := R31 - 0x20
0000046e: mem := mem with [#4, el]:u64 <- R29
00000474: mem := mem with [#4 + 8, el]:u64 <- R30
00000478: R31 := #4
0000047e: R29 := R31
00000486: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000048e: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000495: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000049b: #5 := 31:0[R0] - 0xC
000004a0: VF := extend:33[#5 + 1] <> extend:33[31:0[R0]] - 0xB
000004a5: CF := pad:33[#5 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFF5
000004a9: ZF := #5 + 1 = 0
000004ad: NF := 31:31[#5 + 1]
000004b4: when CF & ~ZF goto %000004b2
000008e8: goto %000004e7

000004b2:
000004ba: R0 := 1
000004bf: goto %000004bd

000004bd:
000004c5: R29 := mem[R31, el]:u64
000004ca: R30 := mem[R31 + 8, el]:u64
000004ce: R31 := R31 + 0x20
000004d3: call R30 with noreturn

000004e7:
000004ea: R1 := 0
000004f0: R1 := R1 + 0x850
000004f8: R0 := pad:64[mem[R1 + pad:64[31:0[R0].0], el]:u32]
000004fd: R1 := 0x7B4
00000504: R0 := R1 + extend:64[31:0[R0].0]
00000509: call R0 with noreturn

000008c7: sub register_tm_clones(register_tm_clones_result)
000008fe: register_tm_clones_result :: out u32 = low:32[R0]

00000335:
00000338: R0 := 0x20000
0000033e: R0 := R0 + 0x38
00000343: R1 := 0x20000
00000349: R1 := R1 + 0x38
00000350: R1 := R1 + ~R0 + 1
00000356: R2 := 0.63:63[R1]
0000035d: R1 := R2 + (R1 ~>> 3)
00000363: R1 := extend:64[63:1[R1]]
00000369: when R1 = 0 goto %00000367
000008e9: goto %000005e7

000005e7:
000005ea: R2 := 0x1F000
000005f1: R2 := mem[R2 + 0xFE0, el]:u64
000005f6: when R2 = 0 goto %00000367
000008ea: goto %000005fa

00000367:
0000036f: call R30 with noreturn

000005fa:
000005fe: R16 := R2
00000603: call R16 with noreturn

000008ca: sub sub_seven(sub_seven_result)
000008ff: sub_seven_result :: out u32 = low:32[R0]

00000432:
00000435: R0 := 0x20000
0000043b: R0 := R0 + 0x30
00000442: R0 := pad:64[mem[R0, el]:u32]
00000448: R1 := pad:64[31:0[R0] - 7]
0000044d: R0 := 0x20000
00000453: R0 := R0 + 0x30
0000045b: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000462: call R30 with noreturn
