var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
const {:extern} $secret_addr: bv64;
axiom ($secret_addr == 69684bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69688bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $x_addr) then true else (if (index == $secret_addr) then false else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (memory_load32_le(mem, $secret_addr) == old(memory_load32_le(mem, $secret_addr)));
  free ensures (memory_load32_le(mem, 1928bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (memory_load32_le(mem, $secret_addr) == old(memory_load32_le(mem, $secret_addr)));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert (memory_load32_le(mem, $secret_addr) == memory_load32_le(mem, $secret_addr));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R8, Gamma_R9, Gamma_mem, R0, R8, R9, mem;
  requires (gamma_load32(Gamma_mem, $secret_addr) == true);
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le(mem, 1928bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load32_le(mem, 1928bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main()
{
  var $load16: bv64;
  var $load17: bv32;
  var $load18: bv64;
  var Gamma_$load16: bool;
  var Gamma_$load17: bool;
  var Gamma_$load18: bool;
  $main$__0__$F4R_psC2T4y6sYXDzaadXQ:
    assume {:captureState "$main$__0__$F4R_psC2T4y6sYXDzaadXQ"} true;
    R8, Gamma_R8 := 65536bv64, true;
    call rely();
    $load16, Gamma_$load16 := memory_load64_le(mem, bvadd64(R8, 4048bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4048bv64)) || L(mem, bvadd64(R8, 4048bv64)));
    R8, Gamma_R8 := $load16, Gamma_$load16;
    call rely();
    $load17, Gamma_$load17 := memory_load32_le(mem, R8), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R8, Gamma_R8 := zero_extend32_32($load17), Gamma_$load17;
    R9, Gamma_R9 := 65536bv64, true;
    call rely();
    $load18, Gamma_$load18 := memory_load64_le(mem, bvadd64(R9, 4032bv64)), (gamma_load64(Gamma_mem, bvadd64(R9, 4032bv64)) || L(mem, bvadd64(R9, 4032bv64)));
    R9, Gamma_R9 := $load18, Gamma_$load18;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "1896$0"} true;
    R0, Gamma_R0 := 0bv64, true;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

