000005ae: program
0000057c: sub __cxa_finalize(__cxa_finalize_result)
000005af: __cxa_finalize_result :: out u32 = low:32[R0]

00000330:
00000428: R16 := 0x20000
0000042f: R17 := mem[R16 + 8, el]:u64
00000435: R16 := R16 + 8
0000043a: call R17 with noreturn

0000057d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005b0: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000026f:
00000273: #3 := R31 - 0x20
00000279: mem := mem with [#3, el]:u64 <- R29
0000027f: mem := mem with [#3 + 8, el]:u64 <- R30
00000283: R31 := #3
00000289: R29 := R31
00000291: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000296: R19 := 0x20000
0000029d: R0 := pad:64[mem[R19 + 0x30]]
000002a3: when 0:0[R0] goto %000002a1
000005a4: goto %000002f9

000002f9:
000002fc: R0 := 0x1F000
00000303: R0 := mem[R0 + 0xFC8, el]:u64
00000309: when R0 = 0 goto %00000307
000005a5: goto %00000320

00000320:
00000323: R0 := 0x20000
0000032a: R0 := mem[R0 + 0x28, el]:u64
0000032f: R30 := 0x6F0
00000332: call @__cxa_finalize with return %00000307

00000307:
0000030f: R30 := 0x6F4
00000311: call @deregister_tm_clones with return %00000313

00000313:
00000316: R0 := 1
0000031e: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005a6: goto %000002a1

000002a1:
000002ab: R19 := mem[R31 + 0x10, el]:u64
000002b2: R29 := mem[R31, el]:u64
000002b7: R30 := mem[R31 + 8, el]:u64
000002bb: R31 := R31 + 0x20
000002c0: call R30 with noreturn

00000581: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005b1: __libc_start_main_main :: in u64 = R0
000005b2: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005b3: __libc_start_main_arg3 :: in out u64 = R2
000005b4: __libc_start_main_auxv :: in out u64 = R3
000005b5: __libc_start_main_result :: out u32 = low:32[R0]

000001c8:
00000412: R16 := 0x20000
00000419: R17 := mem[R16, el]:u64
0000041f: R16 := R16
00000424: call R17 with noreturn

00000582: sub _fini(_fini_result)
000005b6: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000583: sub _init(_init_result)
000005b7: _init_result :: out u32 = low:32[R0]

000004d6:
000004dc: #5 := R31 - 0x10
000004e2: mem := mem with [#5, el]:u64 <- R29
000004e8: mem := mem with [#5 + 8, el]:u64 <- R30
000004ec: R31 := #5
000004f2: R29 := R31
000004f7: R30 := 0x590
000004f9: call @call_weak_fn with return %000004fb

000004fb:
00000500: R29 := mem[R31, el]:u64
00000505: R30 := mem[R31 + 8, el]:u64
00000509: R31 := R31 + 0x10
0000050e: call R30 with noreturn

00000584: sub _start(_start_result)
000005b8: _start_result :: out u32 = low:32[R0]

00000189:
0000018e: R29 := 0
00000193: R30 := 0
00000199: R5 := R0
000001a0: R1 := mem[R31, el]:u64
000001a6: R2 := R31 + 8
000001ac: R6 := R31
000001b1: R0 := 0x1F000
000001b8: R0 := mem[R0 + 0xFD8, el]:u64
000001bd: R3 := 0
000001c2: R4 := 0
000001c7: R30 := 0x630
000001ca: call @__libc_start_main with return %000001cc

000001cc:
000001cf: R30 := 0x634
000001d2: call @abort with return %000005a7

000005a7:
000005a8: call @call_weak_fn with noreturn

00000587: sub abort()


000001d0:
00000454: R16 := 0x20000
0000045b: R17 := mem[R16 + 0x18, el]:u64
00000461: R16 := R16 + 0x18
00000466: call R17 with noreturn

00000588: sub call_weak_fn(call_weak_fn_result)
000005b9: call_weak_fn_result :: out u32 = low:32[R0]

000001d4:
000001d7: R0 := 0x1F000
000001de: R0 := mem[R0 + 0xFD0, el]:u64
000001e4: when R0 = 0 goto %000001e2
000005a9: goto %00000370

000001e2:
000001ea: call R30 with noreturn

00000370:
00000373: goto @__gmon_start__

00000371:
0000043e: R16 := 0x20000
00000445: R17 := mem[R16 + 0x10, el]:u64
0000044b: R16 := R16 + 0x10
00000450: call R17 with noreturn

0000058a: sub deregister_tm_clones(deregister_tm_clones_result)
000005ba: deregister_tm_clones_result :: out u32 = low:32[R0]

000001f0:
000001f3: R0 := 0x20000
000001f9: R0 := R0 + 0x30
000001fe: R1 := 0x20000
00000204: R1 := R1 + 0x30
0000020a: #1 := ~R0
0000020f: #2 := R1 + ~R0
00000215: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000021b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000021f: ZF := #2 + 1 = 0
00000223: NF := 63:63[#2 + 1]
00000229: when ZF goto %00000227
000005aa: goto %00000352

00000352:
00000355: R1 := 0x1F000
0000035c: R1 := mem[R1 + 0xFC0, el]:u64
00000361: when R1 = 0 goto %00000227
000005ab: goto %00000365

00000227:
0000022f: call R30 with noreturn

00000365:
00000369: R16 := R1
0000036e: call R16 with noreturn

0000058d: sub frame_dummy(frame_dummy_result)
000005bb: frame_dummy_result :: out u32 = low:32[R0]

000002c6:
000002c8: call @register_tm_clones with noreturn

0000058e: sub main(main_argc, main_argv, main_result)
000005bc: main_argc :: in u32 = low:32[R0]
000005bd: main_argv :: in out u64 = R1
000005be: main_result :: out u32 = low:32[R0]

000002ca:
000002cd: R0 := 0x20000
000002d3: R0 := R0 + 0x38
000002da: R1 := pad:64[mem[R0, el]:u32]
000002df: R0 := 0x20000
000002e5: R0 := R0 + 0x34
000002ed: mem := mem with [R0, el]:u32 <- 31:0[R1]
000002f2: R0 := 0
000002f7: call R30 with noreturn

0000058f: sub register_tm_clones(register_tm_clones_result)
000005bf: register_tm_clones_result :: out u32 = low:32[R0]

00000231:
00000234: R0 := 0x20000
0000023a: R0 := R0 + 0x30
0000023f: R1 := 0x20000
00000245: R1 := R1 + 0x30
0000024c: R1 := R1 + ~R0 + 1
00000252: R2 := 0.63:63[R1]
00000259: R1 := R2 + (R1 ~>> 3)
0000025f: R1 := extend:64[63:1[R1]]
00000265: when R1 = 0 goto %00000263
000005ac: goto %00000334

00000334:
00000337: R2 := 0x1F000
0000033e: R2 := mem[R2 + 0xFE0, el]:u64
00000343: when R2 = 0 goto %00000263
000005ad: goto %00000347

00000263:
0000026b: call R30 with noreturn

00000347:
0000034b: R16 := R2
00000350: call R16 with noreturn
