00000c00: program
00000be8: sub __cxa_finalize(__cxa_finalize_result)
00000c01: __cxa_finalize_result :: out u32 = low:32[R0]

0000098e:
00000a86: R16 := 0x10000
00000a8d: R17 := mem[R16 + 0xFB8, el]:u64
00000a93: R16 := R16 + 0xFB8
00000a98: call R17 with noreturn

00000be9: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c02: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000088f:
00000893: #3 := R31 - 0x20
00000899: mem := mem with [#3, el]:u64 <- R29
0000089f: mem := mem with [#3 + 8, el]:u64 <- R30
000008a3: R31 := #3
000008a9: R29 := R31
000008b1: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008b6: R19 := 0x11000
000008bd: R0 := pad:64[mem[R19 + 0x10]]
000008c4: when 31:0[R0] <> 0 goto %000008c2
00000bea: goto %00000957

00000957:
0000095a: R0 := 0x10000
00000961: R0 := mem[R0 + 0xFE0, el]:u64
00000967: when R0 = 0 goto %00000965
00000beb: goto %0000097e

0000097e:
00000981: R0 := 0x11000
00000988: R0 := mem[R0 + 8, el]:u64
0000098d: R30 := 0x6F0
00000990: call @__cxa_finalize with return %00000965

00000965:
0000096d: R30 := 0x6F4
0000096f: call @deregister_tm_clones with return %00000971

00000971:
00000974: R0 := 1
0000097c: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000bec: goto %000008c2

000008c2:
000008cc: R19 := mem[R31 + 0x10, el]:u64
000008d3: R29 := mem[R31, el]:u64
000008d8: R30 := mem[R31 + 8, el]:u64
000008dc: R31 := R31 + 0x20
000008e1: call R30 with noreturn

00000bed: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c03: __libc_start_main_main :: in u64 = R0
00000c04: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c05: __libc_start_main_arg3 :: in out u64 = R2
00000c06: __libc_start_main_auxv :: in out u64 = R3
00000c07: __libc_start_main_result :: out u32 = low:32[R0]

000007e8:
00000a70: R16 := 0x10000
00000a77: R17 := mem[R16 + 0xFB0, el]:u64
00000a7d: R16 := R16 + 0xFB0
00000a82: call R17 with noreturn

00000bee: sub _fini(_fini_result)
00000c08: _fini_result :: out u32 = low:32[R0]

00000624:
0000062a: #0 := R31 - 0x10
00000630: mem := mem with [#0, el]:u64 <- R29
00000636: mem := mem with [#0 + 8, el]:u64 <- R30
0000063a: R31 := #0
00000640: R29 := R31
00000647: R29 := mem[R31, el]:u64
0000064c: R30 := mem[R31 + 8, el]:u64
00000650: R31 := R31 + 0x10
00000655: call R30 with noreturn

00000bef: sub _init(_init_result)
00000c09: _init_result :: out u32 = low:32[R0]

00000b3b:
00000b41: #6 := R31 - 0x10
00000b47: mem := mem with [#6, el]:u64 <- R29
00000b4d: mem := mem with [#6 + 8, el]:u64 <- R30
00000b51: R31 := #6
00000b57: R29 := R31
00000b5c: R30 := 0x590
00000b5e: call @call_weak_fn with return %00000b60

00000b60:
00000b65: R29 := mem[R31, el]:u64
00000b6a: R30 := mem[R31 + 8, el]:u64
00000b6e: R31 := R31 + 0x10
00000b73: call R30 with noreturn

00000bf0: sub _start(_start_result)
00000c0a: _start_result :: out u32 = low:32[R0]

000007a9:
000007ae: R29 := 0
000007b3: R30 := 0
000007b9: R5 := R0
000007c0: R1 := mem[R31, el]:u64
000007c6: R2 := R31 + 8
000007cc: R6 := R31
000007d1: R0 := 0x10000
000007d8: R0 := mem[R0 + 0xFF0, el]:u64
000007dd: R3 := 0
000007e2: R4 := 0
000007e7: R30 := 0x630
000007ea: call @__libc_start_main with return %000007ec

000007ec:
000007ef: R30 := 0x634
000007f2: call @abort with return %00000bf1

00000bf1:
00000bf2: call @call_weak_fn with noreturn

00000bf3: sub abort()


000007f0:
00000ab2: R16 := 0x10000
00000ab9: R17 := mem[R16 + 0xFC8, el]:u64
00000abf: R16 := R16 + 0xFC8
00000ac4: call R17 with noreturn

00000bf4: sub call_weak_fn(call_weak_fn_result)
00000c0b: call_weak_fn_result :: out u32 = low:32[R0]

000007f4:
000007f7: R0 := 0x10000
000007fe: R0 := mem[R0 + 0xFE8, el]:u64
00000804: when R0 = 0 goto %00000802
00000bf5: goto %000009ce

00000802:
0000080a: call R30 with noreturn

000009ce:
000009d1: goto @__gmon_start__

000009cf:
00000a9c: R16 := 0x10000
00000aa3: R17 := mem[R16 + 0xFC0, el]:u64
00000aa9: R16 := R16 + 0xFC0
00000aae: call R17 with noreturn

00000bf6: sub deregister_tm_clones(deregister_tm_clones_result)
00000c0c: deregister_tm_clones_result :: out u32 = low:32[R0]

00000810:
00000813: R0 := 0x11000
00000819: R0 := R0 + 0x10
0000081e: R1 := 0x11000
00000824: R1 := R1 + 0x10
0000082a: #1 := ~R0
0000082f: #2 := R1 + ~R0
00000835: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000083b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000083f: ZF := #2 + 1 = 0
00000843: NF := 63:63[#2 + 1]
00000849: when ZF goto %00000847
00000bf7: goto %000009b0

000009b0:
000009b3: R1 := 0x10000
000009ba: R1 := mem[R1 + 0xFD8, el]:u64
000009bf: when R1 = 0 goto %00000847
00000bf8: goto %000009c3

00000847:
0000084f: call R30 with noreturn

000009c3:
000009c7: R16 := R1
000009cc: call R16 with noreturn

00000bf9: sub frame_dummy(frame_dummy_result)
00000c0d: frame_dummy_result :: out u32 = low:32[R0]

000008e7:
000008e9: call @register_tm_clones with noreturn

00000bfa: sub main(main_argc, main_argv, main_result)
00000c0e: main_argc :: in u32 = low:32[R0]
00000c0f: main_argv :: in out u64 = R1
00000c10: main_result :: out u32 = low:32[R0]

000008eb:
000008ef: R31 := R31 - 0x10
000008f4: R0 := 0x11000
000008fa: R0 := R0 + 0x18
00000901: R0 := pad:64[mem[R0, el]:u32]
00000909: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000090e: R0 := 0x11000
00000914: R0 := R0 + 0x14
0000091b: R0 := pad:64[mem[R0, el]:u32]
00000921: #4 := 31:0[R0] - 1
00000926: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
0000092b: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000092f: ZF := #4 + 1 = 0
00000933: NF := 31:31[#4 + 1]
00000939: when ZF <> 1 goto %00000937
00000bfb: goto %0000094e

00000937:
00000941: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000bfc: goto %00000943

0000094e:
00000951: R0 := 0
00000955: goto %00000943

00000943:
00000947: R31 := R31 + 0x10
0000094c: call R30 with noreturn

00000bfd: sub register_tm_clones(register_tm_clones_result)
00000c11: register_tm_clones_result :: out u32 = low:32[R0]

00000851:
00000854: R0 := 0x11000
0000085a: R0 := R0 + 0x10
0000085f: R1 := 0x11000
00000865: R1 := R1 + 0x10
0000086c: R1 := R1 + ~R0 + 1
00000872: R2 := 0.63:63[R1]
00000879: R1 := R2 + (R1 ~>> 3)
0000087f: R1 := extend:64[63:1[R1]]
00000885: when R1 = 0 goto %00000883
00000bfe: goto %00000992

00000992:
00000995: R2 := 0x10000
0000099c: R2 := mem[R2 + 0xFF8, el]:u64
000009a1: when R2 = 0 goto %00000883
00000bff: goto %000009a5

00000883:
0000088b: call R30 with noreturn

000009a5:
000009a9: R16 := R2
000009ae: call R16 with noreturn
