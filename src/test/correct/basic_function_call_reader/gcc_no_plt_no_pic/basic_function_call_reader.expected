var Gamma_R0: bool;
var Gamma_R31: bool;
var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var R0: bv64;
var R31: bv64;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $x_addr: bv64;
axiom ($x_addr == 69652bv64);
const $y_addr: bv64;
axiom ($y_addr == 69656bv64);
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $y_addr) then (memory_load32_le(memory, $x_addr) == 1bv32) else (if (index == $x_addr) then true else false))
}

function {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures ((old(memory_load32_le(mem, $x_addr)) == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
  ensures (old(gamma_load32(Gamma_mem, $y_addr)) ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures ((old(memory_load32_le(mem, $x_addr)) == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
  ensures (old(gamma_load32(Gamma_mem, $y_addr)) ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));
{
  call rely();
  call rely();
}

procedure rely_reflexive()
{
  assert ((memory_load32_le(mem, $x_addr) == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
  assert (gamma_load32(Gamma_mem, $y_addr) ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));
}

procedure guarantee_reflexive()
  modifies mem, Gamma_mem;
{
  assert (memory_load32_le(mem, $x_addr) == memory_load32_le(mem, $x_addr));
  assert (memory_load32_le(mem, $y_addr) == memory_load32_le(mem, $y_addr));
}

procedure main()
  modifies Gamma_R0, Gamma_R31, Gamma_stack, R0, R31, stack;
  free requires (memory_load8_le(mem, 1892bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1893bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1894bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1895bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69528bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69529bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69530bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69531bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69532bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69533bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69534bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69535bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69536bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69537bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69538bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69539bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69540bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69541bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69542bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69543bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69544bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69545bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69546bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69547bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69548bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69549bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69550bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69551bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69552bv64) == 160bv8);
  free requires (memory_load8_le(mem, 69553bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69554bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69555bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69556bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69557bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69558bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69559bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69560bv64) == 160bv8);
  free requires (memory_load8_le(mem, 69561bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69562bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69563bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69564bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69565bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69566bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69567bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69568bv64) == 160bv8);
  free requires (memory_load8_le(mem, 69569bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69570bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69571bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69572bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69573bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69574bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69575bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69576bv64) == 160bv8);
  free requires (memory_load8_le(mem, 69577bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69578bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69579bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69580bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69581bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69582bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69583bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69584bv64) == 168bv8);
  free requires (memory_load8_le(mem, 69585bv64) == 13bv8);
  free requires (memory_load8_le(mem, 69586bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69587bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69588bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69589bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69590bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69591bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69592bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69593bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69594bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69600bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69601bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69602bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69603bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69604bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69605bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69606bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69607bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69608bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69609bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69610bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69611bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69612bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69613bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69614bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69615bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69616bv64) == 20bv8);
  free requires (memory_load8_le(mem, 69617bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69618bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69619bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69620bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69621bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69622bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69623bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69624bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69625bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69626bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69627bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69628bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69629bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69630bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69631bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R31 == old(R31));
{
  var #4: bv32;
  var CF: bv1;
  var Gamma_#4: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var VF: bv1;
  var ZF: bv1;
  lmain:
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 24bv64), Gamma_R0;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R0);
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 20bv64), Gamma_R0;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    #4, Gamma_#4 := bvadd32(R0[32:0], 4294967295bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#4, 1bv32)), bvadd33(sign_extend1_32(R0[32:0]), 0bv33))), (Gamma_R0 && Gamma_#4);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#4, 1bv32)), bvadd33(zero_extend1_32(R0[32:0]), 4294967296bv33))), (Gamma_R0 && Gamma_#4);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#4, 1bv32), 0bv32), Gamma_#4;
    NF, Gamma_NF := bvadd32(#4, 1bv32)[32:31], Gamma_#4;
    assert Gamma_ZF;
    if ((bvnot1(bvcomp1(ZF, 1bv1)) != 0bv1)) {
      goto l00000937;
    }
    goto l0000094e;
  l00000937:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 12bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    goto l00000943;
  l0000094e:
    R0, Gamma_R0 := 0bv64, true;
    goto l00000943;
  l00000943:
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    return;
}
