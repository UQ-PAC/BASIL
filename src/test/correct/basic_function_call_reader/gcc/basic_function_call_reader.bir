00000619: program
000005e3: sub __cxa_finalize(__cxa_finalize_result)
0000061a: __cxa_finalize_result :: out u32 = low:32[R0]

00000389:
00000481: R16 := 0x10000
00000488: R17 := mem[R16 + 0xFB8, el]:u64
0000048e: R16 := R16 + 0xFB8
00000493: call R17 with noreturn

000005e4: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000061b: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028a:
0000028e: #3 := R31 - 0x20
00000294: mem := mem with [#3, el]:u64 <- R29
0000029a: mem := mem with [#3 + 8, el]:u64 <- R30
0000029e: R31 := #3
000002a4: R29 := R31
000002ac: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b1: R19 := 0x11000
000002b8: R0 := pad:64[mem[R19 + 0x10]]
000002bf: when 31:0[R0] <> 0 goto %000002bd
0000060d: goto %00000352

00000352:
00000355: R0 := 0x10000
0000035c: R0 := mem[R0 + 0xFE0, el]:u64
00000362: when R0 = 0 goto %00000360
0000060e: goto %00000379

00000379:
0000037c: R0 := 0x11000
00000383: R0 := mem[R0 + 8, el]:u64
00000388: R30 := 0x6F0
0000038b: call @__cxa_finalize with return %00000360

00000360:
00000368: R30 := 0x6F4
0000036a: call @deregister_tm_clones with return %0000036c

0000036c:
0000036f: R0 := 1
00000377: mem := mem with [R19 + 0x10] <- 7:0[R0]
0000060f: goto %000002bd

000002bd:
000002c7: R19 := mem[R31 + 0x10, el]:u64
000002ce: R29 := mem[R31, el]:u64
000002d3: R30 := mem[R31 + 8, el]:u64
000002d7: R31 := R31 + 0x20
000002dc: call R30 with noreturn

000005e8: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000061c: __libc_start_main_main :: in u64 = R0
0000061d: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000061e: __libc_start_main_arg3 :: in out u64 = R2
0000061f: __libc_start_main_auxv :: in out u64 = R3
00000620: __libc_start_main_result :: out u32 = low:32[R0]

000001e3:
0000046b: R16 := 0x10000
00000472: R17 := mem[R16 + 0xFB0, el]:u64
00000478: R16 := R16 + 0xFB0
0000047d: call R17 with noreturn

000005e9: sub _fini(_fini_result)
00000621: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005ea: sub _init(_init_result)
00000622: _init_result :: out u32 = low:32[R0]

00000536:
0000053c: #6 := R31 - 0x10
00000542: mem := mem with [#6, el]:u64 <- R29
00000548: mem := mem with [#6 + 8, el]:u64 <- R30
0000054c: R31 := #6
00000552: R29 := R31
00000557: R30 := 0x590
00000559: call @call_weak_fn with return %0000055b

0000055b:
00000560: R29 := mem[R31, el]:u64
00000565: R30 := mem[R31 + 8, el]:u64
00000569: R31 := R31 + 0x10
0000056e: call R30 with noreturn

000005eb: sub _start(_start_result)
00000623: _start_result :: out u32 = low:32[R0]

000001a4:
000001a9: R29 := 0
000001ae: R30 := 0
000001b4: R5 := R0
000001bb: R1 := mem[R31, el]:u64
000001c1: R2 := R31 + 8
000001c7: R6 := R31
000001cc: R0 := 0x10000
000001d3: R0 := mem[R0 + 0xFF0, el]:u64
000001d8: R3 := 0
000001dd: R4 := 0
000001e2: R30 := 0x630
000001e5: call @__libc_start_main with return %000001e7

000001e7:
000001ea: R30 := 0x634
000001ed: call @abort with return %00000610

00000610:
00000611: call @call_weak_fn with noreturn

000005ee: sub abort()


000001eb:
000004ad: R16 := 0x10000
000004b4: R17 := mem[R16 + 0xFC8, el]:u64
000004ba: R16 := R16 + 0xFC8
000004bf: call R17 with noreturn

000005ef: sub call_weak_fn(call_weak_fn_result)
00000624: call_weak_fn_result :: out u32 = low:32[R0]

000001ef:
000001f2: R0 := 0x10000
000001f9: R0 := mem[R0 + 0xFE8, el]:u64
000001ff: when R0 = 0 goto %000001fd
00000612: goto %000003c9

000001fd:
00000205: call R30 with noreturn

000003c9:
000003cc: goto @__gmon_start__

000003ca:
00000497: R16 := 0x10000
0000049e: R17 := mem[R16 + 0xFC0, el]:u64
000004a4: R16 := R16 + 0xFC0
000004a9: call R17 with noreturn

000005f1: sub deregister_tm_clones(deregister_tm_clones_result)
00000625: deregister_tm_clones_result :: out u32 = low:32[R0]

0000020b:
0000020e: R0 := 0x11000
00000214: R0 := R0 + 0x10
00000219: R1 := 0x11000
0000021f: R1 := R1 + 0x10
00000225: #1 := ~R0
0000022a: #2 := R1 + ~R0
00000230: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000236: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023a: ZF := #2 + 1 = 0
0000023e: NF := 63:63[#2 + 1]
00000244: when ZF goto %00000242
00000613: goto %000003ab

000003ab:
000003ae: R1 := 0x10000
000003b5: R1 := mem[R1 + 0xFD8, el]:u64
000003ba: when R1 = 0 goto %00000242
00000614: goto %000003be

00000242:
0000024a: call R30 with noreturn

000003be:
000003c2: R16 := R1
000003c7: call R16 with noreturn

000005f4: sub frame_dummy(frame_dummy_result)
00000626: frame_dummy_result :: out u32 = low:32[R0]

000002e2:
000002e4: call @register_tm_clones with noreturn

000005f5: sub main(main_argc, main_argv, main_result)
00000627: main_argc :: in u32 = low:32[R0]
00000628: main_argv :: in out u64 = R1
00000629: main_result :: out u32 = low:32[R0]

000002e6:
000002ea: R31 := R31 - 0x10
000002ef: R0 := 0x11000
000002f5: R0 := R0 + 0x18
000002fc: R0 := pad:64[mem[R0, el]:u32]
00000304: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000309: R0 := 0x11000
0000030f: R0 := R0 + 0x14
00000316: R0 := pad:64[mem[R0, el]:u32]
0000031c: #4 := 31:0[R0] - 1
00000321: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
00000326: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000032a: ZF := #4 + 1 = 0
0000032e: NF := 31:31[#4 + 1]
00000334: when ZF <> 1 goto %00000332
00000615: goto %00000349

00000332:
0000033c: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000616: goto %0000033e

00000349:
0000034c: R0 := 0
00000350: goto %0000033e

0000033e:
00000342: R31 := R31 + 0x10
00000347: call R30 with noreturn

000005f8: sub register_tm_clones(register_tm_clones_result)
0000062a: register_tm_clones_result :: out u32 = low:32[R0]

0000024c:
0000024f: R0 := 0x11000
00000255: R0 := R0 + 0x10
0000025a: R1 := 0x11000
00000260: R1 := R1 + 0x10
00000267: R1 := R1 + ~R0 + 1
0000026d: R2 := 0.63:63[R1]
00000274: R1 := R2 + (R1 ~>> 3)
0000027a: R1 := extend:64[63:1[R1]]
00000280: when R1 = 0 goto %0000027e
00000617: goto %0000038d

0000038d:
00000390: R2 := 0x10000
00000397: R2 := mem[R2 + 0xFF8, el]:u64
0000039c: when R2 = 0 goto %0000027e
00000618: goto %000003a0

0000027e:
00000286: call R30 with noreturn

000003a0:
000003a4: R16 := R2
000003a9: call R16 with noreturn
