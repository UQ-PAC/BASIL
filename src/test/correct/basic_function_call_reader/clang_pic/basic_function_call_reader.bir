0000060f: program
000005db: sub __cxa_finalize(__cxa_finalize_result)
00000610: __cxa_finalize_result :: out u32 = low:32[R0]

000003d6:
000004ce: R16 := 0x20000
000004d5: R17 := mem[R16 + 8, el]:u64
000004db: R16 := R16 + 8
000004e0: call R17 with noreturn

000005dc: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000611: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002a3:
000002a7: #3 := R31 - 0x20
000002ad: mem := mem with [#3, el]:u64 <- R29
000002b3: mem := mem with [#3 + 8, el]:u64 <- R30
000002b7: R31 := #3
000002bd: R29 := R31
000002c5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ca: R19 := 0x20000
000002d1: R0 := pad:64[mem[R19 + 0x30]]
000002d7: when 0:0[R0] goto %000002d5
00000604: goto %0000039f

0000039f:
000003a2: R0 := 0x1F000
000003a9: R0 := mem[R0 + 0xFB8, el]:u64
000003af: when R0 = 0 goto %000003ad
00000605: goto %000003c6

000003c6:
000003c9: R0 := 0x20000
000003d0: R0 := mem[R0 + 0x28, el]:u64
000003d5: R30 := 0x770
000003d8: call @__cxa_finalize with return %000003ad

000003ad:
000003b5: R30 := 0x774
000003b7: call @deregister_tm_clones with return %000003b9

000003b9:
000003bc: R0 := 1
000003c4: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000606: goto %000002d5

000002d5:
000002df: R19 := mem[R31 + 0x10, el]:u64
000002e6: R29 := mem[R31, el]:u64
000002eb: R30 := mem[R31 + 8, el]:u64
000002ef: R31 := R31 + 0x20
000002f4: call R30 with noreturn

000005e0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000612: __libc_start_main_main :: in u64 = R0
00000613: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000614: __libc_start_main_arg3 :: in out u64 = R2
00000615: __libc_start_main_auxv :: in out u64 = R3
00000616: __libc_start_main_result :: out u32 = low:32[R0]

000001fc:
000004b8: R16 := 0x20000
000004bf: R17 := mem[R16, el]:u64
000004c5: R16 := R16
000004ca: call R17 with noreturn

000005e1: sub _fini(_fini_result)
00000617: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005e2: sub _init(_init_result)
00000618: _init_result :: out u32 = low:32[R0]

00000528:
0000052e: #6 := R31 - 0x10
00000534: mem := mem with [#6, el]:u64 <- R29
0000053a: mem := mem with [#6 + 8, el]:u64 <- R30
0000053e: R31 := #6
00000544: R29 := R31
00000549: R30 := 0x5F8
0000054b: call @call_weak_fn with return %0000054d

0000054d:
00000552: R29 := mem[R31, el]:u64
00000557: R30 := mem[R31 + 8, el]:u64
0000055b: R31 := R31 + 0x10
00000560: call R30 with noreturn

000005e3: sub _start(_start_result)
00000619: _start_result :: out u32 = low:32[R0]

000001bd:
000001c2: R29 := 0
000001c7: R30 := 0
000001cd: R5 := R0
000001d4: R1 := mem[R31, el]:u64
000001da: R2 := R31 + 8
000001e0: R6 := R31
000001e5: R0 := 0x1F000
000001ec: R0 := mem[R0 + 0xFD8, el]:u64
000001f1: R3 := 0
000001f6: R4 := 0
000001fb: R30 := 0x6B0
000001fe: call @__libc_start_main with return %00000200

00000200:
00000203: R30 := 0x6B4
00000206: call @abort with return %00000607

00000607:
00000608: call @call_weak_fn with noreturn

000005e6: sub abort()


00000204:
000004fa: R16 := 0x20000
00000501: R17 := mem[R16 + 0x18, el]:u64
00000507: R16 := R16 + 0x18
0000050c: call R17 with noreturn

000005e7: sub call_weak_fn(call_weak_fn_result)
0000061a: call_weak_fn_result :: out u32 = low:32[R0]

00000208:
0000020b: R0 := 0x1F000
00000212: R0 := mem[R0 + 0xFC8, el]:u64
00000218: when R0 = 0 goto %00000216
00000609: goto %00000416

00000216:
0000021e: call R30 with noreturn

00000416:
00000419: goto @__gmon_start__

00000417:
000004e4: R16 := 0x20000
000004eb: R17 := mem[R16 + 0x10, el]:u64
000004f1: R16 := R16 + 0x10
000004f6: call R17 with noreturn

000005e9: sub deregister_tm_clones(deregister_tm_clones_result)
0000061b: deregister_tm_clones_result :: out u32 = low:32[R0]

00000224:
00000227: R0 := 0x20000
0000022d: R0 := R0 + 0x30
00000232: R1 := 0x20000
00000238: R1 := R1 + 0x30
0000023e: #1 := ~R0
00000243: #2 := R1 + ~R0
00000249: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000253: ZF := #2 + 1 = 0
00000257: NF := 63:63[#2 + 1]
0000025d: when ZF goto %0000025b
0000060a: goto %000003f8

000003f8:
000003fb: R1 := 0x1F000
00000402: R1 := mem[R1 + 0xFB0, el]:u64
00000407: when R1 = 0 goto %0000025b
0000060b: goto %0000040b

0000025b:
00000263: call R30 with noreturn

0000040b:
0000040f: R16 := R1
00000414: call R16 with noreturn

000005ec: sub frame_dummy(frame_dummy_result)
0000061c: frame_dummy_result :: out u32 = low:32[R0]

000002fa:
000002fc: call @register_tm_clones with noreturn

000005ed: sub main(main_argc, main_argv, main_result)
0000061d: main_argc :: in u32 = low:32[R0]
0000061e: main_argv :: in out u64 = R1
0000061f: main_result :: out u32 = low:32[R0]

000002fe:
00000302: R31 := R31 - 0x10
00000309: mem := mem with [R31 + 0xC, el]:u32 <- 0
0000030e: R8 := 0x1F000
00000315: R8 := mem[R8 + 0xFD0, el]:u64
0000031c: R8 := pad:64[mem[R8, el]:u32]
00000324: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000329: R8 := 0x1F000
00000330: R8 := mem[R8 + 0xFC0, el]:u64
00000337: R8 := pad:64[mem[R8, el]:u32]
0000033d: #4 := 31:0[R8] - 1
00000342: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000347: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
0000034b: ZF := #4 + 1 = 0
0000034f: NF := 31:31[#4 + 1]
00000353: R8 := pad:64[#4 + 1]
0000035f: when ZF goto %00000358
00000360: goto %0000035b

0000035b:
0000035c: R8 := 1
00000362: goto %0000035e

00000358:
00000359: R8 := 0
00000361: goto %0000035e

0000035e:
00000368: when 0:0[R8] goto %00000366
0000060c: goto %00000390

00000366:
00000370: R8 := pad:64[mem[R31 + 8, el]:u32]
00000378: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000037d: goto %0000037b

00000390:
00000393: goto %00000391

00000391:
00000399: mem := mem with [R31 + 0xC, el]:u32 <- 0
0000039d: goto %0000037b

0000037b:
00000383: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000389: R31 := R31 + 0x10
0000038e: call R30 with noreturn

000005ef: sub register_tm_clones(register_tm_clones_result)
00000620: register_tm_clones_result :: out u32 = low:32[R0]

00000265:
00000268: R0 := 0x20000
0000026e: R0 := R0 + 0x30
00000273: R1 := 0x20000
00000279: R1 := R1 + 0x30
00000280: R1 := R1 + ~R0 + 1
00000286: R2 := 0.63:63[R1]
0000028d: R1 := R2 + (R1 ~>> 3)
00000293: R1 := extend:64[63:1[R1]]
00000299: when R1 = 0 goto %00000297
0000060d: goto %000003da

000003da:
000003dd: R2 := 0x1F000
000003e4: R2 := mem[R2 + 0xFE0, el]:u64
000003e9: when R2 = 0 goto %00000297
0000060e: goto %000003ed

00000297:
0000029f: call R30 with noreturn

000003ed:
000003f1: R16 := R2
000003f6: call R16 with noreturn
