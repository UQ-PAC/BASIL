000005f6: program
000005c2: sub __cxa_finalize(__cxa_finalize_result)
000005f7: __cxa_finalize_result :: out u32 = low:32[R0]

000003d6:
000004ce: R16 := 0x11000
000004d5: R17 := mem[R16 + 8, el]:u64
000004db: R16 := R16 + 8
000004e0: call R17 with noreturn

000005c3: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005f8: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002a2:
000002a6: #3 := R31 - 0x20
000002ac: mem := mem with [#3, el]:u64 <- R29
000002b2: mem := mem with [#3 + 8, el]:u64 <- R30
000002b6: R31 := #3
000002bc: R29 := R31
000002c4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c9: R19 := 0x11000
000002d0: R0 := pad:64[mem[R19 + 0x30]]
000002d7: when 31:0[R0] <> 0 goto %000002d5
000005eb: goto %0000039f

0000039f:
000003a2: R0 := 0x10000
000003a9: R0 := mem[R0 + 0xFB8, el]:u64
000003af: when R0 = 0 goto %000003ad
000005ec: goto %000003c6

000003c6:
000003c9: R0 := 0x11000
000003d0: R0 := mem[R0 + 0x28, el]:u64
000003d5: R30 := 0x730
000003d8: call @__cxa_finalize with return %000003ad

000003ad:
000003b5: R30 := 0x734
000003b7: call @deregister_tm_clones with return %000003b9

000003b9:
000003bc: R0 := 1
000003c4: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005ed: goto %000002d5

000002d5:
000002df: R19 := mem[R31 + 0x10, el]:u64
000002e6: R29 := mem[R31, el]:u64
000002eb: R30 := mem[R31 + 8, el]:u64
000002ef: R31 := R31 + 0x20
000002f4: call R30 with noreturn

000005c7: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005f9: __libc_start_main_main :: in u64 = R0
000005fa: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005fb: __libc_start_main_arg3 :: in out u64 = R2
000005fc: __libc_start_main_auxv :: in out u64 = R3
000005fd: __libc_start_main_result :: out u32 = low:32[R0]

000001fb:
000004b8: R16 := 0x11000
000004bf: R17 := mem[R16, el]:u64
000004c5: R16 := R16
000004ca: call R17 with noreturn

000005c8: sub _fini(_fini_result)
000005fe: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005c9: sub _init(_init_result)
000005ff: _init_result :: out u32 = low:32[R0]

00000528:
0000052e: #6 := R31 - 0x10
00000534: mem := mem with [#6, el]:u64 <- R29
0000053a: mem := mem with [#6 + 8, el]:u64 <- R30
0000053e: R31 := #6
00000544: R29 := R31
00000549: R30 := 0x5C0
0000054b: call @call_weak_fn with return %0000054d

0000054d:
00000552: R29 := mem[R31, el]:u64
00000557: R30 := mem[R31 + 8, el]:u64
0000055b: R31 := R31 + 0x10
00000560: call R30 with noreturn

000005ca: sub _start(_start_result)
00000600: _start_result :: out u32 = low:32[R0]

000001bc:
000001c1: R29 := 0
000001c6: R30 := 0
000001cc: R5 := R0
000001d3: R1 := mem[R31, el]:u64
000001d9: R2 := R31 + 8
000001df: R6 := R31
000001e4: R0 := 0x10000
000001eb: R0 := mem[R0 + 0xFD8, el]:u64
000001f0: R3 := 0
000001f5: R4 := 0
000001fa: R30 := 0x670
000001fd: call @__libc_start_main with return %000001ff

000001ff:
00000202: R30 := 0x674
00000205: call @abort with return %000005ee

000005ee:
000005ef: call @call_weak_fn with noreturn

000005cd: sub abort()


00000203:
000004fa: R16 := 0x11000
00000501: R17 := mem[R16 + 0x18, el]:u64
00000507: R16 := R16 + 0x18
0000050c: call R17 with noreturn

000005ce: sub call_weak_fn(call_weak_fn_result)
00000601: call_weak_fn_result :: out u32 = low:32[R0]

00000207:
0000020a: R0 := 0x10000
00000211: R0 := mem[R0 + 0xFC8, el]:u64
00000217: when R0 = 0 goto %00000215
000005f0: goto %00000416

00000215:
0000021d: call R30 with noreturn

00000416:
00000419: goto @__gmon_start__

00000417:
000004e4: R16 := 0x11000
000004eb: R17 := mem[R16 + 0x10, el]:u64
000004f1: R16 := R16 + 0x10
000004f6: call R17 with noreturn

000005d0: sub deregister_tm_clones(deregister_tm_clones_result)
00000602: deregister_tm_clones_result :: out u32 = low:32[R0]

00000223:
00000226: R0 := 0x11000
0000022c: R0 := R0 + 0x30
00000231: R1 := 0x11000
00000237: R1 := R1 + 0x30
0000023d: #1 := ~R0
00000242: #2 := R1 + ~R0
00000248: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000252: ZF := #2 + 1 = 0
00000256: NF := 63:63[#2 + 1]
0000025c: when ZF goto %0000025a
000005f1: goto %000003f8

000003f8:
000003fb: R1 := 0x10000
00000402: R1 := mem[R1 + 0xFB0, el]:u64
00000407: when R1 = 0 goto %0000025a
000005f2: goto %0000040b

0000025a:
00000262: call R30 with noreturn

0000040b:
0000040f: R16 := R1
00000414: call R16 with noreturn

000005d3: sub frame_dummy(frame_dummy_result)
00000603: frame_dummy_result :: out u32 = low:32[R0]

000002fa:
000002fc: call @register_tm_clones with noreturn

000005d4: sub main(main_argc, main_argv, main_result)
00000604: main_argc :: in u32 = low:32[R0]
00000605: main_argv :: in out u64 = R1
00000606: main_result :: out u32 = low:32[R0]

000002fe:
00000302: R31 := R31 - 0x10
00000309: mem := mem with [R31 + 0xC, el]:u32 <- 0
0000030e: R8 := 0x10000
00000315: R8 := mem[R8 + 0xFD0, el]:u64
0000031c: R8 := pad:64[mem[R8, el]:u32]
00000324: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000329: R8 := 0x10000
00000330: R8 := mem[R8 + 0xFC0, el]:u64
00000337: R8 := pad:64[mem[R8, el]:u32]
0000033d: #4 := 31:0[R8] - 1
00000342: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000347: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
0000034b: ZF := #4 + 1 = 0
0000034f: NF := 31:31[#4 + 1]
00000353: R8 := pad:64[#4 + 1]
0000035f: when ZF goto %00000358
00000360: goto %0000035b

0000035b:
0000035c: R8 := 1
00000362: goto %0000035e

00000358:
00000359: R8 := 0
00000361: goto %0000035e

0000035e:
00000368: when 0:0[R8] goto %00000366
000005f3: goto %00000390

00000366:
00000370: R8 := pad:64[mem[R31 + 8, el]:u32]
00000378: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000037d: goto %0000037b

00000390:
00000393: goto %00000391

00000391:
00000399: mem := mem with [R31 + 0xC, el]:u32 <- 0
0000039d: goto %0000037b

0000037b:
00000383: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000389: R31 := R31 + 0x10
0000038e: call R30 with noreturn

000005d6: sub register_tm_clones(register_tm_clones_result)
00000607: register_tm_clones_result :: out u32 = low:32[R0]

00000264:
00000267: R0 := 0x11000
0000026d: R0 := R0 + 0x30
00000272: R1 := 0x11000
00000278: R1 := R1 + 0x30
0000027f: R1 := R1 + ~R0 + 1
00000285: R2 := 0.63:63[R1]
0000028c: R1 := R2 + (R1 ~>> 3)
00000292: R1 := extend:64[63:1[R1]]
00000298: when R1 = 0 goto %00000296
000005f4: goto %000003da

000003da:
000003dd: R2 := 0x10000
000003e4: R2 := mem[R2 + 0xFE0, el]:u64
000003e9: when R2 = 0 goto %00000296
000005f5: goto %000003ed

00000296:
0000029e: call R30 with noreturn

000003ed:
000003f1: R16 := R2
000003f6: call R16 with noreturn
