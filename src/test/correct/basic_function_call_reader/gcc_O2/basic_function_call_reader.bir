000005ec: program
000005b6: sub __cxa_finalize(__cxa_finalize_result)
000005ed: __cxa_finalize_result :: out u32 = low:32[R0]

00000353:
00000452: R16 := 0x20000
00000459: R17 := mem[R16 + 8, el]:u64
0000045f: R16 := R16 + 8
00000464: call R17 with noreturn

000005b7: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005ee: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c1:
000002c5: #3 := R31 - 0x20
000002cb: mem := mem with [#3, el]:u64 <- R29
000002d1: mem := mem with [#3 + 8, el]:u64 <- R30
000002d5: R31 := #3
000002db: R29 := R31
000002e3: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002e8: R19 := 0x20000
000002ef: R0 := pad:64[mem[R19 + 0x30]]
000002f5: when 0:0[R0] goto %000002f3
000005e0: goto %0000031c

0000031c:
0000031f: R0 := 0x1F000
00000326: R0 := mem[R0 + 0xFC8, el]:u64
0000032c: when R0 = 0 goto %0000032a
000005e1: goto %00000343

00000343:
00000346: R0 := 0x20000
0000034d: R0 := mem[R0 + 0x28, el]:u64
00000352: R30 := 0x730
00000355: call @__cxa_finalize with return %0000032a

0000032a:
00000332: R30 := 0x734
00000334: call @deregister_tm_clones with return %00000336

00000336:
00000339: R0 := 1
00000341: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005e2: goto %000002f3

000002f3:
000002fd: R19 := mem[R31 + 0x10, el]:u64
00000304: R29 := mem[R31, el]:u64
00000309: R30 := mem[R31 + 8, el]:u64
0000030d: R31 := R31 + 0x20
00000312: call R30 with noreturn

000005bb: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005ef: __libc_start_main_main :: in u64 = R0
000005f0: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005f1: __libc_start_main_arg3 :: in out u64 = R2
000005f2: __libc_start_main_auxv :: in out u64 = R3
000005f3: __libc_start_main_result :: out u32 = low:32[R0]

0000021a:
0000043c: R16 := 0x20000
00000443: R17 := mem[R16, el]:u64
00000449: R16 := R16
0000044e: call R17 with noreturn

000005bc: sub _fini(_fini_result)
000005f4: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005bd: sub _init(_init_result)
000005f5: _init_result :: out u32 = low:32[R0]

00000508:
0000050e: #5 := R31 - 0x10
00000514: mem := mem with [#5, el]:u64 <- R29
0000051a: mem := mem with [#5 + 8, el]:u64 <- R30
0000051e: R31 := #5
00000524: R29 := R31
00000529: R30 := 0x590
0000052b: call @call_weak_fn with return %0000052d

0000052d:
00000532: R29 := mem[R31, el]:u64
00000537: R30 := mem[R31 + 8, el]:u64
0000053b: R31 := R31 + 0x10
00000540: call R30 with noreturn

000005be: sub _start(_start_result)
000005f6: _start_result :: out u32 = low:32[R0]

000001db:
000001e0: R29 := 0
000001e5: R30 := 0
000001eb: R5 := R0
000001f2: R1 := mem[R31, el]:u64
000001f8: R2 := R31 + 8
000001fe: R6 := R31
00000203: R0 := 0x1F000
0000020a: R0 := mem[R0 + 0xFD8, el]:u64
0000020f: R3 := 0
00000214: R4 := 0
00000219: R30 := 0x670
0000021c: call @__libc_start_main with return %0000021e

0000021e:
00000221: R30 := 0x674
00000224: call @abort with return %000005e3

000005e3:
000005e4: call @call_weak_fn with noreturn

000005c1: sub abort()


00000222:
0000047e: R16 := 0x20000
00000485: R17 := mem[R16 + 0x18, el]:u64
0000048b: R16 := R16 + 0x18
00000490: call R17 with noreturn

000005c2: sub call_weak_fn(call_weak_fn_result)
000005f7: call_weak_fn_result :: out u32 = low:32[R0]

00000226:
00000229: R0 := 0x1F000
00000230: R0 := mem[R0 + 0xFD0, el]:u64
00000236: when R0 = 0 goto %00000234
000005e5: goto %00000393

00000234:
0000023c: call R30 with noreturn

00000393:
00000396: goto @__gmon_start__

00000394:
00000468: R16 := 0x20000
0000046f: R17 := mem[R16 + 0x10, el]:u64
00000475: R16 := R16 + 0x10
0000047a: call R17 with noreturn

000005c4: sub deregister_tm_clones(deregister_tm_clones_result)
000005f8: deregister_tm_clones_result :: out u32 = low:32[R0]

00000242:
00000245: R0 := 0x20000
0000024b: R0 := R0 + 0x30
00000250: R1 := 0x20000
00000256: R1 := R1 + 0x30
0000025c: #1 := ~R0
00000261: #2 := R1 + ~R0
00000267: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000026d: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000271: ZF := #2 + 1 = 0
00000275: NF := 63:63[#2 + 1]
0000027b: when ZF goto %00000279
000005e6: goto %00000375

00000375:
00000378: R1 := 0x1F000
0000037f: R1 := mem[R1 + 0xFC0, el]:u64
00000384: when R1 = 0 goto %00000279
000005e7: goto %00000388

00000279:
00000281: call R30 with noreturn

00000388:
0000038c: R16 := R1
00000391: call R16 with noreturn

000005c7: sub frame_dummy(frame_dummy_result)
000005f9: frame_dummy_result :: out u32 = low:32[R0]

00000318:
0000031a: call @register_tm_clones with noreturn

000005c8: sub main(main_argc, main_argv, main_result)
000005fa: main_argc :: in u32 = low:32[R0]
000005fb: main_argv :: in out u64 = R1
000005fc: main_result :: out u32 = low:32[R0]

000001a9:
000001ac: R0 := 0x20000
000001b2: R1 := R0 + 0x34
000001b9: R0 := pad:64[mem[R0 + 0x34, el]:u32]
000001bf: when 31:0[R0] = 0 goto %000001bd
000005e8: goto %00000398

00000398:
0000039d: R0 := pad:64[mem[R1 + 4, el]:u32]
000005e9: goto %000001bd

000001bd:
000001c5: call R30 with noreturn

000005cb: sub register_tm_clones(register_tm_clones_result)
000005fd: register_tm_clones_result :: out u32 = low:32[R0]

00000283:
00000286: R0 := 0x20000
0000028c: R0 := R0 + 0x30
00000291: R1 := 0x20000
00000297: R1 := R1 + 0x30
0000029e: R1 := R1 + ~R0 + 1
000002a4: R2 := 0.63:63[R1]
000002ab: R1 := R2 + (R1 ~>> 3)
000002b1: R1 := extend:64[63:1[R1]]
000002b7: when R1 = 0 goto %000002b5
000005ea: goto %00000357

00000357:
0000035a: R2 := 0x1F000
00000361: R2 := mem[R2 + 0xFE0, el]:u64
00000366: when R2 = 0 goto %000002b5
000005eb: goto %0000036a

000002b5:
000002bd: call R30 with noreturn

0000036a:
0000036e: R16 := R2
00000373: call R16 with noreturn
