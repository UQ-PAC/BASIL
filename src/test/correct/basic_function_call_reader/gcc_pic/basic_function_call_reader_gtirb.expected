var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R31: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69652bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69656bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $y_addr) then (memory_load32_le(mem$in, $x_addr) == 1bv32) else (if (index == $x_addr) then true else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures ((old(memory_load32_le(mem, $x_addr)) == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
  ensures (old(gamma_load32(Gamma_mem, $y_addr)) ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));
  free ensures (memory_load32_le(mem, 1956bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69000bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69608bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures ((old(memory_load32_le(mem, $x_addr)) == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
  ensures (old(gamma_load32(Gamma_mem, $y_addr)) ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert ((memory_load32_le(mem, $x_addr) == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
  assert (gamma_load32(Gamma_mem, $y_addr) ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

implementation {:extern} guarantee_reflexive()
{
  assert (memory_load32_le(mem, $x_addr) == memory_load32_le(mem, $x_addr));
  assert (memory_load32_le(mem, $y_addr) == memory_load32_le(mem, $y_addr));
}

procedure main_1876();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R31, Gamma_VF, Gamma_ZF, Gamma_mem, Gamma_stack, NF, R0, R31, VF, ZF, mem, stack;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le(mem, 1956bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69000bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69608bv64) == 69656bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 1956bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69000bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69608bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main_1876()
{
  var Cse0__5_1_8: bv32;
  var Gamma_Cse0__5_1_8: bool;
  var Gamma_load10: bool;
  var Gamma_load11: bool;
  var Gamma_load12: bool;
  var Gamma_load8: bool;
  var Gamma_load9: bool;
  var load10: bv64;
  var load11: bv32;
  var load12: bv32;
  var load8: bv64;
  var load9: bv32;
  main_1876__0__XPSYuwk~QqCXXYlfch0U8A:
    assume {:captureState "main_1876__0__XPSYuwk~QqCXXYlfch0U8A"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load8, Gamma_load8 := memory_load64_le(mem, bvadd64(R0, 4072bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4072bv64)) || L(mem, bvadd64(R0, 4072bv64)));
    R0, Gamma_R0 := load8, Gamma_load8;
    call rely();
    load9, Gamma_load9 := memory_load32_le(mem, R0), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := zero_extend32_32(load9), Gamma_load9;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R0);
    assume {:captureState "1892_0"} true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load10, Gamma_load10 := memory_load64_le(mem, bvadd64(R0, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4056bv64)) || L(mem, bvadd64(R0, 4056bv64)));
    R0, Gamma_R0 := load10, Gamma_load10;
    call rely();
    load11, Gamma_load11 := memory_load32_le(mem, R0), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := zero_extend32_32(load11), Gamma_load11;
    Cse0__5_1_8, Gamma_Cse0__5_1_8 := bvadd32(R0[32:0], 0bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp32(Cse0__5_1_8, Cse0__5_1_8)), Gamma_Cse0__5_1_8;
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_1_8), bvadd33(zero_extend1_32(R0[32:0]), 4294967296bv33))), (Gamma_R0 && Gamma_Cse0__5_1_8);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_1_8, 0bv32), Gamma_Cse0__5_1_8;
    NF, Gamma_NF := Cse0__5_1_8[32:31], Gamma_Cse0__5_1_8;
    assert Gamma_ZF;
    goto main_1876__0__XPSYuwk~QqCXXYlfch0U8A_goto_main_1876__2__YV9HrAzzRPueIlS9B6wdEg, main_1876__0__XPSYuwk~QqCXXYlfch0U8A_goto_main_1876__1__tezFaGT_RC6b4e~6~Bd7zA;
  main_1876__0__XPSYuwk~QqCXXYlfch0U8A_goto_main_1876__1__tezFaGT_RC6b4e~6~Bd7zA:
    assume {:captureState "main_1876__0__XPSYuwk~QqCXXYlfch0U8A_goto_main_1876__1__tezFaGT_RC6b4e~6~Bd7zA"} true;
    assume (!(!(ZF == 1bv1)));
    R0, Gamma_R0 := 0bv64, true;
    goto main_1876__1__tezFaGT_RC6b4e~6~Bd7zA;
  main_1876__1__tezFaGT_RC6b4e~6~Bd7zA:
    assume {:captureState "main_1876__1__tezFaGT_RC6b4e~6~Bd7zA"} true;
    goto main_1876__3__BzeSfzsYQfagBIn19G60Ng;
  main_1876__0__XPSYuwk~QqCXXYlfch0U8A_goto_main_1876__2__YV9HrAzzRPueIlS9B6wdEg:
    assume {:captureState "main_1876__0__XPSYuwk~QqCXXYlfch0U8A_goto_main_1876__2__YV9HrAzzRPueIlS9B6wdEg"} true;
    assume (!(ZF == 1bv1));
    load12, Gamma_load12 := memory_load32_le(stack, bvadd64(R31, 12bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    R0, Gamma_R0 := zero_extend32_32(load12), Gamma_load12;
    goto main_1876__2__YV9HrAzzRPueIlS9B6wdEg;
  main_1876__2__YV9HrAzzRPueIlS9B6wdEg:
    assume {:captureState "main_1876__2__YV9HrAzzRPueIlS9B6wdEg"} true;
    goto main_1876__3__BzeSfzsYQfagBIn19G60Ng;
  main_1876__3__BzeSfzsYQfagBIn19G60Ng:
    assume {:captureState "main_1876__3__BzeSfzsYQfagBIn19G60Ng"} true;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_1876_basil_return;
  main_1876_basil_return:
    assume {:captureState "main_1876_basil_return"} true;
    return;
}

