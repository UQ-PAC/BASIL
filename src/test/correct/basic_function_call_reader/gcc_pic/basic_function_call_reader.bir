000005a7: program
00000571: sub __cxa_finalize(__cxa_finalize_result)
000005a8: __cxa_finalize_result :: out u32 = low:32[R0]

0000038b:
00000483: R16 := 0x10000
0000048a: R17 := mem[R16 + 0xFA8, el]:u64
00000490: R16 := R16 + 0xFA8
00000495: call R17 with noreturn

00000572: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005a9: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028a:
0000028e: #3 := R31 - 0x20
00000294: mem := mem with [#3, el]:u64 <- R29
0000029a: mem := mem with [#3 + 8, el]:u64 <- R30
0000029e: R31 := #3
000002a4: R29 := R31
000002ac: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b1: R19 := 0x11000
000002b8: R0 := pad:64[mem[R19 + 0x10]]
000002bf: when 31:0[R0] <> 0 goto %000002bd
0000059b: goto %00000354

00000354:
00000357: R0 := 0x10000
0000035e: R0 := mem[R0 + 0xFD0, el]:u64
00000364: when R0 = 0 goto %00000362
0000059c: goto %0000037b

0000037b:
0000037e: R0 := 0x11000
00000385: R0 := mem[R0 + 8, el]:u64
0000038a: R30 := 0x730
0000038d: call @__cxa_finalize with return %00000362

00000362:
0000036a: R30 := 0x734
0000036c: call @deregister_tm_clones with return %0000036e

0000036e:
00000371: R0 := 1
00000379: mem := mem with [R19 + 0x10] <- 7:0[R0]
0000059d: goto %000002bd

000002bd:
000002c7: R19 := mem[R31 + 0x10, el]:u64
000002ce: R29 := mem[R31, el]:u64
000002d3: R30 := mem[R31 + 8, el]:u64
000002d7: R31 := R31 + 0x20
000002dc: call R30 with noreturn

00000576: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005aa: __libc_start_main_main :: in u64 = R0
000005ab: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005ac: __libc_start_main_arg3 :: in out u64 = R2
000005ad: __libc_start_main_auxv :: in out u64 = R3
000005ae: __libc_start_main_result :: out u32 = low:32[R0]

000001e3:
0000046d: R16 := 0x10000
00000474: R17 := mem[R16 + 0xFA0, el]:u64
0000047a: R16 := R16 + 0xFA0
0000047f: call R17 with noreturn

00000577: sub _fini(_fini_result)
000005af: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000578: sub _init(_init_result)
000005b0: _init_result :: out u32 = low:32[R0]

000004dd:
000004e3: #6 := R31 - 0x10
000004e9: mem := mem with [#6, el]:u64 <- R29
000004ef: mem := mem with [#6 + 8, el]:u64 <- R30
000004f3: R31 := #6
000004f9: R29 := R31
000004fe: R30 := 0x5C0
00000500: call @call_weak_fn with return %00000502

00000502:
00000507: R29 := mem[R31, el]:u64
0000050c: R30 := mem[R31 + 8, el]:u64
00000510: R31 := R31 + 0x10
00000515: call R30 with noreturn

00000579: sub _start(_start_result)
000005b1: _start_result :: out u32 = low:32[R0]

000001a4:
000001a9: R29 := 0
000001ae: R30 := 0
000001b4: R5 := R0
000001bb: R1 := mem[R31, el]:u64
000001c1: R2 := R31 + 8
000001c7: R6 := R31
000001cc: R0 := 0x10000
000001d3: R0 := mem[R0 + 0xFF0, el]:u64
000001d8: R3 := 0
000001dd: R4 := 0
000001e2: R30 := 0x670
000001e5: call @__libc_start_main with return %000001e7

000001e7:
000001ea: R30 := 0x674
000001ed: call @abort with return %0000059e

0000059e:
0000059f: call @call_weak_fn with noreturn

0000057c: sub abort()


000001eb:
000004af: R16 := 0x10000
000004b6: R17 := mem[R16 + 0xFB8, el]:u64
000004bc: R16 := R16 + 0xFB8
000004c1: call R17 with noreturn

0000057d: sub call_weak_fn(call_weak_fn_result)
000005b2: call_weak_fn_result :: out u32 = low:32[R0]

000001ef:
000001f2: R0 := 0x10000
000001f9: R0 := mem[R0 + 0xFE0, el]:u64
000001ff: when R0 = 0 goto %000001fd
000005a0: goto %000003cb

000001fd:
00000205: call R30 with noreturn

000003cb:
000003ce: goto @__gmon_start__

000003cc:
00000499: R16 := 0x10000
000004a0: R17 := mem[R16 + 0xFB0, el]:u64
000004a6: R16 := R16 + 0xFB0
000004ab: call R17 with noreturn

0000057f: sub deregister_tm_clones(deregister_tm_clones_result)
000005b3: deregister_tm_clones_result :: out u32 = low:32[R0]

0000020b:
0000020e: R0 := 0x11000
00000214: R0 := R0 + 0x10
00000219: R1 := 0x11000
0000021f: R1 := R1 + 0x10
00000225: #1 := ~R0
0000022a: #2 := R1 + ~R0
00000230: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000236: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023a: ZF := #2 + 1 = 0
0000023e: NF := 63:63[#2 + 1]
00000244: when ZF goto %00000242
000005a1: goto %000003ad

000003ad:
000003b0: R1 := 0x10000
000003b7: R1 := mem[R1 + 0xFC8, el]:u64
000003bc: when R1 = 0 goto %00000242
000005a2: goto %000003c0

00000242:
0000024a: call R30 with noreturn

000003c0:
000003c4: R16 := R1
000003c9: call R16 with noreturn

00000582: sub frame_dummy(frame_dummy_result)
000005b4: frame_dummy_result :: out u32 = low:32[R0]

000002e2:
000002e4: call @register_tm_clones with noreturn

00000583: sub main(main_argc, main_argv, main_result)
000005b5: main_argc :: in u32 = low:32[R0]
000005b6: main_argv :: in out u64 = R1
000005b7: main_result :: out u32 = low:32[R0]

000002e6:
000002ea: R31 := R31 - 0x10
000002ef: R0 := 0x10000
000002f6: R0 := mem[R0 + 0xFE8, el]:u64
000002fd: R0 := pad:64[mem[R0, el]:u32]
00000305: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000030a: R0 := 0x10000
00000311: R0 := mem[R0 + 0xFD8, el]:u64
00000318: R0 := pad:64[mem[R0, el]:u32]
0000031e: #4 := 31:0[R0] - 1
00000323: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
00000328: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000032c: ZF := #4 + 1 = 0
00000330: NF := 31:31[#4 + 1]
00000336: when ZF <> 1 goto %00000334
000005a3: goto %0000034b

00000334:
0000033e: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000005a4: goto %00000340

0000034b:
0000034e: R0 := 0
00000352: goto %00000340

00000340:
00000344: R31 := R31 + 0x10
00000349: call R30 with noreturn

00000586: sub register_tm_clones(register_tm_clones_result)
000005b8: register_tm_clones_result :: out u32 = low:32[R0]

0000024c:
0000024f: R0 := 0x11000
00000255: R0 := R0 + 0x10
0000025a: R1 := 0x11000
00000260: R1 := R1 + 0x10
00000267: R1 := R1 + ~R0 + 1
0000026d: R2 := 0.63:63[R1]
00000274: R1 := R2 + (R1 ~>> 3)
0000027a: R1 := extend:64[63:1[R1]]
00000280: when R1 = 0 goto %0000027e
000005a5: goto %0000038f

0000038f:
00000392: R2 := 0x10000
00000399: R2 := mem[R2 + 0xFF8, el]:u64
0000039e: when R2 = 0 goto %0000027e
000005a6: goto %000003a2

0000027e:
00000286: call R30 with noreturn

000003a2:
000003a6: R16 := R2
000003ab: call R16 with noreturn
