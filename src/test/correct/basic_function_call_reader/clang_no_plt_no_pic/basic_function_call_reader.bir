00000c7c: program
00000c65: sub __cxa_finalize(__cxa_finalize_result)
00000c7d: __cxa_finalize_result :: out u32 = low:32[R0]

00000a03:
00000afb: R16 := 0x11000
00000b02: R17 := mem[R16 + 8, el]:u64
00000b08: R16 := R16 + 8
00000b0d: call R17 with noreturn

00000c66: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c7e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008dd:
000008e1: #3 := R31 - 0x20
000008e7: mem := mem with [#3, el]:u64 <- R29
000008ed: mem := mem with [#3 + 8, el]:u64 <- R30
000008f1: R31 := #3
000008f7: R29 := R31
000008ff: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000904: R19 := 0x11000
0000090b: R0 := pad:64[mem[R19 + 0x30]]
00000912: when 31:0[R0] <> 0 goto %00000910
00000c67: goto %000009cc

000009cc:
000009cf: R0 := 0x10000
000009d6: R0 := mem[R0 + 0xFC8, el]:u64
000009dc: when R0 = 0 goto %000009da
00000c68: goto %000009f3

000009f3:
000009f6: R0 := 0x11000
000009fd: R0 := mem[R0 + 0x28, el]:u64
00000a02: R30 := 0x6F0
00000a05: call @__cxa_finalize with return %000009da

000009da:
000009e2: R30 := 0x6F4
000009e4: call @deregister_tm_clones with return %000009e6

000009e6:
000009e9: R0 := 1
000009f1: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000c69: goto %00000910

00000910:
0000091a: R19 := mem[R31 + 0x10, el]:u64
00000921: R29 := mem[R31, el]:u64
00000926: R30 := mem[R31 + 8, el]:u64
0000092a: R31 := R31 + 0x20
0000092f: call R30 with noreturn

00000c6a: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c7f: __libc_start_main_main :: in u64 = R0
00000c80: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c81: __libc_start_main_arg3 :: in out u64 = R2
00000c82: __libc_start_main_auxv :: in out u64 = R3
00000c83: __libc_start_main_result :: out u32 = low:32[R0]

00000836:
00000ae5: R16 := 0x11000
00000aec: R17 := mem[R16, el]:u64
00000af2: R16 := R16
00000af7: call R17 with noreturn

00000c6b: sub _fini(_fini_result)
00000c84: _fini_result :: out u32 = low:32[R0]

00000662:
00000668: #0 := R31 - 0x10
0000066e: mem := mem with [#0, el]:u64 <- R29
00000674: mem := mem with [#0 + 8, el]:u64 <- R30
00000678: R31 := #0
0000067e: R29 := R31
00000685: R29 := mem[R31, el]:u64
0000068a: R30 := mem[R31 + 8, el]:u64
0000068e: R31 := R31 + 0x10
00000693: call R30 with noreturn

00000c6c: sub _init(_init_result)
00000c85: _init_result :: out u32 = low:32[R0]

00000bb4:
00000bba: #6 := R31 - 0x10
00000bc0: mem := mem with [#6, el]:u64 <- R29
00000bc6: mem := mem with [#6 + 8, el]:u64 <- R30
00000bca: R31 := #6
00000bd0: R29 := R31
00000bd5: R30 := 0x590
00000bd7: call @call_weak_fn with return %00000bd9

00000bd9:
00000bde: R29 := mem[R31, el]:u64
00000be3: R30 := mem[R31 + 8, el]:u64
00000be7: R31 := R31 + 0x10
00000bec: call R30 with noreturn

00000c6d: sub _start(_start_result)
00000c86: _start_result :: out u32 = low:32[R0]

000007f7:
000007fc: R29 := 0
00000801: R30 := 0
00000807: R5 := R0
0000080e: R1 := mem[R31, el]:u64
00000814: R2 := R31 + 8
0000081a: R6 := R31
0000081f: R0 := 0x10000
00000826: R0 := mem[R0 + 0xFD8, el]:u64
0000082b: R3 := 0
00000830: R4 := 0
00000835: R30 := 0x630
00000838: call @__libc_start_main with return %0000083a

0000083a:
0000083d: R30 := 0x634
00000840: call @abort with return %00000c6e

00000c6e:
00000c6f: call @call_weak_fn with noreturn

00000c70: sub abort()


0000083e:
00000b27: R16 := 0x11000
00000b2e: R17 := mem[R16 + 0x18, el]:u64
00000b34: R16 := R16 + 0x18
00000b39: call R17 with noreturn

00000c71: sub call_weak_fn(call_weak_fn_result)
00000c87: call_weak_fn_result :: out u32 = low:32[R0]

00000842:
00000845: R0 := 0x10000
0000084c: R0 := mem[R0 + 0xFD0, el]:u64
00000852: when R0 = 0 goto %00000850
00000c72: goto %00000a43

00000850:
00000858: call R30 with noreturn

00000a43:
00000a46: goto @__gmon_start__

00000a44:
00000b11: R16 := 0x11000
00000b18: R17 := mem[R16 + 0x10, el]:u64
00000b1e: R16 := R16 + 0x10
00000b23: call R17 with noreturn

00000c73: sub deregister_tm_clones(deregister_tm_clones_result)
00000c88: deregister_tm_clones_result :: out u32 = low:32[R0]

0000085e:
00000861: R0 := 0x11000
00000867: R0 := R0 + 0x30
0000086c: R1 := 0x11000
00000872: R1 := R1 + 0x30
00000878: #1 := ~R0
0000087d: #2 := R1 + ~R0
00000883: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000889: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000088d: ZF := #2 + 1 = 0
00000891: NF := 63:63[#2 + 1]
00000897: when ZF goto %00000895
00000c74: goto %00000a25

00000a25:
00000a28: R1 := 0x10000
00000a2f: R1 := mem[R1 + 0xFC0, el]:u64
00000a34: when R1 = 0 goto %00000895
00000c75: goto %00000a38

00000895:
0000089d: call R30 with noreturn

00000a38:
00000a3c: R16 := R1
00000a41: call R16 with noreturn

00000c76: sub frame_dummy(frame_dummy_result)
00000c89: frame_dummy_result :: out u32 = low:32[R0]

00000935:
00000937: call @register_tm_clones with noreturn

00000c77: sub main(main_argc, main_argv, main_result)
00000c8a: main_argc :: in u32 = low:32[R0]
00000c8b: main_argv :: in out u64 = R1
00000c8c: main_result :: out u32 = low:32[R0]

00000939:
0000093d: R31 := R31 - 0x10
00000944: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000949: R8 := 0x11000
00000950: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000958: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000095d: R8 := 0x11000
00000964: R8 := pad:64[mem[R8 + 0x38, el]:u32]
0000096a: #4 := 31:0[R8] - 1
0000096f: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000974: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000978: ZF := #4 + 1 = 0
0000097c: NF := 31:31[#4 + 1]
00000980: R8 := pad:64[#4 + 1]
0000098c: when ZF goto %00000985
0000098d: goto %00000988

00000988:
00000989: R8 := 1
0000098f: goto %0000098b

00000985:
00000986: R8 := 0
0000098e: goto %0000098b

0000098b:
00000995: when 0:0[R8] goto %00000993
00000c78: goto %000009bd

00000993:
0000099d: R8 := pad:64[mem[R31 + 8, el]:u32]
000009a5: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
000009aa: goto %000009a8

000009bd:
000009c0: goto %000009be

000009be:
000009c6: mem := mem with [R31 + 0xC, el]:u32 <- 0
000009ca: goto %000009a8

000009a8:
000009b0: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000009b6: R31 := R31 + 0x10
000009bb: call R30 with noreturn

00000c79: sub register_tm_clones(register_tm_clones_result)
00000c8d: register_tm_clones_result :: out u32 = low:32[R0]

0000089f:
000008a2: R0 := 0x11000
000008a8: R0 := R0 + 0x30
000008ad: R1 := 0x11000
000008b3: R1 := R1 + 0x30
000008ba: R1 := R1 + ~R0 + 1
000008c0: R2 := 0.63:63[R1]
000008c7: R1 := R2 + (R1 ~>> 3)
000008cd: R1 := extend:64[63:1[R1]]
000008d3: when R1 = 0 goto %000008d1
00000c7a: goto %00000a07

00000a07:
00000a0a: R2 := 0x10000
00000a11: R2 := mem[R2 + 0xFE0, el]:u64
00000a16: when R2 = 0 goto %000008d1
00000c7b: goto %00000a1a

000008d1:
000008d9: call R30 with noreturn

00000a1a:
00000a1e: R16 := R2
00000a23: call R16 with noreturn
