var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69688bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69684bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $y_addr) then (memory_load32_le(memory, $x_addr) == 1bv32) else (if (index == $x_addr) then true else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures ((old(memory_load32_le(mem, $x_addr)) == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
  ensures (old(gamma_load32(Gamma_mem, $y_addr)) ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));
  free ensures (memory_load8_le(mem, 1908bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1909bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1910bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1911bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures ((old(memory_load32_le(mem, $x_addr)) == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
  ensures (old(gamma_load32(Gamma_mem, $y_addr)) ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert ((memory_load32_le(mem, $x_addr) == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
  assert (gamma_load32(Gamma_mem, $y_addr) ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

implementation {:extern} guarantee_reflexive()
{
  assert (memory_load32_le(mem, $x_addr) == memory_load32_le(mem, $x_addr));
  assert (memory_load32_le(mem, $y_addr) == memory_load32_le(mem, $y_addr));
}

procedure main();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R31, Gamma_R8, Gamma_VF, Gamma_ZF, Gamma_mem, Gamma_stack, NF, R0, R31, R8, VF, ZF, mem, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load8_le(mem, 1908bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1909bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1910bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1911bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 1908bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1909bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1910bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1911bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main()
{
  var Cse0__5$0$7: bv32;
  var Gamma_Cse0__5$0$7: bool;
  $main$__0__$p64I2ZUnTxGzbzeacDZqwg:
    assume {:captureState "$main$__0__$p64I2ZUnTxGzbzeacDZqwg"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), true);
    assume {:captureState "1816$0"} true;
    R8, Gamma_R8 := 69632bv64, true;
    call rely();
    R8, Gamma_R8 := zero_extend32_32(memory_load32_le(mem, bvadd64(R8, 52bv64))), (gamma_load32(Gamma_mem, bvadd64(R8, 52bv64)) || L(mem, bvadd64(R8, 52bv64)));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 8bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R8);
    assume {:captureState "1828$0"} true;
    R8, Gamma_R8 := 69632bv64, true;
    call rely();
    R8, Gamma_R8 := zero_extend32_32(memory_load32_le(mem, bvadd64(R8, 56bv64))), (gamma_load32(Gamma_mem, bvadd64(R8, 56bv64)) || L(mem, bvadd64(R8, 56bv64)));
    Cse0__5$0$7, Gamma_Cse0__5$0$7 := bvadd32(R8[32:0], 0bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp32(Cse0__5$0$7, Cse0__5$0$7)), Gamma_Cse0__5$0$7;
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$0$7), bvadd33(zero_extend1_32(R8[32:0]), 4294967296bv33))), (Gamma_R8 && Gamma_Cse0__5$0$7);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$0$7, 0bv32), Gamma_Cse0__5$0$7;
    NF, Gamma_NF := Cse0__5$0$7[32:31], Gamma_Cse0__5$0$7;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5$0$7), Gamma_Cse0__5$0$7;
    assert Gamma_ZF;
    goto $main$__0__$p64I2ZUnTxGzbzeacDZqwg$__0, $main$__0__$p64I2ZUnTxGzbzeacDZqwg$__1;
  $main$__1__$bKbuo5TmTwOMb5a3DV3xHQ:
    assume {:captureState "$main$__1__$bKbuo5TmTwOMb5a3DV3xHQ"} true;
    goto $main$__2__$aBEoJbwOSm2rHPYmBa6e_A;
  $main$__2__$aBEoJbwOSm2rHPYmBa6e_A:
    assume {:captureState "$main$__2__$aBEoJbwOSm2rHPYmBa6e_A"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), true);
    assume {:captureState "1856$0"} true;
    goto $main$__4__$rZXVe~PNSWyDYBX4vnXb~w;
  $main$__3__$NTeZmOi8Sy2TG2_DQEytfQ:
    assume {:captureState "$main$__3__$NTeZmOi8Sy2TG2_DQEytfQ"} true;
    R8, Gamma_R8 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 8bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 8bv64));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R8);
    assume {:captureState "1868$0"} true;
    goto $main$__4__$rZXVe~PNSWyDYBX4vnXb~w;
  $main$__4__$rZXVe~PNSWyDYBX4vnXb~w:
    assume {:captureState "$main$__4__$rZXVe~PNSWyDYBX4vnXb~w"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 12bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_basil_return;
  $main$__0__$p64I2ZUnTxGzbzeacDZqwg_goto_$main$__3__$NTeZmOi8Sy2TG2_DQEytfQ:
    assume {:captureState "$main$__0__$p64I2ZUnTxGzbzeacDZqwg_goto_$main$__3__$NTeZmOi8Sy2TG2_DQEytfQ"} true;
    assume (R8[1:0] == 1bv1);
    goto $main$__3__$NTeZmOi8Sy2TG2_DQEytfQ;
  $main$__0__$p64I2ZUnTxGzbzeacDZqwg_goto_$main$__1__$bKbuo5TmTwOMb5a3DV3xHQ:
    assume {:captureState "$main$__0__$p64I2ZUnTxGzbzeacDZqwg_goto_$main$__1__$bKbuo5TmTwOMb5a3DV3xHQ"} true;
    assume (!(R8[1:0] == 1bv1));
    goto $main$__1__$bKbuo5TmTwOMb5a3DV3xHQ;
  $main$__0__$p64I2ZUnTxGzbzeacDZqwg$__0:
    assume {:captureState "$main$__0__$p64I2ZUnTxGzbzeacDZqwg$__0"} true;
    assume (ZF == 1bv1);
    R8, Gamma_R8 := 0bv64, true;
    assert Gamma_R8;
    goto $main$__0__$p64I2ZUnTxGzbzeacDZqwg_goto_$main$__3__$NTeZmOi8Sy2TG2_DQEytfQ, $main$__0__$p64I2ZUnTxGzbzeacDZqwg_goto_$main$__1__$bKbuo5TmTwOMb5a3DV3xHQ;
  $main$__0__$p64I2ZUnTxGzbzeacDZqwg$__1:
    assume {:captureState "$main$__0__$p64I2ZUnTxGzbzeacDZqwg$__1"} true;
    assume (!(ZF == 1bv1));
    R8, Gamma_R8 := 1bv64, true;
    assert Gamma_R8;
    goto $main$__0__$p64I2ZUnTxGzbzeacDZqwg_goto_$main$__3__$NTeZmOi8Sy2TG2_DQEytfQ, $main$__0__$p64I2ZUnTxGzbzeacDZqwg_goto_$main$__1__$bKbuo5TmTwOMb5a3DV3xHQ;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

