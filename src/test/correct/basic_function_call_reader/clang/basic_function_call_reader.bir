00000656: program
00000622: sub __cxa_finalize(__cxa_finalize_result)
00000657: __cxa_finalize_result :: out u32 = low:32[R0]

000003c0:
000004b8: R16 := 0x11000
000004bf: R17 := mem[R16 + 8, el]:u64
000004c5: R16 := R16 + 8
000004ca: call R17 with noreturn

00000623: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000658: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029a:
0000029e: #3 := R31 - 0x20
000002a4: mem := mem with [#3, el]:u64 <- R29
000002aa: mem := mem with [#3 + 8, el]:u64 <- R30
000002ae: R31 := #3
000002b4: R29 := R31
000002bc: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c1: R19 := 0x11000
000002c8: R0 := pad:64[mem[R19 + 0x30]]
000002cf: when 31:0[R0] <> 0 goto %000002cd
0000064b: goto %00000389

00000389:
0000038c: R0 := 0x10000
00000393: R0 := mem[R0 + 0xFC8, el]:u64
00000399: when R0 = 0 goto %00000397
0000064c: goto %000003b0

000003b0:
000003b3: R0 := 0x11000
000003ba: R0 := mem[R0 + 0x28, el]:u64
000003bf: R30 := 0x6F0
000003c2: call @__cxa_finalize with return %00000397

00000397:
0000039f: R30 := 0x6F4
000003a1: call @deregister_tm_clones with return %000003a3

000003a3:
000003a6: R0 := 1
000003ae: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000064d: goto %000002cd

000002cd:
000002d7: R19 := mem[R31 + 0x10, el]:u64
000002de: R29 := mem[R31, el]:u64
000002e3: R30 := mem[R31 + 8, el]:u64
000002e7: R31 := R31 + 0x20
000002ec: call R30 with noreturn

00000627: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000659: __libc_start_main_main :: in u64 = R0
0000065a: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000065b: __libc_start_main_arg3 :: in out u64 = R2
0000065c: __libc_start_main_auxv :: in out u64 = R3
0000065d: __libc_start_main_result :: out u32 = low:32[R0]

000001f3:
000004a2: R16 := 0x11000
000004a9: R17 := mem[R16, el]:u64
000004af: R16 := R16
000004b4: call R17 with noreturn

00000628: sub _fini(_fini_result)
0000065e: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000629: sub _init(_init_result)
0000065f: _init_result :: out u32 = low:32[R0]

00000571:
00000577: #6 := R31 - 0x10
0000057d: mem := mem with [#6, el]:u64 <- R29
00000583: mem := mem with [#6 + 8, el]:u64 <- R30
00000587: R31 := #6
0000058d: R29 := R31
00000592: R30 := 0x590
00000594: call @call_weak_fn with return %00000596

00000596:
0000059b: R29 := mem[R31, el]:u64
000005a0: R30 := mem[R31 + 8, el]:u64
000005a4: R31 := R31 + 0x10
000005a9: call R30 with noreturn

0000062a: sub _start(_start_result)
00000660: _start_result :: out u32 = low:32[R0]

000001b4:
000001b9: R29 := 0
000001be: R30 := 0
000001c4: R5 := R0
000001cb: R1 := mem[R31, el]:u64
000001d1: R2 := R31 + 8
000001d7: R6 := R31
000001dc: R0 := 0x10000
000001e3: R0 := mem[R0 + 0xFD8, el]:u64
000001e8: R3 := 0
000001ed: R4 := 0
000001f2: R30 := 0x630
000001f5: call @__libc_start_main with return %000001f7

000001f7:
000001fa: R30 := 0x634
000001fd: call @abort with return %0000064e

0000064e:
0000064f: call @call_weak_fn with noreturn

0000062d: sub abort()


000001fb:
000004e4: R16 := 0x11000
000004eb: R17 := mem[R16 + 0x18, el]:u64
000004f1: R16 := R16 + 0x18
000004f6: call R17 with noreturn

0000062e: sub call_weak_fn(call_weak_fn_result)
00000661: call_weak_fn_result :: out u32 = low:32[R0]

000001ff:
00000202: R0 := 0x10000
00000209: R0 := mem[R0 + 0xFD0, el]:u64
0000020f: when R0 = 0 goto %0000020d
00000650: goto %00000400

0000020d:
00000215: call R30 with noreturn

00000400:
00000403: goto @__gmon_start__

00000401:
000004ce: R16 := 0x11000
000004d5: R17 := mem[R16 + 0x10, el]:u64
000004db: R16 := R16 + 0x10
000004e0: call R17 with noreturn

00000630: sub deregister_tm_clones(deregister_tm_clones_result)
00000662: deregister_tm_clones_result :: out u32 = low:32[R0]

0000021b:
0000021e: R0 := 0x11000
00000224: R0 := R0 + 0x30
00000229: R1 := 0x11000
0000022f: R1 := R1 + 0x30
00000235: #1 := ~R0
0000023a: #2 := R1 + ~R0
00000240: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000246: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024a: ZF := #2 + 1 = 0
0000024e: NF := 63:63[#2 + 1]
00000254: when ZF goto %00000252
00000651: goto %000003e2

000003e2:
000003e5: R1 := 0x10000
000003ec: R1 := mem[R1 + 0xFC0, el]:u64
000003f1: when R1 = 0 goto %00000252
00000652: goto %000003f5

00000252:
0000025a: call R30 with noreturn

000003f5:
000003f9: R16 := R1
000003fe: call R16 with noreturn

00000633: sub frame_dummy(frame_dummy_result)
00000663: frame_dummy_result :: out u32 = low:32[R0]

000002f2:
000002f4: call @register_tm_clones with noreturn

00000634: sub main(main_argc, main_argv, main_result)
00000664: main_argc :: in u32 = low:32[R0]
00000665: main_argv :: in out u64 = R1
00000666: main_result :: out u32 = low:32[R0]

000002f6:
000002fa: R31 := R31 - 0x10
00000301: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000306: R8 := 0x11000
0000030d: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000315: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000031a: R8 := 0x11000
00000321: R8 := pad:64[mem[R8 + 0x38, el]:u32]
00000327: #4 := 31:0[R8] - 1
0000032c: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000331: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000335: ZF := #4 + 1 = 0
00000339: NF := 31:31[#4 + 1]
0000033d: R8 := pad:64[#4 + 1]
00000349: when ZF goto %00000342
0000034a: goto %00000345

00000345:
00000346: R8 := 1
0000034c: goto %00000348

00000342:
00000343: R8 := 0
0000034b: goto %00000348

00000348:
00000352: when 0:0[R8] goto %00000350
00000653: goto %0000037a

00000350:
0000035a: R8 := pad:64[mem[R31 + 8, el]:u32]
00000362: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000367: goto %00000365

0000037a:
0000037d: goto %0000037b

0000037b:
00000383: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000387: goto %00000365

00000365:
0000036d: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000373: R31 := R31 + 0x10
00000378: call R30 with noreturn

00000636: sub register_tm_clones(register_tm_clones_result)
00000667: register_tm_clones_result :: out u32 = low:32[R0]

0000025c:
0000025f: R0 := 0x11000
00000265: R0 := R0 + 0x30
0000026a: R1 := 0x11000
00000270: R1 := R1 + 0x30
00000277: R1 := R1 + ~R0 + 1
0000027d: R2 := 0.63:63[R1]
00000284: R1 := R2 + (R1 ~>> 3)
0000028a: R1 := extend:64[63:1[R1]]
00000290: when R1 = 0 goto %0000028e
00000654: goto %000003c4

000003c4:
000003c7: R2 := 0x10000
000003ce: R2 := mem[R2 + 0xFE0, el]:u64
000003d3: when R2 = 0 goto %0000028e
00000655: goto %000003d7

0000028e:
00000296: call R30 with noreturn

000003d7:
000003db: R16 := R2
000003e0: call R16 with noreturn
