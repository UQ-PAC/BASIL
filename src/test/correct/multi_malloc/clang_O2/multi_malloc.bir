00000611: program
000005fa: sub __cxa_finalize(__cxa_finalize_result)
00000612: __cxa_finalize_result :: out u32 = low:32[R0]

0000037a:
00000482: R16 := 0x11000
00000489: R17 := mem[R16 + 8, el]:u64
0000048f: R16 := R16 + 8
00000494: call R17 with noreturn

000005fb: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000613: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000282:
00000286: #3 := R31 - 0x20
0000028c: mem := mem with [#3, el]:u64 <- R29
00000292: mem := mem with [#3 + 8, el]:u64 <- R30
00000296: R31 := #3
0000029c: R29 := R31
000002a4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002a9: R19 := 0x11000
000002b0: R0 := pad:64[mem[R19 + 0x38]]
000002b7: when 31:0[R0] <> 0 goto %000002b5
000005fc: goto %00000343

00000343:
00000346: R0 := 0x10000
0000034d: R0 := mem[R0 + 0xFC8, el]:u64
00000353: when R0 = 0 goto %00000351
000005fd: goto %0000036a

0000036a:
0000036d: R0 := 0x11000
00000374: R0 := mem[R0 + 0x30, el]:u64
00000379: R30 := 0x730
0000037c: call @__cxa_finalize with return %00000351

00000351:
00000359: R30 := 0x734
0000035b: call @deregister_tm_clones with return %0000035d

0000035d:
00000360: R0 := 1
00000368: mem := mem with [R19 + 0x38] <- 7:0[R0]
000005fe: goto %000002b5

000002b5:
000002bf: R19 := mem[R31 + 0x10, el]:u64
000002c6: R29 := mem[R31, el]:u64
000002cb: R30 := mem[R31 + 8, el]:u64
000002cf: R31 := R31 + 0x20
000002d4: call R30 with noreturn

000005ff: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000614: __libc_start_main_main :: in u64 = R0
00000615: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000616: __libc_start_main_arg3 :: in out u64 = R2
00000617: __libc_start_main_auxv :: in out u64 = R3
00000618: __libc_start_main_result :: out u32 = low:32[R0]

000001db:
0000046c: R16 := 0x11000
00000473: R17 := mem[R16, el]:u64
00000479: R16 := R16
0000047e: call R17 with noreturn

00000600: sub _fini(_fini_result)
00000619: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000601: sub _init(_init_result)
0000061a: _init_result :: out u32 = low:32[R0]

0000054b:
00000551: #6 := R31 - 0x10
00000557: mem := mem with [#6, el]:u64 <- R29
0000055d: mem := mem with [#6 + 8, el]:u64 <- R30
00000561: R31 := #6
00000567: R29 := R31
0000056c: R30 := 0x5C8
0000056e: call @call_weak_fn with return %00000570

00000570:
00000575: R29 := mem[R31, el]:u64
0000057a: R30 := mem[R31 + 8, el]:u64
0000057e: R31 := R31 + 0x10
00000583: call R30 with noreturn

00000602: sub _start(_start_result)
0000061b: _start_result :: out u32 = low:32[R0]

0000019c:
000001a1: R29 := 0
000001a6: R30 := 0
000001ac: R5 := R0
000001b3: R1 := mem[R31, el]:u64
000001b9: R2 := R31 + 8
000001bf: R6 := R31
000001c4: R0 := 0x10000
000001cb: R0 := mem[R0 + 0xFD8, el]:u64
000001d0: R3 := 0
000001d5: R4 := 0
000001da: R30 := 0x670
000001dd: call @__libc_start_main with return %000001df

000001df:
000001e2: R30 := 0x674
000001e5: call @abort with return %00000603

00000603:
00000604: call @call_weak_fn with noreturn

00000605: sub abort()


000001e3:
000004ae: R16 := 0x11000
000004b5: R17 := mem[R16 + 0x18, el]:u64
000004bb: R16 := R16 + 0x18
000004c0: call R17 with noreturn

00000606: sub call_weak_fn(call_weak_fn_result)
0000061c: call_weak_fn_result :: out u32 = low:32[R0]

000001e7:
000001ea: R0 := 0x10000
000001f1: R0 := mem[R0 + 0xFD0, el]:u64
000001f7: when R0 = 0 goto %000001f5
00000607: goto %000003ba

000001f5:
000001fd: call R30 with noreturn

000003ba:
000003bd: goto @__gmon_start__

000003bb:
00000498: R16 := 0x11000
0000049f: R17 := mem[R16 + 0x10, el]:u64
000004a5: R16 := R16 + 0x10
000004aa: call R17 with noreturn

00000608: sub deregister_tm_clones(deregister_tm_clones_result)
0000061d: deregister_tm_clones_result :: out u32 = low:32[R0]

00000203:
00000206: R0 := 0x11000
0000020c: R0 := R0 + 0x38
00000211: R1 := 0x11000
00000217: R1 := R1 + 0x38
0000021d: #1 := ~R0
00000222: #2 := R1 + ~R0
00000228: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000022e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000232: ZF := #2 + 1 = 0
00000236: NF := 63:63[#2 + 1]
0000023c: when ZF goto %0000023a
00000609: goto %0000039c

0000039c:
0000039f: R1 := 0x10000
000003a6: R1 := mem[R1 + 0xFC0, el]:u64
000003ab: when R1 = 0 goto %0000023a
0000060a: goto %000003af

0000023a:
00000242: call R30 with noreturn

000003af:
000003b3: R16 := R1
000003b8: call R16 with noreturn

0000060b: sub frame_dummy(frame_dummy_result)
0000061e: frame_dummy_result :: out u32 = low:32[R0]

000002da:
000002dc: call @register_tm_clones with noreturn

0000060c: sub main(main_argc, main_argv, main_result)
0000061f: main_argc :: in u32 = low:32[R0]
00000620: main_argv :: in out u64 = R1
00000621: main_result :: out u32 = low:32[R0]

000002de:
000002e2: #4 := R31 - 0x10
000002e8: mem := mem with [#4, el]:u64 <- R29
000002ee: mem := mem with [#4 + 8, el]:u64 <- R30
000002f2: R31 := #4
000002f8: R29 := R31
000002fd: R0 := 0
00000303: R0 := R0 + 0x7A0
00000308: R1 := 0x41
0000030d: R30 := 0x76C
00000310: call @printf with return %00000312

00000312:
00000315: R0 := 0
0000031b: R0 := R0 + 0x7B1
00000320: R1 := 0x2A
00000325: R30 := 0x77C
00000327: call @printf with return %00000329

00000329:
0000032c: R0 := 0
00000333: R29 := mem[R31, el]:u64
00000338: R30 := mem[R31 + 8, el]:u64
0000033c: R31 := R31 + 0x10
00000341: call R30 with noreturn

0000060d: sub printf(printf_format, printf_result)
00000622: printf_format :: in u64 = R0
00000623: printf_result :: out u32 = low:32[R0]

0000030e:
000004c4: R16 := 0x11000
000004cb: R17 := mem[R16 + 0x20, el]:u64
000004d1: R16 := R16 + 0x20
000004d6: call R17 with noreturn

0000060e: sub register_tm_clones(register_tm_clones_result)
00000624: register_tm_clones_result :: out u32 = low:32[R0]

00000244:
00000247: R0 := 0x11000
0000024d: R0 := R0 + 0x38
00000252: R1 := 0x11000
00000258: R1 := R1 + 0x38
0000025f: R1 := R1 + ~R0 + 1
00000265: R2 := 0.63:63[R1]
0000026c: R1 := R2 + (R1 ~>> 3)
00000272: R1 := extend:64[63:1[R1]]
00000278: when R1 = 0 goto %00000276
0000060f: goto %0000037e

0000037e:
00000381: R2 := 0x10000
00000388: R2 := mem[R2 + 0xFE0, el]:u64
0000038d: when R2 = 0 goto %00000276
00000610: goto %00000391

00000276:
0000027e: call R30 with noreturn

00000391:
00000395: R16 := R2
0000039a: call R16 with noreturn
