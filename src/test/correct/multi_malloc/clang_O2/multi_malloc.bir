0000062f: program
000005fa: sub __cxa_finalize(__cxa_finalize_result)
00000630: __cxa_finalize_result :: out u32 = low:32[R0]

0000037a:
00000482: R16 := 0x20000
00000489: R17 := mem[R16 + 8, el]:u64
0000048f: R16 := R16 + 8
00000494: call R17 with noreturn

000005fb: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000631: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000283:
00000287: #3 := R31 - 0x20
0000028d: mem := mem with [#3, el]:u64 <- R29
00000293: mem := mem with [#3 + 8, el]:u64 <- R30
00000297: R31 := #3
0000029d: R29 := R31
000002a5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002aa: R19 := 0x20000
000002b1: R0 := pad:64[mem[R19 + 0x38]]
000002b7: when 0:0[R0] goto %000002b5
00000625: goto %00000343

00000343:
00000346: R0 := 0x1F000
0000034d: R0 := mem[R0 + 0xFC8, el]:u64
00000353: when R0 = 0 goto %00000351
00000626: goto %0000036a

0000036a:
0000036d: R0 := 0x20000
00000374: R0 := mem[R0 + 0x30, el]:u64
00000379: R30 := 0x770
0000037c: call @__cxa_finalize with return %00000351

00000351:
00000359: R30 := 0x774
0000035b: call @deregister_tm_clones with return %0000035d

0000035d:
00000360: R0 := 1
00000368: mem := mem with [R19 + 0x38] <- 7:0[R0]
00000627: goto %000002b5

000002b5:
000002bf: R19 := mem[R31 + 0x10, el]:u64
000002c6: R29 := mem[R31, el]:u64
000002cb: R30 := mem[R31 + 8, el]:u64
000002cf: R31 := R31 + 0x20
000002d4: call R30 with noreturn

000005ff: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000632: __libc_start_main_main :: in u64 = R0
00000633: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000634: __libc_start_main_arg3 :: in out u64 = R2
00000635: __libc_start_main_auxv :: in out u64 = R3
00000636: __libc_start_main_result :: out u32 = low:32[R0]

000001dc:
0000046c: R16 := 0x20000
00000473: R17 := mem[R16, el]:u64
00000479: R16 := R16
0000047e: call R17 with noreturn

00000600: sub _fini(_fini_result)
00000637: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000601: sub _init(_init_result)
00000638: _init_result :: out u32 = low:32[R0]

0000054b:
00000551: #6 := R31 - 0x10
00000557: mem := mem with [#6, el]:u64 <- R29
0000055d: mem := mem with [#6 + 8, el]:u64 <- R30
00000561: R31 := #6
00000567: R29 := R31
0000056c: R30 := 0x608
0000056e: call @call_weak_fn with return %00000570

00000570:
00000575: R29 := mem[R31, el]:u64
0000057a: R30 := mem[R31 + 8, el]:u64
0000057e: R31 := R31 + 0x10
00000583: call R30 with noreturn

00000602: sub _start(_start_result)
00000639: _start_result :: out u32 = low:32[R0]

0000019d:
000001a2: R29 := 0
000001a7: R30 := 0
000001ad: R5 := R0
000001b4: R1 := mem[R31, el]:u64
000001ba: R2 := R31 + 8
000001c0: R6 := R31
000001c5: R0 := 0x1F000
000001cc: R0 := mem[R0 + 0xFD8, el]:u64
000001d1: R3 := 0
000001d6: R4 := 0
000001db: R30 := 0x6B0
000001de: call @__libc_start_main with return %000001e0

000001e0:
000001e3: R30 := 0x6B4
000001e6: call @abort with return %00000628

00000628:
00000629: call @call_weak_fn with noreturn

00000605: sub abort()


000001e4:
000004ae: R16 := 0x20000
000004b5: R17 := mem[R16 + 0x18, el]:u64
000004bb: R16 := R16 + 0x18
000004c0: call R17 with noreturn

00000606: sub call_weak_fn(call_weak_fn_result)
0000063a: call_weak_fn_result :: out u32 = low:32[R0]

000001e8:
000001eb: R0 := 0x1F000
000001f2: R0 := mem[R0 + 0xFD0, el]:u64
000001f8: when R0 = 0 goto %000001f6
0000062a: goto %000003ba

000001f6:
000001fe: call R30 with noreturn

000003ba:
000003bd: goto @__gmon_start__

000003bb:
00000498: R16 := 0x20000
0000049f: R17 := mem[R16 + 0x10, el]:u64
000004a5: R16 := R16 + 0x10
000004aa: call R17 with noreturn

00000608: sub deregister_tm_clones(deregister_tm_clones_result)
0000063b: deregister_tm_clones_result :: out u32 = low:32[R0]

00000204:
00000207: R0 := 0x20000
0000020d: R0 := R0 + 0x38
00000212: R1 := 0x20000
00000218: R1 := R1 + 0x38
0000021e: #1 := ~R0
00000223: #2 := R1 + ~R0
00000229: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000022f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000233: ZF := #2 + 1 = 0
00000237: NF := 63:63[#2 + 1]
0000023d: when ZF goto %0000023b
0000062b: goto %0000039c

0000039c:
0000039f: R1 := 0x1F000
000003a6: R1 := mem[R1 + 0xFC0, el]:u64
000003ab: when R1 = 0 goto %0000023b
0000062c: goto %000003af

0000023b:
00000243: call R30 with noreturn

000003af:
000003b3: R16 := R1
000003b8: call R16 with noreturn

0000060b: sub frame_dummy(frame_dummy_result)
0000063c: frame_dummy_result :: out u32 = low:32[R0]

000002da:
000002dc: call @register_tm_clones with noreturn

0000060c: sub main(main_argc, main_argv, main_result)
0000063d: main_argc :: in u32 = low:32[R0]
0000063e: main_argv :: in out u64 = R1
0000063f: main_result :: out u32 = low:32[R0]

000002de:
000002e2: #4 := R31 - 0x10
000002e8: mem := mem with [#4, el]:u64 <- R29
000002ee: mem := mem with [#4 + 8, el]:u64 <- R30
000002f2: R31 := #4
000002f8: R29 := R31
000002fd: R0 := 0
00000303: R0 := R0 + 0x7E0
00000308: R1 := 0x41
0000030d: R30 := 0x7AC
00000310: call @printf with return %00000312

00000312:
00000315: R0 := 0
0000031b: R0 := R0 + 0x7F1
00000320: R1 := 0x2A
00000325: R30 := 0x7BC
00000327: call @printf with return %00000329

00000329:
0000032c: R0 := 0
00000333: R29 := mem[R31, el]:u64
00000338: R30 := mem[R31 + 8, el]:u64
0000033c: R31 := R31 + 0x10
00000341: call R30 with noreturn

0000060d: sub printf(printf_format, printf_result)
00000640: printf_format :: in u64 = R0
00000641: printf_result :: out u32 = low:32[R0]

0000030e:
000004c4: R16 := 0x20000
000004cb: R17 := mem[R16 + 0x20, el]:u64
000004d1: R16 := R16 + 0x20
000004d6: call R17 with noreturn

0000060e: sub register_tm_clones(register_tm_clones_result)
00000642: register_tm_clones_result :: out u32 = low:32[R0]

00000245:
00000248: R0 := 0x20000
0000024e: R0 := R0 + 0x38
00000253: R1 := 0x20000
00000259: R1 := R1 + 0x38
00000260: R1 := R1 + ~R0 + 1
00000266: R2 := 0.63:63[R1]
0000026d: R1 := R2 + (R1 ~>> 3)
00000273: R1 := extend:64[63:1[R1]]
00000279: when R1 = 0 goto %00000277
0000062d: goto %0000037e

0000037e:
00000381: R2 := 0x1F000
00000388: R2 := mem[R2 + 0xFE0, el]:u64
0000038d: when R2 = 0 goto %00000277
0000062e: goto %00000391

00000277:
0000027f: call R30 with noreturn

00000391:
00000395: R16 := R2
0000039a: call R16 with noreturn
