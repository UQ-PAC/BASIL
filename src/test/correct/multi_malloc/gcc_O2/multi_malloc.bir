000005b6: program
0000059f: sub __cxa_finalize(__cxa_finalize_result)
000005b7: __cxa_finalize_result :: out u32 = low:32[R0]

00000392:
0000049a: R16 := 0x10000
000004a1: R17 := mem[R16 + 0xFB0, el]:u64
000004a7: R16 := R16 + 0xFB0
000004ac: call R17 with noreturn

000005a0: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005b8: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002ff:
00000303: #4 := R31 - 0x20
00000309: mem := mem with [#4, el]:u64 <- R29
0000030f: mem := mem with [#4 + 8, el]:u64 <- R30
00000313: R31 := #4
00000319: R29 := R31
00000321: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000326: R19 := 0x11000
0000032d: R0 := pad:64[mem[R19 + 0x10]]
00000334: when 31:0[R0] <> 0 goto %00000332
000005a1: goto %0000035b

0000035b:
0000035e: R0 := 0x10000
00000365: R0 := mem[R0 + 0xFE0, el]:u64
0000036b: when R0 = 0 goto %00000369
000005a2: goto %00000382

00000382:
00000385: R0 := 0x11000
0000038c: R0 := mem[R0 + 8, el]:u64
00000391: R30 := 0x7B0
00000394: call @__cxa_finalize with return %00000369

00000369:
00000371: R30 := 0x7B4
00000373: call @deregister_tm_clones with return %00000375

00000375:
00000378: R0 := 1
00000380: mem := mem with [R19 + 0x10] <- 7:0[R0]
000005a3: goto %00000332

00000332:
0000033c: R19 := mem[R31 + 0x10, el]:u64
00000343: R29 := mem[R31, el]:u64
00000348: R30 := mem[R31 + 8, el]:u64
0000034c: R31 := R31 + 0x20
00000351: call R30 with noreturn

000005a4: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005b9: __libc_start_main_main :: in u64 = R0
000005ba: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005bb: __libc_start_main_arg3 :: in out u64 = R2
000005bc: __libc_start_main_auxv :: in out u64 = R3
000005bd: __libc_start_main_result :: out u32 = low:32[R0]

00000258:
00000484: R16 := 0x10000
0000048b: R17 := mem[R16 + 0xFA8, el]:u64
00000491: R16 := R16 + 0xFA8
00000496: call R17 with noreturn

000005a5: sub __printf_chk(__printf_chk_result)
000005be: __printf_chk_result :: out u32 = low:32[R0]

000001dd:
000004b0: R16 := 0x10000
000004b7: R17 := mem[R16 + 0xFB8, el]:u64
000004bd: R16 := R16 + 0xFB8
000004c2: call R17 with noreturn

000005a6: sub _fini(_fini_result)
000005bf: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005a7: sub _init(_init_result)
000005c0: _init_result :: out u32 = low:32[R0]

0000050a:
00000510: #6 := R31 - 0x10
00000516: mem := mem with [#6, el]:u64 <- R29
0000051c: mem := mem with [#6 + 8, el]:u64 <- R30
00000520: R31 := #6
00000526: R29 := R31
0000052b: R30 := 0x5D0
0000052d: call @call_weak_fn with return %0000052f

0000052f:
00000534: R29 := mem[R31, el]:u64
00000539: R30 := mem[R31 + 8, el]:u64
0000053d: R31 := R31 + 0x10
00000542: call R30 with noreturn

000005a8: sub _start(_start_result)
000005c1: _start_result :: out u32 = low:32[R0]

00000219:
0000021e: R29 := 0
00000223: R30 := 0
00000229: R5 := R0
00000230: R1 := mem[R31, el]:u64
00000236: R2 := R31 + 8
0000023c: R6 := R31
00000241: R0 := 0x10000
00000248: R0 := mem[R0 + 0xFF0, el]:u64
0000024d: R3 := 0
00000252: R4 := 0
00000257: R30 := 0x6F0
0000025a: call @__libc_start_main with return %0000025c

0000025c:
0000025f: R30 := 0x6F4
00000262: call @abort with return %000005a9

000005a9:
000005aa: call @call_weak_fn with noreturn

000005ab: sub abort()


00000260:
000004dc: R16 := 0x10000
000004e3: R17 := mem[R16 + 0xFC8, el]:u64
000004e9: R16 := R16 + 0xFC8
000004ee: call R17 with noreturn

000005ac: sub call_weak_fn(call_weak_fn_result)
000005c2: call_weak_fn_result :: out u32 = low:32[R0]

00000264:
00000267: R0 := 0x10000
0000026e: R0 := mem[R0 + 0xFE8, el]:u64
00000274: when R0 = 0 goto %00000272
000005ad: goto %000003d2

00000272:
0000027a: call R30 with noreturn

000003d2:
000003d5: goto @__gmon_start__

000003d3:
000004c6: R16 := 0x10000
000004cd: R17 := mem[R16 + 0xFC0, el]:u64
000004d3: R16 := R16 + 0xFC0
000004d8: call R17 with noreturn

000005ae: sub deregister_tm_clones(deregister_tm_clones_result)
000005c3: deregister_tm_clones_result :: out u32 = low:32[R0]

00000280:
00000283: R0 := 0x11000
00000289: R0 := R0 + 0x10
0000028e: R1 := 0x11000
00000294: R1 := R1 + 0x10
0000029a: #2 := ~R0
0000029f: #3 := R1 + ~R0
000002a5: VF := extend:65[#3 + 1] <> extend:65[R1] + extend:65[#2] + 1
000002ab: CF := pad:65[#3 + 1] <> pad:65[R1] + pad:65[#2] + 1
000002af: ZF := #3 + 1 = 0
000002b3: NF := 63:63[#3 + 1]
000002b9: when ZF goto %000002b7
000005af: goto %000003b4

000003b4:
000003b7: R1 := 0x10000
000003be: R1 := mem[R1 + 0xFD8, el]:u64
000003c3: when R1 = 0 goto %000002b7
000005b0: goto %000003c7

000002b7:
000002bf: call R30 with noreturn

000003c7:
000003cb: R16 := R1
000003d0: call R16 with noreturn

000005b1: sub frame_dummy(frame_dummy_result)
000005c4: frame_dummy_result :: out u32 = low:32[R0]

00000357:
00000359: call @register_tm_clones with noreturn

000005b2: sub main(main_argc, main_argv, main_result)
000005c5: main_argc :: in u32 = low:32[R0]
000005c6: main_argv :: in out u64 = R1
000005c7: main_result :: out u32 = low:32[R0]

000001a8:
000001ac: #1 := R31 - 0x10
000001b2: mem := mem with [#1, el]:u64 <- R29
000001b8: mem := mem with [#1 + 8, el]:u64 <- R30
000001bc: R31 := #1
000001c1: R2 := 0x41
000001c6: R1 := 0
000001cc: R29 := R31
000001d2: R1 := R1 + 0x7F0
000001d7: R0 := 1
000001dc: R30 := 0x69C
000001df: call @__printf_chk with return %000001e1

000001e1:
000001e4: R2 := 0x2A
000001e9: R1 := 0
000001ee: R0 := 1
000001f4: R1 := R1 + 0x808
000001f9: R30 := 0x6B0
000001fb: call @__printf_chk with return %000001fd

000001fd:
00000200: R0 := 0
00000207: R29 := mem[R31, el]:u64
0000020c: R30 := mem[R31 + 8, el]:u64
00000210: R31 := R31 + 0x10
00000215: call R30 with noreturn

000005b3: sub register_tm_clones(register_tm_clones_result)
000005c8: register_tm_clones_result :: out u32 = low:32[R0]

000002c1:
000002c4: R0 := 0x11000
000002ca: R0 := R0 + 0x10
000002cf: R1 := 0x11000
000002d5: R1 := R1 + 0x10
000002dc: R1 := R1 + ~R0 + 1
000002e2: R2 := 0.63:63[R1]
000002e9: R1 := R2 + (R1 ~>> 3)
000002ef: R1 := extend:64[63:1[R1]]
000002f5: when R1 = 0 goto %000002f3
000005b4: goto %00000396

00000396:
00000399: R2 := 0x10000
000003a0: R2 := mem[R2 + 0xFF8, el]:u64
000003a5: when R2 = 0 goto %000002f3
000005b5: goto %000003a9

000002f3:
000002fb: call R30 with noreturn

000003a9:
000003ad: R16 := R2
000003b2: call R16 with noreturn
