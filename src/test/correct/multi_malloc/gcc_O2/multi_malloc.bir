00000647: program
00000612: sub __cxa_finalize(__cxa_finalize_result)
00000648: __cxa_finalize_result :: out u32 = low:32[R0]

0000038c:
00000494: R16 := 0x20000
0000049b: R17 := mem[R16 + 8, el]:u64
000004a1: R16 := R16 + 8
000004a6: call R17 with noreturn

00000613: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000649: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002fa:
000002fe: #4 := R31 - 0x20
00000304: mem := mem with [#4, el]:u64 <- R29
0000030a: mem := mem with [#4 + 8, el]:u64 <- R30
0000030e: R31 := #4
00000314: R29 := R31
0000031c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000321: R19 := 0x20000
00000328: R0 := pad:64[mem[R19 + 0x38]]
0000032e: when 0:0[R0] goto %0000032c
0000063d: goto %00000355

00000355:
00000358: R0 := 0x1F000
0000035f: R0 := mem[R0 + 0xFC8, el]:u64
00000365: when R0 = 0 goto %00000363
0000063e: goto %0000037c

0000037c:
0000037f: R0 := 0x20000
00000386: R0 := mem[R0 + 0x30, el]:u64
0000038b: R30 := 0x770
0000038e: call @__cxa_finalize with return %00000363

00000363:
0000036b: R30 := 0x774
0000036d: call @deregister_tm_clones with return %0000036f

0000036f:
00000372: R0 := 1
0000037a: mem := mem with [R19 + 0x38] <- 7:0[R0]
0000063f: goto %0000032c

0000032c:
00000336: R19 := mem[R31 + 0x10, el]:u64
0000033d: R29 := mem[R31, el]:u64
00000342: R30 := mem[R31 + 8, el]:u64
00000346: R31 := R31 + 0x20
0000034b: call R30 with noreturn

00000617: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000064a: __libc_start_main_main :: in u64 = R0
0000064b: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000064c: __libc_start_main_arg3 :: in out u64 = R2
0000064d: __libc_start_main_auxv :: in out u64 = R3
0000064e: __libc_start_main_result :: out u32 = low:32[R0]

00000253:
0000047e: R16 := 0x20000
00000485: R17 := mem[R16, el]:u64
0000048b: R16 := R16
00000490: call R17 with noreturn

00000618: sub _fini(_fini_result)
0000064f: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000619: sub _init(_init_result)
00000650: _init_result :: out u32 = low:32[R0]

00000560:
00000566: #6 := R31 - 0x10
0000056c: mem := mem with [#6, el]:u64 <- R29
00000572: mem := mem with [#6 + 8, el]:u64 <- R30
00000576: R31 := #6
0000057c: R29 := R31
00000581: R30 := 0x5C8
00000583: call @call_weak_fn with return %00000585

00000585:
0000058a: R29 := mem[R31, el]:u64
0000058f: R30 := mem[R31 + 8, el]:u64
00000593: R31 := R31 + 0x10
00000598: call R30 with noreturn

0000061a: sub _start(_start_result)
00000651: _start_result :: out u32 = low:32[R0]

00000214:
00000219: R29 := 0
0000021e: R30 := 0
00000224: R5 := R0
0000022b: R1 := mem[R31, el]:u64
00000231: R2 := R31 + 8
00000237: R6 := R31
0000023c: R0 := 0x1F000
00000243: R0 := mem[R0 + 0xFD8, el]:u64
00000248: R3 := 0
0000024d: R4 := 0
00000252: R30 := 0x6B0
00000255: call @__libc_start_main with return %00000257

00000257:
0000025a: R30 := 0x6B4
0000025d: call @abort with return %00000640

00000640:
00000641: call @call_weak_fn with noreturn

0000061d: sub abort()


0000025b:
000004c0: R16 := 0x20000
000004c7: R17 := mem[R16 + 0x18, el]:u64
000004cd: R16 := R16 + 0x18
000004d2: call R17 with noreturn

0000061e: sub call_weak_fn(call_weak_fn_result)
00000652: call_weak_fn_result :: out u32 = low:32[R0]

0000025f:
00000262: R0 := 0x1F000
00000269: R0 := mem[R0 + 0xFD0, el]:u64
0000026f: when R0 = 0 goto %0000026d
00000642: goto %000003cc

0000026d:
00000275: call R30 with noreturn

000003cc:
000003cf: goto @__gmon_start__

000003cd:
000004aa: R16 := 0x20000
000004b1: R17 := mem[R16 + 0x10, el]:u64
000004b7: R16 := R16 + 0x10
000004bc: call R17 with noreturn

00000620: sub deregister_tm_clones(deregister_tm_clones_result)
00000653: deregister_tm_clones_result :: out u32 = low:32[R0]

0000027b:
0000027e: R0 := 0x20000
00000284: R0 := R0 + 0x38
00000289: R1 := 0x20000
0000028f: R1 := R1 + 0x38
00000295: #2 := ~R0
0000029a: #3 := R1 + ~R0
000002a0: VF := extend:65[#3 + 1] <> extend:65[R1] + extend:65[#2] + 1
000002a6: CF := pad:65[#3 + 1] <> pad:65[R1] + pad:65[#2] + 1
000002aa: ZF := #3 + 1 = 0
000002ae: NF := 63:63[#3 + 1]
000002b4: when ZF goto %000002b2
00000643: goto %000003ae

000003ae:
000003b1: R1 := 0x1F000
000003b8: R1 := mem[R1 + 0xFC0, el]:u64
000003bd: when R1 = 0 goto %000002b2
00000644: goto %000003c1

000002b2:
000002ba: call R30 with noreturn

000003c1:
000003c5: R16 := R1
000003ca: call R16 with noreturn

00000623: sub frame_dummy(frame_dummy_result)
00000654: frame_dummy_result :: out u32 = low:32[R0]

00000351:
00000353: call @register_tm_clones with noreturn

00000624: sub main(main_argc, main_argv, main_result)
00000655: main_argc :: in u32 = low:32[R0]
00000656: main_argv :: in out u64 = R1
00000657: main_result :: out u32 = low:32[R0]

000001a9:
000001ad: #1 := R31 - 0x10
000001b3: mem := mem with [#1, el]:u64 <- R29
000001b9: mem := mem with [#1 + 8, el]:u64 <- R30
000001bd: R31 := #1
000001c2: R1 := 0x41
000001c7: R0 := 0
000001cd: R29 := R31
000001d3: R0 := R0 + 0x7B0
000001d8: R30 := 0x658
000001db: call @printf with return %000001dd

000001dd:
000001e0: R1 := 0x2A
000001e5: R0 := 0
000001eb: R0 := R0 + 0x7C8
000001f0: R30 := 0x668
000001f2: call @printf with return %000001f4

000001f4:
000001f7: R0 := 0
000001fe: R29 := mem[R31, el]:u64
00000203: R30 := mem[R31 + 8, el]:u64
00000207: R31 := R31 + 0x10
0000020c: call R30 with noreturn

00000625: sub printf(printf_format, printf_result)
00000658: printf_format :: in u64 = R0
00000659: printf_result :: out u32 = low:32[R0]

000001d9:
000004d6: R16 := 0x20000
000004dd: R17 := mem[R16 + 0x20, el]:u64
000004e3: R16 := R16 + 0x20
000004e8: call R17 with noreturn

00000626: sub register_tm_clones(register_tm_clones_result)
0000065a: register_tm_clones_result :: out u32 = low:32[R0]

000002bc:
000002bf: R0 := 0x20000
000002c5: R0 := R0 + 0x38
000002ca: R1 := 0x20000
000002d0: R1 := R1 + 0x38
000002d7: R1 := R1 + ~R0 + 1
000002dd: R2 := 0.63:63[R1]
000002e4: R1 := R2 + (R1 ~>> 3)
000002ea: R1 := extend:64[63:1[R1]]
000002f0: when R1 = 0 goto %000002ee
00000645: goto %00000390

00000390:
00000393: R2 := 0x1F000
0000039a: R2 := mem[R2 + 0xFE0, el]:u64
0000039f: when R2 = 0 goto %000002ee
00000646: goto %000003a3

000002ee:
000002f6: call R30 with noreturn

000003a3:
000003a7: R16 := R2
000003ac: call R16 with noreturn
