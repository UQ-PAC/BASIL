var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R1: bool;
var {:extern} $Gamma_R16: bool;
var {:extern} $Gamma_R17: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R1: bv64;
var {:extern} $R16: bv64;
var {:extern} $R17: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $_DYNAMIC_addr: bv64;
axiom ($_DYNAMIC_addr == 69008bv64);
const {:extern} $_GLOBAL_OFFSET_TABLE__addr: bv64;
axiom ($_GLOBAL_OFFSET_TABLE__addr == 69584bv64);
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2224bv64);
const {:extern} $__FRAME_END___addr: bv64;
axiom ($__FRAME_END___addr == 2504bv64);
const {:extern} $__abi_tag_addr: bv64;
axiom ($__abi_tag_addr == 632bv64);
const {:extern} $__do_global_dtors_aux_fini_array_entry_addr: bv64;
axiom ($__do_global_dtors_aux_fini_array_entry_addr == 69000bv64);
const {:extern} $__frame_dummy_init_array_entry_addr: bv64;
axiom ($__frame_dummy_init_array_entry_addr == 68992bv64);
const {:extern} $completed.0_addr: bv64;
axiom ($completed.0_addr == 69648bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_load8(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  #gammaMap[#index]
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} gamma_store8(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_load8_le(#memory: [bv64]bv8, #index: bv64) returns (bv8) {
  #memory[#index]
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

function {:extern} memory_store8_le(#memory: [bv64]bv8, #index: bv64, #value: bv8) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 24"} zero_extend24_8(bv8) returns (bv32);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load64_le($mem, 2224bv64) == 131073bv64);
  free ensures (memory_load64_le($mem, 2232bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le($mem, 2240bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le($mem, 2248bv64) == 0bv64);
  free ensures (memory_load64_le($mem, 2256bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le($mem, 2264bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le($mem, 68992bv64) == 2064bv64);
  free ensures (memory_load64_le($mem, 69000bv64) == 1984bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 2068bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$malloc();
  free requires (memory_load64_le($mem, 2224bv64) == 131073bv64);
  free requires (memory_load64_le($mem, 2232bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le($mem, 2240bv64) == 748482783423457568bv64);
  free requires (memory_load64_le($mem, 2248bv64) == 0bv64);
  free requires (memory_load64_le($mem, 2256bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le($mem, 2264bv64) == 2924860384375657bv64);
  free requires (memory_load64_le($mem, 68992bv64) == 2064bv64);
  free requires (memory_load64_le($mem, 69000bv64) == 1984bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 2068bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le($mem, 2224bv64) == 131073bv64);
  free ensures (memory_load64_le($mem, 2232bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le($mem, 2240bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le($mem, 2248bv64) == 0bv64);
  free ensures (memory_load64_le($mem, 2256bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le($mem, 2264bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le($mem, 68992bv64) == 2064bv64);
  free ensures (memory_load64_le($mem, 69000bv64) == 1984bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 2068bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure p$#free();
  free requires (memory_load64_le($mem, 2224bv64) == 131073bv64);
  free requires (memory_load64_le($mem, 2232bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le($mem, 2240bv64) == 748482783423457568bv64);
  free requires (memory_load64_le($mem, 2248bv64) == 0bv64);
  free requires (memory_load64_le($mem, 2256bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le($mem, 2264bv64) == 2924860384375657bv64);
  free requires (memory_load64_le($mem, 68992bv64) == 2064bv64);
  free requires (memory_load64_le($mem, 69000bv64) == 1984bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 2068bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le($mem, 2224bv64) == 131073bv64);
  free ensures (memory_load64_le($mem, 2232bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le($mem, 2240bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le($mem, 2248bv64) == 0bv64);
  free ensures (memory_load64_le($mem, 2256bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le($mem, 2264bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le($mem, 68992bv64) == 2064bv64);
  free ensures (memory_load64_le($mem, 69000bv64) == 1984bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 2068bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure p$printf();
  free requires (memory_load64_le($mem, 2224bv64) == 131073bv64);
  free requires (memory_load64_le($mem, 2232bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le($mem, 2240bv64) == 748482783423457568bv64);
  free requires (memory_load64_le($mem, 2248bv64) == 0bv64);
  free requires (memory_load64_le($mem, 2256bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le($mem, 2264bv64) == 2924860384375657bv64);
  free requires (memory_load64_le($mem, 68992bv64) == 2064bv64);
  free requires (memory_load64_le($mem, 69000bv64) == 1984bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 2068bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le($mem, 2224bv64) == 131073bv64);
  free ensures (memory_load64_le($mem, 2232bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le($mem, 2240bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le($mem, 2248bv64) == 0bv64);
  free ensures (memory_load64_le($mem, 2256bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le($mem, 2264bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le($mem, 68992bv64) == 2064bv64);
  free ensures (memory_load64_le($mem, 69000bv64) == 1984bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 2068bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure p$main_2068();
  modifies $Gamma_R0, $Gamma_R1, $Gamma_R16, $Gamma_R17, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_mem, $Gamma_stack, $R0, $R1, $R16, $R17, $R29, $R30, $R31, $mem, $stack;
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le($mem, 2224bv64) == 131073bv64);
  free requires (memory_load64_le($mem, 2232bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le($mem, 2240bv64) == 748482783423457568bv64);
  free requires (memory_load64_le($mem, 2248bv64) == 0bv64);
  free requires (memory_load64_le($mem, 2256bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le($mem, 2264bv64) == 2924860384375657bv64);
  free requires (memory_load64_le($mem, 68992bv64) == 2064bv64);
  free requires (memory_load64_le($mem, 69000bv64) == 1984bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 2068bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load64_le($mem, 2224bv64) == 131073bv64);
  free ensures (memory_load64_le($mem, 2232bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le($mem, 2240bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le($mem, 2248bv64) == 0bv64);
  free ensures (memory_load64_le($mem, 2256bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le($mem, 2264bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le($mem, 68992bv64) == 2064bv64);
  free ensures (memory_load64_le($mem, 69000bv64) == 1984bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 2068bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_2068()
{
  var #Cse0__5_4: bv64;
  var #Gamma_Cse0__5_4: bool;
  var #Gamma_load11: bool;
  var #Gamma_load12: bool;
  var #Gamma_load13: bool;
  var #Gamma_load14: bool;
  var #Gamma_load15: bool;
  var #Gamma_load16: bool;
  var #Gamma_load17: bool;
  var #Gamma_load18: bool;
  var #Gamma_load19: bool;
  var #Gamma_load20: bool;
  var #Gamma_load22: bool;
  var #Gamma_load26: bool;
  var #Gamma_load32: bool;
  var #load11: bv64;
  var #load12: bv64;
  var #load13: bv64;
  var #load14: bv64;
  var #load15: bv64;
  var #load16: bv64;
  var #load17: bv8;
  var #load18: bv64;
  var #load19: bv32;
  var #load20: bv64;
  var #load22: bv64;
  var #load26: bv64;
  var #load32: bv64;
  b#main_entry:
    assume {:captureState "main_entry (dwzLCyR+Qf6ppIpcnfBeyw==)"} true;
    #Cse0__5_4, #Gamma_Cse0__5_4 := bvadd64($R31, 18446744073709551584bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_4, $R29), gamma_store64($Gamma_stack, #Cse0__5_4, $Gamma_R29);
    assume {:captureState "2068_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_4, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_4, 8bv64), $Gamma_R30);
    assume {:captureState "2068_2"} true;
    $R31, $Gamma_R31 := #Cse0__5_4, #Gamma_Cse0__5_4;
    $R29, $Gamma_R29 := $R31, $Gamma_R31;
    $R0, $Gamma_R0 := 1bv64, true;
    $R30, $Gamma_R30 := 2084bv64, true;
    goto b#FUN_680_entry_727;
  b#FUN_680_entry_727:
    assume {:captureState "FUN_680_entry_727"} true;
    $R16, $Gamma_R16 := 65536bv64, true;
    call p$rely();
    #load32, #Gamma_load32 := memory_load64_le($mem, bvadd64($R16, 4008bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 4008bv64)) || L($mem, bvadd64($R16, 4008bv64)));
    $R17, $Gamma_R17 := #load32, #Gamma_load32;
    $R16, $Gamma_R16 := bvadd64($R16, 4008bv64), $Gamma_R16;
    call p$malloc();
    goto b#FUN_680_basil_return_1_728;
  b#FUN_680_basil_return_1_728:
    assume {:captureState "FUN_680_basil_return_1_728"} true;
    goto b#_inlineret_7;
  b#_inlineret_7:
    assume {:captureState "_inlineret_7 (dwzLCyR+Qf6ppIpcnfBeyw==)"} true;
    goto b#main_13;
  b#main_13:
    assume {:captureState "main_13 (qq0fnVWHRfSzM76qEY54cg==)"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 16bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 16bv64), $Gamma_R0);
    assume {:captureState "2084_0"} true;
    $R0, $Gamma_R0 := 4bv64, true;
    $R30, $Gamma_R30 := 2096bv64, true;
    goto b#FUN_680_entry_729;
  b#FUN_680_entry_729:
    assume {:captureState "FUN_680_entry_729"} true;
    $R16, $Gamma_R16 := 65536bv64, true;
    call p$rely();
    #load32, #Gamma_load32 := memory_load64_le($mem, bvadd64($R16, 4008bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 4008bv64)) || L($mem, bvadd64($R16, 4008bv64)));
    $R17, $Gamma_R17 := #load32, #Gamma_load32;
    $R16, $Gamma_R16 := bvadd64($R16, 4008bv64), $Gamma_R16;
    call p$malloc();
    goto b#FUN_680_basil_return_1_730;
  b#FUN_680_basil_return_1_730:
    assume {:captureState "FUN_680_basil_return_1_730"} true;
    goto b#_inlineret_8;
  b#_inlineret_8:
    assume {:captureState "_inlineret_8 (qq0fnVWHRfSzM76qEY54cg==)"} true;
    goto b#main_11;
  b#main_11:
    assume {:captureState "main_11 (OIRkzI73QCm6jl9JBTWOFw==)"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 24bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 24bv64), $Gamma_R0);
    assume {:captureState "2096_0"} true;
    #load14, #Gamma_load14 := memory_load64_le($stack, bvadd64($R31, 16bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 16bv64));
    $R0, $Gamma_R0 := #load14, #Gamma_load14;
    $R1, $Gamma_R1 := 65bv64, true;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store8_le($mem, $R0, $R1[8:0]), gamma_store8($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "2108_0"} true;
    #load15, #Gamma_load15 := memory_load64_le($stack, bvadd64($R31, 24bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 24bv64));
    $R0, $Gamma_R0 := #load15, #Gamma_load15;
    $R1, $Gamma_R1 := 42bv64, true;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store32_le($mem, $R0, $R1[32:0]), gamma_store32($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "2120_0"} true;
    #load16, #Gamma_load16 := memory_load64_le($stack, bvadd64($R31, 16bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 16bv64));
    $R0, $Gamma_R0 := #load16, #Gamma_load16;
    call p$rely();
    #load17, #Gamma_load17 := memory_load8_le($mem, $R0), (gamma_load8($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := zero_extend32_32(zero_extend24_8(#load17)), #Gamma_load17;
    $R1, $Gamma_R1 := zero_extend32_32($R0[32:0]), $Gamma_R0;
    $R0, $Gamma_R0 := 0bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 2232bv64), $Gamma_R0;
    $R30, $Gamma_R30 := 2084bv64, true;
    goto b#FUN_6c0_entry_721;
  b#FUN_6c0_entry_721:
    assume {:captureState "FUN_6c0_entry_721"} true;
    $R16, $Gamma_R16 := 65536bv64, true;
    call p$rely();
    #load22, #Gamma_load22 := memory_load64_le($mem, bvadd64($R16, 4040bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 4040bv64)) || L($mem, bvadd64($R16, 4040bv64)));
    $R17, $Gamma_R17 := #load22, #Gamma_load22;
    $R16, $Gamma_R16 := bvadd64($R16, 4040bv64), $Gamma_R16;
    call p$printf();
    goto b#FUN_6c0_basil_return_1_722;
  b#FUN_6c0_basil_return_1_722:
    assume {:captureState "FUN_6c0_basil_return_1_722"} true;
    goto b#_inlineret_4;
  b#_inlineret_4:
    assume {:captureState "_inlineret_4 (OIRkzI73QCm6jl9JBTWOFw==)"} true;
    goto b#main_9;
  b#main_9:
    assume {:captureState "main_9 (DLqleMKWShKLuDEFd2d5wA==)"} true;
    #load18, #Gamma_load18 := memory_load64_le($stack, bvadd64($R31, 24bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 24bv64));
    $R0, $Gamma_R0 := #load18, #Gamma_load18;
    call p$rely();
    #load19, #Gamma_load19 := memory_load32_le($mem, $R0), (gamma_load32($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := zero_extend32_32(#load19), #Gamma_load19;
    $R1, $Gamma_R1 := zero_extend32_32($R0[32:0]), $Gamma_R0;
    $R0, $Gamma_R0 := 0bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 2256bv64), $Gamma_R0;
    $R30, $Gamma_R30 := 2172bv64, true;
    goto b#FUN_6c0_entry_719;
  b#FUN_6c0_entry_719:
    assume {:captureState "FUN_6c0_entry_719"} true;
    $R16, $Gamma_R16 := 65536bv64, true;
    call p$rely();
    #load22, #Gamma_load22 := memory_load64_le($mem, bvadd64($R16, 4040bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 4040bv64)) || L($mem, bvadd64($R16, 4040bv64)));
    $R17, $Gamma_R17 := #load22, #Gamma_load22;
    $R16, $Gamma_R16 := bvadd64($R16, 4040bv64), $Gamma_R16;
    call p$printf();
    goto b#FUN_6c0_basil_return_1_720;
  b#FUN_6c0_basil_return_1_720:
    assume {:captureState "FUN_6c0_basil_return_1_720"} true;
    goto b#_inlineret_3;
  b#_inlineret_3:
    assume {:captureState "_inlineret_3 (DLqleMKWShKLuDEFd2d5wA==)"} true;
    goto b#main_7;
  b#main_7:
    assume {:captureState "main_7 (VxlFjKprQLyiMLIhbUhZNw==)"} true;
    #load20, #Gamma_load20 := memory_load64_le($stack, bvadd64($R31, 16bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 16bv64));
    $R0, $Gamma_R0 := #load20, #Gamma_load20;
    $R30, $Gamma_R30 := 2180bv64, true;
    goto b#FUN_6b0_entry_723;
  b#FUN_6b0_entry_723:
    assume {:captureState "FUN_6b0_entry_723"} true;
    $R16, $Gamma_R16 := 65536bv64, true;
    call p$rely();
    #load26, #Gamma_load26 := memory_load64_le($mem, bvadd64($R16, 4032bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 4032bv64)) || L($mem, bvadd64($R16, 4032bv64)));
    $R17, $Gamma_R17 := #load26, #Gamma_load26;
    $R16, $Gamma_R16 := bvadd64($R16, 4032bv64), $Gamma_R16;
    call p$#free();
    goto b#FUN_6b0_basil_return_1_724;
  b#FUN_6b0_basil_return_1_724:
    assume {:captureState "FUN_6b0_basil_return_1_724"} true;
    goto b#_inlineret_5;
  b#_inlineret_5:
    assume {:captureState "_inlineret_5 (VxlFjKprQLyiMLIhbUhZNw==)"} true;
    goto b#main_5;
  b#main_5:
    assume {:captureState "main_5 (lPC5PztFQmelpi1yHg437g==)"} true;
    #load13, #Gamma_load13 := memory_load64_le($stack, bvadd64($R31, 24bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 24bv64));
    $R0, $Gamma_R0 := #load13, #Gamma_load13;
    $R30, $Gamma_R30 := 2188bv64, true;
    goto b#FUN_6b0_entry_725;
  b#FUN_6b0_entry_725:
    assume {:captureState "FUN_6b0_entry_725"} true;
    $R16, $Gamma_R16 := 65536bv64, true;
    call p$rely();
    #load26, #Gamma_load26 := memory_load64_le($mem, bvadd64($R16, 4032bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 4032bv64)) || L($mem, bvadd64($R16, 4032bv64)));
    $R17, $Gamma_R17 := #load26, #Gamma_load26;
    $R16, $Gamma_R16 := bvadd64($R16, 4032bv64), $Gamma_R16;
    call p$#free();
    goto b#FUN_6b0_basil_return_1_726;
  b#FUN_6b0_basil_return_1_726:
    assume {:captureState "FUN_6b0_basil_return_1_726"} true;
    goto b#_inlineret_6;
  b#_inlineret_6:
    assume {:captureState "_inlineret_6 (lPC5PztFQmelpi1yHg437g==)"} true;
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (mc7RYY6OQ9i3XnFy/bGwqA==)"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    #load11, #Gamma_load11 := memory_load64_le($stack, $R31), gamma_load64($Gamma_stack, $R31);
    $R29, $Gamma_R29 := #load11, #Gamma_load11;
    #load12, #Gamma_load12 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R30, $Gamma_R30 := #load12, #Gamma_load12;
    $R31, $Gamma_R31 := bvadd64($R31, 32bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

