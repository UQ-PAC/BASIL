000006fe: program
000006e5: sub __cxa_finalize(__cxa_finalize_result)
000006ff: __cxa_finalize_result :: out u32 = low:32[R0]

00000456:
0000057e: R16 := 0x10000
00000585: R17 := mem[R16 + 0xFA0, el]:u64
0000058b: R16 := R16 + 0xFA0
00000590: call R17 with noreturn

000006e6: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000700: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002d2:
000002d6: #3 := R31 - 0x20
000002dc: mem := mem with [#3, el]:u64 <- R29
000002e2: mem := mem with [#3 + 8, el]:u64 <- R30
000002e6: R31 := #3
000002ec: R29 := R31
000002f4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002f9: R19 := 0x11000
00000300: R0 := pad:64[mem[R19 + 0x10]]
00000307: when 31:0[R0] <> 0 goto %00000305
000006e7: goto %0000041f

0000041f:
00000422: R0 := 0x10000
00000429: R0 := mem[R0 + 0xFE0, el]:u64
0000042f: when R0 = 0 goto %0000042d
000006e8: goto %00000446

00000446:
00000449: R0 := 0x11000
00000450: R0 := mem[R0 + 8, el]:u64
00000455: R30 := 0x7F0
00000458: call @__cxa_finalize with return %0000042d

0000042d:
00000435: R30 := 0x7F4
00000437: call @deregister_tm_clones with return %00000439

00000439:
0000043c: R0 := 1
00000444: mem := mem with [R19 + 0x10] <- 7:0[R0]
000006e9: goto %00000305

00000305:
0000030f: R19 := mem[R31 + 0x10, el]:u64
00000316: R29 := mem[R31, el]:u64
0000031b: R30 := mem[R31 + 8, el]:u64
0000031f: R31 := R31 + 0x20
00000324: call R30 with noreturn

000006ea: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000701: __libc_start_main_main :: in u64 = R0
00000702: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000703: __libc_start_main_arg3 :: in out u64 = R2
00000704: __libc_start_main_auxv :: in out u64 = R3
00000705: __libc_start_main_result :: out u32 = low:32[R0]

0000022b:
00000568: R16 := 0x10000
0000056f: R17 := mem[R16 + 0xF98, el]:u64
00000575: R16 := R16 + 0xF98
0000057a: call R17 with noreturn

000006eb: sub _fini(_fini_result)
00000706: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000006ec: sub _init(_init_result)
00000707: _init_result :: out u32 = low:32[R0]

0000061a:
00000620: #6 := R31 - 0x10
00000626: mem := mem with [#6, el]:u64 <- R29
0000062c: mem := mem with [#6 + 8, el]:u64 <- R30
00000630: R31 := #6
00000636: R29 := R31
0000063b: R30 := 0x638
0000063d: call @call_weak_fn with return %0000063f

0000063f:
00000644: R29 := mem[R31, el]:u64
00000649: R30 := mem[R31 + 8, el]:u64
0000064d: R31 := R31 + 0x10
00000652: call R30 with noreturn

000006ed: sub _start(_start_result)
00000708: _start_result :: out u32 = low:32[R0]

000001ec:
000001f1: R29 := 0
000001f6: R30 := 0
000001fc: R5 := R0
00000203: R1 := mem[R31, el]:u64
00000209: R2 := R31 + 8
0000020f: R6 := R31
00000214: R0 := 0x10000
0000021b: R0 := mem[R0 + 0xFF0, el]:u64
00000220: R3 := 0
00000225: R4 := 0
0000022a: R30 := 0x730
0000022d: call @__libc_start_main with return %0000022f

0000022f:
00000232: R30 := 0x734
00000235: call @abort with return %000006ee

000006ee:
000006ef: call @call_weak_fn with noreturn

000006f0: sub abort()


00000233:
000005c0: R16 := 0x10000
000005c7: R17 := mem[R16 + 0xFB8, el]:u64
000005cd: R16 := R16 + 0xFB8
000005d2: call R17 with noreturn

000006f1: sub call_weak_fn(call_weak_fn_result)
00000709: call_weak_fn_result :: out u32 = low:32[R0]

00000237:
0000023a: R0 := 0x10000
00000241: R0 := mem[R0 + 0xFE8, el]:u64
00000247: when R0 = 0 goto %00000245
000006f2: goto %00000496

00000245:
0000024d: call R30 with noreturn

00000496:
00000499: goto @__gmon_start__

00000497:
000005aa: R16 := 0x10000
000005b1: R17 := mem[R16 + 0xFB0, el]:u64
000005b7: R16 := R16 + 0xFB0
000005bc: call R17 with noreturn

000006f3: sub deregister_tm_clones(deregister_tm_clones_result)
0000070a: deregister_tm_clones_result :: out u32 = low:32[R0]

00000253:
00000256: R0 := 0x11000
0000025c: R0 := R0 + 0x10
00000261: R1 := 0x11000
00000267: R1 := R1 + 0x10
0000026d: #1 := ~R0
00000272: #2 := R1 + ~R0
00000278: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000027e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000282: ZF := #2 + 1 = 0
00000286: NF := 63:63[#2 + 1]
0000028c: when ZF goto %0000028a
000006f4: goto %00000478

00000478:
0000047b: R1 := 0x10000
00000482: R1 := mem[R1 + 0xFD8, el]:u64
00000487: when R1 = 0 goto %0000028a
000006f5: goto %0000048b

0000028a:
00000292: call R30 with noreturn

0000048b:
0000048f: R16 := R1
00000494: call R16 with noreturn

000006f6: sub frame_dummy(frame_dummy_result)
0000070b: frame_dummy_result :: out u32 = low:32[R0]

0000032a:
0000032c: call @register_tm_clones with noreturn

000006f7: sub free(free_ptr)
0000070c: free_ptr :: in out u64 = R0

000003f3:
000005d6: R16 := 0x10000
000005dd: R17 := mem[R16 + 0xFC0, el]:u64
000005e3: R16 := R16 + 0xFC0
000005e8: call R17 with noreturn

000006f8: sub main(main_argc, main_argv, main_result)
0000070d: main_argc :: in u32 = low:32[R0]
0000070e: main_argv :: in out u64 = R1
0000070f: main_result :: out u32 = low:32[R0]

0000032e:
00000332: #4 := R31 - 0x20
00000338: mem := mem with [#4, el]:u64 <- R29
0000033e: mem := mem with [#4 + 8, el]:u64 <- R30
00000342: R31 := #4
00000348: R29 := R31
0000034d: R0 := 1
00000352: R30 := 0x824
00000355: call @malloc with return %00000357

00000357:
0000035d: mem := mem with [R31 + 0x10, el]:u64 <- R0
00000362: R0 := 4
00000367: R30 := 0x830
00000369: call @malloc with return %0000036b

0000036b:
00000371: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000378: R0 := mem[R31 + 0x10, el]:u64
0000037d: R1 := 0x41
00000385: mem := mem with [R0] <- 7:0[R1]
0000038c: R0 := mem[R31 + 0x18, el]:u64
00000391: R1 := 0x2A
00000399: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003a0: R0 := mem[R31 + 0x10, el]:u64
000003a7: R0 := pad:64[mem[R0]]
000003ad: R1 := pad:64[31:0[R0]]
000003b2: R0 := 0
000003b8: R0 := R0 + 0x8B8
000003bd: R30 := 0x864
000003c0: call @printf with return %000003c2

000003c2:
000003c7: R0 := mem[R31 + 0x18, el]:u64
000003ce: R0 := pad:64[mem[R0, el]:u32]
000003d4: R1 := pad:64[31:0[R0]]
000003d9: R0 := 0
000003df: R0 := R0 + 0x8D0
000003e4: R30 := 0x87C
000003e6: call @printf with return %000003e8

000003e8:
000003ed: R0 := mem[R31 + 0x10, el]:u64
000003f2: R30 := 0x884
000003f5: call @free with return %000003f7

000003f7:
000003fc: R0 := mem[R31 + 0x18, el]:u64
00000401: R30 := 0x88C
00000403: call @free with return %00000405

00000405:
00000408: R0 := 0
0000040f: R29 := mem[R31, el]:u64
00000414: R30 := mem[R31 + 8, el]:u64
00000418: R31 := R31 + 0x20
0000041d: call R30 with noreturn

000006f9: sub malloc(malloc_size, malloc_result)
00000710: malloc_size :: in u64 = R0
00000711: malloc_result :: out u64 = R0

00000353:
00000594: R16 := 0x10000
0000059b: R17 := mem[R16 + 0xFA8, el]:u64
000005a1: R16 := R16 + 0xFA8
000005a6: call R17 with noreturn

000006fa: sub printf(printf_format, printf_result)
00000712: printf_format :: in u64 = R0
00000713: printf_result :: out u32 = low:32[R0]

000003be:
000005ec: R16 := 0x10000
000005f3: R17 := mem[R16 + 0xFC8, el]:u64
000005f9: R16 := R16 + 0xFC8
000005fe: call R17 with noreturn

000006fb: sub register_tm_clones(register_tm_clones_result)
00000714: register_tm_clones_result :: out u32 = low:32[R0]

00000294:
00000297: R0 := 0x11000
0000029d: R0 := R0 + 0x10
000002a2: R1 := 0x11000
000002a8: R1 := R1 + 0x10
000002af: R1 := R1 + ~R0 + 1
000002b5: R2 := 0.63:63[R1]
000002bc: R1 := R2 + (R1 ~>> 3)
000002c2: R1 := extend:64[63:1[R1]]
000002c8: when R1 = 0 goto %000002c6
000006fc: goto %0000045a

0000045a:
0000045d: R2 := 0x10000
00000464: R2 := mem[R2 + 0xFF8, el]:u64
00000469: when R2 = 0 goto %000002c6
000006fd: goto %0000046d

000002c6:
000002ce: call R30 with noreturn

0000046d:
00000471: R16 := R2
00000476: call R16 with noreturn
