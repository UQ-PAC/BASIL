var {:extern} Gamma_R0: bool;

var {:extern} Gamma_R1: bool;

var {:extern} Gamma_R16: bool;

var {:extern} Gamma_R17: bool;

var {:extern} Gamma_R29: bool;

var {:extern} Gamma_R30: bool;

var {:extern} Gamma_R31: bool;

var {:extern} Gamma_mem: [bv64]bool;

var {:extern} Gamma_stack: [bv64]bool;

var {:extern} R0: bv64;

var {:extern} R1: bv64;

var {:extern} R16: bv64;

var {:extern} R17: bv64;

var {:extern} R29: bv64;

var {:extern} R30: bv64;

var {:extern} R31: bv64;

var {:extern} mem: [bv64]bv8;

var {:extern} stack: [bv64]bv8;

const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2224bv64);

function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}


function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)]&&(gammaMap[bvadd64(index, 2bv64)]&&(gammaMap[bvadd64(index, 1bv64)]&&gammaMap[index])))
}


function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)]&&(gammaMap[bvadd64(index, 6bv64)]&&(gammaMap[bvadd64(index, 5bv64)]&&(gammaMap[bvadd64(index, 4bv64)]&&(gammaMap[bvadd64(index, 3bv64)]&&(gammaMap[bvadd64(index, 2bv64)]&&(gammaMap[bvadd64(index, 1bv64)]&&gammaMap[index])))))))
}


function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}


function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}


function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}


function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}


function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)]++(memory[bvadd64(index, 2bv64)]++(memory[bvadd64(index, 1bv64)]++memory[index])))
}


function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)]++(memory[bvadd64(index, 6bv64)]++(memory[bvadd64(index, 5bv64)]++(memory[bvadd64(index, 4bv64)]++(memory[bvadd64(index, 3bv64)]++(memory[bvadd64(index, 2bv64)]++(memory[bvadd64(index, 1bv64)]++memory[index])))))))
}


function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}


function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}


function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}


function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}


function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);

function {:extern} {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load64_le(mem, 2224bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2232bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 0bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);



procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}


procedure {:extern} rely_reflexive();



procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;



procedure #free();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 2224bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2232bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2240bv64) == 748482783423457568bv64);
  free requires (memory_load64_le(mem, 2248bv64) == 0bv64);
  free requires (memory_load64_le(mem, 2256bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2264bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 68992bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 2224bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2232bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 0bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);



procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R29, R30, R31, mem, stack;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le(mem, 2224bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2232bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2240bv64) == 748482783423457568bv64);
  free requires (memory_load64_le(mem, 2248bv64) == 0bv64);
  free requires (memory_load64_le(mem, 2256bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2264bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 68992bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 2224bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2232bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 0bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main()
{
  var #4: bv64;
  var Gamma_#4: bool;
  lmain:
    assume {:captureState "lmain"} true;
    #4, Gamma_#4 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #4, R29), gamma_store64(Gamma_stack, #4, Gamma_R29);
    assume {:captureState "%00000338"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#4, 8bv64), Gamma_R30);
    assume {:captureState "%0000033e"} true;
    R31, Gamma_R31 := #4, Gamma_#4;
    R29, Gamma_R29 := R31, Gamma_R31;
    R0, Gamma_R0 := 1bv64, true;
    R30, Gamma_R30 := 2084bv64, true;
    call malloc();
    goto l00000357;
  l00000357:
    assume {:captureState "l00000357"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R0);
    assume {:captureState "%0000035d"} true;
    R0, Gamma_R0 := 4bv64, true;
    R30, Gamma_R30 := 2096bv64, true;
    call malloc();
    goto l0000036b;
  l0000036b:
    assume {:captureState "l0000036b"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 24bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 24bv64), Gamma_R0);
    assume {:captureState "%00000371"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R1, Gamma_R1 := 65bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store8_le(mem, R0, R1[8:0]), gamma_store8(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%00000385"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 24bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 24bv64));
    R1, Gamma_R1 := 42bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%00000399"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    call rely();
    R0, Gamma_R0 := zero_extend56_8(memory_load8_le(mem, R0)), (gamma_load8(Gamma_mem, R0) || L(mem, R0));
    R1, Gamma_R1 := zero_extend32_32(R0[32:0]), Gamma_R0;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2232bv64), Gamma_R0;
    R30, Gamma_R30 := 2148bv64, true;
    call printf();
    goto l000003c2;
  l000003c2:
    assume {:captureState "l000003c2"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 24bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 24bv64));
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R1, Gamma_R1 := zero_extend32_32(R0[32:0]), Gamma_R0;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2256bv64), Gamma_R0;
    R30, Gamma_R30 := 2172bv64, true;
    call printf();
    goto l000003e8;
  l000003e8:
    assume {:captureState "l000003e8"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R30, Gamma_R30 := 2180bv64, true;
    call #free();
    goto l000003f7;
  l000003f7:
    assume {:captureState "l000003f7"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 24bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 24bv64));
    R30, Gamma_R30 := 2188bv64, true;
    call #free();
    goto l00000405;
  l00000405:
    assume {:captureState "l00000405"} true;
    R0, Gamma_R0 := 0bv64, true;
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    return;
}


procedure malloc();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 2224bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2232bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2240bv64) == 748482783423457568bv64);
  free requires (memory_load64_le(mem, 2248bv64) == 0bv64);
  free requires (memory_load64_le(mem, 2256bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2264bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 68992bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 2224bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2232bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 0bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);



procedure printf();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 2224bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2232bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2240bv64) == 748482783423457568bv64);
  free requires (memory_load64_le(mem, 2248bv64) == 0bv64);
  free requires (memory_load64_le(mem, 2256bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2264bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 68992bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 2224bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2232bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 0bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);



