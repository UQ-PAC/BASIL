var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2232bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 24"} zero_extend24_8(bv8) returns (bv32);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le(mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R29, R30, R31, R8, R9, mem, stack;
  free requires (memory_load64_le(mem, 69688bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free requires (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free requires (memory_load8_le(mem, 2264bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2265bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2266bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2267bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2268bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le(mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation main()
{
  var Cse0__5$3$1: bv64;
  var Cse0__5$5$1: bv64;
  var Gamma_Cse0__5$3$1: bool;
  var Gamma_Cse0__5$5$1: bool;
  $main$__0__$rJrwEHH7Q82yFH8R8ikgag:
    assume {:captureState "$main$__0__$rJrwEHH7Q82yFH8R8ikgag"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551568bv64), Gamma_R31;
    Cse0__5$3$1, Gamma_Cse0__5$3$1 := bvadd64(R31, 32bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5$3$1, R29), gamma_store64(Gamma_stack, Cse0__5$3$1, Gamma_R29);
    assume {:captureState "2072$1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5$3$1, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5$3$1, 8bv64), Gamma_R30);
    assume {:captureState "2072$2"} true;
    R29, Gamma_R29 := bvadd64(R31, 32bv64), Gamma_R31;
    R8, Gamma_R8 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 4bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 4bv64), Gamma_R8);
    assume {:captureState "2084$0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64), true);
    assume {:captureState "2088$0"} true;
    R0, Gamma_R0 := 1bv64, true;
    R30, Gamma_R30 := 2100bv64, true;
    call FUN_680();
    goto $main$__1__$tUCvozcRRoOvSNkfyBzGow;
  $main$__1__$tUCvozcRRoOvSNkfyBzGow:
    assume {:captureState "$main$__1__$tUCvozcRRoOvSNkfyBzGow"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R0);
    assume {:captureState "2100$0"} true;
    R0, Gamma_R0 := 4bv64, true;
    R30, Gamma_R30 := 2112bv64, true;
    call FUN_680();
    goto $main$__2__$~rbIOEybSQ2ZVy7pglbk3Q;
  $main$__2__$~rbIOEybSQ2ZVy7pglbk3Q:
    assume {:captureState "$main$__2__$~rbIOEybSQ2ZVy7pglbk3Q"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 8bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R0);
    assume {:captureState "2112$0"} true;
    R9, Gamma_R9 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R8, Gamma_R8 := 65bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store8_le(mem, R9, R8[8:0]), gamma_store8(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "2124$0"} true;
    R9, Gamma_R9 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R8, Gamma_R8 := 42bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "2136$0"} true;
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    call rely();
    R1, Gamma_R1 := zero_extend32_32(zero_extend24_8(memory_load8_le(mem, R8))), (gamma_load8(Gamma_mem, R8) || L(mem, R8));
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2236bv64), Gamma_R0;
    R30, Gamma_R30 := 2160bv64, true;
    call FUN_6c0();
    goto $main$__3__$ioncN2xEQpKeAoUViDvFEQ;
  $main$__3__$ioncN2xEQpKeAoUViDvFEQ:
    assume {:captureState "$main$__3__$ioncN2xEQpKeAoUViDvFEQ"} true;
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    call rely();
    R1, Gamma_R1 := zero_extend32_32(memory_load32_le(mem, R8)), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2253bv64), Gamma_R0;
    R30, Gamma_R30 := 2180bv64, true;
    call FUN_6c0();
    goto $main$__4__$RDsizvM6Rs2uP1PoNQRqUw;
  $main$__4__$RDsizvM6Rs2uP1PoNQRqUw:
    assume {:captureState "$main$__4__$RDsizvM6Rs2uP1PoNQRqUw"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R30, Gamma_R30 := 2188bv64, true;
    call FUN_6b0();
    goto $main$__5__$XLbDejiVSoaQEuwh3~~Wuw;
  $main$__5__$XLbDejiVSoaQEuwh3~~Wuw:
    assume {:captureState "$main$__5__$XLbDejiVSoaQEuwh3~~Wuw"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := 2196bv64, true;
    call FUN_6b0();
    goto $main$__6__$_atEl4xoTOCpT5EUBgYVEg;
  $main$__6__$_atEl4xoTOCpT5EUBgYVEg:
    assume {:captureState "$main$__6__$_atEl4xoTOCpT5EUBgYVEg"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 4bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 4bv64));
    Cse0__5$5$1, Gamma_Cse0__5$5$1 := bvadd64(R31, 32bv64), Gamma_R31;
    R29, Gamma_R29 := memory_load64_le(stack, Cse0__5$5$1), gamma_load64(Gamma_stack, Cse0__5$5$1);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(Cse0__5$5$1, 8bv64)), gamma_load64(Gamma_stack, bvadd64(Cse0__5$5$1, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 48bv64), Gamma_R31;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

procedure FUN_6b0();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free requires (memory_load8_le(mem, 2264bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2265bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2266bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2267bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2268bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le(mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation FUN_6b0()
{
  $FUN_6b0$__0__$anzTk9j8RqWD4tIwhKfzRQ:
    assume {:captureState "$FUN_6b0$__0__$anzTk9j8RqWD4tIwhKfzRQ"} true;
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, bvadd64(R16, 40bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 40bv64)) || L(mem, bvadd64(R16, 40bv64)));
    R16, Gamma_R16 := bvadd64(R16, 40bv64), Gamma_R16;
    call #free();
    assume false;
}

procedure FUN_680();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free requires (memory_load8_le(mem, 2264bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2265bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2266bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2267bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2268bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le(mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation FUN_680()
{
  $FUN_680$__0__$tdGxah9RStWBBxOs4YOZUA:
    assume {:captureState "$FUN_680$__0__$tdGxah9RStWBBxOs4YOZUA"} true;
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, bvadd64(R16, 16bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 16bv64)) || L(mem, bvadd64(R16, 16bv64)));
    R16, Gamma_R16 := bvadd64(R16, 16bv64), Gamma_R16;
    call malloc();
    assume false;
}

procedure FUN_6c0();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free requires (memory_load8_le(mem, 2264bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2265bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2266bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2267bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2268bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le(mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation FUN_6c0()
{
  $FUN_6c0$__0__$Buk7BXt9RGSvhsDcbjEctg:
    assume {:captureState "$FUN_6c0$__0__$Buk7BXt9RGSvhsDcbjEctg"} true;
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, bvadd64(R16, 48bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 48bv64)) || L(mem, bvadd64(R16, 48bv64)));
    R16, Gamma_R16 := bvadd64(R16, 48bv64), Gamma_R16;
    call printf();
    assume false;
}

procedure #free();
  free requires (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free requires (memory_load8_le(mem, 2264bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2265bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2266bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2267bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2268bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le(mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure malloc();
  free requires (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free requires (memory_load8_le(mem, 2264bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2265bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2266bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2267bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2268bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le(mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure printf();
  free requires (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free requires (memory_load8_le(mem, 2264bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2265bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2266bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2267bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2268bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le(mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

