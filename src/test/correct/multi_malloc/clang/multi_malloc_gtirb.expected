var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R1: bool;
var {:extern} $Gamma_R16: bool;
var {:extern} $Gamma_R17: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_R9: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R1: bv64;
var {:extern} $R16: bv64;
var {:extern} $R17: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $R8: bv64;
var {:extern} $R9: bv64;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $_DYNAMIC_addr: bv64;
axiom ($_DYNAMIC_addr == 69080bv64);
const {:extern} $_GLOBAL_OFFSET_TABLE__addr: bv64;
axiom ($_GLOBAL_OFFSET_TABLE__addr == 69560bv64);
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2232bv64);
const {:extern} $__FRAME_END___addr: bv64;
axiom ($__FRAME_END___addr == 2532bv64);
const {:extern} $__abi_tag_addr: bv64;
axiom ($__abi_tag_addr == 632bv64);
const {:extern} $__do_global_dtors_aux_fini_array_entry_addr: bv64;
axiom ($__do_global_dtors_aux_fini_array_entry_addr == 69072bv64);
const {:extern} $__frame_dummy_init_array_entry_addr: bv64;
axiom ($__frame_dummy_init_array_entry_addr == 69064bv64);
const {:extern} $completed.0_addr: bv64;
axiom ($completed.0_addr == 69704bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_load8(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  #gammaMap[#index]
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} gamma_store8(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_load8_le(#memory: [bv64]bv8, #index: bv64) returns (bv8) {
  #memory[#index]
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

function {:extern} memory_store8_le(#memory: [bv64]bv8, #index: bv64, #value: bv8) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 24"} zero_extend24_8(bv8) returns (bv32);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load64_le($mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le($mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le($mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le($mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le($mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le($mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le($mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le($mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le($mem, 69696bv64) == 69696bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$malloc();
  free requires (memory_load64_le($mem, 2232bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le($mem, 2240bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le($mem, 2248bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le($mem, 2256bv64) == 4211825664634808608bv64);
  free requires (memory_load8_le($mem, 2264bv64) == 32bv8);
  free requires (memory_load8_le($mem, 2265bv64) == 37bv8);
  free requires (memory_load8_le($mem, 2266bv64) == 100bv8);
  free requires (memory_load8_le($mem, 2267bv64) == 10bv8);
  free requires (memory_load8_le($mem, 2268bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le($mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le($mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le($mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le($mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le($mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le($mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le($mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le($mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le($mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le($mem, 69696bv64) == 69696bv64);

procedure p$#free();
  free requires (memory_load64_le($mem, 2232bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le($mem, 2240bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le($mem, 2248bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le($mem, 2256bv64) == 4211825664634808608bv64);
  free requires (memory_load8_le($mem, 2264bv64) == 32bv8);
  free requires (memory_load8_le($mem, 2265bv64) == 37bv8);
  free requires (memory_load8_le($mem, 2266bv64) == 100bv8);
  free requires (memory_load8_le($mem, 2267bv64) == 10bv8);
  free requires (memory_load8_le($mem, 2268bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le($mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le($mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le($mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le($mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le($mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le($mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le($mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le($mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le($mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le($mem, 69696bv64) == 69696bv64);

procedure p$printf();
  free requires (memory_load64_le($mem, 2232bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le($mem, 2240bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le($mem, 2248bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le($mem, 2256bv64) == 4211825664634808608bv64);
  free requires (memory_load8_le($mem, 2264bv64) == 32bv8);
  free requires (memory_load8_le($mem, 2265bv64) == 37bv8);
  free requires (memory_load8_le($mem, 2266bv64) == 100bv8);
  free requires (memory_load8_le($mem, 2267bv64) == 10bv8);
  free requires (memory_load8_le($mem, 2268bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le($mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le($mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le($mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le($mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le($mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le($mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le($mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le($mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le($mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le($mem, 69696bv64) == 69696bv64);

procedure p$main_2068();
  modifies $Gamma_R0, $Gamma_R1, $Gamma_R16, $Gamma_R17, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_R8, $Gamma_R9, $Gamma_mem, $Gamma_stack, $R0, $R1, $R16, $R17, $R29, $R30, $R31, $R8, $R9, $mem, $stack;
  free requires (memory_load64_le($mem, 69688bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69696bv64) == 69696bv64);
  free requires (memory_load64_le($mem, 2232bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le($mem, 2240bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le($mem, 2248bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le($mem, 2256bv64) == 4211825664634808608bv64);
  free requires (memory_load8_le($mem, 2264bv64) == 32bv8);
  free requires (memory_load8_le($mem, 2265bv64) == 37bv8);
  free requires (memory_load8_le($mem, 2266bv64) == 100bv8);
  free requires (memory_load8_le($mem, 2267bv64) == 10bv8);
  free requires (memory_load8_le($mem, 2268bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le($mem, 69696bv64) == 69696bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load64_le($mem, 2232bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le($mem, 2240bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le($mem, 2248bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le($mem, 2256bv64) == 4211825664634808608bv64);
  free ensures (memory_load8_le($mem, 2264bv64) == 32bv8);
  free ensures (memory_load8_le($mem, 2265bv64) == 37bv8);
  free ensures (memory_load8_le($mem, 2266bv64) == 100bv8);
  free ensures (memory_load8_le($mem, 2267bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2268bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le($mem, 69696bv64) == 69696bv64);

implementation p$main_2068()
{
  var #Cse0__5_3: bv64;
  var #Cse0__5_4: bv64;
  var #Gamma_Cse0__5_3: bool;
  var #Gamma_Cse0__5_4: bool;
  var #Gamma_load0: bool;
  var #Gamma_load1: bool;
  var #Gamma_load10: bool;
  var #Gamma_load11: bool;
  var #Gamma_load12: bool;
  var #Gamma_load13: bool;
  var #Gamma_load14: bool;
  var #Gamma_load15: bool;
  var #Gamma_load16: bool;
  var #Gamma_load17: bool;
  var #Gamma_load18: bool;
  var #Gamma_load31: bool;
  var #Gamma_load8: bool;
  var #Gamma_load9: bool;
  var #load0: bv64;
  var #load1: bv64;
  var #load10: bv64;
  var #load11: bv64;
  var #load12: bv64;
  var #load13: bv32;
  var #load14: bv64;
  var #load15: bv64;
  var #load16: bv64;
  var #load17: bv8;
  var #load18: bv64;
  var #load31: bv64;
  var #load8: bv64;
  var #load9: bv32;
  b#main_entry:
    assume {:captureState "main_entry (rJrwEHH7Q82yFH8R8ikgag==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551568bv64), $Gamma_R31;
    #Cse0__5_4, #Gamma_Cse0__5_4 := bvadd64($R31, 32bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_4, $R29), gamma_store64($Gamma_stack, #Cse0__5_4, $Gamma_R29);
    assume {:captureState "2072_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_4, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_4, 8bv64), $Gamma_R30);
    assume {:captureState "2072_2"} true;
    $R29, $Gamma_R29 := bvadd64($R31, 32bv64), $Gamma_R31;
    $R8, $Gamma_R8 := 0bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 4bv64), $R8[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 4bv64), $Gamma_R8);
    assume {:captureState "2084_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R29, 18446744073709551612bv64), 0bv32), gamma_store32($Gamma_stack, bvadd64($R29, 18446744073709551612bv64), true);
    assume {:captureState "2088_0"} true;
    $R0, $Gamma_R0 := 1bv64, true;
    $R30, $Gamma_R30 := 2100bv64, true;
    goto b#FUN_680_entry_713;
  b#FUN_680_entry_713:
    assume {:captureState "FUN_680_entry_713"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load1, #Gamma_load1 := memory_load64_le($mem, bvadd64($R16, 16bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 16bv64)) || L($mem, bvadd64($R16, 16bv64)));
    $R17, $Gamma_R17 := #load1, #Gamma_load1;
    $R16, $Gamma_R16 := bvadd64($R16, 16bv64), $Gamma_R16;
    call p$malloc();
    goto b#FUN_680_basil_return_1_714;
  b#FUN_680_basil_return_1_714:
    assume {:captureState "FUN_680_basil_return_1_714"} true;
    goto b#_inlineret_8;
  b#_inlineret_8:
    assume {:captureState "_inlineret_8 (rJrwEHH7Q82yFH8R8ikgag==)"} true;
    goto b#main_13;
  b#main_13:
    assume {:captureState "main_13 (tUCvozcRRoOvSNkfyBzGow==)"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 16bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 16bv64), $Gamma_R0);
    assume {:captureState "2100_0"} true;
    $R0, $Gamma_R0 := 4bv64, true;
    $R30, $Gamma_R30 := 2112bv64, true;
    goto b#FUN_680_entry_711;
  b#FUN_680_entry_711:
    assume {:captureState "FUN_680_entry_711"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load1, #Gamma_load1 := memory_load64_le($mem, bvadd64($R16, 16bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 16bv64)) || L($mem, bvadd64($R16, 16bv64)));
    $R17, $Gamma_R17 := #load1, #Gamma_load1;
    $R16, $Gamma_R16 := bvadd64($R16, 16bv64), $Gamma_R16;
    call p$malloc();
    goto b#FUN_680_basil_return_1_712;
  b#FUN_680_basil_return_1_712:
    assume {:captureState "FUN_680_basil_return_1_712"} true;
    goto b#_inlineret_7;
  b#_inlineret_7:
    assume {:captureState "_inlineret_7 (tUCvozcRRoOvSNkfyBzGow==)"} true;
    goto b#main_11;
  b#main_11:
    assume {:captureState "main_11 (+rbIOEybSQ2ZVy7pglbk3Q==)"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 8bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 8bv64), $Gamma_R0);
    assume {:captureState "2112_0"} true;
    #load14, #Gamma_load14 := memory_load64_le($stack, bvadd64($R31, 16bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 16bv64));
    $R9, $Gamma_R9 := #load14, #Gamma_load14;
    $R8, $Gamma_R8 := 65bv64, true;
    call p$rely();
    assert (L($mem, $R9) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store8_le($mem, $R9, $R8[8:0]), gamma_store8($Gamma_mem, $R9, $Gamma_R8);
    assume {:captureState "2124_0"} true;
    #load15, #Gamma_load15 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R9, $Gamma_R9 := #load15, #Gamma_load15;
    $R8, $Gamma_R8 := 42bv64, true;
    call p$rely();
    assert (L($mem, $R9) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store32_le($mem, $R9, $R8[32:0]), gamma_store32($Gamma_mem, $R9, $Gamma_R8);
    assume {:captureState "2136_0"} true;
    #load16, #Gamma_load16 := memory_load64_le($stack, bvadd64($R31, 16bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 16bv64));
    $R8, $Gamma_R8 := #load16, #Gamma_load16;
    call p$rely();
    #load17, #Gamma_load17 := memory_load8_le($mem, $R8), (gamma_load8($Gamma_mem, $R8) || L($mem, $R8));
    $R1, $Gamma_R1 := zero_extend32_32(zero_extend24_8(#load17)), #Gamma_load17;
    $R0, $Gamma_R0 := 0bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 2236bv64), $Gamma_R0;
    $R30, $Gamma_R30 := 2160bv64, true;
    goto b#FUN_6c0_entry_705;
  b#FUN_6c0_entry_705:
    assume {:captureState "FUN_6c0_entry_705"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load31, #Gamma_load31 := memory_load64_le($mem, bvadd64($R16, 48bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 48bv64)) || L($mem, bvadd64($R16, 48bv64)));
    $R17, $Gamma_R17 := #load31, #Gamma_load31;
    $R16, $Gamma_R16 := bvadd64($R16, 48bv64), $Gamma_R16;
    call p$printf();
    goto b#FUN_6c0_basil_return_1_706;
  b#FUN_6c0_basil_return_1_706:
    assume {:captureState "FUN_6c0_basil_return_1_706"} true;
    goto b#_inlineret_4;
  b#_inlineret_4:
    assume {:captureState "_inlineret_4 (+rbIOEybSQ2ZVy7pglbk3Q==)"} true;
    goto b#main_9;
  b#main_9:
    assume {:captureState "main_9 (ioncN2xEQpKeAoUViDvFEQ==)"} true;
    #load12, #Gamma_load12 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R8, $Gamma_R8 := #load12, #Gamma_load12;
    call p$rely();
    #load13, #Gamma_load13 := memory_load32_le($mem, $R8), (gamma_load32($Gamma_mem, $R8) || L($mem, $R8));
    $R1, $Gamma_R1 := zero_extend32_32(#load13), #Gamma_load13;
    $R0, $Gamma_R0 := 0bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 2253bv64), $Gamma_R0;
    $R30, $Gamma_R30 := 2180bv64, true;
    goto b#FUN_6c0_entry_703;
  b#FUN_6c0_entry_703:
    assume {:captureState "FUN_6c0_entry_703"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load31, #Gamma_load31 := memory_load64_le($mem, bvadd64($R16, 48bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 48bv64)) || L($mem, bvadd64($R16, 48bv64)));
    $R17, $Gamma_R17 := #load31, #Gamma_load31;
    $R16, $Gamma_R16 := bvadd64($R16, 48bv64), $Gamma_R16;
    call p$printf();
    goto b#FUN_6c0_basil_return_1_704;
  b#FUN_6c0_basil_return_1_704:
    assume {:captureState "FUN_6c0_basil_return_1_704"} true;
    goto b#_inlineret_3;
  b#_inlineret_3:
    assume {:captureState "_inlineret_3 (ioncN2xEQpKeAoUViDvFEQ==)"} true;
    goto b#main_7;
  b#main_7:
    assume {:captureState "main_7 (RDsizvM6Rs2uP1PoNQRqUw==)"} true;
    #load8, #Gamma_load8 := memory_load64_le($stack, bvadd64($R31, 16bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 16bv64));
    $R0, $Gamma_R0 := #load8, #Gamma_load8;
    $R30, $Gamma_R30 := 2188bv64, true;
    goto b#FUN_6b0_entry_709;
  b#FUN_6b0_entry_709:
    assume {:captureState "FUN_6b0_entry_709"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load0, #Gamma_load0 := memory_load64_le($mem, bvadd64($R16, 40bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 40bv64)) || L($mem, bvadd64($R16, 40bv64)));
    $R17, $Gamma_R17 := #load0, #Gamma_load0;
    $R16, $Gamma_R16 := bvadd64($R16, 40bv64), $Gamma_R16;
    call p$#free();
    goto b#FUN_6b0_basil_return_1_710;
  b#FUN_6b0_basil_return_1_710:
    assume {:captureState "FUN_6b0_basil_return_1_710"} true;
    goto b#_inlineret_6;
  b#_inlineret_6:
    assume {:captureState "_inlineret_6 (RDsizvM6Rs2uP1PoNQRqUw==)"} true;
    goto b#main_5;
  b#main_5:
    assume {:captureState "main_5 (XLbDejiVSoaQEuwh3++Wuw==)"} true;
    #load18, #Gamma_load18 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R0, $Gamma_R0 := #load18, #Gamma_load18;
    $R30, $Gamma_R30 := 2196bv64, true;
    goto b#FUN_6b0_entry_707;
  b#FUN_6b0_entry_707:
    assume {:captureState "FUN_6b0_entry_707"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load0, #Gamma_load0 := memory_load64_le($mem, bvadd64($R16, 40bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 40bv64)) || L($mem, bvadd64($R16, 40bv64)));
    $R17, $Gamma_R17 := #load0, #Gamma_load0;
    $R16, $Gamma_R16 := bvadd64($R16, 40bv64), $Gamma_R16;
    call p$#free();
    goto b#FUN_6b0_basil_return_1_708;
  b#FUN_6b0_basil_return_1_708:
    assume {:captureState "FUN_6b0_basil_return_1_708"} true;
    goto b#_inlineret_5;
  b#_inlineret_5:
    assume {:captureState "_inlineret_5 (XLbDejiVSoaQEuwh3++Wuw==)"} true;
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (/atEl4xoTOCpT5EUBgYVEg==)"} true;
    #load9, #Gamma_load9 := memory_load32_le($stack, bvadd64($R31, 4bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 4bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load9), #Gamma_load9;
    #Cse0__5_3, #Gamma_Cse0__5_3 := bvadd64($R31, 32bv64), $Gamma_R31;
    #load10, #Gamma_load10 := memory_load64_le($stack, #Cse0__5_3), gamma_load64($Gamma_stack, #Cse0__5_3);
    $R29, $Gamma_R29 := #load10, #Gamma_load10;
    #load11, #Gamma_load11 := memory_load64_le($stack, bvadd64(#Cse0__5_3, 8bv64)), gamma_load64($Gamma_stack, bvadd64(#Cse0__5_3, 8bv64));
    $R30, $Gamma_R30 := #load11, #Gamma_load11;
    $R31, $Gamma_R31 := bvadd64($R31, 48bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

