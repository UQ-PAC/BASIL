0000071b: program
000006e1: sub __cxa_finalize(__cxa_finalize_result)
0000071c: __cxa_finalize_result :: out u32 = low:32[R0]

00000474:
0000059c: R16 := 0x20000
000005a3: R17 := mem[R16 + 8, el]:u64
000005a9: R16 := R16 + 8
000005ae: call R17 with noreturn

000006e2: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000071d: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002df:
000002e3: #3 := R31 - 0x20
000002e9: mem := mem with [#3, el]:u64 <- R29
000002ef: mem := mem with [#3 + 8, el]:u64 <- R30
000002f3: R31 := #3
000002f9: R29 := R31
00000301: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000306: R19 := 0x20000
0000030d: R0 := pad:64[mem[R19 + 0x48]]
00000313: when 0:0[R0] goto %00000311
00000711: goto %0000043d

0000043d:
00000440: R0 := 0x1F000
00000447: R0 := mem[R0 + 0xFC8, el]:u64
0000044d: when R0 = 0 goto %0000044b
00000712: goto %00000464

00000464:
00000467: R0 := 0x20000
0000046e: R0 := mem[R0 + 0x40, el]:u64
00000473: R30 := 0x830
00000476: call @__cxa_finalize with return %0000044b

0000044b:
00000453: R30 := 0x834
00000455: call @deregister_tm_clones with return %00000457

00000457:
0000045a: R0 := 1
00000462: mem := mem with [R19 + 0x48] <- 7:0[R0]
00000713: goto %00000311

00000311:
0000031b: R19 := mem[R31 + 0x10, el]:u64
00000322: R29 := mem[R31, el]:u64
00000327: R30 := mem[R31 + 8, el]:u64
0000032b: R31 := R31 + 0x20
00000330: call R30 with noreturn

000006e6: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000071e: __libc_start_main_main :: in u64 = R0
0000071f: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000720: __libc_start_main_arg3 :: in out u64 = R2
00000721: __libc_start_main_auxv :: in out u64 = R3
00000722: __libc_start_main_result :: out u32 = low:32[R0]

00000238:
00000586: R16 := 0x20000
0000058d: R17 := mem[R16, el]:u64
00000593: R16 := R16
00000598: call R17 with noreturn

000006e7: sub _fini(_fini_result)
00000723: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000006e8: sub _init(_init_result)
00000724: _init_result :: out u32 = low:32[R0]

00000638:
0000063e: #7 := R31 - 0x10
00000644: mem := mem with [#7, el]:u64 <- R29
0000064a: mem := mem with [#7 + 8, el]:u64 <- R30
0000064e: R31 := #7
00000654: R29 := R31
00000659: R30 := 0x680
0000065b: call @call_weak_fn with return %0000065d

0000065d:
00000662: R29 := mem[R31, el]:u64
00000667: R30 := mem[R31 + 8, el]:u64
0000066b: R31 := R31 + 0x10
00000670: call R30 with noreturn

000006e9: sub _start(_start_result)
00000725: _start_result :: out u32 = low:32[R0]

000001f9:
000001fe: R29 := 0
00000203: R30 := 0
00000209: R5 := R0
00000210: R1 := mem[R31, el]:u64
00000216: R2 := R31 + 8
0000021c: R6 := R31
00000221: R0 := 0x1F000
00000228: R0 := mem[R0 + 0xFD8, el]:u64
0000022d: R3 := 0
00000232: R4 := 0
00000237: R30 := 0x770
0000023a: call @__libc_start_main with return %0000023c

0000023c:
0000023f: R30 := 0x774
00000242: call @abort with return %00000714

00000714:
00000715: call @call_weak_fn with noreturn

000006ec: sub abort()


00000240:
000005de: R16 := 0x20000
000005e5: R17 := mem[R16 + 0x20, el]:u64
000005eb: R16 := R16 + 0x20
000005f0: call R17 with noreturn

000006ed: sub call_weak_fn(call_weak_fn_result)
00000726: call_weak_fn_result :: out u32 = low:32[R0]

00000244:
00000247: R0 := 0x1F000
0000024e: R0 := mem[R0 + 0xFD0, el]:u64
00000254: when R0 = 0 goto %00000252
00000716: goto %000004b4

00000252:
0000025a: call R30 with noreturn

000004b4:
000004b7: goto @__gmon_start__

000004b5:
000005c8: R16 := 0x20000
000005cf: R17 := mem[R16 + 0x18, el]:u64
000005d5: R16 := R16 + 0x18
000005da: call R17 with noreturn

000006ef: sub deregister_tm_clones(deregister_tm_clones_result)
00000727: deregister_tm_clones_result :: out u32 = low:32[R0]

00000260:
00000263: R0 := 0x20000
00000269: R0 := R0 + 0x48
0000026e: R1 := 0x20000
00000274: R1 := R1 + 0x48
0000027a: #1 := ~R0
0000027f: #2 := R1 + ~R0
00000285: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000028b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000028f: ZF := #2 + 1 = 0
00000293: NF := 63:63[#2 + 1]
00000299: when ZF goto %00000297
00000717: goto %00000496

00000496:
00000499: R1 := 0x1F000
000004a0: R1 := mem[R1 + 0xFC0, el]:u64
000004a5: when R1 = 0 goto %00000297
00000718: goto %000004a9

00000297:
0000029f: call R30 with noreturn

000004a9:
000004ad: R16 := R1
000004b2: call R16 with noreturn

000006f2: sub frame_dummy(frame_dummy_result)
00000728: frame_dummy_result :: out u32 = low:32[R0]

00000336:
00000338: call @register_tm_clones with noreturn

000006f3: sub free(free_ptr)
00000729: free_ptr :: in out u64 = R0

00000409:
000005f4: R16 := 0x20000
000005fb: R17 := mem[R16 + 0x28, el]:u64
00000601: R16 := R16 + 0x28
00000606: call R17 with noreturn

000006f4: sub main(main_argc, main_argv, main_result)
0000072a: main_argc :: in u32 = low:32[R0]
0000072b: main_argv :: in out u64 = R1
0000072c: main_result :: out u32 = low:32[R0]

0000033a:
0000033e: R31 := R31 - 0x30
00000344: #4 := R31 + 0x20
0000034a: mem := mem with [#4, el]:u64 <- R29
00000350: mem := mem with [#4 + 8, el]:u64 <- R30
00000356: R29 := R31 + 0x20
0000035b: R8 := 0
00000363: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
0000036a: mem := mem with [R29 - 4, el]:u32 <- 0
0000036f: R0 := 1
00000374: R30 := 0x874
00000377: call @malloc with return %00000379

00000379:
0000037f: mem := mem with [R31 + 0x10, el]:u64 <- R0
00000384: R0 := 4
00000389: R30 := 0x880
0000038b: call @malloc with return %0000038d

0000038d:
00000393: mem := mem with [R31 + 8, el]:u64 <- R0
0000039a: R9 := mem[R31 + 0x10, el]:u64
0000039f: R8 := 0x41
000003a7: mem := mem with [R9] <- 7:0[R8]
000003ae: R9 := mem[R31 + 8, el]:u64
000003b3: R8 := 0x2A
000003bb: mem := mem with [R9, el]:u32 <- 31:0[R8]
000003c2: R8 := mem[R31 + 0x10, el]:u64
000003c9: R1 := pad:64[mem[R8]]
000003ce: R0 := 0
000003d4: R0 := R0 + 0x8FC
000003d9: R30 := 0x8B0
000003dc: call @printf with return %000003de

000003de:
000003e3: R8 := mem[R31 + 8, el]:u64
000003ea: R1 := pad:64[mem[R8, el]:u32]
000003ef: R0 := 0
000003f5: R0 := R0 + 0x90D
000003fa: R30 := 0x8C4
000003fc: call @printf with return %000003fe

000003fe:
00000403: R0 := mem[R31 + 0x10, el]:u64
00000408: R30 := 0x8CC
0000040b: call @free with return %0000040d

0000040d:
00000412: R0 := mem[R31 + 8, el]:u64
00000417: R30 := 0x8D4
00000419: call @free with return %0000041b

0000041b:
00000420: R0 := pad:64[mem[R31 + 4, el]:u32]
00000426: #5 := R31 + 0x20
0000042b: R29 := mem[#5, el]:u64
00000430: R30 := mem[#5 + 8, el]:u64
00000436: R31 := R31 + 0x30
0000043b: call R30 with noreturn

000006f5: sub malloc(malloc_size, malloc_result)
0000072d: malloc_size :: in u64 = R0
0000072e: malloc_result :: out u64 = R0

00000375:
000005b2: R16 := 0x20000
000005b9: R17 := mem[R16 + 0x10, el]:u64
000005bf: R16 := R16 + 0x10
000005c4: call R17 with noreturn

000006f6: sub printf(printf_format, printf_result)
0000072f: printf_format :: in u64 = R0
00000730: printf_result :: out u32 = low:32[R0]

000003da:
0000060a: R16 := 0x20000
00000611: R17 := mem[R16 + 0x30, el]:u64
00000617: R16 := R16 + 0x30
0000061c: call R17 with noreturn

000006f7: sub register_tm_clones(register_tm_clones_result)
00000731: register_tm_clones_result :: out u32 = low:32[R0]

000002a1:
000002a4: R0 := 0x20000
000002aa: R0 := R0 + 0x48
000002af: R1 := 0x20000
000002b5: R1 := R1 + 0x48
000002bc: R1 := R1 + ~R0 + 1
000002c2: R2 := 0.63:63[R1]
000002c9: R1 := R2 + (R1 ~>> 3)
000002cf: R1 := extend:64[63:1[R1]]
000002d5: when R1 = 0 goto %000002d3
00000719: goto %00000478

00000478:
0000047b: R2 := 0x1F000
00000482: R2 := mem[R2 + 0xFE0, el]:u64
00000487: when R2 = 0 goto %000002d3
0000071a: goto %0000048b

000002d3:
000002db: call R30 with noreturn

0000048b:
0000048f: R16 := R2
00000494: call R16 with noreturn
