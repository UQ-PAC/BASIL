00000e4d: program
00000e34: sub __cxa_finalize(__cxa_finalize_result)
00000e4e: __cxa_finalize_result :: out u32 = low:32[R0]

00000ba2:
00000cca: R16 := 0x11000
00000cd1: R17 := mem[R16 + 8, el]:u64
00000cd7: R16 := R16 + 8
00000cdc: call R17 with noreturn

00000e35: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000e4f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000a0c:
00000a10: #3 := R31 - 0x20
00000a16: mem := mem with [#3, el]:u64 <- R29
00000a1c: mem := mem with [#3 + 8, el]:u64 <- R30
00000a20: R31 := #3
00000a26: R29 := R31
00000a2e: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000a33: R19 := 0x11000
00000a3a: R0 := pad:64[mem[R19 + 0x48]]
00000a41: when 31:0[R0] <> 0 goto %00000a3f
00000e36: goto %00000b6b

00000b6b:
00000b6e: R0 := 0x10000
00000b75: R0 := mem[R0 + 0xFC8, el]:u64
00000b7b: when R0 = 0 goto %00000b79
00000e37: goto %00000b92

00000b92:
00000b95: R0 := 0x11000
00000b9c: R0 := mem[R0 + 0x40, el]:u64
00000ba1: R30 := 0x7F0
00000ba4: call @__cxa_finalize with return %00000b79

00000b79:
00000b81: R30 := 0x7F4
00000b83: call @deregister_tm_clones with return %00000b85

00000b85:
00000b88: R0 := 1
00000b90: mem := mem with [R19 + 0x48] <- 7:0[R0]
00000e38: goto %00000a3f

00000a3f:
00000a49: R19 := mem[R31 + 0x10, el]:u64
00000a50: R29 := mem[R31, el]:u64
00000a55: R30 := mem[R31 + 8, el]:u64
00000a59: R31 := R31 + 0x20
00000a5e: call R30 with noreturn

00000e39: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000e50: __libc_start_main_main :: in u64 = R0
00000e51: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000e52: __libc_start_main_arg3 :: in out u64 = R2
00000e53: __libc_start_main_auxv :: in out u64 = R3
00000e54: __libc_start_main_result :: out u32 = low:32[R0]

00000965:
00000cb4: R16 := 0x11000
00000cbb: R17 := mem[R16, el]:u64
00000cc1: R16 := R16
00000cc6: call R17 with noreturn

00000e3a: sub _fini(_fini_result)
00000e55: _fini_result :: out u32 = low:32[R0]

0000074d:
00000753: #0 := R31 - 0x10
00000759: mem := mem with [#0, el]:u64 <- R29
0000075f: mem := mem with [#0 + 8, el]:u64 <- R30
00000763: R31 := #0
00000769: R29 := R31
00000770: R29 := mem[R31, el]:u64
00000775: R30 := mem[R31 + 8, el]:u64
00000779: R31 := R31 + 0x10
0000077e: call R30 with noreturn

00000e3b: sub _init(_init_result)
00000e56: _init_result :: out u32 = low:32[R0]

00000d66:
00000d6c: #7 := R31 - 0x10
00000d72: mem := mem with [#7, el]:u64 <- R29
00000d78: mem := mem with [#7 + 8, el]:u64 <- R30
00000d7c: R31 := #7
00000d82: R29 := R31
00000d87: R30 := 0x638
00000d89: call @call_weak_fn with return %00000d8b

00000d8b:
00000d90: R29 := mem[R31, el]:u64
00000d95: R30 := mem[R31 + 8, el]:u64
00000d99: R31 := R31 + 0x10
00000d9e: call R30 with noreturn

00000e3c: sub _start(_start_result)
00000e57: _start_result :: out u32 = low:32[R0]

00000926:
0000092b: R29 := 0
00000930: R30 := 0
00000936: R5 := R0
0000093d: R1 := mem[R31, el]:u64
00000943: R2 := R31 + 8
00000949: R6 := R31
0000094e: R0 := 0x10000
00000955: R0 := mem[R0 + 0xFD8, el]:u64
0000095a: R3 := 0
0000095f: R4 := 0
00000964: R30 := 0x730
00000967: call @__libc_start_main with return %00000969

00000969:
0000096c: R30 := 0x734
0000096f: call @abort with return %00000e3d

00000e3d:
00000e3e: call @call_weak_fn with noreturn

00000e3f: sub abort()


0000096d:
00000d0c: R16 := 0x11000
00000d13: R17 := mem[R16 + 0x20, el]:u64
00000d19: R16 := R16 + 0x20
00000d1e: call R17 with noreturn

00000e40: sub call_weak_fn(call_weak_fn_result)
00000e58: call_weak_fn_result :: out u32 = low:32[R0]

00000971:
00000974: R0 := 0x10000
0000097b: R0 := mem[R0 + 0xFD0, el]:u64
00000981: when R0 = 0 goto %0000097f
00000e41: goto %00000be2

0000097f:
00000987: call R30 with noreturn

00000be2:
00000be5: goto @__gmon_start__

00000be3:
00000cf6: R16 := 0x11000
00000cfd: R17 := mem[R16 + 0x18, el]:u64
00000d03: R16 := R16 + 0x18
00000d08: call R17 with noreturn

00000e42: sub deregister_tm_clones(deregister_tm_clones_result)
00000e59: deregister_tm_clones_result :: out u32 = low:32[R0]

0000098d:
00000990: R0 := 0x11000
00000996: R0 := R0 + 0x48
0000099b: R1 := 0x11000
000009a1: R1 := R1 + 0x48
000009a7: #1 := ~R0
000009ac: #2 := R1 + ~R0
000009b2: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000009b8: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000009bc: ZF := #2 + 1 = 0
000009c0: NF := 63:63[#2 + 1]
000009c6: when ZF goto %000009c4
00000e43: goto %00000bc4

00000bc4:
00000bc7: R1 := 0x10000
00000bce: R1 := mem[R1 + 0xFC0, el]:u64
00000bd3: when R1 = 0 goto %000009c4
00000e44: goto %00000bd7

000009c4:
000009cc: call R30 with noreturn

00000bd7:
00000bdb: R16 := R1
00000be0: call R16 with noreturn

00000e45: sub frame_dummy(frame_dummy_result)
00000e5a: frame_dummy_result :: out u32 = low:32[R0]

00000a64:
00000a66: call @register_tm_clones with noreturn

00000e46: sub free(free_ptr)
00000e5b: free_ptr :: in out u64 = R0

00000b37:
00000d22: R16 := 0x11000
00000d29: R17 := mem[R16 + 0x28, el]:u64
00000d2f: R16 := R16 + 0x28
00000d34: call R17 with noreturn

00000e47: sub main(main_argc, main_argv, main_result)
00000e5c: main_argc :: in u32 = low:32[R0]
00000e5d: main_argv :: in out u64 = R1
00000e5e: main_result :: out u32 = low:32[R0]

00000a68:
00000a6c: R31 := R31 - 0x30
00000a72: #4 := R31 + 0x20
00000a78: mem := mem with [#4, el]:u64 <- R29
00000a7e: mem := mem with [#4 + 8, el]:u64 <- R30
00000a84: R29 := R31 + 0x20
00000a89: R8 := 0
00000a91: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000a98: mem := mem with [R29 - 4, el]:u32 <- 0
00000a9d: R0 := 1
00000aa2: R30 := 0x834
00000aa5: call @malloc with return %00000aa7

00000aa7:
00000aad: mem := mem with [R31 + 0x10, el]:u64 <- R0
00000ab2: R0 := 4
00000ab7: R30 := 0x840
00000ab9: call @malloc with return %00000abb

00000abb:
00000ac1: mem := mem with [R31 + 8, el]:u64 <- R0
00000ac8: R9 := mem[R31 + 0x10, el]:u64
00000acd: R8 := 0x41
00000ad5: mem := mem with [R9] <- 7:0[R8]
00000adc: R9 := mem[R31 + 8, el]:u64
00000ae1: R8 := 0x2A
00000ae9: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000af0: R8 := mem[R31 + 0x10, el]:u64
00000af7: R1 := pad:64[mem[R8]]
00000afc: R0 := 0
00000b02: R0 := R0 + 0x8BC
00000b07: R30 := 0x870
00000b0a: call @printf with return %00000b0c

00000b0c:
00000b11: R8 := mem[R31 + 8, el]:u64
00000b18: R1 := pad:64[mem[R8, el]:u32]
00000b1d: R0 := 0
00000b23: R0 := R0 + 0x8CD
00000b28: R30 := 0x884
00000b2a: call @printf with return %00000b2c

00000b2c:
00000b31: R0 := mem[R31 + 0x10, el]:u64
00000b36: R30 := 0x88C
00000b39: call @free with return %00000b3b

00000b3b:
00000b40: R0 := mem[R31 + 8, el]:u64
00000b45: R30 := 0x894
00000b47: call @free with return %00000b49

00000b49:
00000b4e: R0 := pad:64[mem[R31 + 4, el]:u32]
00000b54: #5 := R31 + 0x20
00000b59: R29 := mem[#5, el]:u64
00000b5e: R30 := mem[#5 + 8, el]:u64
00000b64: R31 := R31 + 0x30
00000b69: call R30 with noreturn

00000e48: sub malloc(malloc_size, malloc_result)
00000e5f: malloc_size :: in u64 = R0
00000e60: malloc_result :: out u64 = R0

00000aa3:
00000ce0: R16 := 0x11000
00000ce7: R17 := mem[R16 + 0x10, el]:u64
00000ced: R16 := R16 + 0x10
00000cf2: call R17 with noreturn

00000e49: sub printf(printf_format, printf_result)
00000e61: printf_format :: in u64 = R0
00000e62: printf_result :: out u32 = low:32[R0]

00000b08:
00000d38: R16 := 0x11000
00000d3f: R17 := mem[R16 + 0x30, el]:u64
00000d45: R16 := R16 + 0x30
00000d4a: call R17 with noreturn

00000e4a: sub register_tm_clones(register_tm_clones_result)
00000e63: register_tm_clones_result :: out u32 = low:32[R0]

000009ce:
000009d1: R0 := 0x11000
000009d7: R0 := R0 + 0x48
000009dc: R1 := 0x11000
000009e2: R1 := R1 + 0x48
000009e9: R1 := R1 + ~R0 + 1
000009ef: R2 := 0.63:63[R1]
000009f6: R1 := R2 + (R1 ~>> 3)
000009fc: R1 := extend:64[63:1[R1]]
00000a02: when R1 = 0 goto %00000a00
00000e4b: goto %00000ba6

00000ba6:
00000ba9: R2 := 0x10000
00000bb0: R2 := mem[R2 + 0xFE0, el]:u64
00000bb5: when R2 = 0 goto %00000a00
00000e4c: goto %00000bb9

00000a00:
00000a08: call R30 with noreturn

00000bb9:
00000bbd: R16 := R2
00000bc2: call R16 with noreturn
