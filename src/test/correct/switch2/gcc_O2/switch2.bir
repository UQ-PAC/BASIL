00000602: program
000005ce: sub __cxa_finalize(__cxa_finalize_result)
00000603: __cxa_finalize_result :: out u32 = low:32[R0]

00000368:
00000460: R16 := 0x20000
00000467: R17 := mem[R16 + 8, el]:u64
0000046d: R16 := R16 + 8
00000472: call R17 with noreturn

000005cf: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000604: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c6:
000002ca: #3 := R31 - 0x20
000002d0: mem := mem with [#3, el]:u64 <- R29
000002d6: mem := mem with [#3 + 8, el]:u64 <- R30
000002da: R31 := #3
000002e0: R29 := R31
000002e8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ed: R19 := 0x20000
000002f4: R0 := pad:64[mem[R19 + 0x30]]
000002fa: when 0:0[R0] goto %000002f8
000005f8: goto %00000331

00000331:
00000334: R0 := 0x1F000
0000033b: R0 := mem[R0 + 0xFC8, el]:u64
00000341: when R0 = 0 goto %0000033f
000005f9: goto %00000358

00000358:
0000035b: R0 := 0x20000
00000362: R0 := mem[R0 + 0x28, el]:u64
00000367: R30 := 0x730
0000036a: call @__cxa_finalize with return %0000033f

0000033f:
00000347: R30 := 0x734
00000349: call @deregister_tm_clones with return %0000034b

0000034b:
0000034e: R0 := 1
00000356: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005fa: goto %000002f8

000002f8:
00000302: R19 := mem[R31 + 0x10, el]:u64
00000309: R29 := mem[R31, el]:u64
0000030e: R30 := mem[R31 + 8, el]:u64
00000312: R31 := R31 + 0x20
00000317: call R30 with noreturn

000005d3: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000605: __libc_start_main_main :: in u64 = R0
00000606: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000607: __libc_start_main_arg3 :: in out u64 = R2
00000608: __libc_start_main_auxv :: in out u64 = R3
00000609: __libc_start_main_result :: out u32 = low:32[R0]

0000021f:
0000044a: R16 := 0x20000
00000451: R17 := mem[R16, el]:u64
00000457: R16 := R16
0000045c: call R17 with noreturn

000005d4: sub _fini(_fini_result)
0000060a: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005d5: sub _init(_init_result)
0000060b: _init_result :: out u32 = low:32[R0]

0000051b:
00000521: #5 := R31 - 0x10
00000527: mem := mem with [#5, el]:u64 <- R29
0000052d: mem := mem with [#5 + 8, el]:u64 <- R30
00000531: R31 := #5
00000537: R29 := R31
0000053c: R30 := 0x590
0000053e: call @call_weak_fn with return %00000540

00000540:
00000545: R29 := mem[R31, el]:u64
0000054a: R30 := mem[R31 + 8, el]:u64
0000054e: R31 := R31 + 0x10
00000553: call R30 with noreturn

000005d6: sub _start(_start_result)
0000060c: _start_result :: out u32 = low:32[R0]

000001e0:
000001e5: R29 := 0
000001ea: R30 := 0
000001f0: R5 := R0
000001f7: R1 := mem[R31, el]:u64
000001fd: R2 := R31 + 8
00000203: R6 := R31
00000208: R0 := 0x1F000
0000020f: R0 := mem[R0 + 0xFD8, el]:u64
00000214: R3 := 0
00000219: R4 := 0
0000021e: R30 := 0x670
00000221: call @__libc_start_main with return %00000223

00000223:
00000226: R30 := 0x674
00000229: call @abort with return %000005fb

000005fb:
000005fc: call @call_weak_fn with noreturn

000005d9: sub abort()


00000227:
0000048c: R16 := 0x20000
00000493: R17 := mem[R16 + 0x18, el]:u64
00000499: R16 := R16 + 0x18
0000049e: call R17 with noreturn

000005da: sub call_weak_fn(call_weak_fn_result)
0000060d: call_weak_fn_result :: out u32 = low:32[R0]

0000022b:
0000022e: R0 := 0x1F000
00000235: R0 := mem[R0 + 0xFD0, el]:u64
0000023b: when R0 = 0 goto %00000239
000005fd: goto %000003a8

00000239:
00000241: call R30 with noreturn

000003a8:
000003ab: goto @__gmon_start__

000003a9:
00000476: R16 := 0x20000
0000047d: R17 := mem[R16 + 0x10, el]:u64
00000483: R16 := R16 + 0x10
00000488: call R17 with noreturn

000005dc: sub deregister_tm_clones(deregister_tm_clones_result)
0000060e: deregister_tm_clones_result :: out u32 = low:32[R0]

00000247:
0000024a: R0 := 0x20000
00000250: R0 := R0 + 0x30
00000255: R1 := 0x20000
0000025b: R1 := R1 + 0x30
00000261: #1 := ~R0
00000266: #2 := R1 + ~R0
0000026c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000272: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000276: ZF := #2 + 1 = 0
0000027a: NF := 63:63[#2 + 1]
00000280: when ZF goto %0000027e
000005fe: goto %0000038a

0000038a:
0000038d: R1 := 0x1F000
00000394: R1 := mem[R1 + 0xFC0, el]:u64
00000399: when R1 = 0 goto %0000027e
000005ff: goto %0000039d

0000027e:
00000286: call R30 with noreturn

0000039d:
000003a1: R16 := R1
000003a6: call R16 with noreturn

000005df: sub frame_dummy(frame_dummy_result)
0000060f: frame_dummy_result :: out u32 = low:32[R0]

0000031d:
0000031f: call @register_tm_clones with noreturn

000005e0: sub main(main_argc, main_argv, main_result)
00000610: main_argc :: in u32 = low:32[R0]
00000611: main_argv :: in out u64 = R1
00000612: main_result :: out u32 = low:32[R0]

000001bd:
000001c0: call R30 with noreturn

000005e1: sub r(r_result)
00000613: r_result :: out u32 = low:32[R0]

00000327:
0000032a: R0 := 1
0000032f: call R30 with noreturn

000005e2: sub register_tm_clones(register_tm_clones_result)
00000614: register_tm_clones_result :: out u32 = low:32[R0]

00000288:
0000028b: R0 := 0x20000
00000291: R0 := R0 + 0x30
00000296: R1 := 0x20000
0000029c: R1 := R1 + 0x30
000002a3: R1 := R1 + ~R0 + 1
000002a9: R2 := 0.63:63[R1]
000002b0: R1 := R2 + (R1 ~>> 3)
000002b6: R1 := extend:64[63:1[R1]]
000002bc: when R1 = 0 goto %000002ba
00000600: goto %0000036c

0000036c:
0000036f: R2 := 0x1F000
00000376: R2 := mem[R2 + 0xFE0, el]:u64
0000037b: when R2 = 0 goto %000002ba
00000601: goto %0000037f

000002ba:
000002c2: call R30 with noreturn

0000037f:
00000383: R16 := R2
00000388: call R16 with noreturn
