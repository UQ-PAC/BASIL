00000f03: program
00000eeb: sub __cxa_finalize(__cxa_finalize_result)
00000f04: __cxa_finalize_result :: out u32 = low:32[R0]

00000c5b:
00000d53: R16 := 0x11000
00000d5a: R17 := mem[R16 + 8, el]:u64
00000d60: R16 := R16 + 8
00000d65: call R17 with noreturn

00000eec: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000f05: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000a7d:
00000a81: #3 := R31 - 0x20
00000a87: mem := mem with [#3, el]:u64 <- R29
00000a8d: mem := mem with [#3 + 8, el]:u64 <- R30
00000a91: R31 := #3
00000a97: R29 := R31
00000a9f: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000aa4: R19 := 0x11000
00000aab: R0 := pad:64[mem[R19 + 0x30]]
00000ab2: when 31:0[R0] <> 0 goto %00000ab0
00000eed: goto %00000c24

00000c24:
00000c27: R0 := 0x10000
00000c2e: R0 := mem[R0 + 0xFC8, el]:u64
00000c34: when R0 = 0 goto %00000c32
00000eee: goto %00000c4b

00000c4b:
00000c4e: R0 := 0x11000
00000c55: R0 := mem[R0 + 0x28, el]:u64
00000c5a: R30 := 0x6F0
00000c5d: call @__cxa_finalize with return %00000c32

00000c32:
00000c3a: R30 := 0x6F4
00000c3c: call @deregister_tm_clones with return %00000c3e

00000c3e:
00000c41: R0 := 1
00000c49: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000eef: goto %00000ab0

00000ab0:
00000aba: R19 := mem[R31 + 0x10, el]:u64
00000ac1: R29 := mem[R31, el]:u64
00000ac6: R30 := mem[R31 + 8, el]:u64
00000aca: R31 := R31 + 0x20
00000acf: call R30 with noreturn

00000ef0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000f06: __libc_start_main_main :: in u64 = R0
00000f07: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000f08: __libc_start_main_arg3 :: in out u64 = R2
00000f09: __libc_start_main_auxv :: in out u64 = R3
00000f0a: __libc_start_main_result :: out u32 = low:32[R0]

000009d6:
00000d3d: R16 := 0x11000
00000d44: R17 := mem[R16, el]:u64
00000d4a: R16 := R16
00000d4f: call R17 with noreturn

00000ef1: sub _fini(_fini_result)
00000f0b: _fini_result :: out u32 = low:32[R0]

000007a6:
000007ac: #0 := R31 - 0x10
000007b2: mem := mem with [#0, el]:u64 <- R29
000007b8: mem := mem with [#0 + 8, el]:u64 <- R30
000007bc: R31 := #0
000007c2: R29 := R31
000007c9: R29 := mem[R31, el]:u64
000007ce: R30 := mem[R31 + 8, el]:u64
000007d2: R31 := R31 + 0x10
000007d7: call R30 with noreturn

00000ef2: sub _init(_init_result)
00000f0c: _init_result :: out u32 = low:32[R0]

00000e23:
00000e29: #9 := R31 - 0x10
00000e2f: mem := mem with [#9, el]:u64 <- R29
00000e35: mem := mem with [#9 + 8, el]:u64 <- R30
00000e39: R31 := #9
00000e3f: R29 := R31
00000e44: R30 := 0x590
00000e46: call @call_weak_fn with return %00000e48

00000e48:
00000e4d: R29 := mem[R31, el]:u64
00000e52: R30 := mem[R31 + 8, el]:u64
00000e56: R31 := R31 + 0x10
00000e5b: call R30 with noreturn

00000ef3: sub _start(_start_result)
00000f0d: _start_result :: out u32 = low:32[R0]

00000997:
0000099c: R29 := 0
000009a1: R30 := 0
000009a7: R5 := R0
000009ae: R1 := mem[R31, el]:u64
000009b4: R2 := R31 + 8
000009ba: R6 := R31
000009bf: R0 := 0x10000
000009c6: R0 := mem[R0 + 0xFD8, el]:u64
000009cb: R3 := 0
000009d0: R4 := 0
000009d5: R30 := 0x630
000009d8: call @__libc_start_main with return %000009da

000009da:
000009dd: R30 := 0x634
000009e0: call @abort with return %00000ef4

00000ef4:
00000ef5: call @call_weak_fn with noreturn

00000ef6: sub abort()


000009de:
00000d7f: R16 := 0x11000
00000d86: R17 := mem[R16 + 0x18, el]:u64
00000d8c: R16 := R16 + 0x18
00000d91: call R17 with noreturn

00000ef7: sub call_weak_fn(call_weak_fn_result)
00000f0e: call_weak_fn_result :: out u32 = low:32[R0]

000009e2:
000009e5: R0 := 0x10000
000009ec: R0 := mem[R0 + 0xFD0, el]:u64
000009f2: when R0 = 0 goto %000009f0
00000ef8: goto %00000c9b

000009f0:
000009f8: call R30 with noreturn

00000c9b:
00000c9e: goto @__gmon_start__

00000c9c:
00000d69: R16 := 0x11000
00000d70: R17 := mem[R16 + 0x10, el]:u64
00000d76: R16 := R16 + 0x10
00000d7b: call R17 with noreturn

00000ef9: sub deregister_tm_clones(deregister_tm_clones_result)
00000f0f: deregister_tm_clones_result :: out u32 = low:32[R0]

000009fe:
00000a01: R0 := 0x11000
00000a07: R0 := R0 + 0x30
00000a0c: R1 := 0x11000
00000a12: R1 := R1 + 0x30
00000a18: #1 := ~R0
00000a1d: #2 := R1 + ~R0
00000a23: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000a29: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000a2d: ZF := #2 + 1 = 0
00000a31: NF := 63:63[#2 + 1]
00000a37: when ZF goto %00000a35
00000efa: goto %00000c7d

00000c7d:
00000c80: R1 := 0x10000
00000c87: R1 := mem[R1 + 0xFC0, el]:u64
00000c8c: when R1 = 0 goto %00000a35
00000efb: goto %00000c90

00000a35:
00000a3d: call R30 with noreturn

00000c90:
00000c94: R16 := R1
00000c99: call R16 with noreturn

00000efc: sub frame_dummy(frame_dummy_result)
00000f10: frame_dummy_result :: out u32 = low:32[R0]

00000ad5:
00000ad7: call @register_tm_clones with noreturn

00000efd: sub main(main_argc, main_argv, main_result)
00000f11: main_argc :: in u32 = low:32[R0]
00000f12: main_argv :: in out u64 = R1
00000f13: main_result :: out u32 = low:32[R0]

00000ae3:
00000ae7: R31 := R31 - 0x30
00000aed: #4 := R31 + 0x20
00000af3: mem := mem with [#4, el]:u64 <- R29
00000af9: mem := mem with [#4 + 8, el]:u64 <- R30
00000aff: R29 := R31 + 0x20
00000b07: mem := mem with [R29 - 4, el]:u32 <- 31:0[R0]
00000b0f: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000b16: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000b1d: R8 := pad:64[mem[R29 - 4, el]:u32]
00000b23: #5 := 31:0[R8] - 2
00000b28: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] - 1
00000b2d: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFF
00000b31: ZF := #5 + 1 = 0
00000b35: NF := 31:31[#5 + 1]
00000b39: R8 := pad:64[#5 + 1]
00000b41: mem := mem with [R31, el]:u64 <- R8
00000b47: #6 := R8 - 5
00000b4c: VF := extend:65[#6 + 1] <> extend:65[R8] - 4
00000b51: CF := pad:65[#6 + 1] <> pad:65[R8] + 0xFFFFFFFFFFFFFFFC
00000b55: ZF := #6 + 1 = 0
00000b59: NF := 63:63[#6 + 1]
00000b5d: R8 := #6 + 1
00000b6a: when ~(CF & ~ZF) goto %00000b63
00000b6b: goto %00000b66

00000b66:
00000b67: R8 := 1
00000b6d: goto %00000b69

00000b63:
00000b64: R8 := 0
00000b6c: goto %00000b69

00000b69:
00000b73: when 0:0[R8] goto %00000b71
00000efe: goto %00000ba2

00000b71:
00000b79: R8 := 5
00000b81: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000b86: goto %00000b84

00000b84:
00000b8b: #7 := R31 + 0x20
00000b90: R29 := mem[#7, el]:u64
00000b95: R30 := mem[#7 + 8, el]:u64
00000b9b: R31 := R31 + 0x30
00000ba0: call R30 with noreturn

00000ba2:
00000ba7: R11 := mem[R31, el]:u64
00000bac: R10 := 0
00000bb2: R10 := R10 + 0x7D4
00000bb7: R8 := 0x758
00000bbf: R9 := extend:64[mem[R10 + (61:0[R11].0), el]:u32]
00000bc6: R8 := R8 + R9
00000bcb: call R8 with noreturn

00000eff: sub r(r_result)
00000f14: r_result :: out u32 = low:32[R0]

00000ad9:
00000adc: R0 := 1
00000ae1: call R30 with noreturn

00000f00: sub register_tm_clones(register_tm_clones_result)
00000f15: register_tm_clones_result :: out u32 = low:32[R0]

00000a3f:
00000a42: R0 := 0x11000
00000a48: R0 := R0 + 0x30
00000a4d: R1 := 0x11000
00000a53: R1 := R1 + 0x30
00000a5a: R1 := R1 + ~R0 + 1
00000a60: R2 := 0.63:63[R1]
00000a67: R1 := R2 + (R1 ~>> 3)
00000a6d: R1 := extend:64[63:1[R1]]
00000a73: when R1 = 0 goto %00000a71
00000f01: goto %00000c5f

00000c5f:
00000c62: R2 := 0x10000
00000c69: R2 := mem[R2 + 0xFE0, el]:u64
00000c6e: when R2 = 0 goto %00000a71
00000f02: goto %00000c72

00000a71:
00000a79: call R30 with noreturn

00000c72:
00000c76: R16 := R2
00000c7b: call R16 with noreturn
