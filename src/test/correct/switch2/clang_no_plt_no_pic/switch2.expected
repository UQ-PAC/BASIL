var Gamma_R0: bool;
var Gamma_R1: bool;
var Gamma_R10: bool;
var Gamma_R11: bool;
var Gamma_R29: bool;
var Gamma_R30: bool;
var Gamma_R31: bool;
var Gamma_R8: bool;
var Gamma_R9: bool;
var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var R0: bv64;
var R1: bv64;
var R10: bv64;
var R11: bv64;
var R29: bv64;
var R30: bv64;
var R31: bv64;
var R8: bv64;
var R9: bv64;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvadd"} bvadd65(bv65, bv65) returns (bv65);
function {:bvbuiltin "bvand"} bvand1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp64(bv64, bv64) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp65(bv65, bv65) returns (bv1);
function {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "sign_extend 1"} sign_extend1_64(bv64) returns (bv65);
function {:bvbuiltin "sign_extend 32"} sign_extend32_32(bv32) returns (bv64);
function {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:bvbuiltin "zero_extend 1"} zero_extend1_64(bv64) returns (bv65);
function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure main()
  modifies Gamma_R10, Gamma_R11, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_stack, R10, R11, R29, R30, R31, R8, R9, stack;
  requires (Gamma_R0 == true);
  free requires (memory_load8_le(mem, 2000bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2001bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2002bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2003bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2004bv64) == 28bv8);
  free requires (memory_load8_le(mem, 2005bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2006bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2007bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2008bv64) == 40bv8);
  free requires (memory_load8_le(mem, 2009bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2010bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2011bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2012bv64) == 16bv8);
  free requires (memory_load8_le(mem, 2013bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2014bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2015bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2016bv64) == 52bv8);
  free requires (memory_load8_le(mem, 2017bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2018bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2019bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2020bv64) == 64bv8);
  free requires (memory_load8_le(mem, 2021bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2022bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2023bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69560bv64) == 216bv8);
  free requires (memory_load8_le(mem, 69561bv64) == 13bv8);
  free requires (memory_load8_le(mem, 69562bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69563bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69564bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69565bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69566bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69567bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69568bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69569bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69570bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69571bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69572bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69573bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69574bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69575bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69576bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69577bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69578bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69579bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69580bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69581bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69582bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69583bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69584bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69585bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69586bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69587bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69588bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69589bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69590bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69591bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69592bv64) == 28bv8);
  free requires (memory_load8_le(mem, 69593bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69594bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69600bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69601bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69602bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69603bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69604bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69605bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69606bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69607bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69664bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69665bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69666bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69667bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69668bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69669bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69670bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69671bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69672bv64) == 40bv8);
  free requires (memory_load8_le(mem, 69673bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69674bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
{
  var #4: bv64;
  var #5: bv32;
  var #6: bv64;
  var #7: bv64;
  var CF: bv1;
  var Gamma_#4: bool;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  var Gamma_#7: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var VF: bv1;
  var ZF: bv1;
  lmain:
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551568bv64), Gamma_R31;
    #4, Gamma_#4 := bvadd64(R31, 32bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #4, R29), gamma_store64(Gamma_stack, #4, Gamma_R29);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#4, 8bv64), Gamma_R30);
    R29, Gamma_R29 := bvadd64(R31, 32bv64), Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551612bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64), Gamma_R0);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R1), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R1);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), true);
    R8, Gamma_R8 := zero_extend32_32(memory_load32_le(stack, bvadd64(R29, 18446744073709551612bv64))), gamma_load32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64));
    #5, Gamma_#5 := bvadd32(R8[32:0], 4294967294bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#5, 1bv32)), bvadd33(sign_extend1_32(R8[32:0]), 8589934591bv33))), (Gamma_R8 && Gamma_#5);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#5, 1bv32)), bvadd33(zero_extend1_32(R8[32:0]), 4294967295bv33))), (Gamma_R8 && Gamma_#5);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#5, 1bv32), 0bv32), Gamma_#5;
    NF, Gamma_NF := bvadd32(#5, 1bv32)[32:31], Gamma_#5;
    R8, Gamma_R8 := zero_extend32_32(bvadd32(#5, 1bv32)), Gamma_#5;
    stack, Gamma_stack := memory_store64_le(stack, R31, R8), gamma_store64(Gamma_stack, R31, Gamma_R8);
    #6, Gamma_#6 := bvadd64(R8, 18446744073709551611bv64), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp65(sign_extend1_64(bvadd64(#6, 1bv64)), bvadd65(sign_extend1_64(R8), 36893488147419103228bv65))), (Gamma_R8 && Gamma_#6);
    CF, Gamma_CF := bvnot1(bvcomp65(zero_extend1_64(bvadd64(#6, 1bv64)), bvadd65(zero_extend1_64(R8), 18446744073709551612bv65))), (Gamma_R8 && Gamma_#6);
    ZF, Gamma_ZF := bvcomp64(bvadd64(#6, 1bv64), 0bv64), Gamma_#6;
    NF, Gamma_NF := bvadd64(#6, 1bv64)[64:63], Gamma_#6;
    R8, Gamma_R8 := bvadd64(#6, 1bv64), Gamma_#6;
    assert (Gamma_ZF && Gamma_CF);
    if ((bvnot1(bvand1(bvcomp1(CF, 1bv1), bvcomp1(ZF, 0bv1))) != 0bv1)) {
      goto l00000b63;
    }
    goto l00000b66;
  l00000b66:
    R8, Gamma_R8 := 1bv64, true;
    goto l00000b69;
  l00000b63:
    R8, Gamma_R8 := 0bv64, true;
    goto l00000b69;
  l00000b69:
    assert Gamma_R8;
    if ((bvcomp1(R8[1:0], 1bv1) != 0bv1)) {
      goto l00000b71;
    }
    goto l00000ba2;
  l00000b71:
    R8, Gamma_R8 := 5bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R8);
    goto l00000b84;
  l00000b84:
    #7, Gamma_#7 := bvadd64(R31, 32bv64), Gamma_R31;
    R29, Gamma_R29 := memory_load64_le(stack, #7), gamma_load64(Gamma_stack, #7);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(#7, 8bv64)), gamma_load64(Gamma_stack, bvadd64(#7, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 48bv64), Gamma_R31;
    return;
  l00000ba2:
    R11, Gamma_R11 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R10, Gamma_R10 := 0bv64, true;
    R10, Gamma_R10 := bvadd64(R10, 2004bv64), Gamma_R10;
    R8, Gamma_R8 := 1880bv64, true;
    R9, Gamma_R9 := sign_extend32_32(memory_load32_le(mem, bvadd64(R10, (R11[62:0] ++ 0bv2)))), (gamma_load32(Gamma_mem, bvadd64(R10, (R11[62:0] ++ 0bv2))) || L(mem, bvadd64(R10, (R11[62:0] ++ 0bv2))));
    R8, Gamma_R8 := bvadd64(R8, R9), (Gamma_R9 && Gamma_R8);
    //UNRESOLVED: call R8
    assume false;
    //no return target
    assume false;
}
