var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2032bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2033bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2034bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1820bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure r();
  modifies Gamma_R0, R0;
  free requires (memory_load8_le(mem, 2032bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2033bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2034bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2035bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1820bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2032bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2033bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2034bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1820bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation r()
{
  $r$__0__$jiAljXZkTYuIn0jSfwtUIg:
    assume {:captureState "$r$__0__$jiAljXZkTYuIn0jSfwtUIg"} true;
    R0, Gamma_R0 := 1bv64, true;
    goto r_basil_return;
  r_basil_return:
    assume {:captureState "r_basil_return"} true;
    return;
}

procedure main();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_VF, Gamma_ZF, Gamma_stack, NF, R0, R29, R30, R31, VF, ZF, stack;
  requires (Gamma_R0 == true);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 2032bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2033bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2034bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2035bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1820bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 2032bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2033bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2034bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1820bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main()
{
  var Cse0__5$0$1: bv32;
  var Cse0__5$10$1: bv32;
  var Cse0__5$11$1: bv32;
  var Cse0__5$14$1: bv32;
  var Cse0__5$4$1: bv32;
  var Cse0__5$5$1: bv32;
  var Cse0__5$6$0: bv64;
  var Cse0__5$6$6: bv32;
  var Cse0__5$7$1: bv32;
  var Gamma_Cse0__5$0$1: bool;
  var Gamma_Cse0__5$10$1: bool;
  var Gamma_Cse0__5$11$1: bool;
  var Gamma_Cse0__5$14$1: bool;
  var Gamma_Cse0__5$4$1: bool;
  var Gamma_Cse0__5$5$1: bool;
  var Gamma_Cse0__5$6$0: bool;
  var Gamma_Cse0__5$6$6: bool;
  var Gamma_Cse0__5$7$1: bool;
  $main$__0__$DkwIKY6HRHOnyEztJs9JqA:
    assume {:captureState "$main$__0__$DkwIKY6HRHOnyEztJs9JqA"} true;
    Cse0__5$6$0, Gamma_Cse0__5$6$0 := bvadd64(R31, 18446744073709551568bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5$6$0, R29), gamma_store64(Gamma_stack, Cse0__5$6$0, Gamma_R29);
    assume {:captureState "1820$1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5$6$0, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5$6$0, 8bv64), Gamma_R30);
    assume {:captureState "1820$2"} true;
    R31, Gamma_R31 := Cse0__5$6$0, Gamma_Cse0__5$6$0;
    R29, Gamma_R29 := R31, Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    assume {:captureState "1828$0"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R1), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R1);
    assume {:captureState "1832$0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 44bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 44bv64), true);
    assume {:captureState "1836$0"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    Cse0__5$6$6, Gamma_Cse0__5$6$6 := bvadd32(R0[32:0], 4294967291bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5$6$6), bvadd33(sign_extend1_32(R0[32:0]), 8589934587bv33))), (Gamma_R0 && Gamma_Cse0__5$6$6);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$6$6), bvadd33(zero_extend1_32(R0[32:0]), 4294967291bv33))), (Gamma_R0 && Gamma_Cse0__5$6$6);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$6$6, 0bv32), Gamma_Cse0__5$6$6;
    NF, Gamma_NF := Cse0__5$6$6[32:31], Gamma_Cse0__5$6$6;
    assert Gamma_ZF;
    goto $main$__0__$DkwIKY6HRHOnyEztJs9JqA_goto_$main$__14__$T2tZwf97Sx2BUsh_HDjByQ, $main$__0__$DkwIKY6HRHOnyEztJs9JqA_goto_$main$__1__$1pwezPk8QuGrlYp~PNGGbg;
  $main$__1__$1pwezPk8QuGrlYp~PNGGbg:
    assume {:captureState "$main$__1__$1pwezPk8QuGrlYp~PNGGbg"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    Cse0__5$14$1, Gamma_Cse0__5$14$1 := bvadd32(R0[32:0], 4294967291bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5$14$1), bvadd33(sign_extend1_32(R0[32:0]), 8589934587bv33))), (Gamma_R0 && Gamma_Cse0__5$14$1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$14$1), bvadd33(zero_extend1_32(R0[32:0]), 4294967291bv33))), (Gamma_R0 && Gamma_Cse0__5$14$1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$14$1, 0bv32), Gamma_Cse0__5$14$1;
    NF, Gamma_NF := Cse0__5$14$1[32:31], Gamma_Cse0__5$14$1;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto $main$__1__$1pwezPk8QuGrlYp~PNGGbg_goto_$main$__15__$97fJ_aBdTOilFmmjyhSLqg, $main$__1__$1pwezPk8QuGrlYp~PNGGbg_goto_$main$__2__$Svj~BLOQQD~_5~X1HDfNUA;
  $main$__2__$Svj~BLOQQD~_5~X1HDfNUA:
    assume {:captureState "$main$__2__$Svj~BLOQQD~_5~X1HDfNUA"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    Cse0__5$4$1, Gamma_Cse0__5$4$1 := bvadd32(R0[32:0], 4294967292bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5$4$1), bvadd33(sign_extend1_32(R0[32:0]), 8589934588bv33))), (Gamma_R0 && Gamma_Cse0__5$4$1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$4$1), bvadd33(zero_extend1_32(R0[32:0]), 4294967292bv33))), (Gamma_R0 && Gamma_Cse0__5$4$1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$4$1, 0bv32), Gamma_Cse0__5$4$1;
    NF, Gamma_NF := Cse0__5$4$1[32:31], Gamma_Cse0__5$4$1;
    assert Gamma_ZF;
    goto $main$__2__$Svj~BLOQQD~_5~X1HDfNUA_goto_$main$__13__$MIfN1CiLSGiY5bRWsJEFKg, $main$__2__$Svj~BLOQQD~_5~X1HDfNUA_goto_$main$__3__$XhVPCuSGQYWyBQwci0QhGQ;
  $main$__3__$XhVPCuSGQYWyBQwci0QhGQ:
    assume {:captureState "$main$__3__$XhVPCuSGQYWyBQwci0QhGQ"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    Cse0__5$10$1, Gamma_Cse0__5$10$1 := bvadd32(R0[32:0], 4294967292bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5$10$1), bvadd33(sign_extend1_32(R0[32:0]), 8589934588bv33))), (Gamma_R0 && Gamma_Cse0__5$10$1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$10$1), bvadd33(zero_extend1_32(R0[32:0]), 4294967292bv33))), (Gamma_R0 && Gamma_Cse0__5$10$1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$10$1, 0bv32), Gamma_Cse0__5$10$1;
    NF, Gamma_NF := Cse0__5$10$1[32:31], Gamma_Cse0__5$10$1;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto $main$__3__$XhVPCuSGQYWyBQwci0QhGQ_goto_$main$__15__$97fJ_aBdTOilFmmjyhSLqg, $main$__3__$XhVPCuSGQYWyBQwci0QhGQ_goto_$main$__4__$ozROYt4ORZ2rFuUrd_wcmQ;
  $main$__4__$ozROYt4ORZ2rFuUrd_wcmQ:
    assume {:captureState "$main$__4__$ozROYt4ORZ2rFuUrd_wcmQ"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    Cse0__5$11$1, Gamma_Cse0__5$11$1 := bvadd32(R0[32:0], 4294967293bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5$11$1), bvadd33(sign_extend1_32(R0[32:0]), 8589934589bv33))), (Gamma_R0 && Gamma_Cse0__5$11$1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$11$1), bvadd33(zero_extend1_32(R0[32:0]), 4294967293bv33))), (Gamma_R0 && Gamma_Cse0__5$11$1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$11$1, 0bv32), Gamma_Cse0__5$11$1;
    NF, Gamma_NF := Cse0__5$11$1[32:31], Gamma_Cse0__5$11$1;
    assert Gamma_ZF;
    goto $main$__4__$ozROYt4ORZ2rFuUrd_wcmQ_goto_$main$__9__$8sB5D3reTQmJaReRln8B8g, $main$__4__$ozROYt4ORZ2rFuUrd_wcmQ_goto_$main$__5__$0pcYVoH3TQeOUHdtTWWpZQ;
  $main$__5__$0pcYVoH3TQeOUHdtTWWpZQ:
    assume {:captureState "$main$__5__$0pcYVoH3TQeOUHdtTWWpZQ"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    Cse0__5$7$1, Gamma_Cse0__5$7$1 := bvadd32(R0[32:0], 4294967293bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5$7$1), bvadd33(sign_extend1_32(R0[32:0]), 8589934589bv33))), (Gamma_R0 && Gamma_Cse0__5$7$1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$7$1), bvadd33(zero_extend1_32(R0[32:0]), 4294967293bv33))), (Gamma_R0 && Gamma_Cse0__5$7$1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$7$1, 0bv32), Gamma_Cse0__5$7$1;
    NF, Gamma_NF := Cse0__5$7$1[32:31], Gamma_Cse0__5$7$1;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto $main$__5__$0pcYVoH3TQeOUHdtTWWpZQ_goto_$main$__15__$97fJ_aBdTOilFmmjyhSLqg, $main$__5__$0pcYVoH3TQeOUHdtTWWpZQ_goto_$main$__6__$EfR2nNNXR5WZxoUgciNEjA;
  $main$__6__$EfR2nNNXR5WZxoUgciNEjA:
    assume {:captureState "$main$__6__$EfR2nNNXR5WZxoUgciNEjA"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    Cse0__5$5$1, Gamma_Cse0__5$5$1 := bvadd32(R0[32:0], 4294967295bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5$5$1), bvadd33(sign_extend1_32(R0[32:0]), 8589934591bv33))), (Gamma_R0 && Gamma_Cse0__5$5$1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$5$1), bvadd33(zero_extend1_32(R0[32:0]), 4294967295bv33))), (Gamma_R0 && Gamma_Cse0__5$5$1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$5$1, 0bv32), Gamma_Cse0__5$5$1;
    NF, Gamma_NF := Cse0__5$5$1[32:31], Gamma_Cse0__5$5$1;
    assert Gamma_ZF;
    goto $main$__6__$EfR2nNNXR5WZxoUgciNEjA_goto_$main$__11__$864doKDxT7KtlyZmtZWQQQ, $main$__6__$EfR2nNNXR5WZxoUgciNEjA_goto_$main$__7__$ZGMxlc0_T9~jDxXbj6zMqA;
  $main$__7__$ZGMxlc0_T9~jDxXbj6zMqA:
    assume {:captureState "$main$__7__$ZGMxlc0_T9~jDxXbj6zMqA"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    Cse0__5$0$1, Gamma_Cse0__5$0$1 := bvadd32(R0[32:0], 4294967294bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5$0$1), bvadd33(sign_extend1_32(R0[32:0]), 8589934590bv33))), (Gamma_R0 && Gamma_Cse0__5$0$1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$0$1), bvadd33(zero_extend1_32(R0[32:0]), 4294967294bv33))), (Gamma_R0 && Gamma_Cse0__5$0$1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$0$1, 0bv32), Gamma_Cse0__5$0$1;
    NF, Gamma_NF := Cse0__5$0$1[32:31], Gamma_Cse0__5$0$1;
    assert Gamma_ZF;
    goto $main$__7__$ZGMxlc0_T9~jDxXbj6zMqA_goto_$main$__12__$STK98TZ0ShaKkOYfFyc7OA, $main$__7__$ZGMxlc0_T9~jDxXbj6zMqA_goto_$main$__8__$GYPbgVqISgC9H2Ozc0jV9A;
  $main$__8__$GYPbgVqISgC9H2Ozc0jV9A:
    assume {:captureState "$main$__8__$GYPbgVqISgC9H2Ozc0jV9A"} true;
    goto $main$__15__$97fJ_aBdTOilFmmjyhSLqg;
  $main$__9__$8sB5D3reTQmJaReRln8B8g:
    assume {:captureState "$main$__9__$8sB5D3reTQmJaReRln8B8g"} true;
    R30, Gamma_R30 := 1944bv64, true;
    call r();
    goto $main$__10__$8Omvt_U2RWyREadnXBRVfA;
  $main$__10__$8Omvt_U2RWyREadnXBRVfA:
    assume {:captureState "$main$__10__$8Omvt_U2RWyREadnXBRVfA"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 44bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 44bv64), Gamma_R0);
    assume {:captureState "1944$0"} true;
    goto $main$__11__$864doKDxT7KtlyZmtZWQQQ;
  $main$__11__$864doKDxT7KtlyZmtZWQQQ:
    assume {:captureState "$main$__11__$864doKDxT7KtlyZmtZWQQQ"} true;
    R0, Gamma_R0 := 1bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 44bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 44bv64), Gamma_R0);
    assume {:captureState "1952$0"} true;
    goto $main$__16__$Pv_rI36MSO2oF3mw9heYXA;
  $main$__12__$STK98TZ0ShaKkOYfFyc7OA:
    assume {:captureState "$main$__12__$STK98TZ0ShaKkOYfFyc7OA"} true;
    R0, Gamma_R0 := 2bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 44bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 44bv64), Gamma_R0);
    assume {:captureState "1964$0"} true;
    goto $main$__13__$MIfN1CiLSGiY5bRWsJEFKg;
  $main$__13__$MIfN1CiLSGiY5bRWsJEFKg:
    assume {:captureState "$main$__13__$MIfN1CiLSGiY5bRWsJEFKg"} true;
    R0, Gamma_R0 := 3bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 44bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 44bv64), Gamma_R0);
    assume {:captureState "1972$0"} true;
    goto $main$__16__$Pv_rI36MSO2oF3mw9heYXA;
  $main$__14__$T2tZwf97Sx2BUsh_HDjByQ:
    assume {:captureState "$main$__14__$T2tZwf97Sx2BUsh_HDjByQ"} true;
    R0, Gamma_R0 := 4bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 44bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 44bv64), Gamma_R0);
    assume {:captureState "1984$0"} true;
    goto $main$__15__$97fJ_aBdTOilFmmjyhSLqg;
  $main$__15__$97fJ_aBdTOilFmmjyhSLqg:
    assume {:captureState "$main$__15__$97fJ_aBdTOilFmmjyhSLqg"} true;
    R0, Gamma_R0 := 5bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 44bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 44bv64), Gamma_R0);
    assume {:captureState "1992$0"} true;
    goto $main$__16__$Pv_rI36MSO2oF3mw9heYXA;
  $main$__16__$Pv_rI36MSO2oF3mw9heYXA:
    assume {:captureState "$main$__16__$Pv_rI36MSO2oF3mw9heYXA"} true;
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 48bv64), Gamma_R31;
    goto main_basil_return;
  $main$__7__$ZGMxlc0_T9~jDxXbj6zMqA_goto_$main$__12__$STK98TZ0ShaKkOYfFyc7OA:
    assume {:captureState "$main$__7__$ZGMxlc0_T9~jDxXbj6zMqA_goto_$main$__12__$STK98TZ0ShaKkOYfFyc7OA"} true;
    assume (ZF == 1bv1);
    goto $main$__12__$STK98TZ0ShaKkOYfFyc7OA;
  $main$__7__$ZGMxlc0_T9~jDxXbj6zMqA_goto_$main$__8__$GYPbgVqISgC9H2Ozc0jV9A:
    assume {:captureState "$main$__7__$ZGMxlc0_T9~jDxXbj6zMqA_goto_$main$__8__$GYPbgVqISgC9H2Ozc0jV9A"} true;
    assume (!(ZF == 1bv1));
    goto $main$__8__$GYPbgVqISgC9H2Ozc0jV9A;
  $main$__2__$Svj~BLOQQD~_5~X1HDfNUA_goto_$main$__13__$MIfN1CiLSGiY5bRWsJEFKg:
    assume {:captureState "$main$__2__$Svj~BLOQQD~_5~X1HDfNUA_goto_$main$__13__$MIfN1CiLSGiY5bRWsJEFKg"} true;
    assume (ZF == 1bv1);
    goto $main$__13__$MIfN1CiLSGiY5bRWsJEFKg;
  $main$__2__$Svj~BLOQQD~_5~X1HDfNUA_goto_$main$__3__$XhVPCuSGQYWyBQwci0QhGQ:
    assume {:captureState "$main$__2__$Svj~BLOQQD~_5~X1HDfNUA_goto_$main$__3__$XhVPCuSGQYWyBQwci0QhGQ"} true;
    assume (!(ZF == 1bv1));
    goto $main$__3__$XhVPCuSGQYWyBQwci0QhGQ;
  $main$__6__$EfR2nNNXR5WZxoUgciNEjA_goto_$main$__11__$864doKDxT7KtlyZmtZWQQQ:
    assume {:captureState "$main$__6__$EfR2nNNXR5WZxoUgciNEjA_goto_$main$__11__$864doKDxT7KtlyZmtZWQQQ"} true;
    assume (ZF == 1bv1);
    goto $main$__11__$864doKDxT7KtlyZmtZWQQQ;
  $main$__6__$EfR2nNNXR5WZxoUgciNEjA_goto_$main$__7__$ZGMxlc0_T9~jDxXbj6zMqA:
    assume {:captureState "$main$__6__$EfR2nNNXR5WZxoUgciNEjA_goto_$main$__7__$ZGMxlc0_T9~jDxXbj6zMqA"} true;
    assume (!(ZF == 1bv1));
    goto $main$__7__$ZGMxlc0_T9~jDxXbj6zMqA;
  $main$__0__$DkwIKY6HRHOnyEztJs9JqA_goto_$main$__14__$T2tZwf97Sx2BUsh_HDjByQ:
    assume {:captureState "$main$__0__$DkwIKY6HRHOnyEztJs9JqA_goto_$main$__14__$T2tZwf97Sx2BUsh_HDjByQ"} true;
    assume (ZF == 1bv1);
    goto $main$__14__$T2tZwf97Sx2BUsh_HDjByQ;
  $main$__0__$DkwIKY6HRHOnyEztJs9JqA_goto_$main$__1__$1pwezPk8QuGrlYp~PNGGbg:
    assume {:captureState "$main$__0__$DkwIKY6HRHOnyEztJs9JqA_goto_$main$__1__$1pwezPk8QuGrlYp~PNGGbg"} true;
    assume (!(ZF == 1bv1));
    goto $main$__1__$1pwezPk8QuGrlYp~PNGGbg;
  $main$__5__$0pcYVoH3TQeOUHdtTWWpZQ_goto_$main$__15__$97fJ_aBdTOilFmmjyhSLqg:
    assume {:captureState "$main$__5__$0pcYVoH3TQeOUHdtTWWpZQ_goto_$main$__15__$97fJ_aBdTOilFmmjyhSLqg"} true;
    assume ((NF == VF) && (ZF == 0bv1));
    goto $main$__15__$97fJ_aBdTOilFmmjyhSLqg;
  $main$__5__$0pcYVoH3TQeOUHdtTWWpZQ_goto_$main$__6__$EfR2nNNXR5WZxoUgciNEjA:
    assume {:captureState "$main$__5__$0pcYVoH3TQeOUHdtTWWpZQ_goto_$main$__6__$EfR2nNNXR5WZxoUgciNEjA"} true;
    assume (!((NF == VF) && (ZF == 0bv1)));
    goto $main$__6__$EfR2nNNXR5WZxoUgciNEjA;
  $main$__3__$XhVPCuSGQYWyBQwci0QhGQ_goto_$main$__15__$97fJ_aBdTOilFmmjyhSLqg:
    assume {:captureState "$main$__3__$XhVPCuSGQYWyBQwci0QhGQ_goto_$main$__15__$97fJ_aBdTOilFmmjyhSLqg"} true;
    assume ((NF == VF) && (ZF == 0bv1));
    goto $main$__15__$97fJ_aBdTOilFmmjyhSLqg;
  $main$__3__$XhVPCuSGQYWyBQwci0QhGQ_goto_$main$__4__$ozROYt4ORZ2rFuUrd_wcmQ:
    assume {:captureState "$main$__3__$XhVPCuSGQYWyBQwci0QhGQ_goto_$main$__4__$ozROYt4ORZ2rFuUrd_wcmQ"} true;
    assume (!((NF == VF) && (ZF == 0bv1)));
    goto $main$__4__$ozROYt4ORZ2rFuUrd_wcmQ;
  $main$__4__$ozROYt4ORZ2rFuUrd_wcmQ_goto_$main$__9__$8sB5D3reTQmJaReRln8B8g:
    assume {:captureState "$main$__4__$ozROYt4ORZ2rFuUrd_wcmQ_goto_$main$__9__$8sB5D3reTQmJaReRln8B8g"} true;
    assume (ZF == 1bv1);
    goto $main$__9__$8sB5D3reTQmJaReRln8B8g;
  $main$__4__$ozROYt4ORZ2rFuUrd_wcmQ_goto_$main$__5__$0pcYVoH3TQeOUHdtTWWpZQ:
    assume {:captureState "$main$__4__$ozROYt4ORZ2rFuUrd_wcmQ_goto_$main$__5__$0pcYVoH3TQeOUHdtTWWpZQ"} true;
    assume (!(ZF == 1bv1));
    goto $main$__5__$0pcYVoH3TQeOUHdtTWWpZQ;
  $main$__1__$1pwezPk8QuGrlYp~PNGGbg_goto_$main$__15__$97fJ_aBdTOilFmmjyhSLqg:
    assume {:captureState "$main$__1__$1pwezPk8QuGrlYp~PNGGbg_goto_$main$__15__$97fJ_aBdTOilFmmjyhSLqg"} true;
    assume ((NF == VF) && (ZF == 0bv1));
    goto $main$__15__$97fJ_aBdTOilFmmjyhSLqg;
  $main$__1__$1pwezPk8QuGrlYp~PNGGbg_goto_$main$__2__$Svj~BLOQQD~_5~X1HDfNUA:
    assume {:captureState "$main$__1__$1pwezPk8QuGrlYp~PNGGbg_goto_$main$__2__$Svj~BLOQQD~_5~X1HDfNUA"} true;
    assume (!((NF == VF) && (ZF == 0bv1)));
    goto $main$__2__$Svj~BLOQQD~_5~X1HDfNUA;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

