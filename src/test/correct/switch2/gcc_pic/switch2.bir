000010b3: program
00001090: sub __cxa_finalize(__cxa_finalize_result)
000010b4: __cxa_finalize_result :: out u32 = low:32[R0]

00000df0:
00000ee8: R16 := 0x10000
00000eef: R17 := mem[R16 + 0xFB8, el]:u64
00000ef5: R16 := R16 + 0xFB8
00000efa: call R17 with noreturn

00001091: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000010b5: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000b75:
00000b79: #3 := R31 - 0x20
00000b7f: mem := mem with [#3, el]:u64 <- R29
00000b85: mem := mem with [#3 + 8, el]:u64 <- R30
00000b89: R31 := #3
00000b8f: R29 := R31
00000b97: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000b9c: R19 := 0x11000
00000ba3: R0 := pad:64[mem[R19 + 0x10]]
00000baa: when 31:0[R0] <> 0 goto %00000ba8
00001092: goto %00000db9

00000db9:
00000dbc: R0 := 0x10000
00000dc3: R0 := mem[R0 + 0xFE0, el]:u64
00000dc9: when R0 = 0 goto %00000dc7
00001093: goto %00000de0

00000de0:
00000de3: R0 := 0x11000
00000dea: R0 := mem[R0 + 8, el]:u64
00000def: R30 := 0x6F0
00000df2: call @__cxa_finalize with return %00000dc7

00000dc7:
00000dcf: R30 := 0x6F4
00000dd1: call @deregister_tm_clones with return %00000dd3

00000dd3:
00000dd6: R0 := 1
00000dde: mem := mem with [R19 + 0x10] <- 7:0[R0]
00001094: goto %00000ba8

00000ba8:
00000bb2: R19 := mem[R31 + 0x10, el]:u64
00000bb9: R29 := mem[R31, el]:u64
00000bbe: R30 := mem[R31 + 8, el]:u64
00000bc2: R31 := R31 + 0x20
00000bc7: call R30 with noreturn

00001095: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000010b6: __libc_start_main_main :: in u64 = R0
000010b7: __libc_start_main_arg2 :: in u32 = low:32[R1]
000010b8: __libc_start_main_arg3 :: in out u64 = R2
000010b9: __libc_start_main_auxv :: in out u64 = R3
000010ba: __libc_start_main_result :: out u32 = low:32[R0]

00000ace:
00000ed2: R16 := 0x10000
00000ed9: R17 := mem[R16 + 0xFB0, el]:u64
00000edf: R16 := R16 + 0xFB0
00000ee4: call R17 with noreturn

00001096: sub _fini(_fini_result)
000010bb: _fini_result :: out u32 = low:32[R0]

0000087e:
00000884: #0 := R31 - 0x10
0000088a: mem := mem with [#0, el]:u64 <- R29
00000890: mem := mem with [#0 + 8, el]:u64 <- R30
00000894: R31 := #0
0000089a: R29 := R31
000008a1: R29 := mem[R31, el]:u64
000008a6: R30 := mem[R31 + 8, el]:u64
000008aa: R31 := R31 + 0x10
000008af: call R30 with noreturn

00001097: sub _init(_init_result)
000010bc: _init_result :: out u32 = low:32[R0]

00000fc0:
00000fc6: #14 := R31 - 0x10
00000fcc: mem := mem with [#14, el]:u64 <- R29
00000fd2: mem := mem with [#14 + 8, el]:u64 <- R30
00000fd6: R31 := #14
00000fdc: R29 := R31
00000fe1: R30 := 0x590
00000fe3: call @call_weak_fn with return %00000fe5

00000fe5:
00000fea: R29 := mem[R31, el]:u64
00000fef: R30 := mem[R31 + 8, el]:u64
00000ff3: R31 := R31 + 0x10
00000ff8: call R30 with noreturn

00001098: sub _start(_start_result)
000010bd: _start_result :: out u32 = low:32[R0]

00000a8f:
00000a94: R29 := 0
00000a99: R30 := 0
00000a9f: R5 := R0
00000aa6: R1 := mem[R31, el]:u64
00000aac: R2 := R31 + 8
00000ab2: R6 := R31
00000ab7: R0 := 0x10000
00000abe: R0 := mem[R0 + 0xFF0, el]:u64
00000ac3: R3 := 0
00000ac8: R4 := 0
00000acd: R30 := 0x630
00000ad0: call @__libc_start_main with return %00000ad2

00000ad2:
00000ad5: R30 := 0x634
00000ad8: call @abort with return %00001099

00001099:
0000109a: call @call_weak_fn with noreturn

0000109b: sub abort()


00000ad6:
00000f14: R16 := 0x10000
00000f1b: R17 := mem[R16 + 0xFC8, el]:u64
00000f21: R16 := R16 + 0xFC8
00000f26: call R17 with noreturn

0000109c: sub call_weak_fn(call_weak_fn_result)
000010be: call_weak_fn_result :: out u32 = low:32[R0]

00000ada:
00000add: R0 := 0x10000
00000ae4: R0 := mem[R0 + 0xFE8, el]:u64
00000aea: when R0 = 0 goto %00000ae8
0000109d: goto %00000e30

00000ae8:
00000af0: call R30 with noreturn

00000e30:
00000e33: goto @__gmon_start__

00000e31:
00000efe: R16 := 0x10000
00000f05: R17 := mem[R16 + 0xFC0, el]:u64
00000f0b: R16 := R16 + 0xFC0
00000f10: call R17 with noreturn

0000109e: sub deregister_tm_clones(deregister_tm_clones_result)
000010bf: deregister_tm_clones_result :: out u32 = low:32[R0]

00000af6:
00000af9: R0 := 0x11000
00000aff: R0 := R0 + 0x10
00000b04: R1 := 0x11000
00000b0a: R1 := R1 + 0x10
00000b10: #1 := ~R0
00000b15: #2 := R1 + ~R0
00000b1b: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000b21: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000b25: ZF := #2 + 1 = 0
00000b29: NF := 63:63[#2 + 1]
00000b2f: when ZF goto %00000b2d
0000109f: goto %00000e12

00000e12:
00000e15: R1 := 0x10000
00000e1c: R1 := mem[R1 + 0xFD8, el]:u64
00000e21: when R1 = 0 goto %00000b2d
000010a0: goto %00000e25

00000b2d:
00000b35: call R30 with noreturn

00000e25:
00000e29: R16 := R1
00000e2e: call R16 with noreturn

000010a1: sub frame_dummy(frame_dummy_result)
000010c0: frame_dummy_result :: out u32 = low:32[R0]

00000bcd:
00000bcf: call @register_tm_clones with noreturn

000010a2: sub main(main_argc, main_argv, main_result)
000010c1: main_argc :: in u32 = low:32[R0]
000010c2: main_argv :: in out u64 = R1
000010c3: main_result :: out u32 = low:32[R0]

00000bdb:
00000bdf: #4 := R31 - 0x30
00000be5: mem := mem with [#4, el]:u64 <- R29
00000beb: mem := mem with [#4 + 8, el]:u64 <- R30
00000bef: R31 := #4
00000bf5: R29 := R31
00000bfd: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000c05: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000c0c: mem := mem with [R31 + 0x2C, el]:u32 <- 0
00000c13: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000c19: #5 := 31:0[R0] - 6
00000c1e: VF := extend:33[#5 + 1] <> extend:33[31:0[R0]] - 5
00000c23: CF := pad:33[#5 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFB
00000c27: ZF := #5 + 1 = 0
00000c2b: NF := 31:31[#5 + 1]
00000c31: when ZF goto %00000c2f
000010a3: goto %00000c67

00000c2f:
00000c37: R0 := 4
00000c3f: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
000010a4: goto %00000c41

00000c67:
00000c6c: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000c72: #6 := 31:0[R0] - 6
00000c77: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] - 5
00000c7c: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFB
00000c80: ZF := #6 + 1 = 0
00000c84: NF := 31:31[#6 + 1]
00000c8b: when NF = VF & ~ZF goto %00000c41
000010a5: goto %00000c8f

00000c8f:
00000c94: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000c9a: #7 := 31:0[R0] - 5
00000c9f: VF := extend:33[#7 + 1] <> extend:33[31:0[R0]] - 4
00000ca4: CF := pad:33[#7 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFC
00000ca8: ZF := #7 + 1 = 0
00000cac: NF := 31:31[#7 + 1]
00000cb2: when ZF goto %00000cb0
000010a6: goto %00000cc6

00000cc6:
00000ccb: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000cd1: #8 := 31:0[R0] - 5
00000cd6: VF := extend:33[#8 + 1] <> extend:33[31:0[R0]] - 4
00000cdb: CF := pad:33[#8 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFC
00000cdf: ZF := #8 + 1 = 0
00000ce3: NF := 31:31[#8 + 1]
00000cea: when NF = VF & ~ZF goto %00000c41
000010a7: goto %00000cee

00000cee:
00000cf3: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000cf9: #9 := 31:0[R0] - 4
00000cfe: VF := extend:33[#9 + 1] <> extend:33[31:0[R0]] - 3
00000d03: CF := pad:33[#9 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFD
00000d07: ZF := #9 + 1 = 0
00000d0b: NF := 31:31[#9 + 1]
00000d11: when ZF goto %00000d0f
000010a8: goto %00000d41

00000d0f:
00000d17: R30 := 0x798
00000d19: call @r with return %00000d1b

00000d1b:
00000d21: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
000010a9: goto %00000d23

00000d41:
00000d46: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000d4c: #10 := 31:0[R0] - 4
00000d51: VF := extend:33[#10 + 1] <> extend:33[31:0[R0]] - 3
00000d56: CF := pad:33[#10 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFD
00000d5a: ZF := #10 + 1 = 0
00000d5e: NF := 31:31[#10 + 1]
00000d65: when NF = VF & ~ZF goto %00000c41
000010aa: goto %00000d69

00000d69:
00000d6e: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000d74: #11 := 31:0[R0] - 2
00000d79: VF := extend:33[#11 + 1] <> extend:33[31:0[R0]] - 1
00000d7e: CF := pad:33[#11 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFF
00000d82: ZF := #11 + 1 = 0
00000d86: NF := 31:31[#11 + 1]
00000d8b: when ZF goto %00000d23
000010ab: goto %00000d8f

00000d23:
00000d26: R0 := 1
00000d2e: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000d32: goto %00000c50

00000d8f:
00000d94: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000d9a: #12 := 31:0[R0] - 3
00000d9f: VF := extend:33[#12 + 1] <> extend:33[31:0[R0]] - 2
00000da4: CF := pad:33[#12 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFE
00000da8: ZF := #12 + 1 = 0
00000dac: NF := 31:31[#12 + 1]
00000db1: when ZF goto %00000d34
000010ac: goto %00000db5

00000d34:
00000d37: R0 := 2
00000d3f: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
000010ad: goto %00000cb0

00000cb0:
00000cb8: R0 := 3
00000cc0: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000cc4: goto %00000c50

00000db5:
00000db7: goto %00000c41

00000c41:
00000c44: R0 := 5
00000c4c: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
000010ae: goto %00000c50

00000c50:
00000c57: R29 := mem[R31, el]:u64
00000c5c: R30 := mem[R31 + 8, el]:u64
00000c60: R31 := R31 + 0x30
00000c65: call R30 with noreturn

000010af: sub r(r_result)
000010c4: r_result :: out u32 = low:32[R0]

00000bd1:
00000bd4: R0 := 1
00000bd9: call R30 with noreturn

000010b0: sub register_tm_clones(register_tm_clones_result)
000010c5: register_tm_clones_result :: out u32 = low:32[R0]

00000b37:
00000b3a: R0 := 0x11000
00000b40: R0 := R0 + 0x10
00000b45: R1 := 0x11000
00000b4b: R1 := R1 + 0x10
00000b52: R1 := R1 + ~R0 + 1
00000b58: R2 := 0.63:63[R1]
00000b5f: R1 := R2 + (R1 ~>> 3)
00000b65: R1 := extend:64[63:1[R1]]
00000b6b: when R1 = 0 goto %00000b69
000010b1: goto %00000df4

00000df4:
00000df7: R2 := 0x10000
00000dfe: R2 := mem[R2 + 0xFF8, el]:u64
00000e03: when R2 = 0 goto %00000b69
000010b2: goto %00000e07

00000b69:
00000b71: call R30 with noreturn

00000e07:
00000e0b: R16 := R2
00000e10: call R16 with noreturn
