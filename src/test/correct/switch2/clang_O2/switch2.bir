00000572: program
0000053e: sub __cxa_finalize(__cxa_finalize_result)
00000573: __cxa_finalize_result :: out u32 = low:32[R0]

000002fc:
000003f4: R16 := 0x11000
000003fb: R17 := mem[R16 + 8, el]:u64
00000401: R16 := R16 + 8
00000406: call R17 with noreturn

0000053f: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000574: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000025a:
0000025e: #3 := R31 - 0x20
00000264: mem := mem with [#3, el]:u64 <- R29
0000026a: mem := mem with [#3 + 8, el]:u64 <- R30
0000026e: R31 := #3
00000274: R29 := R31
0000027c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000281: R19 := 0x11000
00000288: R0 := pad:64[mem[R19 + 0x30]]
0000028f: when 31:0[R0] <> 0 goto %0000028d
00000568: goto %000002c5

000002c5:
000002c8: R0 := 0x10000
000002cf: R0 := mem[R0 + 0xFC8, el]:u64
000002d5: when R0 = 0 goto %000002d3
00000569: goto %000002ec

000002ec:
000002ef: R0 := 0x11000
000002f6: R0 := mem[R0 + 0x28, el]:u64
000002fb: R30 := 0x6F0
000002fe: call @__cxa_finalize with return %000002d3

000002d3:
000002db: R30 := 0x6F4
000002dd: call @deregister_tm_clones with return %000002df

000002df:
000002e2: R0 := 1
000002ea: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000056a: goto %0000028d

0000028d:
00000297: R19 := mem[R31 + 0x10, el]:u64
0000029e: R29 := mem[R31, el]:u64
000002a3: R30 := mem[R31 + 8, el]:u64
000002a7: R31 := R31 + 0x20
000002ac: call R30 with noreturn

00000543: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000575: __libc_start_main_main :: in u64 = R0
00000576: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000577: __libc_start_main_arg3 :: in out u64 = R2
00000578: __libc_start_main_auxv :: in out u64 = R3
00000579: __libc_start_main_result :: out u32 = low:32[R0]

000001b3:
000003de: R16 := 0x11000
000003e5: R17 := mem[R16, el]:u64
000003eb: R16 := R16
000003f0: call R17 with noreturn

00000544: sub _fini(_fini_result)
0000057a: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000545: sub _init(_init_result)
0000057b: _init_result :: out u32 = low:32[R0]

0000049d:
000004a3: #5 := R31 - 0x10
000004a9: mem := mem with [#5, el]:u64 <- R29
000004af: mem := mem with [#5 + 8, el]:u64 <- R30
000004b3: R31 := #5
000004b9: R29 := R31
000004be: R30 := 0x590
000004c0: call @call_weak_fn with return %000004c2

000004c2:
000004c7: R29 := mem[R31, el]:u64
000004cc: R30 := mem[R31 + 8, el]:u64
000004d0: R31 := R31 + 0x10
000004d5: call R30 with noreturn

00000546: sub _start(_start_result)
0000057c: _start_result :: out u32 = low:32[R0]

00000174:
00000179: R29 := 0
0000017e: R30 := 0
00000184: R5 := R0
0000018b: R1 := mem[R31, el]:u64
00000191: R2 := R31 + 8
00000197: R6 := R31
0000019c: R0 := 0x10000
000001a3: R0 := mem[R0 + 0xFD8, el]:u64
000001a8: R3 := 0
000001ad: R4 := 0
000001b2: R30 := 0x630
000001b5: call @__libc_start_main with return %000001b7

000001b7:
000001ba: R30 := 0x634
000001bd: call @abort with return %0000056b

0000056b:
0000056c: call @call_weak_fn with noreturn

00000549: sub abort()


000001bb:
00000420: R16 := 0x11000
00000427: R17 := mem[R16 + 0x18, el]:u64
0000042d: R16 := R16 + 0x18
00000432: call R17 with noreturn

0000054a: sub call_weak_fn(call_weak_fn_result)
0000057d: call_weak_fn_result :: out u32 = low:32[R0]

000001bf:
000001c2: R0 := 0x10000
000001c9: R0 := mem[R0 + 0xFD0, el]:u64
000001cf: when R0 = 0 goto %000001cd
0000056d: goto %0000033c

000001cd:
000001d5: call R30 with noreturn

0000033c:
0000033f: goto @__gmon_start__

0000033d:
0000040a: R16 := 0x11000
00000411: R17 := mem[R16 + 0x10, el]:u64
00000417: R16 := R16 + 0x10
0000041c: call R17 with noreturn

0000054c: sub deregister_tm_clones(deregister_tm_clones_result)
0000057e: deregister_tm_clones_result :: out u32 = low:32[R0]

000001db:
000001de: R0 := 0x11000
000001e4: R0 := R0 + 0x30
000001e9: R1 := 0x11000
000001ef: R1 := R1 + 0x30
000001f5: #1 := ~R0
000001fa: #2 := R1 + ~R0
00000200: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000206: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000020a: ZF := #2 + 1 = 0
0000020e: NF := 63:63[#2 + 1]
00000214: when ZF goto %00000212
0000056e: goto %0000031e

0000031e:
00000321: R1 := 0x10000
00000328: R1 := mem[R1 + 0xFC0, el]:u64
0000032d: when R1 = 0 goto %00000212
0000056f: goto %00000331

00000212:
0000021a: call R30 with noreturn

00000331:
00000335: R16 := R1
0000033a: call R16 with noreturn

0000054f: sub frame_dummy(frame_dummy_result)
0000057f: frame_dummy_result :: out u32 = low:32[R0]

000002b2:
000002b4: call @register_tm_clones with noreturn

00000550: sub main(main_argc, main_argv, main_result)
00000580: main_argc :: in u32 = low:32[R0]
00000581: main_argv :: in out u64 = R1
00000582: main_result :: out u32 = low:32[R0]

000002c0:
000002c3: call R30 with noreturn

00000551: sub r(r_result)
00000583: r_result :: out u32 = low:32[R0]

000002b6:
000002b9: R0 := 1
000002be: call R30 with noreturn

00000552: sub register_tm_clones(register_tm_clones_result)
00000584: register_tm_clones_result :: out u32 = low:32[R0]

0000021c:
0000021f: R0 := 0x11000
00000225: R0 := R0 + 0x30
0000022a: R1 := 0x11000
00000230: R1 := R1 + 0x30
00000237: R1 := R1 + ~R0 + 1
0000023d: R2 := 0.63:63[R1]
00000244: R1 := R2 + (R1 ~>> 3)
0000024a: R1 := extend:64[63:1[R1]]
00000250: when R1 = 0 goto %0000024e
00000570: goto %00000300

00000300:
00000303: R2 := 0x10000
0000030a: R2 := mem[R2 + 0xFE0, el]:u64
0000030f: when R2 = 0 goto %0000024e
00000571: goto %00000313

0000024e:
00000256: call R30 with noreturn

00000313:
00000317: R16 := R2
0000031c: call R16 with noreturn
