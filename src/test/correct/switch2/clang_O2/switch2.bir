00000523: program
000004ef: sub __cxa_finalize(__cxa_finalize_result)
00000524: __cxa_finalize_result :: out u32 = low:32[R0]

000002fc:
000003f4: R16 := 0x20000
000003fb: R17 := mem[R16 + 8, el]:u64
00000401: R16 := R16 + 8
00000406: call R17 with noreturn

000004f0: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000525: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000025b:
0000025f: #3 := R31 - 0x20
00000265: mem := mem with [#3, el]:u64 <- R29
0000026b: mem := mem with [#3 + 8, el]:u64 <- R30
0000026f: R31 := #3
00000275: R29 := R31
0000027d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000282: R19 := 0x20000
00000289: R0 := pad:64[mem[R19 + 0x30]]
0000028f: when 0:0[R0] goto %0000028d
00000519: goto %000002c5

000002c5:
000002c8: R0 := 0x1F000
000002cf: R0 := mem[R0 + 0xFC8, el]:u64
000002d5: when R0 = 0 goto %000002d3
0000051a: goto %000002ec

000002ec:
000002ef: R0 := 0x20000
000002f6: R0 := mem[R0 + 0x28, el]:u64
000002fb: R30 := 0x730
000002fe: call @__cxa_finalize with return %000002d3

000002d3:
000002db: R30 := 0x734
000002dd: call @deregister_tm_clones with return %000002df

000002df:
000002e2: R0 := 1
000002ea: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000051b: goto %0000028d

0000028d:
00000297: R19 := mem[R31 + 0x10, el]:u64
0000029e: R29 := mem[R31, el]:u64
000002a3: R30 := mem[R31 + 8, el]:u64
000002a7: R31 := R31 + 0x20
000002ac: call R30 with noreturn

000004f4: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000526: __libc_start_main_main :: in u64 = R0
00000527: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000528: __libc_start_main_arg3 :: in out u64 = R2
00000529: __libc_start_main_auxv :: in out u64 = R3
0000052a: __libc_start_main_result :: out u32 = low:32[R0]

000001b4:
000003de: R16 := 0x20000
000003e5: R17 := mem[R16, el]:u64
000003eb: R16 := R16
000003f0: call R17 with noreturn

000004f5: sub _fini(_fini_result)
0000052b: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000004f6: sub _init(_init_result)
0000052c: _init_result :: out u32 = low:32[R0]

0000044e:
00000454: #5 := R31 - 0x10
0000045a: mem := mem with [#5, el]:u64 <- R29
00000460: mem := mem with [#5 + 8, el]:u64 <- R30
00000464: R31 := #5
0000046a: R29 := R31
0000046f: R30 := 0x5C8
00000471: call @call_weak_fn with return %00000473

00000473:
00000478: R29 := mem[R31, el]:u64
0000047d: R30 := mem[R31 + 8, el]:u64
00000481: R31 := R31 + 0x10
00000486: call R30 with noreturn

000004f7: sub _start(_start_result)
0000052d: _start_result :: out u32 = low:32[R0]

00000175:
0000017a: R29 := 0
0000017f: R30 := 0
00000185: R5 := R0
0000018c: R1 := mem[R31, el]:u64
00000192: R2 := R31 + 8
00000198: R6 := R31
0000019d: R0 := 0x1F000
000001a4: R0 := mem[R0 + 0xFD8, el]:u64
000001a9: R3 := 0
000001ae: R4 := 0
000001b3: R30 := 0x670
000001b6: call @__libc_start_main with return %000001b8

000001b8:
000001bb: R30 := 0x674
000001be: call @abort with return %0000051c

0000051c:
0000051d: call @call_weak_fn with noreturn

000004fa: sub abort()


000001bc:
00000420: R16 := 0x20000
00000427: R17 := mem[R16 + 0x18, el]:u64
0000042d: R16 := R16 + 0x18
00000432: call R17 with noreturn

000004fb: sub call_weak_fn(call_weak_fn_result)
0000052e: call_weak_fn_result :: out u32 = low:32[R0]

000001c0:
000001c3: R0 := 0x1F000
000001ca: R0 := mem[R0 + 0xFD0, el]:u64
000001d0: when R0 = 0 goto %000001ce
0000051e: goto %0000033c

000001ce:
000001d6: call R30 with noreturn

0000033c:
0000033f: goto @__gmon_start__

0000033d:
0000040a: R16 := 0x20000
00000411: R17 := mem[R16 + 0x10, el]:u64
00000417: R16 := R16 + 0x10
0000041c: call R17 with noreturn

000004fd: sub deregister_tm_clones(deregister_tm_clones_result)
0000052f: deregister_tm_clones_result :: out u32 = low:32[R0]

000001dc:
000001df: R0 := 0x20000
000001e5: R0 := R0 + 0x30
000001ea: R1 := 0x20000
000001f0: R1 := R1 + 0x30
000001f6: #1 := ~R0
000001fb: #2 := R1 + ~R0
00000201: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000207: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000020b: ZF := #2 + 1 = 0
0000020f: NF := 63:63[#2 + 1]
00000215: when ZF goto %00000213
0000051f: goto %0000031e

0000031e:
00000321: R1 := 0x1F000
00000328: R1 := mem[R1 + 0xFC0, el]:u64
0000032d: when R1 = 0 goto %00000213
00000520: goto %00000331

00000213:
0000021b: call R30 with noreturn

00000331:
00000335: R16 := R1
0000033a: call R16 with noreturn

00000500: sub frame_dummy(frame_dummy_result)
00000530: frame_dummy_result :: out u32 = low:32[R0]

000002b2:
000002b4: call @register_tm_clones with noreturn

00000501: sub main(main_argc, main_argv, main_result)
00000531: main_argc :: in u32 = low:32[R0]
00000532: main_argv :: in out u64 = R1
00000533: main_result :: out u32 = low:32[R0]

000002c0:
000002c3: call R30 with noreturn

00000502: sub r(r_result)
00000534: r_result :: out u32 = low:32[R0]

000002b6:
000002b9: R0 := 1
000002be: call R30 with noreturn

00000503: sub register_tm_clones(register_tm_clones_result)
00000535: register_tm_clones_result :: out u32 = low:32[R0]

0000021d:
00000220: R0 := 0x20000
00000226: R0 := R0 + 0x30
0000022b: R1 := 0x20000
00000231: R1 := R1 + 0x30
00000238: R1 := R1 + ~R0 + 1
0000023e: R2 := 0.63:63[R1]
00000245: R1 := R2 + (R1 ~>> 3)
0000024b: R1 := extend:64[63:1[R1]]
00000251: when R1 = 0 goto %0000024f
00000521: goto %00000300

00000300:
00000303: R2 := 0x1F000
0000030a: R2 := mem[R2 + 0xFE0, el]:u64
0000030f: when R2 = 0 goto %0000024f
00000522: goto %00000313

0000024f:
00000257: call R30 with noreturn

00000313:
00000317: R16 := R2
0000031c: call R16 with noreturn
