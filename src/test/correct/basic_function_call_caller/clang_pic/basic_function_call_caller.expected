var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69684bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69688bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $y_addr) then (memory_load32_le(memory, $x_addr) == 1bv32) else (if (index == $x_addr) then true else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:inline} byte_extract64_64(value: bv64, offset: bv64) returns (bv8) {
  bvlshr64(value,bvmul64(offset,8bv64))[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then byte_extract64_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (memory_load32_le(mem, $x_addr) == old(memory_load32_le(mem, $x_addr)));
  ensures (memory_load32_le(mem, $y_addr) == old(memory_load32_le(mem, $y_addr)));
  free ensures (memory_load8_le(mem, 1968bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1969bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1970bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1971bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1884bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (memory_load32_le(mem, $x_addr) == old(memory_load32_le(mem, $x_addr)));
  ensures (memory_load32_le(mem, $y_addr) == old(memory_load32_le(mem, $y_addr)));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert (memory_load32_le(mem, $x_addr) == memory_load32_le(mem, $x_addr));
  assert (memory_load32_le(mem, $y_addr) == memory_load32_le(mem, $y_addr));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

implementation {:extern} guarantee_reflexive()
{
  assert ((memory_load32_le(mem, $x_addr) == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
  assert (gamma_load32(Gamma_mem, $y_addr) ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));
}

procedure main(R0_in: bv64, Gamma_R0_in: bool, R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R29_out: bv64, Gamma_R29_out: bool, R30_out: bv64, Gamma_R30_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  requires (Gamma_R0_in == false);
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load8_le(mem, 1968bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1969bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1970bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1971bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 69688bv64);
  free requires (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1884bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1792bv64);
  free ensures (memory_load8_le(mem, 1968bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1969bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1970bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1971bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1884bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R29_out: bv64, Gamma_R29_out: bool, R30_out: bv64, Gamma_R30_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool)
{
  var Gamma_R0_2: bool;
  var Gamma_R29_3: bool;
  var Gamma_R30_3: bool;
  var Gamma_R8_2: bool;
  var Gamma_R8_3: bool;
  var Gamma_R9_2: bool;
  var Gamma_y_old: bool;
  var R0_2: bv64;
  var R29_3: bv64;
  var R30_3: bv64;
  var R8_2: bv64;
  var R8_3: bv64;
  var R9_2: bv64;
  var x_old: bv32;
  lmain:
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551600bv64), R29_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551600bv64), Gamma_R29_in);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551608bv64), R30_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), Gamma_R30_in);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551596bv64), R0_in[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64), Gamma_R0_in);
    call R0_2, Gamma_R0_2 := zero();
    goto l00000329;
  l00000329:
    call rely();
    R8_2, Gamma_R8_2 := memory_load64_le(mem, 69568bv64), (gamma_load64(Gamma_mem, 69568bv64) || L(mem, 69568bv64));
    call rely();
    assert (L(mem, R8_2) ==> Gamma_R0_2);
    x_old := memory_load32_le(mem, $x_addr);
    Gamma_y_old := (gamma_load32(Gamma_mem, $y_addr) || L(mem, $y_addr));
    mem, Gamma_mem := memory_store32_le(mem, R8_2, R0_2[32:0]), gamma_store32(Gamma_mem, R8_2, Gamma_R0_2);
    assert ((R8_2 == $x_addr) ==> (L(mem, $y_addr) ==> Gamma_y_old));
    assert ((x_old == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
    assert (Gamma_y_old ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));
    R8_3, Gamma_R8_3 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551596bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64));
    call rely();
    R9_2, Gamma_R9_2 := memory_load64_le(mem, 69584bv64), (gamma_load64(Gamma_mem, 69584bv64) || L(mem, 69584bv64));
    call rely();
    assert (L(mem, R9_2) ==> Gamma_R8_3);
    x_old := memory_load32_le(mem, $x_addr);
    Gamma_y_old := (gamma_load32(Gamma_mem, $y_addr) || L(mem, $y_addr));
    mem, Gamma_mem := memory_store32_le(mem, R9_2, R8_3[32:0]), gamma_store32(Gamma_mem, R9_2, Gamma_R8_3);
    assert ((R9_2 == $x_addr) ==> (L(mem, $y_addr) ==> Gamma_y_old));
    assert ((x_old == 0bv32) ==> (memory_load32_le(mem, $x_addr) == 0bv32));
    assert (Gamma_y_old ==> ((memory_load32_le(mem, $x_addr) == 0bv32) || gamma_load32(Gamma_mem, $y_addr)));
    R29_3, Gamma_R29_3 := memory_load64_le(stack, bvadd64(R31_in, 18446744073709551600bv64)), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551600bv64));
    R30_3, Gamma_R30_3 := memory_load64_le(stack, bvadd64(R31_in, 18446744073709551608bv64)), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64));
    goto main_basil_return;
  main_basil_return:
    R0_out, R29_out, R30_out, R31_out, R8_out, R9_out := 0bv64, R29_3, R30_3, R31_in, R8_3, R9_2;
    Gamma_R0_out, Gamma_R29_out, Gamma_R30_out, Gamma_R31_out, Gamma_R8_out, Gamma_R9_out := true, Gamma_R29_3, Gamma_R30_3, Gamma_R31_in, Gamma_R8_3, Gamma_R9_2;
    return;
}

procedure zero() returns (R0_out: bv64, Gamma_R0_out: bool);
  free requires (memory_load8_le(mem, 1968bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1969bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1970bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1971bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 69688bv64);
  free requires (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1884bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1792bv64);
  ensures ((R0_out[32:0] == 0bv32) && Gamma_R0_out);
  free ensures (memory_load8_le(mem, 1968bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1969bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1970bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1971bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1884bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);

implementation zero() returns (R0_out: bv64, Gamma_R0_out: bool)
{
  lzero:
    goto zero_basil_return;
  zero_basil_return:
    R0_out := 0bv64;
    Gamma_R0_out := true;
    return;
}

