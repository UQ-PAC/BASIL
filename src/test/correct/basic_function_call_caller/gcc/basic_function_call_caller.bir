00000639: program
00000605: sub __cxa_finalize(__cxa_finalize_result)
0000063a: __cxa_finalize_result :: out u32 = low:32[R0]

000003a7:
0000049f: R16 := 0x10000
000004a6: R17 := mem[R16 + 0xFB8, el]:u64
000004ac: R16 := R16 + 0xFB8
000004b1: call R17 with noreturn

00000606: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000063b: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000292:
00000296: #3 := R31 - 0x20
0000029c: mem := mem with [#3, el]:u64 <- R29
000002a2: mem := mem with [#3 + 8, el]:u64 <- R30
000002a6: R31 := #3
000002ac: R29 := R31
000002b4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b9: R19 := 0x11000
000002c0: R0 := pad:64[mem[R19 + 0x10]]
000002c7: when 31:0[R0] <> 0 goto %000002c5
0000062f: goto %00000370

00000370:
00000373: R0 := 0x10000
0000037a: R0 := mem[R0 + 0xFE0, el]:u64
00000380: when R0 = 0 goto %0000037e
00000630: goto %00000397

00000397:
0000039a: R0 := 0x11000
000003a1: R0 := mem[R0 + 8, el]:u64
000003a6: R30 := 0x6F0
000003a9: call @__cxa_finalize with return %0000037e

0000037e:
00000386: R30 := 0x6F4
00000388: call @deregister_tm_clones with return %0000038a

0000038a:
0000038d: R0 := 1
00000395: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000631: goto %000002c5

000002c5:
000002cf: R19 := mem[R31 + 0x10, el]:u64
000002d6: R29 := mem[R31, el]:u64
000002db: R30 := mem[R31 + 8, el]:u64
000002df: R31 := R31 + 0x20
000002e4: call R30 with noreturn

0000060a: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000063c: __libc_start_main_main :: in u64 = R0
0000063d: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000063e: __libc_start_main_arg3 :: in out u64 = R2
0000063f: __libc_start_main_auxv :: in out u64 = R3
00000640: __libc_start_main_result :: out u32 = low:32[R0]

000001eb:
00000489: R16 := 0x10000
00000490: R17 := mem[R16 + 0xFB0, el]:u64
00000496: R16 := R16 + 0xFB0
0000049b: call R17 with noreturn

0000060b: sub _fini(_fini_result)
00000641: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000060c: sub _init(_init_result)
00000642: _init_result :: out u32 = low:32[R0]

00000556:
0000055c: #6 := R31 - 0x10
00000562: mem := mem with [#6, el]:u64 <- R29
00000568: mem := mem with [#6 + 8, el]:u64 <- R30
0000056c: R31 := #6
00000572: R29 := R31
00000577: R30 := 0x590
00000579: call @call_weak_fn with return %0000057b

0000057b:
00000580: R29 := mem[R31, el]:u64
00000585: R30 := mem[R31 + 8, el]:u64
00000589: R31 := R31 + 0x10
0000058e: call R30 with noreturn

0000060d: sub _start(_start_result)
00000643: _start_result :: out u32 = low:32[R0]

000001ac:
000001b1: R29 := 0
000001b6: R30 := 0
000001bc: R5 := R0
000001c3: R1 := mem[R31, el]:u64
000001c9: R2 := R31 + 8
000001cf: R6 := R31
000001d4: R0 := 0x10000
000001db: R0 := mem[R0 + 0xFF0, el]:u64
000001e0: R3 := 0
000001e5: R4 := 0
000001ea: R30 := 0x630
000001ed: call @__libc_start_main with return %000001ef

000001ef:
000001f2: R30 := 0x634
000001f5: call @abort with return %00000632

00000632:
00000633: call @call_weak_fn with noreturn

00000610: sub abort()


000001f3:
000004cb: R16 := 0x10000
000004d2: R17 := mem[R16 + 0xFC8, el]:u64
000004d8: R16 := R16 + 0xFC8
000004dd: call R17 with noreturn

00000611: sub call_weak_fn(call_weak_fn_result)
00000644: call_weak_fn_result :: out u32 = low:32[R0]

000001f7:
000001fa: R0 := 0x10000
00000201: R0 := mem[R0 + 0xFE8, el]:u64
00000207: when R0 = 0 goto %00000205
00000634: goto %000003e7

00000205:
0000020d: call R30 with noreturn

000003e7:
000003ea: goto @__gmon_start__

000003e8:
000004b5: R16 := 0x10000
000004bc: R17 := mem[R16 + 0xFC0, el]:u64
000004c2: R16 := R16 + 0xFC0
000004c7: call R17 with noreturn

00000613: sub deregister_tm_clones(deregister_tm_clones_result)
00000645: deregister_tm_clones_result :: out u32 = low:32[R0]

00000213:
00000216: R0 := 0x11000
0000021c: R0 := R0 + 0x10
00000221: R1 := 0x11000
00000227: R1 := R1 + 0x10
0000022d: #1 := ~R0
00000232: #2 := R1 + ~R0
00000238: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000242: ZF := #2 + 1 = 0
00000246: NF := 63:63[#2 + 1]
0000024c: when ZF goto %0000024a
00000635: goto %000003c9

000003c9:
000003cc: R1 := 0x10000
000003d3: R1 := mem[R1 + 0xFD8, el]:u64
000003d8: when R1 = 0 goto %0000024a
00000636: goto %000003dc

0000024a:
00000252: call R30 with noreturn

000003dc:
000003e0: R16 := R1
000003e5: call R16 with noreturn

00000616: sub frame_dummy(frame_dummy_result)
00000646: frame_dummy_result :: out u32 = low:32[R0]

000002ea:
000002ec: call @register_tm_clones with noreturn

00000617: sub main(main_argc, main_argv, main_result)
00000647: main_argc :: in u32 = low:32[R0]
00000648: main_argv :: in out u64 = R1
00000649: main_result :: out u32 = low:32[R0]

000002f8:
000002fc: #4 := R31 - 0x20
00000302: mem := mem with [#4, el]:u64 <- R29
00000308: mem := mem with [#4 + 8, el]:u64 <- R30
0000030c: R31 := #4
00000312: R29 := R31
0000031a: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000031f: R30 := 0x72C
00000321: call @zero with return %00000323

00000323:
00000327: R1 := pad:64[31:0[R0]]
0000032c: R0 := 0x11000
00000332: R0 := R0 + 0x14
0000033a: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000033f: R0 := 0x11000
00000345: R0 := R0 + 0x18
0000034c: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
00000354: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000359: R0 := 0
00000360: R29 := mem[R31, el]:u64
00000365: R30 := mem[R31 + 8, el]:u64
00000369: R31 := R31 + 0x20
0000036e: call R30 with noreturn

00000618: sub register_tm_clones(register_tm_clones_result)
0000064a: register_tm_clones_result :: out u32 = low:32[R0]

00000254:
00000257: R0 := 0x11000
0000025d: R0 := R0 + 0x10
00000262: R1 := 0x11000
00000268: R1 := R1 + 0x10
0000026f: R1 := R1 + ~R0 + 1
00000275: R2 := 0.63:63[R1]
0000027c: R1 := R2 + (R1 ~>> 3)
00000282: R1 := extend:64[63:1[R1]]
00000288: when R1 = 0 goto %00000286
00000637: goto %000003ab

000003ab:
000003ae: R2 := 0x10000
000003b5: R2 := mem[R2 + 0xFF8, el]:u64
000003ba: when R2 = 0 goto %00000286
00000638: goto %000003be

00000286:
0000028e: call R30 with noreturn

000003be:
000003c2: R16 := R2
000003c7: call R16 with noreturn

0000061b: sub zero(zero_result)
0000064b: zero_result :: out u32 = low:32[R0]

000002ee:
000002f1: R0 := 0
000002f6: call R30 with noreturn
