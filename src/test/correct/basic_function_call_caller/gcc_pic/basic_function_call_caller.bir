000005c5: program
00000591: sub __cxa_finalize(__cxa_finalize_result)
000005c6: __cxa_finalize_result :: out u32 = low:32[R0]

000003a9:
000004a1: R16 := 0x20000
000004a8: R17 := mem[R16 + 8, el]:u64
000004ae: R16 := R16 + 8
000004b3: call R17 with noreturn

00000592: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005c7: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000293:
00000297: #3 := R31 - 0x20
0000029d: mem := mem with [#3, el]:u64 <- R29
000002a3: mem := mem with [#3 + 8, el]:u64 <- R30
000002a7: R31 := #3
000002ad: R29 := R31
000002b5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ba: R19 := 0x20000
000002c1: R0 := pad:64[mem[R19 + 0x30]]
000002c7: when 0:0[R0] goto %000002c5
000005bb: goto %00000372

00000372:
00000375: R0 := 0x1F000
0000037c: R0 := mem[R0 + 0xFB8, el]:u64
00000382: when R0 = 0 goto %00000380
000005bc: goto %00000399

00000399:
0000039c: R0 := 0x20000
000003a3: R0 := mem[R0 + 0x28, el]:u64
000003a8: R30 := 0x730
000003ab: call @__cxa_finalize with return %00000380

00000380:
00000388: R30 := 0x734
0000038a: call @deregister_tm_clones with return %0000038c

0000038c:
0000038f: R0 := 1
00000397: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005bd: goto %000002c5

000002c5:
000002cf: R19 := mem[R31 + 0x10, el]:u64
000002d6: R29 := mem[R31, el]:u64
000002db: R30 := mem[R31 + 8, el]:u64
000002df: R31 := R31 + 0x20
000002e4: call R30 with noreturn

00000596: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005c8: __libc_start_main_main :: in u64 = R0
000005c9: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005ca: __libc_start_main_arg3 :: in out u64 = R2
000005cb: __libc_start_main_auxv :: in out u64 = R3
000005cc: __libc_start_main_result :: out u32 = low:32[R0]

000001ec:
0000048b: R16 := 0x20000
00000492: R17 := mem[R16, el]:u64
00000498: R16 := R16
0000049d: call R17 with noreturn

00000597: sub _fini(_fini_result)
000005cd: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000598: sub _init(_init_result)
000005ce: _init_result :: out u32 = low:32[R0]

000004fb:
00000501: #6 := R31 - 0x10
00000507: mem := mem with [#6, el]:u64 <- R29
0000050d: mem := mem with [#6 + 8, el]:u64 <- R30
00000511: R31 := #6
00000517: R29 := R31
0000051c: R30 := 0x5C0
0000051e: call @call_weak_fn with return %00000520

00000520:
00000525: R29 := mem[R31, el]:u64
0000052a: R30 := mem[R31 + 8, el]:u64
0000052e: R31 := R31 + 0x10
00000533: call R30 with noreturn

00000599: sub _start(_start_result)
000005cf: _start_result :: out u32 = low:32[R0]

000001ad:
000001b2: R29 := 0
000001b7: R30 := 0
000001bd: R5 := R0
000001c4: R1 := mem[R31, el]:u64
000001ca: R2 := R31 + 8
000001d0: R6 := R31
000001d5: R0 := 0x1F000
000001dc: R0 := mem[R0 + 0xFD8, el]:u64
000001e1: R3 := 0
000001e6: R4 := 0
000001eb: R30 := 0x670
000001ee: call @__libc_start_main with return %000001f0

000001f0:
000001f3: R30 := 0x674
000001f6: call @abort with return %000005be

000005be:
000005bf: call @call_weak_fn with noreturn

0000059c: sub abort()


000001f4:
000004cd: R16 := 0x20000
000004d4: R17 := mem[R16 + 0x18, el]:u64
000004da: R16 := R16 + 0x18
000004df: call R17 with noreturn

0000059d: sub call_weak_fn(call_weak_fn_result)
000005d0: call_weak_fn_result :: out u32 = low:32[R0]

000001f8:
000001fb: R0 := 0x1F000
00000202: R0 := mem[R0 + 0xFC8, el]:u64
00000208: when R0 = 0 goto %00000206
000005c0: goto %000003e9

00000206:
0000020e: call R30 with noreturn

000003e9:
000003ec: goto @__gmon_start__

000003ea:
000004b7: R16 := 0x20000
000004be: R17 := mem[R16 + 0x10, el]:u64
000004c4: R16 := R16 + 0x10
000004c9: call R17 with noreturn

0000059f: sub deregister_tm_clones(deregister_tm_clones_result)
000005d1: deregister_tm_clones_result :: out u32 = low:32[R0]

00000214:
00000217: R0 := 0x20000
0000021d: R0 := R0 + 0x30
00000222: R1 := 0x20000
00000228: R1 := R1 + 0x30
0000022e: #1 := ~R0
00000233: #2 := R1 + ~R0
00000239: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000243: ZF := #2 + 1 = 0
00000247: NF := 63:63[#2 + 1]
0000024d: when ZF goto %0000024b
000005c1: goto %000003cb

000003cb:
000003ce: R1 := 0x1F000
000003d5: R1 := mem[R1 + 0xFB0, el]:u64
000003da: when R1 = 0 goto %0000024b
000005c2: goto %000003de

0000024b:
00000253: call R30 with noreturn

000003de:
000003e2: R16 := R1
000003e7: call R16 with noreturn

000005a2: sub frame_dummy(frame_dummy_result)
000005d2: frame_dummy_result :: out u32 = low:32[R0]

000002ea:
000002ec: call @register_tm_clones with noreturn

000005a3: sub main(main_argc, main_argv, main_result)
000005d3: main_argc :: in u32 = low:32[R0]
000005d4: main_argv :: in out u64 = R1
000005d5: main_result :: out u32 = low:32[R0]

000002f8:
000002fc: #4 := R31 - 0x20
00000302: mem := mem with [#4, el]:u64 <- R29
00000308: mem := mem with [#4 + 8, el]:u64 <- R30
0000030c: R31 := #4
00000312: R29 := R31
0000031a: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000031f: R30 := 0x76C
00000321: call @zero with return %00000323

00000323:
00000327: R1 := pad:64[31:0[R0]]
0000032c: R0 := 0x1F000
00000333: R0 := mem[R0 + 0xFC0, el]:u64
0000033b: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000340: R0 := 0x1F000
00000347: R0 := mem[R0 + 0xFD0, el]:u64
0000034e: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
00000356: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000035b: R0 := 0
00000362: R29 := mem[R31, el]:u64
00000367: R30 := mem[R31 + 8, el]:u64
0000036b: R31 := R31 + 0x20
00000370: call R30 with noreturn

000005a4: sub register_tm_clones(register_tm_clones_result)
000005d6: register_tm_clones_result :: out u32 = low:32[R0]

00000255:
00000258: R0 := 0x20000
0000025e: R0 := R0 + 0x30
00000263: R1 := 0x20000
00000269: R1 := R1 + 0x30
00000270: R1 := R1 + ~R0 + 1
00000276: R2 := 0.63:63[R1]
0000027d: R1 := R2 + (R1 ~>> 3)
00000283: R1 := extend:64[63:1[R1]]
00000289: when R1 = 0 goto %00000287
000005c3: goto %000003ad

000003ad:
000003b0: R2 := 0x1F000
000003b7: R2 := mem[R2 + 0xFE0, el]:u64
000003bc: when R2 = 0 goto %00000287
000005c4: goto %000003c0

00000287:
0000028f: call R30 with noreturn

000003c0:
000003c4: R16 := R2
000003c9: call R16 with noreturn

000005a7: sub zero(zero_result)
000005d7: zero_result :: out u32 = low:32[R0]

000002ee:
000002f1: R0 := 0
000002f6: call R30 with noreturn
