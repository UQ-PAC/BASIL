var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R1: bool;
var {:extern} $Gamma_R2: bool;
var {:extern} $Gamma_R3: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R1: bv64;
var {:extern} $R2: bv64;
var {:extern} $R3: bv64;
var {:extern} $mem: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69652bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69656bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  (if (bvsge64(#index, $y_addr) && bvslt64(#index, bvadd64($y_addr, 4bv64))) then (memory_load32_le(#mem$in, $x_addr) == 1bv32) else (if (bvsge64(#index, $x_addr) && bvslt64(#index, bvadd64($x_addr, 4bv64))) then true else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsge"} bvsge64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvslt"} bvslt64(bv64, bv64) returns (bool);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures (forall #i: bv64::  ((($mem[#i] == old($mem[#i])) ==> ($Gamma_mem[#i] == old($Gamma_mem[#i])))));
  ensures (memory_load32_le($mem, $x_addr) == old(memory_load32_le($mem, $x_addr)));
  ensures (memory_load32_le($mem, $y_addr) == old(memory_load32_le($mem, $y_addr)));
  free ensures (memory_load32_le($mem, 1916bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures (memory_load32_le($mem, $x_addr) == old(memory_load32_le($mem, $x_addr)));
  ensures (memory_load32_le($mem, $y_addr) == old(memory_load32_le($mem, $y_addr)));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

implementation {:extern} p$rely_reflexive()
{
  assert (memory_load32_le($mem, $x_addr) == memory_load32_le($mem, $x_addr));
  assert (memory_load32_le($mem, $y_addr) == memory_load32_le($mem, $y_addr));
}

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

implementation {:extern} p$guarantee_reflexive()
{
  assert ((memory_load32_le($mem, $x_addr) == 0bv32) ==> (memory_load32_le($mem, $x_addr) == 0bv32));
  assert (gamma_load32($Gamma_mem, $y_addr) ==> ((memory_load32_le($mem, $x_addr) == 0bv32) || gamma_load32($Gamma_mem, $y_addr)));
}

procedure p$main_1536();
  modifies $Gamma_R0, $Gamma_R1, $Gamma_R2, $Gamma_R3, $Gamma_mem, $R0, $R1, $R2, $R3, $mem;
  requires ($Gamma_R0 == false);
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le($mem, 1916bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69016bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69024bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures (memory_load32_le($mem, 1916bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_1536()
{
  var #Gamma_y_old: bool;
  var #x_old: bv32;
  b#main_entry:
    assume {:captureState "main_entry"} true;
    $R1, $Gamma_R1 := 69632bv64, true;
    $R2, $Gamma_R2 := bvadd64($R1, 20bv64), $Gamma_R1;
    $R3, $Gamma_R3 := zero_extend32_32($R0[32:0]), $Gamma_R0;
    $R0, $Gamma_R0 := 0bv64, true;
    call p$rely();
    #x_old := memory_load32_le($mem, $x_addr);
    #Gamma_y_old := (gamma_load32($Gamma_mem, $y_addr) || L($mem, $y_addr));
    assert (L($mem, bvadd64($R1, 20bv64)) ==> true);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R1, 20bv64), 0bv32), gamma_store32($Gamma_mem, bvadd64($R1, 20bv64), true);
    assert ((bvadd64($R1, 20bv64) == $x_addr) ==> (L($mem, $y_addr) ==> #Gamma_y_old));
    assert ((#x_old == 0bv32) ==> (memory_load32_le($mem, $x_addr) == 0bv32));
    assert (#Gamma_y_old ==> ((memory_load32_le($mem, $x_addr) == 0bv32) || gamma_load32($Gamma_mem, $y_addr)));
    assume {:captureState "%000001d7"} true;
    call p$rely();
    #x_old := memory_load32_le($mem, $x_addr);
    #Gamma_y_old := (gamma_load32($Gamma_mem, $y_addr) || L($mem, $y_addr));
    assert (L($mem, bvadd64($R2, 4bv64)) ==> $Gamma_R3);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R2, 4bv64), $R3[32:0]), gamma_store32($Gamma_mem, bvadd64($R2, 4bv64), $Gamma_R3);
    assert ((bvadd64($R2, 4bv64) == $x_addr) ==> (L($mem, $y_addr) ==> #Gamma_y_old));
    assert ((#x_old == 0bv32) ==> (memory_load32_le($mem, $x_addr) == 0bv32));
    assert (#Gamma_y_old ==> ((memory_load32_le($mem, $x_addr) == 0bv32) || gamma_load32($Gamma_mem, $y_addr)));
    assume {:captureState "%000001df"} true;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

