000005cd: program
00000599: sub __cxa_finalize(__cxa_finalize_result)
000005ce: __cxa_finalize_result :: out u32 = low:32[R0]

00000399:
00000491: R16 := 0x20000
00000498: R17 := mem[R16 + 8, el]:u64
0000049e: R16 := R16 + 8
000004a3: call R17 with noreturn

0000059a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005cf: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028f:
00000293: #3 := R31 - 0x20
00000299: mem := mem with [#3, el]:u64 <- R29
0000029f: mem := mem with [#3 + 8, el]:u64 <- R30
000002a3: R31 := #3
000002a9: R29 := R31
000002b1: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b6: R19 := 0x20000
000002bd: R0 := pad:64[mem[R19 + 0x30]]
000002c3: when 0:0[R0] goto %000002c1
000005c3: goto %00000362

00000362:
00000365: R0 := 0x1F000
0000036c: R0 := mem[R0 + 0xFC8, el]:u64
00000372: when R0 = 0 goto %00000370
000005c4: goto %00000389

00000389:
0000038c: R0 := 0x20000
00000393: R0 := mem[R0 + 0x28, el]:u64
00000398: R30 := 0x730
0000039b: call @__cxa_finalize with return %00000370

00000370:
00000378: R30 := 0x734
0000037a: call @deregister_tm_clones with return %0000037c

0000037c:
0000037f: R0 := 1
00000387: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005c5: goto %000002c1

000002c1:
000002cb: R19 := mem[R31 + 0x10, el]:u64
000002d2: R29 := mem[R31, el]:u64
000002d7: R30 := mem[R31 + 8, el]:u64
000002db: R31 := R31 + 0x20
000002e0: call R30 with noreturn

0000059e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005d0: __libc_start_main_main :: in u64 = R0
000005d1: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005d2: __libc_start_main_arg3 :: in out u64 = R2
000005d3: __libc_start_main_auxv :: in out u64 = R3
000005d4: __libc_start_main_result :: out u32 = low:32[R0]

000001e8:
0000047b: R16 := 0x20000
00000482: R17 := mem[R16, el]:u64
00000488: R16 := R16
0000048d: call R17 with noreturn

0000059f: sub _fini(_fini_result)
000005d5: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005a0: sub _init(_init_result)
000005d6: _init_result :: out u32 = low:32[R0]

000004eb:
000004f1: #7 := R31 - 0x10
000004f7: mem := mem with [#7, el]:u64 <- R29
000004fd: mem := mem with [#7 + 8, el]:u64 <- R30
00000501: R31 := #7
00000507: R29 := R31
0000050c: R30 := 0x5C8
0000050e: call @call_weak_fn with return %00000510

00000510:
00000515: R29 := mem[R31, el]:u64
0000051a: R30 := mem[R31 + 8, el]:u64
0000051e: R31 := R31 + 0x10
00000523: call R30 with noreturn

000005a1: sub _start(_start_result)
000005d7: _start_result :: out u32 = low:32[R0]

000001a9:
000001ae: R29 := 0
000001b3: R30 := 0
000001b9: R5 := R0
000001c0: R1 := mem[R31, el]:u64
000001c6: R2 := R31 + 8
000001cc: R6 := R31
000001d1: R0 := 0x1F000
000001d8: R0 := mem[R0 + 0xFD8, el]:u64
000001dd: R3 := 0
000001e2: R4 := 0
000001e7: R30 := 0x670
000001ea: call @__libc_start_main with return %000001ec

000001ec:
000001ef: R30 := 0x674
000001f2: call @abort with return %000005c6

000005c6:
000005c7: call @call_weak_fn with noreturn

000005a4: sub abort()


000001f0:
000004bd: R16 := 0x20000
000004c4: R17 := mem[R16 + 0x18, el]:u64
000004ca: R16 := R16 + 0x18
000004cf: call R17 with noreturn

000005a5: sub call_weak_fn(call_weak_fn_result)
000005d8: call_weak_fn_result :: out u32 = low:32[R0]

000001f4:
000001f7: R0 := 0x1F000
000001fe: R0 := mem[R0 + 0xFD0, el]:u64
00000204: when R0 = 0 goto %00000202
000005c8: goto %000003d9

00000202:
0000020a: call R30 with noreturn

000003d9:
000003dc: goto @__gmon_start__

000003da:
000004a7: R16 := 0x20000
000004ae: R17 := mem[R16 + 0x10, el]:u64
000004b4: R16 := R16 + 0x10
000004b9: call R17 with noreturn

000005a7: sub deregister_tm_clones(deregister_tm_clones_result)
000005d9: deregister_tm_clones_result :: out u32 = low:32[R0]

00000210:
00000213: R0 := 0x20000
00000219: R0 := R0 + 0x30
0000021e: R1 := 0x20000
00000224: R1 := R1 + 0x30
0000022a: #1 := ~R0
0000022f: #2 := R1 + ~R0
00000235: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023f: ZF := #2 + 1 = 0
00000243: NF := 63:63[#2 + 1]
00000249: when ZF goto %00000247
000005c9: goto %000003bb

000003bb:
000003be: R1 := 0x1F000
000003c5: R1 := mem[R1 + 0xFC0, el]:u64
000003ca: when R1 = 0 goto %00000247
000005ca: goto %000003ce

00000247:
0000024f: call R30 with noreturn

000003ce:
000003d2: R16 := R1
000003d7: call R16 with noreturn

000005aa: sub frame_dummy(frame_dummy_result)
000005da: frame_dummy_result :: out u32 = low:32[R0]

000002e6:
000002e8: call @register_tm_clones with noreturn

000005ab: sub main(main_argc, main_argv, main_result)
000005db: main_argc :: in u32 = low:32[R0]
000005dc: main_argv :: in out u64 = R1
000005dd: main_result :: out u32 = low:32[R0]

000002f4:
000002f8: R31 := R31 - 0x20
000002fe: #4 := R31 + 0x10
00000304: mem := mem with [#4, el]:u64 <- R29
0000030a: mem := mem with [#4 + 8, el]:u64 <- R30
00000310: R29 := R31 + 0x10
00000318: mem := mem with [R29 - 4, el]:u32 <- 31:0[R0]
0000031d: R30 := 0x770
0000031f: call @zero with return %00000321

00000321:
00000324: R8 := 0x20000
0000032c: mem := mem with [R8 + 0x34, el]:u32 <- 31:0[R0]
00000333: R8 := pad:64[mem[R29 - 4, el]:u32]
00000338: R9 := 0x20000
00000340: mem := mem with [R9 + 0x38, el]:u32 <- 31:0[R8]
00000345: R0 := 0
0000034b: #5 := R31 + 0x10
00000350: R29 := mem[#5, el]:u64
00000355: R30 := mem[#5 + 8, el]:u64
0000035b: R31 := R31 + 0x20
00000360: call R30 with noreturn

000005ac: sub register_tm_clones(register_tm_clones_result)
000005de: register_tm_clones_result :: out u32 = low:32[R0]

00000251:
00000254: R0 := 0x20000
0000025a: R0 := R0 + 0x30
0000025f: R1 := 0x20000
00000265: R1 := R1 + 0x30
0000026c: R1 := R1 + ~R0 + 1
00000272: R2 := 0.63:63[R1]
00000279: R1 := R2 + (R1 ~>> 3)
0000027f: R1 := extend:64[63:1[R1]]
00000285: when R1 = 0 goto %00000283
000005cb: goto %0000039d

0000039d:
000003a0: R2 := 0x1F000
000003a7: R2 := mem[R2 + 0xFE0, el]:u64
000003ac: when R2 = 0 goto %00000283
000005cc: goto %000003b0

00000283:
0000028b: call R30 with noreturn

000003b0:
000003b4: R16 := R2
000003b9: call R16 with noreturn

000005af: sub zero(zero_result)
000005df: zero_result :: out u32 = low:32[R0]

000002ea:
000002ed: R0 := 0
000002f2: call R30 with noreturn
