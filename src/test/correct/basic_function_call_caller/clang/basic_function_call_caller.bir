00000629: program
000005f5: sub __cxa_finalize(__cxa_finalize_result)
0000062a: __cxa_finalize_result :: out u32 = low:32[R0]

00000399:
00000491: R16 := 0x11000
00000498: R17 := mem[R16 + 8, el]:u64
0000049e: R16 := R16 + 8
000004a3: call R17 with noreturn

000005f6: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000062b: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028e:
00000292: #3 := R31 - 0x20
00000298: mem := mem with [#3, el]:u64 <- R29
0000029e: mem := mem with [#3 + 8, el]:u64 <- R30
000002a2: R31 := #3
000002a8: R29 := R31
000002b0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b5: R19 := 0x11000
000002bc: R0 := pad:64[mem[R19 + 0x30]]
000002c3: when 31:0[R0] <> 0 goto %000002c1
0000061f: goto %00000362

00000362:
00000365: R0 := 0x10000
0000036c: R0 := mem[R0 + 0xFC8, el]:u64
00000372: when R0 = 0 goto %00000370
00000620: goto %00000389

00000389:
0000038c: R0 := 0x11000
00000393: R0 := mem[R0 + 0x28, el]:u64
00000398: R30 := 0x6F0
0000039b: call @__cxa_finalize with return %00000370

00000370:
00000378: R30 := 0x6F4
0000037a: call @deregister_tm_clones with return %0000037c

0000037c:
0000037f: R0 := 1
00000387: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000621: goto %000002c1

000002c1:
000002cb: R19 := mem[R31 + 0x10, el]:u64
000002d2: R29 := mem[R31, el]:u64
000002d7: R30 := mem[R31 + 8, el]:u64
000002db: R31 := R31 + 0x20
000002e0: call R30 with noreturn

000005fa: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000062c: __libc_start_main_main :: in u64 = R0
0000062d: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000062e: __libc_start_main_arg3 :: in out u64 = R2
0000062f: __libc_start_main_auxv :: in out u64 = R3
00000630: __libc_start_main_result :: out u32 = low:32[R0]

000001e7:
0000047b: R16 := 0x11000
00000482: R17 := mem[R16, el]:u64
00000488: R16 := R16
0000048d: call R17 with noreturn

000005fb: sub _fini(_fini_result)
00000631: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005fc: sub _init(_init_result)
00000632: _init_result :: out u32 = low:32[R0]

00000547:
0000054d: #7 := R31 - 0x10
00000553: mem := mem with [#7, el]:u64 <- R29
00000559: mem := mem with [#7 + 8, el]:u64 <- R30
0000055d: R31 := #7
00000563: R29 := R31
00000568: R30 := 0x590
0000056a: call @call_weak_fn with return %0000056c

0000056c:
00000571: R29 := mem[R31, el]:u64
00000576: R30 := mem[R31 + 8, el]:u64
0000057a: R31 := R31 + 0x10
0000057f: call R30 with noreturn

000005fd: sub _start(_start_result)
00000633: _start_result :: out u32 = low:32[R0]

000001a8:
000001ad: R29 := 0
000001b2: R30 := 0
000001b8: R5 := R0
000001bf: R1 := mem[R31, el]:u64
000001c5: R2 := R31 + 8
000001cb: R6 := R31
000001d0: R0 := 0x10000
000001d7: R0 := mem[R0 + 0xFD8, el]:u64
000001dc: R3 := 0
000001e1: R4 := 0
000001e6: R30 := 0x630
000001e9: call @__libc_start_main with return %000001eb

000001eb:
000001ee: R30 := 0x634
000001f1: call @abort with return %00000622

00000622:
00000623: call @call_weak_fn with noreturn

00000600: sub abort()


000001ef:
000004bd: R16 := 0x11000
000004c4: R17 := mem[R16 + 0x18, el]:u64
000004ca: R16 := R16 + 0x18
000004cf: call R17 with noreturn

00000601: sub call_weak_fn(call_weak_fn_result)
00000634: call_weak_fn_result :: out u32 = low:32[R0]

000001f3:
000001f6: R0 := 0x10000
000001fd: R0 := mem[R0 + 0xFD0, el]:u64
00000203: when R0 = 0 goto %00000201
00000624: goto %000003d9

00000201:
00000209: call R30 with noreturn

000003d9:
000003dc: goto @__gmon_start__

000003da:
000004a7: R16 := 0x11000
000004ae: R17 := mem[R16 + 0x10, el]:u64
000004b4: R16 := R16 + 0x10
000004b9: call R17 with noreturn

00000603: sub deregister_tm_clones(deregister_tm_clones_result)
00000635: deregister_tm_clones_result :: out u32 = low:32[R0]

0000020f:
00000212: R0 := 0x11000
00000218: R0 := R0 + 0x30
0000021d: R1 := 0x11000
00000223: R1 := R1 + 0x30
00000229: #1 := ~R0
0000022e: #2 := R1 + ~R0
00000234: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023e: ZF := #2 + 1 = 0
00000242: NF := 63:63[#2 + 1]
00000248: when ZF goto %00000246
00000625: goto %000003bb

000003bb:
000003be: R1 := 0x10000
000003c5: R1 := mem[R1 + 0xFC0, el]:u64
000003ca: when R1 = 0 goto %00000246
00000626: goto %000003ce

00000246:
0000024e: call R30 with noreturn

000003ce:
000003d2: R16 := R1
000003d7: call R16 with noreturn

00000606: sub frame_dummy(frame_dummy_result)
00000636: frame_dummy_result :: out u32 = low:32[R0]

000002e6:
000002e8: call @register_tm_clones with noreturn

00000607: sub main(main_argc, main_argv, main_result)
00000637: main_argc :: in u32 = low:32[R0]
00000638: main_argv :: in out u64 = R1
00000639: main_result :: out u32 = low:32[R0]

000002f4:
000002f8: R31 := R31 - 0x20
000002fe: #4 := R31 + 0x10
00000304: mem := mem with [#4, el]:u64 <- R29
0000030a: mem := mem with [#4 + 8, el]:u64 <- R30
00000310: R29 := R31 + 0x10
00000318: mem := mem with [R29 - 4, el]:u32 <- 31:0[R0]
0000031d: R30 := 0x730
0000031f: call @zero with return %00000321

00000321:
00000324: R8 := 0x11000
0000032c: mem := mem with [R8 + 0x34, el]:u32 <- 31:0[R0]
00000333: R8 := pad:64[mem[R29 - 4, el]:u32]
00000338: R9 := 0x11000
00000340: mem := mem with [R9 + 0x38, el]:u32 <- 31:0[R8]
00000345: R0 := 0
0000034b: #5 := R31 + 0x10
00000350: R29 := mem[#5, el]:u64
00000355: R30 := mem[#5 + 8, el]:u64
0000035b: R31 := R31 + 0x20
00000360: call R30 with noreturn

00000608: sub register_tm_clones(register_tm_clones_result)
0000063a: register_tm_clones_result :: out u32 = low:32[R0]

00000250:
00000253: R0 := 0x11000
00000259: R0 := R0 + 0x30
0000025e: R1 := 0x11000
00000264: R1 := R1 + 0x30
0000026b: R1 := R1 + ~R0 + 1
00000271: R2 := 0.63:63[R1]
00000278: R1 := R2 + (R1 ~>> 3)
0000027e: R1 := extend:64[63:1[R1]]
00000284: when R1 = 0 goto %00000282
00000627: goto %0000039d

0000039d:
000003a0: R2 := 0x10000
000003a7: R2 := mem[R2 + 0xFE0, el]:u64
000003ac: when R2 = 0 goto %00000282
00000628: goto %000003b0

00000282:
0000028a: call R30 with noreturn

000003b0:
000003b4: R16 := R2
000003b9: call R16 with noreturn

0000060b: sub zero(zero_result)
0000063b: zero_result :: out u32 = low:32[R0]

000002ea:
000002ed: R0 := 0
000002f2: call R30 with noreturn
