var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_R9: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $R8: bv64;
var {:extern} $R9: bv64;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69684bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69688bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  (if (bvsge64(#index, $y_addr) && bvslt64(#index, bvadd64($y_addr, 4bv64))) then (memory_load32_le(#mem$in, $x_addr) == 1bv32) else (if (bvsge64(#index, $x_addr) && bvslt64(#index, bvadd64($x_addr, 4bv64))) then true else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsge"} bvsge64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvslt"} bvslt64(bv64, bv64) returns (bool);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures (forall #i: bv64::  ((($mem[#i] == old($mem[#i])) ==> ($Gamma_mem[#i] == old($Gamma_mem[#i])))));
  ensures (memory_load32_le($mem, $x_addr) == old(memory_load32_le($mem, $x_addr)));
  ensures (memory_load32_le($mem, $y_addr) == old(memory_load32_le($mem, $y_addr)));
  free ensures (memory_load32_le($mem, 1896bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1820bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures (memory_load32_le($mem, $x_addr) == old(memory_load32_le($mem, $x_addr)));
  ensures (memory_load32_le($mem, $y_addr) == old(memory_load32_le($mem, $y_addr)));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

implementation {:extern} p$rely_reflexive()
{
  assert (memory_load32_le($mem, $x_addr) == memory_load32_le($mem, $x_addr));
  assert (memory_load32_le($mem, $y_addr) == memory_load32_le($mem, $y_addr));
}

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

implementation {:extern} p$guarantee_reflexive()
{
  assert ((memory_load32_le($mem, $x_addr) == 0bv32) ==> (memory_load32_le($mem, $x_addr) == 0bv32));
  assert (gamma_load32($Gamma_mem, $y_addr) ==> ((memory_load32_le($mem, $x_addr) == 0bv32) || gamma_load32($Gamma_mem, $y_addr)));
}

procedure p$zero_1812();
  modifies $Gamma_R0, $R0;
  free requires (memory_load32_le($mem, 1896bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1820bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  ensures (($R0[32:0] == 0bv32) && $Gamma_R0);
  free ensures (memory_load32_le($mem, 1896bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1820bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

implementation p$zero_1812()
{
  b#zero_entry:
    assume {:captureState "zero_entry"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    goto b#zero_basil_return_1;
  b#zero_basil_return_1:
    assume {:captureState "zero_basil_return_1"} true;
    return;
}

procedure p$main_1820();
  modifies $Gamma_R0, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_R8, $Gamma_R9, $Gamma_mem, $Gamma_stack, $R0, $R29, $R30, $R31, $R8, $R9, $mem, $stack;
  requires ($Gamma_R0 == false);
  free requires (memory_load64_le($mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le($mem, 1896bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1820bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 1896bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1820bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

implementation p$main_1820()
{
  var ##4: bv64;
  var ##5: bv64;
  var #Gamma_#4: bool;
  var #Gamma_#5: bool;
  var #Gamma_load18: bool;
  var #Gamma_load19: bool;
  var #Gamma_load20: bool;
  var #Gamma_y_old: bool;
  var #load18: bv32;
  var #load19: bv64;
  var #load20: bv64;
  var #x_old: bv32;
  b#main_entry:
    assume {:captureState "main_entry"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551584bv64), $Gamma_R31;
    ##4, #Gamma_#4 := bvadd64($R31, 16bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, ##4, $R29), gamma_store64($Gamma_stack, ##4, $Gamma_R29);
    assume {:captureState "%00000304"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(##4, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(##4, 8bv64), $Gamma_R30);
    assume {:captureState "%0000030a"} true;
    $R29, $Gamma_R29 := bvadd64($R31, 16bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R29, 18446744073709551612bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R29, 18446744073709551612bv64), $Gamma_R0);
    assume {:captureState "%00000318"} true;
    $R30, $Gamma_R30 := 1840bv64, true;
    call p$zero_1812();
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3"} true;
    $R8, $Gamma_R8 := 69632bv64, true;
    call p$rely();
    #x_old := memory_load32_le($mem, $x_addr);
    #Gamma_y_old := (gamma_load32($Gamma_mem, $y_addr) || L($mem, $y_addr));
    assert (L($mem, bvadd64($R8, 52bv64)) ==> $Gamma_R0);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R8, 52bv64), $R0[32:0]), gamma_store32($Gamma_mem, bvadd64($R8, 52bv64), $Gamma_R0);
    assert ((bvadd64($R8, 52bv64) == $x_addr) ==> (L($mem, $y_addr) ==> #Gamma_y_old));
    assert ((#x_old == 0bv32) ==> (memory_load32_le($mem, $x_addr) == 0bv32));
    assert (#Gamma_y_old ==> ((memory_load32_le($mem, $x_addr) == 0bv32) || gamma_load32($Gamma_mem, $y_addr)));
    assume {:captureState "%0000032c"} true;
    #load18, #Gamma_load18 := memory_load32_le($stack, bvadd64($R29, 18446744073709551612bv64)), gamma_load32($Gamma_stack, bvadd64($R29, 18446744073709551612bv64));
    $R8, $Gamma_R8 := zero_extend32_32(#load18), #Gamma_load18;
    $R9, $Gamma_R9 := 69632bv64, true;
    call p$rely();
    #x_old := memory_load32_le($mem, $x_addr);
    #Gamma_y_old := (gamma_load32($Gamma_mem, $y_addr) || L($mem, $y_addr));
    assert (L($mem, bvadd64($R9, 56bv64)) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R9, 56bv64), $R8[32:0]), gamma_store32($Gamma_mem, bvadd64($R9, 56bv64), $Gamma_R8);
    assert ((bvadd64($R9, 56bv64) == $x_addr) ==> (L($mem, $y_addr) ==> #Gamma_y_old));
    assert ((#x_old == 0bv32) ==> (memory_load32_le($mem, $x_addr) == 0bv32));
    assert (#Gamma_y_old ==> ((memory_load32_le($mem, $x_addr) == 0bv32) || gamma_load32($Gamma_mem, $y_addr)));
    assume {:captureState "%00000340"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    ##5, #Gamma_#5 := bvadd64($R31, 16bv64), $Gamma_R31;
    #load19, #Gamma_load19 := memory_load64_le($stack, ##5), gamma_load64($Gamma_stack, ##5);
    $R29, $Gamma_R29 := #load19, #Gamma_load19;
    #load20, #Gamma_load20 := memory_load64_le($stack, bvadd64(##5, 8bv64)), gamma_load64($Gamma_stack, bvadd64(##5, 8bv64));
    $R30, $Gamma_R30 := #load20, #Gamma_load20;
    $R31, $Gamma_R31 := bvadd64($R31, 32bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

