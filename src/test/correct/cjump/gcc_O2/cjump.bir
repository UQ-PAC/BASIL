000005ee: program
000005bc: sub __cxa_finalize(__cxa_finalize_result)
000005ef: __cxa_finalize_result :: out u32 = low:32[R0]

00000360:
00000458: R16 := 0x10000
0000045f: R17 := mem[R16 + 0xFB8, el]:u64
00000465: R16 := R16 + 0xFB8
0000046a: call R17 with noreturn

000005bd: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005f0: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002cd:
000002d1: #3 := R31 - 0x20
000002d7: mem := mem with [#3, el]:u64 <- R29
000002dd: mem := mem with [#3 + 8, el]:u64 <- R30
000002e1: R31 := #3
000002e7: R29 := R31
000002ef: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002f4: R19 := 0x11000
000002fb: R0 := pad:64[mem[R19 + 0x10]]
00000302: when 31:0[R0] <> 0 goto %00000300
000005e4: goto %00000329

00000329:
0000032c: R0 := 0x10000
00000333: R0 := mem[R0 + 0xFE0, el]:u64
00000339: when R0 = 0 goto %00000337
000005e5: goto %00000350

00000350:
00000353: R0 := 0x11000
0000035a: R0 := mem[R0 + 8, el]:u64
0000035f: R30 := 0x730
00000362: call @__cxa_finalize with return %00000337

00000337:
0000033f: R30 := 0x734
00000341: call @deregister_tm_clones with return %00000343

00000343:
00000346: R0 := 1
0000034e: mem := mem with [R19 + 0x10] <- 7:0[R0]
000005e6: goto %00000300

00000300:
0000030a: R19 := mem[R31 + 0x10, el]:u64
00000311: R29 := mem[R31, el]:u64
00000316: R30 := mem[R31 + 8, el]:u64
0000031a: R31 := R31 + 0x20
0000031f: call R30 with noreturn

000005c1: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005f1: __libc_start_main_main :: in u64 = R0
000005f2: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005f3: __libc_start_main_arg3 :: in out u64 = R2
000005f4: __libc_start_main_auxv :: in out u64 = R3
000005f5: __libc_start_main_result :: out u32 = low:32[R0]

00000226:
00000442: R16 := 0x10000
00000449: R17 := mem[R16 + 0xFB0, el]:u64
0000044f: R16 := R16 + 0xFB0
00000454: call R17 with noreturn

000005c2: sub _fini(_fini_result)
000005f6: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005c3: sub _init(_init_result)
000005f7: _init_result :: out u32 = low:32[R0]

0000050e:
00000514: #5 := R31 - 0x10
0000051a: mem := mem with [#5, el]:u64 <- R29
00000520: mem := mem with [#5 + 8, el]:u64 <- R30
00000524: R31 := #5
0000052a: R29 := R31
0000052f: R30 := 0x590
00000531: call @call_weak_fn with return %00000533

00000533:
00000538: R29 := mem[R31, el]:u64
0000053d: R30 := mem[R31 + 8, el]:u64
00000541: R31 := R31 + 0x10
00000546: call R30 with noreturn

000005c4: sub _start(_start_result)
000005f8: _start_result :: out u32 = low:32[R0]

000001e7:
000001ec: R29 := 0
000001f1: R30 := 0
000001f7: R5 := R0
000001fe: R1 := mem[R31, el]:u64
00000204: R2 := R31 + 8
0000020a: R6 := R31
0000020f: R0 := 0x10000
00000216: R0 := mem[R0 + 0xFF0, el]:u64
0000021b: R3 := 0
00000220: R4 := 0
00000225: R30 := 0x670
00000228: call @__libc_start_main with return %0000022a

0000022a:
0000022d: R30 := 0x674
00000230: call @abort with return %000005e7

000005e7:
000005e8: call @call_weak_fn with noreturn

000005c7: sub abort()


0000022e:
00000484: R16 := 0x10000
0000048b: R17 := mem[R16 + 0xFC8, el]:u64
00000491: R16 := R16 + 0xFC8
00000496: call R17 with noreturn

000005c8: sub call_weak_fn(call_weak_fn_result)
000005f9: call_weak_fn_result :: out u32 = low:32[R0]

00000232:
00000235: R0 := 0x10000
0000023c: R0 := mem[R0 + 0xFE8, el]:u64
00000242: when R0 = 0 goto %00000240
000005e9: goto %000003a0

00000240:
00000248: call R30 with noreturn

000003a0:
000003a3: goto @__gmon_start__

000003a1:
0000046e: R16 := 0x10000
00000475: R17 := mem[R16 + 0xFC0, el]:u64
0000047b: R16 := R16 + 0xFC0
00000480: call R17 with noreturn

000005ca: sub deregister_tm_clones(deregister_tm_clones_result)
000005fa: deregister_tm_clones_result :: out u32 = low:32[R0]

0000024e:
00000251: R0 := 0x11000
00000257: R0 := R0 + 0x10
0000025c: R1 := 0x11000
00000262: R1 := R1 + 0x10
00000268: #1 := ~R0
0000026d: #2 := R1 + ~R0
00000273: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000279: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000027d: ZF := #2 + 1 = 0
00000281: NF := 63:63[#2 + 1]
00000287: when ZF goto %00000285
000005ea: goto %00000382

00000382:
00000385: R1 := 0x10000
0000038c: R1 := mem[R1 + 0xFD8, el]:u64
00000391: when R1 = 0 goto %00000285
000005eb: goto %00000395

00000285:
0000028d: call R30 with noreturn

00000395:
00000399: R16 := R1
0000039e: call R16 with noreturn

000005cd: sub frame_dummy(frame_dummy_result)
000005fb: frame_dummy_result :: out u32 = low:32[R0]

00000325:
00000327: call @register_tm_clones with noreturn

000005ce: sub main(main_argc, main_argv, main_result)
000005fc: main_argc :: in u32 = low:32[R0]
000005fd: main_argv :: in out u64 = R1
000005fe: main_result :: out u32 = low:32[R0]

000001a8:
000001ab: R0 := 0x11000
000001b1: R1 := R0 + 0x14
000001b6: R3 := 1
000001bb: R2 := 3
000001c3: mem := mem with [R0 + 0x14, el]:u32 <- 31:0[R3]
000001c8: R0 := 0
000001d0: mem := mem with [R1 + 4, el]:u32 <- 31:0[R2]
000001d5: call R30 with noreturn

000005cf: sub register_tm_clones(register_tm_clones_result)
000005ff: register_tm_clones_result :: out u32 = low:32[R0]

0000028f:
00000292: R0 := 0x11000
00000298: R0 := R0 + 0x10
0000029d: R1 := 0x11000
000002a3: R1 := R1 + 0x10
000002aa: R1 := R1 + ~R0 + 1
000002b0: R2 := 0.63:63[R1]
000002b7: R1 := R2 + (R1 ~>> 3)
000002bd: R1 := extend:64[63:1[R1]]
000002c3: when R1 = 0 goto %000002c1
000005ec: goto %00000364

00000364:
00000367: R2 := 0x10000
0000036e: R2 := mem[R2 + 0xFF8, el]:u64
00000373: when R2 = 0 goto %000002c1
000005ed: goto %00000377

000002c1:
000002c9: call R30 with noreturn

00000377:
0000037b: R16 := R2
00000380: call R16 with noreturn
