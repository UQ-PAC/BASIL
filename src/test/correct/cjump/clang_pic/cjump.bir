00000613: program
000005df: sub __cxa_finalize(__cxa_finalize_result)
00000614: __cxa_finalize_result :: out u32 = low:32[R0]

000003f0:
000004e8: R16 := 0x11000
000004ef: R17 := mem[R16 + 8, el]:u64
000004f5: R16 := R16 + 8
000004fa: call R17 with noreturn

000005e0: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000615: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002ae:
000002b2: #3 := R31 - 0x20
000002b8: mem := mem with [#3, el]:u64 <- R29
000002be: mem := mem with [#3 + 8, el]:u64 <- R30
000002c2: R31 := #3
000002c8: R29 := R31
000002d0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002d5: R19 := 0x11000
000002dc: R0 := pad:64[mem[R19 + 0x30]]
000002e3: when 31:0[R0] <> 0 goto %000002e1
00000608: goto %000003b9

000003b9:
000003bc: R0 := 0x10000
000003c3: R0 := mem[R0 + 0xFB8, el]:u64
000003c9: when R0 = 0 goto %000003c7
00000609: goto %000003e0

000003e0:
000003e3: R0 := 0x11000
000003ea: R0 := mem[R0 + 0x28, el]:u64
000003ef: R30 := 0x730
000003f2: call @__cxa_finalize with return %000003c7

000003c7:
000003cf: R30 := 0x734
000003d1: call @deregister_tm_clones with return %000003d3

000003d3:
000003d6: R0 := 1
000003de: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000060a: goto %000002e1

000002e1:
000002eb: R19 := mem[R31 + 0x10, el]:u64
000002f2: R29 := mem[R31, el]:u64
000002f7: R30 := mem[R31 + 8, el]:u64
000002fb: R31 := R31 + 0x20
00000300: call R30 with noreturn

000005e4: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000616: __libc_start_main_main :: in u64 = R0
00000617: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000618: __libc_start_main_arg3 :: in out u64 = R2
00000619: __libc_start_main_auxv :: in out u64 = R3
0000061a: __libc_start_main_result :: out u32 = low:32[R0]

00000207:
000004d2: R16 := 0x11000
000004d9: R17 := mem[R16, el]:u64
000004df: R16 := R16
000004e4: call R17 with noreturn

000005e5: sub _fini(_fini_result)
0000061b: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005e6: sub _init(_init_result)
0000061c: _init_result :: out u32 = low:32[R0]

00000542:
00000548: #6 := R31 - 0x10
0000054e: mem := mem with [#6, el]:u64 <- R29
00000554: mem := mem with [#6 + 8, el]:u64 <- R30
00000558: R31 := #6
0000055e: R29 := R31
00000563: R30 := 0x5C0
00000565: call @call_weak_fn with return %00000567

00000567:
0000056c: R29 := mem[R31, el]:u64
00000571: R30 := mem[R31 + 8, el]:u64
00000575: R31 := R31 + 0x10
0000057a: call R30 with noreturn

000005e7: sub _start(_start_result)
0000061d: _start_result :: out u32 = low:32[R0]

000001c8:
000001cd: R29 := 0
000001d2: R30 := 0
000001d8: R5 := R0
000001df: R1 := mem[R31, el]:u64
000001e5: R2 := R31 + 8
000001eb: R6 := R31
000001f0: R0 := 0x10000
000001f7: R0 := mem[R0 + 0xFD8, el]:u64
000001fc: R3 := 0
00000201: R4 := 0
00000206: R30 := 0x670
00000209: call @__libc_start_main with return %0000020b

0000020b:
0000020e: R30 := 0x674
00000211: call @abort with return %0000060b

0000060b:
0000060c: call @call_weak_fn with noreturn

000005ea: sub abort()


0000020f:
00000514: R16 := 0x11000
0000051b: R17 := mem[R16 + 0x18, el]:u64
00000521: R16 := R16 + 0x18
00000526: call R17 with noreturn

000005eb: sub call_weak_fn(call_weak_fn_result)
0000061e: call_weak_fn_result :: out u32 = low:32[R0]

00000213:
00000216: R0 := 0x10000
0000021d: R0 := mem[R0 + 0xFC8, el]:u64
00000223: when R0 = 0 goto %00000221
0000060d: goto %00000430

00000221:
00000229: call R30 with noreturn

00000430:
00000433: goto @__gmon_start__

00000431:
000004fe: R16 := 0x11000
00000505: R17 := mem[R16 + 0x10, el]:u64
0000050b: R16 := R16 + 0x10
00000510: call R17 with noreturn

000005ed: sub deregister_tm_clones(deregister_tm_clones_result)
0000061f: deregister_tm_clones_result :: out u32 = low:32[R0]

0000022f:
00000232: R0 := 0x11000
00000238: R0 := R0 + 0x30
0000023d: R1 := 0x11000
00000243: R1 := R1 + 0x30
00000249: #1 := ~R0
0000024e: #2 := R1 + ~R0
00000254: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000025a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000025e: ZF := #2 + 1 = 0
00000262: NF := 63:63[#2 + 1]
00000268: when ZF goto %00000266
0000060e: goto %00000412

00000412:
00000415: R1 := 0x10000
0000041c: R1 := mem[R1 + 0xFB0, el]:u64
00000421: when R1 = 0 goto %00000266
0000060f: goto %00000425

00000266:
0000026e: call R30 with noreturn

00000425:
00000429: R16 := R1
0000042e: call R16 with noreturn

000005f0: sub frame_dummy(frame_dummy_result)
00000620: frame_dummy_result :: out u32 = low:32[R0]

00000306:
00000308: call @register_tm_clones with noreturn

000005f1: sub main(main_argc, main_argv, main_result)
00000621: main_argc :: in u32 = low:32[R0]
00000622: main_argv :: in out u64 = R1
00000623: main_result :: out u32 = low:32[R0]

0000030a:
0000030e: R31 := R31 - 0x10
00000315: mem := mem with [R31 + 0xC, el]:u32 <- 0
0000031a: R8 := 0x10000
00000321: R8 := mem[R8 + 0xFC0, el]:u64
00000326: R9 := 1
0000032e: mem := mem with [R8, el]:u32 <- 31:0[R9]
00000335: R8 := pad:64[mem[R8, el]:u32]
0000033b: #4 := 31:0[R8] - 1
00000340: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000345: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000349: ZF := #4 + 1 = 0
0000034d: NF := 31:31[#4 + 1]
00000351: R8 := pad:64[#4 + 1]
0000035d: when ZF <> 1 goto %00000356
0000035e: goto %00000359

00000359:
0000035a: R8 := 1
00000360: goto %0000035c

00000356:
00000357: R8 := 0
0000035f: goto %0000035c

0000035c:
00000366: when 0:0[R8] goto %00000364
00000610: goto %00000398

00000364:
0000036c: R9 := 0x10000
00000373: R9 := mem[R9 + 0xFD0, el]:u64
00000378: R8 := 2
00000380: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000385: goto %00000383

00000398:
0000039b: goto %00000399

00000399:
0000039f: R8 := 3
000003a4: R9 := 0x10000
000003ab: R9 := mem[R9 + 0xFD0, el]:u64
000003b3: mem := mem with [R9, el]:u32 <- 31:0[R8]
000003b7: goto %00000383

00000383:
0000038b: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000391: R31 := R31 + 0x10
00000396: call R30 with noreturn

000005f3: sub register_tm_clones(register_tm_clones_result)
00000624: register_tm_clones_result :: out u32 = low:32[R0]

00000270:
00000273: R0 := 0x11000
00000279: R0 := R0 + 0x30
0000027e: R1 := 0x11000
00000284: R1 := R1 + 0x30
0000028b: R1 := R1 + ~R0 + 1
00000291: R2 := 0.63:63[R1]
00000298: R1 := R2 + (R1 ~>> 3)
0000029e: R1 := extend:64[63:1[R1]]
000002a4: when R1 = 0 goto %000002a2
00000611: goto %000003f4

000003f4:
000003f7: R2 := 0x10000
000003fe: R2 := mem[R2 + 0xFE0, el]:u64
00000403: when R2 = 0 goto %000002a2
00000612: goto %00000407

000002a2:
000002aa: call R30 with noreturn

00000407:
0000040b: R16 := R2
00000410: call R16 with noreturn
