000005ad: program
0000057b: sub __cxa_finalize(__cxa_finalize_result)
000005ae: __cxa_finalize_result :: out u32 = low:32[R0]

0000032f:
00000427: R16 := 0x11000
0000042e: R17 := mem[R16 + 8, el]:u64
00000434: R16 := R16 + 8
00000439: call R17 with noreturn

0000057c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005af: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000026e:
00000272: #3 := R31 - 0x20
00000278: mem := mem with [#3, el]:u64 <- R29
0000027e: mem := mem with [#3 + 8, el]:u64 <- R30
00000282: R31 := #3
00000288: R29 := R31
00000290: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000295: R19 := 0x11000
0000029c: R0 := pad:64[mem[R19 + 0x30]]
000002a3: when 31:0[R0] <> 0 goto %000002a1
000005a3: goto %000002f8

000002f8:
000002fb: R0 := 0x10000
00000302: R0 := mem[R0 + 0xFC8, el]:u64
00000308: when R0 = 0 goto %00000306
000005a4: goto %0000031f

0000031f:
00000322: R0 := 0x11000
00000329: R0 := mem[R0 + 0x28, el]:u64
0000032e: R30 := 0x6F0
00000331: call @__cxa_finalize with return %00000306

00000306:
0000030e: R30 := 0x6F4
00000310: call @deregister_tm_clones with return %00000312

00000312:
00000315: R0 := 1
0000031d: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005a5: goto %000002a1

000002a1:
000002ab: R19 := mem[R31 + 0x10, el]:u64
000002b2: R29 := mem[R31, el]:u64
000002b7: R30 := mem[R31 + 8, el]:u64
000002bb: R31 := R31 + 0x20
000002c0: call R30 with noreturn

00000580: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005b0: __libc_start_main_main :: in u64 = R0
000005b1: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005b2: __libc_start_main_arg3 :: in out u64 = R2
000005b3: __libc_start_main_auxv :: in out u64 = R3
000005b4: __libc_start_main_result :: out u32 = low:32[R0]

000001c7:
00000411: R16 := 0x11000
00000418: R17 := mem[R16, el]:u64
0000041e: R16 := R16
00000423: call R17 with noreturn

00000581: sub _fini(_fini_result)
000005b5: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000582: sub _init(_init_result)
000005b6: _init_result :: out u32 = low:32[R0]

000004d5:
000004db: #5 := R31 - 0x10
000004e1: mem := mem with [#5, el]:u64 <- R29
000004e7: mem := mem with [#5 + 8, el]:u64 <- R30
000004eb: R31 := #5
000004f1: R29 := R31
000004f6: R30 := 0x590
000004f8: call @call_weak_fn with return %000004fa

000004fa:
000004ff: R29 := mem[R31, el]:u64
00000504: R30 := mem[R31 + 8, el]:u64
00000508: R31 := R31 + 0x10
0000050d: call R30 with noreturn

00000583: sub _start(_start_result)
000005b7: _start_result :: out u32 = low:32[R0]

00000188:
0000018d: R29 := 0
00000192: R30 := 0
00000198: R5 := R0
0000019f: R1 := mem[R31, el]:u64
000001a5: R2 := R31 + 8
000001ab: R6 := R31
000001b0: R0 := 0x10000
000001b7: R0 := mem[R0 + 0xFD8, el]:u64
000001bc: R3 := 0
000001c1: R4 := 0
000001c6: R30 := 0x630
000001c9: call @__libc_start_main with return %000001cb

000001cb:
000001ce: R30 := 0x634
000001d1: call @abort with return %000005a6

000005a6:
000005a7: call @call_weak_fn with noreturn

00000586: sub abort()


000001cf:
00000453: R16 := 0x11000
0000045a: R17 := mem[R16 + 0x18, el]:u64
00000460: R16 := R16 + 0x18
00000465: call R17 with noreturn

00000587: sub call_weak_fn(call_weak_fn_result)
000005b8: call_weak_fn_result :: out u32 = low:32[R0]

000001d3:
000001d6: R0 := 0x10000
000001dd: R0 := mem[R0 + 0xFD0, el]:u64
000001e3: when R0 = 0 goto %000001e1
000005a8: goto %0000036f

000001e1:
000001e9: call R30 with noreturn

0000036f:
00000372: goto @__gmon_start__

00000370:
0000043d: R16 := 0x11000
00000444: R17 := mem[R16 + 0x10, el]:u64
0000044a: R16 := R16 + 0x10
0000044f: call R17 with noreturn

00000589: sub deregister_tm_clones(deregister_tm_clones_result)
000005b9: deregister_tm_clones_result :: out u32 = low:32[R0]

000001ef:
000001f2: R0 := 0x11000
000001f8: R0 := R0 + 0x30
000001fd: R1 := 0x11000
00000203: R1 := R1 + 0x30
00000209: #1 := ~R0
0000020e: #2 := R1 + ~R0
00000214: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000021a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000021e: ZF := #2 + 1 = 0
00000222: NF := 63:63[#2 + 1]
00000228: when ZF goto %00000226
000005a9: goto %00000351

00000351:
00000354: R1 := 0x10000
0000035b: R1 := mem[R1 + 0xFC0, el]:u64
00000360: when R1 = 0 goto %00000226
000005aa: goto %00000364

00000226:
0000022e: call R30 with noreturn

00000364:
00000368: R16 := R1
0000036d: call R16 with noreturn

0000058c: sub frame_dummy(frame_dummy_result)
000005ba: frame_dummy_result :: out u32 = low:32[R0]

000002c6:
000002c8: call @register_tm_clones with noreturn

0000058d: sub main(main_argc, main_argv, main_result)
000005bb: main_argc :: in u32 = low:32[R0]
000005bc: main_argv :: in out u64 = R1
000005bd: main_result :: out u32 = low:32[R0]

000002ca:
000002cd: R0 := 0
000002d2: R8 := 0x11000
000002d7: R9 := 1
000002dc: R10 := 0x11000
000002e1: R11 := 3
000002e9: mem := mem with [R8 + 0x34, el]:u32 <- 31:0[R9]
000002f1: mem := mem with [R10 + 0x38, el]:u32 <- 31:0[R11]
000002f6: call R30 with noreturn

0000058e: sub register_tm_clones(register_tm_clones_result)
000005be: register_tm_clones_result :: out u32 = low:32[R0]

00000230:
00000233: R0 := 0x11000
00000239: R0 := R0 + 0x30
0000023e: R1 := 0x11000
00000244: R1 := R1 + 0x30
0000024b: R1 := R1 + ~R0 + 1
00000251: R2 := 0.63:63[R1]
00000258: R1 := R2 + (R1 ~>> 3)
0000025e: R1 := extend:64[63:1[R1]]
00000264: when R1 = 0 goto %00000262
000005ab: goto %00000333

00000333:
00000336: R2 := 0x10000
0000033d: R2 := mem[R2 + 0xFE0, el]:u64
00000342: when R2 = 0 goto %00000262
000005ac: goto %00000346

00000262:
0000026a: call R30 with noreturn

00000346:
0000034a: R16 := R2
0000034f: call R16 with noreturn
