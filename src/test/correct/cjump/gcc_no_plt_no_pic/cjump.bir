00000c72: program
00000c5a: sub __cxa_finalize(__cxa_finalize_result)
00000c73: __cxa_finalize_result :: out u32 = low:32[R0]

000009f6:
00000aee: R16 := 0x10000
00000af5: R17 := mem[R16 + 0xFB8, el]:u64
00000afb: R16 := R16 + 0xFB8
00000b00: call R17 with noreturn

00000c5b: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c74: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008dc:
000008e0: #3 := R31 - 0x20
000008e6: mem := mem with [#3, el]:u64 <- R29
000008ec: mem := mem with [#3 + 8, el]:u64 <- R30
000008f0: R31 := #3
000008f6: R29 := R31
000008fe: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000903: R19 := 0x11000
0000090a: R0 := pad:64[mem[R19 + 0x10]]
00000911: when 31:0[R0] <> 0 goto %0000090f
00000c5c: goto %000009bf

000009bf:
000009c2: R0 := 0x10000
000009c9: R0 := mem[R0 + 0xFE0, el]:u64
000009cf: when R0 = 0 goto %000009cd
00000c5d: goto %000009e6

000009e6:
000009e9: R0 := 0x11000
000009f0: R0 := mem[R0 + 8, el]:u64
000009f5: R30 := 0x6F0
000009f8: call @__cxa_finalize with return %000009cd

000009cd:
000009d5: R30 := 0x6F4
000009d7: call @deregister_tm_clones with return %000009d9

000009d9:
000009dc: R0 := 1
000009e4: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000c5e: goto %0000090f

0000090f:
00000919: R19 := mem[R31 + 0x10, el]:u64
00000920: R29 := mem[R31, el]:u64
00000925: R30 := mem[R31 + 8, el]:u64
00000929: R31 := R31 + 0x20
0000092e: call R30 with noreturn

00000c5f: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c75: __libc_start_main_main :: in u64 = R0
00000c76: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c77: __libc_start_main_arg3 :: in out u64 = R2
00000c78: __libc_start_main_auxv :: in out u64 = R3
00000c79: __libc_start_main_result :: out u32 = low:32[R0]

00000835:
00000ad8: R16 := 0x10000
00000adf: R17 := mem[R16 + 0xFB0, el]:u64
00000ae5: R16 := R16 + 0xFB0
00000aea: call R17 with noreturn

00000c60: sub _fini(_fini_result)
00000c7a: _fini_result :: out u32 = low:32[R0]

0000065d:
00000663: #0 := R31 - 0x10
00000669: mem := mem with [#0, el]:u64 <- R29
0000066f: mem := mem with [#0 + 8, el]:u64 <- R30
00000673: R31 := #0
00000679: R29 := R31
00000680: R29 := mem[R31, el]:u64
00000685: R30 := mem[R31 + 8, el]:u64
00000689: R31 := R31 + 0x10
0000068e: call R30 with noreturn

00000c61: sub _init(_init_result)
00000c7b: _init_result :: out u32 = low:32[R0]

00000ba8:
00000bae: #6 := R31 - 0x10
00000bb4: mem := mem with [#6, el]:u64 <- R29
00000bba: mem := mem with [#6 + 8, el]:u64 <- R30
00000bbe: R31 := #6
00000bc4: R29 := R31
00000bc9: R30 := 0x590
00000bcb: call @call_weak_fn with return %00000bcd

00000bcd:
00000bd2: R29 := mem[R31, el]:u64
00000bd7: R30 := mem[R31 + 8, el]:u64
00000bdb: R31 := R31 + 0x10
00000be0: call R30 with noreturn

00000c62: sub _start(_start_result)
00000c7c: _start_result :: out u32 = low:32[R0]

000007f6:
000007fb: R29 := 0
00000800: R30 := 0
00000806: R5 := R0
0000080d: R1 := mem[R31, el]:u64
00000813: R2 := R31 + 8
00000819: R6 := R31
0000081e: R0 := 0x10000
00000825: R0 := mem[R0 + 0xFF0, el]:u64
0000082a: R3 := 0
0000082f: R4 := 0
00000834: R30 := 0x630
00000837: call @__libc_start_main with return %00000839

00000839:
0000083c: R30 := 0x634
0000083f: call @abort with return %00000c63

00000c63:
00000c64: call @call_weak_fn with noreturn

00000c65: sub abort()


0000083d:
00000b1a: R16 := 0x10000
00000b21: R17 := mem[R16 + 0xFC8, el]:u64
00000b27: R16 := R16 + 0xFC8
00000b2c: call R17 with noreturn

00000c66: sub call_weak_fn(call_weak_fn_result)
00000c7d: call_weak_fn_result :: out u32 = low:32[R0]

00000841:
00000844: R0 := 0x10000
0000084b: R0 := mem[R0 + 0xFE8, el]:u64
00000851: when R0 = 0 goto %0000084f
00000c67: goto %00000a36

0000084f:
00000857: call R30 with noreturn

00000a36:
00000a39: goto @__gmon_start__

00000a37:
00000b04: R16 := 0x10000
00000b0b: R17 := mem[R16 + 0xFC0, el]:u64
00000b11: R16 := R16 + 0xFC0
00000b16: call R17 with noreturn

00000c68: sub deregister_tm_clones(deregister_tm_clones_result)
00000c7e: deregister_tm_clones_result :: out u32 = low:32[R0]

0000085d:
00000860: R0 := 0x11000
00000866: R0 := R0 + 0x10
0000086b: R1 := 0x11000
00000871: R1 := R1 + 0x10
00000877: #1 := ~R0
0000087c: #2 := R1 + ~R0
00000882: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000888: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000088c: ZF := #2 + 1 = 0
00000890: NF := 63:63[#2 + 1]
00000896: when ZF goto %00000894
00000c69: goto %00000a18

00000a18:
00000a1b: R1 := 0x10000
00000a22: R1 := mem[R1 + 0xFD8, el]:u64
00000a27: when R1 = 0 goto %00000894
00000c6a: goto %00000a2b

00000894:
0000089c: call R30 with noreturn

00000a2b:
00000a2f: R16 := R1
00000a34: call R16 with noreturn

00000c6b: sub frame_dummy(frame_dummy_result)
00000c7f: frame_dummy_result :: out u32 = low:32[R0]

00000934:
00000936: call @register_tm_clones with noreturn

00000c6c: sub main(main_argc, main_argv, main_result)
00000c80: main_argc :: in u32 = low:32[R0]
00000c81: main_argv :: in out u64 = R1
00000c82: main_result :: out u32 = low:32[R0]

00000938:
0000093b: R0 := 0x11000
00000941: R0 := R0 + 0x14
00000946: R1 := 1
0000094e: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000953: R0 := 0x11000
00000959: R0 := R0 + 0x14
00000960: R0 := pad:64[mem[R0, el]:u32]
00000966: #4 := 31:0[R0] - 1
0000096b: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
00000970: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000974: ZF := #4 + 1 = 0
00000978: NF := 31:31[#4 + 1]
0000097e: when ZF goto %0000097c
00000c6d: goto %000009a3

0000097c:
00000984: R0 := 0x11000
0000098a: R0 := R0 + 0x18
0000098f: R1 := 2
00000997: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000c6e: goto %00000999

000009a3:
000009a6: R0 := 0x11000
000009ac: R0 := R0 + 0x18
000009b1: R1 := 3
000009b9: mem := mem with [R0, el]:u32 <- 31:0[R1]
000009bd: goto %00000999

00000999:
0000099c: R0 := 0
000009a1: call R30 with noreturn

00000c6f: sub register_tm_clones(register_tm_clones_result)
00000c83: register_tm_clones_result :: out u32 = low:32[R0]

0000089e:
000008a1: R0 := 0x11000
000008a7: R0 := R0 + 0x10
000008ac: R1 := 0x11000
000008b2: R1 := R1 + 0x10
000008b9: R1 := R1 + ~R0 + 1
000008bf: R2 := 0.63:63[R1]
000008c6: R1 := R2 + (R1 ~>> 3)
000008cc: R1 := extend:64[63:1[R1]]
000008d2: when R1 = 0 goto %000008d0
00000c70: goto %000009fa

000009fa:
000009fd: R2 := 0x10000
00000a04: R2 := mem[R2 + 0xFF8, el]:u64
00000a09: when R2 = 0 goto %000008d0
00000c71: goto %00000a0d

000008d0:
000008d8: call R30 with noreturn

00000a0d:
00000a11: R16 := R2
00000a16: call R16 with noreturn
