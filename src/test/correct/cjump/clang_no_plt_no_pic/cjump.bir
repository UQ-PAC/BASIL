00000608: program
000005d4: sub __cxa_finalize(__cxa_finalize_result)
00000609: __cxa_finalize_result :: out u32 = low:32[R0]

000003cf:
000004c7: R16 := 0x20000
000004ce: R17 := mem[R16 + 8, el]:u64
000004d4: R16 := R16 + 8
000004d9: call R17 with noreturn

000005d5: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000060a: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002a3:
000002a7: #3 := R31 - 0x20
000002ad: mem := mem with [#3, el]:u64 <- R29
000002b3: mem := mem with [#3 + 8, el]:u64 <- R30
000002b7: R31 := #3
000002bd: R29 := R31
000002c5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ca: R19 := 0x20000
000002d1: R0 := pad:64[mem[R19 + 0x30]]
000002d7: when 0:0[R0] goto %000002d5
000005fd: goto %00000398

00000398:
0000039b: R0 := 0x1F000
000003a2: R0 := mem[R0 + 0xFC8, el]:u64
000003a8: when R0 = 0 goto %000003a6
000005fe: goto %000003bf

000003bf:
000003c2: R0 := 0x20000
000003c9: R0 := mem[R0 + 0x28, el]:u64
000003ce: R30 := 0x730
000003d1: call @__cxa_finalize with return %000003a6

000003a6:
000003ae: R30 := 0x734
000003b0: call @deregister_tm_clones with return %000003b2

000003b2:
000003b5: R0 := 1
000003bd: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005ff: goto %000002d5

000002d5:
000002df: R19 := mem[R31 + 0x10, el]:u64
000002e6: R29 := mem[R31, el]:u64
000002eb: R30 := mem[R31 + 8, el]:u64
000002ef: R31 := R31 + 0x20
000002f4: call R30 with noreturn

000005d9: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000060b: __libc_start_main_main :: in u64 = R0
0000060c: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000060d: __libc_start_main_arg3 :: in out u64 = R2
0000060e: __libc_start_main_auxv :: in out u64 = R3
0000060f: __libc_start_main_result :: out u32 = low:32[R0]

000001fc:
000004b1: R16 := 0x20000
000004b8: R17 := mem[R16, el]:u64
000004be: R16 := R16
000004c3: call R17 with noreturn

000005da: sub _fini(_fini_result)
00000610: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005db: sub _init(_init_result)
00000611: _init_result :: out u32 = low:32[R0]

00000521:
00000527: #6 := R31 - 0x10
0000052d: mem := mem with [#6, el]:u64 <- R29
00000533: mem := mem with [#6 + 8, el]:u64 <- R30
00000537: R31 := #6
0000053d: R29 := R31
00000542: R30 := 0x5C8
00000544: call @call_weak_fn with return %00000546

00000546:
0000054b: R29 := mem[R31, el]:u64
00000550: R30 := mem[R31 + 8, el]:u64
00000554: R31 := R31 + 0x10
00000559: call R30 with noreturn

000005dc: sub _start(_start_result)
00000612: _start_result :: out u32 = low:32[R0]

000001bd:
000001c2: R29 := 0
000001c7: R30 := 0
000001cd: R5 := R0
000001d4: R1 := mem[R31, el]:u64
000001da: R2 := R31 + 8
000001e0: R6 := R31
000001e5: R0 := 0x1F000
000001ec: R0 := mem[R0 + 0xFD8, el]:u64
000001f1: R3 := 0
000001f6: R4 := 0
000001fb: R30 := 0x670
000001fe: call @__libc_start_main with return %00000200

00000200:
00000203: R30 := 0x674
00000206: call @abort with return %00000600

00000600:
00000601: call @call_weak_fn with noreturn

000005df: sub abort()


00000204:
000004f3: R16 := 0x20000
000004fa: R17 := mem[R16 + 0x18, el]:u64
00000500: R16 := R16 + 0x18
00000505: call R17 with noreturn

000005e0: sub call_weak_fn(call_weak_fn_result)
00000613: call_weak_fn_result :: out u32 = low:32[R0]

00000208:
0000020b: R0 := 0x1F000
00000212: R0 := mem[R0 + 0xFD0, el]:u64
00000218: when R0 = 0 goto %00000216
00000602: goto %0000040f

00000216:
0000021e: call R30 with noreturn

0000040f:
00000412: goto @__gmon_start__

00000410:
000004dd: R16 := 0x20000
000004e4: R17 := mem[R16 + 0x10, el]:u64
000004ea: R16 := R16 + 0x10
000004ef: call R17 with noreturn

000005e2: sub deregister_tm_clones(deregister_tm_clones_result)
00000614: deregister_tm_clones_result :: out u32 = low:32[R0]

00000224:
00000227: R0 := 0x20000
0000022d: R0 := R0 + 0x30
00000232: R1 := 0x20000
00000238: R1 := R1 + 0x30
0000023e: #1 := ~R0
00000243: #2 := R1 + ~R0
00000249: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000253: ZF := #2 + 1 = 0
00000257: NF := 63:63[#2 + 1]
0000025d: when ZF goto %0000025b
00000603: goto %000003f1

000003f1:
000003f4: R1 := 0x1F000
000003fb: R1 := mem[R1 + 0xFC0, el]:u64
00000400: when R1 = 0 goto %0000025b
00000604: goto %00000404

0000025b:
00000263: call R30 with noreturn

00000404:
00000408: R16 := R1
0000040d: call R16 with noreturn

000005e5: sub frame_dummy(frame_dummy_result)
00000615: frame_dummy_result :: out u32 = low:32[R0]

000002fa:
000002fc: call @register_tm_clones with noreturn

000005e6: sub main(main_argc, main_argv, main_result)
00000616: main_argc :: in u32 = low:32[R0]
00000617: main_argv :: in out u64 = R1
00000618: main_result :: out u32 = low:32[R0]

000002fe:
00000302: R31 := R31 - 0x10
00000309: mem := mem with [R31 + 0xC, el]:u32 <- 0
0000030e: R8 := 0x20000
00000313: R9 := 1
0000031b: mem := mem with [R8 + 0x34, el]:u32 <- 31:0[R9]
00000322: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000328: #4 := 31:0[R8] - 1
0000032d: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000332: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000336: ZF := #4 + 1 = 0
0000033a: NF := 31:31[#4 + 1]
0000033e: R8 := pad:64[#4 + 1]
0000034a: when ZF <> 1 goto %00000343
0000034b: goto %00000346

00000346:
00000347: R8 := 1
0000034d: goto %00000349

00000343:
00000344: R8 := 0
0000034c: goto %00000349

00000349:
00000353: when 0:0[R8] goto %00000351
00000605: goto %0000037e

00000351:
00000359: R9 := 0x20000
0000035e: R8 := 2
00000366: mem := mem with [R9 + 0x38, el]:u32 <- 31:0[R8]
0000036b: goto %00000369

0000037e:
00000381: goto %0000037f

0000037f:
00000385: R8 := 3
0000038a: R9 := 0x20000
00000392: mem := mem with [R9 + 0x38, el]:u32 <- 31:0[R8]
00000396: goto %00000369

00000369:
00000371: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000377: R31 := R31 + 0x10
0000037c: call R30 with noreturn

000005e8: sub register_tm_clones(register_tm_clones_result)
00000619: register_tm_clones_result :: out u32 = low:32[R0]

00000265:
00000268: R0 := 0x20000
0000026e: R0 := R0 + 0x30
00000273: R1 := 0x20000
00000279: R1 := R1 + 0x30
00000280: R1 := R1 + ~R0 + 1
00000286: R2 := 0.63:63[R1]
0000028d: R1 := R2 + (R1 ~>> 3)
00000293: R1 := extend:64[63:1[R1]]
00000299: when R1 = 0 goto %00000297
00000606: goto %000003d3

000003d3:
000003d6: R2 := 0x1F000
000003dd: R2 := mem[R2 + 0xFE0, el]:u64
000003e2: when R2 = 0 goto %00000297
00000607: goto %000003e6

00000297:
0000029f: call R30 with noreturn

000003e6:
000003ea: R16 := R2
000003ef: call R16 with noreturn
