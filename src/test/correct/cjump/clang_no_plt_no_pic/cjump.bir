00000ca2: program
00000c8b: sub __cxa_finalize(__cxa_finalize_result)
00000ca3: __cxa_finalize_result :: out u32 = low:32[R0]

00000a25:
00000b1d: R16 := 0x11000
00000b24: R17 := mem[R16 + 8, el]:u64
00000b2a: R16 := R16 + 8
00000b2f: call R17 with noreturn

00000c8c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000ca4: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008f8:
000008fc: #3 := R31 - 0x20
00000902: mem := mem with [#3, el]:u64 <- R29
00000908: mem := mem with [#3 + 8, el]:u64 <- R30
0000090c: R31 := #3
00000912: R29 := R31
0000091a: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000091f: R19 := 0x11000
00000926: R0 := pad:64[mem[R19 + 0x30]]
0000092d: when 31:0[R0] <> 0 goto %0000092b
00000c8d: goto %000009ee

000009ee:
000009f1: R0 := 0x10000
000009f8: R0 := mem[R0 + 0xFC8, el]:u64
000009fe: when R0 = 0 goto %000009fc
00000c8e: goto %00000a15

00000a15:
00000a18: R0 := 0x11000
00000a1f: R0 := mem[R0 + 0x28, el]:u64
00000a24: R30 := 0x6F0
00000a27: call @__cxa_finalize with return %000009fc

000009fc:
00000a04: R30 := 0x6F4
00000a06: call @deregister_tm_clones with return %00000a08

00000a08:
00000a0b: R0 := 1
00000a13: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000c8f: goto %0000092b

0000092b:
00000935: R19 := mem[R31 + 0x10, el]:u64
0000093c: R29 := mem[R31, el]:u64
00000941: R30 := mem[R31 + 8, el]:u64
00000945: R31 := R31 + 0x20
0000094a: call R30 with noreturn

00000c90: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000ca5: __libc_start_main_main :: in u64 = R0
00000ca6: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000ca7: __libc_start_main_arg3 :: in out u64 = R2
00000ca8: __libc_start_main_auxv :: in out u64 = R3
00000ca9: __libc_start_main_result :: out u32 = low:32[R0]

00000851:
00000b07: R16 := 0x11000
00000b0e: R17 := mem[R16, el]:u64
00000b14: R16 := R16
00000b19: call R17 with noreturn

00000c91: sub _fini(_fini_result)
00000caa: _fini_result :: out u32 = low:32[R0]

00000675:
0000067b: #0 := R31 - 0x10
00000681: mem := mem with [#0, el]:u64 <- R29
00000687: mem := mem with [#0 + 8, el]:u64 <- R30
0000068b: R31 := #0
00000691: R29 := R31
00000698: R29 := mem[R31, el]:u64
0000069d: R30 := mem[R31 + 8, el]:u64
000006a1: R31 := R31 + 0x10
000006a6: call R30 with noreturn

00000c92: sub _init(_init_result)
00000cab: _init_result :: out u32 = low:32[R0]

00000bd8:
00000bde: #6 := R31 - 0x10
00000be4: mem := mem with [#6, el]:u64 <- R29
00000bea: mem := mem with [#6 + 8, el]:u64 <- R30
00000bee: R31 := #6
00000bf4: R29 := R31
00000bf9: R30 := 0x590
00000bfb: call @call_weak_fn with return %00000bfd

00000bfd:
00000c02: R29 := mem[R31, el]:u64
00000c07: R30 := mem[R31 + 8, el]:u64
00000c0b: R31 := R31 + 0x10
00000c10: call R30 with noreturn

00000c93: sub _start(_start_result)
00000cac: _start_result :: out u32 = low:32[R0]

00000812:
00000817: R29 := 0
0000081c: R30 := 0
00000822: R5 := R0
00000829: R1 := mem[R31, el]:u64
0000082f: R2 := R31 + 8
00000835: R6 := R31
0000083a: R0 := 0x10000
00000841: R0 := mem[R0 + 0xFD8, el]:u64
00000846: R3 := 0
0000084b: R4 := 0
00000850: R30 := 0x630
00000853: call @__libc_start_main with return %00000855

00000855:
00000858: R30 := 0x634
0000085b: call @abort with return %00000c94

00000c94:
00000c95: call @call_weak_fn with noreturn

00000c96: sub abort()


00000859:
00000b49: R16 := 0x11000
00000b50: R17 := mem[R16 + 0x18, el]:u64
00000b56: R16 := R16 + 0x18
00000b5b: call R17 with noreturn

00000c97: sub call_weak_fn(call_weak_fn_result)
00000cad: call_weak_fn_result :: out u32 = low:32[R0]

0000085d:
00000860: R0 := 0x10000
00000867: R0 := mem[R0 + 0xFD0, el]:u64
0000086d: when R0 = 0 goto %0000086b
00000c98: goto %00000a65

0000086b:
00000873: call R30 with noreturn

00000a65:
00000a68: goto @__gmon_start__

00000a66:
00000b33: R16 := 0x11000
00000b3a: R17 := mem[R16 + 0x10, el]:u64
00000b40: R16 := R16 + 0x10
00000b45: call R17 with noreturn

00000c99: sub deregister_tm_clones(deregister_tm_clones_result)
00000cae: deregister_tm_clones_result :: out u32 = low:32[R0]

00000879:
0000087c: R0 := 0x11000
00000882: R0 := R0 + 0x30
00000887: R1 := 0x11000
0000088d: R1 := R1 + 0x30
00000893: #1 := ~R0
00000898: #2 := R1 + ~R0
0000089e: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000008a4: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000008a8: ZF := #2 + 1 = 0
000008ac: NF := 63:63[#2 + 1]
000008b2: when ZF goto %000008b0
00000c9a: goto %00000a47

00000a47:
00000a4a: R1 := 0x10000
00000a51: R1 := mem[R1 + 0xFC0, el]:u64
00000a56: when R1 = 0 goto %000008b0
00000c9b: goto %00000a5a

000008b0:
000008b8: call R30 with noreturn

00000a5a:
00000a5e: R16 := R1
00000a63: call R16 with noreturn

00000c9c: sub frame_dummy(frame_dummy_result)
00000caf: frame_dummy_result :: out u32 = low:32[R0]

00000950:
00000952: call @register_tm_clones with noreturn

00000c9d: sub main(main_argc, main_argv, main_result)
00000cb0: main_argc :: in u32 = low:32[R0]
00000cb1: main_argv :: in out u64 = R1
00000cb2: main_result :: out u32 = low:32[R0]

00000954:
00000958: R31 := R31 - 0x10
0000095f: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000964: R8 := 0x11000
00000969: R9 := 1
00000971: mem := mem with [R8 + 0x34, el]:u32 <- 31:0[R9]
00000978: R8 := pad:64[mem[R8 + 0x34, el]:u32]
0000097e: #4 := 31:0[R8] - 1
00000983: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000988: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
0000098c: ZF := #4 + 1 = 0
00000990: NF := 31:31[#4 + 1]
00000994: R8 := pad:64[#4 + 1]
000009a0: when ZF <> 1 goto %00000999
000009a1: goto %0000099c

0000099c:
0000099d: R8 := 1
000009a3: goto %0000099f

00000999:
0000099a: R8 := 0
000009a2: goto %0000099f

0000099f:
000009a9: when 0:0[R8] goto %000009a7
00000c9e: goto %000009d4

000009a7:
000009af: R9 := 0x11000
000009b4: R8 := 2
000009bc: mem := mem with [R9 + 0x38, el]:u32 <- 31:0[R8]
000009c1: goto %000009bf

000009d4:
000009d7: goto %000009d5

000009d5:
000009db: R8 := 3
000009e0: R9 := 0x11000
000009e8: mem := mem with [R9 + 0x38, el]:u32 <- 31:0[R8]
000009ec: goto %000009bf

000009bf:
000009c7: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000009cd: R31 := R31 + 0x10
000009d2: call R30 with noreturn

00000c9f: sub register_tm_clones(register_tm_clones_result)
00000cb3: register_tm_clones_result :: out u32 = low:32[R0]

000008ba:
000008bd: R0 := 0x11000
000008c3: R0 := R0 + 0x30
000008c8: R1 := 0x11000
000008ce: R1 := R1 + 0x30
000008d5: R1 := R1 + ~R0 + 1
000008db: R2 := 0.63:63[R1]
000008e2: R1 := R2 + (R1 ~>> 3)
000008e8: R1 := extend:64[63:1[R1]]
000008ee: when R1 = 0 goto %000008ec
00000ca0: goto %00000a29

00000a29:
00000a2c: R2 := 0x10000
00000a33: R2 := mem[R2 + 0xFE0, el]:u64
00000a38: when R2 = 0 goto %000008ec
00000ca1: goto %00000a3c

000008ec:
000008f4: call R30 with noreturn

00000a3c:
00000a40: R16 := R2
00000a45: call R16 with noreturn
