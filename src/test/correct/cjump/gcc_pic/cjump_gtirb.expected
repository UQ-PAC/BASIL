var {:extern} Gamma_mem: [bv64]bool;
var {:extern} mem: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69652bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69656bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1976bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1977bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1978bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1979bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69608bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1872bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main(R0_in: bv64, Gamma_R0_in: bool, R1_in: bv64, Gamma_R1_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool);
  modifies Gamma_mem, mem;
  requires (gamma_load32(Gamma_mem, $x_addr) == true);
  requires (gamma_load32(Gamma_mem, $y_addr) == false);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 1976bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1977bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1978bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1979bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69608bv64) == 69656bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1872bv64);
  free ensures (memory_load8_le(mem, 1976bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1977bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1978bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1979bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69608bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1872bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R1_in: bv64, Gamma_R1_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool)
{
  var Gamma_R0_10: bool;
  var Gamma_R0_3: bool;
  var Gamma_R0_5: bool;
  var Gamma_R0_6: bool;
  var Gamma_R0_8: bool;
  var Gamma_R1_6: bool;
  var R0_10: bv64;
  var R0_3: bv64;
  var R0_5: bv64;
  var R0_6: bv32;
  var R0_8: bv64;
  var R1_6: bv64;
  $main$__0__$odan6iejSaiIvyv2xbxX2Q:
    call rely();
    R0_3, Gamma_R0_3 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    assert (L(mem, R0_3) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, R0_3, 1bv32), gamma_store32(Gamma_mem, R0_3, true);
    call rely();
    R0_5, Gamma_R0_5 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    R0_6, Gamma_R0_6 := memory_load32_le(mem, R0_5), (gamma_load32(Gamma_mem, R0_5) || L(mem, R0_5));
    assert Gamma_R0_6;
    goto $main$__0__$odan6iejSaiIvyv2xbxX2Q_goto_$main$__2__$7OQ5GMtLT3i738Ax4kb9lg, $main$__0__$odan6iejSaiIvyv2xbxX2Q_goto_$main$__1__$MCUkhZcpTE24flHPahs6NA;
  $main$__0__$odan6iejSaiIvyv2xbxX2Q_goto_$main$__1__$MCUkhZcpTE24flHPahs6NA:
    assume (!(R0_6 == 0bv32));
    call rely();
    R0_8, Gamma_R0_8 := memory_load64_le(mem, 69608bv64), (gamma_load64(Gamma_mem, 69608bv64) || L(mem, 69608bv64));
    call rely();
    assert (L(mem, R0_8) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, R0_8, 3bv32), gamma_store32(Gamma_mem, R0_8, true);
    R1_6, Gamma_R1_6 := 3bv64, true;
    goto $main$__3__$bH6WR9krRFGfL0jcN6MCWA;
  $main$__0__$odan6iejSaiIvyv2xbxX2Q_goto_$main$__2__$7OQ5GMtLT3i738Ax4kb9lg:
    assume (R0_6 == 0bv32);
    call rely();
    R0_10, Gamma_R0_10 := memory_load64_le(mem, 69608bv64), (gamma_load64(Gamma_mem, 69608bv64) || L(mem, 69608bv64));
    call rely();
    assert (L(mem, R0_10) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, R0_10, 2bv32), gamma_store32(Gamma_mem, R0_10, true);
    R1_6, Gamma_R1_6 := 2bv64, true;
    goto $main$__3__$bH6WR9krRFGfL0jcN6MCWA;
  $main$__3__$bH6WR9krRFGfL0jcN6MCWA:
    goto main_basil_return;
  main_basil_return:
    R0_out, R1_out := 0bv64, R1_6;
    Gamma_R0_out, Gamma_R1_out := true, Gamma_R1_6;
    return;
}

