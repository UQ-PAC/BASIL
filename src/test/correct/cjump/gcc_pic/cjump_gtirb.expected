var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69652bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69656bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 1976bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69000bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69608bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main_1876();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R1, Gamma_VF, Gamma_ZF, Gamma_mem, NF, R0, R1, VF, ZF, mem;
  requires (gamma_load32(Gamma_mem, $x_addr) == true);
  requires (gamma_load32(Gamma_mem, $y_addr) == false);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le(mem, 1976bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69000bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69608bv64) == 69656bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load32_le(mem, 1976bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69000bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69608bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main_1876()
{
  var Cse0__5_2_7: bv32;
  var Gamma_Cse0__5_2_7: bool;
  var Gamma_load2: bool;
  var Gamma_load3: bool;
  var Gamma_load4: bool;
  var Gamma_load5: bool;
  var Gamma_load6: bool;
  var load2: bv64;
  var load3: bv64;
  var load4: bv64;
  var load5: bv32;
  var load6: bv64;
  main_1876__0__odan6iejSaiIvyv2xbxX2Q:
    assume {:captureState "main_1876__0__odan6iejSaiIvyv2xbxX2Q"} true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load3, Gamma_load3 := memory_load64_le(mem, bvadd64(R0, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4056bv64)) || L(mem, bvadd64(R0, 4056bv64)));
    R0, Gamma_R0 := load3, Gamma_load3;
    R1, Gamma_R1 := 1bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "1888_0"} true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load4, Gamma_load4 := memory_load64_le(mem, bvadd64(R0, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4056bv64)) || L(mem, bvadd64(R0, 4056bv64)));
    R0, Gamma_R0 := load4, Gamma_load4;
    call rely();
    load5, Gamma_load5 := memory_load32_le(mem, R0), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := zero_extend32_32(load5), Gamma_load5;
    Cse0__5_2_7, Gamma_Cse0__5_2_7 := bvadd32(R0[32:0], 0bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp32(Cse0__5_2_7, Cse0__5_2_7)), Gamma_Cse0__5_2_7;
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_2_7), bvadd33(zero_extend1_32(R0[32:0]), 4294967296bv33))), (Gamma_R0 && Gamma_Cse0__5_2_7);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_2_7, 0bv32), Gamma_Cse0__5_2_7;
    NF, Gamma_NF := Cse0__5_2_7[32:31], Gamma_Cse0__5_2_7;
    assert Gamma_ZF;
    goto main_1876__0__odan6iejSaiIvyv2xbxX2Q_goto_main_1876__2__7OQ5GMtLT3i738Ax4kb9lg, main_1876__0__odan6iejSaiIvyv2xbxX2Q_goto_main_1876__1__MCUkhZcpTE24flHPahs6NA;
  main_1876__0__odan6iejSaiIvyv2xbxX2Q_goto_main_1876__1__MCUkhZcpTE24flHPahs6NA:
    assume {:captureState "main_1876__0__odan6iejSaiIvyv2xbxX2Q_goto_main_1876__1__MCUkhZcpTE24flHPahs6NA"} true;
    assume (!(ZF == 1bv1));
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load2, Gamma_load2 := memory_load64_le(mem, bvadd64(R0, 4072bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4072bv64)) || L(mem, bvadd64(R0, 4072bv64)));
    R0, Gamma_R0 := load2, Gamma_load2;
    R1, Gamma_R1 := 3bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "1924_0"} true;
    goto main_1876__1__MCUkhZcpTE24flHPahs6NA;
  main_1876__1__MCUkhZcpTE24flHPahs6NA:
    assume {:captureState "main_1876__1__MCUkhZcpTE24flHPahs6NA"} true;
    goto main_1876__3__bH6WR9krRFGfL0jcN6MCWA;
  main_1876__0__odan6iejSaiIvyv2xbxX2Q_goto_main_1876__2__7OQ5GMtLT3i738Ax4kb9lg:
    assume {:captureState "main_1876__0__odan6iejSaiIvyv2xbxX2Q_goto_main_1876__2__7OQ5GMtLT3i738Ax4kb9lg"} true;
    assume (ZF == 1bv1);
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load6, Gamma_load6 := memory_load64_le(mem, bvadd64(R0, 4072bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4072bv64)) || L(mem, bvadd64(R0, 4072bv64)));
    R0, Gamma_R0 := load6, Gamma_load6;
    R1, Gamma_R1 := 2bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "1944_0"} true;
    goto main_1876__2__7OQ5GMtLT3i738Ax4kb9lg;
  main_1876__2__7OQ5GMtLT3i738Ax4kb9lg:
    assume {:captureState "main_1876__2__7OQ5GMtLT3i738Ax4kb9lg"} true;
    goto main_1876__3__bH6WR9krRFGfL0jcN6MCWA;
  main_1876__3__bH6WR9krRFGfL0jcN6MCWA:
    assume {:captureState "main_1876__3__bH6WR9krRFGfL0jcN6MCWA"} true;
    R0, Gamma_R0 := 0bv64, true;
    goto main_1876_basil_return;
  main_1876_basil_return:
    assume {:captureState "main_1876_basil_return"} true;
    return;
}

