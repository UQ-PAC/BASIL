000005dd: program
000005a7: sub __cxa_finalize(__cxa_finalize_result)
000005de: __cxa_finalize_result :: out u32 = low:32[R0]

000003bc:
000004b4: R16 := 0x20000
000004bb: R17 := mem[R16 + 8, el]:u64
000004c1: R16 := R16 + 8
000004c6: call R17 with noreturn

000005a8: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005df: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029f:
000002a3: #3 := R31 - 0x20
000002a9: mem := mem with [#3, el]:u64 <- R29
000002af: mem := mem with [#3 + 8, el]:u64 <- R30
000002b3: R31 := #3
000002b9: R29 := R31
000002c1: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c6: R19 := 0x20000
000002cd: R0 := pad:64[mem[R19 + 0x30]]
000002d3: when 0:0[R0] goto %000002d1
000005d1: goto %00000385

00000385:
00000388: R0 := 0x1F000
0000038f: R0 := mem[R0 + 0xFB8, el]:u64
00000395: when R0 = 0 goto %00000393
000005d2: goto %000003ac

000003ac:
000003af: R0 := 0x20000
000003b6: R0 := mem[R0 + 0x28, el]:u64
000003bb: R30 := 0x730
000003be: call @__cxa_finalize with return %00000393

00000393:
0000039b: R30 := 0x734
0000039d: call @deregister_tm_clones with return %0000039f

0000039f:
000003a2: R0 := 1
000003aa: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005d3: goto %000002d1

000002d1:
000002db: R19 := mem[R31 + 0x10, el]:u64
000002e2: R29 := mem[R31, el]:u64
000002e7: R30 := mem[R31 + 8, el]:u64
000002eb: R31 := R31 + 0x20
000002f0: call R30 with noreturn

000005ac: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005e0: __libc_start_main_main :: in u64 = R0
000005e1: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005e2: __libc_start_main_arg3 :: in out u64 = R2
000005e3: __libc_start_main_auxv :: in out u64 = R3
000005e4: __libc_start_main_result :: out u32 = low:32[R0]

000001f8:
0000049e: R16 := 0x20000
000004a5: R17 := mem[R16, el]:u64
000004ab: R16 := R16
000004b0: call R17 with noreturn

000005ad: sub _fini(_fini_result)
000005e5: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005ae: sub _init(_init_result)
000005e6: _init_result :: out u32 = low:32[R0]

0000050e:
00000514: #6 := R31 - 0x10
0000051a: mem := mem with [#6, el]:u64 <- R29
00000520: mem := mem with [#6 + 8, el]:u64 <- R30
00000524: R31 := #6
0000052a: R29 := R31
0000052f: R30 := 0x5C0
00000531: call @call_weak_fn with return %00000533

00000533:
00000538: R29 := mem[R31, el]:u64
0000053d: R30 := mem[R31 + 8, el]:u64
00000541: R31 := R31 + 0x10
00000546: call R30 with noreturn

000005af: sub _start(_start_result)
000005e7: _start_result :: out u32 = low:32[R0]

000001b9:
000001be: R29 := 0
000001c3: R30 := 0
000001c9: R5 := R0
000001d0: R1 := mem[R31, el]:u64
000001d6: R2 := R31 + 8
000001dc: R6 := R31
000001e1: R0 := 0x1F000
000001e8: R0 := mem[R0 + 0xFD8, el]:u64
000001ed: R3 := 0
000001f2: R4 := 0
000001f7: R30 := 0x670
000001fa: call @__libc_start_main with return %000001fc

000001fc:
000001ff: R30 := 0x674
00000202: call @abort with return %000005d4

000005d4:
000005d5: call @call_weak_fn with noreturn

000005b2: sub abort()


00000200:
000004e0: R16 := 0x20000
000004e7: R17 := mem[R16 + 0x18, el]:u64
000004ed: R16 := R16 + 0x18
000004f2: call R17 with noreturn

000005b3: sub call_weak_fn(call_weak_fn_result)
000005e8: call_weak_fn_result :: out u32 = low:32[R0]

00000204:
00000207: R0 := 0x1F000
0000020e: R0 := mem[R0 + 0xFC8, el]:u64
00000214: when R0 = 0 goto %00000212
000005d6: goto %000003fc

00000212:
0000021a: call R30 with noreturn

000003fc:
000003ff: goto @__gmon_start__

000003fd:
000004ca: R16 := 0x20000
000004d1: R17 := mem[R16 + 0x10, el]:u64
000004d7: R16 := R16 + 0x10
000004dc: call R17 with noreturn

000005b5: sub deregister_tm_clones(deregister_tm_clones_result)
000005e9: deregister_tm_clones_result :: out u32 = low:32[R0]

00000220:
00000223: R0 := 0x20000
00000229: R0 := R0 + 0x30
0000022e: R1 := 0x20000
00000234: R1 := R1 + 0x30
0000023a: #1 := ~R0
0000023f: #2 := R1 + ~R0
00000245: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024f: ZF := #2 + 1 = 0
00000253: NF := 63:63[#2 + 1]
00000259: when ZF goto %00000257
000005d7: goto %000003de

000003de:
000003e1: R1 := 0x1F000
000003e8: R1 := mem[R1 + 0xFB0, el]:u64
000003ed: when R1 = 0 goto %00000257
000005d8: goto %000003f1

00000257:
0000025f: call R30 with noreturn

000003f1:
000003f5: R16 := R1
000003fa: call R16 with noreturn

000005b8: sub frame_dummy(frame_dummy_result)
000005ea: frame_dummy_result :: out u32 = low:32[R0]

000002f6:
000002f8: call @register_tm_clones with noreturn

000005b9: sub main(main_argc, main_argv, main_result)
000005eb: main_argc :: in u32 = low:32[R0]
000005ec: main_argv :: in out u64 = R1
000005ed: main_result :: out u32 = low:32[R0]

000002fa:
000002fd: R0 := 0x1F000
00000304: R0 := mem[R0 + 0xFC0, el]:u64
00000309: R1 := 1
00000311: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000316: R0 := 0x1F000
0000031d: R0 := mem[R0 + 0xFC0, el]:u64
00000324: R0 := pad:64[mem[R0, el]:u32]
0000032a: #4 := 31:0[R0] - 1
0000032f: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
00000334: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000338: ZF := #4 + 1 = 0
0000033c: NF := 31:31[#4 + 1]
00000342: when ZF goto %00000340
000005d9: goto %00000368

00000340:
00000348: R0 := 0x1F000
0000034f: R0 := mem[R0 + 0xFD0, el]:u64
00000354: R1 := 2
0000035c: mem := mem with [R0, el]:u32 <- 31:0[R1]
000005da: goto %0000035e

00000368:
0000036b: R0 := 0x1F000
00000372: R0 := mem[R0 + 0xFD0, el]:u64
00000377: R1 := 3
0000037f: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000383: goto %0000035e

0000035e:
00000361: R0 := 0
00000366: call R30 with noreturn

000005bc: sub register_tm_clones(register_tm_clones_result)
000005ee: register_tm_clones_result :: out u32 = low:32[R0]

00000261:
00000264: R0 := 0x20000
0000026a: R0 := R0 + 0x30
0000026f: R1 := 0x20000
00000275: R1 := R1 + 0x30
0000027c: R1 := R1 + ~R0 + 1
00000282: R2 := 0.63:63[R1]
00000289: R1 := R2 + (R1 ~>> 3)
0000028f: R1 := extend:64[63:1[R1]]
00000295: when R1 = 0 goto %00000293
000005db: goto %000003c0

000003c0:
000003c3: R2 := 0x1F000
000003ca: R2 := mem[R2 + 0xFE0, el]:u64
000003cf: when R2 = 0 goto %00000293
000005dc: goto %000003d3

00000293:
0000029b: call R30 with noreturn

000003d3:
000003d7: R16 := R2
000003dc: call R16 with noreturn
