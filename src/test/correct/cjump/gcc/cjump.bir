00000652: program
0000061c: sub __cxa_finalize(__cxa_finalize_result)
00000653: __cxa_finalize_result :: out u32 = low:32[R0]

000003b8:
000004b0: R16 := 0x10000
000004b7: R17 := mem[R16 + 0xFB8, el]:u64
000004bd: R16 := R16 + 0xFB8
000004c2: call R17 with noreturn

0000061d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000654: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029e:
000002a2: #3 := R31 - 0x20
000002a8: mem := mem with [#3, el]:u64 <- R29
000002ae: mem := mem with [#3 + 8, el]:u64 <- R30
000002b2: R31 := #3
000002b8: R29 := R31
000002c0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c5: R19 := 0x11000
000002cc: R0 := pad:64[mem[R19 + 0x10]]
000002d3: when 31:0[R0] <> 0 goto %000002d1
00000646: goto %00000381

00000381:
00000384: R0 := 0x10000
0000038b: R0 := mem[R0 + 0xFE0, el]:u64
00000391: when R0 = 0 goto %0000038f
00000647: goto %000003a8

000003a8:
000003ab: R0 := 0x11000
000003b2: R0 := mem[R0 + 8, el]:u64
000003b7: R30 := 0x6F0
000003ba: call @__cxa_finalize with return %0000038f

0000038f:
00000397: R30 := 0x6F4
00000399: call @deregister_tm_clones with return %0000039b

0000039b:
0000039e: R0 := 1
000003a6: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000648: goto %000002d1

000002d1:
000002db: R19 := mem[R31 + 0x10, el]:u64
000002e2: R29 := mem[R31, el]:u64
000002e7: R30 := mem[R31 + 8, el]:u64
000002eb: R31 := R31 + 0x20
000002f0: call R30 with noreturn

00000621: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000655: __libc_start_main_main :: in u64 = R0
00000656: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000657: __libc_start_main_arg3 :: in out u64 = R2
00000658: __libc_start_main_auxv :: in out u64 = R3
00000659: __libc_start_main_result :: out u32 = low:32[R0]

000001f7:
0000049a: R16 := 0x10000
000004a1: R17 := mem[R16 + 0xFB0, el]:u64
000004a7: R16 := R16 + 0xFB0
000004ac: call R17 with noreturn

00000622: sub _fini(_fini_result)
0000065a: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000623: sub _init(_init_result)
0000065b: _init_result :: out u32 = low:32[R0]

0000056a:
00000570: #6 := R31 - 0x10
00000576: mem := mem with [#6, el]:u64 <- R29
0000057c: mem := mem with [#6 + 8, el]:u64 <- R30
00000580: R31 := #6
00000586: R29 := R31
0000058b: R30 := 0x590
0000058d: call @call_weak_fn with return %0000058f

0000058f:
00000594: R29 := mem[R31, el]:u64
00000599: R30 := mem[R31 + 8, el]:u64
0000059d: R31 := R31 + 0x10
000005a2: call R30 with noreturn

00000624: sub _start(_start_result)
0000065c: _start_result :: out u32 = low:32[R0]

000001b8:
000001bd: R29 := 0
000001c2: R30 := 0
000001c8: R5 := R0
000001cf: R1 := mem[R31, el]:u64
000001d5: R2 := R31 + 8
000001db: R6 := R31
000001e0: R0 := 0x10000
000001e7: R0 := mem[R0 + 0xFF0, el]:u64
000001ec: R3 := 0
000001f1: R4 := 0
000001f6: R30 := 0x630
000001f9: call @__libc_start_main with return %000001fb

000001fb:
000001fe: R30 := 0x634
00000201: call @abort with return %00000649

00000649:
0000064a: call @call_weak_fn with noreturn

00000627: sub abort()


000001ff:
000004dc: R16 := 0x10000
000004e3: R17 := mem[R16 + 0xFC8, el]:u64
000004e9: R16 := R16 + 0xFC8
000004ee: call R17 with noreturn

00000628: sub call_weak_fn(call_weak_fn_result)
0000065d: call_weak_fn_result :: out u32 = low:32[R0]

00000203:
00000206: R0 := 0x10000
0000020d: R0 := mem[R0 + 0xFE8, el]:u64
00000213: when R0 = 0 goto %00000211
0000064b: goto %000003f8

00000211:
00000219: call R30 with noreturn

000003f8:
000003fb: goto @__gmon_start__

000003f9:
000004c6: R16 := 0x10000
000004cd: R17 := mem[R16 + 0xFC0, el]:u64
000004d3: R16 := R16 + 0xFC0
000004d8: call R17 with noreturn

0000062a: sub deregister_tm_clones(deregister_tm_clones_result)
0000065e: deregister_tm_clones_result :: out u32 = low:32[R0]

0000021f:
00000222: R0 := 0x11000
00000228: R0 := R0 + 0x10
0000022d: R1 := 0x11000
00000233: R1 := R1 + 0x10
00000239: #1 := ~R0
0000023e: #2 := R1 + ~R0
00000244: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024e: ZF := #2 + 1 = 0
00000252: NF := 63:63[#2 + 1]
00000258: when ZF goto %00000256
0000064c: goto %000003da

000003da:
000003dd: R1 := 0x10000
000003e4: R1 := mem[R1 + 0xFD8, el]:u64
000003e9: when R1 = 0 goto %00000256
0000064d: goto %000003ed

00000256:
0000025e: call R30 with noreturn

000003ed:
000003f1: R16 := R1
000003f6: call R16 with noreturn

0000062d: sub frame_dummy(frame_dummy_result)
0000065f: frame_dummy_result :: out u32 = low:32[R0]

000002f6:
000002f8: call @register_tm_clones with noreturn

0000062e: sub main(main_argc, main_argv, main_result)
00000660: main_argc :: in u32 = low:32[R0]
00000661: main_argv :: in out u64 = R1
00000662: main_result :: out u32 = low:32[R0]

000002fa:
000002fd: R0 := 0x11000
00000303: R0 := R0 + 0x14
00000308: R1 := 1
00000310: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000315: R0 := 0x11000
0000031b: R0 := R0 + 0x14
00000322: R0 := pad:64[mem[R0, el]:u32]
00000328: #4 := 31:0[R0] - 1
0000032d: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
00000332: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000336: ZF := #4 + 1 = 0
0000033a: NF := 31:31[#4 + 1]
00000340: when ZF goto %0000033e
0000064e: goto %00000365

0000033e:
00000346: R0 := 0x11000
0000034c: R0 := R0 + 0x18
00000351: R1 := 2
00000359: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000064f: goto %0000035b

00000365:
00000368: R0 := 0x11000
0000036e: R0 := R0 + 0x18
00000373: R1 := 3
0000037b: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000037f: goto %0000035b

0000035b:
0000035e: R0 := 0
00000363: call R30 with noreturn

00000631: sub register_tm_clones(register_tm_clones_result)
00000663: register_tm_clones_result :: out u32 = low:32[R0]

00000260:
00000263: R0 := 0x11000
00000269: R0 := R0 + 0x10
0000026e: R1 := 0x11000
00000274: R1 := R1 + 0x10
0000027b: R1 := R1 + ~R0 + 1
00000281: R2 := 0.63:63[R1]
00000288: R1 := R2 + (R1 ~>> 3)
0000028e: R1 := extend:64[63:1[R1]]
00000294: when R1 = 0 goto %00000292
00000650: goto %000003bc

000003bc:
000003bf: R2 := 0x10000
000003c6: R2 := mem[R2 + 0xFF8, el]:u64
000003cb: when R2 = 0 goto %00000292
00000651: goto %000003cf

00000292:
0000029a: call R30 with noreturn

000003cf:
000003d3: R16 := R2
000003d8: call R16 with noreturn
