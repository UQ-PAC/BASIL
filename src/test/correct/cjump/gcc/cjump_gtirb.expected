var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69652bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69656bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1912bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1913bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1914bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1915bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R1, Gamma_VF, Gamma_ZF, Gamma_mem, NF, R0, R1, VF, ZF, mem;
  requires (gamma_load32(Gamma_mem, $x_addr) == true);
  requires (gamma_load32(Gamma_mem, $y_addr) == false);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 1912bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1913bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1914bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1915bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 1912bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1913bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1914bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1915bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main()
{
  var Cse0__5$3$7: bv32;
  var Gamma_Cse0__5$3$7: bool;
  $main$__0__$YwDxm6NpRSaYnJwZf~bgAg:
    assume {:captureState "$main$__0__$YwDxm6NpRSaYnJwZf~bgAg"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 20bv64), Gamma_R0;
    R1, Gamma_R1 := 1bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "1824$0"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 20bv64), Gamma_R0;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    Cse0__5$3$7, Gamma_Cse0__5$3$7 := bvadd32(R0[32:0], 0bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp32(Cse0__5$3$7, Cse0__5$3$7)), Gamma_Cse0__5$3$7;
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$3$7), bvadd33(zero_extend1_32(R0[32:0]), 4294967296bv33))), (Gamma_R0 && Gamma_Cse0__5$3$7);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$3$7, 0bv32), Gamma_Cse0__5$3$7;
    NF, Gamma_NF := Cse0__5$3$7[32:31], Gamma_Cse0__5$3$7;
    assert Gamma_ZF;
    goto $main$__0__$YwDxm6NpRSaYnJwZf~bgAg_goto_$main$__2__$WXfzVKBzTQ2pcN9SDnwGAQ, $main$__0__$YwDxm6NpRSaYnJwZf~bgAg_goto_$main$__1__$YoxtYzmmTLarbLScWy3SCQ;
  $main$__1__$YoxtYzmmTLarbLScWy3SCQ:
    assume {:captureState "$main$__1__$YoxtYzmmTLarbLScWy3SCQ"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 24bv64), Gamma_R0;
    R1, Gamma_R1 := 3bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "1860$0"} true;
    goto $main$__3__$RpUJmfB5RPyIGv0DK5At_g;
  $main$__2__$WXfzVKBzTQ2pcN9SDnwGAQ:
    assume {:captureState "$main$__2__$WXfzVKBzTQ2pcN9SDnwGAQ"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 24bv64), Gamma_R0;
    R1, Gamma_R1 := 2bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "1880$0"} true;
    goto $main$__3__$RpUJmfB5RPyIGv0DK5At_g;
  $main$__3__$RpUJmfB5RPyIGv0DK5At_g:
    assume {:captureState "$main$__3__$RpUJmfB5RPyIGv0DK5At_g"} true;
    R0, Gamma_R0 := 0bv64, true;
    goto main_basil_return;
  $main$__0__$YwDxm6NpRSaYnJwZf~bgAg_goto_$main$__2__$WXfzVKBzTQ2pcN9SDnwGAQ:
    assume {:captureState "$main$__0__$YwDxm6NpRSaYnJwZf~bgAg_goto_$main$__2__$WXfzVKBzTQ2pcN9SDnwGAQ"} true;
    assume (ZF == 1bv1);
    goto $main$__2__$WXfzVKBzTQ2pcN9SDnwGAQ;
  $main$__0__$YwDxm6NpRSaYnJwZf~bgAg_goto_$main$__1__$YoxtYzmmTLarbLScWy3SCQ:
    assume {:captureState "$main$__0__$YwDxm6NpRSaYnJwZf~bgAg_goto_$main$__1__$YoxtYzmmTLarbLScWy3SCQ"} true;
    assume (!(ZF == 1bv1));
    goto $main$__1__$YoxtYzmmTLarbLScWy3SCQ;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

