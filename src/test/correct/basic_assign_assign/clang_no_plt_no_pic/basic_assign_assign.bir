00000538: program
00000506: sub __cxa_finalize(__cxa_finalize_result)
00000539: __cxa_finalize_result :: out u32 = low:32[R0]

00000311:
00000409: R16 := 0x20000
00000410: R17 := mem[R16 + 8, el]:u64
00000416: R16 := R16 + 8
0000041b: call R17 with noreturn

00000507: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000053a: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000263:
00000267: #3 := R31 - 0x20
0000026d: mem := mem with [#3, el]:u64 <- R29
00000273: mem := mem with [#3 + 8, el]:u64 <- R30
00000277: R31 := #3
0000027d: R29 := R31
00000285: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000028a: R19 := 0x20000
00000291: R0 := pad:64[mem[R19 + 0x30]]
00000297: when 0:0[R0] goto %00000295
0000052e: goto %000002da

000002da:
000002dd: R0 := 0x1F000
000002e4: R0 := mem[R0 + 0xFC8, el]:u64
000002ea: when R0 = 0 goto %000002e8
0000052f: goto %00000301

00000301:
00000304: R0 := 0x20000
0000030b: R0 := mem[R0 + 0x28, el]:u64
00000310: R30 := 0x730
00000313: call @__cxa_finalize with return %000002e8

000002e8:
000002f0: R30 := 0x734
000002f2: call @deregister_tm_clones with return %000002f4

000002f4:
000002f7: R0 := 1
000002ff: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000530: goto %00000295

00000295:
0000029f: R19 := mem[R31 + 0x10, el]:u64
000002a6: R29 := mem[R31, el]:u64
000002ab: R30 := mem[R31 + 8, el]:u64
000002af: R31 := R31 + 0x20
000002b4: call R30 with noreturn

0000050b: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000053b: __libc_start_main_main :: in u64 = R0
0000053c: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000053d: __libc_start_main_arg3 :: in out u64 = R2
0000053e: __libc_start_main_auxv :: in out u64 = R3
0000053f: __libc_start_main_result :: out u32 = low:32[R0]

000001bc:
000003f3: R16 := 0x20000
000003fa: R17 := mem[R16, el]:u64
00000400: R16 := R16
00000405: call R17 with noreturn

0000050c: sub _fini(_fini_result)
00000540: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000050d: sub _init(_init_result)
00000541: _init_result :: out u32 = low:32[R0]

00000463:
00000469: #5 := R31 - 0x10
0000046f: mem := mem with [#5, el]:u64 <- R29
00000475: mem := mem with [#5 + 8, el]:u64 <- R30
00000479: R31 := #5
0000047f: R29 := R31
00000484: R30 := 0x5C8
00000486: call @call_weak_fn with return %00000488

00000488:
0000048d: R29 := mem[R31, el]:u64
00000492: R30 := mem[R31 + 8, el]:u64
00000496: R31 := R31 + 0x10
0000049b: call R30 with noreturn

0000050e: sub _start(_start_result)
00000542: _start_result :: out u32 = low:32[R0]

0000017d:
00000182: R29 := 0
00000187: R30 := 0
0000018d: R5 := R0
00000194: R1 := mem[R31, el]:u64
0000019a: R2 := R31 + 8
000001a0: R6 := R31
000001a5: R0 := 0x1F000
000001ac: R0 := mem[R0 + 0xFD8, el]:u64
000001b1: R3 := 0
000001b6: R4 := 0
000001bb: R30 := 0x670
000001be: call @__libc_start_main with return %000001c0

000001c0:
000001c3: R30 := 0x674
000001c6: call @abort with return %00000531

00000531:
00000532: call @call_weak_fn with noreturn

00000511: sub abort()


000001c4:
00000435: R16 := 0x20000
0000043c: R17 := mem[R16 + 0x18, el]:u64
00000442: R16 := R16 + 0x18
00000447: call R17 with noreturn

00000512: sub call_weak_fn(call_weak_fn_result)
00000543: call_weak_fn_result :: out u32 = low:32[R0]

000001c8:
000001cb: R0 := 0x1F000
000001d2: R0 := mem[R0 + 0xFD0, el]:u64
000001d8: when R0 = 0 goto %000001d6
00000533: goto %00000351

000001d6:
000001de: call R30 with noreturn

00000351:
00000354: goto @__gmon_start__

00000352:
0000041f: R16 := 0x20000
00000426: R17 := mem[R16 + 0x10, el]:u64
0000042c: R16 := R16 + 0x10
00000431: call R17 with noreturn

00000514: sub deregister_tm_clones(deregister_tm_clones_result)
00000544: deregister_tm_clones_result :: out u32 = low:32[R0]

000001e4:
000001e7: R0 := 0x20000
000001ed: R0 := R0 + 0x30
000001f2: R1 := 0x20000
000001f8: R1 := R1 + 0x30
000001fe: #1 := ~R0
00000203: #2 := R1 + ~R0
00000209: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000020f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000213: ZF := #2 + 1 = 0
00000217: NF := 63:63[#2 + 1]
0000021d: when ZF goto %0000021b
00000534: goto %00000333

00000333:
00000336: R1 := 0x1F000
0000033d: R1 := mem[R1 + 0xFC0, el]:u64
00000342: when R1 = 0 goto %0000021b
00000535: goto %00000346

0000021b:
00000223: call R30 with noreturn

00000346:
0000034a: R16 := R1
0000034f: call R16 with noreturn

00000517: sub frame_dummy(frame_dummy_result)
00000545: frame_dummy_result :: out u32 = low:32[R0]

000002ba:
000002bc: call @register_tm_clones with noreturn

00000518: sub main(main_argc, main_argv, main_result)
00000546: main_argc :: in u32 = low:32[R0]
00000547: main_argv :: in out u64 = R1
00000548: main_result :: out u32 = low:32[R0]

000002be:
000002c1: R9 := 0x20000
000002c6: R8 := 5
000002ce: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
000002d3: R0 := 0
000002d8: call R30 with noreturn

00000519: sub register_tm_clones(register_tm_clones_result)
00000549: register_tm_clones_result :: out u32 = low:32[R0]

00000225:
00000228: R0 := 0x20000
0000022e: R0 := R0 + 0x30
00000233: R1 := 0x20000
00000239: R1 := R1 + 0x30
00000240: R1 := R1 + ~R0 + 1
00000246: R2 := 0.63:63[R1]
0000024d: R1 := R2 + (R1 ~>> 3)
00000253: R1 := extend:64[63:1[R1]]
00000259: when R1 = 0 goto %00000257
00000536: goto %00000315

00000315:
00000318: R2 := 0x1F000
0000031f: R2 := mem[R2 + 0xFE0, el]:u64
00000324: when R2 = 0 goto %00000257
00000537: goto %00000328

00000257:
0000025f: call R30 with noreturn

00000328:
0000032c: R16 := R2
00000331: call R16 with noreturn
