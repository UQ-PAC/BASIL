00000c23: program
00000c0c: sub __cxa_finalize(__cxa_finalize_result)
00000c24: __cxa_finalize_result :: out u32 = low:32[R0]

000009b0:
00000aa8: R16 := 0x10000
00000aaf: R17 := mem[R16 + 0xFB8, el]:u64
00000ab5: R16 := R16 + 0xFB8
00000aba: call R17 with noreturn

00000c0d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c25: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008a5:
000008a9: #3 := R31 - 0x20
000008af: mem := mem with [#3, el]:u64 <- R29
000008b5: mem := mem with [#3 + 8, el]:u64 <- R30
000008b9: R31 := #3
000008bf: R29 := R31
000008c7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008cc: R19 := 0x11000
000008d3: R0 := pad:64[mem[R19 + 0x10]]
000008da: when 31:0[R0] <> 0 goto %000008d8
00000c0e: goto %00000979

00000979:
0000097c: R0 := 0x10000
00000983: R0 := mem[R0 + 0xFE0, el]:u64
00000989: when R0 = 0 goto %00000987
00000c0f: goto %000009a0

000009a0:
000009a3: R0 := 0x11000
000009aa: R0 := mem[R0 + 8, el]:u64
000009af: R30 := 0x6F0
000009b2: call @__cxa_finalize with return %00000987

00000987:
0000098f: R30 := 0x6F4
00000991: call @deregister_tm_clones with return %00000993

00000993:
00000996: R0 := 1
0000099e: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000c10: goto %000008d8

000008d8:
000008e2: R19 := mem[R31 + 0x10, el]:u64
000008e9: R29 := mem[R31, el]:u64
000008ee: R30 := mem[R31 + 8, el]:u64
000008f2: R31 := R31 + 0x20
000008f7: call R30 with noreturn

00000c11: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c26: __libc_start_main_main :: in u64 = R0
00000c27: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c28: __libc_start_main_arg3 :: in out u64 = R2
00000c29: __libc_start_main_auxv :: in out u64 = R3
00000c2a: __libc_start_main_result :: out u32 = low:32[R0]

000007fe:
00000a92: R16 := 0x10000
00000a99: R17 := mem[R16 + 0xFB0, el]:u64
00000a9f: R16 := R16 + 0xFB0
00000aa4: call R17 with noreturn

00000c12: sub _fini(_fini_result)
00000c2b: _fini_result :: out u32 = low:32[R0]

00000636:
0000063c: #0 := R31 - 0x10
00000642: mem := mem with [#0, el]:u64 <- R29
00000648: mem := mem with [#0 + 8, el]:u64 <- R30
0000064c: R31 := #0
00000652: R29 := R31
00000659: R29 := mem[R31, el]:u64
0000065e: R30 := mem[R31 + 8, el]:u64
00000662: R31 := R31 + 0x10
00000667: call R30 with noreturn

00000c13: sub _init(_init_result)
00000c2c: _init_result :: out u32 = low:32[R0]

00000b5e:
00000b64: #6 := R31 - 0x10
00000b6a: mem := mem with [#6, el]:u64 <- R29
00000b70: mem := mem with [#6 + 8, el]:u64 <- R30
00000b74: R31 := #6
00000b7a: R29 := R31
00000b7f: R30 := 0x590
00000b81: call @call_weak_fn with return %00000b83

00000b83:
00000b88: R29 := mem[R31, el]:u64
00000b8d: R30 := mem[R31 + 8, el]:u64
00000b91: R31 := R31 + 0x10
00000b96: call R30 with noreturn

00000c14: sub _start(_start_result)
00000c2d: _start_result :: out u32 = low:32[R0]

000007bf:
000007c4: R29 := 0
000007c9: R30 := 0
000007cf: R5 := R0
000007d6: R1 := mem[R31, el]:u64
000007dc: R2 := R31 + 8
000007e2: R6 := R31
000007e7: R0 := 0x10000
000007ee: R0 := mem[R0 + 0xFF0, el]:u64
000007f3: R3 := 0
000007f8: R4 := 0
000007fd: R30 := 0x630
00000800: call @__libc_start_main with return %00000802

00000802:
00000805: R30 := 0x634
00000808: call @abort with return %00000c15

00000c15:
00000c16: call @call_weak_fn with noreturn

00000c17: sub abort()


00000806:
00000ad4: R16 := 0x10000
00000adb: R17 := mem[R16 + 0xFC8, el]:u64
00000ae1: R16 := R16 + 0xFC8
00000ae6: call R17 with noreturn

00000c18: sub call_weak_fn(call_weak_fn_result)
00000c2e: call_weak_fn_result :: out u32 = low:32[R0]

0000080a:
0000080d: R0 := 0x10000
00000814: R0 := mem[R0 + 0xFE8, el]:u64
0000081a: when R0 = 0 goto %00000818
00000c19: goto %000009f0

00000818:
00000820: call R30 with noreturn

000009f0:
000009f3: goto @__gmon_start__

000009f1:
00000abe: R16 := 0x10000
00000ac5: R17 := mem[R16 + 0xFC0, el]:u64
00000acb: R16 := R16 + 0xFC0
00000ad0: call R17 with noreturn

00000c1a: sub deregister_tm_clones(deregister_tm_clones_result)
00000c2f: deregister_tm_clones_result :: out u32 = low:32[R0]

00000826:
00000829: R0 := 0x11000
0000082f: R0 := R0 + 0x10
00000834: R1 := 0x11000
0000083a: R1 := R1 + 0x10
00000840: #1 := ~R0
00000845: #2 := R1 + ~R0
0000084b: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000851: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000855: ZF := #2 + 1 = 0
00000859: NF := 63:63[#2 + 1]
0000085f: when ZF goto %0000085d
00000c1b: goto %000009d2

000009d2:
000009d5: R1 := 0x10000
000009dc: R1 := mem[R1 + 0xFD8, el]:u64
000009e1: when R1 = 0 goto %0000085d
00000c1c: goto %000009e5

0000085d:
00000865: call R30 with noreturn

000009e5:
000009e9: R16 := R1
000009ee: call R16 with noreturn

00000c1d: sub frame_dummy(frame_dummy_result)
00000c30: frame_dummy_result :: out u32 = low:32[R0]

000008fd:
000008ff: call @register_tm_clones with noreturn

00000c1e: sub get_two(get_two_result)
00000c31: get_two_result :: out u32 = low:32[R0]

00000939:
0000093f: R0 := 2
00000944: call R30 with noreturn

00000c1f: sub main(main_argc, main_argv, main_result)
00000c32: main_argc :: in u32 = low:32[R0]
00000c33: main_argv :: in out u64 = R1
00000c34: main_result :: out u32 = low:32[R0]

00000901:
00000905: #4 := R31 - 0x10
0000090b: mem := mem with [#4, el]:u64 <- R29
00000911: mem := mem with [#4 + 8, el]:u64 <- R30
00000915: R31 := #4
0000091b: R29 := R31
00000920: R0 := 0x11000
00000926: R0 := R0 + 0x14
0000092b: R1 := 1
00000933: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000938: R30 := 0x730
0000093b: call @get_two with return %00000946

00000946:
0000094a: R1 := pad:64[31:0[R0]]
0000094f: R0 := 0x11000
00000955: R0 := R0 + 0x18
0000095d: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000962: R0 := 0
00000969: R29 := mem[R31, el]:u64
0000096e: R30 := mem[R31 + 8, el]:u64
00000972: R31 := R31 + 0x10
00000977: call R30 with noreturn

00000c20: sub register_tm_clones(register_tm_clones_result)
00000c35: register_tm_clones_result :: out u32 = low:32[R0]

00000867:
0000086a: R0 := 0x11000
00000870: R0 := R0 + 0x10
00000875: R1 := 0x11000
0000087b: R1 := R1 + 0x10
00000882: R1 := R1 + ~R0 + 1
00000888: R2 := 0.63:63[R1]
0000088f: R1 := R2 + (R1 ~>> 3)
00000895: R1 := extend:64[63:1[R1]]
0000089b: when R1 = 0 goto %00000899
00000c21: goto %000009b4

000009b4:
000009b7: R2 := 0x10000
000009be: R2 := mem[R2 + 0xFF8, el]:u64
000009c3: when R2 = 0 goto %00000899
00000c22: goto %000009c7

00000899:
000008a1: call R30 with noreturn

000009c7:
000009cb: R16 := R2
000009d0: call R16 with noreturn
