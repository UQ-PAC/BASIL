000005c5: program
00000591: sub __cxa_finalize(__cxa_finalize_result)
000005c6: __cxa_finalize_result :: out u32 = low:32[R0]

00000341:
00000439: R16 := 0x11000
00000440: R17 := mem[R16 + 8, el]:u64
00000446: R16 := R16 + 8
0000044b: call R17 with noreturn

00000592: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005c7: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000276:
0000027a: #3 := R31 - 0x20
00000280: mem := mem with [#3, el]:u64 <- R29
00000286: mem := mem with [#3 + 8, el]:u64 <- R30
0000028a: R31 := #3
00000290: R29 := R31
00000298: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000029d: R19 := 0x11000
000002a4: R0 := pad:64[mem[R19 + 0x30]]
000002ab: when 31:0[R0] <> 0 goto %000002a9
000005bb: goto %0000030a

0000030a:
0000030d: R0 := 0x10000
00000314: R0 := mem[R0 + 0xFC8, el]:u64
0000031a: when R0 = 0 goto %00000318
000005bc: goto %00000331

00000331:
00000334: R0 := 0x11000
0000033b: R0 := mem[R0 + 0x28, el]:u64
00000340: R30 := 0x6F0
00000343: call @__cxa_finalize with return %00000318

00000318:
00000320: R30 := 0x6F4
00000322: call @deregister_tm_clones with return %00000324

00000324:
00000327: R0 := 1
0000032f: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005bd: goto %000002a9

000002a9:
000002b3: R19 := mem[R31 + 0x10, el]:u64
000002ba: R29 := mem[R31, el]:u64
000002bf: R30 := mem[R31 + 8, el]:u64
000002c3: R31 := R31 + 0x20
000002c8: call R30 with noreturn

00000596: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005c8: __libc_start_main_main :: in u64 = R0
000005c9: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005ca: __libc_start_main_arg3 :: in out u64 = R2
000005cb: __libc_start_main_auxv :: in out u64 = R3
000005cc: __libc_start_main_result :: out u32 = low:32[R0]

000001cf:
00000423: R16 := 0x11000
0000042a: R17 := mem[R16, el]:u64
00000430: R16 := R16
00000435: call R17 with noreturn

00000597: sub _fini(_fini_result)
000005cd: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000598: sub _init(_init_result)
000005ce: _init_result :: out u32 = low:32[R0]

000004e9:
000004ef: #5 := R31 - 0x10
000004f5: mem := mem with [#5, el]:u64 <- R29
000004fb: mem := mem with [#5 + 8, el]:u64 <- R30
000004ff: R31 := #5
00000505: R29 := R31
0000050a: R30 := 0x590
0000050c: call @call_weak_fn with return %0000050e

0000050e:
00000513: R29 := mem[R31, el]:u64
00000518: R30 := mem[R31 + 8, el]:u64
0000051c: R31 := R31 + 0x10
00000521: call R30 with noreturn

00000599: sub _start(_start_result)
000005cf: _start_result :: out u32 = low:32[R0]

00000190:
00000195: R29 := 0
0000019a: R30 := 0
000001a0: R5 := R0
000001a7: R1 := mem[R31, el]:u64
000001ad: R2 := R31 + 8
000001b3: R6 := R31
000001b8: R0 := 0x10000
000001bf: R0 := mem[R0 + 0xFD8, el]:u64
000001c4: R3 := 0
000001c9: R4 := 0
000001ce: R30 := 0x630
000001d1: call @__libc_start_main with return %000001d3

000001d3:
000001d6: R30 := 0x634
000001d9: call @abort with return %000005be

000005be:
000005bf: call @call_weak_fn with noreturn

0000059c: sub abort()


000001d7:
00000465: R16 := 0x11000
0000046c: R17 := mem[R16 + 0x18, el]:u64
00000472: R16 := R16 + 0x18
00000477: call R17 with noreturn

0000059d: sub call_weak_fn(call_weak_fn_result)
000005d0: call_weak_fn_result :: out u32 = low:32[R0]

000001db:
000001de: R0 := 0x10000
000001e5: R0 := mem[R0 + 0xFD0, el]:u64
000001eb: when R0 = 0 goto %000001e9
000005c0: goto %00000381

000001e9:
000001f1: call R30 with noreturn

00000381:
00000384: goto @__gmon_start__

00000382:
0000044f: R16 := 0x11000
00000456: R17 := mem[R16 + 0x10, el]:u64
0000045c: R16 := R16 + 0x10
00000461: call R17 with noreturn

0000059f: sub deregister_tm_clones(deregister_tm_clones_result)
000005d1: deregister_tm_clones_result :: out u32 = low:32[R0]

000001f7:
000001fa: R0 := 0x11000
00000200: R0 := R0 + 0x30
00000205: R1 := 0x11000
0000020b: R1 := R1 + 0x30
00000211: #1 := ~R0
00000216: #2 := R1 + ~R0
0000021c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000222: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000226: ZF := #2 + 1 = 0
0000022a: NF := 63:63[#2 + 1]
00000230: when ZF goto %0000022e
000005c1: goto %00000363

00000363:
00000366: R1 := 0x10000
0000036d: R1 := mem[R1 + 0xFC0, el]:u64
00000372: when R1 = 0 goto %0000022e
000005c2: goto %00000376

0000022e:
00000236: call R30 with noreturn

00000376:
0000037a: R16 := R1
0000037f: call R16 with noreturn

000005a2: sub frame_dummy(frame_dummy_result)
000005d2: frame_dummy_result :: out u32 = low:32[R0]

000002ce:
000002d0: call @register_tm_clones with noreturn

000005a3: sub get_two(get_two_result)
000005d3: get_two_result :: out u32 = low:32[R0]

00000300:
00000303: R0 := 2
00000308: call R30 with noreturn

000005a4: sub main(main_argc, main_argv, main_result)
000005d4: main_argc :: in u32 = low:32[R0]
000005d5: main_argv :: in out u64 = R1
000005d6: main_result :: out u32 = low:32[R0]

000002d2:
000002d5: R0 := 0
000002da: R8 := 0x11000
000002df: R9 := 1
000002e4: R10 := 0x11000
000002e9: R11 := 2
000002f1: mem := mem with [R8 + 0x34, el]:u32 <- 31:0[R9]
000002f9: mem := mem with [R10 + 0x38, el]:u32 <- 31:0[R11]
000002fe: call R30 with noreturn

000005a5: sub register_tm_clones(register_tm_clones_result)
000005d7: register_tm_clones_result :: out u32 = low:32[R0]

00000238:
0000023b: R0 := 0x11000
00000241: R0 := R0 + 0x30
00000246: R1 := 0x11000
0000024c: R1 := R1 + 0x30
00000253: R1 := R1 + ~R0 + 1
00000259: R2 := 0.63:63[R1]
00000260: R1 := R2 + (R1 ~>> 3)
00000266: R1 := extend:64[63:1[R1]]
0000026c: when R1 = 0 goto %0000026a
000005c3: goto %00000345

00000345:
00000348: R2 := 0x10000
0000034f: R2 := mem[R2 + 0xFE0, el]:u64
00000354: when R2 = 0 goto %0000026a
000005c4: goto %00000358

0000026a:
00000272: call R30 with noreturn

00000358:
0000035c: R16 := R2
00000361: call R16 with noreturn
