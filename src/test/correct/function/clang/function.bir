000005ac: program
00000578: sub __cxa_finalize(__cxa_finalize_result)
000005ad: __cxa_finalize_result :: out u32 = low:32[R0]

0000037b:
00000473: R16 := 0x20000
0000047a: R17 := mem[R16 + 8, el]:u64
00000480: R16 := R16 + 8
00000485: call R17 with noreturn

00000579: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005ae: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000283:
00000287: #3 := R31 - 0x20
0000028d: mem := mem with [#3, el]:u64 <- R29
00000293: mem := mem with [#3 + 8, el]:u64 <- R30
00000297: R31 := #3
0000029d: R29 := R31
000002a5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002aa: R19 := 0x20000
000002b1: R0 := pad:64[mem[R19 + 0x30]]
000002b7: when 0:0[R0] goto %000002b5
000005a2: goto %00000344

00000344:
00000347: R0 := 0x1F000
0000034e: R0 := mem[R0 + 0xFC8, el]:u64
00000354: when R0 = 0 goto %00000352
000005a3: goto %0000036b

0000036b:
0000036e: R0 := 0x20000
00000375: R0 := mem[R0 + 0x28, el]:u64
0000037a: R30 := 0x730
0000037d: call @__cxa_finalize with return %00000352

00000352:
0000035a: R30 := 0x734
0000035c: call @deregister_tm_clones with return %0000035e

0000035e:
00000361: R0 := 1
00000369: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005a4: goto %000002b5

000002b5:
000002bf: R19 := mem[R31 + 0x10, el]:u64
000002c6: R29 := mem[R31, el]:u64
000002cb: R30 := mem[R31 + 8, el]:u64
000002cf: R31 := R31 + 0x20
000002d4: call R30 with noreturn

0000057d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005af: __libc_start_main_main :: in u64 = R0
000005b0: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005b1: __libc_start_main_arg3 :: in out u64 = R2
000005b2: __libc_start_main_auxv :: in out u64 = R3
000005b3: __libc_start_main_result :: out u32 = low:32[R0]

000001dc:
0000045d: R16 := 0x20000
00000464: R17 := mem[R16, el]:u64
0000046a: R16 := R16
0000046f: call R17 with noreturn

0000057e: sub _fini(_fini_result)
000005b4: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000057f: sub _init(_init_result)
000005b5: _init_result :: out u32 = low:32[R0]

000004cd:
000004d3: #6 := R31 - 0x10
000004d9: mem := mem with [#6, el]:u64 <- R29
000004df: mem := mem with [#6 + 8, el]:u64 <- R30
000004e3: R31 := #6
000004e9: R29 := R31
000004ee: R30 := 0x5C8
000004f0: call @call_weak_fn with return %000004f2

000004f2:
000004f7: R29 := mem[R31, el]:u64
000004fc: R30 := mem[R31 + 8, el]:u64
00000500: R31 := R31 + 0x10
00000505: call R30 with noreturn

00000580: sub _start(_start_result)
000005b6: _start_result :: out u32 = low:32[R0]

0000019d:
000001a2: R29 := 0
000001a7: R30 := 0
000001ad: R5 := R0
000001b4: R1 := mem[R31, el]:u64
000001ba: R2 := R31 + 8
000001c0: R6 := R31
000001c5: R0 := 0x1F000
000001cc: R0 := mem[R0 + 0xFD8, el]:u64
000001d1: R3 := 0
000001d6: R4 := 0
000001db: R30 := 0x670
000001de: call @__libc_start_main with return %000001e0

000001e0:
000001e3: R30 := 0x674
000001e6: call @abort with return %000005a5

000005a5:
000005a6: call @call_weak_fn with noreturn

00000583: sub abort()


000001e4:
0000049f: R16 := 0x20000
000004a6: R17 := mem[R16 + 0x18, el]:u64
000004ac: R16 := R16 + 0x18
000004b1: call R17 with noreturn

00000584: sub call_weak_fn(call_weak_fn_result)
000005b7: call_weak_fn_result :: out u32 = low:32[R0]

000001e8:
000001eb: R0 := 0x1F000
000001f2: R0 := mem[R0 + 0xFD0, el]:u64
000001f8: when R0 = 0 goto %000001f6
000005a7: goto %000003bb

000001f6:
000001fe: call R30 with noreturn

000003bb:
000003be: goto @__gmon_start__

000003bc:
00000489: R16 := 0x20000
00000490: R17 := mem[R16 + 0x10, el]:u64
00000496: R16 := R16 + 0x10
0000049b: call R17 with noreturn

00000586: sub deregister_tm_clones(deregister_tm_clones_result)
000005b8: deregister_tm_clones_result :: out u32 = low:32[R0]

00000204:
00000207: R0 := 0x20000
0000020d: R0 := R0 + 0x30
00000212: R1 := 0x20000
00000218: R1 := R1 + 0x30
0000021e: #1 := ~R0
00000223: #2 := R1 + ~R0
00000229: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000022f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000233: ZF := #2 + 1 = 0
00000237: NF := 63:63[#2 + 1]
0000023d: when ZF goto %0000023b
000005a8: goto %0000039d

0000039d:
000003a0: R1 := 0x1F000
000003a7: R1 := mem[R1 + 0xFC0, el]:u64
000003ac: when R1 = 0 goto %0000023b
000005a9: goto %000003b0

0000023b:
00000243: call R30 with noreturn

000003b0:
000003b4: R16 := R1
000003b9: call R16 with noreturn

00000589: sub frame_dummy(frame_dummy_result)
000005b9: frame_dummy_result :: out u32 = low:32[R0]

000002da:
000002dc: call @register_tm_clones with noreturn

0000058a: sub get_two(get_two_result)
000005ba: get_two_result :: out u32 = low:32[R0]

00000310:
00000316: R0 := 2
0000031b: call R30 with noreturn

0000058b: sub main(main_argc, main_argv, main_result)
000005bb: main_argc :: in u32 = low:32[R0]
000005bc: main_argv :: in out u64 = R1
000005bd: main_result :: out u32 = low:32[R0]

000002de:
000002e2: #4 := R31 - 0x10
000002e8: mem := mem with [#4, el]:u64 <- R29
000002ee: mem := mem with [#4 + 8, el]:u64 <- R30
000002f2: R31 := #4
000002f8: R29 := R31
000002fd: R9 := 0x20000
00000302: R8 := 1
0000030a: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
0000030f: R30 := 0x76C
00000312: call @get_two with return %0000031d

0000031d:
00000320: R8 := 0x20000
00000328: mem := mem with [R8 + 0x38, el]:u32 <- 31:0[R0]
0000032d: R0 := 0
00000334: R29 := mem[R31, el]:u64
00000339: R30 := mem[R31 + 8, el]:u64
0000033d: R31 := R31 + 0x10
00000342: call R30 with noreturn

0000058c: sub register_tm_clones(register_tm_clones_result)
000005be: register_tm_clones_result :: out u32 = low:32[R0]

00000245:
00000248: R0 := 0x20000
0000024e: R0 := R0 + 0x30
00000253: R1 := 0x20000
00000259: R1 := R1 + 0x30
00000260: R1 := R1 + ~R0 + 1
00000266: R2 := 0.63:63[R1]
0000026d: R1 := R2 + (R1 ~>> 3)
00000273: R1 := extend:64[63:1[R1]]
00000279: when R1 = 0 goto %00000277
000005aa: goto %0000037f

0000037f:
00000382: R2 := 0x1F000
00000389: R2 := mem[R2 + 0xFE0, el]:u64
0000038e: when R2 = 0 goto %00000277
000005ab: goto %00000392

00000277:
0000027f: call R30 with noreturn

00000392:
00000396: R16 := R2
0000039b: call R16 with noreturn
