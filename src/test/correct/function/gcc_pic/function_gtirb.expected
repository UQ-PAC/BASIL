var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R19: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R19: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 4325400bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 4325396bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 4196332bv64) == 131073bv32);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R19, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R1, R19, R29, R30, R31, mem, stack;
  requires (gamma_load32(Gamma_mem, $x_addr) == true);
  requires (gamma_load32(Gamma_mem, $y_addr) == true);
  free requires (memory_load64_le(mem, 4325376bv64) == 0bv64);
  free requires (memory_load64_le(mem, 4325384bv64) == 0bv64);
  free requires (memory_load32_le(mem, 4196332bv64) == 131073bv32);
  free ensures (Gamma_R19 == old(Gamma_R19));
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R19 == old(R19));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 4196332bv64) == 131073bv32);

implementation main()
{
  var $load1: bv64;
  var $load2: bv64;
  var $load3: bv64;
  var $load4: bv64;
  var $load5: bv64;
  var Cse0__5$1$0: bv64;
  var Gamma_$load1: bool;
  var Gamma_$load2: bool;
  var Gamma_$load3: bool;
  var Gamma_$load4: bool;
  var Gamma_$load5: bool;
  var Gamma_Cse0__5$1$0: bool;
  $main$__0__$xdHqi8HzTJ~zBYVemlzAtg:
    assume {:captureState "$main$__0__$xdHqi8HzTJ~zBYVemlzAtg"} true;
    Cse0__5$1$0, Gamma_Cse0__5$1$0 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5$1$0, R29), gamma_store64(Gamma_stack, Cse0__5$1$0, Gamma_R29);
    assume {:captureState "4195968$1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5$1$0, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5$1$0, 8bv64), Gamma_R30);
    assume {:captureState "4195968$2"} true;
    R31, Gamma_R31 := Cse0__5$1$0, Gamma_Cse0__5$1$0;
    R1, Gamma_R1 := 1bv64, true;
    R29, Gamma_R29 := R31, Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R19), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R19);
    assume {:captureState "4195980$0"} true;
    R19, Gamma_R19 := 4321280bv64, true;
    call rely();
    $load5, Gamma_$load5 := memory_load64_le(mem, bvadd64(R19, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R19, 4064bv64)) || L(mem, bvadd64(R19, 4064bv64)));
    R0, Gamma_R0 := $load5, Gamma_$load5;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "4195992$0"} true;
    R30, Gamma_R30 := 4196000bv64, true;
    call get_two();
    goto $main$__1__$t_6C~3O4SbalxMsQ9Vg3LA;
  $main$__1__$t_6C~3O4SbalxMsQ9Vg3LA:
    assume {:captureState "$main$__1__$t_6C~3O4SbalxMsQ9Vg3LA"} true;
    call rely();
    $load1, Gamma_$load1 := memory_load64_le(mem, bvadd64(R19, 4080bv64)), (gamma_load64(Gamma_mem, bvadd64(R19, 4080bv64)) || L(mem, bvadd64(R19, 4080bv64)));
    R19, Gamma_R19 := $load1, Gamma_$load1;
    R1, Gamma_R1 := zero_extend32_32(R0[32:0]), Gamma_R0;
    R0, Gamma_R0 := 0bv64, true;
    call rely();
    assert (L(mem, R19) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R19, R1[32:0]), gamma_store32(Gamma_mem, R19, Gamma_R1);
    assume {:captureState "4196012$0"} true;
    $load2, Gamma_$load2 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R19, Gamma_R19 := $load2, Gamma_$load2;
    $load3, Gamma_$load3 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R29, Gamma_R29 := $load3, Gamma_$load3;
    $load4, Gamma_$load4 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := $load4, Gamma_$load4;
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

procedure get_two();
  modifies Gamma_R0, R0;
  free requires (memory_load32_le(mem, 4196332bv64) == 131073bv32);
  ensures (Gamma_R0 == true);
  free ensures (memory_load32_le(mem, 4196332bv64) == 131073bv32);

implementation get_two()
{
  $get_two$__0__$32fWxY7~R~~JNJOFTmT~Sg:
    assume {:captureState "$get_two$__0__$32fWxY7~R~~JNJOFTmT~Sg"} true;
    R0, Gamma_R0 := 2bv64, true;
    goto get_two_basil_return;
  get_two_basil_return:
    assume {:captureState "get_two_basil_return"} true;
    return;
}

