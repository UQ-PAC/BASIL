000005c4: program
00000590: sub __cxa_finalize(__cxa_finalize_result)
000005c5: __cxa_finalize_result :: out u32 = low:32[R0]

00000391:
00000489: R16 := 0x20000
00000490: R17 := mem[R16 + 8, el]:u64
00000496: R16 := R16 + 8
0000049b: call R17 with noreturn

00000591: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005c6: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028b:
0000028f: #3 := R31 - 0x20
00000295: mem := mem with [#3, el]:u64 <- R29
0000029b: mem := mem with [#3 + 8, el]:u64 <- R30
0000029f: R31 := #3
000002a5: R29 := R31
000002ad: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b2: R19 := 0x20000
000002b9: R0 := pad:64[mem[R19 + 0x30]]
000002bf: when 0:0[R0] goto %000002bd
000005ba: goto %0000035a

0000035a:
0000035d: R0 := 0x1F000
00000364: R0 := mem[R0 + 0xFB8, el]:u64
0000036a: when R0 = 0 goto %00000368
000005bb: goto %00000381

00000381:
00000384: R0 := 0x20000
0000038b: R0 := mem[R0 + 0x28, el]:u64
00000390: R30 := 0x770
00000393: call @__cxa_finalize with return %00000368

00000368:
00000370: R30 := 0x774
00000372: call @deregister_tm_clones with return %00000374

00000374:
00000377: R0 := 1
0000037f: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005bc: goto %000002bd

000002bd:
000002c7: R19 := mem[R31 + 0x10, el]:u64
000002ce: R29 := mem[R31, el]:u64
000002d3: R30 := mem[R31 + 8, el]:u64
000002d7: R31 := R31 + 0x20
000002dc: call R30 with noreturn

00000595: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005c7: __libc_start_main_main :: in u64 = R0
000005c8: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005c9: __libc_start_main_arg3 :: in out u64 = R2
000005ca: __libc_start_main_auxv :: in out u64 = R3
000005cb: __libc_start_main_result :: out u32 = low:32[R0]

000001e4:
00000473: R16 := 0x20000
0000047a: R17 := mem[R16, el]:u64
00000480: R16 := R16
00000485: call R17 with noreturn

00000596: sub _fini(_fini_result)
000005cc: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000597: sub _init(_init_result)
000005cd: _init_result :: out u32 = low:32[R0]

000004e3:
000004e9: #6 := R31 - 0x10
000004ef: mem := mem with [#6, el]:u64 <- R29
000004f5: mem := mem with [#6 + 8, el]:u64 <- R30
000004f9: R31 := #6
000004ff: R29 := R31
00000504: R30 := 0x5F8
00000506: call @call_weak_fn with return %00000508

00000508:
0000050d: R29 := mem[R31, el]:u64
00000512: R30 := mem[R31 + 8, el]:u64
00000516: R31 := R31 + 0x10
0000051b: call R30 with noreturn

00000598: sub _start(_start_result)
000005ce: _start_result :: out u32 = low:32[R0]

000001a5:
000001aa: R29 := 0
000001af: R30 := 0
000001b5: R5 := R0
000001bc: R1 := mem[R31, el]:u64
000001c2: R2 := R31 + 8
000001c8: R6 := R31
000001cd: R0 := 0x1F000
000001d4: R0 := mem[R0 + 0xFD8, el]:u64
000001d9: R3 := 0
000001de: R4 := 0
000001e3: R30 := 0x6B0
000001e6: call @__libc_start_main with return %000001e8

000001e8:
000001eb: R30 := 0x6B4
000001ee: call @abort with return %000005bd

000005bd:
000005be: call @call_weak_fn with noreturn

0000059b: sub abort()


000001ec:
000004b5: R16 := 0x20000
000004bc: R17 := mem[R16 + 0x18, el]:u64
000004c2: R16 := R16 + 0x18
000004c7: call R17 with noreturn

0000059c: sub call_weak_fn(call_weak_fn_result)
000005cf: call_weak_fn_result :: out u32 = low:32[R0]

000001f0:
000001f3: R0 := 0x1F000
000001fa: R0 := mem[R0 + 0xFC8, el]:u64
00000200: when R0 = 0 goto %000001fe
000005bf: goto %000003d1

000001fe:
00000206: call R30 with noreturn

000003d1:
000003d4: goto @__gmon_start__

000003d2:
0000049f: R16 := 0x20000
000004a6: R17 := mem[R16 + 0x10, el]:u64
000004ac: R16 := R16 + 0x10
000004b1: call R17 with noreturn

0000059e: sub deregister_tm_clones(deregister_tm_clones_result)
000005d0: deregister_tm_clones_result :: out u32 = low:32[R0]

0000020c:
0000020f: R0 := 0x20000
00000215: R0 := R0 + 0x30
0000021a: R1 := 0x20000
00000220: R1 := R1 + 0x30
00000226: #1 := ~R0
0000022b: #2 := R1 + ~R0
00000231: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000237: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023b: ZF := #2 + 1 = 0
0000023f: NF := 63:63[#2 + 1]
00000245: when ZF goto %00000243
000005c0: goto %000003b3

000003b3:
000003b6: R1 := 0x1F000
000003bd: R1 := mem[R1 + 0xFB0, el]:u64
000003c2: when R1 = 0 goto %00000243
000005c1: goto %000003c6

00000243:
0000024b: call R30 with noreturn

000003c6:
000003ca: R16 := R1
000003cf: call R16 with noreturn

000005a1: sub frame_dummy(frame_dummy_result)
000005d1: frame_dummy_result :: out u32 = low:32[R0]

000002e2:
000002e4: call @register_tm_clones with noreturn

000005a2: sub get_two(get_two_result)
000005d2: get_two_result :: out u32 = low:32[R0]

0000031f:
00000325: R0 := 2
0000032a: call R30 with noreturn

000005a3: sub main(main_argc, main_argv, main_result)
000005d3: main_argc :: in u32 = low:32[R0]
000005d4: main_argv :: in out u64 = R1
000005d5: main_result :: out u32 = low:32[R0]

000002e6:
000002ea: #4 := R31 - 0x10
000002f0: mem := mem with [#4, el]:u64 <- R29
000002f6: mem := mem with [#4 + 8, el]:u64 <- R30
000002fa: R31 := #4
00000300: R29 := R31
00000305: R9 := 0x1F000
0000030c: R9 := mem[R9 + 0xFC0, el]:u64
00000311: R8 := 1
00000319: mem := mem with [R9, el]:u32 <- 31:0[R8]
0000031e: R30 := 0x7B0
00000321: call @get_two with return %0000032c

0000032c:
0000032f: R8 := 0x1F000
00000336: R8 := mem[R8 + 0xFD0, el]:u64
0000033e: mem := mem with [R8, el]:u32 <- 31:0[R0]
00000343: R0 := 0
0000034a: R29 := mem[R31, el]:u64
0000034f: R30 := mem[R31 + 8, el]:u64
00000353: R31 := R31 + 0x10
00000358: call R30 with noreturn

000005a4: sub register_tm_clones(register_tm_clones_result)
000005d6: register_tm_clones_result :: out u32 = low:32[R0]

0000024d:
00000250: R0 := 0x20000
00000256: R0 := R0 + 0x30
0000025b: R1 := 0x20000
00000261: R1 := R1 + 0x30
00000268: R1 := R1 + ~R0 + 1
0000026e: R2 := 0.63:63[R1]
00000275: R1 := R2 + (R1 ~>> 3)
0000027b: R1 := extend:64[63:1[R1]]
00000281: when R1 = 0 goto %0000027f
000005c2: goto %00000395

00000395:
00000398: R2 := 0x1F000
0000039f: R2 := mem[R2 + 0xFE0, el]:u64
000003a4: when R2 = 0 goto %0000027f
000005c3: goto %000003a8

0000027f:
00000287: call R30 with noreturn

000003a8:
000003ac: R16 := R2
000003b1: call R16 with noreturn
