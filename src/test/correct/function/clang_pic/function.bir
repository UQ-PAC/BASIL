000005ab: program
00000577: sub __cxa_finalize(__cxa_finalize_result)
000005ac: __cxa_finalize_result :: out u32 = low:32[R0]

00000391:
00000489: R16 := 0x11000
00000490: R17 := mem[R16 + 8, el]:u64
00000496: R16 := R16 + 8
0000049b: call R17 with noreturn

00000578: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005ad: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028a:
0000028e: #3 := R31 - 0x20
00000294: mem := mem with [#3, el]:u64 <- R29
0000029a: mem := mem with [#3 + 8, el]:u64 <- R30
0000029e: R31 := #3
000002a4: R29 := R31
000002ac: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b1: R19 := 0x11000
000002b8: R0 := pad:64[mem[R19 + 0x30]]
000002bf: when 31:0[R0] <> 0 goto %000002bd
000005a1: goto %0000035a

0000035a:
0000035d: R0 := 0x10000
00000364: R0 := mem[R0 + 0xFB8, el]:u64
0000036a: when R0 = 0 goto %00000368
000005a2: goto %00000381

00000381:
00000384: R0 := 0x11000
0000038b: R0 := mem[R0 + 0x28, el]:u64
00000390: R30 := 0x730
00000393: call @__cxa_finalize with return %00000368

00000368:
00000370: R30 := 0x734
00000372: call @deregister_tm_clones with return %00000374

00000374:
00000377: R0 := 1
0000037f: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005a3: goto %000002bd

000002bd:
000002c7: R19 := mem[R31 + 0x10, el]:u64
000002ce: R29 := mem[R31, el]:u64
000002d3: R30 := mem[R31 + 8, el]:u64
000002d7: R31 := R31 + 0x20
000002dc: call R30 with noreturn

0000057c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005ae: __libc_start_main_main :: in u64 = R0
000005af: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005b0: __libc_start_main_arg3 :: in out u64 = R2
000005b1: __libc_start_main_auxv :: in out u64 = R3
000005b2: __libc_start_main_result :: out u32 = low:32[R0]

000001e3:
00000473: R16 := 0x11000
0000047a: R17 := mem[R16, el]:u64
00000480: R16 := R16
00000485: call R17 with noreturn

0000057d: sub _fini(_fini_result)
000005b3: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000057e: sub _init(_init_result)
000005b4: _init_result :: out u32 = low:32[R0]

000004e3:
000004e9: #6 := R31 - 0x10
000004ef: mem := mem with [#6, el]:u64 <- R29
000004f5: mem := mem with [#6 + 8, el]:u64 <- R30
000004f9: R31 := #6
000004ff: R29 := R31
00000504: R30 := 0x5C0
00000506: call @call_weak_fn with return %00000508

00000508:
0000050d: R29 := mem[R31, el]:u64
00000512: R30 := mem[R31 + 8, el]:u64
00000516: R31 := R31 + 0x10
0000051b: call R30 with noreturn

0000057f: sub _start(_start_result)
000005b5: _start_result :: out u32 = low:32[R0]

000001a4:
000001a9: R29 := 0
000001ae: R30 := 0
000001b4: R5 := R0
000001bb: R1 := mem[R31, el]:u64
000001c1: R2 := R31 + 8
000001c7: R6 := R31
000001cc: R0 := 0x10000
000001d3: R0 := mem[R0 + 0xFD8, el]:u64
000001d8: R3 := 0
000001dd: R4 := 0
000001e2: R30 := 0x670
000001e5: call @__libc_start_main with return %000001e7

000001e7:
000001ea: R30 := 0x674
000001ed: call @abort with return %000005a4

000005a4:
000005a5: call @call_weak_fn with noreturn

00000582: sub abort()


000001eb:
000004b5: R16 := 0x11000
000004bc: R17 := mem[R16 + 0x18, el]:u64
000004c2: R16 := R16 + 0x18
000004c7: call R17 with noreturn

00000583: sub call_weak_fn(call_weak_fn_result)
000005b6: call_weak_fn_result :: out u32 = low:32[R0]

000001ef:
000001f2: R0 := 0x10000
000001f9: R0 := mem[R0 + 0xFC8, el]:u64
000001ff: when R0 = 0 goto %000001fd
000005a6: goto %000003d1

000001fd:
00000205: call R30 with noreturn

000003d1:
000003d4: goto @__gmon_start__

000003d2:
0000049f: R16 := 0x11000
000004a6: R17 := mem[R16 + 0x10, el]:u64
000004ac: R16 := R16 + 0x10
000004b1: call R17 with noreturn

00000585: sub deregister_tm_clones(deregister_tm_clones_result)
000005b7: deregister_tm_clones_result :: out u32 = low:32[R0]

0000020b:
0000020e: R0 := 0x11000
00000214: R0 := R0 + 0x30
00000219: R1 := 0x11000
0000021f: R1 := R1 + 0x30
00000225: #1 := ~R0
0000022a: #2 := R1 + ~R0
00000230: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000236: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023a: ZF := #2 + 1 = 0
0000023e: NF := 63:63[#2 + 1]
00000244: when ZF goto %00000242
000005a7: goto %000003b3

000003b3:
000003b6: R1 := 0x10000
000003bd: R1 := mem[R1 + 0xFB0, el]:u64
000003c2: when R1 = 0 goto %00000242
000005a8: goto %000003c6

00000242:
0000024a: call R30 with noreturn

000003c6:
000003ca: R16 := R1
000003cf: call R16 with noreturn

00000588: sub frame_dummy(frame_dummy_result)
000005b8: frame_dummy_result :: out u32 = low:32[R0]

000002e2:
000002e4: call @register_tm_clones with noreturn

00000589: sub get_two(get_two_result)
000005b9: get_two_result :: out u32 = low:32[R0]

0000031f:
00000325: R0 := 2
0000032a: call R30 with noreturn

0000058a: sub main(main_argc, main_argv, main_result)
000005ba: main_argc :: in u32 = low:32[R0]
000005bb: main_argv :: in out u64 = R1
000005bc: main_result :: out u32 = low:32[R0]

000002e6:
000002ea: #4 := R31 - 0x10
000002f0: mem := mem with [#4, el]:u64 <- R29
000002f6: mem := mem with [#4 + 8, el]:u64 <- R30
000002fa: R31 := #4
00000300: R29 := R31
00000305: R9 := 0x10000
0000030c: R9 := mem[R9 + 0xFC0, el]:u64
00000311: R8 := 1
00000319: mem := mem with [R9, el]:u32 <- 31:0[R8]
0000031e: R30 := 0x770
00000321: call @get_two with return %0000032c

0000032c:
0000032f: R8 := 0x10000
00000336: R8 := mem[R8 + 0xFD0, el]:u64
0000033e: mem := mem with [R8, el]:u32 <- 31:0[R0]
00000343: R0 := 0
0000034a: R29 := mem[R31, el]:u64
0000034f: R30 := mem[R31 + 8, el]:u64
00000353: R31 := R31 + 0x10
00000358: call R30 with noreturn

0000058b: sub register_tm_clones(register_tm_clones_result)
000005bd: register_tm_clones_result :: out u32 = low:32[R0]

0000024c:
0000024f: R0 := 0x11000
00000255: R0 := R0 + 0x30
0000025a: R1 := 0x11000
00000260: R1 := R1 + 0x30
00000267: R1 := R1 + ~R0 + 1
0000026d: R2 := 0.63:63[R1]
00000274: R1 := R2 + (R1 ~>> 3)
0000027a: R1 := extend:64[63:1[R1]]
00000280: when R1 = 0 goto %0000027e
000005a9: goto %00000395

00000395:
00000398: R2 := 0x10000
0000039f: R2 := mem[R2 + 0xFE0, el]:u64
000003a4: when R2 = 0 goto %0000027e
000005aa: goto %000003a8

0000027e:
00000286: call R30 with noreturn

000003a8:
000003ac: R16 := R2
000003b1: call R16 with noreturn
