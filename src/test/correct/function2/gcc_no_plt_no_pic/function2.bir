00000de4: program
00000dcb: sub __cxa_finalize(__cxa_finalize_result)
00000de5: __cxa_finalize_result :: out u32 = low:32[R0]

00000b4b:
00000c43: R16 := 0x20000
00000c4a: R17 := mem[R16 + 8, el]:u64
00000c50: R16 := R16 + 8
00000c55: call R17 with noreturn

00000dcc: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000de6: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000009d4:
000009d8: #3 := R31 - 0x20
000009de: mem := mem with [#3, el]:u64 <- R29
000009e4: mem := mem with [#3 + 8, el]:u64 <- R30
000009e8: R31 := #3
000009ee: R29 := R31
000009f6: mem := mem with [R31 + 0x10, el]:u64 <- R19
000009fb: R19 := 0x20000
00000a02: R0 := pad:64[mem[R19 + 0x30]]
00000a08: when 0:0[R0] goto %00000a06
00000dcd: goto %00000b14

00000b14:
00000b17: R0 := 0x1F000
00000b1e: R0 := mem[R0 + 0xFC8, el]:u64
00000b24: when R0 = 0 goto %00000b22
00000dce: goto %00000b3b

00000b3b:
00000b3e: R0 := 0x20000
00000b45: R0 := mem[R0 + 0x28, el]:u64
00000b4a: R30 := 0x6FC
00000b4d: call @__cxa_finalize with return %00000b22

00000b22:
00000b2a: R30 := 0x700
00000b2c: call @deregister_tm_clones with return %00000b2e

00000b2e:
00000b31: R0 := 1
00000b39: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000dcf: goto %00000a06

00000a06:
00000a10: R19 := mem[R31 + 0x10, el]:u64
00000a17: R29 := mem[R31, el]:u64
00000a1c: R30 := mem[R31 + 8, el]:u64
00000a20: R31 := R31 + 0x20
00000a25: call R30 with noreturn

00000dd0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000de7: __libc_start_main_main :: in u64 = R0
00000de8: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000de9: __libc_start_main_arg3 :: in out u64 = R2
00000dea: __libc_start_main_auxv :: in out u64 = R3
00000deb: __libc_start_main_result :: out u32 = low:32[R0]

00000927:
00000c2d: R16 := 0x20000
00000c34: R17 := mem[R16, el]:u64
00000c3a: R16 := R16
00000c3f: call R17 with noreturn

00000dd1: sub _fini(_fini_result)
00000dec: _fini_result :: out u32 = low:32[R0]

00000717:
0000071d: #0 := R31 - 0x10
00000723: mem := mem with [#0, el]:u64 <- R29
00000729: mem := mem with [#0 + 8, el]:u64 <- R30
0000072d: R31 := #0
00000733: R29 := R31
0000073a: R29 := mem[R31, el]:u64
0000073f: R30 := mem[R31 + 8, el]:u64
00000743: R31 := R31 + 0x10
00000748: call R30 with noreturn

00000dd2: sub _init(_init_result)
00000ded: _init_result :: out u32 = low:32[R0]

00000d0b:
00000d11: #7 := R31 - 0x10
00000d17: mem := mem with [#7, el]:u64 <- R29
00000d1d: mem := mem with [#7 + 8, el]:u64 <- R30
00000d21: R31 := #7
00000d27: R29 := R31
00000d2c: R30 := 0x590
00000d2e: call @call_weak_fn with return %00000d30

00000d30:
00000d35: R29 := mem[R31, el]:u64
00000d3a: R30 := mem[R31 + 8, el]:u64
00000d3e: R31 := R31 + 0x10
00000d43: call R30 with noreturn

00000dd3: sub _start(_start_result)
00000dee: _start_result :: out u32 = low:32[R0]

000008e8:
000008ed: R29 := 0
000008f2: R30 := 0
000008f8: R5 := R0
000008ff: R1 := mem[R31, el]:u64
00000905: R2 := R31 + 8
0000090b: R6 := R31
00000910: R0 := 0x1F000
00000917: R0 := mem[R0 + 0xFD8, el]:u64
0000091c: R3 := 0
00000921: R4 := 0
00000926: R30 := 0x630
00000929: call @__libc_start_main with return %0000092b

0000092b:
0000092e: R30 := 0x634
00000931: call @abort with return %00000dd4

00000dd4:
00000dd5: call @call_weak_fn with noreturn

00000dd6: sub abort()


0000092f:
00000c6f: R16 := 0x20000
00000c76: R17 := mem[R16 + 0x18, el]:u64
00000c7c: R16 := R16 + 0x18
00000c81: call R17 with noreturn

00000dd7: sub call_weak_fn(call_weak_fn_result)
00000def: call_weak_fn_result :: out u32 = low:32[R0]

00000933:
00000936: R0 := 0x1F000
0000093d: R0 := mem[R0 + 0xFD0, el]:u64
00000943: when R0 = 0 goto %00000941
00000dd8: goto %00000b8b

00000941:
00000949: call R30 with noreturn

00000b8b:
00000b8e: goto @__gmon_start__

00000b8c:
00000c59: R16 := 0x20000
00000c60: R17 := mem[R16 + 0x10, el]:u64
00000c66: R16 := R16 + 0x10
00000c6b: call R17 with noreturn

00000dd9: sub deregister_tm_clones(deregister_tm_clones_result)
00000df0: deregister_tm_clones_result :: out u32 = low:32[R0]

00000957:
0000095a: R0 := 0x20000
00000960: R0 := R0 + 0x30
00000965: R1 := 0x20000
0000096b: R1 := R1 + 0x30
00000971: #1 := ~R0
00000976: #2 := R1 + ~R0
0000097c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000982: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000986: ZF := #2 + 1 = 0
0000098a: NF := 63:63[#2 + 1]
00000990: when ZF goto %0000098e
00000dda: goto %00000b6d

00000b6d:
00000b70: R1 := 0x1F000
00000b77: R1 := mem[R1 + 0xFC0, el]:u64
00000b7c: when R1 = 0 goto %0000098e
00000ddb: goto %00000b80

0000098e:
00000996: call R30 with noreturn

00000b80:
00000b84: R16 := R1
00000b89: call R16 with noreturn

00000ddc: sub f(f_result)
00000df1: f_result :: out u32 = low:32[R0]

00000a31:
00000a35: R31 := R31 - 0x10
00000a3d: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000a45: mem := mem with [R31 + 8, el]:u32 <- 31:0[R1]
00000a4a: R0 := 0x20000
00000a50: R0 := R0 + 0x38
00000a57: R0 := pad:64[mem[R0, el]:u32]
00000a5d: #4 := 31:0[R0]
00000a62: VF := 0
00000a67: CF := pad:33[#4] <> pad:33[31:0[R0]] - 0x100000000
00000a6b: ZF := #4 = 0
00000a6f: NF := 31:31[#4]
00000a75: when ZF goto %00000a73
00000ddd: goto %00000b09

00000a73:
00000a7d: R0 := pad:64[mem[R31 + 8, el]:u32]
00000dde: goto %00000a7f

00000b09:
00000b0e: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000b12: goto %00000a7f

00000a7f:
00000a83: R31 := R31 + 0x10
00000a88: call R30 with noreturn

00000ddf: sub frame_dummy(frame_dummy_result)
00000df2: frame_dummy_result :: out u32 = low:32[R0]

00000a2d:
00000a2f: call @register_tm_clones with noreturn

00000de0: sub main(main_argc, main_argv, main_result)
00000df3: main_argc :: in u32 = low:32[R0]
00000df4: main_argv :: in out u64 = R1
00000df5: main_result :: out u32 = low:32[R0]

00000a8a:
00000a8e: #5 := R31 - 0x10
00000a94: mem := mem with [#5, el]:u64 <- R29
00000a9a: mem := mem with [#5 + 8, el]:u64 <- R30
00000a9e: R31 := #5
00000aa4: R29 := R31
00000aa9: R0 := 0x20000
00000aaf: R0 := R0 + 0x38
00000ab6: mem := mem with [R0, el]:u32 <- 0
00000abb: R0 := 0x20000
00000ac1: R0 := R0 + 0x34
00000ac8: R0 := pad:64[mem[R0, el]:u32]
00000acd: R1 := 1
00000ad2: R30 := 0x780
00000ad4: call @f with return %00000ad6

00000ad6:
00000ada: R1 := pad:64[31:0[R0]]
00000adf: R0 := 0x20000
00000ae5: R0 := R0 + 0x34
00000aed: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000af2: R0 := 0
00000af9: R29 := mem[R31, el]:u64
00000afe: R30 := mem[R31 + 8, el]:u64
00000b02: R31 := R31 + 0x10
00000b07: call R30 with noreturn

00000de1: sub register_tm_clones(register_tm_clones_result)
00000df6: register_tm_clones_result :: out u32 = low:32[R0]

00000998:
0000099b: R0 := 0x20000
000009a1: R0 := R0 + 0x30
000009a6: R1 := 0x20000
000009ac: R1 := R1 + 0x30
000009b3: R1 := R1 + ~R0 + 1
000009b9: R2 := 0.63:63[R1]
000009c0: R1 := R2 + (R1 ~>> 3)
000009c6: R1 := extend:64[63:1[R1]]
000009cc: when R1 = 0 goto %000009ca
00000de2: goto %00000b4f

00000b4f:
00000b52: R2 := 0x1F000
00000b59: R2 := mem[R2 + 0xFE0, el]:u64
00000b5e: when R2 = 0 goto %000009ca
00000de3: goto %00000b62

000009ca:
000009d2: call R30 with noreturn

00000b62:
00000b66: R16 := R2
00000b6b: call R16 with noreturn
