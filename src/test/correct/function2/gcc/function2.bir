0000070c: program
000006d4: sub __cxa_finalize(__cxa_finalize_result)
0000070d: __cxa_finalize_result :: out u32 = low:32[R0]

00000454:
0000054c: R16 := 0x20000
00000553: R17 := mem[R16 + 8, el]:u64
00000559: R16 := R16 + 8
0000055e: call R17 with noreturn

000006d5: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000070e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002dd:
000002e1: #3 := R31 - 0x20
000002e7: mem := mem with [#3, el]:u64 <- R29
000002ed: mem := mem with [#3 + 8, el]:u64 <- R30
000002f1: R31 := #3
000002f7: R29 := R31
000002ff: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000304: R19 := 0x20000
0000030b: R0 := pad:64[mem[R19 + 0x30]]
00000311: when 0:0[R0] goto %0000030f
00000700: goto %0000041d

0000041d:
00000420: R0 := 0x1F000
00000427: R0 := mem[R0 + 0xFC8, el]:u64
0000042d: when R0 = 0 goto %0000042b
00000701: goto %00000444

00000444:
00000447: R0 := 0x20000
0000044e: R0 := mem[R0 + 0x28, el]:u64
00000453: R30 := 0x6FC
00000456: call @__cxa_finalize with return %0000042b

0000042b:
00000433: R30 := 0x700
00000435: call @deregister_tm_clones with return %00000437

00000437:
0000043a: R0 := 1
00000442: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000702: goto %0000030f

0000030f:
00000319: R19 := mem[R31 + 0x10, el]:u64
00000320: R29 := mem[R31, el]:u64
00000325: R30 := mem[R31 + 8, el]:u64
00000329: R31 := R31 + 0x20
0000032e: call R30 with noreturn

000006d9: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000070f: __libc_start_main_main :: in u64 = R0
00000710: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000711: __libc_start_main_arg3 :: in out u64 = R2
00000712: __libc_start_main_auxv :: in out u64 = R3
00000713: __libc_start_main_result :: out u32 = low:32[R0]

00000230:
00000536: R16 := 0x20000
0000053d: R17 := mem[R16, el]:u64
00000543: R16 := R16
00000548: call R17 with noreturn

000006da: sub _fini(_fini_result)
00000714: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000006db: sub _init(_init_result)
00000715: _init_result :: out u32 = low:32[R0]

00000614:
0000061a: #7 := R31 - 0x10
00000620: mem := mem with [#7, el]:u64 <- R29
00000626: mem := mem with [#7 + 8, el]:u64 <- R30
0000062a: R31 := #7
00000630: R29 := R31
00000635: R30 := 0x590
00000637: call @call_weak_fn with return %00000639

00000639:
0000063e: R29 := mem[R31, el]:u64
00000643: R30 := mem[R31 + 8, el]:u64
00000647: R31 := R31 + 0x10
0000064c: call R30 with noreturn

000006dc: sub _start(_start_result)
00000716: _start_result :: out u32 = low:32[R0]

000001f1:
000001f6: R29 := 0
000001fb: R30 := 0
00000201: R5 := R0
00000208: R1 := mem[R31, el]:u64
0000020e: R2 := R31 + 8
00000214: R6 := R31
00000219: R0 := 0x1F000
00000220: R0 := mem[R0 + 0xFD8, el]:u64
00000225: R3 := 0
0000022a: R4 := 0
0000022f: R30 := 0x630
00000232: call @__libc_start_main with return %00000234

00000234:
00000237: R30 := 0x634
0000023a: call @abort with return %00000703

00000703:
00000704: call @call_weak_fn with noreturn

000006df: sub abort()


00000238:
00000578: R16 := 0x20000
0000057f: R17 := mem[R16 + 0x18, el]:u64
00000585: R16 := R16 + 0x18
0000058a: call R17 with noreturn

000006e0: sub call_weak_fn(call_weak_fn_result)
00000717: call_weak_fn_result :: out u32 = low:32[R0]

0000023c:
0000023f: R0 := 0x1F000
00000246: R0 := mem[R0 + 0xFD0, el]:u64
0000024c: when R0 = 0 goto %0000024a
00000705: goto %00000494

0000024a:
00000252: call R30 with noreturn

00000494:
00000497: goto @__gmon_start__

00000495:
00000562: R16 := 0x20000
00000569: R17 := mem[R16 + 0x10, el]:u64
0000056f: R16 := R16 + 0x10
00000574: call R17 with noreturn

000006e2: sub deregister_tm_clones(deregister_tm_clones_result)
00000718: deregister_tm_clones_result :: out u32 = low:32[R0]

00000260:
00000263: R0 := 0x20000
00000269: R0 := R0 + 0x30
0000026e: R1 := 0x20000
00000274: R1 := R1 + 0x30
0000027a: #1 := ~R0
0000027f: #2 := R1 + ~R0
00000285: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000028b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000028f: ZF := #2 + 1 = 0
00000293: NF := 63:63[#2 + 1]
00000299: when ZF goto %00000297
00000706: goto %00000476

00000476:
00000479: R1 := 0x1F000
00000480: R1 := mem[R1 + 0xFC0, el]:u64
00000485: when R1 = 0 goto %00000297
00000707: goto %00000489

00000297:
0000029f: call R30 with noreturn

00000489:
0000048d: R16 := R1
00000492: call R16 with noreturn

000006e5: sub f(f_result)
00000719: f_result :: out u32 = low:32[R0]

0000033a:
0000033e: R31 := R31 - 0x10
00000346: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000034e: mem := mem with [R31 + 8, el]:u32 <- 31:0[R1]
00000353: R0 := 0x20000
00000359: R0 := R0 + 0x38
00000360: R0 := pad:64[mem[R0, el]:u32]
00000366: #4 := 31:0[R0]
0000036b: VF := 0
00000370: CF := pad:33[#4] <> pad:33[31:0[R0]] - 0x100000000
00000374: ZF := #4 = 0
00000378: NF := 31:31[#4]
0000037e: when ZF goto %0000037c
00000708: goto %00000412

0000037c:
00000386: R0 := pad:64[mem[R31 + 8, el]:u32]
00000709: goto %00000388

00000412:
00000417: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000041b: goto %00000388

00000388:
0000038c: R31 := R31 + 0x10
00000391: call R30 with noreturn

000006e8: sub frame_dummy(frame_dummy_result)
0000071a: frame_dummy_result :: out u32 = low:32[R0]

00000336:
00000338: call @register_tm_clones with noreturn

000006e9: sub main(main_argc, main_argv, main_result)
0000071b: main_argc :: in u32 = low:32[R0]
0000071c: main_argv :: in out u64 = R1
0000071d: main_result :: out u32 = low:32[R0]

00000393:
00000397: #5 := R31 - 0x10
0000039d: mem := mem with [#5, el]:u64 <- R29
000003a3: mem := mem with [#5 + 8, el]:u64 <- R30
000003a7: R31 := #5
000003ad: R29 := R31
000003b2: R0 := 0x20000
000003b8: R0 := R0 + 0x38
000003bf: mem := mem with [R0, el]:u32 <- 0
000003c4: R0 := 0x20000
000003ca: R0 := R0 + 0x34
000003d1: R0 := pad:64[mem[R0, el]:u32]
000003d6: R1 := 1
000003db: R30 := 0x780
000003dd: call @f with return %000003df

000003df:
000003e3: R1 := pad:64[31:0[R0]]
000003e8: R0 := 0x20000
000003ee: R0 := R0 + 0x34
000003f6: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003fb: R0 := 0
00000402: R29 := mem[R31, el]:u64
00000407: R30 := mem[R31 + 8, el]:u64
0000040b: R31 := R31 + 0x10
00000410: call R30 with noreturn

000006ea: sub register_tm_clones(register_tm_clones_result)
0000071e: register_tm_clones_result :: out u32 = low:32[R0]

000002a1:
000002a4: R0 := 0x20000
000002aa: R0 := R0 + 0x30
000002af: R1 := 0x20000
000002b5: R1 := R1 + 0x30
000002bc: R1 := R1 + ~R0 + 1
000002c2: R2 := 0.63:63[R1]
000002c9: R1 := R2 + (R1 ~>> 3)
000002cf: R1 := extend:64[63:1[R1]]
000002d5: when R1 = 0 goto %000002d3
0000070a: goto %00000458

00000458:
0000045b: R2 := 0x1F000
00000462: R2 := mem[R2 + 0xFE0, el]:u64
00000467: when R2 = 0 goto %000002d3
0000070b: goto %0000046b

000002d3:
000002db: call R30 with noreturn

0000046b:
0000046f: R16 := R2
00000474: call R16 with noreturn
