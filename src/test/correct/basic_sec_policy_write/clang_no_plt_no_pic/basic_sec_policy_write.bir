000005a1: program
0000056f: sub __cxa_finalize(__cxa_finalize_result)
000005a2: __cxa_finalize_result :: out u32 = low:32[R0]

00000371:
00000469: R16 := 0x20000
00000470: R17 := mem[R16 + 8, el]:u64
00000476: R16 := R16 + 8
0000047b: call R17 with noreturn

00000570: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005a3: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000287:
0000028b: #3 := R31 - 0x20
00000291: mem := mem with [#3, el]:u64 <- R29
00000297: mem := mem with [#3 + 8, el]:u64 <- R30
0000029b: R31 := #3
000002a1: R29 := R31
000002a9: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ae: R19 := 0x20000
000002b5: R0 := pad:64[mem[R19 + 0x30]]
000002bb: when 0:0[R0] goto %000002b9
00000597: goto %0000033a

0000033a:
0000033d: R0 := 0x1F000
00000344: R0 := mem[R0 + 0xFC8, el]:u64
0000034a: when R0 = 0 goto %00000348
00000598: goto %00000361

00000361:
00000364: R0 := 0x20000
0000036b: R0 := mem[R0 + 0x28, el]:u64
00000370: R30 := 0x730
00000373: call @__cxa_finalize with return %00000348

00000348:
00000350: R30 := 0x734
00000352: call @deregister_tm_clones with return %00000354

00000354:
00000357: R0 := 1
0000035f: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000599: goto %000002b9

000002b9:
000002c3: R19 := mem[R31 + 0x10, el]:u64
000002ca: R29 := mem[R31, el]:u64
000002cf: R30 := mem[R31 + 8, el]:u64
000002d3: R31 := R31 + 0x20
000002d8: call R30 with noreturn

00000574: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005a4: __libc_start_main_main :: in u64 = R0
000005a5: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005a6: __libc_start_main_arg3 :: in out u64 = R2
000005a7: __libc_start_main_auxv :: in out u64 = R3
000005a8: __libc_start_main_result :: out u32 = low:32[R0]

000001e0:
00000453: R16 := 0x20000
0000045a: R17 := mem[R16, el]:u64
00000460: R16 := R16
00000465: call R17 with noreturn

00000575: sub _fini(_fini_result)
000005a9: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000576: sub _init(_init_result)
000005aa: _init_result :: out u32 = low:32[R0]

000004c3:
000004c9: #5 := R31 - 0x10
000004cf: mem := mem with [#5, el]:u64 <- R29
000004d5: mem := mem with [#5 + 8, el]:u64 <- R30
000004d9: R31 := #5
000004df: R29 := R31
000004e4: R30 := 0x5C8
000004e6: call @call_weak_fn with return %000004e8

000004e8:
000004ed: R29 := mem[R31, el]:u64
000004f2: R30 := mem[R31 + 8, el]:u64
000004f6: R31 := R31 + 0x10
000004fb: call R30 with noreturn

00000577: sub _start(_start_result)
000005ab: _start_result :: out u32 = low:32[R0]

000001a1:
000001a6: R29 := 0
000001ab: R30 := 0
000001b1: R5 := R0
000001b8: R1 := mem[R31, el]:u64
000001be: R2 := R31 + 8
000001c4: R6 := R31
000001c9: R0 := 0x1F000
000001d0: R0 := mem[R0 + 0xFD8, el]:u64
000001d5: R3 := 0
000001da: R4 := 0
000001df: R30 := 0x670
000001e2: call @__libc_start_main with return %000001e4

000001e4:
000001e7: R30 := 0x674
000001ea: call @abort with return %0000059a

0000059a:
0000059b: call @call_weak_fn with noreturn

0000057a: sub abort()


000001e8:
00000495: R16 := 0x20000
0000049c: R17 := mem[R16 + 0x18, el]:u64
000004a2: R16 := R16 + 0x18
000004a7: call R17 with noreturn

0000057b: sub call_weak_fn(call_weak_fn_result)
000005ac: call_weak_fn_result :: out u32 = low:32[R0]

000001ec:
000001ef: R0 := 0x1F000
000001f6: R0 := mem[R0 + 0xFD0, el]:u64
000001fc: when R0 = 0 goto %000001fa
0000059c: goto %000003b1

000001fa:
00000202: call R30 with noreturn

000003b1:
000003b4: goto @__gmon_start__

000003b2:
0000047f: R16 := 0x20000
00000486: R17 := mem[R16 + 0x10, el]:u64
0000048c: R16 := R16 + 0x10
00000491: call R17 with noreturn

0000057d: sub deregister_tm_clones(deregister_tm_clones_result)
000005ad: deregister_tm_clones_result :: out u32 = low:32[R0]

00000208:
0000020b: R0 := 0x20000
00000211: R0 := R0 + 0x30
00000216: R1 := 0x20000
0000021c: R1 := R1 + 0x30
00000222: #1 := ~R0
00000227: #2 := R1 + ~R0
0000022d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000233: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000237: ZF := #2 + 1 = 0
0000023b: NF := 63:63[#2 + 1]
00000241: when ZF goto %0000023f
0000059d: goto %00000393

00000393:
00000396: R1 := 0x1F000
0000039d: R1 := mem[R1 + 0xFC0, el]:u64
000003a2: when R1 = 0 goto %0000023f
0000059e: goto %000003a6

0000023f:
00000247: call R30 with noreturn

000003a6:
000003aa: R16 := R1
000003af: call R16 with noreturn

00000580: sub frame_dummy(frame_dummy_result)
000005ae: frame_dummy_result :: out u32 = low:32[R0]

000002de:
000002e0: call @register_tm_clones with noreturn

00000581: sub main(main_argc, main_argv, main_result)
000005af: main_argc :: in u32 = low:32[R0]
000005b0: main_argv :: in out u64 = R1
000005b1: main_result :: out u32 = low:32[R0]

000002e2:
000002e6: R31 := R31 - 0x10
000002ee: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000002f3: R9 := 0x20000
000002f8: R8 := 1
00000300: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
00000307: R10 := pad:64[mem[R31 + 0xC, el]:u32]
0000030c: R8 := 0x20000
00000314: mem := mem with [R8 + 0x38, el]:u32 <- 31:0[R10]
00000319: R0 := 0
00000320: mem := mem with [R8 + 0x38, el]:u32 <- 0
00000325: R8 := 2
0000032d: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
00000333: R31 := R31 + 0x10
00000338: call R30 with noreturn

00000582: sub register_tm_clones(register_tm_clones_result)
000005b2: register_tm_clones_result :: out u32 = low:32[R0]

00000249:
0000024c: R0 := 0x20000
00000252: R0 := R0 + 0x30
00000257: R1 := 0x20000
0000025d: R1 := R1 + 0x30
00000264: R1 := R1 + ~R0 + 1
0000026a: R2 := 0.63:63[R1]
00000271: R1 := R2 + (R1 ~>> 3)
00000277: R1 := extend:64[63:1[R1]]
0000027d: when R1 = 0 goto %0000027b
0000059f: goto %00000375

00000375:
00000378: R2 := 0x1F000
0000037f: R2 := mem[R2 + 0xFE0, el]:u64
00000384: when R2 = 0 goto %0000027b
000005a0: goto %00000388

0000027b:
00000283: call R30 with noreturn

00000388:
0000038c: R16 := R2
00000391: call R16 with noreturn
