00000bc8: program
00000bb2: sub __cxa_finalize(__cxa_finalize_result)
00000bc9: __cxa_finalize_result :: out u32 = low:32[R0]

0000095a:
00000a52: R16 := 0x11000
00000a59: R17 := mem[R16 + 8, el]:u64
00000a5f: R16 := R16 + 8
00000a64: call R17 with noreturn

00000bb3: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000bca: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000086f:
00000873: #3 := R31 - 0x20
00000879: mem := mem with [#3, el]:u64 <- R29
0000087f: mem := mem with [#3 + 8, el]:u64 <- R30
00000883: R31 := #3
00000889: R29 := R31
00000891: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000896: R19 := 0x11000
0000089d: R0 := pad:64[mem[R19 + 0x30]]
000008a4: when 31:0[R0] <> 0 goto %000008a2
00000bb4: goto %00000923

00000923:
00000926: R0 := 0x10000
0000092d: R0 := mem[R0 + 0xFC8, el]:u64
00000933: when R0 = 0 goto %00000931
00000bb5: goto %0000094a

0000094a:
0000094d: R0 := 0x11000
00000954: R0 := mem[R0 + 0x28, el]:u64
00000959: R30 := 0x6F0
0000095c: call @__cxa_finalize with return %00000931

00000931:
00000939: R30 := 0x6F4
0000093b: call @deregister_tm_clones with return %0000093d

0000093d:
00000940: R0 := 1
00000948: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000bb6: goto %000008a2

000008a2:
000008ac: R19 := mem[R31 + 0x10, el]:u64
000008b3: R29 := mem[R31, el]:u64
000008b8: R30 := mem[R31 + 8, el]:u64
000008bc: R31 := R31 + 0x20
000008c1: call R30 with noreturn

00000bb7: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000bcb: __libc_start_main_main :: in u64 = R0
00000bcc: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000bcd: __libc_start_main_arg3 :: in out u64 = R2
00000bce: __libc_start_main_auxv :: in out u64 = R3
00000bcf: __libc_start_main_result :: out u32 = low:32[R0]

000007c8:
00000a3c: R16 := 0x11000
00000a43: R17 := mem[R16, el]:u64
00000a49: R16 := R16
00000a4e: call R17 with noreturn

00000bb8: sub _fini(_fini_result)
00000bd0: _fini_result :: out u32 = low:32[R0]

00000608:
0000060e: #0 := R31 - 0x10
00000614: mem := mem with [#0, el]:u64 <- R29
0000061a: mem := mem with [#0 + 8, el]:u64 <- R30
0000061e: R31 := #0
00000624: R29 := R31
0000062b: R29 := mem[R31, el]:u64
00000630: R30 := mem[R31 + 8, el]:u64
00000634: R31 := R31 + 0x10
00000639: call R30 with noreturn

00000bb9: sub _init(_init_result)
00000bd1: _init_result :: out u32 = low:32[R0]

00000b06:
00000b0c: #5 := R31 - 0x10
00000b12: mem := mem with [#5, el]:u64 <- R29
00000b18: mem := mem with [#5 + 8, el]:u64 <- R30
00000b1c: R31 := #5
00000b22: R29 := R31
00000b27: R30 := 0x590
00000b29: call @call_weak_fn with return %00000b2b

00000b2b:
00000b30: R29 := mem[R31, el]:u64
00000b35: R30 := mem[R31 + 8, el]:u64
00000b39: R31 := R31 + 0x10
00000b3e: call R30 with noreturn

00000bba: sub _start(_start_result)
00000bd2: _start_result :: out u32 = low:32[R0]

00000789:
0000078e: R29 := 0
00000793: R30 := 0
00000799: R5 := R0
000007a0: R1 := mem[R31, el]:u64
000007a6: R2 := R31 + 8
000007ac: R6 := R31
000007b1: R0 := 0x10000
000007b8: R0 := mem[R0 + 0xFD8, el]:u64
000007bd: R3 := 0
000007c2: R4 := 0
000007c7: R30 := 0x630
000007ca: call @__libc_start_main with return %000007cc

000007cc:
000007cf: R30 := 0x634
000007d2: call @abort with return %00000bbb

00000bbb:
00000bbc: call @call_weak_fn with noreturn

00000bbd: sub abort()


000007d0:
00000a7e: R16 := 0x11000
00000a85: R17 := mem[R16 + 0x18, el]:u64
00000a8b: R16 := R16 + 0x18
00000a90: call R17 with noreturn

00000bbe: sub call_weak_fn(call_weak_fn_result)
00000bd3: call_weak_fn_result :: out u32 = low:32[R0]

000007d4:
000007d7: R0 := 0x10000
000007de: R0 := mem[R0 + 0xFD0, el]:u64
000007e4: when R0 = 0 goto %000007e2
00000bbf: goto %0000099a

000007e2:
000007ea: call R30 with noreturn

0000099a:
0000099d: goto @__gmon_start__

0000099b:
00000a68: R16 := 0x11000
00000a6f: R17 := mem[R16 + 0x10, el]:u64
00000a75: R16 := R16 + 0x10
00000a7a: call R17 with noreturn

00000bc0: sub deregister_tm_clones(deregister_tm_clones_result)
00000bd4: deregister_tm_clones_result :: out u32 = low:32[R0]

000007f0:
000007f3: R0 := 0x11000
000007f9: R0 := R0 + 0x30
000007fe: R1 := 0x11000
00000804: R1 := R1 + 0x30
0000080a: #1 := ~R0
0000080f: #2 := R1 + ~R0
00000815: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000081b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000081f: ZF := #2 + 1 = 0
00000823: NF := 63:63[#2 + 1]
00000829: when ZF goto %00000827
00000bc1: goto %0000097c

0000097c:
0000097f: R1 := 0x10000
00000986: R1 := mem[R1 + 0xFC0, el]:u64
0000098b: when R1 = 0 goto %00000827
00000bc2: goto %0000098f

00000827:
0000082f: call R30 with noreturn

0000098f:
00000993: R16 := R1
00000998: call R16 with noreturn

00000bc3: sub frame_dummy(frame_dummy_result)
00000bd5: frame_dummy_result :: out u32 = low:32[R0]

000008c7:
000008c9: call @register_tm_clones with noreturn

00000bc4: sub main(main_argc, main_argv, main_result)
00000bd6: main_argc :: in u32 = low:32[R0]
00000bd7: main_argv :: in out u64 = R1
00000bd8: main_result :: out u32 = low:32[R0]

000008cb:
000008cf: R31 := R31 - 0x10
000008d7: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000008dc: R9 := 0x11000
000008e1: R8 := 1
000008e9: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
000008f0: R10 := pad:64[mem[R31 + 0xC, el]:u32]
000008f5: R8 := 0x11000
000008fd: mem := mem with [R8 + 0x38, el]:u32 <- 31:0[R10]
00000902: R0 := 0
00000909: mem := mem with [R8 + 0x38, el]:u32 <- 0
0000090e: R8 := 2
00000916: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
0000091c: R31 := R31 + 0x10
00000921: call R30 with noreturn

00000bc5: sub register_tm_clones(register_tm_clones_result)
00000bd9: register_tm_clones_result :: out u32 = low:32[R0]

00000831:
00000834: R0 := 0x11000
0000083a: R0 := R0 + 0x30
0000083f: R1 := 0x11000
00000845: R1 := R1 + 0x30
0000084c: R1 := R1 + ~R0 + 1
00000852: R2 := 0.63:63[R1]
00000859: R1 := R2 + (R1 ~>> 3)
0000085f: R1 := extend:64[63:1[R1]]
00000865: when R1 = 0 goto %00000863
00000bc6: goto %0000095e

0000095e:
00000961: R2 := 0x10000
00000968: R2 := mem[R2 + 0xFE0, el]:u64
0000096d: when R2 = 0 goto %00000863
00000bc7: goto %00000971

00000863:
0000086b: call R30 with noreturn

00000971:
00000975: R16 := R2
0000097a: call R16 with noreturn
