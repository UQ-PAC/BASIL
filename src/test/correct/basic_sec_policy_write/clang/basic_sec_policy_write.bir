000005fb: program
000005c9: sub __cxa_finalize(__cxa_finalize_result)
000005fc: __cxa_finalize_result :: out u32 = low:32[R0]

00000371:
00000469: R16 := 0x11000
00000470: R17 := mem[R16 + 8, el]:u64
00000476: R16 := R16 + 8
0000047b: call R17 with noreturn

000005ca: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005fd: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000286:
0000028a: #3 := R31 - 0x20
00000290: mem := mem with [#3, el]:u64 <- R29
00000296: mem := mem with [#3 + 8, el]:u64 <- R30
0000029a: R31 := #3
000002a0: R29 := R31
000002a8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ad: R19 := 0x11000
000002b4: R0 := pad:64[mem[R19 + 0x30]]
000002bb: when 31:0[R0] <> 0 goto %000002b9
000005f1: goto %0000033a

0000033a:
0000033d: R0 := 0x10000
00000344: R0 := mem[R0 + 0xFC8, el]:u64
0000034a: when R0 = 0 goto %00000348
000005f2: goto %00000361

00000361:
00000364: R0 := 0x11000
0000036b: R0 := mem[R0 + 0x28, el]:u64
00000370: R30 := 0x6F0
00000373: call @__cxa_finalize with return %00000348

00000348:
00000350: R30 := 0x6F4
00000352: call @deregister_tm_clones with return %00000354

00000354:
00000357: R0 := 1
0000035f: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005f3: goto %000002b9

000002b9:
000002c3: R19 := mem[R31 + 0x10, el]:u64
000002ca: R29 := mem[R31, el]:u64
000002cf: R30 := mem[R31 + 8, el]:u64
000002d3: R31 := R31 + 0x20
000002d8: call R30 with noreturn

000005ce: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005fe: __libc_start_main_main :: in u64 = R0
000005ff: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000600: __libc_start_main_arg3 :: in out u64 = R2
00000601: __libc_start_main_auxv :: in out u64 = R3
00000602: __libc_start_main_result :: out u32 = low:32[R0]

000001df:
00000453: R16 := 0x11000
0000045a: R17 := mem[R16, el]:u64
00000460: R16 := R16
00000465: call R17 with noreturn

000005cf: sub _fini(_fini_result)
00000603: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005d0: sub _init(_init_result)
00000604: _init_result :: out u32 = low:32[R0]

0000051d:
00000523: #5 := R31 - 0x10
00000529: mem := mem with [#5, el]:u64 <- R29
0000052f: mem := mem with [#5 + 8, el]:u64 <- R30
00000533: R31 := #5
00000539: R29 := R31
0000053e: R30 := 0x590
00000540: call @call_weak_fn with return %00000542

00000542:
00000547: R29 := mem[R31, el]:u64
0000054c: R30 := mem[R31 + 8, el]:u64
00000550: R31 := R31 + 0x10
00000555: call R30 with noreturn

000005d1: sub _start(_start_result)
00000605: _start_result :: out u32 = low:32[R0]

000001a0:
000001a5: R29 := 0
000001aa: R30 := 0
000001b0: R5 := R0
000001b7: R1 := mem[R31, el]:u64
000001bd: R2 := R31 + 8
000001c3: R6 := R31
000001c8: R0 := 0x10000
000001cf: R0 := mem[R0 + 0xFD8, el]:u64
000001d4: R3 := 0
000001d9: R4 := 0
000001de: R30 := 0x630
000001e1: call @__libc_start_main with return %000001e3

000001e3:
000001e6: R30 := 0x634
000001e9: call @abort with return %000005f4

000005f4:
000005f5: call @call_weak_fn with noreturn

000005d4: sub abort()


000001e7:
00000495: R16 := 0x11000
0000049c: R17 := mem[R16 + 0x18, el]:u64
000004a2: R16 := R16 + 0x18
000004a7: call R17 with noreturn

000005d5: sub call_weak_fn(call_weak_fn_result)
00000606: call_weak_fn_result :: out u32 = low:32[R0]

000001eb:
000001ee: R0 := 0x10000
000001f5: R0 := mem[R0 + 0xFD0, el]:u64
000001fb: when R0 = 0 goto %000001f9
000005f6: goto %000003b1

000001f9:
00000201: call R30 with noreturn

000003b1:
000003b4: goto @__gmon_start__

000003b2:
0000047f: R16 := 0x11000
00000486: R17 := mem[R16 + 0x10, el]:u64
0000048c: R16 := R16 + 0x10
00000491: call R17 with noreturn

000005d7: sub deregister_tm_clones(deregister_tm_clones_result)
00000607: deregister_tm_clones_result :: out u32 = low:32[R0]

00000207:
0000020a: R0 := 0x11000
00000210: R0 := R0 + 0x30
00000215: R1 := 0x11000
0000021b: R1 := R1 + 0x30
00000221: #1 := ~R0
00000226: #2 := R1 + ~R0
0000022c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000232: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000236: ZF := #2 + 1 = 0
0000023a: NF := 63:63[#2 + 1]
00000240: when ZF goto %0000023e
000005f7: goto %00000393

00000393:
00000396: R1 := 0x10000
0000039d: R1 := mem[R1 + 0xFC0, el]:u64
000003a2: when R1 = 0 goto %0000023e
000005f8: goto %000003a6

0000023e:
00000246: call R30 with noreturn

000003a6:
000003aa: R16 := R1
000003af: call R16 with noreturn

000005da: sub frame_dummy(frame_dummy_result)
00000608: frame_dummy_result :: out u32 = low:32[R0]

000002de:
000002e0: call @register_tm_clones with noreturn

000005db: sub main(main_argc, main_argv, main_result)
00000609: main_argc :: in u32 = low:32[R0]
0000060a: main_argv :: in out u64 = R1
0000060b: main_result :: out u32 = low:32[R0]

000002e2:
000002e6: R31 := R31 - 0x10
000002ee: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000002f3: R9 := 0x11000
000002f8: R8 := 1
00000300: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
00000307: R10 := pad:64[mem[R31 + 0xC, el]:u32]
0000030c: R8 := 0x11000
00000314: mem := mem with [R8 + 0x38, el]:u32 <- 31:0[R10]
00000319: R0 := 0
00000320: mem := mem with [R8 + 0x38, el]:u32 <- 0
00000325: R8 := 2
0000032d: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
00000333: R31 := R31 + 0x10
00000338: call R30 with noreturn

000005dc: sub register_tm_clones(register_tm_clones_result)
0000060c: register_tm_clones_result :: out u32 = low:32[R0]

00000248:
0000024b: R0 := 0x11000
00000251: R0 := R0 + 0x30
00000256: R1 := 0x11000
0000025c: R1 := R1 + 0x30
00000263: R1 := R1 + ~R0 + 1
00000269: R2 := 0.63:63[R1]
00000270: R1 := R2 + (R1 ~>> 3)
00000276: R1 := extend:64[63:1[R1]]
0000027c: when R1 = 0 goto %0000027a
000005f9: goto %00000375

00000375:
00000378: R2 := 0x10000
0000037f: R2 := mem[R2 + 0xFE0, el]:u64
00000384: when R2 = 0 goto %0000027a
000005fa: goto %00000388

0000027a:
00000282: call R30 with noreturn

00000388:
0000038c: R16 := R2
00000391: call R16 with noreturn
