00000641: program
0000060f: sub __cxa_finalize(__cxa_finalize_result)
00000642: __cxa_finalize_result :: out u32 = low:32[R0]

000003ab:
000004a3: R16 := 0x10000
000004aa: R17 := mem[R16 + 0xFB8, el]:u64
000004b0: R16 := R16 + 0xFB8
000004b5: call R17 with noreturn

00000610: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000643: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029e:
000002a2: #3 := R31 - 0x20
000002a8: mem := mem with [#3, el]:u64 <- R29
000002ae: mem := mem with [#3 + 8, el]:u64 <- R30
000002b2: R31 := #3
000002b8: R29 := R31
000002c0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c5: R19 := 0x11000
000002cc: R0 := pad:64[mem[R19 + 0x10]]
000002d3: when 31:0[R0] <> 0 goto %000002d1
00000637: goto %00000374

00000374:
00000377: R0 := 0x10000
0000037e: R0 := mem[R0 + 0xFE0, el]:u64
00000384: when R0 = 0 goto %00000382
00000638: goto %0000039b

0000039b:
0000039e: R0 := 0x11000
000003a5: R0 := mem[R0 + 8, el]:u64
000003aa: R30 := 0x6F0
000003ad: call @__cxa_finalize with return %00000382

00000382:
0000038a: R30 := 0x6F4
0000038c: call @deregister_tm_clones with return %0000038e

0000038e:
00000391: R0 := 1
00000399: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000639: goto %000002d1

000002d1:
000002db: R19 := mem[R31 + 0x10, el]:u64
000002e2: R29 := mem[R31, el]:u64
000002e7: R30 := mem[R31 + 8, el]:u64
000002eb: R31 := R31 + 0x20
000002f0: call R30 with noreturn

00000614: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000644: __libc_start_main_main :: in u64 = R0
00000645: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000646: __libc_start_main_arg3 :: in out u64 = R2
00000647: __libc_start_main_auxv :: in out u64 = R3
00000648: __libc_start_main_result :: out u32 = low:32[R0]

000001f7:
0000048d: R16 := 0x10000
00000494: R17 := mem[R16 + 0xFB0, el]:u64
0000049a: R16 := R16 + 0xFB0
0000049f: call R17 with noreturn

00000615: sub _fini(_fini_result)
00000649: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000616: sub _init(_init_result)
0000064a: _init_result :: out u32 = low:32[R0]

0000055d:
00000563: #5 := R31 - 0x10
00000569: mem := mem with [#5, el]:u64 <- R29
0000056f: mem := mem with [#5 + 8, el]:u64 <- R30
00000573: R31 := #5
00000579: R29 := R31
0000057e: R30 := 0x590
00000580: call @call_weak_fn with return %00000582

00000582:
00000587: R29 := mem[R31, el]:u64
0000058c: R30 := mem[R31 + 8, el]:u64
00000590: R31 := R31 + 0x10
00000595: call R30 with noreturn

00000617: sub _start(_start_result)
0000064b: _start_result :: out u32 = low:32[R0]

000001b8:
000001bd: R29 := 0
000001c2: R30 := 0
000001c8: R5 := R0
000001cf: R1 := mem[R31, el]:u64
000001d5: R2 := R31 + 8
000001db: R6 := R31
000001e0: R0 := 0x10000
000001e7: R0 := mem[R0 + 0xFF0, el]:u64
000001ec: R3 := 0
000001f1: R4 := 0
000001f6: R30 := 0x630
000001f9: call @__libc_start_main with return %000001fb

000001fb:
000001fe: R30 := 0x634
00000201: call @abort with return %0000063a

0000063a:
0000063b: call @call_weak_fn with noreturn

0000061a: sub abort()


000001ff:
000004cf: R16 := 0x10000
000004d6: R17 := mem[R16 + 0xFC8, el]:u64
000004dc: R16 := R16 + 0xFC8
000004e1: call R17 with noreturn

0000061b: sub call_weak_fn(call_weak_fn_result)
0000064c: call_weak_fn_result :: out u32 = low:32[R0]

00000203:
00000206: R0 := 0x10000
0000020d: R0 := mem[R0 + 0xFE8, el]:u64
00000213: when R0 = 0 goto %00000211
0000063c: goto %000003eb

00000211:
00000219: call R30 with noreturn

000003eb:
000003ee: goto @__gmon_start__

000003ec:
000004b9: R16 := 0x10000
000004c0: R17 := mem[R16 + 0xFC0, el]:u64
000004c6: R16 := R16 + 0xFC0
000004cb: call R17 with noreturn

0000061d: sub deregister_tm_clones(deregister_tm_clones_result)
0000064d: deregister_tm_clones_result :: out u32 = low:32[R0]

0000021f:
00000222: R0 := 0x11000
00000228: R0 := R0 + 0x10
0000022d: R1 := 0x11000
00000233: R1 := R1 + 0x10
00000239: #1 := ~R0
0000023e: #2 := R1 + ~R0
00000244: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024e: ZF := #2 + 1 = 0
00000252: NF := 63:63[#2 + 1]
00000258: when ZF goto %00000256
0000063d: goto %000003cd

000003cd:
000003d0: R1 := 0x10000
000003d7: R1 := mem[R1 + 0xFD8, el]:u64
000003dc: when R1 = 0 goto %00000256
0000063e: goto %000003e0

00000256:
0000025e: call R30 with noreturn

000003e0:
000003e4: R16 := R1
000003e9: call R16 with noreturn

00000620: sub frame_dummy(frame_dummy_result)
0000064e: frame_dummy_result :: out u32 = low:32[R0]

000002f6:
000002f8: call @register_tm_clones with noreturn

00000621: sub main(main_argc, main_argv, main_result)
0000064f: main_argc :: in u32 = low:32[R0]
00000650: main_argv :: in out u64 = R1
00000651: main_result :: out u32 = low:32[R0]

000002fa:
000002fe: R31 := R31 - 0x10
00000306: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000030b: R0 := 0x11000
00000311: R0 := R0 + 0x18
00000316: R1 := 1
0000031e: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000323: R0 := 0x11000
00000329: R0 := R0 + 0x14
00000330: R1 := pad:64[mem[R31 + 0xC, el]:u32]
00000338: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000033d: R0 := 0x11000
00000343: R0 := R0 + 0x14
0000034a: mem := mem with [R0, el]:u32 <- 0
0000034f: R0 := 0x11000
00000355: R0 := R0 + 0x18
0000035a: R1 := 2
00000362: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000367: R0 := 0
0000036d: R31 := R31 + 0x10
00000372: call R30 with noreturn

00000622: sub register_tm_clones(register_tm_clones_result)
00000652: register_tm_clones_result :: out u32 = low:32[R0]

00000260:
00000263: R0 := 0x11000
00000269: R0 := R0 + 0x10
0000026e: R1 := 0x11000
00000274: R1 := R1 + 0x10
0000027b: R1 := R1 + ~R0 + 1
00000281: R2 := 0.63:63[R1]
00000288: R1 := R2 + (R1 ~>> 3)
0000028e: R1 := extend:64[63:1[R1]]
00000294: when R1 = 0 goto %00000292
0000063f: goto %000003af

000003af:
000003b2: R2 := 0x10000
000003b9: R2 := mem[R2 + 0xFF8, el]:u64
000003be: when R2 = 0 goto %00000292
00000640: goto %000003c2

00000292:
0000029a: call R30 with noreturn

000003c2:
000003c6: R16 := R2
000003cb: call R16 with noreturn
