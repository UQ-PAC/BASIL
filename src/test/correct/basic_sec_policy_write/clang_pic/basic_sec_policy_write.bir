000005a0: program
0000056e: sub __cxa_finalize(__cxa_finalize_result)
000005a1: __cxa_finalize_result :: out u32 = low:32[R0]

00000387:
0000047f: R16 := 0x11000
00000486: R17 := mem[R16 + 8, el]:u64
0000048c: R16 := R16 + 8
00000491: call R17 with noreturn

0000056f: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005a2: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028e:
00000292: #3 := R31 - 0x20
00000298: mem := mem with [#3, el]:u64 <- R29
0000029e: mem := mem with [#3 + 8, el]:u64 <- R30
000002a2: R31 := #3
000002a8: R29 := R31
000002b0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b5: R19 := 0x11000
000002bc: R0 := pad:64[mem[R19 + 0x30]]
000002c3: when 31:0[R0] <> 0 goto %000002c1
00000596: goto %00000350

00000350:
00000353: R0 := 0x10000
0000035a: R0 := mem[R0 + 0xFB8, el]:u64
00000360: when R0 = 0 goto %0000035e
00000597: goto %00000377

00000377:
0000037a: R0 := 0x11000
00000381: R0 := mem[R0 + 0x28, el]:u64
00000386: R30 := 0x730
00000389: call @__cxa_finalize with return %0000035e

0000035e:
00000366: R30 := 0x734
00000368: call @deregister_tm_clones with return %0000036a

0000036a:
0000036d: R0 := 1
00000375: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000598: goto %000002c1

000002c1:
000002cb: R19 := mem[R31 + 0x10, el]:u64
000002d2: R29 := mem[R31, el]:u64
000002d7: R30 := mem[R31 + 8, el]:u64
000002db: R31 := R31 + 0x20
000002e0: call R30 with noreturn

00000573: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005a3: __libc_start_main_main :: in u64 = R0
000005a4: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005a5: __libc_start_main_arg3 :: in out u64 = R2
000005a6: __libc_start_main_auxv :: in out u64 = R3
000005a7: __libc_start_main_result :: out u32 = low:32[R0]

000001e7:
00000469: R16 := 0x11000
00000470: R17 := mem[R16, el]:u64
00000476: R16 := R16
0000047b: call R17 with noreturn

00000574: sub _fini(_fini_result)
000005a8: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000575: sub _init(_init_result)
000005a9: _init_result :: out u32 = low:32[R0]

000004d9:
000004df: #5 := R31 - 0x10
000004e5: mem := mem with [#5, el]:u64 <- R29
000004eb: mem := mem with [#5 + 8, el]:u64 <- R30
000004ef: R31 := #5
000004f5: R29 := R31
000004fa: R30 := 0x5C0
000004fc: call @call_weak_fn with return %000004fe

000004fe:
00000503: R29 := mem[R31, el]:u64
00000508: R30 := mem[R31 + 8, el]:u64
0000050c: R31 := R31 + 0x10
00000511: call R30 with noreturn

00000576: sub _start(_start_result)
000005aa: _start_result :: out u32 = low:32[R0]

000001a8:
000001ad: R29 := 0
000001b2: R30 := 0
000001b8: R5 := R0
000001bf: R1 := mem[R31, el]:u64
000001c5: R2 := R31 + 8
000001cb: R6 := R31
000001d0: R0 := 0x10000
000001d7: R0 := mem[R0 + 0xFD8, el]:u64
000001dc: R3 := 0
000001e1: R4 := 0
000001e6: R30 := 0x670
000001e9: call @__libc_start_main with return %000001eb

000001eb:
000001ee: R30 := 0x674
000001f1: call @abort with return %00000599

00000599:
0000059a: call @call_weak_fn with noreturn

00000579: sub abort()


000001ef:
000004ab: R16 := 0x11000
000004b2: R17 := mem[R16 + 0x18, el]:u64
000004b8: R16 := R16 + 0x18
000004bd: call R17 with noreturn

0000057a: sub call_weak_fn(call_weak_fn_result)
000005ab: call_weak_fn_result :: out u32 = low:32[R0]

000001f3:
000001f6: R0 := 0x10000
000001fd: R0 := mem[R0 + 0xFD0, el]:u64
00000203: when R0 = 0 goto %00000201
0000059b: goto %000003c7

00000201:
00000209: call R30 with noreturn

000003c7:
000003ca: goto @__gmon_start__

000003c8:
00000495: R16 := 0x11000
0000049c: R17 := mem[R16 + 0x10, el]:u64
000004a2: R16 := R16 + 0x10
000004a7: call R17 with noreturn

0000057c: sub deregister_tm_clones(deregister_tm_clones_result)
000005ac: deregister_tm_clones_result :: out u32 = low:32[R0]

0000020f:
00000212: R0 := 0x11000
00000218: R0 := R0 + 0x30
0000021d: R1 := 0x11000
00000223: R1 := R1 + 0x30
00000229: #1 := ~R0
0000022e: #2 := R1 + ~R0
00000234: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023e: ZF := #2 + 1 = 0
00000242: NF := 63:63[#2 + 1]
00000248: when ZF goto %00000246
0000059c: goto %000003a9

000003a9:
000003ac: R1 := 0x10000
000003b3: R1 := mem[R1 + 0xFB0, el]:u64
000003b8: when R1 = 0 goto %00000246
0000059d: goto %000003bc

00000246:
0000024e: call R30 with noreturn

000003bc:
000003c0: R16 := R1
000003c5: call R16 with noreturn

0000057f: sub frame_dummy(frame_dummy_result)
000005ad: frame_dummy_result :: out u32 = low:32[R0]

000002e6:
000002e8: call @register_tm_clones with noreturn

00000580: sub main(main_argc, main_argv, main_result)
000005ae: main_argc :: in u32 = low:32[R0]
000005af: main_argv :: in out u64 = R1
000005b0: main_result :: out u32 = low:32[R0]

000002ea:
000002ee: R31 := R31 - 0x10
000002f6: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000002fb: R9 := 0x10000
00000302: R9 := mem[R9 + 0xFC0, el]:u64
00000307: R8 := 1
0000030f: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000316: R10 := pad:64[mem[R31 + 0xC, el]:u32]
0000031b: R8 := 0x10000
00000322: R8 := mem[R8 + 0xFC8, el]:u64
0000032a: mem := mem with [R8, el]:u32 <- 31:0[R10]
0000032f: R0 := 0
00000336: mem := mem with [R8, el]:u32 <- 0
0000033b: R8 := 2
00000343: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000349: R31 := R31 + 0x10
0000034e: call R30 with noreturn

00000581: sub register_tm_clones(register_tm_clones_result)
000005b1: register_tm_clones_result :: out u32 = low:32[R0]

00000250:
00000253: R0 := 0x11000
00000259: R0 := R0 + 0x30
0000025e: R1 := 0x11000
00000264: R1 := R1 + 0x30
0000026b: R1 := R1 + ~R0 + 1
00000271: R2 := 0.63:63[R1]
00000278: R1 := R2 + (R1 ~>> 3)
0000027e: R1 := extend:64[63:1[R1]]
00000284: when R1 = 0 goto %00000282
0000059e: goto %0000038b

0000038b:
0000038e: R2 := 0x10000
00000395: R2 := mem[R2 + 0xFE0, el]:u64
0000039a: when R2 = 0 goto %00000282
0000059f: goto %0000039e

00000282:
0000028a: call R30 with noreturn

0000039e:
000003a2: R16 := R2
000003a7: call R16 with noreturn
