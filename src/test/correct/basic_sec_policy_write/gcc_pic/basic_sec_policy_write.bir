000005cc: program
0000059a: sub __cxa_finalize(__cxa_finalize_result)
000005cd: __cxa_finalize_result :: out u32 = low:32[R0]

000003af:
000004a7: R16 := 0x10000
000004ae: R17 := mem[R16 + 0xFA8, el]:u64
000004b4: R16 := R16 + 0xFA8
000004b9: call R17 with noreturn

0000059b: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005ce: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029e:
000002a2: #3 := R31 - 0x20
000002a8: mem := mem with [#3, el]:u64 <- R29
000002ae: mem := mem with [#3 + 8, el]:u64 <- R30
000002b2: R31 := #3
000002b8: R29 := R31
000002c0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c5: R19 := 0x11000
000002cc: R0 := pad:64[mem[R19 + 0x10]]
000002d3: when 31:0[R0] <> 0 goto %000002d1
000005c2: goto %00000378

00000378:
0000037b: R0 := 0x10000
00000382: R0 := mem[R0 + 0xFD0, el]:u64
00000388: when R0 = 0 goto %00000386
000005c3: goto %0000039f

0000039f:
000003a2: R0 := 0x11000
000003a9: R0 := mem[R0 + 8, el]:u64
000003ae: R30 := 0x730
000003b1: call @__cxa_finalize with return %00000386

00000386:
0000038e: R30 := 0x734
00000390: call @deregister_tm_clones with return %00000392

00000392:
00000395: R0 := 1
0000039d: mem := mem with [R19 + 0x10] <- 7:0[R0]
000005c4: goto %000002d1

000002d1:
000002db: R19 := mem[R31 + 0x10, el]:u64
000002e2: R29 := mem[R31, el]:u64
000002e7: R30 := mem[R31 + 8, el]:u64
000002eb: R31 := R31 + 0x20
000002f0: call R30 with noreturn

0000059f: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005cf: __libc_start_main_main :: in u64 = R0
000005d0: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005d1: __libc_start_main_arg3 :: in out u64 = R2
000005d2: __libc_start_main_auxv :: in out u64 = R3
000005d3: __libc_start_main_result :: out u32 = low:32[R0]

000001f7:
00000491: R16 := 0x10000
00000498: R17 := mem[R16 + 0xFA0, el]:u64
0000049e: R16 := R16 + 0xFA0
000004a3: call R17 with noreturn

000005a0: sub _fini(_fini_result)
000005d4: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005a1: sub _init(_init_result)
000005d5: _init_result :: out u32 = low:32[R0]

00000501:
00000507: #5 := R31 - 0x10
0000050d: mem := mem with [#5, el]:u64 <- R29
00000513: mem := mem with [#5 + 8, el]:u64 <- R30
00000517: R31 := #5
0000051d: R29 := R31
00000522: R30 := 0x5C0
00000524: call @call_weak_fn with return %00000526

00000526:
0000052b: R29 := mem[R31, el]:u64
00000530: R30 := mem[R31 + 8, el]:u64
00000534: R31 := R31 + 0x10
00000539: call R30 with noreturn

000005a2: sub _start(_start_result)
000005d6: _start_result :: out u32 = low:32[R0]

000001b8:
000001bd: R29 := 0
000001c2: R30 := 0
000001c8: R5 := R0
000001cf: R1 := mem[R31, el]:u64
000001d5: R2 := R31 + 8
000001db: R6 := R31
000001e0: R0 := 0x10000
000001e7: R0 := mem[R0 + 0xFF0, el]:u64
000001ec: R3 := 0
000001f1: R4 := 0
000001f6: R30 := 0x670
000001f9: call @__libc_start_main with return %000001fb

000001fb:
000001fe: R30 := 0x674
00000201: call @abort with return %000005c5

000005c5:
000005c6: call @call_weak_fn with noreturn

000005a5: sub abort()


000001ff:
000004d3: R16 := 0x10000
000004da: R17 := mem[R16 + 0xFB8, el]:u64
000004e0: R16 := R16 + 0xFB8
000004e5: call R17 with noreturn

000005a6: sub call_weak_fn(call_weak_fn_result)
000005d7: call_weak_fn_result :: out u32 = low:32[R0]

00000203:
00000206: R0 := 0x10000
0000020d: R0 := mem[R0 + 0xFE8, el]:u64
00000213: when R0 = 0 goto %00000211
000005c7: goto %000003ef

00000211:
00000219: call R30 with noreturn

000003ef:
000003f2: goto @__gmon_start__

000003f0:
000004bd: R16 := 0x10000
000004c4: R17 := mem[R16 + 0xFB0, el]:u64
000004ca: R16 := R16 + 0xFB0
000004cf: call R17 with noreturn

000005a8: sub deregister_tm_clones(deregister_tm_clones_result)
000005d8: deregister_tm_clones_result :: out u32 = low:32[R0]

0000021f:
00000222: R0 := 0x11000
00000228: R0 := R0 + 0x10
0000022d: R1 := 0x11000
00000233: R1 := R1 + 0x10
00000239: #1 := ~R0
0000023e: #2 := R1 + ~R0
00000244: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024e: ZF := #2 + 1 = 0
00000252: NF := 63:63[#2 + 1]
00000258: when ZF goto %00000256
000005c8: goto %000003d1

000003d1:
000003d4: R1 := 0x10000
000003db: R1 := mem[R1 + 0xFC8, el]:u64
000003e0: when R1 = 0 goto %00000256
000005c9: goto %000003e4

00000256:
0000025e: call R30 with noreturn

000003e4:
000003e8: R16 := R1
000003ed: call R16 with noreturn

000005ab: sub frame_dummy(frame_dummy_result)
000005d9: frame_dummy_result :: out u32 = low:32[R0]

000002f6:
000002f8: call @register_tm_clones with noreturn

000005ac: sub main(main_argc, main_argv, main_result)
000005da: main_argc :: in u32 = low:32[R0]
000005db: main_argv :: in out u64 = R1
000005dc: main_result :: out u32 = low:32[R0]

000002fa:
000002fe: R31 := R31 - 0x10
00000306: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000030b: R0 := 0x10000
00000312: R0 := mem[R0 + 0xFD8, el]:u64
00000317: R1 := 1
0000031f: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000324: R0 := 0x10000
0000032b: R0 := mem[R0 + 0xFE0, el]:u64
00000332: R1 := pad:64[mem[R31 + 0xC, el]:u32]
0000033a: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000033f: R0 := 0x10000
00000346: R0 := mem[R0 + 0xFE0, el]:u64
0000034d: mem := mem with [R0, el]:u32 <- 0
00000352: R0 := 0x10000
00000359: R0 := mem[R0 + 0xFD8, el]:u64
0000035e: R1 := 2
00000366: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000036b: R0 := 0
00000371: R31 := R31 + 0x10
00000376: call R30 with noreturn

000005ad: sub register_tm_clones(register_tm_clones_result)
000005dd: register_tm_clones_result :: out u32 = low:32[R0]

00000260:
00000263: R0 := 0x11000
00000269: R0 := R0 + 0x10
0000026e: R1 := 0x11000
00000274: R1 := R1 + 0x10
0000027b: R1 := R1 + ~R0 + 1
00000281: R2 := 0.63:63[R1]
00000288: R1 := R2 + (R1 ~>> 3)
0000028e: R1 := extend:64[63:1[R1]]
00000294: when R1 = 0 goto %00000292
000005ca: goto %000003b3

000003b3:
000003b6: R2 := 0x10000
000003bd: R2 := mem[R2 + 0xFF8, el]:u64
000003c2: when R2 = 0 goto %00000292
000005cb: goto %000003c6

00000292:
0000029a: call R30 with noreturn

000003c6:
000003ca: R16 := R2
000003cf: call R16 with noreturn
