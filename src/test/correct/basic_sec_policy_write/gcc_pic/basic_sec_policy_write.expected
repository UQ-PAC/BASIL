var Gamma_R0: bool;
var Gamma_R1: bool;
var Gamma_R31: bool;
var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var R0: bv64;
var R1: bv64;
var R31: bv64;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $x_addr: bv64;
axiom ($x_addr == 69652bv64);
const $z_addr: bv64;
axiom ($z_addr == 69656bv64);
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $z_addr) then true else (if (index == $x_addr) then (memory_load32_le(memory, $z_addr) == 0bv32) else false))
}

function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (old(memory_load32_le(mem, $z_addr)) == memory_load32_le(mem, $z_addr));
  free ensures (memory_load8_le(mem, 1976bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1977bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1978bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1979bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69640bv64) == 8bv8);
  free ensures (memory_load8_le(mem, 69641bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69642bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69643bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69644bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69645bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69646bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69647bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69616bv64) == 84bv8);
  free ensures (memory_load8_le(mem, 69617bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69618bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69619bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69620bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69621bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69622bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69623bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69600bv64) == 20bv8);
  free ensures (memory_load8_le(mem, 69601bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69602bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69603bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69604bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69605bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69606bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69607bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69008bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69009bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69010bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69011bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69012bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69013bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69014bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69015bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69592bv64) == 24bv8);
  free ensures (memory_load8_le(mem, 69593bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69594bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69595bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69596bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69597bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69598bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69599bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69000bv64) == 80bv8);
  free ensures (memory_load8_le(mem, 69001bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69002bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69003bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69004bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69005bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69006bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69007bv64) == 0bv8);

procedure rely_transitive()
  modifies Gamma_mem, mem;
  ensures (old(memory_load32_le(mem, $z_addr)) == memory_load32_le(mem, $z_addr));
{
  call rely();
  call rely();
}

procedure rely_reflexive()
{
  assert (memory_load32_le(mem, $z_addr) == memory_load32_le(mem, $z_addr));
}

procedure guarantee_reflexive()
  modifies Gamma_mem, mem;
{
  assert ((memory_load32_le(mem, $z_addr) != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
}

procedure main()
  modifies Gamma_R0, Gamma_R1, Gamma_R31, Gamma_mem, Gamma_stack, R0, R1, R31, mem, stack;
  requires (Gamma_R0 == false);
  free requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1976bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1977bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1978bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1979bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69616bv64) == 84bv8);
  free requires (memory_load8_le(mem, 69617bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69618bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69619bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69620bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69621bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69622bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69623bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69600bv64) == 20bv8);
  free requires (memory_load8_le(mem, 69601bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69602bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69603bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69604bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69605bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69606bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69607bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69008bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69009bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69010bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69011bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69012bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69013bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69014bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69015bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69592bv64) == 24bv8);
  free requires (memory_load8_le(mem, 69593bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69594bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69000bv64) == 80bv8);
  free requires (memory_load8_le(mem, 69001bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69002bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69003bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69004bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69005bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69006bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69007bv64) == 0bv8);
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 1976bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1977bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1978bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1979bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69640bv64) == 8bv8);
  free ensures (memory_load8_le(mem, 69641bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69642bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69643bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69644bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69645bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69646bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69647bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69616bv64) == 84bv8);
  free ensures (memory_load8_le(mem, 69617bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69618bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69619bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69620bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69621bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69622bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69623bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69600bv64) == 20bv8);
  free ensures (memory_load8_le(mem, 69601bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69602bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69603bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69604bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69605bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69606bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69607bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69008bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69009bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69010bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69011bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69012bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69013bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69014bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69015bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69592bv64) == 24bv8);
  free ensures (memory_load8_le(mem, 69593bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69594bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69595bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69596bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69597bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69598bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69599bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69000bv64) == 80bv8);
  free ensures (memory_load8_le(mem, 69001bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69002bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69003bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69004bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69005bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69006bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69007bv64) == 0bv8);
{
  var Gamma_x_old: bool;
  var z_old: bv32;
  lmain:
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R0);
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4056bv64)) || L(mem, bvadd64(R0, 4056bv64)));
    R1, Gamma_R1 := 1bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assert ((R0 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert ((z_old != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    R1, Gamma_R1 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 12bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assert ((R0 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert ((z_old != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    call rely();
    assert (L(mem, R0) ==> true);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0, 0bv32), gamma_store32(Gamma_mem, R0, true);
    assert ((R0 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert ((z_old != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4056bv64)) || L(mem, bvadd64(R0, 4056bv64)));
    R1, Gamma_R1 := 2bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assert ((R0 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert ((z_old != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
    R0, Gamma_R0 := 0bv64, true;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    return;
}
