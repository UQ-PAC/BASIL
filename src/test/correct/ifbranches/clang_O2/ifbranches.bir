0000059a: program
00000568: sub __cxa_finalize(__cxa_finalize_result)
0000059b: __cxa_finalize_result :: out u32 = low:32[R0]

00000324:
0000041c: R16 := 0x11000
00000423: R17 := mem[R16 + 8, el]:u64
00000429: R16 := R16 + 8
0000042e: call R17 with noreturn

00000569: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000059c: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000025e:
00000262: #3 := R31 - 0x20
00000268: mem := mem with [#3, el]:u64 <- R29
0000026e: mem := mem with [#3 + 8, el]:u64 <- R30
00000272: R31 := #3
00000278: R29 := R31
00000280: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000285: R19 := 0x11000
0000028c: R0 := pad:64[mem[R19 + 0x30]]
00000293: when 31:0[R0] <> 0 goto %00000291
00000590: goto %000002ed

000002ed:
000002f0: R0 := 0x10000
000002f7: R0 := mem[R0 + 0xFC8, el]:u64
000002fd: when R0 = 0 goto %000002fb
00000591: goto %00000314

00000314:
00000317: R0 := 0x11000
0000031e: R0 := mem[R0 + 0x28, el]:u64
00000323: R30 := 0x6F0
00000326: call @__cxa_finalize with return %000002fb

000002fb:
00000303: R30 := 0x6F4
00000305: call @deregister_tm_clones with return %00000307

00000307:
0000030a: R0 := 1
00000312: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000592: goto %00000291

00000291:
0000029b: R19 := mem[R31 + 0x10, el]:u64
000002a2: R29 := mem[R31, el]:u64
000002a7: R30 := mem[R31 + 8, el]:u64
000002ab: R31 := R31 + 0x20
000002b0: call R30 with noreturn

0000056d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000059d: __libc_start_main_main :: in u64 = R0
0000059e: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000059f: __libc_start_main_arg3 :: in out u64 = R2
000005a0: __libc_start_main_auxv :: in out u64 = R3
000005a1: __libc_start_main_result :: out u32 = low:32[R0]

000001b7:
00000406: R16 := 0x11000
0000040d: R17 := mem[R16, el]:u64
00000413: R16 := R16
00000418: call R17 with noreturn

0000056e: sub _fini(_fini_result)
000005a2: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000056f: sub _init(_init_result)
000005a3: _init_result :: out u32 = low:32[R0]

000004c6:
000004cc: #6 := R31 - 0x10
000004d2: mem := mem with [#6, el]:u64 <- R29
000004d8: mem := mem with [#6 + 8, el]:u64 <- R30
000004dc: R31 := #6
000004e2: R29 := R31
000004e7: R30 := 0x590
000004e9: call @call_weak_fn with return %000004eb

000004eb:
000004f0: R29 := mem[R31, el]:u64
000004f5: R30 := mem[R31 + 8, el]:u64
000004f9: R31 := R31 + 0x10
000004fe: call R30 with noreturn

00000570: sub _start(_start_result)
000005a4: _start_result :: out u32 = low:32[R0]

00000178:
0000017d: R29 := 0
00000182: R30 := 0
00000188: R5 := R0
0000018f: R1 := mem[R31, el]:u64
00000195: R2 := R31 + 8
0000019b: R6 := R31
000001a0: R0 := 0x10000
000001a7: R0 := mem[R0 + 0xFD8, el]:u64
000001ac: R3 := 0
000001b1: R4 := 0
000001b6: R30 := 0x630
000001b9: call @__libc_start_main with return %000001bb

000001bb:
000001be: R30 := 0x634
000001c1: call @abort with return %00000593

00000593:
00000594: call @call_weak_fn with noreturn

00000573: sub abort()


000001bf:
00000448: R16 := 0x11000
0000044f: R17 := mem[R16 + 0x18, el]:u64
00000455: R16 := R16 + 0x18
0000045a: call R17 with noreturn

00000574: sub call_weak_fn(call_weak_fn_result)
000005a5: call_weak_fn_result :: out u32 = low:32[R0]

000001c3:
000001c6: R0 := 0x10000
000001cd: R0 := mem[R0 + 0xFD0, el]:u64
000001d3: when R0 = 0 goto %000001d1
00000595: goto %00000364

000001d1:
000001d9: call R30 with noreturn

00000364:
00000367: goto @__gmon_start__

00000365:
00000432: R16 := 0x11000
00000439: R17 := mem[R16 + 0x10, el]:u64
0000043f: R16 := R16 + 0x10
00000444: call R17 with noreturn

00000576: sub deregister_tm_clones(deregister_tm_clones_result)
000005a6: deregister_tm_clones_result :: out u32 = low:32[R0]

000001df:
000001e2: R0 := 0x11000
000001e8: R0 := R0 + 0x30
000001ed: R1 := 0x11000
000001f3: R1 := R1 + 0x30
000001f9: #1 := ~R0
000001fe: #2 := R1 + ~R0
00000204: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000020a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000020e: ZF := #2 + 1 = 0
00000212: NF := 63:63[#2 + 1]
00000218: when ZF goto %00000216
00000596: goto %00000346

00000346:
00000349: R1 := 0x10000
00000350: R1 := mem[R1 + 0xFC0, el]:u64
00000355: when R1 = 0 goto %00000216
00000597: goto %00000359

00000216:
0000021e: call R30 with noreturn

00000359:
0000035d: R16 := R1
00000362: call R16 with noreturn

00000579: sub frame_dummy(frame_dummy_result)
000005a7: frame_dummy_result :: out u32 = low:32[R0]

000002b6:
000002b8: call @register_tm_clones with noreturn

0000057a: sub main(main_argc, main_argv, main_result)
000005a8: main_argc :: in u32 = low:32[R0]
000005a9: main_argv :: in out u64 = R1
000005aa: main_result :: out u32 = low:32[R0]

000002ba:
000002bd: R8 := 2
000002c3: #4 := 31:0[R0] - 1
000002c8: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
000002cd: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
000002d1: ZF := #4 + 1 = 0
000002d5: NF := 31:31[#4 + 1]
000002e3: when ZF goto %000002db
000002e4: goto %000002df

000002df:
000002e0: R0 := pad:64[31:0[R8] + 1]
000002e6: goto %000002e2

000002db:
000002dc: R0 := pad:64[31:0[R8]]
000002e5: goto %000002e2

000002e2:
000002eb: call R30 with noreturn

0000057b: sub register_tm_clones(register_tm_clones_result)
000005ab: register_tm_clones_result :: out u32 = low:32[R0]

00000220:
00000223: R0 := 0x11000
00000229: R0 := R0 + 0x30
0000022e: R1 := 0x11000
00000234: R1 := R1 + 0x30
0000023b: R1 := R1 + ~R0 + 1
00000241: R2 := 0.63:63[R1]
00000248: R1 := R2 + (R1 ~>> 3)
0000024e: R1 := extend:64[63:1[R1]]
00000254: when R1 = 0 goto %00000252
00000598: goto %00000328

00000328:
0000032b: R2 := 0x10000
00000332: R2 := mem[R2 + 0xFE0, el]:u64
00000337: when R2 = 0 goto %00000252
00000599: goto %0000033b

00000252:
0000025a: call R30 with noreturn

0000033b:
0000033f: R16 := R2
00000344: call R16 with noreturn
