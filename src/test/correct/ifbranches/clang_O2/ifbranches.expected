var {:extern} Gamma_mem: [bv64]bool;
var {:extern} mem: [bv64]bv8;
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1848bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1849bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1850bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1851bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main(R0_in: bv64, Gamma_R0_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R8_out: bv64, Gamma_R8_out: bool);
  requires (Gamma_R0_in == true);
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load8_le(mem, 1848bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1849bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1850bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1851bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load8_le(mem, 1848bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1849bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1850bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1851bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R8_out: bv64, Gamma_R8_out: bool)
{
  var Gamma_R0_5: bool;
  var R0_5: bv64;
  lmain:
    assert Gamma_R0_in;
    goto lmain_goto_l000002db, lmain_goto_l000002df;
  lmain_goto_l000002df:
    assume (!(R0_in[32:0] == 0bv32));
    R0_5, Gamma_R0_5 := 3bv64, true;
    goto l000002e2;
  lmain_goto_l000002db:
    assume (R0_in[32:0] == 0bv32);
    R0_5, Gamma_R0_5 := 2bv64, true;
    goto l000002e2;
  l000002e2:
    goto main_basil_return;
  main_basil_return:
    R0_out, R8_out := R0_5, 2bv64;
    Gamma_R0_out, Gamma_R8_out := Gamma_R0_5, true;
    return;
}

