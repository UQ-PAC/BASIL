00000c5c: program
00000c44: sub __cxa_finalize(__cxa_finalize_result)
00000c5d: __cxa_finalize_result :: out u32 = low:32[R0]

000009e4:
00000adc: R16 := 0x10000
00000ae3: R17 := mem[R16 + 0xFB8, el]:u64
00000ae9: R16 := R16 + 0xFB8
00000aee: call R17 with noreturn

00000c45: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c5e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008c9:
000008cd: #3 := R31 - 0x20
000008d3: mem := mem with [#3, el]:u64 <- R29
000008d9: mem := mem with [#3 + 8, el]:u64 <- R30
000008dd: R31 := #3
000008e3: R29 := R31
000008eb: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008f0: R19 := 0x11000
000008f7: R0 := pad:64[mem[R19 + 0x10]]
000008fe: when 31:0[R0] <> 0 goto %000008fc
00000c46: goto %000009ad

000009ad:
000009b0: R0 := 0x10000
000009b7: R0 := mem[R0 + 0xFE0, el]:u64
000009bd: when R0 = 0 goto %000009bb
00000c47: goto %000009d4

000009d4:
000009d7: R0 := 0x11000
000009de: R0 := mem[R0 + 8, el]:u64
000009e3: R30 := 0x6F0
000009e6: call @__cxa_finalize with return %000009bb

000009bb:
000009c3: R30 := 0x6F4
000009c5: call @deregister_tm_clones with return %000009c7

000009c7:
000009ca: R0 := 1
000009d2: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000c48: goto %000008fc

000008fc:
00000906: R19 := mem[R31 + 0x10, el]:u64
0000090d: R29 := mem[R31, el]:u64
00000912: R30 := mem[R31 + 8, el]:u64
00000916: R31 := R31 + 0x20
0000091b: call R30 with noreturn

00000c49: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c5f: __libc_start_main_main :: in u64 = R0
00000c60: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c61: __libc_start_main_arg3 :: in out u64 = R2
00000c62: __libc_start_main_auxv :: in out u64 = R3
00000c63: __libc_start_main_result :: out u32 = low:32[R0]

00000822:
00000ac6: R16 := 0x10000
00000acd: R17 := mem[R16 + 0xFB0, el]:u64
00000ad3: R16 := R16 + 0xFB0
00000ad8: call R17 with noreturn

00000c4a: sub _fini(_fini_result)
00000c64: _fini_result :: out u32 = low:32[R0]

00000652:
00000658: #0 := R31 - 0x10
0000065e: mem := mem with [#0, el]:u64 <- R29
00000664: mem := mem with [#0 + 8, el]:u64 <- R30
00000668: R31 := #0
0000066e: R29 := R31
00000675: R29 := mem[R31, el]:u64
0000067a: R30 := mem[R31 + 8, el]:u64
0000067e: R31 := R31 + 0x10
00000683: call R30 with noreturn

00000c4b: sub _init(_init_result)
00000c65: _init_result :: out u32 = low:32[R0]

00000b94:
00000b9a: #6 := R31 - 0x10
00000ba0: mem := mem with [#6, el]:u64 <- R29
00000ba6: mem := mem with [#6 + 8, el]:u64 <- R30
00000baa: R31 := #6
00000bb0: R29 := R31
00000bb5: R30 := 0x590
00000bb7: call @call_weak_fn with return %00000bb9

00000bb9:
00000bbe: R29 := mem[R31, el]:u64
00000bc3: R30 := mem[R31 + 8, el]:u64
00000bc7: R31 := R31 + 0x10
00000bcc: call R30 with noreturn

00000c4c: sub _start(_start_result)
00000c66: _start_result :: out u32 = low:32[R0]

000007e3:
000007e8: R29 := 0
000007ed: R30 := 0
000007f3: R5 := R0
000007fa: R1 := mem[R31, el]:u64
00000800: R2 := R31 + 8
00000806: R6 := R31
0000080b: R0 := 0x10000
00000812: R0 := mem[R0 + 0xFF0, el]:u64
00000817: R3 := 0
0000081c: R4 := 0
00000821: R30 := 0x630
00000824: call @__libc_start_main with return %00000826

00000826:
00000829: R30 := 0x634
0000082c: call @abort with return %00000c4d

00000c4d:
00000c4e: call @call_weak_fn with noreturn

00000c4f: sub abort()


0000082a:
00000b08: R16 := 0x10000
00000b0f: R17 := mem[R16 + 0xFC8, el]:u64
00000b15: R16 := R16 + 0xFC8
00000b1a: call R17 with noreturn

00000c50: sub call_weak_fn(call_weak_fn_result)
00000c67: call_weak_fn_result :: out u32 = low:32[R0]

0000082e:
00000831: R0 := 0x10000
00000838: R0 := mem[R0 + 0xFE8, el]:u64
0000083e: when R0 = 0 goto %0000083c
00000c51: goto %00000a24

0000083c:
00000844: call R30 with noreturn

00000a24:
00000a27: goto @__gmon_start__

00000a25:
00000af2: R16 := 0x10000
00000af9: R17 := mem[R16 + 0xFC0, el]:u64
00000aff: R16 := R16 + 0xFC0
00000b04: call R17 with noreturn

00000c52: sub deregister_tm_clones(deregister_tm_clones_result)
00000c68: deregister_tm_clones_result :: out u32 = low:32[R0]

0000084a:
0000084d: R0 := 0x11000
00000853: R0 := R0 + 0x10
00000858: R1 := 0x11000
0000085e: R1 := R1 + 0x10
00000864: #1 := ~R0
00000869: #2 := R1 + ~R0
0000086f: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000875: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000879: ZF := #2 + 1 = 0
0000087d: NF := 63:63[#2 + 1]
00000883: when ZF goto %00000881
00000c53: goto %00000a06

00000a06:
00000a09: R1 := 0x10000
00000a10: R1 := mem[R1 + 0xFD8, el]:u64
00000a15: when R1 = 0 goto %00000881
00000c54: goto %00000a19

00000881:
00000889: call R30 with noreturn

00000a19:
00000a1d: R16 := R1
00000a22: call R16 with noreturn

00000c55: sub frame_dummy(frame_dummy_result)
00000c69: frame_dummy_result :: out u32 = low:32[R0]

00000921:
00000923: call @register_tm_clones with noreturn

00000c56: sub main(main_argc, main_argv, main_result)
00000c6a: main_argc :: in u32 = low:32[R0]
00000c6b: main_argv :: in out u64 = R1
00000c6c: main_result :: out u32 = low:32[R0]

00000925:
00000929: R31 := R31 - 0x20
00000931: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000939: mem := mem with [R31, el]:u64 <- R1
00000940: mem := mem with [R31 + 0x18, el]:u32 <- 0
00000947: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000094d: #4 := 31:0[R0] - 1
00000952: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
00000957: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000095b: ZF := #4 + 1 = 0
0000095f: NF := 31:31[#4 + 1]
00000965: when ZF <> 1 goto %00000963
00000c57: goto %0000099c

00000963:
0000096b: R0 := 2
00000973: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
00000c58: goto %00000975

0000099c:
0000099f: R0 := 1
000009a7: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
000009ab: goto %00000975

00000975:
0000097a: R0 := pad:64[mem[R31 + 0x18, el]:u32]
00000980: R0 := pad:64[31:0[R0] + 1]
00000988: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000098f: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000995: R31 := R31 + 0x20
0000099a: call R30 with noreturn

00000c59: sub register_tm_clones(register_tm_clones_result)
00000c6d: register_tm_clones_result :: out u32 = low:32[R0]

0000088b:
0000088e: R0 := 0x11000
00000894: R0 := R0 + 0x10
00000899: R1 := 0x11000
0000089f: R1 := R1 + 0x10
000008a6: R1 := R1 + ~R0 + 1
000008ac: R2 := 0.63:63[R1]
000008b3: R1 := R2 + (R1 ~>> 3)
000008b9: R1 := extend:64[63:1[R1]]
000008bf: when R1 = 0 goto %000008bd
00000c5a: goto %000009e8

000009e8:
000009eb: R2 := 0x10000
000009f2: R2 := mem[R2 + 0xFF8, el]:u64
000009f7: when R2 = 0 goto %000008bd
00000c5b: goto %000009fb

000008bd:
000008c5: call R30 with noreturn

000009fb:
000009ff: R16 := R2
00000a04: call R16 with noreturn
