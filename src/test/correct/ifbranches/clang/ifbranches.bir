0000061d: program
000005e9: sub __cxa_finalize(__cxa_finalize_result)
0000061e: __cxa_finalize_result :: out u32 = low:32[R0]

000003e3:
000004db: R16 := 0x20000
000004e2: R17 := mem[R16 + 8, el]:u64
000004e8: R16 := R16 + 8
000004ed: call R17 with noreturn

000005ea: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000061f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002a7:
000002ab: #3 := R31 - 0x20
000002b1: mem := mem with [#3, el]:u64 <- R29
000002b7: mem := mem with [#3 + 8, el]:u64 <- R30
000002bb: R31 := #3
000002c1: R29 := R31
000002c9: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ce: R19 := 0x20000
000002d5: R0 := pad:64[mem[R19 + 0x30]]
000002db: when 0:0[R0] goto %000002d9
00000612: goto %000003ac

000003ac:
000003af: R0 := 0x1F000
000003b6: R0 := mem[R0 + 0xFC8, el]:u64
000003bc: when R0 = 0 goto %000003ba
00000613: goto %000003d3

000003d3:
000003d6: R0 := 0x20000
000003dd: R0 := mem[R0 + 0x28, el]:u64
000003e2: R30 := 0x730
000003e5: call @__cxa_finalize with return %000003ba

000003ba:
000003c2: R30 := 0x734
000003c4: call @deregister_tm_clones with return %000003c6

000003c6:
000003c9: R0 := 1
000003d1: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000614: goto %000002d9

000002d9:
000002e3: R19 := mem[R31 + 0x10, el]:u64
000002ea: R29 := mem[R31, el]:u64
000002ef: R30 := mem[R31 + 8, el]:u64
000002f3: R31 := R31 + 0x20
000002f8: call R30 with noreturn

000005ee: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000620: __libc_start_main_main :: in u64 = R0
00000621: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000622: __libc_start_main_arg3 :: in out u64 = R2
00000623: __libc_start_main_auxv :: in out u64 = R3
00000624: __libc_start_main_result :: out u32 = low:32[R0]

00000200:
000004c5: R16 := 0x20000
000004cc: R17 := mem[R16, el]:u64
000004d2: R16 := R16
000004d7: call R17 with noreturn

000005ef: sub _fini(_fini_result)
00000625: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005f0: sub _init(_init_result)
00000626: _init_result :: out u32 = low:32[R0]

00000535:
0000053b: #6 := R31 - 0x10
00000541: mem := mem with [#6, el]:u64 <- R29
00000547: mem := mem with [#6 + 8, el]:u64 <- R30
0000054b: R31 := #6
00000551: R29 := R31
00000556: R30 := 0x5C8
00000558: call @call_weak_fn with return %0000055a

0000055a:
0000055f: R29 := mem[R31, el]:u64
00000564: R30 := mem[R31 + 8, el]:u64
00000568: R31 := R31 + 0x10
0000056d: call R30 with noreturn

000005f1: sub _start(_start_result)
00000627: _start_result :: out u32 = low:32[R0]

000001c1:
000001c6: R29 := 0
000001cb: R30 := 0
000001d1: R5 := R0
000001d8: R1 := mem[R31, el]:u64
000001de: R2 := R31 + 8
000001e4: R6 := R31
000001e9: R0 := 0x1F000
000001f0: R0 := mem[R0 + 0xFD8, el]:u64
000001f5: R3 := 0
000001fa: R4 := 0
000001ff: R30 := 0x670
00000202: call @__libc_start_main with return %00000204

00000204:
00000207: R30 := 0x674
0000020a: call @abort with return %00000615

00000615:
00000616: call @call_weak_fn with noreturn

000005f4: sub abort()


00000208:
00000507: R16 := 0x20000
0000050e: R17 := mem[R16 + 0x18, el]:u64
00000514: R16 := R16 + 0x18
00000519: call R17 with noreturn

000005f5: sub call_weak_fn(call_weak_fn_result)
00000628: call_weak_fn_result :: out u32 = low:32[R0]

0000020c:
0000020f: R0 := 0x1F000
00000216: R0 := mem[R0 + 0xFD0, el]:u64
0000021c: when R0 = 0 goto %0000021a
00000617: goto %00000423

0000021a:
00000222: call R30 with noreturn

00000423:
00000426: goto @__gmon_start__

00000424:
000004f1: R16 := 0x20000
000004f8: R17 := mem[R16 + 0x10, el]:u64
000004fe: R16 := R16 + 0x10
00000503: call R17 with noreturn

000005f7: sub deregister_tm_clones(deregister_tm_clones_result)
00000629: deregister_tm_clones_result :: out u32 = low:32[R0]

00000228:
0000022b: R0 := 0x20000
00000231: R0 := R0 + 0x30
00000236: R1 := 0x20000
0000023c: R1 := R1 + 0x30
00000242: #1 := ~R0
00000247: #2 := R1 + ~R0
0000024d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000253: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000257: ZF := #2 + 1 = 0
0000025b: NF := 63:63[#2 + 1]
00000261: when ZF goto %0000025f
00000618: goto %00000405

00000405:
00000408: R1 := 0x1F000
0000040f: R1 := mem[R1 + 0xFC0, el]:u64
00000414: when R1 = 0 goto %0000025f
00000619: goto %00000418

0000025f:
00000267: call R30 with noreturn

00000418:
0000041c: R16 := R1
00000421: call R16 with noreturn

000005fa: sub frame_dummy(frame_dummy_result)
0000062a: frame_dummy_result :: out u32 = low:32[R0]

000002fe:
00000300: call @register_tm_clones with noreturn

000005fb: sub main(main_argc, main_argv, main_result)
0000062b: main_argc :: in u32 = low:32[R0]
0000062c: main_argv :: in out u64 = R1
0000062d: main_result :: out u32 = low:32[R0]

00000302:
00000306: R31 := R31 - 0x20
0000030d: mem := mem with [R31 + 0x1C, el]:u32 <- 0
00000315: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
0000031d: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000324: mem := mem with [R31 + 0xC, el]:u32 <- 0
0000032b: R8 := pad:64[mem[R31 + 0x18, el]:u32]
00000331: #4 := 31:0[R8] - 1
00000336: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
0000033b: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
0000033f: ZF := #4 + 1 = 0
00000343: NF := 31:31[#4 + 1]
00000347: R8 := pad:64[#4 + 1]
00000353: when ZF goto %0000034c
00000354: goto %0000034f

0000034f:
00000350: R8 := 1
00000356: goto %00000352

0000034c:
0000034d: R8 := 0
00000355: goto %00000352

00000352:
0000035c: when 0:0[R8] goto %0000035a
0000061a: goto %00000397

0000035a:
00000362: R8 := 2
0000036a: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000036f: goto %0000036d

00000397:
0000039a: goto %00000398

00000398:
0000039e: R8 := 1
000003a6: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
000003aa: goto %0000036d

0000036d:
00000375: R8 := pad:64[mem[R31 + 0xC, el]:u32]
0000037b: R8 := pad:64[31:0[R8] + 1]
00000383: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000038a: R0 := pad:64[mem[R31 + 8, el]:u32]
00000390: R31 := R31 + 0x20
00000395: call R30 with noreturn

000005fd: sub register_tm_clones(register_tm_clones_result)
0000062e: register_tm_clones_result :: out u32 = low:32[R0]

00000269:
0000026c: R0 := 0x20000
00000272: R0 := R0 + 0x30
00000277: R1 := 0x20000
0000027d: R1 := R1 + 0x30
00000284: R1 := R1 + ~R0 + 1
0000028a: R2 := 0.63:63[R1]
00000291: R1 := R2 + (R1 ~>> 3)
00000297: R1 := extend:64[63:1[R1]]
0000029d: when R1 = 0 goto %0000029b
0000061b: goto %000003e7

000003e7:
000003ea: R2 := 0x1F000
000003f1: R2 := mem[R2 + 0xFE0, el]:u64
000003f6: when R2 = 0 goto %0000029b
0000061c: goto %000003fa

0000029b:
000002a3: call R30 with noreturn

000003fa:
000003fe: R16 := R2
00000403: call R16 with noreturn
