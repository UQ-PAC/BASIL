var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1896bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1897bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1898bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1899bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_VF, Gamma_ZF, NF, R0, VF, ZF;
  requires (Gamma_R0 == true);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 1896bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1897bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1898bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1899bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 1896bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1897bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1898bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1899bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main()
{
  var Cse0__5$1$0: bv32;
  var Gamma_Cse0__5$1$0: bool;
  $main$__0__$qKNLTTV9SPy8sqABlZokYg:
    assume {:captureState "$main$__0__$qKNLTTV9SPy8sqABlZokYg"} true;
    Cse0__5$1$0, Gamma_Cse0__5$1$0 := bvadd32(R0[32:0], 0bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp32(Cse0__5$1$0, Cse0__5$1$0)), Gamma_Cse0__5$1$0;
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$1$0), bvadd33(zero_extend1_32(R0[32:0]), 4294967296bv33))), (Gamma_R0 && Gamma_Cse0__5$1$0);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$1$0, 0bv32), Gamma_Cse0__5$1$0;
    NF, Gamma_NF := Cse0__5$1$0[32:31], Gamma_Cse0__5$1$0;
    assert Gamma_ZF;
    goto $main$__0__$qKNLTTV9SPy8sqABlZokYg$__0, $main$__0__$qKNLTTV9SPy8sqABlZokYg$__1;
  $main$__0__$qKNLTTV9SPy8sqABlZokYg$__0:
    assume {:captureState "$main$__0__$qKNLTTV9SPy8sqABlZokYg$__0"} true;
    assume (ZF == 1bv1);
    R0, Gamma_R0 := 0bv64, true;
    goto $main$__0__$qKNLTTV9SPy8sqABlZokYg$__2;
  $main$__0__$qKNLTTV9SPy8sqABlZokYg$__1:
    assume {:captureState "$main$__0__$qKNLTTV9SPy8sqABlZokYg$__1"} true;
    assume (!(ZF == 1bv1));
    R0, Gamma_R0 := 1bv64, true;
    goto $main$__0__$qKNLTTV9SPy8sqABlZokYg$__2;
  $main$__0__$qKNLTTV9SPy8sqABlZokYg$__2:
    assume {:captureState "$main$__0__$qKNLTTV9SPy8sqABlZokYg$__2"} true;
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 2bv32)), Gamma_R0;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

