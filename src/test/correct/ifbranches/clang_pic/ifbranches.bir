00000cce: program
00000cb7: sub __cxa_finalize(__cxa_finalize_result)
00000ccf: __cxa_finalize_result :: out u32 = low:32[R0]

00000a4f:
00000b47: R16 := 0x11000
00000b4e: R17 := mem[R16 + 8, el]:u64
00000b54: R16 := R16 + 8
00000b59: call R17 with noreturn

00000cb8: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000cd0: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000912:
00000916: #3 := R31 - 0x20
0000091c: mem := mem with [#3, el]:u64 <- R29
00000922: mem := mem with [#3 + 8, el]:u64 <- R30
00000926: R31 := #3
0000092c: R29 := R31
00000934: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000939: R19 := 0x11000
00000940: R0 := pad:64[mem[R19 + 0x30]]
00000947: when 31:0[R0] <> 0 goto %00000945
00000cb9: goto %00000a18

00000a18:
00000a1b: R0 := 0x10000
00000a22: R0 := mem[R0 + 0xFC8, el]:u64
00000a28: when R0 = 0 goto %00000a26
00000cba: goto %00000a3f

00000a3f:
00000a42: R0 := 0x11000
00000a49: R0 := mem[R0 + 0x28, el]:u64
00000a4e: R30 := 0x6F0
00000a51: call @__cxa_finalize with return %00000a26

00000a26:
00000a2e: R30 := 0x6F4
00000a30: call @deregister_tm_clones with return %00000a32

00000a32:
00000a35: R0 := 1
00000a3d: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000cbb: goto %00000945

00000945:
0000094f: R19 := mem[R31 + 0x10, el]:u64
00000956: R29 := mem[R31, el]:u64
0000095b: R30 := mem[R31 + 8, el]:u64
0000095f: R31 := R31 + 0x20
00000964: call R30 with noreturn

00000cbc: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000cd1: __libc_start_main_main :: in u64 = R0
00000cd2: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000cd3: __libc_start_main_arg3 :: in out u64 = R2
00000cd4: __libc_start_main_auxv :: in out u64 = R3
00000cd5: __libc_start_main_result :: out u32 = low:32[R0]

0000086b:
00000b31: R16 := 0x11000
00000b38: R17 := mem[R16, el]:u64
00000b3e: R16 := R16
00000b43: call R17 with noreturn

00000cbd: sub _fini(_fini_result)
00000cd6: _fini_result :: out u32 = low:32[R0]

0000068b:
00000691: #0 := R31 - 0x10
00000697: mem := mem with [#0, el]:u64 <- R29
0000069d: mem := mem with [#0 + 8, el]:u64 <- R30
000006a1: R31 := #0
000006a7: R29 := R31
000006ae: R29 := mem[R31, el]:u64
000006b3: R30 := mem[R31 + 8, el]:u64
000006b7: R31 := R31 + 0x10
000006bc: call R30 with noreturn

00000cbe: sub _init(_init_result)
00000cd7: _init_result :: out u32 = low:32[R0]

00000c03:
00000c09: #6 := R31 - 0x10
00000c0f: mem := mem with [#6, el]:u64 <- R29
00000c15: mem := mem with [#6 + 8, el]:u64 <- R30
00000c19: R31 := #6
00000c1f: R29 := R31
00000c24: R30 := 0x590
00000c26: call @call_weak_fn with return %00000c28

00000c28:
00000c2d: R29 := mem[R31, el]:u64
00000c32: R30 := mem[R31 + 8, el]:u64
00000c36: R31 := R31 + 0x10
00000c3b: call R30 with noreturn

00000cbf: sub _start(_start_result)
00000cd8: _start_result :: out u32 = low:32[R0]

0000082c:
00000831: R29 := 0
00000836: R30 := 0
0000083c: R5 := R0
00000843: R1 := mem[R31, el]:u64
00000849: R2 := R31 + 8
0000084f: R6 := R31
00000854: R0 := 0x10000
0000085b: R0 := mem[R0 + 0xFD8, el]:u64
00000860: R3 := 0
00000865: R4 := 0
0000086a: R30 := 0x630
0000086d: call @__libc_start_main with return %0000086f

0000086f:
00000872: R30 := 0x634
00000875: call @abort with return %00000cc0

00000cc0:
00000cc1: call @call_weak_fn with noreturn

00000cc2: sub abort()


00000873:
00000b73: R16 := 0x11000
00000b7a: R17 := mem[R16 + 0x18, el]:u64
00000b80: R16 := R16 + 0x18
00000b85: call R17 with noreturn

00000cc3: sub call_weak_fn(call_weak_fn_result)
00000cd9: call_weak_fn_result :: out u32 = low:32[R0]

00000877:
0000087a: R0 := 0x10000
00000881: R0 := mem[R0 + 0xFD0, el]:u64
00000887: when R0 = 0 goto %00000885
00000cc4: goto %00000a8f

00000885:
0000088d: call R30 with noreturn

00000a8f:
00000a92: goto @__gmon_start__

00000a90:
00000b5d: R16 := 0x11000
00000b64: R17 := mem[R16 + 0x10, el]:u64
00000b6a: R16 := R16 + 0x10
00000b6f: call R17 with noreturn

00000cc5: sub deregister_tm_clones(deregister_tm_clones_result)
00000cda: deregister_tm_clones_result :: out u32 = low:32[R0]

00000893:
00000896: R0 := 0x11000
0000089c: R0 := R0 + 0x30
000008a1: R1 := 0x11000
000008a7: R1 := R1 + 0x30
000008ad: #1 := ~R0
000008b2: #2 := R1 + ~R0
000008b8: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000008be: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000008c2: ZF := #2 + 1 = 0
000008c6: NF := 63:63[#2 + 1]
000008cc: when ZF goto %000008ca
00000cc6: goto %00000a71

00000a71:
00000a74: R1 := 0x10000
00000a7b: R1 := mem[R1 + 0xFC0, el]:u64
00000a80: when R1 = 0 goto %000008ca
00000cc7: goto %00000a84

000008ca:
000008d2: call R30 with noreturn

00000a84:
00000a88: R16 := R1
00000a8d: call R16 with noreturn

00000cc8: sub frame_dummy(frame_dummy_result)
00000cdb: frame_dummy_result :: out u32 = low:32[R0]

0000096a:
0000096c: call @register_tm_clones with noreturn

00000cc9: sub main(main_argc, main_argv, main_result)
00000cdc: main_argc :: in u32 = low:32[R0]
00000cdd: main_argv :: in out u64 = R1
00000cde: main_result :: out u32 = low:32[R0]

0000096e:
00000972: R31 := R31 - 0x20
00000979: mem := mem with [R31 + 0x1C, el]:u32 <- 0
00000981: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
00000989: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000990: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000997: R8 := pad:64[mem[R31 + 0x18, el]:u32]
0000099d: #4 := 31:0[R8] - 1
000009a2: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
000009a7: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
000009ab: ZF := #4 + 1 = 0
000009af: NF := 31:31[#4 + 1]
000009b3: R8 := pad:64[#4 + 1]
000009bf: when ZF goto %000009b8
000009c0: goto %000009bb

000009bb:
000009bc: R8 := 1
000009c2: goto %000009be

000009b8:
000009b9: R8 := 0
000009c1: goto %000009be

000009be:
000009c8: when 0:0[R8] goto %000009c6
00000cca: goto %00000a03

000009c6:
000009ce: R8 := 2
000009d6: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
000009db: goto %000009d9

00000a03:
00000a06: goto %00000a04

00000a04:
00000a0a: R8 := 1
00000a12: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000a16: goto %000009d9

000009d9:
000009e1: R8 := pad:64[mem[R31 + 0xC, el]:u32]
000009e7: R8 := pad:64[31:0[R8] + 1]
000009ef: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000009f6: R0 := pad:64[mem[R31 + 8, el]:u32]
000009fc: R31 := R31 + 0x20
00000a01: call R30 with noreturn

00000ccb: sub register_tm_clones(register_tm_clones_result)
00000cdf: register_tm_clones_result :: out u32 = low:32[R0]

000008d4:
000008d7: R0 := 0x11000
000008dd: R0 := R0 + 0x30
000008e2: R1 := 0x11000
000008e8: R1 := R1 + 0x30
000008ef: R1 := R1 + ~R0 + 1
000008f5: R2 := 0.63:63[R1]
000008fc: R1 := R2 + (R1 ~>> 3)
00000902: R1 := extend:64[63:1[R1]]
00000908: when R1 = 0 goto %00000906
00000ccc: goto %00000a53

00000a53:
00000a56: R2 := 0x10000
00000a5d: R2 := mem[R2 + 0xFE0, el]:u64
00000a62: when R2 = 0 goto %00000906
00000ccd: goto %00000a66

00000906:
0000090e: call R30 with noreturn

00000a66:
00000a6a: R16 := R2
00000a6f: call R16 with noreturn
