00000543: program
00000511: sub __cxa_finalize(__cxa_finalize_result)
00000544: __cxa_finalize_result :: out u32 = low:32[R0]

0000031b:
00000413: R16 := 0x20000
0000041a: R17 := mem[R16 + 8, el]:u64
00000420: R16 := R16 + 8
00000425: call R17 with noreturn

00000512: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000545: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000267:
0000026b: #3 := R31 - 0x20
00000271: mem := mem with [#3, el]:u64 <- R29
00000277: mem := mem with [#3 + 8, el]:u64 <- R30
0000027b: R31 := #3
00000281: R29 := R31
00000289: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000028e: R19 := 0x20000
00000295: R0 := pad:64[mem[R19 + 0x30]]
0000029b: when 0:0[R0] goto %00000299
00000539: goto %000002e4

000002e4:
000002e7: R0 := 0x1F000
000002ee: R0 := mem[R0 + 0xFC8, el]:u64
000002f4: when R0 = 0 goto %000002f2
0000053a: goto %0000030b

0000030b:
0000030e: R0 := 0x20000
00000315: R0 := mem[R0 + 0x28, el]:u64
0000031a: R30 := 0x730
0000031d: call @__cxa_finalize with return %000002f2

000002f2:
000002fa: R30 := 0x734
000002fc: call @deregister_tm_clones with return %000002fe

000002fe:
00000301: R0 := 1
00000309: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000053b: goto %00000299

00000299:
000002a3: R19 := mem[R31 + 0x10, el]:u64
000002aa: R29 := mem[R31, el]:u64
000002af: R30 := mem[R31 + 8, el]:u64
000002b3: R31 := R31 + 0x20
000002b8: call R30 with noreturn

00000516: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000546: __libc_start_main_main :: in u64 = R0
00000547: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000548: __libc_start_main_arg3 :: in out u64 = R2
00000549: __libc_start_main_auxv :: in out u64 = R3
0000054a: __libc_start_main_result :: out u32 = low:32[R0]

000001c0:
000003fd: R16 := 0x20000
00000404: R17 := mem[R16, el]:u64
0000040a: R16 := R16
0000040f: call R17 with noreturn

00000517: sub _fini(_fini_result)
0000054b: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000518: sub _init(_init_result)
0000054c: _init_result :: out u32 = low:32[R0]

0000046d:
00000473: #5 := R31 - 0x10
00000479: mem := mem with [#5, el]:u64 <- R29
0000047f: mem := mem with [#5 + 8, el]:u64 <- R30
00000483: R31 := #5
00000489: R29 := R31
0000048e: R30 := 0x5C8
00000490: call @call_weak_fn with return %00000492

00000492:
00000497: R29 := mem[R31, el]:u64
0000049c: R30 := mem[R31 + 8, el]:u64
000004a0: R31 := R31 + 0x10
000004a5: call R30 with noreturn

00000519: sub _start(_start_result)
0000054d: _start_result :: out u32 = low:32[R0]

00000181:
00000186: R29 := 0
0000018b: R30 := 0
00000191: R5 := R0
00000198: R1 := mem[R31, el]:u64
0000019e: R2 := R31 + 8
000001a4: R6 := R31
000001a9: R0 := 0x1F000
000001b0: R0 := mem[R0 + 0xFD8, el]:u64
000001b5: R3 := 0
000001ba: R4 := 0
000001bf: R30 := 0x670
000001c2: call @__libc_start_main with return %000001c4

000001c4:
000001c7: R30 := 0x674
000001ca: call @abort with return %0000053c

0000053c:
0000053d: call @call_weak_fn with noreturn

0000051c: sub abort()


000001c8:
0000043f: R16 := 0x20000
00000446: R17 := mem[R16 + 0x18, el]:u64
0000044c: R16 := R16 + 0x18
00000451: call R17 with noreturn

0000051d: sub call_weak_fn(call_weak_fn_result)
0000054e: call_weak_fn_result :: out u32 = low:32[R0]

000001cc:
000001cf: R0 := 0x1F000
000001d6: R0 := mem[R0 + 0xFD0, el]:u64
000001dc: when R0 = 0 goto %000001da
0000053e: goto %0000035b

000001da:
000001e2: call R30 with noreturn

0000035b:
0000035e: goto @__gmon_start__

0000035c:
00000429: R16 := 0x20000
00000430: R17 := mem[R16 + 0x10, el]:u64
00000436: R16 := R16 + 0x10
0000043b: call R17 with noreturn

0000051f: sub deregister_tm_clones(deregister_tm_clones_result)
0000054f: deregister_tm_clones_result :: out u32 = low:32[R0]

000001e8:
000001eb: R0 := 0x20000
000001f1: R0 := R0 + 0x30
000001f6: R1 := 0x20000
000001fc: R1 := R1 + 0x30
00000202: #1 := ~R0
00000207: #2 := R1 + ~R0
0000020d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000213: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000217: ZF := #2 + 1 = 0
0000021b: NF := 63:63[#2 + 1]
00000221: when ZF goto %0000021f
0000053f: goto %0000033d

0000033d:
00000340: R1 := 0x1F000
00000347: R1 := mem[R1 + 0xFC0, el]:u64
0000034c: when R1 = 0 goto %0000021f
00000540: goto %00000350

0000021f:
00000227: call R30 with noreturn

00000350:
00000354: R16 := R1
00000359: call R16 with noreturn

00000522: sub frame_dummy(frame_dummy_result)
00000550: frame_dummy_result :: out u32 = low:32[R0]

000002be:
000002c0: call @register_tm_clones with noreturn

00000523: sub main(main_argc, main_argv, main_result)
00000551: main_argc :: in u32 = low:32[R0]
00000552: main_argv :: in out u64 = R1
00000553: main_result :: out u32 = low:32[R0]

000002c2:
000002c5: R0 := 0
000002ca: R8 := 0x20000
000002cf: R9 := 0x20000
000002d6: mem := mem with [R8 + 0x38, el]:u32 <- 0
000002dd: mem := mem with [R9 + 0x34, el]:u32 <- 0
000002e2: call R30 with noreturn

00000524: sub register_tm_clones(register_tm_clones_result)
00000554: register_tm_clones_result :: out u32 = low:32[R0]

00000229:
0000022c: R0 := 0x20000
00000232: R0 := R0 + 0x30
00000237: R1 := 0x20000
0000023d: R1 := R1 + 0x30
00000244: R1 := R1 + ~R0 + 1
0000024a: R2 := 0.63:63[R1]
00000251: R1 := R2 + (R1 ~>> 3)
00000257: R1 := extend:64[63:1[R1]]
0000025d: when R1 = 0 goto %0000025b
00000541: goto %0000031f

0000031f:
00000322: R2 := 0x1F000
00000329: R2 := mem[R2 + 0xFE0, el]:u64
0000032e: when R2 = 0 goto %0000025b
00000542: goto %00000332

0000025b:
00000263: call R30 with noreturn

00000332:
00000336: R16 := R2
0000033b: call R16 with noreturn
