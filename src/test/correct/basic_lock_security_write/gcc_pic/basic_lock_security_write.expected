var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69652bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69656bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $x_addr) then (memory_load32_le(memory, $z_addr) == 0bv32) else (if (index == $z_addr) then true else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures ((memory_load32_le(mem, $z_addr) == old(memory_load32_le(mem, $z_addr))) && (memory_load32_le(mem, $x_addr) == old(memory_load32_le(mem, $x_addr))));
  free ensures (memory_load8_le(mem, 1972bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1973bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1974bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1975bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1872bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures ((memory_load32_le(mem, $z_addr) == old(memory_load32_le(mem, $z_addr))) && (memory_load32_le(mem, $x_addr) == old(memory_load32_le(mem, $x_addr))));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert ((memory_load32_le(mem, $z_addr) == memory_load32_le(mem, $z_addr)) && (memory_load32_le(mem, $x_addr) == memory_load32_le(mem, $x_addr)));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

implementation {:extern} guarantee_reflexive()
{
  assert ((memory_load32_le(mem, $z_addr) == 0bv32) ==> ((memory_load32_le(mem, $x_addr) == memory_load32_le(mem, $x_addr)) && (memory_load32_le(mem, $z_addr) == memory_load32_le(mem, $z_addr))));
}

procedure main(R0_in: bv64, Gamma_R0_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R31_out: bv64, Gamma_R31_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  requires (memory_load32_le(mem, $z_addr) != 0bv32);
  requires (Gamma_R0_in == false);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 1972bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1973bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1974bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1975bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 69656bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1872bv64);
  free ensures (memory_load8_le(mem, 1972bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1973bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1974bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1975bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1872bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R31_out: bv64, Gamma_R31_out: bool)
{
  var Gamma_R0_3: bool;
  var Gamma_R0_5: bool;
  var Gamma_R0_7: bool;
  var Gamma_R0_9: bool;
  var Gamma_R1_2: bool;
  var Gamma_x_old: bool;
  var R0_3: bv64;
  var R0_5: bv64;
  var R0_7: bv64;
  var R0_9: bv64;
  var R1_2: bv64;
  var x_old: bv32;
  var z_old: bv32;
  lmain:
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), R0_in[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), Gamma_R0_in);
    call rely();
    R0_3, Gamma_R0_3 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    assert (L(mem, R0_3) ==> true);
    z_old := memory_load32_le(mem, $z_addr);
    x_old := memory_load32_le(mem, $x_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0_3, 1bv32), gamma_store32(Gamma_mem, R0_3, true);
    assert ((R0_3 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert ((z_old == 0bv32) ==> ((memory_load32_le(mem, $x_addr) == x_old) && (memory_load32_le(mem, $z_addr) == z_old)));
    call rely();
    R0_5, Gamma_R0_5 := memory_load64_le(mem, 69600bv64), (gamma_load64(Gamma_mem, 69600bv64) || L(mem, 69600bv64));
    R1_2, Gamma_R1_2 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551612bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64));
    call rely();
    assert (L(mem, R0_5) ==> Gamma_R1_2);
    z_old := memory_load32_le(mem, $z_addr);
    x_old := memory_load32_le(mem, $x_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0_5, R1_2[32:0]), gamma_store32(Gamma_mem, R0_5, Gamma_R1_2);
    assert ((R0_5 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert ((z_old == 0bv32) ==> ((memory_load32_le(mem, $x_addr) == x_old) && (memory_load32_le(mem, $z_addr) == z_old)));
    call rely();
    R0_7, Gamma_R0_7 := memory_load64_le(mem, 69600bv64), (gamma_load64(Gamma_mem, 69600bv64) || L(mem, 69600bv64));
    call rely();
    assert (L(mem, R0_7) ==> true);
    z_old := memory_load32_le(mem, $z_addr);
    x_old := memory_load32_le(mem, $x_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0_7, 0bv32), gamma_store32(Gamma_mem, R0_7, true);
    assert ((R0_7 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert ((z_old == 0bv32) ==> ((memory_load32_le(mem, $x_addr) == x_old) && (memory_load32_le(mem, $z_addr) == z_old)));
    call rely();
    R0_9, Gamma_R0_9 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    assert (L(mem, R0_9) ==> true);
    z_old := memory_load32_le(mem, $z_addr);
    x_old := memory_load32_le(mem, $x_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0_9, 0bv32), gamma_store32(Gamma_mem, R0_9, true);
    assert ((R0_9 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert ((z_old == 0bv32) ==> ((memory_load32_le(mem, $x_addr) == x_old) && (memory_load32_le(mem, $z_addr) == z_old)));
    goto main_basil_return;
  main_basil_return:
    R0_out, R1_out, R31_out := 0bv64, R1_2, R31_in;
    Gamma_R0_out, Gamma_R1_out, Gamma_R31_out := true, Gamma_R1_2, Gamma_R31_in;
    return;
}

