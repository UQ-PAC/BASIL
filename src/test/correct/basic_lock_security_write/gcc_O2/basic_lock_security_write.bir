000005e6: program
000005b4: sub __cxa_finalize(__cxa_finalize_result)
000005e7: __cxa_finalize_result :: out u32 = low:32[R0]

00000358:
00000450: R16 := 0x10000
00000457: R17 := mem[R16 + 0xFB8, el]:u64
0000045d: R16 := R16 + 0xFB8
00000462: call R17 with noreturn

000005b5: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005e8: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c5:
000002c9: #3 := R31 - 0x20
000002cf: mem := mem with [#3, el]:u64 <- R29
000002d5: mem := mem with [#3 + 8, el]:u64 <- R30
000002d9: R31 := #3
000002df: R29 := R31
000002e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ec: R19 := 0x11000
000002f3: R0 := pad:64[mem[R19 + 0x10]]
000002fa: when 31:0[R0] <> 0 goto %000002f8
000005dc: goto %00000321

00000321:
00000324: R0 := 0x10000
0000032b: R0 := mem[R0 + 0xFE0, el]:u64
00000331: when R0 = 0 goto %0000032f
000005dd: goto %00000348

00000348:
0000034b: R0 := 0x11000
00000352: R0 := mem[R0 + 8, el]:u64
00000357: R30 := 0x730
0000035a: call @__cxa_finalize with return %0000032f

0000032f:
00000337: R30 := 0x734
00000339: call @deregister_tm_clones with return %0000033b

0000033b:
0000033e: R0 := 1
00000346: mem := mem with [R19 + 0x10] <- 7:0[R0]
000005de: goto %000002f8

000002f8:
00000302: R19 := mem[R31 + 0x10, el]:u64
00000309: R29 := mem[R31, el]:u64
0000030e: R30 := mem[R31 + 8, el]:u64
00000312: R31 := R31 + 0x20
00000317: call R30 with noreturn

000005b9: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005e9: __libc_start_main_main :: in u64 = R0
000005ea: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005eb: __libc_start_main_arg3 :: in out u64 = R2
000005ec: __libc_start_main_auxv :: in out u64 = R3
000005ed: __libc_start_main_result :: out u32 = low:32[R0]

0000021e:
0000043a: R16 := 0x10000
00000441: R17 := mem[R16 + 0xFB0, el]:u64
00000447: R16 := R16 + 0xFB0
0000044c: call R17 with noreturn

000005ba: sub _fini(_fini_result)
000005ee: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005bb: sub _init(_init_result)
000005ef: _init_result :: out u32 = low:32[R0]

00000506:
0000050c: #5 := R31 - 0x10
00000512: mem := mem with [#5, el]:u64 <- R29
00000518: mem := mem with [#5 + 8, el]:u64 <- R30
0000051c: R31 := #5
00000522: R29 := R31
00000527: R30 := 0x590
00000529: call @call_weak_fn with return %0000052b

0000052b:
00000530: R29 := mem[R31, el]:u64
00000535: R30 := mem[R31 + 8, el]:u64
00000539: R31 := R31 + 0x10
0000053e: call R30 with noreturn

000005bc: sub _start(_start_result)
000005f0: _start_result :: out u32 = low:32[R0]

000001df:
000001e4: R29 := 0
000001e9: R30 := 0
000001ef: R5 := R0
000001f6: R1 := mem[R31, el]:u64
000001fc: R2 := R31 + 8
00000202: R6 := R31
00000207: R0 := 0x10000
0000020e: R0 := mem[R0 + 0xFF0, el]:u64
00000213: R3 := 0
00000218: R4 := 0
0000021d: R30 := 0x670
00000220: call @__libc_start_main with return %00000222

00000222:
00000225: R30 := 0x674
00000228: call @abort with return %000005df

000005df:
000005e0: call @call_weak_fn with noreturn

000005bf: sub abort()


00000226:
0000047c: R16 := 0x10000
00000483: R17 := mem[R16 + 0xFC8, el]:u64
00000489: R16 := R16 + 0xFC8
0000048e: call R17 with noreturn

000005c0: sub call_weak_fn(call_weak_fn_result)
000005f1: call_weak_fn_result :: out u32 = low:32[R0]

0000022a:
0000022d: R0 := 0x10000
00000234: R0 := mem[R0 + 0xFE8, el]:u64
0000023a: when R0 = 0 goto %00000238
000005e1: goto %00000398

00000238:
00000240: call R30 with noreturn

00000398:
0000039b: goto @__gmon_start__

00000399:
00000466: R16 := 0x10000
0000046d: R17 := mem[R16 + 0xFC0, el]:u64
00000473: R16 := R16 + 0xFC0
00000478: call R17 with noreturn

000005c2: sub deregister_tm_clones(deregister_tm_clones_result)
000005f2: deregister_tm_clones_result :: out u32 = low:32[R0]

00000246:
00000249: R0 := 0x11000
0000024f: R0 := R0 + 0x10
00000254: R1 := 0x11000
0000025a: R1 := R1 + 0x10
00000260: #1 := ~R0
00000265: #2 := R1 + ~R0
0000026b: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000271: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000275: ZF := #2 + 1 = 0
00000279: NF := 63:63[#2 + 1]
0000027f: when ZF goto %0000027d
000005e2: goto %0000037a

0000037a:
0000037d: R1 := 0x10000
00000384: R1 := mem[R1 + 0xFD8, el]:u64
00000389: when R1 = 0 goto %0000027d
000005e3: goto %0000038d

0000027d:
00000285: call R30 with noreturn

0000038d:
00000391: R16 := R1
00000396: call R16 with noreturn

000005c5: sub frame_dummy(frame_dummy_result)
000005f3: frame_dummy_result :: out u32 = low:32[R0]

0000031d:
0000031f: call @register_tm_clones with noreturn

000005c6: sub main(main_argc, main_argv, main_result)
000005f4: main_argc :: in u32 = low:32[R0]
000005f5: main_argv :: in out u64 = R1
000005f6: main_result :: out u32 = low:32[R0]

000001a8:
000001ab: R1 := 0x11000
000001b1: R2 := R1 + 0x14
000001b6: R0 := 0
000001bd: mem := mem with [R1 + 0x14, el]:u32 <- 0
000001c4: mem := mem with [R2 + 4, el]:u32 <- 0
000001c9: call R30 with noreturn

000005c7: sub register_tm_clones(register_tm_clones_result)
000005f7: register_tm_clones_result :: out u32 = low:32[R0]

00000287:
0000028a: R0 := 0x11000
00000290: R0 := R0 + 0x10
00000295: R1 := 0x11000
0000029b: R1 := R1 + 0x10
000002a2: R1 := R1 + ~R0 + 1
000002a8: R2 := 0.63:63[R1]
000002af: R1 := R2 + (R1 ~>> 3)
000002b5: R1 := extend:64[63:1[R1]]
000002bb: when R1 = 0 goto %000002b9
000005e4: goto %0000035c

0000035c:
0000035f: R2 := 0x10000
00000366: R2 := mem[R2 + 0xFF8, el]:u64
0000036b: when R2 = 0 goto %000002b9
000005e5: goto %0000036f

000002b9:
000002c1: call R30 with noreturn

0000036f:
00000373: R16 := R2
00000378: call R16 with noreturn
