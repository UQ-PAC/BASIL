000005e6: program
000005b4: sub __cxa_finalize(__cxa_finalize_result)
000005e7: __cxa_finalize_result :: out u32 = low:32[R0]

00000358:
00000450: R16 := 0x20000
00000457: R17 := mem[R16 + 8, el]:u64
0000045d: R16 := R16 + 8
00000462: call R17 with noreturn

000005b5: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005e8: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c6:
000002ca: #3 := R31 - 0x20
000002d0: mem := mem with [#3, el]:u64 <- R29
000002d6: mem := mem with [#3 + 8, el]:u64 <- R30
000002da: R31 := #3
000002e0: R29 := R31
000002e8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ed: R19 := 0x20000
000002f4: R0 := pad:64[mem[R19 + 0x30]]
000002fa: when 0:0[R0] goto %000002f8
000005dc: goto %00000321

00000321:
00000324: R0 := 0x1F000
0000032b: R0 := mem[R0 + 0xFC8, el]:u64
00000331: when R0 = 0 goto %0000032f
000005dd: goto %00000348

00000348:
0000034b: R0 := 0x20000
00000352: R0 := mem[R0 + 0x28, el]:u64
00000357: R30 := 0x730
0000035a: call @__cxa_finalize with return %0000032f

0000032f:
00000337: R30 := 0x734
00000339: call @deregister_tm_clones with return %0000033b

0000033b:
0000033e: R0 := 1
00000346: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005de: goto %000002f8

000002f8:
00000302: R19 := mem[R31 + 0x10, el]:u64
00000309: R29 := mem[R31, el]:u64
0000030e: R30 := mem[R31 + 8, el]:u64
00000312: R31 := R31 + 0x20
00000317: call R30 with noreturn

000005b9: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005e9: __libc_start_main_main :: in u64 = R0
000005ea: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005eb: __libc_start_main_arg3 :: in out u64 = R2
000005ec: __libc_start_main_auxv :: in out u64 = R3
000005ed: __libc_start_main_result :: out u32 = low:32[R0]

0000021f:
0000043a: R16 := 0x20000
00000441: R17 := mem[R16, el]:u64
00000447: R16 := R16
0000044c: call R17 with noreturn

000005ba: sub _fini(_fini_result)
000005ee: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005bb: sub _init(_init_result)
000005ef: _init_result :: out u32 = low:32[R0]

00000506:
0000050c: #5 := R31 - 0x10
00000512: mem := mem with [#5, el]:u64 <- R29
00000518: mem := mem with [#5 + 8, el]:u64 <- R30
0000051c: R31 := #5
00000522: R29 := R31
00000527: R30 := 0x590
00000529: call @call_weak_fn with return %0000052b

0000052b:
00000530: R29 := mem[R31, el]:u64
00000535: R30 := mem[R31 + 8, el]:u64
00000539: R31 := R31 + 0x10
0000053e: call R30 with noreturn

000005bc: sub _start(_start_result)
000005f0: _start_result :: out u32 = low:32[R0]

000001e0:
000001e5: R29 := 0
000001ea: R30 := 0
000001f0: R5 := R0
000001f7: R1 := mem[R31, el]:u64
000001fd: R2 := R31 + 8
00000203: R6 := R31
00000208: R0 := 0x1F000
0000020f: R0 := mem[R0 + 0xFD8, el]:u64
00000214: R3 := 0
00000219: R4 := 0
0000021e: R30 := 0x670
00000221: call @__libc_start_main with return %00000223

00000223:
00000226: R30 := 0x674
00000229: call @abort with return %000005df

000005df:
000005e0: call @call_weak_fn with noreturn

000005bf: sub abort()


00000227:
0000047c: R16 := 0x20000
00000483: R17 := mem[R16 + 0x18, el]:u64
00000489: R16 := R16 + 0x18
0000048e: call R17 with noreturn

000005c0: sub call_weak_fn(call_weak_fn_result)
000005f1: call_weak_fn_result :: out u32 = low:32[R0]

0000022b:
0000022e: R0 := 0x1F000
00000235: R0 := mem[R0 + 0xFD0, el]:u64
0000023b: when R0 = 0 goto %00000239
000005e1: goto %00000398

00000239:
00000241: call R30 with noreturn

00000398:
0000039b: goto @__gmon_start__

00000399:
00000466: R16 := 0x20000
0000046d: R17 := mem[R16 + 0x10, el]:u64
00000473: R16 := R16 + 0x10
00000478: call R17 with noreturn

000005c2: sub deregister_tm_clones(deregister_tm_clones_result)
000005f2: deregister_tm_clones_result :: out u32 = low:32[R0]

00000247:
0000024a: R0 := 0x20000
00000250: R0 := R0 + 0x30
00000255: R1 := 0x20000
0000025b: R1 := R1 + 0x30
00000261: #1 := ~R0
00000266: #2 := R1 + ~R0
0000026c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000272: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000276: ZF := #2 + 1 = 0
0000027a: NF := 63:63[#2 + 1]
00000280: when ZF goto %0000027e
000005e2: goto %0000037a

0000037a:
0000037d: R1 := 0x1F000
00000384: R1 := mem[R1 + 0xFC0, el]:u64
00000389: when R1 = 0 goto %0000027e
000005e3: goto %0000038d

0000027e:
00000286: call R30 with noreturn

0000038d:
00000391: R16 := R1
00000396: call R16 with noreturn

000005c5: sub frame_dummy(frame_dummy_result)
000005f3: frame_dummy_result :: out u32 = low:32[R0]

0000031d:
0000031f: call @register_tm_clones with noreturn

000005c6: sub main(main_argc, main_argv, main_result)
000005f4: main_argc :: in u32 = low:32[R0]
000005f5: main_argv :: in out u64 = R1
000005f6: main_result :: out u32 = low:32[R0]

000001a9:
000001ac: R1 := 0x20000
000001b2: R2 := R1 + 0x34
000001b7: R0 := 0
000001be: mem := mem with [R1 + 0x34, el]:u32 <- 0
000001c5: mem := mem with [R2 + 4, el]:u32 <- 0
000001ca: call R30 with noreturn

000005c7: sub register_tm_clones(register_tm_clones_result)
000005f7: register_tm_clones_result :: out u32 = low:32[R0]

00000288:
0000028b: R0 := 0x20000
00000291: R0 := R0 + 0x30
00000296: R1 := 0x20000
0000029c: R1 := R1 + 0x30
000002a3: R1 := R1 + ~R0 + 1
000002a9: R2 := 0.63:63[R1]
000002b0: R1 := R2 + (R1 ~>> 3)
000002b6: R1 := extend:64[63:1[R1]]
000002bc: when R1 = 0 goto %000002ba
000005e4: goto %0000035c

0000035c:
0000035f: R2 := 0x1F000
00000366: R2 := mem[R2 + 0xFE0, el]:u64
0000036b: when R2 = 0 goto %000002ba
000005e5: goto %0000036f

000002ba:
000002c2: call R30 with noreturn

0000036f:
00000373: R16 := R2
00000378: call R16 with noreturn
