00000635: program
00000603: sub __cxa_finalize(__cxa_finalize_result)
00000636: __cxa_finalize_result :: out u32 = low:32[R0]

000003a1:
00000499: R16 := 0x20000
000004a0: R17 := mem[R16 + 8, el]:u64
000004a6: R16 := R16 + 8
000004ab: call R17 with noreturn

00000604: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000637: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029b:
0000029f: #3 := R31 - 0x20
000002a5: mem := mem with [#3, el]:u64 <- R29
000002ab: mem := mem with [#3 + 8, el]:u64 <- R30
000002af: R31 := #3
000002b5: R29 := R31
000002bd: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c2: R19 := 0x20000
000002c9: R0 := pad:64[mem[R19 + 0x30]]
000002cf: when 0:0[R0] goto %000002cd
0000062b: goto %0000036a

0000036a:
0000036d: R0 := 0x1F000
00000374: R0 := mem[R0 + 0xFC8, el]:u64
0000037a: when R0 = 0 goto %00000378
0000062c: goto %00000391

00000391:
00000394: R0 := 0x20000
0000039b: R0 := mem[R0 + 0x28, el]:u64
000003a0: R30 := 0x6F0
000003a3: call @__cxa_finalize with return %00000378

00000378:
00000380: R30 := 0x6F4
00000382: call @deregister_tm_clones with return %00000384

00000384:
00000387: R0 := 1
0000038f: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000062d: goto %000002cd

000002cd:
000002d7: R19 := mem[R31 + 0x10, el]:u64
000002de: R29 := mem[R31, el]:u64
000002e3: R30 := mem[R31 + 8, el]:u64
000002e7: R31 := R31 + 0x20
000002ec: call R30 with noreturn

00000608: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000638: __libc_start_main_main :: in u64 = R0
00000639: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000063a: __libc_start_main_arg3 :: in out u64 = R2
0000063b: __libc_start_main_auxv :: in out u64 = R3
0000063c: __libc_start_main_result :: out u32 = low:32[R0]

000001f4:
00000483: R16 := 0x20000
0000048a: R17 := mem[R16, el]:u64
00000490: R16 := R16
00000495: call R17 with noreturn

00000609: sub _fini(_fini_result)
0000063d: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000060a: sub _init(_init_result)
0000063e: _init_result :: out u32 = low:32[R0]

00000552:
00000558: #5 := R31 - 0x10
0000055e: mem := mem with [#5, el]:u64 <- R29
00000564: mem := mem with [#5 + 8, el]:u64 <- R30
00000568: R31 := #5
0000056e: R29 := R31
00000573: R30 := 0x590
00000575: call @call_weak_fn with return %00000577

00000577:
0000057c: R29 := mem[R31, el]:u64
00000581: R30 := mem[R31 + 8, el]:u64
00000585: R31 := R31 + 0x10
0000058a: call R30 with noreturn

0000060b: sub _start(_start_result)
0000063f: _start_result :: out u32 = low:32[R0]

000001b5:
000001ba: R29 := 0
000001bf: R30 := 0
000001c5: R5 := R0
000001cc: R1 := mem[R31, el]:u64
000001d2: R2 := R31 + 8
000001d8: R6 := R31
000001dd: R0 := 0x1F000
000001e4: R0 := mem[R0 + 0xFD8, el]:u64
000001e9: R3 := 0
000001ee: R4 := 0
000001f3: R30 := 0x630
000001f6: call @__libc_start_main with return %000001f8

000001f8:
000001fb: R30 := 0x634
000001fe: call @abort with return %0000062e

0000062e:
0000062f: call @call_weak_fn with noreturn

0000060e: sub abort()


000001fc:
000004c5: R16 := 0x20000
000004cc: R17 := mem[R16 + 0x18, el]:u64
000004d2: R16 := R16 + 0x18
000004d7: call R17 with noreturn

0000060f: sub call_weak_fn(call_weak_fn_result)
00000640: call_weak_fn_result :: out u32 = low:32[R0]

00000200:
00000203: R0 := 0x1F000
0000020a: R0 := mem[R0 + 0xFD0, el]:u64
00000210: when R0 = 0 goto %0000020e
00000630: goto %000003e1

0000020e:
00000216: call R30 with noreturn

000003e1:
000003e4: goto @__gmon_start__

000003e2:
000004af: R16 := 0x20000
000004b6: R17 := mem[R16 + 0x10, el]:u64
000004bc: R16 := R16 + 0x10
000004c1: call R17 with noreturn

00000611: sub deregister_tm_clones(deregister_tm_clones_result)
00000641: deregister_tm_clones_result :: out u32 = low:32[R0]

0000021c:
0000021f: R0 := 0x20000
00000225: R0 := R0 + 0x30
0000022a: R1 := 0x20000
00000230: R1 := R1 + 0x30
00000236: #1 := ~R0
0000023b: #2 := R1 + ~R0
00000241: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000247: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024b: ZF := #2 + 1 = 0
0000024f: NF := 63:63[#2 + 1]
00000255: when ZF goto %00000253
00000631: goto %000003c3

000003c3:
000003c6: R1 := 0x1F000
000003cd: R1 := mem[R1 + 0xFC0, el]:u64
000003d2: when R1 = 0 goto %00000253
00000632: goto %000003d6

00000253:
0000025b: call R30 with noreturn

000003d6:
000003da: R16 := R1
000003df: call R16 with noreturn

00000614: sub frame_dummy(frame_dummy_result)
00000642: frame_dummy_result :: out u32 = low:32[R0]

000002f2:
000002f4: call @register_tm_clones with noreturn

00000615: sub main(main_argc, main_argv, main_result)
00000643: main_argc :: in u32 = low:32[R0]
00000644: main_argv :: in out u64 = R1
00000645: main_result :: out u32 = low:32[R0]

000002f6:
000002fa: R31 := R31 - 0x10
00000302: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000307: R0 := 0x20000
0000030d: R0 := R0 + 0x38
00000312: R1 := 1
0000031a: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000031f: R0 := 0x20000
00000325: R0 := R0 + 0x34
0000032c: R1 := pad:64[mem[R31 + 0xC, el]:u32]
00000334: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000339: R0 := 0x20000
0000033f: R0 := R0 + 0x34
00000346: mem := mem with [R0, el]:u32 <- 0
0000034b: R0 := 0x20000
00000351: R0 := R0 + 0x38
00000358: mem := mem with [R0, el]:u32 <- 0
0000035d: R0 := 0
00000363: R31 := R31 + 0x10
00000368: call R30 with noreturn

00000616: sub register_tm_clones(register_tm_clones_result)
00000646: register_tm_clones_result :: out u32 = low:32[R0]

0000025d:
00000260: R0 := 0x20000
00000266: R0 := R0 + 0x30
0000026b: R1 := 0x20000
00000271: R1 := R1 + 0x30
00000278: R1 := R1 + ~R0 + 1
0000027e: R2 := 0.63:63[R1]
00000285: R1 := R2 + (R1 ~>> 3)
0000028b: R1 := extend:64[63:1[R1]]
00000291: when R1 = 0 goto %0000028f
00000633: goto %000003a5

000003a5:
000003a8: R2 := 0x1F000
000003af: R2 := mem[R2 + 0xFE0, el]:u64
000003b4: when R2 = 0 goto %0000028f
00000634: goto %000003b8

0000028f:
00000297: call R30 with noreturn

000003b8:
000003bc: R16 := R2
000003c1: call R16 with noreturn
