00000635: program
00000603: sub __cxa_finalize(__cxa_finalize_result)
00000636: __cxa_finalize_result :: out u32 = low:32[R0]

000003a1:
00000499: R16 := 0x10000
000004a0: R17 := mem[R16 + 0xFB8, el]:u64
000004a6: R16 := R16 + 0xFB8
000004ab: call R17 with noreturn

00000604: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000637: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029a:
0000029e: #3 := R31 - 0x20
000002a4: mem := mem with [#3, el]:u64 <- R29
000002aa: mem := mem with [#3 + 8, el]:u64 <- R30
000002ae: R31 := #3
000002b4: R29 := R31
000002bc: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c1: R19 := 0x11000
000002c8: R0 := pad:64[mem[R19 + 0x10]]
000002cf: when 31:0[R0] <> 0 goto %000002cd
0000062b: goto %0000036a

0000036a:
0000036d: R0 := 0x10000
00000374: R0 := mem[R0 + 0xFE0, el]:u64
0000037a: when R0 = 0 goto %00000378
0000062c: goto %00000391

00000391:
00000394: R0 := 0x11000
0000039b: R0 := mem[R0 + 8, el]:u64
000003a0: R30 := 0x6F0
000003a3: call @__cxa_finalize with return %00000378

00000378:
00000380: R30 := 0x6F4
00000382: call @deregister_tm_clones with return %00000384

00000384:
00000387: R0 := 1
0000038f: mem := mem with [R19 + 0x10] <- 7:0[R0]
0000062d: goto %000002cd

000002cd:
000002d7: R19 := mem[R31 + 0x10, el]:u64
000002de: R29 := mem[R31, el]:u64
000002e3: R30 := mem[R31 + 8, el]:u64
000002e7: R31 := R31 + 0x20
000002ec: call R30 with noreturn

00000608: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000638: __libc_start_main_main :: in u64 = R0
00000639: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000063a: __libc_start_main_arg3 :: in out u64 = R2
0000063b: __libc_start_main_auxv :: in out u64 = R3
0000063c: __libc_start_main_result :: out u32 = low:32[R0]

000001f3:
00000483: R16 := 0x10000
0000048a: R17 := mem[R16 + 0xFB0, el]:u64
00000490: R16 := R16 + 0xFB0
00000495: call R17 with noreturn

00000609: sub _fini(_fini_result)
0000063d: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000060a: sub _init(_init_result)
0000063e: _init_result :: out u32 = low:32[R0]

00000552:
00000558: #5 := R31 - 0x10
0000055e: mem := mem with [#5, el]:u64 <- R29
00000564: mem := mem with [#5 + 8, el]:u64 <- R30
00000568: R31 := #5
0000056e: R29 := R31
00000573: R30 := 0x590
00000575: call @call_weak_fn with return %00000577

00000577:
0000057c: R29 := mem[R31, el]:u64
00000581: R30 := mem[R31 + 8, el]:u64
00000585: R31 := R31 + 0x10
0000058a: call R30 with noreturn

0000060b: sub _start(_start_result)
0000063f: _start_result :: out u32 = low:32[R0]

000001b4:
000001b9: R29 := 0
000001be: R30 := 0
000001c4: R5 := R0
000001cb: R1 := mem[R31, el]:u64
000001d1: R2 := R31 + 8
000001d7: R6 := R31
000001dc: R0 := 0x10000
000001e3: R0 := mem[R0 + 0xFF0, el]:u64
000001e8: R3 := 0
000001ed: R4 := 0
000001f2: R30 := 0x630
000001f5: call @__libc_start_main with return %000001f7

000001f7:
000001fa: R30 := 0x634
000001fd: call @abort with return %0000062e

0000062e:
0000062f: call @call_weak_fn with noreturn

0000060e: sub abort()


000001fb:
000004c5: R16 := 0x10000
000004cc: R17 := mem[R16 + 0xFC8, el]:u64
000004d2: R16 := R16 + 0xFC8
000004d7: call R17 with noreturn

0000060f: sub call_weak_fn(call_weak_fn_result)
00000640: call_weak_fn_result :: out u32 = low:32[R0]

000001ff:
00000202: R0 := 0x10000
00000209: R0 := mem[R0 + 0xFE8, el]:u64
0000020f: when R0 = 0 goto %0000020d
00000630: goto %000003e1

0000020d:
00000215: call R30 with noreturn

000003e1:
000003e4: goto @__gmon_start__

000003e2:
000004af: R16 := 0x10000
000004b6: R17 := mem[R16 + 0xFC0, el]:u64
000004bc: R16 := R16 + 0xFC0
000004c1: call R17 with noreturn

00000611: sub deregister_tm_clones(deregister_tm_clones_result)
00000641: deregister_tm_clones_result :: out u32 = low:32[R0]

0000021b:
0000021e: R0 := 0x11000
00000224: R0 := R0 + 0x10
00000229: R1 := 0x11000
0000022f: R1 := R1 + 0x10
00000235: #1 := ~R0
0000023a: #2 := R1 + ~R0
00000240: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000246: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024a: ZF := #2 + 1 = 0
0000024e: NF := 63:63[#2 + 1]
00000254: when ZF goto %00000252
00000631: goto %000003c3

000003c3:
000003c6: R1 := 0x10000
000003cd: R1 := mem[R1 + 0xFD8, el]:u64
000003d2: when R1 = 0 goto %00000252
00000632: goto %000003d6

00000252:
0000025a: call R30 with noreturn

000003d6:
000003da: R16 := R1
000003df: call R16 with noreturn

00000614: sub frame_dummy(frame_dummy_result)
00000642: frame_dummy_result :: out u32 = low:32[R0]

000002f2:
000002f4: call @register_tm_clones with noreturn

00000615: sub main(main_argc, main_argv, main_result)
00000643: main_argc :: in u32 = low:32[R0]
00000644: main_argv :: in out u64 = R1
00000645: main_result :: out u32 = low:32[R0]

000002f6:
000002fa: R31 := R31 - 0x10
00000302: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000307: R0 := 0x11000
0000030d: R0 := R0 + 0x18
00000312: R1 := 1
0000031a: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000031f: R0 := 0x11000
00000325: R0 := R0 + 0x14
0000032c: R1 := pad:64[mem[R31 + 0xC, el]:u32]
00000334: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000339: R0 := 0x11000
0000033f: R0 := R0 + 0x14
00000346: mem := mem with [R0, el]:u32 <- 0
0000034b: R0 := 0x11000
00000351: R0 := R0 + 0x18
00000358: mem := mem with [R0, el]:u32 <- 0
0000035d: R0 := 0
00000363: R31 := R31 + 0x10
00000368: call R30 with noreturn

00000616: sub register_tm_clones(register_tm_clones_result)
00000646: register_tm_clones_result :: out u32 = low:32[R0]

0000025c:
0000025f: R0 := 0x11000
00000265: R0 := R0 + 0x10
0000026a: R1 := 0x11000
00000270: R1 := R1 + 0x10
00000277: R1 := R1 + ~R0 + 1
0000027d: R2 := 0.63:63[R1]
00000284: R1 := R2 + (R1 ~>> 3)
0000028a: R1 := extend:64[63:1[R1]]
00000290: when R1 = 0 goto %0000028e
00000633: goto %000003a5

000003a5:
000003a8: R2 := 0x10000
000003af: R2 := mem[R2 + 0xFF8, el]:u64
000003b4: when R2 = 0 goto %0000028e
00000634: goto %000003b8

0000028e:
00000296: call R30 with noreturn

000003b8:
000003bc: R16 := R2
000003c1: call R16 with noreturn
