00000c3c: program
00000c26: sub __cxa_finalize(__cxa_finalize_result)
00000c3d: __cxa_finalize_result :: out u32 = low:32[R0]

000009c4:
00000abc: R16 := 0x10000
00000ac3: R17 := mem[R16 + 0xFB8, el]:u64
00000ac9: R16 := R16 + 0xFB8
00000ace: call R17 with noreturn

00000c27: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c3e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008bd:
000008c1: #3 := R31 - 0x20
000008c7: mem := mem with [#3, el]:u64 <- R29
000008cd: mem := mem with [#3 + 8, el]:u64 <- R30
000008d1: R31 := #3
000008d7: R29 := R31
000008df: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008e4: R19 := 0x11000
000008eb: R0 := pad:64[mem[R19 + 0x10]]
000008f2: when 31:0[R0] <> 0 goto %000008f0
00000c28: goto %0000098d

0000098d:
00000990: R0 := 0x10000
00000997: R0 := mem[R0 + 0xFE0, el]:u64
0000099d: when R0 = 0 goto %0000099b
00000c29: goto %000009b4

000009b4:
000009b7: R0 := 0x11000
000009be: R0 := mem[R0 + 8, el]:u64
000009c3: R30 := 0x6F0
000009c6: call @__cxa_finalize with return %0000099b

0000099b:
000009a3: R30 := 0x6F4
000009a5: call @deregister_tm_clones with return %000009a7

000009a7:
000009aa: R0 := 1
000009b2: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000c2a: goto %000008f0

000008f0:
000008fa: R19 := mem[R31 + 0x10, el]:u64
00000901: R29 := mem[R31, el]:u64
00000906: R30 := mem[R31 + 8, el]:u64
0000090a: R31 := R31 + 0x20
0000090f: call R30 with noreturn

00000c2b: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c3f: __libc_start_main_main :: in u64 = R0
00000c40: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c41: __libc_start_main_arg3 :: in out u64 = R2
00000c42: __libc_start_main_auxv :: in out u64 = R3
00000c43: __libc_start_main_result :: out u32 = low:32[R0]

00000816:
00000aa6: R16 := 0x10000
00000aad: R17 := mem[R16 + 0xFB0, el]:u64
00000ab3: R16 := R16 + 0xFB0
00000ab8: call R17 with noreturn

00000c2c: sub _fini(_fini_result)
00000c44: _fini_result :: out u32 = low:32[R0]

00000642:
00000648: #0 := R31 - 0x10
0000064e: mem := mem with [#0, el]:u64 <- R29
00000654: mem := mem with [#0 + 8, el]:u64 <- R30
00000658: R31 := #0
0000065e: R29 := R31
00000665: R29 := mem[R31, el]:u64
0000066a: R30 := mem[R31 + 8, el]:u64
0000066e: R31 := R31 + 0x10
00000673: call R30 with noreturn

00000c2d: sub _init(_init_result)
00000c45: _init_result :: out u32 = low:32[R0]

00000b75:
00000b7b: #5 := R31 - 0x10
00000b81: mem := mem with [#5, el]:u64 <- R29
00000b87: mem := mem with [#5 + 8, el]:u64 <- R30
00000b8b: R31 := #5
00000b91: R29 := R31
00000b96: R30 := 0x590
00000b98: call @call_weak_fn with return %00000b9a

00000b9a:
00000b9f: R29 := mem[R31, el]:u64
00000ba4: R30 := mem[R31 + 8, el]:u64
00000ba8: R31 := R31 + 0x10
00000bad: call R30 with noreturn

00000c2e: sub _start(_start_result)
00000c46: _start_result :: out u32 = low:32[R0]

000007d7:
000007dc: R29 := 0
000007e1: R30 := 0
000007e7: R5 := R0
000007ee: R1 := mem[R31, el]:u64
000007f4: R2 := R31 + 8
000007fa: R6 := R31
000007ff: R0 := 0x10000
00000806: R0 := mem[R0 + 0xFF0, el]:u64
0000080b: R3 := 0
00000810: R4 := 0
00000815: R30 := 0x630
00000818: call @__libc_start_main with return %0000081a

0000081a:
0000081d: R30 := 0x634
00000820: call @abort with return %00000c2f

00000c2f:
00000c30: call @call_weak_fn with noreturn

00000c31: sub abort()


0000081e:
00000ae8: R16 := 0x10000
00000aef: R17 := mem[R16 + 0xFC8, el]:u64
00000af5: R16 := R16 + 0xFC8
00000afa: call R17 with noreturn

00000c32: sub call_weak_fn(call_weak_fn_result)
00000c47: call_weak_fn_result :: out u32 = low:32[R0]

00000822:
00000825: R0 := 0x10000
0000082c: R0 := mem[R0 + 0xFE8, el]:u64
00000832: when R0 = 0 goto %00000830
00000c33: goto %00000a04

00000830:
00000838: call R30 with noreturn

00000a04:
00000a07: goto @__gmon_start__

00000a05:
00000ad2: R16 := 0x10000
00000ad9: R17 := mem[R16 + 0xFC0, el]:u64
00000adf: R16 := R16 + 0xFC0
00000ae4: call R17 with noreturn

00000c34: sub deregister_tm_clones(deregister_tm_clones_result)
00000c48: deregister_tm_clones_result :: out u32 = low:32[R0]

0000083e:
00000841: R0 := 0x11000
00000847: R0 := R0 + 0x10
0000084c: R1 := 0x11000
00000852: R1 := R1 + 0x10
00000858: #1 := ~R0
0000085d: #2 := R1 + ~R0
00000863: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000869: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000086d: ZF := #2 + 1 = 0
00000871: NF := 63:63[#2 + 1]
00000877: when ZF goto %00000875
00000c35: goto %000009e6

000009e6:
000009e9: R1 := 0x10000
000009f0: R1 := mem[R1 + 0xFD8, el]:u64
000009f5: when R1 = 0 goto %00000875
00000c36: goto %000009f9

00000875:
0000087d: call R30 with noreturn

000009f9:
000009fd: R16 := R1
00000a02: call R16 with noreturn

00000c37: sub frame_dummy(frame_dummy_result)
00000c49: frame_dummy_result :: out u32 = low:32[R0]

00000915:
00000917: call @register_tm_clones with noreturn

00000c38: sub main(main_argc, main_argv, main_result)
00000c4a: main_argc :: in u32 = low:32[R0]
00000c4b: main_argv :: in out u64 = R1
00000c4c: main_result :: out u32 = low:32[R0]

00000919:
0000091d: R31 := R31 - 0x10
00000925: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000092a: R0 := 0x11000
00000930: R0 := R0 + 0x18
00000935: R1 := 1
0000093d: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000942: R0 := 0x11000
00000948: R0 := R0 + 0x14
0000094f: R1 := pad:64[mem[R31 + 0xC, el]:u32]
00000957: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000095c: R0 := 0x11000
00000962: R0 := R0 + 0x14
00000969: mem := mem with [R0, el]:u32 <- 0
0000096e: R0 := 0x11000
00000974: R0 := R0 + 0x18
0000097b: mem := mem with [R0, el]:u32 <- 0
00000980: R0 := 0
00000986: R31 := R31 + 0x10
0000098b: call R30 with noreturn

00000c39: sub register_tm_clones(register_tm_clones_result)
00000c4d: register_tm_clones_result :: out u32 = low:32[R0]

0000087f:
00000882: R0 := 0x11000
00000888: R0 := R0 + 0x10
0000088d: R1 := 0x11000
00000893: R1 := R1 + 0x10
0000089a: R1 := R1 + ~R0 + 1
000008a0: R2 := 0.63:63[R1]
000008a7: R1 := R2 + (R1 ~>> 3)
000008ad: R1 := extend:64[63:1[R1]]
000008b3: when R1 = 0 goto %000008b1
00000c3a: goto %000009c8

000009c8:
000009cb: R2 := 0x10000
000009d2: R2 := mem[R2 + 0xFF8, el]:u64
000009d7: when R2 = 0 goto %000008b1
00000c3b: goto %000009db

000008b1:
000008b9: call R30 with noreturn

000009db:
000009df: R16 := R2
000009e4: call R16 with noreturn
