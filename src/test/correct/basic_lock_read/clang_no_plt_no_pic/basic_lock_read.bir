000005e1: program
000005ad: sub __cxa_finalize(__cxa_finalize_result)
000005e2: __cxa_finalize_result :: out u32 = low:32[R0]

000003ac:
000004a4: R16 := 0x20000
000004ab: R17 := mem[R16 + 8, el]:u64
000004b1: R16 := R16 + 8
000004b6: call R17 with noreturn

000005ae: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005e3: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000293:
00000297: #3 := R31 - 0x20
0000029d: mem := mem with [#3, el]:u64 <- R29
000002a3: mem := mem with [#3 + 8, el]:u64 <- R30
000002a7: R31 := #3
000002ad: R29 := R31
000002b5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ba: R19 := 0x20000
000002c1: R0 := pad:64[mem[R19 + 0x30]]
000002c7: when 0:0[R0] goto %000002c5
000005d6: goto %00000375

00000375:
00000378: R0 := 0x1F000
0000037f: R0 := mem[R0 + 0xFC8, el]:u64
00000385: when R0 = 0 goto %00000383
000005d7: goto %0000039c

0000039c:
0000039f: R0 := 0x20000
000003a6: R0 := mem[R0 + 0x28, el]:u64
000003ab: R30 := 0x730
000003ae: call @__cxa_finalize with return %00000383

00000383:
0000038b: R30 := 0x734
0000038d: call @deregister_tm_clones with return %0000038f

0000038f:
00000392: R0 := 1
0000039a: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005d8: goto %000002c5

000002c5:
000002cf: R19 := mem[R31 + 0x10, el]:u64
000002d6: R29 := mem[R31, el]:u64
000002db: R30 := mem[R31 + 8, el]:u64
000002df: R31 := R31 + 0x20
000002e4: call R30 with noreturn

000005b2: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005e4: __libc_start_main_main :: in u64 = R0
000005e5: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005e6: __libc_start_main_arg3 :: in out u64 = R2
000005e7: __libc_start_main_auxv :: in out u64 = R3
000005e8: __libc_start_main_result :: out u32 = low:32[R0]

000001ec:
0000048e: R16 := 0x20000
00000495: R17 := mem[R16, el]:u64
0000049b: R16 := R16
000004a0: call R17 with noreturn

000005b3: sub _fini(_fini_result)
000005e9: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005b4: sub _init(_init_result)
000005ea: _init_result :: out u32 = low:32[R0]

000004fe:
00000504: #6 := R31 - 0x10
0000050a: mem := mem with [#6, el]:u64 <- R29
00000510: mem := mem with [#6 + 8, el]:u64 <- R30
00000514: R31 := #6
0000051a: R29 := R31
0000051f: R30 := 0x5C8
00000521: call @call_weak_fn with return %00000523

00000523:
00000528: R29 := mem[R31, el]:u64
0000052d: R30 := mem[R31 + 8, el]:u64
00000531: R31 := R31 + 0x10
00000536: call R30 with noreturn

000005b5: sub _start(_start_result)
000005eb: _start_result :: out u32 = low:32[R0]

000001ad:
000001b2: R29 := 0
000001b7: R30 := 0
000001bd: R5 := R0
000001c4: R1 := mem[R31, el]:u64
000001ca: R2 := R31 + 8
000001d0: R6 := R31
000001d5: R0 := 0x1F000
000001dc: R0 := mem[R0 + 0xFD8, el]:u64
000001e1: R3 := 0
000001e6: R4 := 0
000001eb: R30 := 0x670
000001ee: call @__libc_start_main with return %000001f0

000001f0:
000001f3: R30 := 0x674
000001f6: call @abort with return %000005d9

000005d9:
000005da: call @call_weak_fn with noreturn

000005b8: sub abort()


000001f4:
000004d0: R16 := 0x20000
000004d7: R17 := mem[R16 + 0x18, el]:u64
000004dd: R16 := R16 + 0x18
000004e2: call R17 with noreturn

000005b9: sub call_weak_fn(call_weak_fn_result)
000005ec: call_weak_fn_result :: out u32 = low:32[R0]

000001f8:
000001fb: R0 := 0x1F000
00000202: R0 := mem[R0 + 0xFD0, el]:u64
00000208: when R0 = 0 goto %00000206
000005db: goto %000003ec

00000206:
0000020e: call R30 with noreturn

000003ec:
000003ef: goto @__gmon_start__

000003ed:
000004ba: R16 := 0x20000
000004c1: R17 := mem[R16 + 0x10, el]:u64
000004c7: R16 := R16 + 0x10
000004cc: call R17 with noreturn

000005bb: sub deregister_tm_clones(deregister_tm_clones_result)
000005ed: deregister_tm_clones_result :: out u32 = low:32[R0]

00000214:
00000217: R0 := 0x20000
0000021d: R0 := R0 + 0x30
00000222: R1 := 0x20000
00000228: R1 := R1 + 0x30
0000022e: #1 := ~R0
00000233: #2 := R1 + ~R0
00000239: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000243: ZF := #2 + 1 = 0
00000247: NF := 63:63[#2 + 1]
0000024d: when ZF goto %0000024b
000005dc: goto %000003ce

000003ce:
000003d1: R1 := 0x1F000
000003d8: R1 := mem[R1 + 0xFC0, el]:u64
000003dd: when R1 = 0 goto %0000024b
000005dd: goto %000003e1

0000024b:
00000253: call R30 with noreturn

000003e1:
000003e5: R16 := R1
000003ea: call R16 with noreturn

000005be: sub frame_dummy(frame_dummy_result)
000005ee: frame_dummy_result :: out u32 = low:32[R0]

000002ea:
000002ec: call @register_tm_clones with noreturn

000005bf: sub main(main_argc, main_argv, main_result)
000005ef: main_argc :: in u32 = low:32[R0]
000005f0: main_argv :: in out u64 = R1
000005f1: main_result :: out u32 = low:32[R0]

000002ee:
000002f2: R31 := R31 - 0x10
000002f9: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000300: mem := mem with [R31 + 8, el]:u32 <- 0
00000305: R8 := 0x20000
0000030c: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000312: #4 := 31:0[R8] - 1
00000317: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
0000031c: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000320: ZF := #4 + 1 = 0
00000324: NF := 31:31[#4 + 1]
00000328: R8 := pad:64[#4 + 1]
00000334: when ZF goto %0000032d
00000335: goto %00000330

00000330:
00000331: R8 := 1
00000337: goto %00000333

0000032d:
0000032e: R8 := 0
00000336: goto %00000333

00000333:
0000033d: when 0:0[R8] goto %0000033b
000005de: goto %00000352

00000352:
00000355: goto %00000353

00000353:
00000359: R8 := 0x20000
00000360: mem := mem with [R8 + 0x38, el]:u32 <- 0
00000367: R8 := pad:64[mem[R8 + 0x38, el]:u32]
0000036f: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000373: goto %0000033b

0000033b:
00000345: R0 := pad:64[mem[R31 + 8, el]:u32]
0000034b: R31 := R31 + 0x10
00000350: call R30 with noreturn

000005c1: sub register_tm_clones(register_tm_clones_result)
000005f2: register_tm_clones_result :: out u32 = low:32[R0]

00000255:
00000258: R0 := 0x20000
0000025e: R0 := R0 + 0x30
00000263: R1 := 0x20000
00000269: R1 := R1 + 0x30
00000270: R1 := R1 + ~R0 + 1
00000276: R2 := 0.63:63[R1]
0000027d: R1 := R2 + (R1 ~>> 3)
00000283: R1 := extend:64[63:1[R1]]
00000289: when R1 = 0 goto %00000287
000005df: goto %000003b0

000003b0:
000003b3: R2 := 0x1F000
000003ba: R2 := mem[R2 + 0xFE0, el]:u64
000003bf: when R2 = 0 goto %00000287
000005e0: goto %000003c3

00000287:
0000028f: call R30 with noreturn

000003c3:
000003c7: R16 := R2
000003cc: call R16 with noreturn
