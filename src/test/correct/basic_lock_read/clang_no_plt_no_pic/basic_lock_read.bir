00000c4c: program
00000c35: sub __cxa_finalize(__cxa_finalize_result)
00000c4d: __cxa_finalize_result :: out u32 = low:32[R0]

000009d7:
00000acf: R16 := 0x11000
00000ad6: R17 := mem[R16 + 8, el]:u64
00000adc: R16 := R16 + 8
00000ae1: call R17 with noreturn

00000c36: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c4e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008bd:
000008c1: #3 := R31 - 0x20
000008c7: mem := mem with [#3, el]:u64 <- R29
000008cd: mem := mem with [#3 + 8, el]:u64 <- R30
000008d1: R31 := #3
000008d7: R29 := R31
000008df: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008e4: R19 := 0x11000
000008eb: R0 := pad:64[mem[R19 + 0x30]]
000008f2: when 31:0[R0] <> 0 goto %000008f0
00000c37: goto %000009a0

000009a0:
000009a3: R0 := 0x10000
000009aa: R0 := mem[R0 + 0xFC8, el]:u64
000009b0: when R0 = 0 goto %000009ae
00000c38: goto %000009c7

000009c7:
000009ca: R0 := 0x11000
000009d1: R0 := mem[R0 + 0x28, el]:u64
000009d6: R30 := 0x6F0
000009d9: call @__cxa_finalize with return %000009ae

000009ae:
000009b6: R30 := 0x6F4
000009b8: call @deregister_tm_clones with return %000009ba

000009ba:
000009bd: R0 := 1
000009c5: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000c39: goto %000008f0

000008f0:
000008fa: R19 := mem[R31 + 0x10, el]:u64
00000901: R29 := mem[R31, el]:u64
00000906: R30 := mem[R31 + 8, el]:u64
0000090a: R31 := R31 + 0x20
0000090f: call R30 with noreturn

00000c3a: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c4f: __libc_start_main_main :: in u64 = R0
00000c50: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c51: __libc_start_main_arg3 :: in out u64 = R2
00000c52: __libc_start_main_auxv :: in out u64 = R3
00000c53: __libc_start_main_result :: out u32 = low:32[R0]

00000816:
00000ab9: R16 := 0x11000
00000ac0: R17 := mem[R16, el]:u64
00000ac6: R16 := R16
00000acb: call R17 with noreturn

00000c3b: sub _fini(_fini_result)
00000c54: _fini_result :: out u32 = low:32[R0]

0000064a:
00000650: #0 := R31 - 0x10
00000656: mem := mem with [#0, el]:u64 <- R29
0000065c: mem := mem with [#0 + 8, el]:u64 <- R30
00000660: R31 := #0
00000666: R29 := R31
0000066d: R29 := mem[R31, el]:u64
00000672: R30 := mem[R31 + 8, el]:u64
00000676: R31 := R31 + 0x10
0000067b: call R30 with noreturn

00000c3c: sub _init(_init_result)
00000c55: _init_result :: out u32 = low:32[R0]

00000b86:
00000b8c: #6 := R31 - 0x10
00000b92: mem := mem with [#6, el]:u64 <- R29
00000b98: mem := mem with [#6 + 8, el]:u64 <- R30
00000b9c: R31 := #6
00000ba2: R29 := R31
00000ba7: R30 := 0x590
00000ba9: call @call_weak_fn with return %00000bab

00000bab:
00000bb0: R29 := mem[R31, el]:u64
00000bb5: R30 := mem[R31 + 8, el]:u64
00000bb9: R31 := R31 + 0x10
00000bbe: call R30 with noreturn

00000c3d: sub _start(_start_result)
00000c56: _start_result :: out u32 = low:32[R0]

000007d7:
000007dc: R29 := 0
000007e1: R30 := 0
000007e7: R5 := R0
000007ee: R1 := mem[R31, el]:u64
000007f4: R2 := R31 + 8
000007fa: R6 := R31
000007ff: R0 := 0x10000
00000806: R0 := mem[R0 + 0xFD8, el]:u64
0000080b: R3 := 0
00000810: R4 := 0
00000815: R30 := 0x630
00000818: call @__libc_start_main with return %0000081a

0000081a:
0000081d: R30 := 0x634
00000820: call @abort with return %00000c3e

00000c3e:
00000c3f: call @call_weak_fn with noreturn

00000c40: sub abort()


0000081e:
00000afb: R16 := 0x11000
00000b02: R17 := mem[R16 + 0x18, el]:u64
00000b08: R16 := R16 + 0x18
00000b0d: call R17 with noreturn

00000c41: sub call_weak_fn(call_weak_fn_result)
00000c57: call_weak_fn_result :: out u32 = low:32[R0]

00000822:
00000825: R0 := 0x10000
0000082c: R0 := mem[R0 + 0xFD0, el]:u64
00000832: when R0 = 0 goto %00000830
00000c42: goto %00000a17

00000830:
00000838: call R30 with noreturn

00000a17:
00000a1a: goto @__gmon_start__

00000a18:
00000ae5: R16 := 0x11000
00000aec: R17 := mem[R16 + 0x10, el]:u64
00000af2: R16 := R16 + 0x10
00000af7: call R17 with noreturn

00000c43: sub deregister_tm_clones(deregister_tm_clones_result)
00000c58: deregister_tm_clones_result :: out u32 = low:32[R0]

0000083e:
00000841: R0 := 0x11000
00000847: R0 := R0 + 0x30
0000084c: R1 := 0x11000
00000852: R1 := R1 + 0x30
00000858: #1 := ~R0
0000085d: #2 := R1 + ~R0
00000863: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000869: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000086d: ZF := #2 + 1 = 0
00000871: NF := 63:63[#2 + 1]
00000877: when ZF goto %00000875
00000c44: goto %000009f9

000009f9:
000009fc: R1 := 0x10000
00000a03: R1 := mem[R1 + 0xFC0, el]:u64
00000a08: when R1 = 0 goto %00000875
00000c45: goto %00000a0c

00000875:
0000087d: call R30 with noreturn

00000a0c:
00000a10: R16 := R1
00000a15: call R16 with noreturn

00000c46: sub frame_dummy(frame_dummy_result)
00000c59: frame_dummy_result :: out u32 = low:32[R0]

00000915:
00000917: call @register_tm_clones with noreturn

00000c47: sub main(main_argc, main_argv, main_result)
00000c5a: main_argc :: in u32 = low:32[R0]
00000c5b: main_argv :: in out u64 = R1
00000c5c: main_result :: out u32 = low:32[R0]

00000919:
0000091d: R31 := R31 - 0x10
00000924: mem := mem with [R31 + 0xC, el]:u32 <- 0
0000092b: mem := mem with [R31 + 8, el]:u32 <- 0
00000930: R8 := 0x11000
00000937: R8 := pad:64[mem[R8 + 0x34, el]:u32]
0000093d: #4 := 31:0[R8] - 1
00000942: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000947: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
0000094b: ZF := #4 + 1 = 0
0000094f: NF := 31:31[#4 + 1]
00000953: R8 := pad:64[#4 + 1]
0000095f: when ZF goto %00000958
00000960: goto %0000095b

0000095b:
0000095c: R8 := 1
00000962: goto %0000095e

00000958:
00000959: R8 := 0
00000961: goto %0000095e

0000095e:
00000968: when 0:0[R8] goto %00000966
00000c48: goto %0000097d

0000097d:
00000980: goto %0000097e

0000097e:
00000984: R8 := 0x11000
0000098b: mem := mem with [R8 + 0x38, el]:u32 <- 0
00000992: R8 := pad:64[mem[R8 + 0x38, el]:u32]
0000099a: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000099e: goto %00000966

00000966:
00000970: R0 := pad:64[mem[R31 + 8, el]:u32]
00000976: R31 := R31 + 0x10
0000097b: call R30 with noreturn

00000c49: sub register_tm_clones(register_tm_clones_result)
00000c5d: register_tm_clones_result :: out u32 = low:32[R0]

0000087f:
00000882: R0 := 0x11000
00000888: R0 := R0 + 0x30
0000088d: R1 := 0x11000
00000893: R1 := R1 + 0x30
0000089a: R1 := R1 + ~R0 + 1
000008a0: R2 := 0.63:63[R1]
000008a7: R1 := R2 + (R1 ~>> 3)
000008ad: R1 := extend:64[63:1[R1]]
000008b3: when R1 = 0 goto %000008b1
00000c4a: goto %000009db

000009db:
000009de: R2 := 0x10000
000009e5: R2 := mem[R2 + 0xFE0, el]:u64
000009ea: when R2 = 0 goto %000008b1
00000c4b: goto %000009ee

000008b1:
000008b9: call R30 with noreturn

000009ee:
000009f2: R16 := R2
000009f7: call R16 with noreturn
