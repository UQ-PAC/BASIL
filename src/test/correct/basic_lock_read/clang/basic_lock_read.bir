0000063e: program
0000060a: sub __cxa_finalize(__cxa_finalize_result)
0000063f: __cxa_finalize_result :: out u32 = low:32[R0]

000003ac:
000004a4: R16 := 0x11000
000004ab: R17 := mem[R16 + 8, el]:u64
000004b1: R16 := R16 + 8
000004b6: call R17 with noreturn

0000060b: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000640: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000292:
00000296: #3 := R31 - 0x20
0000029c: mem := mem with [#3, el]:u64 <- R29
000002a2: mem := mem with [#3 + 8, el]:u64 <- R30
000002a6: R31 := #3
000002ac: R29 := R31
000002b4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b9: R19 := 0x11000
000002c0: R0 := pad:64[mem[R19 + 0x30]]
000002c7: when 31:0[R0] <> 0 goto %000002c5
00000633: goto %00000375

00000375:
00000378: R0 := 0x10000
0000037f: R0 := mem[R0 + 0xFC8, el]:u64
00000385: when R0 = 0 goto %00000383
00000634: goto %0000039c

0000039c:
0000039f: R0 := 0x11000
000003a6: R0 := mem[R0 + 0x28, el]:u64
000003ab: R30 := 0x6F0
000003ae: call @__cxa_finalize with return %00000383

00000383:
0000038b: R30 := 0x6F4
0000038d: call @deregister_tm_clones with return %0000038f

0000038f:
00000392: R0 := 1
0000039a: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000635: goto %000002c5

000002c5:
000002cf: R19 := mem[R31 + 0x10, el]:u64
000002d6: R29 := mem[R31, el]:u64
000002db: R30 := mem[R31 + 8, el]:u64
000002df: R31 := R31 + 0x20
000002e4: call R30 with noreturn

0000060f: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000641: __libc_start_main_main :: in u64 = R0
00000642: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000643: __libc_start_main_arg3 :: in out u64 = R2
00000644: __libc_start_main_auxv :: in out u64 = R3
00000645: __libc_start_main_result :: out u32 = low:32[R0]

000001eb:
0000048e: R16 := 0x11000
00000495: R17 := mem[R16, el]:u64
0000049b: R16 := R16
000004a0: call R17 with noreturn

00000610: sub _fini(_fini_result)
00000646: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000611: sub _init(_init_result)
00000647: _init_result :: out u32 = low:32[R0]

0000055b:
00000561: #6 := R31 - 0x10
00000567: mem := mem with [#6, el]:u64 <- R29
0000056d: mem := mem with [#6 + 8, el]:u64 <- R30
00000571: R31 := #6
00000577: R29 := R31
0000057c: R30 := 0x590
0000057e: call @call_weak_fn with return %00000580

00000580:
00000585: R29 := mem[R31, el]:u64
0000058a: R30 := mem[R31 + 8, el]:u64
0000058e: R31 := R31 + 0x10
00000593: call R30 with noreturn

00000612: sub _start(_start_result)
00000648: _start_result :: out u32 = low:32[R0]

000001ac:
000001b1: R29 := 0
000001b6: R30 := 0
000001bc: R5 := R0
000001c3: R1 := mem[R31, el]:u64
000001c9: R2 := R31 + 8
000001cf: R6 := R31
000001d4: R0 := 0x10000
000001db: R0 := mem[R0 + 0xFD8, el]:u64
000001e0: R3 := 0
000001e5: R4 := 0
000001ea: R30 := 0x630
000001ed: call @__libc_start_main with return %000001ef

000001ef:
000001f2: R30 := 0x634
000001f5: call @abort with return %00000636

00000636:
00000637: call @call_weak_fn with noreturn

00000615: sub abort()


000001f3:
000004d0: R16 := 0x11000
000004d7: R17 := mem[R16 + 0x18, el]:u64
000004dd: R16 := R16 + 0x18
000004e2: call R17 with noreturn

00000616: sub call_weak_fn(call_weak_fn_result)
00000649: call_weak_fn_result :: out u32 = low:32[R0]

000001f7:
000001fa: R0 := 0x10000
00000201: R0 := mem[R0 + 0xFD0, el]:u64
00000207: when R0 = 0 goto %00000205
00000638: goto %000003ec

00000205:
0000020d: call R30 with noreturn

000003ec:
000003ef: goto @__gmon_start__

000003ed:
000004ba: R16 := 0x11000
000004c1: R17 := mem[R16 + 0x10, el]:u64
000004c7: R16 := R16 + 0x10
000004cc: call R17 with noreturn

00000618: sub deregister_tm_clones(deregister_tm_clones_result)
0000064a: deregister_tm_clones_result :: out u32 = low:32[R0]

00000213:
00000216: R0 := 0x11000
0000021c: R0 := R0 + 0x30
00000221: R1 := 0x11000
00000227: R1 := R1 + 0x30
0000022d: #1 := ~R0
00000232: #2 := R1 + ~R0
00000238: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000242: ZF := #2 + 1 = 0
00000246: NF := 63:63[#2 + 1]
0000024c: when ZF goto %0000024a
00000639: goto %000003ce

000003ce:
000003d1: R1 := 0x10000
000003d8: R1 := mem[R1 + 0xFC0, el]:u64
000003dd: when R1 = 0 goto %0000024a
0000063a: goto %000003e1

0000024a:
00000252: call R30 with noreturn

000003e1:
000003e5: R16 := R1
000003ea: call R16 with noreturn

0000061b: sub frame_dummy(frame_dummy_result)
0000064b: frame_dummy_result :: out u32 = low:32[R0]

000002ea:
000002ec: call @register_tm_clones with noreturn

0000061c: sub main(main_argc, main_argv, main_result)
0000064c: main_argc :: in u32 = low:32[R0]
0000064d: main_argv :: in out u64 = R1
0000064e: main_result :: out u32 = low:32[R0]

000002ee:
000002f2: R31 := R31 - 0x10
000002f9: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000300: mem := mem with [R31 + 8, el]:u32 <- 0
00000305: R8 := 0x11000
0000030c: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000312: #4 := 31:0[R8] - 1
00000317: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
0000031c: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000320: ZF := #4 + 1 = 0
00000324: NF := 31:31[#4 + 1]
00000328: R8 := pad:64[#4 + 1]
00000334: when ZF goto %0000032d
00000335: goto %00000330

00000330:
00000331: R8 := 1
00000337: goto %00000333

0000032d:
0000032e: R8 := 0
00000336: goto %00000333

00000333:
0000033d: when 0:0[R8] goto %0000033b
0000063b: goto %00000352

00000352:
00000355: goto %00000353

00000353:
00000359: R8 := 0x11000
00000360: mem := mem with [R8 + 0x38, el]:u32 <- 0
00000367: R8 := pad:64[mem[R8 + 0x38, el]:u32]
0000036f: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000373: goto %0000033b

0000033b:
00000345: R0 := pad:64[mem[R31 + 8, el]:u32]
0000034b: R31 := R31 + 0x10
00000350: call R30 with noreturn

0000061e: sub register_tm_clones(register_tm_clones_result)
0000064f: register_tm_clones_result :: out u32 = low:32[R0]

00000254:
00000257: R0 := 0x11000
0000025d: R0 := R0 + 0x30
00000262: R1 := 0x11000
00000268: R1 := R1 + 0x30
0000026f: R1 := R1 + ~R0 + 1
00000275: R2 := 0.63:63[R1]
0000027c: R1 := R2 + (R1 ~>> 3)
00000282: R1 := extend:64[63:1[R1]]
00000288: when R1 = 0 goto %00000286
0000063c: goto %000003b0

000003b0:
000003b3: R2 := 0x10000
000003ba: R2 := mem[R2 + 0xFE0, el]:u64
000003bf: when R2 = 0 goto %00000286
0000063d: goto %000003c3

00000286:
0000028e: call R30 with noreturn

000003c3:
000003c7: R16 := R2
000003cc: call R16 with noreturn
