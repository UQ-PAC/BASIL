00000635: program
000005ff: sub __cxa_finalize(__cxa_finalize_result)
00000636: __cxa_finalize_result :: out u32 = low:32[R0]

000003a1:
00000499: R16 := 0x20000
000004a0: R17 := mem[R16 + 8, el]:u64
000004a6: R16 := R16 + 8
000004ab: call R17 with noreturn

00000600: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000637: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000293:
00000297: #3 := R31 - 0x20
0000029d: mem := mem with [#3, el]:u64 <- R29
000002a3: mem := mem with [#3 + 8, el]:u64 <- R30
000002a7: R31 := #3
000002ad: R29 := R31
000002b5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ba: R19 := 0x20000
000002c1: R0 := pad:64[mem[R19 + 0x30]]
000002c7: when 0:0[R0] goto %000002c5
00000629: goto %0000036a

0000036a:
0000036d: R0 := 0x1F000
00000374: R0 := mem[R0 + 0xFC8, el]:u64
0000037a: when R0 = 0 goto %00000378
0000062a: goto %00000391

00000391:
00000394: R0 := 0x20000
0000039b: R0 := mem[R0 + 0x28, el]:u64
000003a0: R30 := 0x6F0
000003a3: call @__cxa_finalize with return %00000378

00000378:
00000380: R30 := 0x6F4
00000382: call @deregister_tm_clones with return %00000384

00000384:
00000387: R0 := 1
0000038f: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000062b: goto %000002c5

000002c5:
000002cf: R19 := mem[R31 + 0x10, el]:u64
000002d6: R29 := mem[R31, el]:u64
000002db: R30 := mem[R31 + 8, el]:u64
000002df: R31 := R31 + 0x20
000002e4: call R30 with noreturn

00000604: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000638: __libc_start_main_main :: in u64 = R0
00000639: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000063a: __libc_start_main_arg3 :: in out u64 = R2
0000063b: __libc_start_main_auxv :: in out u64 = R3
0000063c: __libc_start_main_result :: out u32 = low:32[R0]

000001ec:
00000483: R16 := 0x20000
0000048a: R17 := mem[R16, el]:u64
00000490: R16 := R16
00000495: call R17 with noreturn

00000605: sub _fini(_fini_result)
0000063d: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000606: sub _init(_init_result)
0000063e: _init_result :: out u32 = low:32[R0]

00000550:
00000556: #6 := R31 - 0x10
0000055c: mem := mem with [#6, el]:u64 <- R29
00000562: mem := mem with [#6 + 8, el]:u64 <- R30
00000566: R31 := #6
0000056c: R29 := R31
00000571: R30 := 0x590
00000573: call @call_weak_fn with return %00000575

00000575:
0000057a: R29 := mem[R31, el]:u64
0000057f: R30 := mem[R31 + 8, el]:u64
00000583: R31 := R31 + 0x10
00000588: call R30 with noreturn

00000607: sub _start(_start_result)
0000063f: _start_result :: out u32 = low:32[R0]

000001ad:
000001b2: R29 := 0
000001b7: R30 := 0
000001bd: R5 := R0
000001c4: R1 := mem[R31, el]:u64
000001ca: R2 := R31 + 8
000001d0: R6 := R31
000001d5: R0 := 0x1F000
000001dc: R0 := mem[R0 + 0xFD8, el]:u64
000001e1: R3 := 0
000001e6: R4 := 0
000001eb: R30 := 0x630
000001ee: call @__libc_start_main with return %000001f0

000001f0:
000001f3: R30 := 0x634
000001f6: call @abort with return %0000062c

0000062c:
0000062d: call @call_weak_fn with noreturn

0000060a: sub abort()


000001f4:
000004c5: R16 := 0x20000
000004cc: R17 := mem[R16 + 0x18, el]:u64
000004d2: R16 := R16 + 0x18
000004d7: call R17 with noreturn

0000060b: sub call_weak_fn(call_weak_fn_result)
00000640: call_weak_fn_result :: out u32 = low:32[R0]

000001f8:
000001fb: R0 := 0x1F000
00000202: R0 := mem[R0 + 0xFD0, el]:u64
00000208: when R0 = 0 goto %00000206
0000062e: goto %000003e1

00000206:
0000020e: call R30 with noreturn

000003e1:
000003e4: goto @__gmon_start__

000003e2:
000004af: R16 := 0x20000
000004b6: R17 := mem[R16 + 0x10, el]:u64
000004bc: R16 := R16 + 0x10
000004c1: call R17 with noreturn

0000060d: sub deregister_tm_clones(deregister_tm_clones_result)
00000641: deregister_tm_clones_result :: out u32 = low:32[R0]

00000214:
00000217: R0 := 0x20000
0000021d: R0 := R0 + 0x30
00000222: R1 := 0x20000
00000228: R1 := R1 + 0x30
0000022e: #1 := ~R0
00000233: #2 := R1 + ~R0
00000239: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000243: ZF := #2 + 1 = 0
00000247: NF := 63:63[#2 + 1]
0000024d: when ZF goto %0000024b
0000062f: goto %000003c3

000003c3:
000003c6: R1 := 0x1F000
000003cd: R1 := mem[R1 + 0xFC0, el]:u64
000003d2: when R1 = 0 goto %0000024b
00000630: goto %000003d6

0000024b:
00000253: call R30 with noreturn

000003d6:
000003da: R16 := R1
000003df: call R16 with noreturn

00000610: sub frame_dummy(frame_dummy_result)
00000642: frame_dummy_result :: out u32 = low:32[R0]

000002ea:
000002ec: call @register_tm_clones with noreturn

00000611: sub main(main_argc, main_argv, main_result)
00000643: main_argc :: in u32 = low:32[R0]
00000644: main_argv :: in out u64 = R1
00000645: main_result :: out u32 = low:32[R0]

000002ee:
000002f2: R31 := R31 - 0x10
000002f9: mem := mem with [R31 + 0xC, el]:u32 <- 0
000002fe: R0 := 0x20000
00000304: R0 := R0 + 0x38
0000030b: R0 := pad:64[mem[R0, el]:u32]
00000311: #4 := 31:0[R0] - 1
00000316: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
0000031b: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000031f: ZF := #4 + 1 = 0
00000323: NF := 31:31[#4 + 1]
00000329: when ZF <> 1 goto %00000327
00000631: goto %0000033e

0000033e:
00000341: R0 := 0x20000
00000347: R0 := R0 + 0x34
0000034e: mem := mem with [R0, el]:u32 <- 0
00000353: R0 := 0x20000
00000359: R0 := R0 + 0x34
00000360: R0 := pad:64[mem[R0, el]:u32]
00000368: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000632: goto %00000327

00000327:
00000331: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000337: R31 := R31 + 0x10
0000033c: call R30 with noreturn

00000614: sub register_tm_clones(register_tm_clones_result)
00000646: register_tm_clones_result :: out u32 = low:32[R0]

00000255:
00000258: R0 := 0x20000
0000025e: R0 := R0 + 0x30
00000263: R1 := 0x20000
00000269: R1 := R1 + 0x30
00000270: R1 := R1 + ~R0 + 1
00000276: R2 := 0.63:63[R1]
0000027d: R1 := R2 + (R1 ~>> 3)
00000283: R1 := extend:64[63:1[R1]]
00000289: when R1 = 0 goto %00000287
00000633: goto %000003a5

000003a5:
000003a8: R2 := 0x1F000
000003af: R2 := mem[R2 + 0xFE0, el]:u64
000003b4: when R2 = 0 goto %00000287
00000634: goto %000003b8

00000287:
0000028f: call R30 with noreturn

000003b8:
000003bc: R16 := R2
000003c1: call R16 with noreturn
