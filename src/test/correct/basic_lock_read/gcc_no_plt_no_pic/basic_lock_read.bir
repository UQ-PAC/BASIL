00000c38: program
00000c20: sub __cxa_finalize(__cxa_finalize_result)
00000c39: __cxa_finalize_result :: out u32 = low:32[R0]

000009c2:
00000aba: R16 := 0x10000
00000ac1: R17 := mem[R16 + 0xFB8, el]:u64
00000ac7: R16 := R16 + 0xFB8
00000acc: call R17 with noreturn

00000c21: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c3a: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008b3:
000008b7: #3 := R31 - 0x20
000008bd: mem := mem with [#3, el]:u64 <- R29
000008c3: mem := mem with [#3 + 8, el]:u64 <- R30
000008c7: R31 := #3
000008cd: R29 := R31
000008d5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008da: R19 := 0x11000
000008e1: R0 := pad:64[mem[R19 + 0x10]]
000008e8: when 31:0[R0] <> 0 goto %000008e6
00000c22: goto %0000098b

0000098b:
0000098e: R0 := 0x10000
00000995: R0 := mem[R0 + 0xFE0, el]:u64
0000099b: when R0 = 0 goto %00000999
00000c23: goto %000009b2

000009b2:
000009b5: R0 := 0x11000
000009bc: R0 := mem[R0 + 8, el]:u64
000009c1: R30 := 0x6F0
000009c4: call @__cxa_finalize with return %00000999

00000999:
000009a1: R30 := 0x6F4
000009a3: call @deregister_tm_clones with return %000009a5

000009a5:
000009a8: R0 := 1
000009b0: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000c24: goto %000008e6

000008e6:
000008f0: R19 := mem[R31 + 0x10, el]:u64
000008f7: R29 := mem[R31, el]:u64
000008fc: R30 := mem[R31 + 8, el]:u64
00000900: R31 := R31 + 0x20
00000905: call R30 with noreturn

00000c25: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c3b: __libc_start_main_main :: in u64 = R0
00000c3c: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c3d: __libc_start_main_arg3 :: in out u64 = R2
00000c3e: __libc_start_main_auxv :: in out u64 = R3
00000c3f: __libc_start_main_result :: out u32 = low:32[R0]

0000080c:
00000aa4: R16 := 0x10000
00000aab: R17 := mem[R16 + 0xFB0, el]:u64
00000ab1: R16 := R16 + 0xFB0
00000ab6: call R17 with noreturn

00000c26: sub _fini(_fini_result)
00000c40: _fini_result :: out u32 = low:32[R0]

00000640:
00000646: #0 := R31 - 0x10
0000064c: mem := mem with [#0, el]:u64 <- R29
00000652: mem := mem with [#0 + 8, el]:u64 <- R30
00000656: R31 := #0
0000065c: R29 := R31
00000663: R29 := mem[R31, el]:u64
00000668: R30 := mem[R31 + 8, el]:u64
0000066c: R31 := R31 + 0x10
00000671: call R30 with noreturn

00000c27: sub _init(_init_result)
00000c41: _init_result :: out u32 = low:32[R0]

00000b71:
00000b77: #6 := R31 - 0x10
00000b7d: mem := mem with [#6, el]:u64 <- R29
00000b83: mem := mem with [#6 + 8, el]:u64 <- R30
00000b87: R31 := #6
00000b8d: R29 := R31
00000b92: R30 := 0x590
00000b94: call @call_weak_fn with return %00000b96

00000b96:
00000b9b: R29 := mem[R31, el]:u64
00000ba0: R30 := mem[R31 + 8, el]:u64
00000ba4: R31 := R31 + 0x10
00000ba9: call R30 with noreturn

00000c28: sub _start(_start_result)
00000c42: _start_result :: out u32 = low:32[R0]

000007cd:
000007d2: R29 := 0
000007d7: R30 := 0
000007dd: R5 := R0
000007e4: R1 := mem[R31, el]:u64
000007ea: R2 := R31 + 8
000007f0: R6 := R31
000007f5: R0 := 0x10000
000007fc: R0 := mem[R0 + 0xFF0, el]:u64
00000801: R3 := 0
00000806: R4 := 0
0000080b: R30 := 0x630
0000080e: call @__libc_start_main with return %00000810

00000810:
00000813: R30 := 0x634
00000816: call @abort with return %00000c29

00000c29:
00000c2a: call @call_weak_fn with noreturn

00000c2b: sub abort()


00000814:
00000ae6: R16 := 0x10000
00000aed: R17 := mem[R16 + 0xFC8, el]:u64
00000af3: R16 := R16 + 0xFC8
00000af8: call R17 with noreturn

00000c2c: sub call_weak_fn(call_weak_fn_result)
00000c43: call_weak_fn_result :: out u32 = low:32[R0]

00000818:
0000081b: R0 := 0x10000
00000822: R0 := mem[R0 + 0xFE8, el]:u64
00000828: when R0 = 0 goto %00000826
00000c2d: goto %00000a02

00000826:
0000082e: call R30 with noreturn

00000a02:
00000a05: goto @__gmon_start__

00000a03:
00000ad0: R16 := 0x10000
00000ad7: R17 := mem[R16 + 0xFC0, el]:u64
00000add: R16 := R16 + 0xFC0
00000ae2: call R17 with noreturn

00000c2e: sub deregister_tm_clones(deregister_tm_clones_result)
00000c44: deregister_tm_clones_result :: out u32 = low:32[R0]

00000834:
00000837: R0 := 0x11000
0000083d: R0 := R0 + 0x10
00000842: R1 := 0x11000
00000848: R1 := R1 + 0x10
0000084e: #1 := ~R0
00000853: #2 := R1 + ~R0
00000859: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000085f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000863: ZF := #2 + 1 = 0
00000867: NF := 63:63[#2 + 1]
0000086d: when ZF goto %0000086b
00000c2f: goto %000009e4

000009e4:
000009e7: R1 := 0x10000
000009ee: R1 := mem[R1 + 0xFD8, el]:u64
000009f3: when R1 = 0 goto %0000086b
00000c30: goto %000009f7

0000086b:
00000873: call R30 with noreturn

000009f7:
000009fb: R16 := R1
00000a00: call R16 with noreturn

00000c31: sub frame_dummy(frame_dummy_result)
00000c45: frame_dummy_result :: out u32 = low:32[R0]

0000090b:
0000090d: call @register_tm_clones with noreturn

00000c32: sub main(main_argc, main_argv, main_result)
00000c46: main_argc :: in u32 = low:32[R0]
00000c47: main_argv :: in out u64 = R1
00000c48: main_result :: out u32 = low:32[R0]

0000090f:
00000913: R31 := R31 - 0x10
0000091a: mem := mem with [R31 + 0xC, el]:u32 <- 0
0000091f: R0 := 0x11000
00000925: R0 := R0 + 0x18
0000092c: R0 := pad:64[mem[R0, el]:u32]
00000932: #4 := 31:0[R0] - 1
00000937: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
0000093c: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000940: ZF := #4 + 1 = 0
00000944: NF := 31:31[#4 + 1]
0000094a: when ZF <> 1 goto %00000948
00000c33: goto %0000095f

0000095f:
00000962: R0 := 0x11000
00000968: R0 := R0 + 0x14
0000096f: mem := mem with [R0, el]:u32 <- 0
00000974: R0 := 0x11000
0000097a: R0 := R0 + 0x14
00000981: R0 := pad:64[mem[R0, el]:u32]
00000989: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000c34: goto %00000948

00000948:
00000952: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000958: R31 := R31 + 0x10
0000095d: call R30 with noreturn

00000c35: sub register_tm_clones(register_tm_clones_result)
00000c49: register_tm_clones_result :: out u32 = low:32[R0]

00000875:
00000878: R0 := 0x11000
0000087e: R0 := R0 + 0x10
00000883: R1 := 0x11000
00000889: R1 := R1 + 0x10
00000890: R1 := R1 + ~R0 + 1
00000896: R2 := 0.63:63[R1]
0000089d: R1 := R2 + (R1 ~>> 3)
000008a3: R1 := extend:64[63:1[R1]]
000008a9: when R1 = 0 goto %000008a7
00000c36: goto %000009c6

000009c6:
000009c9: R2 := 0x10000
000009d0: R2 := mem[R2 + 0xFF8, el]:u64
000009d5: when R2 = 0 goto %000008a7
00000c37: goto %000009d9

000008a7:
000008af: call R30 with noreturn

000009d9:
000009dd: R16 := R2
000009e2: call R16 with noreturn
