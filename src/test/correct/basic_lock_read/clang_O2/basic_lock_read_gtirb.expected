var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R8: bv64;
var {:extern} $mem: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69688bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69684bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  (if (#index == $x_addr) then true else (if (#index == $z_addr) then true else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures (forall #i: bv64::  ((($mem[#i] == old($mem[#i])) ==> ($Gamma_mem[#i] == old($Gamma_mem[#i])))));
  ensures ((old(memory_load32_le($mem, $z_addr)) == 0bv32) ==> ((memory_load32_le($mem, $x_addr) == old(memory_load32_le($mem, $x_addr))) && (memory_load32_le($mem, $z_addr) == old(memory_load32_le($mem, $z_addr)))));
  free ensures (memory_load32_le($mem, 1868bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ((old(memory_load32_le($mem, $z_addr)) == 0bv32) ==> ((memory_load32_le($mem, $x_addr) == old(memory_load32_le($mem, $x_addr))) && (memory_load32_le($mem, $z_addr) == old(memory_load32_le($mem, $z_addr)))));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

implementation {:extern} p$rely_reflexive()
{
  assert ((memory_load32_le($mem, $z_addr) == 0bv32) ==> ((memory_load32_le($mem, $x_addr) == memory_load32_le($mem, $x_addr)) && (memory_load32_le($mem, $z_addr) == memory_load32_le($mem, $z_addr))));
}

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

implementation {:extern} p$guarantee_reflexive()
{
  assert (memory_load32_le($mem, $z_addr) == memory_load32_le($mem, $z_addr));
}

procedure p$main_1812();
  modifies $Gamma_R0, $Gamma_R8, $Gamma_mem, $R0, $R8, $mem;
  free requires (memory_load64_le($mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le($mem, 1868bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  ensures ($R0[32:0] == 0bv32);
  free ensures (memory_load32_le($mem, 1868bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

implementation p$main_1812()
{
  var #Gamma_load5: bool;
  var #load5: bv32;
  var #z_old: bv32;
  b#main_entry:
    assume {:captureState "main_entry (WS3unIRvQP+HMbu0zRO9Wg==)"} true;
    $R8, $Gamma_R8 := 69632bv64, true;
    call p$rely();
    #load5, #Gamma_load5 := memory_load32_le($mem, bvadd64($R8, 52bv64)), (gamma_load32($Gamma_mem, bvadd64($R8, 52bv64)) || L($mem, bvadd64($R8, 52bv64)));
    $R8, $Gamma_R8 := zero_extend32_32(#load5), #Gamma_load5;
    assert $Gamma_R8;
    goto b#main_5, b#main_9;
  b#main_9:
    assume {:captureState "main_9"} true;
    assume (!($R8[32:0] == 0bv32));
    $R0, $Gamma_R0 := 0bv64, true;
    goto b#main_7;
  b#main_7:
    assume {:captureState "main_7 (VRrOrprpRgq70GRGqvu1TQ==)"} true;
    goto b#main_basil_return_1;
  b#main_5:
    assume {:captureState "main_5"} true;
    assume ($R8[32:0] == 0bv32);
    $R8, $Gamma_R8 := 69632bv64, true;
    call p$rely();
    #z_old := memory_load32_le($mem, $z_addr);
    assert (L($mem, bvadd64($R8, 56bv64)) ==> true);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R8, 56bv64), 0bv32), gamma_store32($Gamma_mem, bvadd64($R8, 56bv64), true);
    assert (memory_load32_le($mem, $z_addr) == #z_old);
    assume {:captureState "1836_0"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (lHXxwUQYROKiGyY65vpP1Q==)"} true;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

