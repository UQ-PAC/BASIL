000005f0: program
000005ba: sub __cxa_finalize(__cxa_finalize_result)
000005f1: __cxa_finalize_result :: out u32 = low:32[R0]

00000357:
00000456: R16 := 0x20000
0000045d: R17 := mem[R16 + 8, el]:u64
00000463: R16 := R16 + 8
00000468: call R17 with noreturn

000005bb: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005f2: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c5:
000002c9: #3 := R31 - 0x20
000002cf: mem := mem with [#3, el]:u64 <- R29
000002d5: mem := mem with [#3 + 8, el]:u64 <- R30
000002d9: R31 := #3
000002df: R29 := R31
000002e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ec: R19 := 0x20000
000002f3: R0 := pad:64[mem[R19 + 0x30]]
000002f9: when 0:0[R0] goto %000002f7
000005e4: goto %00000320

00000320:
00000323: R0 := 0x1F000
0000032a: R0 := mem[R0 + 0xFC8, el]:u64
00000330: when R0 = 0 goto %0000032e
000005e5: goto %00000347

00000347:
0000034a: R0 := 0x20000
00000351: R0 := mem[R0 + 0x28, el]:u64
00000356: R30 := 0x730
00000359: call @__cxa_finalize with return %0000032e

0000032e:
00000336: R30 := 0x734
00000338: call @deregister_tm_clones with return %0000033a

0000033a:
0000033d: R0 := 1
00000345: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005e6: goto %000002f7

000002f7:
00000301: R19 := mem[R31 + 0x10, el]:u64
00000308: R29 := mem[R31, el]:u64
0000030d: R30 := mem[R31 + 8, el]:u64
00000311: R31 := R31 + 0x20
00000316: call R30 with noreturn

000005bf: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005f3: __libc_start_main_main :: in u64 = R0
000005f4: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005f5: __libc_start_main_arg3 :: in out u64 = R2
000005f6: __libc_start_main_auxv :: in out u64 = R3
000005f7: __libc_start_main_result :: out u32 = low:32[R0]

0000021e:
00000440: R16 := 0x20000
00000447: R17 := mem[R16, el]:u64
0000044d: R16 := R16
00000452: call R17 with noreturn

000005c0: sub _fini(_fini_result)
000005f8: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005c1: sub _init(_init_result)
000005f9: _init_result :: out u32 = low:32[R0]

0000050c:
00000512: #5 := R31 - 0x10
00000518: mem := mem with [#5, el]:u64 <- R29
0000051e: mem := mem with [#5 + 8, el]:u64 <- R30
00000522: R31 := #5
00000528: R29 := R31
0000052d: R30 := 0x590
0000052f: call @call_weak_fn with return %00000531

00000531:
00000536: R29 := mem[R31, el]:u64
0000053b: R30 := mem[R31 + 8, el]:u64
0000053f: R31 := R31 + 0x10
00000544: call R30 with noreturn

000005c2: sub _start(_start_result)
000005fa: _start_result :: out u32 = low:32[R0]

000001df:
000001e4: R29 := 0
000001e9: R30 := 0
000001ef: R5 := R0
000001f6: R1 := mem[R31, el]:u64
000001fc: R2 := R31 + 8
00000202: R6 := R31
00000207: R0 := 0x1F000
0000020e: R0 := mem[R0 + 0xFD8, el]:u64
00000213: R3 := 0
00000218: R4 := 0
0000021d: R30 := 0x670
00000220: call @__libc_start_main with return %00000222

00000222:
00000225: R30 := 0x674
00000228: call @abort with return %000005e7

000005e7:
000005e8: call @call_weak_fn with noreturn

000005c5: sub abort()


00000226:
00000482: R16 := 0x20000
00000489: R17 := mem[R16 + 0x18, el]:u64
0000048f: R16 := R16 + 0x18
00000494: call R17 with noreturn

000005c6: sub call_weak_fn(call_weak_fn_result)
000005fb: call_weak_fn_result :: out u32 = low:32[R0]

0000022a:
0000022d: R0 := 0x1F000
00000234: R0 := mem[R0 + 0xFD0, el]:u64
0000023a: when R0 = 0 goto %00000238
000005e9: goto %00000397

00000238:
00000240: call R30 with noreturn

00000397:
0000039a: goto @__gmon_start__

00000398:
0000046c: R16 := 0x20000
00000473: R17 := mem[R16 + 0x10, el]:u64
00000479: R16 := R16 + 0x10
0000047e: call R17 with noreturn

000005c8: sub deregister_tm_clones(deregister_tm_clones_result)
000005fc: deregister_tm_clones_result :: out u32 = low:32[R0]

00000246:
00000249: R0 := 0x20000
0000024f: R0 := R0 + 0x30
00000254: R1 := 0x20000
0000025a: R1 := R1 + 0x30
00000260: #1 := ~R0
00000265: #2 := R1 + ~R0
0000026b: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000271: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000275: ZF := #2 + 1 = 0
00000279: NF := 63:63[#2 + 1]
0000027f: when ZF goto %0000027d
000005ea: goto %00000379

00000379:
0000037c: R1 := 0x1F000
00000383: R1 := mem[R1 + 0xFC0, el]:u64
00000388: when R1 = 0 goto %0000027d
000005eb: goto %0000038c

0000027d:
00000285: call R30 with noreturn

0000038c:
00000390: R16 := R1
00000395: call R16 with noreturn

000005cb: sub frame_dummy(frame_dummy_result)
000005fd: frame_dummy_result :: out u32 = low:32[R0]

0000031c:
0000031e: call @register_tm_clones with noreturn

000005cc: sub main(main_argc, main_argv, main_result)
000005fe: main_argc :: in u32 = low:32[R0]
000005ff: main_argv :: in out u64 = R1
00000600: main_result :: out u32 = low:32[R0]

000001a9:
000001ac: R0 := 0x20000
000001b2: R1 := R0 + 0x34
000001b9: R0 := pad:64[mem[R0 + 0x34, el]:u32]
000001c0: when 31:0[R0] <> 0 goto %000001be
000005ec: goto %0000039c

0000039c:
000003a1: mem := mem with [R1 + 4, el]:u32 <- 0
000005ed: goto %000001be

000001be:
000001c6: R0 := 0
000001cb: call R30 with noreturn

000005cf: sub register_tm_clones(register_tm_clones_result)
00000601: register_tm_clones_result :: out u32 = low:32[R0]

00000287:
0000028a: R0 := 0x20000
00000290: R0 := R0 + 0x30
00000295: R1 := 0x20000
0000029b: R1 := R1 + 0x30
000002a2: R1 := R1 + ~R0 + 1
000002a8: R2 := 0.63:63[R1]
000002af: R1 := R2 + (R1 ~>> 3)
000002b5: R1 := extend:64[63:1[R1]]
000002bb: when R1 = 0 goto %000002b9
000005ee: goto %0000035b

0000035b:
0000035e: R2 := 0x1F000
00000365: R2 := mem[R2 + 0xFE0, el]:u64
0000036a: when R2 = 0 goto %000002b9
000005ef: goto %0000036e

000002b9:
000002c1: call R30 with noreturn

0000036e:
00000372: R16 := R2
00000377: call R16 with noreturn
