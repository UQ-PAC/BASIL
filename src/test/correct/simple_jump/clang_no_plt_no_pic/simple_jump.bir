00000c1a: program
00000c03: sub __cxa_finalize(__cxa_finalize_result)
00000c1b: __cxa_finalize_result :: out u32 = low:32[R0]

000009a9:
00000aa1: R16 := 0x11000
00000aa8: R17 := mem[R16 + 8, el]:u64
00000aae: R16 := R16 + 8
00000ab3: call R17 with noreturn

00000c04: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c1c: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000089c:
000008a0: #3 := R31 - 0x20
000008a6: mem := mem with [#3, el]:u64 <- R29
000008ac: mem := mem with [#3 + 8, el]:u64 <- R30
000008b0: R31 := #3
000008b6: R29 := R31
000008be: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008c3: R19 := 0x11000
000008ca: R0 := pad:64[mem[R19 + 0x30]]
000008d1: when 31:0[R0] <> 0 goto %000008cf
00000c05: goto %00000972

00000972:
00000975: R0 := 0x10000
0000097c: R0 := mem[R0 + 0xFC8, el]:u64
00000982: when R0 = 0 goto %00000980
00000c06: goto %00000999

00000999:
0000099c: R0 := 0x11000
000009a3: R0 := mem[R0 + 0x28, el]:u64
000009a8: R30 := 0x6F0
000009ab: call @__cxa_finalize with return %00000980

00000980:
00000988: R30 := 0x6F4
0000098a: call @deregister_tm_clones with return %0000098c

0000098c:
0000098f: R0 := 1
00000997: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000c07: goto %000008cf

000008cf:
000008d9: R19 := mem[R31 + 0x10, el]:u64
000008e0: R29 := mem[R31, el]:u64
000008e5: R30 := mem[R31 + 8, el]:u64
000008e9: R31 := R31 + 0x20
000008ee: call R30 with noreturn

00000c08: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c1d: __libc_start_main_main :: in u64 = R0
00000c1e: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c1f: __libc_start_main_arg3 :: in out u64 = R2
00000c20: __libc_start_main_auxv :: in out u64 = R3
00000c21: __libc_start_main_result :: out u32 = low:32[R0]

000007f5:
00000a8b: R16 := 0x11000
00000a92: R17 := mem[R16, el]:u64
00000a98: R16 := R16
00000a9d: call R17 with noreturn

00000c09: sub _fini(_fini_result)
00000c22: _fini_result :: out u32 = low:32[R0]

00000631:
00000637: #0 := R31 - 0x10
0000063d: mem := mem with [#0, el]:u64 <- R29
00000643: mem := mem with [#0 + 8, el]:u64 <- R30
00000647: R31 := #0
0000064d: R29 := R31
00000654: R29 := mem[R31, el]:u64
00000659: R30 := mem[R31 + 8, el]:u64
0000065d: R31 := R31 + 0x10
00000662: call R30 with noreturn

00000c0a: sub _init(_init_result)
00000c23: _init_result :: out u32 = low:32[R0]

00000b56:
00000b5c: #6 := R31 - 0x10
00000b62: mem := mem with [#6, el]:u64 <- R29
00000b68: mem := mem with [#6 + 8, el]:u64 <- R30
00000b6c: R31 := #6
00000b72: R29 := R31
00000b77: R30 := 0x590
00000b79: call @call_weak_fn with return %00000b7b

00000b7b:
00000b80: R29 := mem[R31, el]:u64
00000b85: R30 := mem[R31 + 8, el]:u64
00000b89: R31 := R31 + 0x10
00000b8e: call R30 with noreturn

00000c0b: sub _start(_start_result)
00000c24: _start_result :: out u32 = low:32[R0]

000007b6:
000007bb: R29 := 0
000007c0: R30 := 0
000007c6: R5 := R0
000007cd: R1 := mem[R31, el]:u64
000007d3: R2 := R31 + 8
000007d9: R6 := R31
000007de: R0 := 0x10000
000007e5: R0 := mem[R0 + 0xFD8, el]:u64
000007ea: R3 := 0
000007ef: R4 := 0
000007f4: R30 := 0x630
000007f7: call @__libc_start_main with return %000007f9

000007f9:
000007fc: R30 := 0x634
000007ff: call @abort with return %00000c0c

00000c0c:
00000c0d: call @call_weak_fn with noreturn

00000c0e: sub abort()


000007fd:
00000acd: R16 := 0x11000
00000ad4: R17 := mem[R16 + 0x18, el]:u64
00000ada: R16 := R16 + 0x18
00000adf: call R17 with noreturn

00000c0f: sub call_weak_fn(call_weak_fn_result)
00000c25: call_weak_fn_result :: out u32 = low:32[R0]

00000801:
00000804: R0 := 0x10000
0000080b: R0 := mem[R0 + 0xFD0, el]:u64
00000811: when R0 = 0 goto %0000080f
00000c10: goto %000009e9

0000080f:
00000817: call R30 with noreturn

000009e9:
000009ec: goto @__gmon_start__

000009ea:
00000ab7: R16 := 0x11000
00000abe: R17 := mem[R16 + 0x10, el]:u64
00000ac4: R16 := R16 + 0x10
00000ac9: call R17 with noreturn

00000c11: sub deregister_tm_clones(deregister_tm_clones_result)
00000c26: deregister_tm_clones_result :: out u32 = low:32[R0]

0000081d:
00000820: R0 := 0x11000
00000826: R0 := R0 + 0x30
0000082b: R1 := 0x11000
00000831: R1 := R1 + 0x30
00000837: #1 := ~R0
0000083c: #2 := R1 + ~R0
00000842: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000848: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000084c: ZF := #2 + 1 = 0
00000850: NF := 63:63[#2 + 1]
00000856: when ZF goto %00000854
00000c12: goto %000009cb

000009cb:
000009ce: R1 := 0x10000
000009d5: R1 := mem[R1 + 0xFC0, el]:u64
000009da: when R1 = 0 goto %00000854
00000c13: goto %000009de

00000854:
0000085c: call R30 with noreturn

000009de:
000009e2: R16 := R1
000009e7: call R16 with noreturn

00000c14: sub frame_dummy(frame_dummy_result)
00000c27: frame_dummy_result :: out u32 = low:32[R0]

000008f4:
000008f6: call @register_tm_clones with noreturn

00000c15: sub main(main_argc, main_argv, main_result)
00000c28: main_argc :: in u32 = low:32[R0]
00000c29: main_argv :: in out u64 = R1
00000c2a: main_result :: out u32 = low:32[R0]

000008f8:
000008fc: R31 := R31 - 0x10
00000903: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000908: R8 := 5
00000910: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000917: R8 := pad:64[mem[R31 + 8, el]:u32]
0000091d: #4 := 31:0[R8] - 6
00000922: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 5
00000927: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFB
0000092b: ZF := #4 + 1 = 0
0000092f: NF := 31:31[#4 + 1]
00000933: R8 := pad:64[#4 + 1]
0000093f: when ZF goto %00000938
00000940: goto %0000093b

0000093b:
0000093c: R8 := 1
00000942: goto %0000093e

00000938:
00000939: R8 := 0
00000941: goto %0000093e

0000093e:
00000948: when 0:0[R8] goto %00000946
00000c16: goto %0000095d

0000095d:
00000960: goto %0000095e

0000095e:
00000964: R8 := 6
0000096c: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000970: goto %00000946

00000946:
00000950: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000956: R31 := R31 + 0x10
0000095b: call R30 with noreturn

00000c17: sub register_tm_clones(register_tm_clones_result)
00000c2b: register_tm_clones_result :: out u32 = low:32[R0]

0000085e:
00000861: R0 := 0x11000
00000867: R0 := R0 + 0x30
0000086c: R1 := 0x11000
00000872: R1 := R1 + 0x30
00000879: R1 := R1 + ~R0 + 1
0000087f: R2 := 0.63:63[R1]
00000886: R1 := R2 + (R1 ~>> 3)
0000088c: R1 := extend:64[63:1[R1]]
00000892: when R1 = 0 goto %00000890
00000c18: goto %000009ad

000009ad:
000009b0: R2 := 0x10000
000009b7: R2 := mem[R2 + 0xFE0, el]:u64
000009bc: when R2 = 0 goto %00000890
00000c19: goto %000009c0

00000890:
00000898: call R30 with noreturn

000009c0:
000009c4: R16 := R2
000009c9: call R16 with noreturn
