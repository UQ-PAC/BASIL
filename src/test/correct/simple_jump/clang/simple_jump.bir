00000625: program
000005f1: sub __cxa_finalize(__cxa_finalize_result)
00000626: __cxa_finalize_result :: out u32 = low:32[R0]

00000397:
0000048f: R16 := 0x11000
00000496: R17 := mem[R16 + 8, el]:u64
0000049c: R16 := R16 + 8
000004a1: call R17 with noreturn

000005f2: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000627: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028a:
0000028e: #3 := R31 - 0x20
00000294: mem := mem with [#3, el]:u64 <- R29
0000029a: mem := mem with [#3 + 8, el]:u64 <- R30
0000029e: R31 := #3
000002a4: R29 := R31
000002ac: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b1: R19 := 0x11000
000002b8: R0 := pad:64[mem[R19 + 0x30]]
000002bf: when 31:0[R0] <> 0 goto %000002bd
0000061a: goto %00000360

00000360:
00000363: R0 := 0x10000
0000036a: R0 := mem[R0 + 0xFC8, el]:u64
00000370: when R0 = 0 goto %0000036e
0000061b: goto %00000387

00000387:
0000038a: R0 := 0x11000
00000391: R0 := mem[R0 + 0x28, el]:u64
00000396: R30 := 0x6F0
00000399: call @__cxa_finalize with return %0000036e

0000036e:
00000376: R30 := 0x6F4
00000378: call @deregister_tm_clones with return %0000037a

0000037a:
0000037d: R0 := 1
00000385: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000061c: goto %000002bd

000002bd:
000002c7: R19 := mem[R31 + 0x10, el]:u64
000002ce: R29 := mem[R31, el]:u64
000002d3: R30 := mem[R31 + 8, el]:u64
000002d7: R31 := R31 + 0x20
000002dc: call R30 with noreturn

000005f6: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000628: __libc_start_main_main :: in u64 = R0
00000629: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000062a: __libc_start_main_arg3 :: in out u64 = R2
0000062b: __libc_start_main_auxv :: in out u64 = R3
0000062c: __libc_start_main_result :: out u32 = low:32[R0]

000001e3:
00000479: R16 := 0x11000
00000480: R17 := mem[R16, el]:u64
00000486: R16 := R16
0000048b: call R17 with noreturn

000005f7: sub _fini(_fini_result)
0000062d: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005f8: sub _init(_init_result)
0000062e: _init_result :: out u32 = low:32[R0]

00000544:
0000054a: #6 := R31 - 0x10
00000550: mem := mem with [#6, el]:u64 <- R29
00000556: mem := mem with [#6 + 8, el]:u64 <- R30
0000055a: R31 := #6
00000560: R29 := R31
00000565: R30 := 0x590
00000567: call @call_weak_fn with return %00000569

00000569:
0000056e: R29 := mem[R31, el]:u64
00000573: R30 := mem[R31 + 8, el]:u64
00000577: R31 := R31 + 0x10
0000057c: call R30 with noreturn

000005f9: sub _start(_start_result)
0000062f: _start_result :: out u32 = low:32[R0]

000001a4:
000001a9: R29 := 0
000001ae: R30 := 0
000001b4: R5 := R0
000001bb: R1 := mem[R31, el]:u64
000001c1: R2 := R31 + 8
000001c7: R6 := R31
000001cc: R0 := 0x10000
000001d3: R0 := mem[R0 + 0xFD8, el]:u64
000001d8: R3 := 0
000001dd: R4 := 0
000001e2: R30 := 0x630
000001e5: call @__libc_start_main with return %000001e7

000001e7:
000001ea: R30 := 0x634
000001ed: call @abort with return %0000061d

0000061d:
0000061e: call @call_weak_fn with noreturn

000005fc: sub abort()


000001eb:
000004bb: R16 := 0x11000
000004c2: R17 := mem[R16 + 0x18, el]:u64
000004c8: R16 := R16 + 0x18
000004cd: call R17 with noreturn

000005fd: sub call_weak_fn(call_weak_fn_result)
00000630: call_weak_fn_result :: out u32 = low:32[R0]

000001ef:
000001f2: R0 := 0x10000
000001f9: R0 := mem[R0 + 0xFD0, el]:u64
000001ff: when R0 = 0 goto %000001fd
0000061f: goto %000003d7

000001fd:
00000205: call R30 with noreturn

000003d7:
000003da: goto @__gmon_start__

000003d8:
000004a5: R16 := 0x11000
000004ac: R17 := mem[R16 + 0x10, el]:u64
000004b2: R16 := R16 + 0x10
000004b7: call R17 with noreturn

000005ff: sub deregister_tm_clones(deregister_tm_clones_result)
00000631: deregister_tm_clones_result :: out u32 = low:32[R0]

0000020b:
0000020e: R0 := 0x11000
00000214: R0 := R0 + 0x30
00000219: R1 := 0x11000
0000021f: R1 := R1 + 0x30
00000225: #1 := ~R0
0000022a: #2 := R1 + ~R0
00000230: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000236: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023a: ZF := #2 + 1 = 0
0000023e: NF := 63:63[#2 + 1]
00000244: when ZF goto %00000242
00000620: goto %000003b9

000003b9:
000003bc: R1 := 0x10000
000003c3: R1 := mem[R1 + 0xFC0, el]:u64
000003c8: when R1 = 0 goto %00000242
00000621: goto %000003cc

00000242:
0000024a: call R30 with noreturn

000003cc:
000003d0: R16 := R1
000003d5: call R16 with noreturn

00000602: sub frame_dummy(frame_dummy_result)
00000632: frame_dummy_result :: out u32 = low:32[R0]

000002e2:
000002e4: call @register_tm_clones with noreturn

00000603: sub main(main_argc, main_argv, main_result)
00000633: main_argc :: in u32 = low:32[R0]
00000634: main_argv :: in out u64 = R1
00000635: main_result :: out u32 = low:32[R0]

000002e6:
000002ea: R31 := R31 - 0x10
000002f1: mem := mem with [R31 + 0xC, el]:u32 <- 0
000002f6: R8 := 5
000002fe: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000305: R8 := pad:64[mem[R31 + 8, el]:u32]
0000030b: #4 := 31:0[R8] - 6
00000310: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 5
00000315: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFB
00000319: ZF := #4 + 1 = 0
0000031d: NF := 31:31[#4 + 1]
00000321: R8 := pad:64[#4 + 1]
0000032d: when ZF goto %00000326
0000032e: goto %00000329

00000329:
0000032a: R8 := 1
00000330: goto %0000032c

00000326:
00000327: R8 := 0
0000032f: goto %0000032c

0000032c:
00000336: when 0:0[R8] goto %00000334
00000622: goto %0000034b

0000034b:
0000034e: goto %0000034c

0000034c:
00000352: R8 := 6
0000035a: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000035e: goto %00000334

00000334:
0000033e: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000344: R31 := R31 + 0x10
00000349: call R30 with noreturn

00000605: sub register_tm_clones(register_tm_clones_result)
00000636: register_tm_clones_result :: out u32 = low:32[R0]

0000024c:
0000024f: R0 := 0x11000
00000255: R0 := R0 + 0x30
0000025a: R1 := 0x11000
00000260: R1 := R1 + 0x30
00000267: R1 := R1 + ~R0 + 1
0000026d: R2 := 0.63:63[R1]
00000274: R1 := R2 + (R1 ~>> 3)
0000027a: R1 := extend:64[63:1[R1]]
00000280: when R1 = 0 goto %0000027e
00000623: goto %0000039b

0000039b:
0000039e: R2 := 0x10000
000003a5: R2 := mem[R2 + 0xFE0, el]:u64
000003aa: when R2 = 0 goto %0000027e
00000624: goto %000003ae

0000027e:
00000286: call R30 with noreturn

000003ae:
000003b2: R16 := R2
000003b7: call R16 with noreturn
