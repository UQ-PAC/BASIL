000007be: program
00000786: sub __cxa_finalize(__cxa_finalize_result)
000007bf: __cxa_finalize_result :: out u32 = low:32[R0]

000004ea:
000005e2: R16 := 0x20000
000005e9: R17 := mem[R16 + 8, el]:u64
000005ef: R16 := R16 + 8
000005f4: call R17 with noreturn

00000787: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000007c0: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000030f:
00000313: #3 := R31 - 0x20
00000319: mem := mem with [#3, el]:u64 <- R29
0000031f: mem := mem with [#3 + 8, el]:u64 <- R30
00000323: R31 := #3
00000329: R29 := R31
00000331: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000336: R19 := 0x20000
0000033d: R0 := pad:64[mem[R19 + 0x50]]
00000343: when 0:0[R0] goto %00000341
000007b4: goto %000004b3

000004b3:
000004b6: R0 := 0x1F000
000004bd: R0 := mem[R0 + 0xFC8, el]:u64
000004c3: when R0 = 0 goto %000004c1
000007b5: goto %000004da

000004da:
000004dd: R0 := 0x20000
000004e4: R0 := mem[R0 + 0x28, el]:u64
000004e9: R30 := 0x730
000004ec: call @__cxa_finalize with return %000004c1

000004c1:
000004c9: R30 := 0x734
000004cb: call @deregister_tm_clones with return %000004cd

000004cd:
000004d0: R0 := 1
000004d8: mem := mem with [R19 + 0x50] <- 7:0[R0]
000007b6: goto %00000341

00000341:
0000034b: R19 := mem[R31 + 0x10, el]:u64
00000352: R29 := mem[R31, el]:u64
00000357: R30 := mem[R31 + 8, el]:u64
0000035b: R31 := R31 + 0x20
00000360: call R30 with noreturn

0000078b: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000007c1: __libc_start_main_main :: in u64 = R0
000007c2: __libc_start_main_arg2 :: in u32 = low:32[R1]
000007c3: __libc_start_main_arg3 :: in out u64 = R2
000007c4: __libc_start_main_auxv :: in out u64 = R3
000007c5: __libc_start_main_result :: out u32 = low:32[R0]

00000268:
000005cc: R16 := 0x20000
000005d3: R17 := mem[R16, el]:u64
000005d9: R16 := R16
000005de: call R17 with noreturn

0000078c: sub _fini(_fini_result)
000007c6: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000078d: sub _init(_init_result)
000007c7: _init_result :: out u32 = low:32[R0]

000006b8:
000006be: #6 := R31 - 0x10
000006c4: mem := mem with [#6, el]:u64 <- R29
000006ca: mem := mem with [#6 + 8, el]:u64 <- R30
000006ce: R31 := #6
000006d4: R29 := R31
000006d9: R30 := 0x5D8
000006db: call @call_weak_fn with return %000006dd

000006dd:
000006e2: R29 := mem[R31, el]:u64
000006e7: R30 := mem[R31 + 8, el]:u64
000006eb: R31 := R31 + 0x10
000006f0: call R30 with noreturn

0000078e: sub _start(_start_result)
000007c8: _start_result :: out u32 = low:32[R0]

00000229:
0000022e: R29 := 0
00000233: R30 := 0
00000239: R5 := R0
00000240: R1 := mem[R31, el]:u64
00000246: R2 := R31 + 8
0000024c: R6 := R31
00000251: R0 := 0x1F000
00000258: R0 := mem[R0 + 0xFD8, el]:u64
0000025d: R3 := 0
00000262: R4 := 0
00000267: R30 := 0x670
0000026a: call @__libc_start_main with return %0000026c

0000026c:
0000026f: R30 := 0x674
00000272: call @abort with return %000007b7

000007b7:
000007b8: call @call_weak_fn with noreturn

00000791: sub abort()


00000270:
0000060e: R16 := 0x20000
00000615: R17 := mem[R16 + 0x18, el]:u64
0000061b: R16 := R16 + 0x18
00000620: call R17 with noreturn

00000792: sub add_six(add_six_result)
000007c9: add_six_result :: out u32 = low:32[R0]

0000039c:
0000039f: R0 := 0x20000
000003a5: R0 := R0 + 0x30
000003ac: R0 := pad:64[mem[R0, el]:u32]
000003b2: R1 := pad:64[31:0[R0] + 6]
000003b7: R0 := 0x20000
000003bd: R0 := R0 + 0x30
000003c5: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003cc: call R30 with noreturn

00000793: sub add_two(add_two_result)
000007ca: add_two_result :: out u32 = low:32[R0]

0000036a:
0000036d: R0 := 0x20000
00000373: R0 := R0 + 0x30
0000037a: R0 := pad:64[mem[R0, el]:u32]
00000380: R1 := pad:64[31:0[R0] + 2]
00000385: R0 := 0x20000
0000038b: R0 := R0 + 0x30
00000393: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000039a: call R30 with noreturn

00000794: sub call_weak_fn(call_weak_fn_result)
000007cb: call_weak_fn_result :: out u32 = low:32[R0]

00000274:
00000277: R0 := 0x1F000
0000027e: R0 := mem[R0 + 0xFD0, el]:u64
00000284: when R0 = 0 goto %00000282
000007b9: goto %0000052a

00000282:
0000028a: call R30 with noreturn

0000052a:
0000052d: goto @__gmon_start__

0000052b:
000005f8: R16 := 0x20000
000005ff: R17 := mem[R16 + 0x10, el]:u64
00000605: R16 := R16 + 0x10
0000060a: call R17 with noreturn

00000796: sub deregister_tm_clones(deregister_tm_clones_result)
000007cc: deregister_tm_clones_result :: out u32 = low:32[R0]

00000290:
00000293: R0 := 0x20000
00000299: R0 := R0 + 0x50
0000029e: R1 := 0x20000
000002a4: R1 := R1 + 0x50
000002aa: #1 := ~R0
000002af: #2 := R1 + ~R0
000002b5: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002bb: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002bf: ZF := #2 + 1 = 0
000002c3: NF := 63:63[#2 + 1]
000002c9: when ZF goto %000002c7
000007ba: goto %0000050c

0000050c:
0000050f: R1 := 0x1F000
00000516: R1 := mem[R1 + 0xFC0, el]:u64
0000051b: when R1 = 0 goto %000002c7
000007bb: goto %0000051f

000002c7:
000002cf: call R30 with noreturn

0000051f:
00000523: R16 := R1
00000528: call R16 with noreturn

00000799: sub frame_dummy(frame_dummy_result)
000007cd: frame_dummy_result :: out u32 = low:32[R0]

00000366:
00000368: call @register_tm_clones with noreturn

0000079a: sub main(main_argc, main_argv, main_result)
000007ce: main_argc :: in u32 = low:32[R0]
000007cf: main_argv :: in out u64 = R1
000007d0: main_result :: out u32 = low:32[R0]

00000400:
00000404: #4 := R31 - 0x40
0000040a: mem := mem with [#4, el]:u64 <- R29
00000410: mem := mem with [#4 + 8, el]:u64 <- R30
00000414: R31 := #4
0000041a: R29 := R31
00000422: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000042a: mem := mem with [R31 + 0x10, el]:u64 <- R1
0000042f: R0 := 0x20000
00000435: R0 := R0 + 0x38
0000043b: R2 := R31 + 0x28
00000441: R3 := R0
00000448: R0 := mem[R3, el]:u64
0000044d: R1 := mem[R3 + 8, el]:u64
00000455: mem := mem with [R2, el]:u64 <- R0
0000045b: mem := mem with [R2 + 8, el]:u64 <- R1
00000462: R0 := mem[R3 + 0x10, el]:u64
0000046a: mem := mem with [R2 + 0x10, el]:u64 <- R0
00000471: R0 := mem[R31 + 0x28, el]:u64
00000476: R30 := 0x7F8
00000479: call R0 with return %0000047b

0000047b:
00000480: R0 := mem[R31 + 0x30, el]:u64
00000485: R30 := 0x800
00000488: call R0 with return %0000048a

0000048a:
0000048f: R0 := mem[R31 + 0x38, el]:u64
00000494: R30 := 0x808
00000497: call R0 with return %00000499

00000499:
0000049c: R0 := 0
000004a3: R29 := mem[R31, el]:u64
000004a8: R30 := mem[R31 + 8, el]:u64
000004ac: R31 := R31 + 0x40
000004b1: call R30 with noreturn

0000079b: sub register_tm_clones(register_tm_clones_result)
000007d1: register_tm_clones_result :: out u32 = low:32[R0]

000002d1:
000002d4: R0 := 0x20000
000002da: R0 := R0 + 0x50
000002df: R1 := 0x20000
000002e5: R1 := R1 + 0x50
000002ec: R1 := R1 + ~R0 + 1
000002f2: R2 := 0.63:63[R1]
000002f9: R1 := R2 + (R1 ~>> 3)
000002ff: R1 := extend:64[63:1[R1]]
00000305: when R1 = 0 goto %00000303
000007bc: goto %000004ee

000004ee:
000004f1: R2 := 0x1F000
000004f8: R2 := mem[R2 + 0xFE0, el]:u64
000004fd: when R2 = 0 goto %00000303
000007bd: goto %00000501

00000303:
0000030b: call R30 with noreturn

00000501:
00000505: R16 := R2
0000050a: call R16 with noreturn

0000079e: sub sub_seven(sub_seven_result)
000007d2: sub_seven_result :: out u32 = low:32[R0]

000003ce:
000003d1: R0 := 0x20000
000003d7: R0 := R0 + 0x30
000003de: R0 := pad:64[mem[R0, el]:u32]
000003e4: R1 := pad:64[31:0[R0] - 7]
000003e9: R0 := 0x20000
000003ef: R0 := R0 + 0x30
000003f7: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003fe: call R30 with noreturn
