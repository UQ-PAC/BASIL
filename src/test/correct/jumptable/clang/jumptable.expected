var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2052bv64);
const $x_addr: bv64;
axiom ($x_addr == 69680bv64);
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function gamma_load128(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 15bv64)] && (gammaMap[bvadd64(index, 14bv64)] && (gammaMap[bvadd64(index, 13bv64)] && (gammaMap[bvadd64(index, 12bv64)] && (gammaMap[bvadd64(index, 11bv64)] && (gammaMap[bvadd64(index, 10bv64)] && (gammaMap[bvadd64(index, 9bv64)] && (gammaMap[bvadd64(index, 8bv64)] && (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))))))))))
}

function gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function gamma_store128(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value][bvadd64(index, 8bv64) := value][bvadd64(index, 9bv64) := value][bvadd64(index, 10bv64) := value][bvadd64(index, 11bv64) := value][bvadd64(index, 12bv64) := value][bvadd64(index, 13bv64) := value][bvadd64(index, 14bv64) := value][bvadd64(index, 15bv64) := value]
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function memory_load128_le(memory: [bv64]bv8, index: bv64) returns (bv128) {
  (memory[bvadd64(index, 15bv64)] ++ (memory[bvadd64(index, 14bv64)] ++ (memory[bvadd64(index, 13bv64)] ++ (memory[bvadd64(index, 12bv64)] ++ (memory[bvadd64(index, 11bv64)] ++ (memory[bvadd64(index, 10bv64)] ++ (memory[bvadd64(index, 9bv64)] ++ (memory[bvadd64(index, 8bv64)] ++ (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))))))))))
}

function memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store128_le(memory: [bv64]bv8, index: bv64, value: bv128) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]][bvadd64(index, 8bv64) := value[72:64]][bvadd64(index, 9bv64) := value[80:72]][bvadd64(index, 10bv64) := value[88:80]][bvadd64(index, 11bv64) := value[96:88]][bvadd64(index, 12bv64) := value[104:96]][bvadd64(index, 13bv64) := value[112:104]][bvadd64(index, 14bv64) := value[120:112]][bvadd64(index, 15bv64) := value[128:120]]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure main(main_argc: bv32, Gamma_main_argc: bool, main_argv: bv64, Gamma_main_argv: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (main_argv_out: bv64, Gamma_main_argv_out: bool, main_result: bv32, Gamma_main_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
  requires (memory_load8_le(mem, 69664bv64) == 0bv8);
  requires (memory_load8_le(mem, 69665bv64) == 0bv8);
  requires (memory_load8_le(mem, 69666bv64) == 0bv8);
  requires (memory_load8_le(mem, 69667bv64) == 0bv8);
  requires (memory_load8_le(mem, 69668bv64) == 0bv8);
  requires (memory_load8_le(mem, 69669bv64) == 0bv8);
  requires (memory_load8_le(mem, 69670bv64) == 0bv8);
  requires (memory_load8_le(mem, 69671bv64) == 0bv8);
  requires (memory_load8_le(mem, 69672bv64) == 40bv8);
  requires (memory_load8_le(mem, 69673bv64) == 16bv8);
  requires (memory_load8_le(mem, 69674bv64) == 1bv8);
  requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  requires (memory_load8_le(mem, 69680bv64) == 5bv8);
  requires (memory_load8_le(mem, 69681bv64) == 0bv8);
  requires (memory_load8_le(mem, 69682bv64) == 0bv8);
  requires (memory_load8_le(mem, 69683bv64) == 0bv8);
{
  var #5: bv64;
  var #6: bv64;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var Gamma_R8: bool;
  var Gamma_V0: bool;
  var R0: bv64;
  var R1: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  var R8: bv64;
  var V0: bv128;
  R0, Gamma_R0 := zero_extend32_32(main_argc), Gamma_main_argc;
  R1, Gamma_R1 := main_argv, Gamma_main_argv;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lmain:
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551536bv64), Gamma_R31;
    #5, Gamma_#5 := bvadd64(R31, 64bv64), Gamma_R31;
    call rely();
    assert (L(mem, #5) ==> Gamma_R29);
    mem, Gamma_mem := memory_store64_le(mem, #5, R29), gamma_store64(Gamma_mem, #5, Gamma_R29);
    call rely();
    assert (L(mem, bvadd64(#5, 8bv64)) ==> Gamma_R30);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#5, 8bv64), R30), gamma_store64(Gamma_mem, bvadd64(#5, 8bv64), Gamma_R30);
    R29, Gamma_R29 := bvadd64(R31, 64bv64), Gamma_R31;
    R8, Gamma_R8 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R8);
    call rely();
    assert (L(mem, bvadd64(R29, 18446744073709551612bv64)) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_mem, bvadd64(R29, 18446744073709551612bv64), true);
    call rely();
    assert (L(mem, bvadd64(R29, 18446744073709551608bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R29, 18446744073709551608bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R29, 18446744073709551608bv64), Gamma_R0);
    call rely();
    assert (L(mem, bvadd64(R29, 18446744073709551600bv64)) ==> Gamma_R1);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(R29, 18446744073709551600bv64), R1), gamma_store64(Gamma_mem, bvadd64(R29, 18446744073709551600bv64), Gamma_R1);
    R8, Gamma_R8 := 65536bv64, true;
    R8, Gamma_R8 := bvadd64(R8, 3520bv64), Gamma_R8;
    call rely();
    V0, Gamma_V0 := memory_load128_le(mem, R8), (gamma_load128(Gamma_mem, R8) || L(mem, R8));
    stack, Gamma_stack := memory_store128_le(stack, bvadd64(R31, 16bv64), V0), gamma_store128(Gamma_stack, bvadd64(R31, 16bv64), Gamma_V0);
    call rely();
    R8, Gamma_R8 := memory_load64_le(mem, bvadd64(R8, 16bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 16bv64)) || L(mem, bvadd64(R8, 16bv64)));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 32bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 32bv64), Gamma_R8);
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R30, Gamma_R30 := 2000bv64, true;
    //UNRESOLVED: call R8
    assume false;
    goto l00000433;
  l00000433:
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 24bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 24bv64));
    R30, Gamma_R30 := 2008bv64, true;
    //UNRESOLVED: call R8
    assume false;
    goto l00000442;
  l00000442:
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    R30, Gamma_R30 := 2016bv64, true;
    //UNRESOLVED: call R8
    assume false;
    goto l00000451;
  l00000451:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 12bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    #6, Gamma_#6 := bvadd64(R31, 64bv64), Gamma_R31;
    call rely();
    R29, Gamma_R29 := memory_load64_le(mem, #6), (gamma_load64(Gamma_mem, #6) || L(mem, #6));
    call rely();
    R30, Gamma_R30 := memory_load64_le(mem, bvadd64(#6, 8bv64)), (gamma_load64(Gamma_mem, bvadd64(#6, 8bv64)) || L(mem, bvadd64(#6, 8bv64)));
    R31, Gamma_R31 := bvadd64(R31, 80bv64), Gamma_R31;
    main_argv_out, Gamma_main_argv_out := R1, Gamma_R1;
    main_result, Gamma_main_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}
