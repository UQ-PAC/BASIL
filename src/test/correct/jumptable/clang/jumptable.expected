var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_V0: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} V0: bv128;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2116bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 131120bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load128(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 15bv64)] && (gammaMap[bvadd64(index, 14bv64)] && (gammaMap[bvadd64(index, 13bv64)] && (gammaMap[bvadd64(index, 12bv64)] && (gammaMap[bvadd64(index, 11bv64)] && (gammaMap[bvadd64(index, 10bv64)] && (gammaMap[bvadd64(index, 9bv64)] && (gammaMap[bvadd64(index, 8bv64)] && (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))))))))))
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store128(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value][bvadd64(index, 8bv64) := value][bvadd64(index, 9bv64) := value][bvadd64(index, 10bv64) := value][bvadd64(index, 11bv64) := value][bvadd64(index, 12bv64) := value][bvadd64(index, 13bv64) := value][bvadd64(index, 14bv64) := value][bvadd64(index, 15bv64) := value]
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load128_le(memory: [bv64]bv8, index: bv64) returns (bv128) {
  (memory[bvadd64(index, 15bv64)] ++ (memory[bvadd64(index, 14bv64)] ++ (memory[bvadd64(index, 13bv64)] ++ (memory[bvadd64(index, 12bv64)] ++ (memory[bvadd64(index, 11bv64)] ++ (memory[bvadd64(index, 10bv64)] ++ (memory[bvadd64(index, 9bv64)] ++ (memory[bvadd64(index, 8bv64)] ++ (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))))))))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store128_le(memory: [bv64]bv8, index: bv64, value: bv128) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]][bvadd64(index, 8bv64) := value[72:64]][bvadd64(index, 9bv64) := value[80:72]][bvadd64(index, 10bv64) := value[88:80]][bvadd64(index, 11bv64) := value[96:88]][bvadd64(index, 12bv64) := value[104:96]][bvadd64(index, 13bv64) := value[112:104]][bvadd64(index, 14bv64) := value[120:112]][bvadd64(index, 15bv64) := value[128:120]]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2116bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2117bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2118bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2119bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free ensures (memory_load64_le(mem, 130472bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 130488bv64) == 1960bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 130480bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 130464bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 1980bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_V0, Gamma_mem, Gamma_stack, R0, R29, R30, R31, R8, V0, mem, stack;
  free requires (memory_load8_le(mem, 131104bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131105bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131106bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131107bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131108bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131109bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131110bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131111bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131112bv64) == 40bv8);
  free requires (memory_load8_le(mem, 131113bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131114bv64) == 2bv8);
  free requires (memory_load8_le(mem, 131115bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131116bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131117bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131118bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131119bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131120bv64) == 5bv8);
  free requires (memory_load8_le(mem, 131121bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131122bv64) == 0bv8);
  free requires (memory_load8_le(mem, 131123bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2116bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2117bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2118bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2119bv64) == 0bv8);
  free requires (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free requires (memory_load64_le(mem, 130472bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 130488bv64) == 1960bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 130480bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 130464bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 130496bv64) == 1980bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 2116bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2117bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2118bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2119bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free ensures (memory_load64_le(mem, 130472bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 130488bv64) == 1960bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 130480bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 130464bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 1980bv64);

implementation main()
{
  var #5: bv64;
  var #6: bv64;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  lmain:
    assume {:captureState "lmain"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551536bv64), Gamma_R31;
    #5, Gamma_#5 := bvadd64(R31, 64bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #5, R29), gamma_store64(Gamma_stack, #5, Gamma_R29);
    assume {:captureState "%000003c9"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#5, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#5, 8bv64), Gamma_R30);
    assume {:captureState "%000003cf"} true;
    R29, Gamma_R29 := bvadd64(R31, 64bv64), Gamma_R31;
    R8, Gamma_R8 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R8);
    assume {:captureState "%000003e2"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64), true);
    assume {:captureState "%000003e9"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551608bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551608bv64), Gamma_R0);
    assume {:captureState "%000003f1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R29, 18446744073709551600bv64), R1), gamma_store64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64), Gamma_R1);
    assume {:captureState "%000003f9"} true;
    R8, Gamma_R8 := 126976bv64, true;
    R8, Gamma_R8 := bvadd64(R8, 3504bv64), Gamma_R8;
    call rely();
    V0, Gamma_V0 := memory_load128_le(mem, R8), (gamma_load128(Gamma_mem, R8) || L(mem, R8));
    stack, Gamma_stack := memory_store128_le(stack, bvadd64(R31, 16bv64), V0), gamma_store128(Gamma_stack, bvadd64(R31, 16bv64), Gamma_V0);
    assume {:captureState "%00000413"} true;
    call rely();
    R8, Gamma_R8 := memory_load64_le(mem, bvadd64(R8, 16bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 16bv64)) || L(mem, bvadd64(R8, 16bv64)));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 32bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 32bv64), Gamma_R8);
    assume {:captureState "%00000422"} true;
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R30, Gamma_R30 := 2064bv64, true;
    //UNRESOLVED: call R8
    assert false;
    goto l00000433;
  l00000433:
    assume {:captureState "l00000433"} true;
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 24bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 24bv64));
    R30, Gamma_R30 := 2072bv64, true;
    //UNRESOLVED: call R8
    assert false;
    goto l00000442;
  l00000442:
    assume {:captureState "l00000442"} true;
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    R30, Gamma_R30 := 2080bv64, true;
    //UNRESOLVED: call R8
    assert false;
    goto l00000451;
  l00000451:
    assume {:captureState "l00000451"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 12bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    #6, Gamma_#6 := bvadd64(R31, 64bv64), Gamma_R31;
    R29, Gamma_R29 := memory_load64_le(stack, #6), gamma_load64(Gamma_stack, #6);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(#6, 8bv64)), gamma_load64(Gamma_stack, bvadd64(#6, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 80bv64), Gamma_R31;
    goto main_return;
  main_return:
    assume {:captureState "main_return"} true;
    return;
}

