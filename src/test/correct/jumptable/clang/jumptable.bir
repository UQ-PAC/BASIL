0000076c: program
00000734: sub __cxa_finalize(__cxa_finalize_result)
0000076d: __cxa_finalize_result :: out u32 = low:32[R0]

000004aa:
000005a2: R16 := 0x20000
000005a9: R17 := mem[R16 + 8, el]:u64
000005af: R16 := R16 + 8
000005b4: call R17 with noreturn

00000735: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000076e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002eb:
000002ef: #3 := R31 - 0x20
000002f5: mem := mem with [#3, el]:u64 <- R29
000002fb: mem := mem with [#3 + 8, el]:u64 <- R30
000002ff: R31 := #3
00000305: R29 := R31
0000030d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000312: R19 := 0x20000
00000319: R0 := pad:64[mem[R19 + 0x34]]
0000031f: when 0:0[R0] goto %0000031d
00000762: goto %00000473

00000473:
00000476: R0 := 0x1F000
0000047d: R0 := mem[R0 + 0xFC8, el]:u64
00000483: when R0 = 0 goto %00000481
00000763: goto %0000049a

0000049a:
0000049d: R0 := 0x20000
000004a4: R0 := mem[R0 + 0x28, el]:u64
000004a9: R30 := 0x770
000004ac: call @__cxa_finalize with return %00000481

00000481:
00000489: R30 := 0x774
0000048b: call @deregister_tm_clones with return %0000048d

0000048d:
00000490: R0 := 1
00000498: mem := mem with [R19 + 0x34] <- 7:0[R0]
00000764: goto %0000031d

0000031d:
00000327: R19 := mem[R31 + 0x10, el]:u64
0000032e: R29 := mem[R31, el]:u64
00000333: R30 := mem[R31 + 8, el]:u64
00000337: R31 := R31 + 0x20
0000033c: call R30 with noreturn

00000739: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000076f: __libc_start_main_main :: in u64 = R0
00000770: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000771: __libc_start_main_arg3 :: in out u64 = R2
00000772: __libc_start_main_auxv :: in out u64 = R3
00000773: __libc_start_main_result :: out u32 = low:32[R0]

00000244:
0000058c: R16 := 0x20000
00000593: R17 := mem[R16, el]:u64
00000599: R16 := R16
0000059e: call R17 with noreturn

0000073a: sub _fini(_fini_result)
00000774: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000073b: sub _init(_init_result)
00000775: _init_result :: out u32 = low:32[R0]

0000066f:
00000675: #8 := R31 - 0x10
0000067b: mem := mem with [#8, el]:u64 <- R29
00000681: mem := mem with [#8 + 8, el]:u64 <- R30
00000685: R31 := #8
0000068b: R29 := R31
00000690: R30 := 0x610
00000692: call @call_weak_fn with return %00000694

00000694:
00000699: R29 := mem[R31, el]:u64
0000069e: R30 := mem[R31 + 8, el]:u64
000006a2: R31 := R31 + 0x10
000006a7: call R30 with noreturn

0000073c: sub _start(_start_result)
00000776: _start_result :: out u32 = low:32[R0]

00000205:
0000020a: R29 := 0
0000020f: R30 := 0
00000215: R5 := R0
0000021c: R1 := mem[R31, el]:u64
00000222: R2 := R31 + 8
00000228: R6 := R31
0000022d: R0 := 0x1F000
00000234: R0 := mem[R0 + 0xFD8, el]:u64
00000239: R3 := 0
0000023e: R4 := 0
00000243: R30 := 0x6B0
00000246: call @__libc_start_main with return %00000248

00000248:
0000024b: R30 := 0x6B4
0000024e: call @abort with return %00000765

00000765:
00000766: call @call_weak_fn with noreturn

0000073f: sub abort()


0000024c:
000005ce: R16 := 0x20000
000005d5: R17 := mem[R16 + 0x18, el]:u64
000005db: R16 := R16 + 0x18
000005e0: call R17 with noreturn

00000740: sub add_six(add_six_result)
00000777: add_six_result :: out u32 = low:32[R0]

00000365:
00000368: R9 := 0x20000
0000036f: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000375: R8 := pad:64[31:0[R8] + 6]
0000037d: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000382: call R30 with noreturn

00000741: sub add_two(add_two_result)
00000778: add_two_result :: out u32 = low:32[R0]

00000346:
00000349: R9 := 0x20000
00000350: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000356: R8 := pad:64[31:0[R8] + 2]
0000035e: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000363: call R30 with noreturn

00000742: sub call_weak_fn(call_weak_fn_result)
00000779: call_weak_fn_result :: out u32 = low:32[R0]

00000250:
00000253: R0 := 0x1F000
0000025a: R0 := mem[R0 + 0xFD0, el]:u64
00000260: when R0 = 0 goto %0000025e
00000767: goto %000004ea

0000025e:
00000266: call R30 with noreturn

000004ea:
000004ed: goto @__gmon_start__

000004eb:
000005b8: R16 := 0x20000
000005bf: R17 := mem[R16 + 0x10, el]:u64
000005c5: R16 := R16 + 0x10
000005ca: call R17 with noreturn

00000744: sub deregister_tm_clones(deregister_tm_clones_result)
0000077a: deregister_tm_clones_result :: out u32 = low:32[R0]

0000026c:
0000026f: R0 := 0x20000
00000275: R0 := R0 + 0x38
0000027a: R1 := 0x20000
00000280: R1 := R1 + 0x38
00000286: #1 := ~R0
0000028b: #2 := R1 + ~R0
00000291: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000297: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000029b: ZF := #2 + 1 = 0
0000029f: NF := 63:63[#2 + 1]
000002a5: when ZF goto %000002a3
00000768: goto %000004cc

000004cc:
000004cf: R1 := 0x1F000
000004d6: R1 := mem[R1 + 0xFC0, el]:u64
000004db: when R1 = 0 goto %000002a3
00000769: goto %000004df

000002a3:
000002ab: call R30 with noreturn

000004df:
000004e3: R16 := R1
000004e8: call R16 with noreturn

00000747: sub frame_dummy(frame_dummy_result)
0000077b: frame_dummy_result :: out u32 = low:32[R0]

00000342:
00000344: call @register_tm_clones with noreturn

00000748: sub main(main_argc, main_argv, main_result)
0000077c: main_argc :: in u32 = low:32[R0]
0000077d: main_argv :: in out u64 = R1
0000077e: main_result :: out u32 = low:32[R0]

000003b9:
000003bd: R31 := R31 - 0x50
000003c3: #5 := R31 + 0x40
000003c9: mem := mem with [#5, el]:u64 <- R29
000003cf: mem := mem with [#5 + 8, el]:u64 <- R30
000003d5: R29 := R31 + 0x40
000003da: R8 := 0
000003e2: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
000003e9: mem := mem with [R29 - 4, el]:u32 <- 0
000003f1: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
000003f9: mem := mem with [R29 - 0x10, el]:u64 <- R1
000003fe: R8 := 0x1F000
00000404: R8 := R8 + 0xDB0
0000040b: V0 := mem[R8, el]:u128
00000413: mem := mem with [R31 + 0x10, el]:u128 <- V0
0000041a: R8 := mem[R8 + 0x10, el]:u64
00000422: mem := mem with [R31 + 0x20, el]:u64 <- R8
00000429: R8 := mem[R31 + 0x10, el]:u64
0000042e: R30 := 0x810
00000431: call R8 with return %00000433

00000433:
00000438: R8 := mem[R31 + 0x18, el]:u64
0000043d: R30 := 0x818
00000440: call R8 with return %00000442

00000442:
00000447: R8 := mem[R31 + 0x20, el]:u64
0000044c: R30 := 0x820
0000044f: call R8 with return %00000451

00000451:
00000456: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000045c: #6 := R31 + 0x40
00000461: R29 := mem[#6, el]:u64
00000466: R30 := mem[#6 + 8, el]:u64
0000046c: R31 := R31 + 0x50
00000471: call R30 with noreturn

00000749: sub register_tm_clones(register_tm_clones_result)
0000077f: register_tm_clones_result :: out u32 = low:32[R0]

000002ad:
000002b0: R0 := 0x20000
000002b6: R0 := R0 + 0x38
000002bb: R1 := 0x20000
000002c1: R1 := R1 + 0x38
000002c8: R1 := R1 + ~R0 + 1
000002ce: R2 := 0.63:63[R1]
000002d5: R1 := R2 + (R1 ~>> 3)
000002db: R1 := extend:64[63:1[R1]]
000002e1: when R1 = 0 goto %000002df
0000076a: goto %000004ae

000004ae:
000004b1: R2 := 0x1F000
000004b8: R2 := mem[R2 + 0xFE0, el]:u64
000004bd: when R2 = 0 goto %000002df
0000076b: goto %000004c1

000002df:
000002e7: call R30 with noreturn

000004c1:
000004c5: R16 := R2
000004ca: call R16 with noreturn

0000074c: sub sub_seven(sub_seven_result)
00000780: sub_seven_result :: out u32 = low:32[R0]

00000384:
00000387: R9 := 0x20000
0000038e: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000394: #4 := 31:0[R8] - 8
00000399: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 7
0000039e: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFF9
000003a2: ZF := #4 + 1 = 0
000003a6: NF := 31:31[#4 + 1]
000003aa: R8 := pad:64[#4 + 1]
000003b2: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
000003b7: call R30 with noreturn
