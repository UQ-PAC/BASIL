000005f3: program
000005bb: sub __cxa_finalize(__cxa_finalize_result)
000005f4: __cxa_finalize_result :: out u32 = low:32[R0]

000003b6:
000004ae: R16 := 0x20000
000004b5: R17 := mem[R16 + 8, el]:u64
000004bb: R16 := R16 + 8
000004c0: call R17 with noreturn

000005bc: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005f5: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002a3:
000002a7: #3 := R31 - 0x20
000002ad: mem := mem with [#3, el]:u64 <- R29
000002b3: mem := mem with [#3 + 8, el]:u64 <- R30
000002b7: R31 := #3
000002bd: R29 := R31
000002c5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ca: R19 := 0x20000
000002d1: R0 := pad:64[mem[R19 + 0x34]]
000002d7: when 0:0[R0] goto %000002d5
000005e9: goto %0000037f

0000037f:
00000382: R0 := 0x1F000
00000389: R0 := mem[R0 + 0xFC8, el]:u64
0000038f: when R0 = 0 goto %0000038d
000005ea: goto %000003a6

000003a6:
000003a9: R0 := 0x20000
000003b0: R0 := mem[R0 + 0x28, el]:u64
000003b5: R30 := 0x730
000003b8: call @__cxa_finalize with return %0000038d

0000038d:
00000395: R30 := 0x734
00000397: call @deregister_tm_clones with return %00000399

00000399:
0000039c: R0 := 1
000003a4: mem := mem with [R19 + 0x34] <- 7:0[R0]
000005eb: goto %000002d5

000002d5:
000002df: R19 := mem[R31 + 0x10, el]:u64
000002e6: R29 := mem[R31, el]:u64
000002eb: R30 := mem[R31 + 8, el]:u64
000002ef: R31 := R31 + 0x20
000002f4: call R30 with noreturn

000005c0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005f6: __libc_start_main_main :: in u64 = R0
000005f7: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005f8: __libc_start_main_arg3 :: in out u64 = R2
000005f9: __libc_start_main_auxv :: in out u64 = R3
000005fa: __libc_start_main_result :: out u32 = low:32[R0]

000001fc:
00000498: R16 := 0x20000
0000049f: R17 := mem[R16, el]:u64
000004a5: R16 := R16
000004aa: call R17 with noreturn

000005c1: sub _fini(_fini_result)
000005fb: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005c2: sub _init(_init_result)
000005fc: _init_result :: out u32 = low:32[R0]

00000508:
0000050e: #5 := R31 - 0x10
00000514: mem := mem with [#5, el]:u64 <- R29
0000051a: mem := mem with [#5 + 8, el]:u64 <- R30
0000051e: R31 := #5
00000524: R29 := R31
00000529: R30 := 0x5C8
0000052b: call @call_weak_fn with return %0000052d

0000052d:
00000532: R29 := mem[R31, el]:u64
00000537: R30 := mem[R31 + 8, el]:u64
0000053b: R31 := R31 + 0x10
00000540: call R30 with noreturn

000005c3: sub _start(_start_result)
000005fd: _start_result :: out u32 = low:32[R0]

000001bd:
000001c2: R29 := 0
000001c7: R30 := 0
000001cd: R5 := R0
000001d4: R1 := mem[R31, el]:u64
000001da: R2 := R31 + 8
000001e0: R6 := R31
000001e5: R0 := 0x1F000
000001ec: R0 := mem[R0 + 0xFD8, el]:u64
000001f1: R3 := 0
000001f6: R4 := 0
000001fb: R30 := 0x670
000001fe: call @__libc_start_main with return %00000200

00000200:
00000203: R30 := 0x674
00000206: call @abort with return %000005ec

000005ec:
000005ed: call @call_weak_fn with noreturn

000005c6: sub abort()


00000204:
000004da: R16 := 0x20000
000004e1: R17 := mem[R16 + 0x18, el]:u64
000004e7: R16 := R16 + 0x18
000004ec: call R17 with noreturn

000005c7: sub add_six(add_six_result)
000005fe: add_six_result :: out u32 = low:32[R0]

0000031d:
00000320: R8 := 0x20000
00000327: R9 := pad:64[mem[R8 + 0x30, el]:u32]
0000032d: R9 := pad:64[31:0[R9] + 6]
00000335: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
0000033a: call R30 with noreturn

000005c8: sub add_two(add_two_result)
000005ff: add_two_result :: out u32 = low:32[R0]

000002fe:
00000301: R8 := 0x20000
00000308: R9 := pad:64[mem[R8 + 0x30, el]:u32]
0000030e: R9 := pad:64[31:0[R9] + 2]
00000316: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
0000031b: call R30 with noreturn

000005c9: sub call_weak_fn(call_weak_fn_result)
00000600: call_weak_fn_result :: out u32 = low:32[R0]

00000208:
0000020b: R0 := 0x1F000
00000212: R0 := mem[R0 + 0xFD0, el]:u64
00000218: when R0 = 0 goto %00000216
000005ee: goto %000003f6

00000216:
0000021e: call R30 with noreturn

000003f6:
000003f9: goto @__gmon_start__

000003f7:
000004c4: R16 := 0x20000
000004cb: R17 := mem[R16 + 0x10, el]:u64
000004d1: R16 := R16 + 0x10
000004d6: call R17 with noreturn

000005cb: sub deregister_tm_clones(deregister_tm_clones_result)
00000601: deregister_tm_clones_result :: out u32 = low:32[R0]

00000224:
00000227: R0 := 0x20000
0000022d: R0 := R0 + 0x38
00000232: R1 := 0x20000
00000238: R1 := R1 + 0x38
0000023e: #1 := ~R0
00000243: #2 := R1 + ~R0
00000249: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000253: ZF := #2 + 1 = 0
00000257: NF := 63:63[#2 + 1]
0000025d: when ZF goto %0000025b
000005ef: goto %000003d8

000003d8:
000003db: R1 := 0x1F000
000003e2: R1 := mem[R1 + 0xFC0, el]:u64
000003e7: when R1 = 0 goto %0000025b
000005f0: goto %000003eb

0000025b:
00000263: call R30 with noreturn

000003eb:
000003ef: R16 := R1
000003f4: call R16 with noreturn

000005ce: sub frame_dummy(frame_dummy_result)
00000602: frame_dummy_result :: out u32 = low:32[R0]

000002fa:
000002fc: call @register_tm_clones with noreturn

000005cf: sub main(main_argc, main_argv, main_result)
00000603: main_argc :: in u32 = low:32[R0]
00000604: main_argv :: in out u64 = R1
00000605: main_result :: out u32 = low:32[R0]

0000035b:
0000035e: R8 := 0x20000
00000363: R0 := 0
0000036a: R9 := pad:64[mem[R8 + 0x30, el]:u32]
00000370: R9 := pad:64[31:0[R9] + 1]
00000378: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
0000037d: call R30 with noreturn

000005d0: sub register_tm_clones(register_tm_clones_result)
00000606: register_tm_clones_result :: out u32 = low:32[R0]

00000265:
00000268: R0 := 0x20000
0000026e: R0 := R0 + 0x38
00000273: R1 := 0x20000
00000279: R1 := R1 + 0x38
00000280: R1 := R1 + ~R0 + 1
00000286: R2 := 0.63:63[R1]
0000028d: R1 := R2 + (R1 ~>> 3)
00000293: R1 := extend:64[63:1[R1]]
00000299: when R1 = 0 goto %00000297
000005f1: goto %000003ba

000003ba:
000003bd: R2 := 0x1F000
000003c4: R2 := mem[R2 + 0xFE0, el]:u64
000003c9: when R2 = 0 goto %00000297
000005f2: goto %000003cd

00000297:
0000029f: call R30 with noreturn

000003cd:
000003d1: R16 := R2
000003d6: call R16 with noreturn

000005d3: sub sub_seven(sub_seven_result)
00000607: sub_seven_result :: out u32 = low:32[R0]

0000033c:
0000033f: R8 := 0x20000
00000346: R9 := pad:64[mem[R8 + 0x30, el]:u32]
0000034c: R9 := pad:64[31:0[R9] - 7]
00000354: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
00000359: call R30 with noreturn
