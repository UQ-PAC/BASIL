00000654: program
0000061c: sub __cxa_finalize(__cxa_finalize_result)
00000655: __cxa_finalize_result :: out u32 = low:32[R0]

000003b6:
000004ae: R16 := 0x11000
000004b5: R17 := mem[R16 + 8, el]:u64
000004bb: R16 := R16 + 8
000004c0: call R17 with noreturn

0000061d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000656: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002a2:
000002a6: #3 := R31 - 0x20
000002ac: mem := mem with [#3, el]:u64 <- R29
000002b2: mem := mem with [#3 + 8, el]:u64 <- R30
000002b6: R31 := #3
000002bc: R29 := R31
000002c4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c9: R19 := 0x11000
000002d0: R0 := pad:64[mem[R19 + 0x34]]
000002d7: when 31:0[R0] <> 0 goto %000002d5
0000064a: goto %0000037f

0000037f:
00000382: R0 := 0x10000
00000389: R0 := mem[R0 + 0xFC8, el]:u64
0000038f: when R0 = 0 goto %0000038d
0000064b: goto %000003a6

000003a6:
000003a9: R0 := 0x11000
000003b0: R0 := mem[R0 + 0x28, el]:u64
000003b5: R30 := 0x6F0
000003b8: call @__cxa_finalize with return %0000038d

0000038d:
00000395: R30 := 0x6F4
00000397: call @deregister_tm_clones with return %00000399

00000399:
0000039c: R0 := 1
000003a4: mem := mem with [R19 + 0x34] <- 7:0[R0]
0000064c: goto %000002d5

000002d5:
000002df: R19 := mem[R31 + 0x10, el]:u64
000002e6: R29 := mem[R31, el]:u64
000002eb: R30 := mem[R31 + 8, el]:u64
000002ef: R31 := R31 + 0x20
000002f4: call R30 with noreturn

00000621: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000657: __libc_start_main_main :: in u64 = R0
00000658: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000659: __libc_start_main_arg3 :: in out u64 = R2
0000065a: __libc_start_main_auxv :: in out u64 = R3
0000065b: __libc_start_main_result :: out u32 = low:32[R0]

000001fb:
00000498: R16 := 0x11000
0000049f: R17 := mem[R16, el]:u64
000004a5: R16 := R16
000004aa: call R17 with noreturn

00000622: sub _fini(_fini_result)
0000065c: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000623: sub _init(_init_result)
0000065d: _init_result :: out u32 = low:32[R0]

00000569:
0000056f: #5 := R31 - 0x10
00000575: mem := mem with [#5, el]:u64 <- R29
0000057b: mem := mem with [#5 + 8, el]:u64 <- R30
0000057f: R31 := #5
00000585: R29 := R31
0000058a: R30 := 0x590
0000058c: call @call_weak_fn with return %0000058e

0000058e:
00000593: R29 := mem[R31, el]:u64
00000598: R30 := mem[R31 + 8, el]:u64
0000059c: R31 := R31 + 0x10
000005a1: call R30 with noreturn

00000624: sub _start(_start_result)
0000065e: _start_result :: out u32 = low:32[R0]

000001bc:
000001c1: R29 := 0
000001c6: R30 := 0
000001cc: R5 := R0
000001d3: R1 := mem[R31, el]:u64
000001d9: R2 := R31 + 8
000001df: R6 := R31
000001e4: R0 := 0x10000
000001eb: R0 := mem[R0 + 0xFD8, el]:u64
000001f0: R3 := 0
000001f5: R4 := 0
000001fa: R30 := 0x630
000001fd: call @__libc_start_main with return %000001ff

000001ff:
00000202: R30 := 0x634
00000205: call @abort with return %0000064d

0000064d:
0000064e: call @call_weak_fn with noreturn

00000627: sub abort()


00000203:
000004da: R16 := 0x11000
000004e1: R17 := mem[R16 + 0x18, el]:u64
000004e7: R16 := R16 + 0x18
000004ec: call R17 with noreturn

00000628: sub add_six(add_six_result)
0000065f: add_six_result :: out u32 = low:32[R0]

0000031d:
00000320: R8 := 0x11000
00000327: R9 := pad:64[mem[R8 + 0x30, el]:u32]
0000032d: R9 := pad:64[31:0[R9] + 6]
00000335: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
0000033a: call R30 with noreturn

00000629: sub add_two(add_two_result)
00000660: add_two_result :: out u32 = low:32[R0]

000002fe:
00000301: R8 := 0x11000
00000308: R9 := pad:64[mem[R8 + 0x30, el]:u32]
0000030e: R9 := pad:64[31:0[R9] + 2]
00000316: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
0000031b: call R30 with noreturn

0000062a: sub call_weak_fn(call_weak_fn_result)
00000661: call_weak_fn_result :: out u32 = low:32[R0]

00000207:
0000020a: R0 := 0x10000
00000211: R0 := mem[R0 + 0xFD0, el]:u64
00000217: when R0 = 0 goto %00000215
0000064f: goto %000003f6

00000215:
0000021d: call R30 with noreturn

000003f6:
000003f9: goto @__gmon_start__

000003f7:
000004c4: R16 := 0x11000
000004cb: R17 := mem[R16 + 0x10, el]:u64
000004d1: R16 := R16 + 0x10
000004d6: call R17 with noreturn

0000062c: sub deregister_tm_clones(deregister_tm_clones_result)
00000662: deregister_tm_clones_result :: out u32 = low:32[R0]

00000223:
00000226: R0 := 0x11000
0000022c: R0 := R0 + 0x38
00000231: R1 := 0x11000
00000237: R1 := R1 + 0x38
0000023d: #1 := ~R0
00000242: #2 := R1 + ~R0
00000248: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000252: ZF := #2 + 1 = 0
00000256: NF := 63:63[#2 + 1]
0000025c: when ZF goto %0000025a
00000650: goto %000003d8

000003d8:
000003db: R1 := 0x10000
000003e2: R1 := mem[R1 + 0xFC0, el]:u64
000003e7: when R1 = 0 goto %0000025a
00000651: goto %000003eb

0000025a:
00000262: call R30 with noreturn

000003eb:
000003ef: R16 := R1
000003f4: call R16 with noreturn

0000062f: sub frame_dummy(frame_dummy_result)
00000663: frame_dummy_result :: out u32 = low:32[R0]

000002fa:
000002fc: call @register_tm_clones with noreturn

00000630: sub main(main_argc, main_argv, main_result)
00000664: main_argc :: in u32 = low:32[R0]
00000665: main_argv :: in out u64 = R1
00000666: main_result :: out u32 = low:32[R0]

0000035b:
0000035e: R8 := 0x11000
00000363: R0 := 0
0000036a: R9 := pad:64[mem[R8 + 0x30, el]:u32]
00000370: R9 := pad:64[31:0[R9] + 1]
00000378: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
0000037d: call R30 with noreturn

00000631: sub register_tm_clones(register_tm_clones_result)
00000667: register_tm_clones_result :: out u32 = low:32[R0]

00000264:
00000267: R0 := 0x11000
0000026d: R0 := R0 + 0x38
00000272: R1 := 0x11000
00000278: R1 := R1 + 0x38
0000027f: R1 := R1 + ~R0 + 1
00000285: R2 := 0.63:63[R1]
0000028c: R1 := R2 + (R1 ~>> 3)
00000292: R1 := extend:64[63:1[R1]]
00000298: when R1 = 0 goto %00000296
00000652: goto %000003ba

000003ba:
000003bd: R2 := 0x10000
000003c4: R2 := mem[R2 + 0xFE0, el]:u64
000003c9: when R2 = 0 goto %00000296
00000653: goto %000003cd

00000296:
0000029e: call R30 with noreturn

000003cd:
000003d1: R16 := R2
000003d6: call R16 with noreturn

00000634: sub sub_seven(sub_seven_result)
00000668: sub_seven_result :: out u32 = low:32[R0]

0000033c:
0000033f: R8 := 0x11000
00000346: R9 := pad:64[mem[R8 + 0x30, el]:u32]
0000034c: R9 := pad:64[31:0[R9] - 7]
00000354: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
00000359: call R30 with noreturn
