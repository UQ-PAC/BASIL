0000072f: program
000006f7: sub __cxa_finalize(__cxa_finalize_result)
00000730: __cxa_finalize_result :: out u32 = low:32[R0]

000004f0:
000005e8: R16 := 0x20000
000005ef: R17 := mem[R16 + 8, el]:u64
000005f5: R16 := R16 + 8
000005fa: call R17 with noreturn

000006f8: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000731: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000030f:
00000313: #3 := R31 - 0x20
00000319: mem := mem with [#3, el]:u64 <- R29
0000031f: mem := mem with [#3 + 8, el]:u64 <- R30
00000323: R31 := #3
00000329: R29 := R31
00000331: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000336: R19 := 0x20000
0000033d: R0 := pad:64[mem[R19 + 0x50]]
00000343: when 0:0[R0] goto %00000341
00000725: goto %000004b9

000004b9:
000004bc: R0 := 0x1F000
000004c3: R0 := mem[R0 + 0xFC0, el]:u64
000004c9: when R0 = 0 goto %000004c7
00000726: goto %000004e0

000004e0:
000004e3: R0 := 0x20000
000004ea: R0 := mem[R0 + 0x28, el]:u64
000004ef: R30 := 0x770
000004f2: call @__cxa_finalize with return %000004c7

000004c7:
000004cf: R30 := 0x774
000004d1: call @deregister_tm_clones with return %000004d3

000004d3:
000004d6: R0 := 1
000004de: mem := mem with [R19 + 0x50] <- 7:0[R0]
00000727: goto %00000341

00000341:
0000034b: R19 := mem[R31 + 0x10, el]:u64
00000352: R29 := mem[R31, el]:u64
00000357: R30 := mem[R31 + 8, el]:u64
0000035b: R31 := R31 + 0x20
00000360: call R30 with noreturn

000006fc: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000732: __libc_start_main_main :: in u64 = R0
00000733: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000734: __libc_start_main_arg3 :: in out u64 = R2
00000735: __libc_start_main_auxv :: in out u64 = R3
00000736: __libc_start_main_result :: out u32 = low:32[R0]

00000268:
000005d2: R16 := 0x20000
000005d9: R17 := mem[R16, el]:u64
000005df: R16 := R16
000005e4: call R17 with noreturn

000006fd: sub _fini(_fini_result)
00000737: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000006fe: sub _init(_init_result)
00000738: _init_result :: out u32 = low:32[R0]

00000642:
00000648: #6 := R31 - 0x10
0000064e: mem := mem with [#6, el]:u64 <- R29
00000654: mem := mem with [#6 + 8, el]:u64 <- R30
00000658: R31 := #6
0000065e: R29 := R31
00000663: R30 := 0x5F0
00000665: call @call_weak_fn with return %00000667

00000667:
0000066c: R29 := mem[R31, el]:u64
00000671: R30 := mem[R31 + 8, el]:u64
00000675: R31 := R31 + 0x10
0000067a: call R30 with noreturn

000006ff: sub _start(_start_result)
00000739: _start_result :: out u32 = low:32[R0]

00000229:
0000022e: R29 := 0
00000233: R30 := 0
00000239: R5 := R0
00000240: R1 := mem[R31, el]:u64
00000246: R2 := R31 + 8
0000024c: R6 := R31
00000251: R0 := 0x1F000
00000258: R0 := mem[R0 + 0xFD8, el]:u64
0000025d: R3 := 0
00000262: R4 := 0
00000267: R30 := 0x6B0
0000026a: call @__libc_start_main with return %0000026c

0000026c:
0000026f: R30 := 0x6B4
00000272: call @abort with return %00000728

00000728:
00000729: call @call_weak_fn with noreturn

00000702: sub abort()


00000270:
00000614: R16 := 0x20000
0000061b: R17 := mem[R16 + 0x18, el]:u64
00000621: R16 := R16 + 0x18
00000626: call R17 with noreturn

00000703: sub add_six(add_six_result)
0000073a: add_six_result :: out u32 = low:32[R0]

0000039e:
000003a1: R0 := 0x1F000
000003a8: R0 := mem[R0 + 0xFC8, el]:u64
000003af: R0 := pad:64[mem[R0, el]:u32]
000003b5: R1 := pad:64[31:0[R0] + 6]
000003ba: R0 := 0x1F000
000003c1: R0 := mem[R0 + 0xFC8, el]:u64
000003c9: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003d0: call R30 with noreturn

00000704: sub add_two(add_two_result)
0000073b: add_two_result :: out u32 = low:32[R0]

0000036a:
0000036d: R0 := 0x1F000
00000374: R0 := mem[R0 + 0xFC8, el]:u64
0000037b: R0 := pad:64[mem[R0, el]:u32]
00000381: R1 := pad:64[31:0[R0] + 2]
00000386: R0 := 0x1F000
0000038d: R0 := mem[R0 + 0xFC8, el]:u64
00000395: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000039c: call R30 with noreturn

00000705: sub call_weak_fn(call_weak_fn_result)
0000073c: call_weak_fn_result :: out u32 = low:32[R0]

00000274:
00000277: R0 := 0x1F000
0000027e: R0 := mem[R0 + 0xFD0, el]:u64
00000284: when R0 = 0 goto %00000282
0000072a: goto %00000530

00000282:
0000028a: call R30 with noreturn

00000530:
00000533: goto @__gmon_start__

00000531:
000005fe: R16 := 0x20000
00000605: R17 := mem[R16 + 0x10, el]:u64
0000060b: R16 := R16 + 0x10
00000610: call R17 with noreturn

00000707: sub deregister_tm_clones(deregister_tm_clones_result)
0000073d: deregister_tm_clones_result :: out u32 = low:32[R0]

00000290:
00000293: R0 := 0x20000
00000299: R0 := R0 + 0x50
0000029e: R1 := 0x20000
000002a4: R1 := R1 + 0x50
000002aa: #1 := ~R0
000002af: #2 := R1 + ~R0
000002b5: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002bb: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002bf: ZF := #2 + 1 = 0
000002c3: NF := 63:63[#2 + 1]
000002c9: when ZF goto %000002c7
0000072b: goto %00000512

00000512:
00000515: R1 := 0x1F000
0000051c: R1 := mem[R1 + 0xFB8, el]:u64
00000521: when R1 = 0 goto %000002c7
0000072c: goto %00000525

000002c7:
000002cf: call R30 with noreturn

00000525:
00000529: R16 := R1
0000052e: call R16 with noreturn

0000070a: sub frame_dummy(frame_dummy_result)
0000073e: frame_dummy_result :: out u32 = low:32[R0]

00000366:
00000368: call @register_tm_clones with noreturn

0000070b: sub main(main_argc, main_argv, main_result)
0000073f: main_argc :: in u32 = low:32[R0]
00000740: main_argv :: in out u64 = R1
00000741: main_result :: out u32 = low:32[R0]

00000406:
0000040a: #4 := R31 - 0x40
00000410: mem := mem with [#4, el]:u64 <- R29
00000416: mem := mem with [#4 + 8, el]:u64 <- R30
0000041a: R31 := #4
00000420: R29 := R31
00000428: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000430: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000435: R0 := 0x20000
0000043b: R0 := R0 + 0x38
00000441: R2 := R31 + 0x28
00000447: R3 := R0
0000044e: R0 := mem[R3, el]:u64
00000453: R1 := mem[R3 + 8, el]:u64
0000045b: mem := mem with [R2, el]:u64 <- R0
00000461: mem := mem with [R2 + 8, el]:u64 <- R1
00000468: R0 := mem[R3 + 0x10, el]:u64
00000470: mem := mem with [R2 + 0x10, el]:u64 <- R0
00000477: R0 := mem[R31 + 0x28, el]:u64
0000047c: R30 := 0x838
0000047f: call R0 with return %00000481

00000481:
00000486: R0 := mem[R31 + 0x30, el]:u64
0000048b: R30 := 0x840
0000048e: call R0 with return %00000490

00000490:
00000495: R0 := mem[R31 + 0x38, el]:u64
0000049a: R30 := 0x848
0000049d: call R0 with return %0000049f

0000049f:
000004a2: R0 := 0
000004a9: R29 := mem[R31, el]:u64
000004ae: R30 := mem[R31 + 8, el]:u64
000004b2: R31 := R31 + 0x40
000004b7: call R30 with noreturn

0000070c: sub register_tm_clones(register_tm_clones_result)
00000742: register_tm_clones_result :: out u32 = low:32[R0]

000002d1:
000002d4: R0 := 0x20000
000002da: R0 := R0 + 0x50
000002df: R1 := 0x20000
000002e5: R1 := R1 + 0x50
000002ec: R1 := R1 + ~R0 + 1
000002f2: R2 := 0.63:63[R1]
000002f9: R1 := R2 + (R1 ~>> 3)
000002ff: R1 := extend:64[63:1[R1]]
00000305: when R1 = 0 goto %00000303
0000072d: goto %000004f4

000004f4:
000004f7: R2 := 0x1F000
000004fe: R2 := mem[R2 + 0xFE0, el]:u64
00000503: when R2 = 0 goto %00000303
0000072e: goto %00000507

00000303:
0000030b: call R30 with noreturn

00000507:
0000050b: R16 := R2
00000510: call R16 with noreturn

0000070f: sub sub_seven(sub_seven_result)
00000743: sub_seven_result :: out u32 = low:32[R0]

000003d2:
000003d5: R0 := 0x1F000
000003dc: R0 := mem[R0 + 0xFC8, el]:u64
000003e3: R0 := pad:64[mem[R0, el]:u32]
000003e9: R1 := pad:64[31:0[R0] - 7]
000003ee: R0 := 0x1F000
000003f5: R0 := mem[R0 + 0xFC8, el]:u64
000003fd: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000404: call R30 with noreturn
