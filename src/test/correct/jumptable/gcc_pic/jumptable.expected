var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2404bv64);
const $x_addr: bv64;
axiom ($x_addr == 69648bv64);
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvadd"} bvadd65(bv65, bv65) returns (bv65);
function {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp64(bv64, bv64) returns (bv1);
function {:bvbuiltin "bvcomp"} bvcomp65(bv65, bv65) returns (bv1);
function {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:bvbuiltin "bvnot"} bvnot64(bv64) returns (bv64);
function gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:bvbuiltin "sign_extend 1"} sign_extend1_64(bv64) returns (bv65);
function {:bvbuiltin "zero_extend 1"} zero_extend1_64(bv64) returns (bv65);
function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure __stack_chk_fail(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (__stack_chk_fail_result: bv32, Gamma___stack_chk_fail_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool);
  modifies mem, Gamma_mem, stack, Gamma_stack;

procedure main(main_argc: bv32, Gamma_main_argc: bool, main_argv: bv64, Gamma_main_argv: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (main_argv_out: bv64, Gamma_main_argv_out: bool, main_result: bv32, Gamma_main_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
  requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  requires (memory_load8_le(mem, 69648bv64) == 5bv8);
  requires (memory_load8_le(mem, 69649bv64) == 0bv8);
  requires (memory_load8_le(mem, 69650bv64) == 0bv8);
  requires (memory_load8_le(mem, 69651bv64) == 0bv8);
  requires (memory_load8_le(mem, 69652bv64) == 0bv8);
  requires (memory_load8_le(mem, 69653bv64) == 0bv8);
  requires (memory_load8_le(mem, 69654bv64) == 0bv8);
  requires (memory_load8_le(mem, 69655bv64) == 0bv8);
  requires (memory_load8_le(mem, 69656bv64) == 84bv8);
  requires (memory_load8_le(mem, 69657bv64) == 8bv8);
  requires (memory_load8_le(mem, 69658bv64) == 0bv8);
  requires (memory_load8_le(mem, 69659bv64) == 0bv8);
  requires (memory_load8_le(mem, 69660bv64) == 0bv8);
  requires (memory_load8_le(mem, 69661bv64) == 0bv8);
  requires (memory_load8_le(mem, 69662bv64) == 0bv8);
  requires (memory_load8_le(mem, 69663bv64) == 0bv8);
  requires (memory_load8_le(mem, 69664bv64) == 120bv8);
  requires (memory_load8_le(mem, 69665bv64) == 8bv8);
  requires (memory_load8_le(mem, 69666bv64) == 0bv8);
  requires (memory_load8_le(mem, 69667bv64) == 0bv8);
  requires (memory_load8_le(mem, 69668bv64) == 0bv8);
  requires (memory_load8_le(mem, 69669bv64) == 0bv8);
  requires (memory_load8_le(mem, 69670bv64) == 0bv8);
  requires (memory_load8_le(mem, 69671bv64) == 0bv8);
  requires (memory_load8_le(mem, 69672bv64) == 156bv8);
  requires (memory_load8_le(mem, 69673bv64) == 8bv8);
  requires (memory_load8_le(mem, 69674bv64) == 0bv8);
  requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  requires (memory_load8_le(mem, 69679bv64) == 0bv8);
{
  var #4: bv64;
  var #5: bv64;
  var #6: bv64;
  var #temp0: bv32;
  var CF: bv1;
  var Gamma_#4: bool;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  var Gamma_#temp0: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R2: bool;
  var Gamma_R29: bool;
  var Gamma_R3: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var R0: bv64;
  var R1: bv64;
  var R2: bv64;
  var R29: bv64;
  var R3: bv64;
  var R30: bv64;
  var R31: bv64;
  var VF: bv1;
  var ZF: bv1;
  R0, Gamma_R0 := zero_extend32_32(main_argc), Gamma_main_argc;
  R1, Gamma_R1 := main_argv, Gamma_main_argv;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lmain:
    #4, Gamma_#4 := bvadd64(R31, 18446744073709551552bv64), Gamma_R31;
    call rely();
    assert (L(mem, #4) ==> Gamma_R29);
    mem, Gamma_mem := memory_store64_le(mem, #4, R29), gamma_store64(Gamma_mem, #4, Gamma_R29);
    call rely();
    assert (L(mem, bvadd64(#4, 8bv64)) ==> Gamma_R30);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_mem, bvadd64(#4, 8bv64), Gamma_R30);
    R31, Gamma_R31 := #4, Gamma_#4;
    R29, Gamma_R29 := R31, Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R1), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R1);
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4072bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4072bv64)) || L(mem, bvadd64(R0, 4072bv64)));
    call rely();
    R1, Gamma_R1 := memory_load64_le(mem, R0), (gamma_load64(Gamma_mem, R0) || L(mem, R0));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 56bv64), R1), gamma_store64(Gamma_stack, bvadd64(R31, 56bv64), Gamma_R1);
    R1, Gamma_R1 := 0bv64, true;
    R0, Gamma_R0 := 69632bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 24bv64), Gamma_R0;
    R2, Gamma_R2 := bvadd64(R31, 32bv64), Gamma_R31;
    R3, Gamma_R3 := R0, Gamma_R0;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, R3), (gamma_load64(Gamma_mem, R3) || L(mem, R3));
    call rely();
    R1, Gamma_R1 := memory_load64_le(mem, bvadd64(R3, 8bv64)), (gamma_load64(Gamma_mem, bvadd64(R3, 8bv64)) || L(mem, bvadd64(R3, 8bv64)));
    call rely();
    assert (L(mem, R2) ==> Gamma_R0);
    mem, Gamma_mem := memory_store64_le(mem, R2, R0), gamma_store64(Gamma_mem, R2, Gamma_R0);
    call rely();
    assert (L(mem, bvadd64(R2, 8bv64)) ==> Gamma_R1);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(R2, 8bv64), R1), gamma_store64(Gamma_mem, bvadd64(R2, 8bv64), Gamma_R1);
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R3, 16bv64)), (gamma_load64(Gamma_mem, bvadd64(R3, 16bv64)) || L(mem, bvadd64(R3, 16bv64)));
    call rely();
    assert (L(mem, bvadd64(R2, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(R2, 16bv64), R0), gamma_store64(Gamma_mem, bvadd64(R2, 16bv64), Gamma_R0);
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    R30, Gamma_R30 := 2316bv64, true;
    //UNRESOLVED: call R0
    assume false;
    goto l000004dd;
  l000004dd:
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 40bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 40bv64));
    R30, Gamma_R30 := 2324bv64, true;
    //UNRESOLVED: call R0
    assume false;
    goto l000004ec;
  l000004ec:
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 48bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 48bv64));
    R30, Gamma_R30 := 2332bv64, true;
    //UNRESOLVED: call R0
    assume false;
    goto l000004fb;
  l000004fb:
    R0, Gamma_R0 := 0bv64, true;
    R1, Gamma_R1 := zero_extend32_32(R0[32:0]), Gamma_R0;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4072bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4072bv64)) || L(mem, bvadd64(R0, 4072bv64)));
    R3, Gamma_R3 := memory_load64_le(stack, bvadd64(R31, 56bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 56bv64));
    call rely();
    R2, Gamma_R2 := memory_load64_le(mem, R0), (gamma_load64(Gamma_mem, R0) || L(mem, R0));
    #5, Gamma_#5 := bvnot64(R2), Gamma_R2;
    #6, Gamma_#6 := bvadd64(R3, bvnot64(R2)), (Gamma_R2 && Gamma_R3);
    VF, Gamma_VF := bvnot1(bvcomp65(sign_extend1_64(bvadd64(#6, 1bv64)), bvadd65(bvadd65(sign_extend1_64(R3), sign_extend1_64(#5)), 1bv65))), (Gamma_#5 && (Gamma_R3 && Gamma_#6));
    CF, Gamma_CF := bvnot1(bvcomp65(zero_extend1_64(bvadd64(#6, 1bv64)), bvadd65(bvadd65(zero_extend1_64(R3), zero_extend1_64(#5)), 1bv65))), (Gamma_#5 && (Gamma_R3 && Gamma_#6));
    ZF, Gamma_ZF := bvcomp64(bvadd64(#6, 1bv64), 0bv64), Gamma_#6;
    NF, Gamma_NF := bvadd64(#6, 1bv64)[64:63], Gamma_#6;
    R3, Gamma_R3 := bvadd64(#6, 1bv64), Gamma_#6;
    R2, Gamma_R2 := 0bv64, true;
    assert Gamma_ZF;
    if ((bvcomp1(ZF, 1bv1) != 0bv1)) {
      goto l0000054a;
    }
    goto l0000056a;
  l0000056a:
    R30, Gamma_R30 := 2372bv64, true;
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := __stack_chk_fail(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    goto l0000054a;
  l0000054a:
    R0, Gamma_R0 := zero_extend32_32(R1[32:0]), Gamma_R1;
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 64bv64), Gamma_R31;
    main_argv_out, Gamma_main_argv_out := R1, Gamma_R1;
    main_result, Gamma_main_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}
