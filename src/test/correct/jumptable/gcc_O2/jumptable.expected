var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1976bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69648bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1976bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1977bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1978bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1979bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure add_six();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load8_le(mem, 1976bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1977bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1978bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1979bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 1976bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1977bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1978bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1979bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation add_six()
{
  ladd_six:
    assume {:captureState "ladd_six"} true;
    R1, Gamma_R1 := 69632bv64, true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 6bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%00000252"} true;
    goto add_six_basil_return;
  add_six_basil_return:
    assume {:captureState "add_six_basil_return"} true;
    return;
}

procedure add_two();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load8_le(mem, 1976bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1977bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1978bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1979bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 1976bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1977bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1978bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1979bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation add_two()
{
  ladd_two:
    assume {:captureState "ladd_two"} true;
    R1, Gamma_R1 := 69632bv64, true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 2bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%00000233"} true;
    goto add_two_basil_return;
  add_two_basil_return:
    assume {:captureState "add_two_basil_return"} true;
    return;
}

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R1, R29, R30, R31, mem, stack;
  free requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69648bv64) == 5bv8);
  free requires (memory_load8_le(mem, 69649bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69650bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69651bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1976bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1977bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1978bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1979bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 1976bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1977bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1978bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1979bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main()
{
  var #1: bv64;
  var Gamma_#1: bool;
  lmain:
    assume {:captureState "lmain"} true;
    #1, Gamma_#1 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #1, R29), gamma_store64(Gamma_stack, #1, Gamma_R29);
    assume {:captureState "%00000202"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#1, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#1, 8bv64), Gamma_R30);
    assume {:captureState "%00000208"} true;
    R31, Gamma_R31 := #1, Gamma_#1;
    R29, Gamma_R29 := R31, Gamma_R31;
    R30, Gamma_R30 := 1548bv64, true;
    call add_two();
    goto l0000027c;
  l0000027c:
    assume {:captureState "l0000027c"} true;
    R30, Gamma_R30 := 1552bv64, true;
    call add_six();
    goto l00000283;
  l00000283:
    assume {:captureState "l00000283"} true;
    R30, Gamma_R30 := 1556bv64, true;
    call sub_seven();
    goto l0000028a;
  l0000028a:
    assume {:captureState "l0000028a"} true;
    R0, Gamma_R0 := 0bv64, true;
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

procedure sub_seven();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load8_le(mem, 1976bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1977bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1978bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1979bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 1976bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1977bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1978bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1979bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation sub_seven()
{
  lsub_seven:
    assume {:captureState "lsub_seven"} true;
    R1, Gamma_R1 := 69632bv64, true;
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R1, 16bv64))), (gamma_load32(Gamma_mem, bvadd64(R1, 16bv64)) || L(mem, bvadd64(R1, 16bv64)));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 4294967289bv32)), Gamma_R0;
    call rely();
    assert (L(mem, bvadd64(R1, 16bv64)) ==> Gamma_R0);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 16bv64), R0[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 16bv64), Gamma_R0);
    assume {:captureState "%00000275"} true;
    goto sub_seven_basil_return;
  sub_seven_basil_return:
    assume {:captureState "sub_seven_basil_return"} true;
    return;
}

