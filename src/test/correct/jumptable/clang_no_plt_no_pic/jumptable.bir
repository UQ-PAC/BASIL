00000ea7: program
00000e8e: sub __cxa_finalize(__cxa_finalize_result)
00000ea8: __cxa_finalize_result :: out u32 = low:32[R0]

00000c04:
00000cfc: R16 := 0x11000
00000d03: R17 := mem[R16 + 8, el]:u64
00000d09: R16 := R16 + 8
00000d0e: call R17 with noreturn

00000e8f: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000ea9: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000a44:
00000a48: #3 := R31 - 0x20
00000a4e: mem := mem with [#3, el]:u64 <- R29
00000a54: mem := mem with [#3 + 8, el]:u64 <- R30
00000a58: R31 := #3
00000a5e: R29 := R31
00000a66: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000a6b: R19 := 0x11000
00000a72: R0 := pad:64[mem[R19 + 0x34]]
00000a79: when 31:0[R0] <> 0 goto %00000a77
00000e90: goto %00000bcd

00000bcd:
00000bd0: R0 := 0x10000
00000bd7: R0 := mem[R0 + 0xFC8, el]:u64
00000bdd: when R0 = 0 goto %00000bdb
00000e91: goto %00000bf4

00000bf4:
00000bf7: R0 := 0x11000
00000bfe: R0 := mem[R0 + 0x28, el]:u64
00000c03: R30 := 0x730
00000c06: call @__cxa_finalize with return %00000bdb

00000bdb:
00000be3: R30 := 0x734
00000be5: call @deregister_tm_clones with return %00000be7

00000be7:
00000bea: R0 := 1
00000bf2: mem := mem with [R19 + 0x34] <- 7:0[R0]
00000e92: goto %00000a77

00000a77:
00000a81: R19 := mem[R31 + 0x10, el]:u64
00000a88: R29 := mem[R31, el]:u64
00000a8d: R30 := mem[R31 + 8, el]:u64
00000a91: R31 := R31 + 0x20
00000a96: call R30 with noreturn

00000e93: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000eaa: __libc_start_main_main :: in u64 = R0
00000eab: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000eac: __libc_start_main_arg3 :: in out u64 = R2
00000ead: __libc_start_main_auxv :: in out u64 = R3
00000eae: __libc_start_main_result :: out u32 = low:32[R0]

0000099d:
00000ce6: R16 := 0x11000
00000ced: R17 := mem[R16, el]:u64
00000cf3: R16 := R16
00000cf8: call R17 with noreturn

00000e94: sub _fini(_fini_result)
00000eaf: _fini_result :: out u32 = low:32[R0]

00000779:
0000077f: #0 := R31 - 0x10
00000785: mem := mem with [#0, el]:u64 <- R29
0000078b: mem := mem with [#0 + 8, el]:u64 <- R30
0000078f: R31 := #0
00000795: R29 := R31
0000079c: R29 := mem[R31, el]:u64
000007a1: R30 := mem[R31 + 8, el]:u64
000007a5: R31 := R31 + 0x10
000007aa: call R30 with noreturn

00000e95: sub _init(_init_result)
00000eb0: _init_result :: out u32 = low:32[R0]

00000dc9:
00000dcf: #8 := R31 - 0x10
00000dd5: mem := mem with [#8, el]:u64 <- R29
00000ddb: mem := mem with [#8 + 8, el]:u64 <- R30
00000ddf: R31 := #8
00000de5: R29 := R31
00000dea: R30 := 0x5D8
00000dec: call @call_weak_fn with return %00000dee

00000dee:
00000df3: R29 := mem[R31, el]:u64
00000df8: R30 := mem[R31 + 8, el]:u64
00000dfc: R31 := R31 + 0x10
00000e01: call R30 with noreturn

00000e96: sub _start(_start_result)
00000eb1: _start_result :: out u32 = low:32[R0]

0000095e:
00000963: R29 := 0
00000968: R30 := 0
0000096e: R5 := R0
00000975: R1 := mem[R31, el]:u64
0000097b: R2 := R31 + 8
00000981: R6 := R31
00000986: R0 := 0x10000
0000098d: R0 := mem[R0 + 0xFD8, el]:u64
00000992: R3 := 0
00000997: R4 := 0
0000099c: R30 := 0x670
0000099f: call @__libc_start_main with return %000009a1

000009a1:
000009a4: R30 := 0x674
000009a7: call @abort with return %00000e97

00000e97:
00000e98: call @call_weak_fn with noreturn

00000e99: sub abort()


000009a5:
00000d28: R16 := 0x11000
00000d2f: R17 := mem[R16 + 0x18, el]:u64
00000d35: R16 := R16 + 0x18
00000d3a: call R17 with noreturn

00000e9a: sub add_six(add_six_result)
00000eb2: add_six_result :: out u32 = low:32[R0]

00000abf:
00000ac2: R9 := 0x11000
00000ac9: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000acf: R8 := pad:64[31:0[R8] + 6]
00000ad7: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000adc: call R30 with noreturn

00000e9b: sub add_two(add_two_result)
00000eb3: add_two_result :: out u32 = low:32[R0]

00000aa0:
00000aa3: R9 := 0x11000
00000aaa: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000ab0: R8 := pad:64[31:0[R8] + 2]
00000ab8: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000abd: call R30 with noreturn

00000e9c: sub call_weak_fn(call_weak_fn_result)
00000eb4: call_weak_fn_result :: out u32 = low:32[R0]

000009a9:
000009ac: R0 := 0x10000
000009b3: R0 := mem[R0 + 0xFD0, el]:u64
000009b9: when R0 = 0 goto %000009b7
00000e9d: goto %00000c44

000009b7:
000009bf: call R30 with noreturn

00000c44:
00000c47: goto @__gmon_start__

00000c45:
00000d12: R16 := 0x11000
00000d19: R17 := mem[R16 + 0x10, el]:u64
00000d1f: R16 := R16 + 0x10
00000d24: call R17 with noreturn

00000e9e: sub deregister_tm_clones(deregister_tm_clones_result)
00000eb5: deregister_tm_clones_result :: out u32 = low:32[R0]

000009c5:
000009c8: R0 := 0x11000
000009ce: R0 := R0 + 0x38
000009d3: R1 := 0x11000
000009d9: R1 := R1 + 0x38
000009df: #1 := ~R0
000009e4: #2 := R1 + ~R0
000009ea: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000009f0: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000009f4: ZF := #2 + 1 = 0
000009f8: NF := 63:63[#2 + 1]
000009fe: when ZF goto %000009fc
00000e9f: goto %00000c26

00000c26:
00000c29: R1 := 0x10000
00000c30: R1 := mem[R1 + 0xFC0, el]:u64
00000c35: when R1 = 0 goto %000009fc
00000ea0: goto %00000c39

000009fc:
00000a04: call R30 with noreturn

00000c39:
00000c3d: R16 := R1
00000c42: call R16 with noreturn

00000ea1: sub frame_dummy(frame_dummy_result)
00000eb6: frame_dummy_result :: out u32 = low:32[R0]

00000a9c:
00000a9e: call @register_tm_clones with noreturn

00000ea2: sub main(main_argc, main_argv, main_result)
00000eb7: main_argc :: in u32 = low:32[R0]
00000eb8: main_argv :: in out u64 = R1
00000eb9: main_result :: out u32 = low:32[R0]

00000b13:
00000b17: R31 := R31 - 0x50
00000b1d: #5 := R31 + 0x40
00000b23: mem := mem with [#5, el]:u64 <- R29
00000b29: mem := mem with [#5 + 8, el]:u64 <- R30
00000b2f: R29 := R31 + 0x40
00000b34: R8 := 0
00000b3c: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000b43: mem := mem with [R29 - 4, el]:u32 <- 0
00000b4b: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
00000b53: mem := mem with [R29 - 0x10, el]:u64 <- R1
00000b58: R8 := 0
00000b5e: R8 := R8 + 0x810
00000b65: V0 := mem[R8, el]:u128
00000b6d: mem := mem with [R31 + 0x10, el]:u128 <- V0
00000b74: R8 := mem[R8 + 0x10, el]:u64
00000b7c: mem := mem with [R31 + 0x20, el]:u64 <- R8
00000b83: R8 := mem[R31 + 0x10, el]:u64
00000b88: R30 := 0x7D0
00000b8b: call R8 with return %00000b8d

00000b8d:
00000b92: R8 := mem[R31 + 0x18, el]:u64
00000b97: R30 := 0x7D8
00000b9a: call R8 with return %00000b9c

00000b9c:
00000ba1: R8 := mem[R31 + 0x20, el]:u64
00000ba6: R30 := 0x7E0
00000ba9: call R8 with return %00000bab

00000bab:
00000bb0: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000bb6: #6 := R31 + 0x40
00000bbb: R29 := mem[#6, el]:u64
00000bc0: R30 := mem[#6 + 8, el]:u64
00000bc6: R31 := R31 + 0x50
00000bcb: call R30 with noreturn

00000ea3: sub register_tm_clones(register_tm_clones_result)
00000eba: register_tm_clones_result :: out u32 = low:32[R0]

00000a06:
00000a09: R0 := 0x11000
00000a0f: R0 := R0 + 0x38
00000a14: R1 := 0x11000
00000a1a: R1 := R1 + 0x38
00000a21: R1 := R1 + ~R0 + 1
00000a27: R2 := 0.63:63[R1]
00000a2e: R1 := R2 + (R1 ~>> 3)
00000a34: R1 := extend:64[63:1[R1]]
00000a3a: when R1 = 0 goto %00000a38
00000ea4: goto %00000c08

00000c08:
00000c0b: R2 := 0x10000
00000c12: R2 := mem[R2 + 0xFE0, el]:u64
00000c17: when R2 = 0 goto %00000a38
00000ea5: goto %00000c1b

00000a38:
00000a40: call R30 with noreturn

00000c1b:
00000c1f: R16 := R2
00000c24: call R16 with noreturn

00000ea6: sub sub_seven(sub_seven_result)
00000ebb: sub_seven_result :: out u32 = low:32[R0]

00000ade:
00000ae1: R9 := 0x11000
00000ae8: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000aee: #4 := 31:0[R8] - 8
00000af3: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 7
00000af8: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFF9
00000afc: ZF := #4 + 1 = 0
00000b00: NF := 31:31[#4 + 1]
00000b04: R8 := pad:64[#4 + 1]
00000b0c: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000b11: call R30 with noreturn
