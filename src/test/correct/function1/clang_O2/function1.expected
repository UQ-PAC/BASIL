var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R10: bool;
var {:extern} Gamma_R11: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R10: bv64;
var {:extern} R11: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1976bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69692bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69696bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load64_le(mem, 1976bv64) == 2924859843805185bv64);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1888bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R10, Gamma_R11, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R1, R10, R11, R16, R17, R29, R30, R31, R8, R9, mem, stack;
  free requires (memory_load64_le(mem, 69672bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free requires (memory_load64_le(mem, 1976bv64) == 2924859843805185bv64);
  free requires (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1888bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 1976bv64) == 2924859843805185bv64);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1888bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

implementation main()
{
  var #4: bv64;
  var Gamma_#4: bool;
  lmain:
    assume {:captureState "lmain"} true;
    #4, Gamma_#4 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #4, R29), gamma_store64(Gamma_stack, #4, Gamma_R29);
    assume {:captureState "%00000317"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#4, 8bv64), Gamma_R30);
    assume {:captureState "%0000031d"} true;
    R31, Gamma_R31 := #4, Gamma_#4;
    R29, Gamma_R29 := R31, Gamma_R31;
    R11, Gamma_R11 := 58475bv64, true;
    R1, Gamma_R1 := 58475bv64, true;
    R8, Gamma_R8 := 69632bv64, true;
    R9, Gamma_R9 := 1bv64, true;
    R10, Gamma_R10 := 69632bv64, true;
    R11, Gamma_R11 := zero_extend32_32((21515bv16 ++ R11[16:0])), Gamma_R11;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 1980bv64), Gamma_R0;
    R1, Gamma_R1 := zero_extend32_32((21515bv16 ++ R1[16:0])), Gamma_R1;
    call rely();
    assert (L(mem, bvadd64(R8, 60bv64)) ==> Gamma_R9);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R8, 60bv64), R9[32:0]), gamma_store32(Gamma_mem, bvadd64(R8, 60bv64), Gamma_R9);
    assume {:captureState "%0000035f"} true;
    call rely();
    assert (L(mem, bvadd64(R10, 64bv64)) ==> Gamma_R11);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R10, 64bv64), R11[32:0]), gamma_store32(Gamma_mem, bvadd64(R10, 64bv64), Gamma_R11);
    assume {:captureState "%00000367"} true;
    R30, Gamma_R30 := 1944bv64, true;
    call printf();
    goto l00000371;
  l00000371:
    assume {:captureState "l00000371"} true;
    R0, Gamma_R0 := 0bv64, true;
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

procedure printf();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 1976bv64) == 2924859843805185bv64);
  free requires (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1888bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free ensures (memory_load64_le(mem, 1976bv64) == 2924859843805185bv64);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1888bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

