00000687: program
00000650: sub __cxa_finalize(__cxa_finalize_result)
00000688: __cxa_finalize_result :: out u32 = low:32[R0]

000003c2:
000004ca: R16 := 0x11000
000004d1: R17 := mem[R16 + 8, el]:u64
000004d7: R16 := R16 + 8
000004dc: call R17 with noreturn

00000651: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000689: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029e:
000002a2: #3 := R31 - 0x20
000002a8: mem := mem with [#3, el]:u64 <- R29
000002ae: mem := mem with [#3 + 8, el]:u64 <- R30
000002b2: R31 := #3
000002b8: R29 := R31
000002c0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c5: R19 := 0x11000
000002cc: R0 := pad:64[mem[R19 + 0x38]]
000002d3: when 31:0[R0] <> 0 goto %000002d1
0000067d: goto %0000038b

0000038b:
0000038e: R0 := 0x10000
00000395: R0 := mem[R0 + 0xFC8, el]:u64
0000039b: when R0 = 0 goto %00000399
0000067e: goto %000003b2

000003b2:
000003b5: R0 := 0x11000
000003bc: R0 := mem[R0 + 0x30, el]:u64
000003c1: R30 := 0x730
000003c4: call @__cxa_finalize with return %00000399

00000399:
000003a1: R30 := 0x734
000003a3: call @deregister_tm_clones with return %000003a5

000003a5:
000003a8: R0 := 1
000003b0: mem := mem with [R19 + 0x38] <- 7:0[R0]
0000067f: goto %000002d1

000002d1:
000002db: R19 := mem[R31 + 0x10, el]:u64
000002e2: R29 := mem[R31, el]:u64
000002e7: R30 := mem[R31 + 8, el]:u64
000002eb: R31 := R31 + 0x20
000002f0: call R30 with noreturn

00000655: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000068a: __libc_start_main_main :: in u64 = R0
0000068b: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000068c: __libc_start_main_arg3 :: in out u64 = R2
0000068d: __libc_start_main_auxv :: in out u64 = R3
0000068e: __libc_start_main_result :: out u32 = low:32[R0]

000001f7:
000004b4: R16 := 0x11000
000004bb: R17 := mem[R16, el]:u64
000004c1: R16 := R16
000004c6: call R17 with noreturn

00000656: sub _fini(_fini_result)
0000068f: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000657: sub _init(_init_result)
00000690: _init_result :: out u32 = low:32[R0]

0000059a:
000005a0: #6 := R31 - 0x10
000005a6: mem := mem with [#6, el]:u64 <- R29
000005ac: mem := mem with [#6 + 8, el]:u64 <- R30
000005b0: R31 := #6
000005b6: R29 := R31
000005bb: R30 := 0x5C8
000005bd: call @call_weak_fn with return %000005bf

000005bf:
000005c4: R29 := mem[R31, el]:u64
000005c9: R30 := mem[R31 + 8, el]:u64
000005cd: R31 := R31 + 0x10
000005d2: call R30 with noreturn

00000658: sub _start(_start_result)
00000691: _start_result :: out u32 = low:32[R0]

000001b8:
000001bd: R29 := 0
000001c2: R30 := 0
000001c8: R5 := R0
000001cf: R1 := mem[R31, el]:u64
000001d5: R2 := R31 + 8
000001db: R6 := R31
000001e0: R0 := 0x10000
000001e7: R0 := mem[R0 + 0xFD8, el]:u64
000001ec: R3 := 0
000001f1: R4 := 0
000001f6: R30 := 0x670
000001f9: call @__libc_start_main with return %000001fb

000001fb:
000001fe: R30 := 0x674
00000201: call @abort with return %00000680

00000680:
00000681: call @call_weak_fn with noreturn

0000065b: sub abort()


000001ff:
000004f6: R16 := 0x11000
000004fd: R17 := mem[R16 + 0x18, el]:u64
00000503: R16 := R16 + 0x18
00000508: call R17 with noreturn

0000065c: sub call_weak_fn(call_weak_fn_result)
00000692: call_weak_fn_result :: out u32 = low:32[R0]

00000203:
00000206: R0 := 0x10000
0000020d: R0 := mem[R0 + 0xFD0, el]:u64
00000213: when R0 = 0 goto %00000211
00000682: goto %00000402

00000211:
00000219: call R30 with noreturn

00000402:
00000405: goto @__gmon_start__

00000403:
000004e0: R16 := 0x11000
000004e7: R17 := mem[R16 + 0x10, el]:u64
000004ed: R16 := R16 + 0x10
000004f2: call R17 with noreturn

0000065e: sub deregister_tm_clones(deregister_tm_clones_result)
00000693: deregister_tm_clones_result :: out u32 = low:32[R0]

0000021f:
00000222: R0 := 0x11000
00000228: R0 := R0 + 0x38
0000022d: R1 := 0x11000
00000233: R1 := R1 + 0x38
00000239: #1 := ~R0
0000023e: #2 := R1 + ~R0
00000244: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024e: ZF := #2 + 1 = 0
00000252: NF := 63:63[#2 + 1]
00000258: when ZF goto %00000256
00000683: goto %000003e4

000003e4:
000003e7: R1 := 0x10000
000003ee: R1 := mem[R1 + 0xFC0, el]:u64
000003f3: when R1 = 0 goto %00000256
00000684: goto %000003f7

00000256:
0000025e: call R30 with noreturn

000003f7:
000003fb: R16 := R1
00000400: call R16 with noreturn

00000661: sub frame_dummy(frame_dummy_result)
00000694: frame_dummy_result :: out u32 = low:32[R0]

000002f6:
000002f8: call @register_tm_clones with noreturn

00000662: sub get_two(get_two_result)
00000695: get_two_result :: out u32 = low:32[R0]

000002fa:
000002ff: R8 := pad:64[31:0[R1] + (0.7:0[R0])]
00000306: R0 := pad:64[31:0[R8] + 31:0[R2]]
0000030b: call R30 with noreturn

00000663: sub main(main_argc, main_argv, main_result)
00000696: main_argc :: in u32 = low:32[R0]
00000697: main_argv :: in out u64 = R1
00000698: main_result :: out u32 = low:32[R0]

0000030d:
00000311: #4 := R31 - 0x10
00000317: mem := mem with [#4, el]:u64 <- R29
0000031d: mem := mem with [#4 + 8, el]:u64 <- R30
00000321: R31 := #4
00000327: R29 := R31
0000032c: R11 := 0xE46B
00000331: R1 := 0xE46B
00000336: R8 := 0x11000
0000033b: R9 := 1
00000340: R10 := 0x11000
00000346: R11 := pad:64[0x540B.15:0[R11]]
0000034b: R0 := 0
00000351: R0 := R0 + 0x7BC
00000357: R1 := pad:64[0x540B.15:0[R1]]
0000035f: mem := mem with [R8 + 0x3C, el]:u32 <- 31:0[R9]
00000367: mem := mem with [R10 + 0x40, el]:u32 <- 31:0[R11]
0000036c: R30 := 0x798
0000036f: call @printf with return %00000371

00000371:
00000374: R0 := 0
0000037b: R29 := mem[R31, el]:u64
00000380: R30 := mem[R31 + 8, el]:u64
00000384: R31 := R31 + 0x10
00000389: call R30 with noreturn

00000664: sub printf(printf_format, printf_result)
00000699: printf_format :: in u64 = R0
0000069a: printf_result :: out u32 = low:32[R0]

0000036d:
0000050c: R16 := 0x11000
00000513: R17 := mem[R16 + 0x20, el]:u64
00000519: R16 := R16 + 0x20
0000051e: call R17 with noreturn

00000665: sub register_tm_clones(register_tm_clones_result)
0000069b: register_tm_clones_result :: out u32 = low:32[R0]

00000260:
00000263: R0 := 0x11000
00000269: R0 := R0 + 0x38
0000026e: R1 := 0x11000
00000274: R1 := R1 + 0x38
0000027b: R1 := R1 + ~R0 + 1
00000281: R2 := 0.63:63[R1]
00000288: R1 := R2 + (R1 ~>> 3)
0000028e: R1 := extend:64[63:1[R1]]
00000294: when R1 = 0 goto %00000292
00000685: goto %000003c6

000003c6:
000003c9: R2 := 0x10000
000003d0: R2 := mem[R2 + 0xFE0, el]:u64
000003d5: when R2 = 0 goto %00000292
00000686: goto %000003d9

00000292:
0000029a: call R30 with noreturn

000003d9:
000003dd: R16 := R2
000003e2: call R16 with noreturn
