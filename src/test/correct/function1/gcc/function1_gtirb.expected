var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R1: bool;
var {:extern} $Gamma_R16: bool;
var {:extern} $Gamma_R17: bool;
var {:extern} $Gamma_R2: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R1: bv64;
var {:extern} $R16: bv64;
var {:extern} $R17: bv64;
var {:extern} $R2: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $_DYNAMIC_addr: bv64;
axiom ($_DYNAMIC_addr == 69024bv64);
const {:extern} $_GLOBAL_OFFSET_TABLE__addr: bv64;
axiom ($_GLOBAL_OFFSET_TABLE__addr == 69584bv64);
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2048bv64);
const {:extern} $__FRAME_END___addr: bv64;
axiom ($__FRAME_END___addr == 2320bv64);
const {:extern} $__abi_tag_addr: bv64;
axiom ($__abi_tag_addr == 632bv64);
const {:extern} $__do_global_dtors_aux_fini_array_entry_addr: bv64;
axiom ($__do_global_dtors_aux_fini_array_entry_addr == 69016bv64);
const {:extern} $__frame_dummy_init_array_entry_addr: bv64;
axiom ($__frame_dummy_init_array_entry_addr == 69008bv64);
const {:extern} $completed.0_addr: bv64;
axiom ($completed.0_addr == 69648bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69652bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69656bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_load8(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  #gammaMap[#index]
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} gamma_store8(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_load8_le(#memory: [bv64]bv8, #index: bv64) returns (bv8) {
  #memory[#index]
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

function {:extern} memory_store8_le(#memory: [bv64]bv8, #index: bv64, #value: bv8) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 24"} zero_extend24_8(bv8) returns (bv32);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load64_le($mem, 2048bv64) == 131073bv64);
  free ensures (memory_load8_le($mem, 2056bv64) == 37bv8);
  free ensures (memory_load8_le($mem, 2057bv64) == 100bv8);
  free ensures (memory_load8_le($mem, 2058bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2059bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1924bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$get_two_1876();
  modifies $Gamma_R0, $Gamma_R1, $Gamma_R31, $Gamma_stack, $R0, $R1, $R31, $stack;
  free requires (memory_load64_le($mem, 2048bv64) == 131073bv64);
  free requires (memory_load8_le($mem, 2056bv64) == 37bv8);
  free requires (memory_load8_le($mem, 2057bv64) == 100bv8);
  free requires (memory_load8_le($mem, 2058bv64) == 10bv8);
  free requires (memory_load8_le($mem, 2059bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1924bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R31 == old($R31));
  free ensures (memory_load64_le($mem, 2048bv64) == 131073bv64);
  free ensures (memory_load8_le($mem, 2056bv64) == 37bv8);
  free ensures (memory_load8_le($mem, 2057bv64) == 100bv8);
  free ensures (memory_load8_le($mem, 2058bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2059bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1924bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$get_two_1876()
{
  var #Gamma_load1: bool;
  var #Gamma_load2: bool;
  var #Gamma_load3: bool;
  var #load1: bv8;
  var #load2: bv32;
  var #load3: bv64;
  b#get_two_entry:
    assume {:captureState "get_two_entry (lkvQp5JbQXmQ+jsXqPsRSw==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551600bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store8_le($stack, bvadd64($R31, 15bv64), $R0[8:0]), gamma_store8($Gamma_stack, bvadd64($R31, 15bv64), $Gamma_R0);
    assume {:captureState "1880_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 8bv64), $R1[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 8bv64), $Gamma_R1);
    assume {:captureState "1884_0"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, $R31, $R2), gamma_store64($Gamma_stack, $R31, $Gamma_R2);
    assume {:captureState "1888_0"} true;
    #load1, #Gamma_load1 := memory_load8_le($stack, bvadd64($R31, 15bv64)), gamma_load8($Gamma_stack, bvadd64($R31, 15bv64));
    $R1, $Gamma_R1 := zero_extend32_32(zero_extend24_8(#load1)), #Gamma_load1;
    #load2, #Gamma_load2 := memory_load32_le($stack, bvadd64($R31, 8bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 8bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load2), #Gamma_load2;
    $R0, $Gamma_R0 := zero_extend32_32(bvadd32($R1[32:0], $R0[32:0])), ($Gamma_R0 && $Gamma_R1);
    $R1, $Gamma_R1 := zero_extend32_32($R0[32:0]), $Gamma_R0;
    #load3, #Gamma_load3 := memory_load64_le($stack, $R31), gamma_load64($Gamma_stack, $R31);
    $R0, $Gamma_R0 := #load3, #Gamma_load3;
    $R0, $Gamma_R0 := zero_extend32_32(bvadd32($R1[32:0], $R0[32:0])), ($Gamma_R0 && $Gamma_R1);
    $R31, $Gamma_R31 := bvadd64($R31, 16bv64), $Gamma_R31;
    goto b#get_two_basil_return_1;
  b#get_two_basil_return_1:
    assume {:captureState "get_two_basil_return_1"} true;
    return;
}

procedure p$printf();
  free requires (memory_load64_le($mem, 2048bv64) == 131073bv64);
  free requires (memory_load8_le($mem, 2056bv64) == 37bv8);
  free requires (memory_load8_le($mem, 2057bv64) == 100bv8);
  free requires (memory_load8_le($mem, 2058bv64) == 10bv8);
  free requires (memory_load8_le($mem, 2059bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1924bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le($mem, 2048bv64) == 131073bv64);
  free ensures (memory_load8_le($mem, 2056bv64) == 37bv8);
  free ensures (memory_load8_le($mem, 2057bv64) == 100bv8);
  free ensures (memory_load8_le($mem, 2058bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2059bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1924bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure p$main_1924();
  modifies $Gamma_R0, $Gamma_R1, $Gamma_R16, $Gamma_R17, $Gamma_R2, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_mem, $Gamma_stack, $R0, $R1, $R16, $R17, $R2, $R29, $R30, $R31, $mem, $stack;
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le($mem, 2048bv64) == 131073bv64);
  free requires (memory_load8_le($mem, 2056bv64) == 37bv8);
  free requires (memory_load8_le($mem, 2057bv64) == 100bv8);
  free requires (memory_load8_le($mem, 2058bv64) == 10bv8);
  free requires (memory_load8_le($mem, 2059bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1924bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load64_le($mem, 2048bv64) == 131073bv64);
  free ensures (memory_load8_le($mem, 2056bv64) == 37bv8);
  free ensures (memory_load8_le($mem, 2057bv64) == 100bv8);
  free ensures (memory_load8_le($mem, 2058bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2059bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1924bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_1924()
{
  var #Cse0__5_5: bv64;
  var #Gamma_Cse0__5_5: bool;
  var #Gamma_load10: bool;
  var #Gamma_load17: bool;
  var #Gamma_load18: bool;
  var #Gamma_load19: bool;
  var #load10: bv64;
  var #load17: bv64;
  var #load18: bv64;
  var #load19: bv32;
  b#main_entry:
    assume {:captureState "main_entry (esMR8CLvRH6F/3cHhuaI0Q==)"} true;
    #Cse0__5_5, #Gamma_Cse0__5_5 := bvadd64($R31, 18446744073709551600bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_5, $R29), gamma_store64($Gamma_stack, #Cse0__5_5, $Gamma_R29);
    assume {:captureState "1924_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_5, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_5, 8bv64), $Gamma_R30);
    assume {:captureState "1924_2"} true;
    $R31, $Gamma_R31 := #Cse0__5_5, #Gamma_Cse0__5_5;
    $R29, $Gamma_R29 := $R31, $Gamma_R31;
    $R0, $Gamma_R0 := 69632bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 20bv64), $Gamma_R0;
    $R1, $Gamma_R1 := 1bv64, true;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store32_le($mem, $R0, $R1[32:0]), gamma_store32($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "1944_0"} true;
    $R2, $Gamma_R2 := 58368bv64, true;
    $R2, $Gamma_R2 := ($R2[64:32] ++ (21515bv16 ++ $R2[16:0])), $Gamma_R2;
    $R2, $Gamma_R2 := ($R2[64:48] ++ (2bv16 ++ $R2[32:0])), $Gamma_R2;
    $R1, $Gamma_R1 := 10bv64, true;
    $R0, $Gamma_R0 := 97bv64, true;
    $R30, $Gamma_R30 := 1972bv64, true;
    call p$get_two_1876();
    goto b#main_5;
  b#main_5:
    assume {:captureState "main_5 (zo98bL2YRTak5+76VWgMlQ==)"} true;
    $R1, $Gamma_R1 := zero_extend32_32($R0[32:0]), $Gamma_R0;
    $R0, $Gamma_R0 := 69632bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 24bv64), $Gamma_R0;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store32_le($mem, $R0, $R1[32:0]), gamma_store32($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "1984_0"} true;
    $R0, $Gamma_R0 := 69632bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 24bv64), $Gamma_R0;
    call p$rely();
    #load19, #Gamma_load19 := memory_load32_le($mem, $R0), (gamma_load32($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := zero_extend32_32(#load19), #Gamma_load19;
    $R1, $Gamma_R1 := zero_extend32_32($R0[32:0]), $Gamma_R0;
    $R0, $Gamma_R0 := 0bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 2056bv64), $Gamma_R0;
    $R30, $Gamma_R30 := 2016bv64, true;
    goto b#FUN_630_entry_393;
  b#FUN_630_entry_393:
    assume {:captureState "FUN_630_entry_393"} true;
    $R16, $Gamma_R16 := 65536bv64, true;
    call p$rely();
    #load10, #Gamma_load10 := memory_load64_le($mem, bvadd64($R16, 4040bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 4040bv64)) || L($mem, bvadd64($R16, 4040bv64)));
    $R17, $Gamma_R17 := #load10, #Gamma_load10;
    $R16, $Gamma_R16 := bvadd64($R16, 4040bv64), $Gamma_R16;
    call p$printf();
    goto b#FUN_630_basil_return_1_394;
  b#FUN_630_basil_return_1_394:
    assume {:captureState "FUN_630_basil_return_1_394"} true;
    goto b#_inlineret_3;
  b#_inlineret_3:
    assume {:captureState "_inlineret_3 (zo98bL2YRTak5+76VWgMlQ==)"} true;
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (gcXQRbmQRZq8EOqfqswOIw==)"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    #load17, #Gamma_load17 := memory_load64_le($stack, $R31), gamma_load64($Gamma_stack, $R31);
    $R29, $Gamma_R29 := #load17, #Gamma_load17;
    #load18, #Gamma_load18 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R30, $Gamma_R30 := #load18, #Gamma_load18;
    $R31, $Gamma_R31 := bvadd64($R31, 16bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

