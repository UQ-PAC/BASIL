00000e15: program
00000dfd: sub __cxa_finalize(__cxa_finalize_result)
00000e16: __cxa_finalize_result :: out u32 = low:32[R0]

00000b57:
00000c5f: R16 := 0x11000
00000c66: R17 := mem[R16 + 8, el]:u64
00000c6c: R16 := R16 + 8
00000c71: call R17 with noreturn

00000dfe: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000e17: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000009df:
000009e3: #3 := R31 - 0x20
000009e9: mem := mem with [#3, el]:u64 <- R29
000009ef: mem := mem with [#3 + 8, el]:u64 <- R30
000009f3: R31 := #3
000009f9: R29 := R31
00000a01: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000a06: R19 := 0x11000
00000a0d: R0 := pad:64[mem[R19 + 0x38]]
00000a14: when 31:0[R0] <> 0 goto %00000a12
00000dff: goto %00000b20

00000b20:
00000b23: R0 := 0x10000
00000b2a: R0 := mem[R0 + 0xFC8, el]:u64
00000b30: when R0 = 0 goto %00000b2e
00000e00: goto %00000b47

00000b47:
00000b4a: R0 := 0x11000
00000b51: R0 := mem[R0 + 0x30, el]:u64
00000b56: R30 := 0x730
00000b59: call @__cxa_finalize with return %00000b2e

00000b2e:
00000b36: R30 := 0x734
00000b38: call @deregister_tm_clones with return %00000b3a

00000b3a:
00000b3d: R0 := 1
00000b45: mem := mem with [R19 + 0x38] <- 7:0[R0]
00000e01: goto %00000a12

00000a12:
00000a1c: R19 := mem[R31 + 0x10, el]:u64
00000a23: R29 := mem[R31, el]:u64
00000a28: R30 := mem[R31 + 8, el]:u64
00000a2c: R31 := R31 + 0x20
00000a31: call R30 with noreturn

00000e02: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000e18: __libc_start_main_main :: in u64 = R0
00000e19: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000e1a: __libc_start_main_arg3 :: in out u64 = R2
00000e1b: __libc_start_main_auxv :: in out u64 = R3
00000e1c: __libc_start_main_result :: out u32 = low:32[R0]

00000938:
00000c49: R16 := 0x11000
00000c50: R17 := mem[R16, el]:u64
00000c56: R16 := R16
00000c5b: call R17 with noreturn

00000e03: sub _fini(_fini_result)
00000e1d: _fini_result :: out u32 = low:32[R0]

00000730:
00000736: #0 := R31 - 0x10
0000073c: mem := mem with [#0, el]:u64 <- R29
00000742: mem := mem with [#0 + 8, el]:u64 <- R30
00000746: R31 := #0
0000074c: R29 := R31
00000753: R29 := mem[R31, el]:u64
00000758: R30 := mem[R31 + 8, el]:u64
0000075c: R31 := R31 + 0x10
00000761: call R30 with noreturn

00000e04: sub _init(_init_result)
00000e1e: _init_result :: out u32 = low:32[R0]

00000d3b:
00000d41: #6 := R31 - 0x10
00000d47: mem := mem with [#6, el]:u64 <- R29
00000d4d: mem := mem with [#6 + 8, el]:u64 <- R30
00000d51: R31 := #6
00000d57: R29 := R31
00000d5c: R30 := 0x5C8
00000d5e: call @call_weak_fn with return %00000d60

00000d60:
00000d65: R29 := mem[R31, el]:u64
00000d6a: R30 := mem[R31 + 8, el]:u64
00000d6e: R31 := R31 + 0x10
00000d73: call R30 with noreturn

00000e05: sub _start(_start_result)
00000e1f: _start_result :: out u32 = low:32[R0]

000008f9:
000008fe: R29 := 0
00000903: R30 := 0
00000909: R5 := R0
00000910: R1 := mem[R31, el]:u64
00000916: R2 := R31 + 8
0000091c: R6 := R31
00000921: R0 := 0x10000
00000928: R0 := mem[R0 + 0xFD8, el]:u64
0000092d: R3 := 0
00000932: R4 := 0
00000937: R30 := 0x670
0000093a: call @__libc_start_main with return %0000093c

0000093c:
0000093f: R30 := 0x674
00000942: call @abort with return %00000e06

00000e06:
00000e07: call @call_weak_fn with noreturn

00000e08: sub abort()


00000940:
00000c8b: R16 := 0x11000
00000c92: R17 := mem[R16 + 0x18, el]:u64
00000c98: R16 := R16 + 0x18
00000c9d: call R17 with noreturn

00000e09: sub call_weak_fn(call_weak_fn_result)
00000e20: call_weak_fn_result :: out u32 = low:32[R0]

00000944:
00000947: R0 := 0x10000
0000094e: R0 := mem[R0 + 0xFD0, el]:u64
00000954: when R0 = 0 goto %00000952
00000e0a: goto %00000b97

00000952:
0000095a: call R30 with noreturn

00000b97:
00000b9a: goto @__gmon_start__

00000b98:
00000c75: R16 := 0x11000
00000c7c: R17 := mem[R16 + 0x10, el]:u64
00000c82: R16 := R16 + 0x10
00000c87: call R17 with noreturn

00000e0b: sub deregister_tm_clones(deregister_tm_clones_result)
00000e21: deregister_tm_clones_result :: out u32 = low:32[R0]

00000960:
00000963: R0 := 0x11000
00000969: R0 := R0 + 0x38
0000096e: R1 := 0x11000
00000974: R1 := R1 + 0x38
0000097a: #1 := ~R0
0000097f: #2 := R1 + ~R0
00000985: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000098b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000098f: ZF := #2 + 1 = 0
00000993: NF := 63:63[#2 + 1]
00000999: when ZF goto %00000997
00000e0c: goto %00000b79

00000b79:
00000b7c: R1 := 0x10000
00000b83: R1 := mem[R1 + 0xFC0, el]:u64
00000b88: when R1 = 0 goto %00000997
00000e0d: goto %00000b8c

00000997:
0000099f: call R30 with noreturn

00000b8c:
00000b90: R16 := R1
00000b95: call R16 with noreturn

00000e0e: sub frame_dummy(frame_dummy_result)
00000e22: frame_dummy_result :: out u32 = low:32[R0]

00000a37:
00000a39: call @register_tm_clones with noreturn

00000e0f: sub get_two(get_two_result)
00000e23: get_two_result :: out u32 = low:32[R0]

00000a3b:
00000a3f: R31 := R31 - 0x10
00000a47: mem := mem with [R31 + 0xF] <- 7:0[R0]
00000a4f: mem := mem with [R31 + 8, el]:u32 <- 31:0[R1]
00000a57: mem := mem with [R31, el]:u64 <- R2
00000a5e: R8 := pad:64[mem[R31 + 0xF]]
00000a65: R9 := pad:64[mem[R31 + 8, el]:u32]
00000a6c: R9 := pad:64[31:0[R8] + 31:0[R9]]
00000a73: R8 := mem[R31, el]:u64
00000a7a: R8 := R8 + extend:64[31:0[R9]]
00000a80: R0 := pad:64[31:0[R8]]
00000a86: R31 := R31 + 0x10
00000a8b: call R30 with noreturn

00000e10: sub main(main_argc, main_argv, main_result)
00000e24: main_argc :: in u32 = low:32[R0]
00000e25: main_argv :: in out u64 = R1
00000e26: main_result :: out u32 = low:32[R0]

00000a8d:
00000a91: #4 := R31 - 0x10
00000a97: mem := mem with [#4, el]:u64 <- R29
00000a9d: mem := mem with [#4 + 8, el]:u64 <- R30
00000aa1: R31 := #4
00000aa7: R29 := R31
00000aac: R9 := 0x11000
00000ab1: R8 := 1
00000ab9: mem := mem with [R9 + 0x3C, el]:u32 <- 31:0[R8]
00000abe: R0 := 0x61
00000ac3: R1 := 0xA
00000ac8: R2 := 0xE400
00000acf: R2 := 63:32[R2].0x540B.15:0[R2]
00000ad6: R2 := 63:48[R2].2.31:0[R2]
00000adb: R30 := 0x7B0
00000add: call @get_two with return %00000adf

00000adf:
00000ae2: R8 := 0x11000
00000aea: mem := mem with [R8 + 0x40, el]:u32 <- 31:0[R0]
00000af1: R1 := pad:64[mem[R8 + 0x40, el]:u32]
00000af6: R0 := 0
00000afc: R0 := R0 + 0x7EC
00000b01: R30 := 0x7C8
00000b04: call @printf with return %00000b06

00000b06:
00000b09: R0 := 0
00000b10: R29 := mem[R31, el]:u64
00000b15: R30 := mem[R31 + 8, el]:u64
00000b19: R31 := R31 + 0x10
00000b1e: call R30 with noreturn

00000e11: sub printf(printf_format, printf_result)
00000e27: printf_format :: in u64 = R0
00000e28: printf_result :: out u32 = low:32[R0]

00000b02:
00000ca1: R16 := 0x11000
00000ca8: R17 := mem[R16 + 0x20, el]:u64
00000cae: R16 := R16 + 0x20
00000cb3: call R17 with noreturn

00000e12: sub register_tm_clones(register_tm_clones_result)
00000e29: register_tm_clones_result :: out u32 = low:32[R0]

000009a1:
000009a4: R0 := 0x11000
000009aa: R0 := R0 + 0x38
000009af: R1 := 0x11000
000009b5: R1 := R1 + 0x38
000009bc: R1 := R1 + ~R0 + 1
000009c2: R2 := 0.63:63[R1]
000009c9: R1 := R2 + (R1 ~>> 3)
000009cf: R1 := extend:64[63:1[R1]]
000009d5: when R1 = 0 goto %000009d3
00000e13: goto %00000b5b

00000b5b:
00000b5e: R2 := 0x10000
00000b65: R2 := mem[R2 + 0xFE0, el]:u64
00000b6a: when R2 = 0 goto %000009d3
00000e14: goto %00000b6e

000009d3:
000009db: call R30 with noreturn

00000b6e:
00000b72: R16 := R2
00000b77: call R16 with noreturn
