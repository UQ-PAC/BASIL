00000ea3: program
00000e8b: sub __cxa_finalize(__cxa_finalize_result)
00000ea4: __cxa_finalize_result :: out u32 = low:32[R0]

00000bd9:
00000ce1: R16 := 0x10000
00000ce8: R17 := mem[R16 + 0xFB0, el]:u64
00000cee: R16 := R16 + 0xFB0
00000cf3: call R17 with noreturn

00000e8c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000ea5: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000a3e:
00000a42: #3 := R31 - 0x20
00000a48: mem := mem with [#3, el]:u64 <- R29
00000a4e: mem := mem with [#3 + 8, el]:u64 <- R30
00000a52: R31 := #3
00000a58: R29 := R31
00000a60: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000a65: R19 := 0x11000
00000a6c: R0 := pad:64[mem[R19 + 0x10]]
00000a73: when 31:0[R0] <> 0 goto %00000a71
00000e8d: goto %00000ba2

00000ba2:
00000ba5: R0 := 0x10000
00000bac: R0 := mem[R0 + 0xFE0, el]:u64
00000bb2: when R0 = 0 goto %00000bb0
00000e8e: goto %00000bc9

00000bc9:
00000bcc: R0 := 0x11000
00000bd3: R0 := mem[R0 + 8, el]:u64
00000bd8: R30 := 0x730
00000bdb: call @__cxa_finalize with return %00000bb0

00000bb0:
00000bb8: R30 := 0x734
00000bba: call @deregister_tm_clones with return %00000bbc

00000bbc:
00000bbf: R0 := 1
00000bc7: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000e8f: goto %00000a71

00000a71:
00000a7b: R19 := mem[R31 + 0x10, el]:u64
00000a82: R29 := mem[R31, el]:u64
00000a87: R30 := mem[R31 + 8, el]:u64
00000a8b: R31 := R31 + 0x20
00000a90: call R30 with noreturn

00000e90: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000ea6: __libc_start_main_main :: in u64 = R0
00000ea7: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000ea8: __libc_start_main_arg3 :: in out u64 = R2
00000ea9: __libc_start_main_auxv :: in out u64 = R3
00000eaa: __libc_start_main_result :: out u32 = low:32[R0]

00000997:
00000ccb: R16 := 0x10000
00000cd2: R17 := mem[R16 + 0xFA8, el]:u64
00000cd8: R16 := R16 + 0xFA8
00000cdd: call R17 with noreturn

00000e91: sub _fini(_fini_result)
00000eab: _fini_result :: out u32 = low:32[R0]

00000777:
0000077d: #0 := R31 - 0x10
00000783: mem := mem with [#0, el]:u64 <- R29
00000789: mem := mem with [#0 + 8, el]:u64 <- R30
0000078d: R31 := #0
00000793: R29 := R31
0000079a: R29 := mem[R31, el]:u64
0000079f: R30 := mem[R31 + 8, el]:u64
000007a3: R31 := R31 + 0x10
000007a8: call R30 with noreturn

00000e92: sub _init(_init_result)
00000eac: _init_result :: out u32 = low:32[R0]

00000dc3:
00000dc9: #6 := R31 - 0x10
00000dcf: mem := mem with [#6, el]:u64 <- R29
00000dd5: mem := mem with [#6 + 8, el]:u64 <- R30
00000dd9: R31 := #6
00000ddf: R29 := R31
00000de4: R30 := 0x5C8
00000de6: call @call_weak_fn with return %00000de8

00000de8:
00000ded: R29 := mem[R31, el]:u64
00000df2: R30 := mem[R31 + 8, el]:u64
00000df6: R31 := R31 + 0x10
00000dfb: call R30 with noreturn

00000e93: sub _start(_start_result)
00000ead: _start_result :: out u32 = low:32[R0]

00000958:
0000095d: R29 := 0
00000962: R30 := 0
00000968: R5 := R0
0000096f: R1 := mem[R31, el]:u64
00000975: R2 := R31 + 8
0000097b: R6 := R31
00000980: R0 := 0x10000
00000987: R0 := mem[R0 + 0xFF0, el]:u64
0000098c: R3 := 0
00000991: R4 := 0
00000996: R30 := 0x670
00000999: call @__libc_start_main with return %0000099b

0000099b:
0000099e: R30 := 0x674
000009a1: call @abort with return %00000e94

00000e94:
00000e95: call @call_weak_fn with noreturn

00000e96: sub abort()


0000099f:
00000d0d: R16 := 0x10000
00000d14: R17 := mem[R16 + 0xFC0, el]:u64
00000d1a: R16 := R16 + 0xFC0
00000d1f: call R17 with noreturn

00000e97: sub call_weak_fn(call_weak_fn_result)
00000eae: call_weak_fn_result :: out u32 = low:32[R0]

000009a3:
000009a6: R0 := 0x10000
000009ad: R0 := mem[R0 + 0xFE8, el]:u64
000009b3: when R0 = 0 goto %000009b1
00000e98: goto %00000c19

000009b1:
000009b9: call R30 with noreturn

00000c19:
00000c1c: goto @__gmon_start__

00000c1a:
00000cf7: R16 := 0x10000
00000cfe: R17 := mem[R16 + 0xFB8, el]:u64
00000d04: R16 := R16 + 0xFB8
00000d09: call R17 with noreturn

00000e99: sub deregister_tm_clones(deregister_tm_clones_result)
00000eaf: deregister_tm_clones_result :: out u32 = low:32[R0]

000009bf:
000009c2: R0 := 0x11000
000009c8: R0 := R0 + 0x10
000009cd: R1 := 0x11000
000009d3: R1 := R1 + 0x10
000009d9: #1 := ~R0
000009de: #2 := R1 + ~R0
000009e4: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000009ea: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000009ee: ZF := #2 + 1 = 0
000009f2: NF := 63:63[#2 + 1]
000009f8: when ZF goto %000009f6
00000e9a: goto %00000bfb

00000bfb:
00000bfe: R1 := 0x10000
00000c05: R1 := mem[R1 + 0xFD8, el]:u64
00000c0a: when R1 = 0 goto %000009f6
00000e9b: goto %00000c0e

000009f6:
000009fe: call R30 with noreturn

00000c0e:
00000c12: R16 := R1
00000c17: call R16 with noreturn

00000e9c: sub frame_dummy(frame_dummy_result)
00000eb0: frame_dummy_result :: out u32 = low:32[R0]

00000a96:
00000a98: call @register_tm_clones with noreturn

00000e9d: sub get_two(get_two_result)
00000eb1: get_two_result :: out u32 = low:32[R0]

00000a9a:
00000a9e: R31 := R31 - 0x10
00000aa6: mem := mem with [R31 + 0xF] <- 7:0[R0]
00000aae: mem := mem with [R31 + 8, el]:u32 <- 31:0[R1]
00000ab6: mem := mem with [R31, el]:u64 <- R2
00000abd: R1 := pad:64[mem[R31 + 0xF]]
00000ac4: R0 := pad:64[mem[R31 + 8, el]:u32]
00000acb: R0 := pad:64[31:0[R1] + 31:0[R0]]
00000ad1: R1 := pad:64[31:0[R0]]
00000ad8: R0 := mem[R31, el]:u64
00000adf: R0 := pad:64[31:0[R1] + 31:0[R0]]
00000ae5: R31 := R31 + 0x10
00000aea: call R30 with noreturn

00000e9e: sub main(main_argc, main_argv, main_result)
00000eb2: main_argc :: in u32 = low:32[R0]
00000eb3: main_argv :: in out u64 = R1
00000eb4: main_result :: out u32 = low:32[R0]

00000aec:
00000af0: #4 := R31 - 0x10
00000af6: mem := mem with [#4, el]:u64 <- R29
00000afc: mem := mem with [#4 + 8, el]:u64 <- R30
00000b00: R31 := #4
00000b06: R29 := R31
00000b0b: R0 := 0x11000
00000b11: R0 := R0 + 0x14
00000b16: R1 := 1
00000b1e: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000b23: R2 := 0xE400
00000b2a: R2 := 63:32[R2].0x540B.15:0[R2]
00000b31: R2 := 63:48[R2].2.31:0[R2]
00000b36: R1 := 0xA
00000b3b: R0 := 0x61
00000b40: R30 := 0x7B4
00000b42: call @get_two with return %00000b44

00000b44:
00000b48: R1 := pad:64[31:0[R0]]
00000b4d: R0 := 0x11000
00000b53: R0 := R0 + 0x18
00000b5b: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000b60: R0 := 0x11000
00000b66: R0 := R0 + 0x18
00000b6d: R0 := pad:64[mem[R0, el]:u32]
00000b73: R1 := pad:64[31:0[R0]]
00000b78: R0 := 0
00000b7e: R0 := R0 + 0x808
00000b83: R30 := 0x7E0
00000b86: call @printf with return %00000b88

00000b88:
00000b8b: R0 := 0
00000b92: R29 := mem[R31, el]:u64
00000b97: R30 := mem[R31 + 8, el]:u64
00000b9b: R31 := R31 + 0x10
00000ba0: call R30 with noreturn

00000e9f: sub printf(printf_format, printf_result)
00000eb5: printf_format :: in u64 = R0
00000eb6: printf_result :: out u32 = low:32[R0]

00000b84:
00000d23: R16 := 0x10000
00000d2a: R17 := mem[R16 + 0xFC8, el]:u64
00000d30: R16 := R16 + 0xFC8
00000d35: call R17 with noreturn

00000ea0: sub register_tm_clones(register_tm_clones_result)
00000eb7: register_tm_clones_result :: out u32 = low:32[R0]

00000a00:
00000a03: R0 := 0x11000
00000a09: R0 := R0 + 0x10
00000a0e: R1 := 0x11000
00000a14: R1 := R1 + 0x10
00000a1b: R1 := R1 + ~R0 + 1
00000a21: R2 := 0.63:63[R1]
00000a28: R1 := R2 + (R1 ~>> 3)
00000a2e: R1 := extend:64[63:1[R1]]
00000a34: when R1 = 0 goto %00000a32
00000ea1: goto %00000bdd

00000bdd:
00000be0: R2 := 0x10000
00000be7: R2 := mem[R2 + 0xFF8, el]:u64
00000bec: when R2 = 0 goto %00000a32
00000ea2: goto %00000bf0

00000a32:
00000a3a: call R30 with noreturn

00000bf0:
00000bf4: R16 := R2
00000bf9: call R16 with noreturn
