000006cf: program
00000698: sub __cxa_finalize(__cxa_finalize_result)
000006d0: __cxa_finalize_result :: out u32 = low:32[R0]

0000045c:
00000564: R16 := 0x11000
0000056b: R17 := mem[R16 + 8, el]:u64
00000571: R16 := R16 + 8
00000576: call R17 with noreturn

00000699: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006d1: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002d6:
000002da: #3 := R31 - 0x20
000002e0: mem := mem with [#3, el]:u64 <- R29
000002e6: mem := mem with [#3 + 8, el]:u64 <- R30
000002ea: R31 := #3
000002f0: R29 := R31
000002f8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002fd: R19 := 0x11000
00000304: R0 := pad:64[mem[R19 + 0x38]]
0000030b: when 31:0[R0] <> 0 goto %00000309
000006c5: goto %00000425

00000425:
00000428: R0 := 0x10000
0000042f: R0 := mem[R0 + 0xFB8, el]:u64
00000435: when R0 = 0 goto %00000433
000006c6: goto %0000044c

0000044c:
0000044f: R0 := 0x11000
00000456: R0 := mem[R0 + 0x30, el]:u64
0000045b: R30 := 0x770
0000045e: call @__cxa_finalize with return %00000433

00000433:
0000043b: R30 := 0x774
0000043d: call @deregister_tm_clones with return %0000043f

0000043f:
00000442: R0 := 1
0000044a: mem := mem with [R19 + 0x38] <- 7:0[R0]
000006c7: goto %00000309

00000309:
00000313: R19 := mem[R31 + 0x10, el]:u64
0000031a: R29 := mem[R31, el]:u64
0000031f: R30 := mem[R31 + 8, el]:u64
00000323: R31 := R31 + 0x20
00000328: call R30 with noreturn

0000069d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006d2: __libc_start_main_main :: in u64 = R0
000006d3: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006d4: __libc_start_main_arg3 :: in out u64 = R2
000006d5: __libc_start_main_auxv :: in out u64 = R3
000006d6: __libc_start_main_result :: out u32 = low:32[R0]

0000022f:
0000054e: R16 := 0x11000
00000555: R17 := mem[R16, el]:u64
0000055b: R16 := R16
00000560: call R17 with noreturn

0000069e: sub _fini(_fini_result)
000006d7: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000069f: sub _init(_init_result)
000006d8: _init_result :: out u32 = low:32[R0]

000005d4:
000005da: #6 := R31 - 0x10
000005e0: mem := mem with [#6, el]:u64 <- R29
000005e6: mem := mem with [#6 + 8, el]:u64 <- R30
000005ea: R31 := #6
000005f0: R29 := R31
000005f5: R30 := 0x5F8
000005f7: call @call_weak_fn with return %000005f9

000005f9:
000005fe: R29 := mem[R31, el]:u64
00000603: R30 := mem[R31 + 8, el]:u64
00000607: R31 := R31 + 0x10
0000060c: call R30 with noreturn

000006a0: sub _start(_start_result)
000006d9: _start_result :: out u32 = low:32[R0]

000001f0:
000001f5: R29 := 0
000001fa: R30 := 0
00000200: R5 := R0
00000207: R1 := mem[R31, el]:u64
0000020d: R2 := R31 + 8
00000213: R6 := R31
00000218: R0 := 0x10000
0000021f: R0 := mem[R0 + 0xFD8, el]:u64
00000224: R3 := 0
00000229: R4 := 0
0000022e: R30 := 0x6B0
00000231: call @__libc_start_main with return %00000233

00000233:
00000236: R30 := 0x6B4
00000239: call @abort with return %000006c8

000006c8:
000006c9: call @call_weak_fn with noreturn

000006a3: sub abort()


00000237:
00000590: R16 := 0x11000
00000597: R17 := mem[R16 + 0x18, el]:u64
0000059d: R16 := R16 + 0x18
000005a2: call R17 with noreturn

000006a4: sub call_weak_fn(call_weak_fn_result)
000006da: call_weak_fn_result :: out u32 = low:32[R0]

0000023b:
0000023e: R0 := 0x10000
00000245: R0 := mem[R0 + 0xFC8, el]:u64
0000024b: when R0 = 0 goto %00000249
000006ca: goto %0000049c

00000249:
00000251: call R30 with noreturn

0000049c:
0000049f: goto @__gmon_start__

0000049d:
0000057a: R16 := 0x11000
00000581: R17 := mem[R16 + 0x10, el]:u64
00000587: R16 := R16 + 0x10
0000058c: call R17 with noreturn

000006a6: sub deregister_tm_clones(deregister_tm_clones_result)
000006db: deregister_tm_clones_result :: out u32 = low:32[R0]

00000257:
0000025a: R0 := 0x11000
00000260: R0 := R0 + 0x38
00000265: R1 := 0x11000
0000026b: R1 := R1 + 0x38
00000271: #1 := ~R0
00000276: #2 := R1 + ~R0
0000027c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000282: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000286: ZF := #2 + 1 = 0
0000028a: NF := 63:63[#2 + 1]
00000290: when ZF goto %0000028e
000006cb: goto %0000047e

0000047e:
00000481: R1 := 0x10000
00000488: R1 := mem[R1 + 0xFB0, el]:u64
0000048d: when R1 = 0 goto %0000028e
000006cc: goto %00000491

0000028e:
00000296: call R30 with noreturn

00000491:
00000495: R16 := R1
0000049a: call R16 with noreturn

000006a9: sub frame_dummy(frame_dummy_result)
000006dc: frame_dummy_result :: out u32 = low:32[R0]

0000032e:
00000330: call @register_tm_clones with noreturn

000006aa: sub get_two(get_two_result)
000006dd: get_two_result :: out u32 = low:32[R0]

00000332:
00000336: R31 := R31 - 0x10
0000033e: mem := mem with [R31 + 0xF] <- 7:0[R0]
00000346: mem := mem with [R31 + 8, el]:u32 <- 31:0[R1]
0000034e: mem := mem with [R31, el]:u64 <- R2
00000355: R8 := pad:64[mem[R31 + 0xF]]
0000035c: R9 := pad:64[mem[R31 + 8, el]:u32]
00000363: R9 := pad:64[31:0[R8] + 31:0[R9]]
0000036a: R8 := mem[R31, el]:u64
00000371: R8 := R8 + extend:64[31:0[R9]]
00000377: R0 := pad:64[31:0[R8]]
0000037d: R31 := R31 + 0x10
00000382: call R30 with noreturn

000006ab: sub main(main_argc, main_argv, main_result)
000006de: main_argc :: in u32 = low:32[R0]
000006df: main_argv :: in out u64 = R1
000006e0: main_result :: out u32 = low:32[R0]

00000384:
00000388: #4 := R31 - 0x10
0000038e: mem := mem with [#4, el]:u64 <- R29
00000394: mem := mem with [#4 + 8, el]:u64 <- R30
00000398: R31 := #4
0000039e: R29 := R31
000003a3: R9 := 0x10000
000003aa: R9 := mem[R9 + 0xFC0, el]:u64
000003af: R8 := 1
000003b7: mem := mem with [R9, el]:u32 <- 31:0[R8]
000003bc: R0 := 0x61
000003c1: R1 := 0xA
000003c6: R2 := 0xE400
000003cd: R2 := 63:32[R2].0x540B.15:0[R2]
000003d4: R2 := 63:48[R2].2.31:0[R2]
000003d9: R30 := 0x7F4
000003db: call @get_two with return %000003dd

000003dd:
000003e0: R8 := 0x10000
000003e7: R8 := mem[R8 + 0xFD0, el]:u64
000003ef: mem := mem with [R8, el]:u32 <- 31:0[R0]
000003f6: R1 := pad:64[mem[R8, el]:u32]
000003fb: R0 := 0
00000401: R0 := R0 + 0x834
00000406: R30 := 0x810
00000409: call @printf with return %0000040b

0000040b:
0000040e: R0 := 0
00000415: R29 := mem[R31, el]:u64
0000041a: R30 := mem[R31 + 8, el]:u64
0000041e: R31 := R31 + 0x10
00000423: call R30 with noreturn

000006ac: sub printf(printf_format, printf_result)
000006e1: printf_format :: in u64 = R0
000006e2: printf_result :: out u32 = low:32[R0]

00000407:
000005a6: R16 := 0x11000
000005ad: R17 := mem[R16 + 0x20, el]:u64
000005b3: R16 := R16 + 0x20
000005b8: call R17 with noreturn

000006ad: sub register_tm_clones(register_tm_clones_result)
000006e3: register_tm_clones_result :: out u32 = low:32[R0]

00000298:
0000029b: R0 := 0x11000
000002a1: R0 := R0 + 0x38
000002a6: R1 := 0x11000
000002ac: R1 := R1 + 0x38
000002b3: R1 := R1 + ~R0 + 1
000002b9: R2 := 0.63:63[R1]
000002c0: R1 := R2 + (R1 ~>> 3)
000002c6: R1 := extend:64[63:1[R1]]
000002cc: when R1 = 0 goto %000002ca
000006cd: goto %00000460

00000460:
00000463: R2 := 0x10000
0000046a: R2 := mem[R2 + 0xFE0, el]:u64
0000046f: when R2 = 0 goto %000002ca
000006ce: goto %00000473

000002ca:
000002d2: call R30 with noreturn

00000473:
00000477: R16 := R2
0000047c: call R16 with noreturn
