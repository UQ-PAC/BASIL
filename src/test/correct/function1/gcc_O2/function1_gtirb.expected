var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R2: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R3: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R4: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R2: bv64;
var {:extern} R29: bv64;
var {:extern} R3: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R4: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 4196472bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 4325400bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 4325396bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "zero_extend 24"} zero_extend24_8(bv8) returns (bv32);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load64_le(mem, 4196472bv64) == 131073bv64);
  free ensures (memory_load8_le(mem, 4196480bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 4196481bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 4196482bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 4196483bv64) == 0bv8);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure FUN_400680();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 4196472bv64) == 131073bv64);
  free requires (memory_load8_le(mem, 4196480bv64) == 37bv8);
  free requires (memory_load8_le(mem, 4196481bv64) == 100bv8);
  free requires (memory_load8_le(mem, 4196482bv64) == 10bv8);
  free requires (memory_load8_le(mem, 4196483bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 4196472bv64) == 131073bv64);
  free ensures (memory_load8_le(mem, 4196480bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 4196481bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 4196482bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 4196483bv64) == 0bv8);

implementation FUN_400680()
{
  var $load10: bv64;
  var Gamma_$load10: bool;
  $FUN_400680$__0__$UtkQk4ONSE6hNEuDpZ95RQ:
    assume {:captureState "$FUN_400680$__0__$UtkQk4ONSE6hNEuDpZ95RQ"} true;
    R16, Gamma_R16 := 4321280bv64, true;
    call rely();
    $load10, Gamma_$load10 := memory_load64_le(mem, bvadd64(R16, 4024bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 4024bv64)) || L(mem, bvadd64(R16, 4024bv64)));
    R17, Gamma_R17 := $load10, Gamma_$load10;
    R16, Gamma_R16 := bvadd64(R16, 4024bv64), Gamma_R16;
    call __printf_chk();
    assume false;
}

procedure get_two();
  modifies Gamma_R0, Gamma_R1, Gamma_R2, R0, R1, R2;
  free requires (memory_load64_le(mem, 4196472bv64) == 131073bv64);
  free requires (memory_load8_le(mem, 4196480bv64) == 37bv8);
  free requires (memory_load8_le(mem, 4196481bv64) == 100bv8);
  free requires (memory_load8_le(mem, 4196482bv64) == 10bv8);
  free requires (memory_load8_le(mem, 4196483bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 4196472bv64) == 131073bv64);
  free ensures (memory_load8_le(mem, 4196480bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 4196481bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 4196482bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 4196483bv64) == 0bv8);

implementation get_two()
{
  $get_two$__0__$lFxxVCVARIKoZ6fzUj5YPw:
    assume {:captureState "$get_two$__0__$lFxxVCVARIKoZ6fzUj5YPw"} true;
    R1, Gamma_R1 := zero_extend32_32(bvadd32(R1[32:0], R2[32:0])), (Gamma_R2 && Gamma_R1);
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R1[32:0], zero_extend24_8(R0[8:0]))), (Gamma_R0 && Gamma_R1);
    R1, Gamma_R1 := 0bv64, true;
    R2, Gamma_R2 := 0bv64, true;
    goto get_two_basil_return;
  get_two_basil_return:
    assume {:captureState "get_two_basil_return"} true;
    return;
}

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R2, Gamma_R29, Gamma_R3, Gamma_R30, Gamma_R31, Gamma_R4, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R2, R29, R3, R30, R31, R4, mem, stack;
  free requires (memory_load64_le(mem, 4325376bv64) == 0bv64);
  free requires (memory_load64_le(mem, 4325384bv64) == 0bv64);
  free requires (memory_load64_le(mem, 4196472bv64) == 131073bv64);
  free requires (memory_load8_le(mem, 4196480bv64) == 37bv8);
  free requires (memory_load8_le(mem, 4196481bv64) == 100bv8);
  free requires (memory_load8_le(mem, 4196482bv64) == 10bv8);
  free requires (memory_load8_le(mem, 4196483bv64) == 0bv8);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 4196472bv64) == 131073bv64);
  free ensures (memory_load8_le(mem, 4196480bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 4196481bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 4196482bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 4196483bv64) == 0bv8);

implementation main()
{
  var $load16: bv64;
  var $load17: bv64;
  var $load18: bv64;
  var $load19: bv64;
  var Cse0__5$2$2: bv64;
  var Gamma_$load16: bool;
  var Gamma_$load17: bool;
  var Gamma_$load18: bool;
  var Gamma_$load19: bool;
  var Gamma_Cse0__5$2$2: bool;
  $main$__0__$fxMAJl44TWOTA8IHVD8V7Q:
    assume {:captureState "$main$__0__$fxMAJl44TWOTA8IHVD8V7Q"} true;
    R3, Gamma_R3 := 4321280bv64, true;
    call rely();
    $load18, Gamma_$load18 := memory_load64_le(mem, bvadd64(R3, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R3, 4064bv64)) || L(mem, bvadd64(R3, 4064bv64)));
    R3, Gamma_R3 := $load18, Gamma_$load18;
    Cse0__5$2$2, Gamma_Cse0__5$2$2 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5$2$2, R29), gamma_store64(Gamma_stack, Cse0__5$2$2, Gamma_R29);
    assume {:captureState "4196040$1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5$2$2, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5$2$2, 8bv64), Gamma_R30);
    assume {:captureState "4196040$2"} true;
    R31, Gamma_R31 := Cse0__5$2$2, Gamma_Cse0__5$2$2;
    R4, Gamma_R4 := 1bv64, true;
    R2, Gamma_R2 := 58368bv64, true;
    R29, Gamma_R29 := R31, Gamma_R31;
    R2, Gamma_R2 := (R2[64:32] ++ (21515bv16 ++ R2[16:0])), Gamma_R2;
    R2, Gamma_R2 := (R2[64:48] ++ (2bv16 ++ R2[32:0])), Gamma_R2;
    R1, Gamma_R1 := 10bv64, true;
    R0, Gamma_R0 := 97bv64, true;
    call rely();
    assert (L(mem, R3) ==> Gamma_R4);
    mem, Gamma_mem := memory_store32_le(mem, R3, R4[32:0]), gamma_store32(Gamma_mem, R3, Gamma_R4);
    assume {:captureState "4196072$0"} true;
    R30, Gamma_R30 := 4196080bv64, true;
    call get_two();
    goto $main$__1__$yQ1z8A~IRoSs4MRYTbbghg;
  $main$__1__$yQ1z8A~IRoSs4MRYTbbghg:
    assume {:captureState "$main$__1__$yQ1z8A~IRoSs4MRYTbbghg"} true;
    R2, Gamma_R2 := zero_extend32_32(R0[32:0]), Gamma_R0;
    R3, Gamma_R3 := 4321280bv64, true;
    call rely();
    $load19, Gamma_$load19 := memory_load64_le(mem, bvadd64(R3, 4080bv64)), (gamma_load64(Gamma_mem, bvadd64(R3, 4080bv64)) || L(mem, bvadd64(R3, 4080bv64)));
    R3, Gamma_R3 := $load19, Gamma_$load19;
    R1, Gamma_R1 := 4194304bv64, true;
    R0, Gamma_R0 := 2bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 2176bv64), Gamma_R1;
    call rely();
    assert (L(mem, R3) ==> Gamma_R2);
    mem, Gamma_mem := memory_store32_le(mem, R3, R2[32:0]), gamma_store32(Gamma_mem, R3, Gamma_R2);
    assume {:captureState "4196104$0"} true;
    R30, Gamma_R30 := 4196064bv64, true;
    call FUN_400680();
    goto $main$__2__$GW0MHC~ORUKlCdpgOcZ6zA;
  $main$__2__$GW0MHC~ORUKlCdpgOcZ6zA:
    assume {:captureState "$main$__2__$GW0MHC~ORUKlCdpgOcZ6zA"} true;
    R0, Gamma_R0 := 0bv64, true;
    $load16, Gamma_$load16 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R29, Gamma_R29 := $load16, Gamma_$load16;
    $load17, Gamma_$load17 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := $load17, Gamma_$load17;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

procedure __printf_chk();
  free requires (memory_load64_le(mem, 4196472bv64) == 131073bv64);
  free requires (memory_load8_le(mem, 4196480bv64) == 37bv8);
  free requires (memory_load8_le(mem, 4196481bv64) == 100bv8);
  free requires (memory_load8_le(mem, 4196482bv64) == 10bv8);
  free requires (memory_load8_le(mem, 4196483bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 4196472bv64) == 131073bv64);
  free ensures (memory_load8_le(mem, 4196480bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 4196481bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 4196482bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 4196483bv64) == 0bv8);

