00000691: program
0000065a: sub __cxa_finalize(__cxa_finalize_result)
00000692: __cxa_finalize_result :: out u32 = low:32[R0]

000003c8:
000004d0: R16 := 0x20000
000004d7: R17 := mem[R16 + 8, el]:u64
000004dd: R16 := R16 + 8
000004e2: call R17 with noreturn

0000065b: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000693: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000031d:
00000321: #4 := R31 - 0x20
00000327: mem := mem with [#4, el]:u64 <- R29
0000032d: mem := mem with [#4 + 8, el]:u64 <- R30
00000331: R31 := #4
00000337: R29 := R31
0000033f: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000344: R19 := 0x20000
0000034b: R0 := pad:64[mem[R19 + 0x38]]
00000351: when 0:0[R0] goto %0000034f
00000687: goto %00000391

00000391:
00000394: R0 := 0x1F000
0000039b: R0 := mem[R0 + 0xFC8, el]:u64
000003a1: when R0 = 0 goto %0000039f
00000688: goto %000003b8

000003b8:
000003bb: R0 := 0x20000
000003c2: R0 := mem[R0 + 0x30, el]:u64
000003c7: R30 := 0x770
000003ca: call @__cxa_finalize with return %0000039f

0000039f:
000003a7: R30 := 0x774
000003a9: call @deregister_tm_clones with return %000003ab

000003ab:
000003ae: R0 := 1
000003b6: mem := mem with [R19 + 0x38] <- 7:0[R0]
00000689: goto %0000034f

0000034f:
00000359: R19 := mem[R31 + 0x10, el]:u64
00000360: R29 := mem[R31, el]:u64
00000365: R30 := mem[R31 + 8, el]:u64
00000369: R31 := R31 + 0x20
0000036e: call R30 with noreturn

0000065f: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000694: __libc_start_main_main :: in u64 = R0
00000695: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000696: __libc_start_main_arg3 :: in out u64 = R2
00000697: __libc_start_main_auxv :: in out u64 = R3
00000698: __libc_start_main_result :: out u32 = low:32[R0]

00000276:
000004ba: R16 := 0x20000
000004c1: R17 := mem[R16, el]:u64
000004c7: R16 := R16
000004cc: call R17 with noreturn

00000660: sub _fini(_fini_result)
00000699: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000661: sub _init(_init_result)
0000069a: _init_result :: out u32 = low:32[R0]

000005a2:
000005a8: #6 := R31 - 0x10
000005ae: mem := mem with [#6, el]:u64 <- R29
000005b4: mem := mem with [#6 + 8, el]:u64 <- R30
000005b8: R31 := #6
000005be: R29 := R31
000005c3: R30 := 0x5C8
000005c5: call @call_weak_fn with return %000005c7

000005c7:
000005cc: R29 := mem[R31, el]:u64
000005d1: R30 := mem[R31 + 8, el]:u64
000005d5: R31 := R31 + 0x10
000005da: call R30 with noreturn

00000662: sub _start(_start_result)
0000069b: _start_result :: out u32 = low:32[R0]

00000237:
0000023c: R29 := 0
00000241: R30 := 0
00000247: R5 := R0
0000024e: R1 := mem[R31, el]:u64
00000254: R2 := R31 + 8
0000025a: R6 := R31
0000025f: R0 := 0x1F000
00000266: R0 := mem[R0 + 0xFD8, el]:u64
0000026b: R3 := 0
00000270: R4 := 0
00000275: R30 := 0x6B0
00000278: call @__libc_start_main with return %0000027a

0000027a:
0000027d: R30 := 0x6B4
00000280: call @abort with return %0000068a

0000068a:
0000068b: call @call_weak_fn with noreturn

00000665: sub abort()


0000027e:
000004fc: R16 := 0x20000
00000503: R17 := mem[R16 + 0x18, el]:u64
00000509: R16 := R16 + 0x18
0000050e: call R17 with noreturn

00000666: sub call_weak_fn(call_weak_fn_result)
0000069c: call_weak_fn_result :: out u32 = low:32[R0]

00000282:
00000285: R0 := 0x1F000
0000028c: R0 := mem[R0 + 0xFD0, el]:u64
00000292: when R0 = 0 goto %00000290
0000068c: goto %00000408

00000290:
00000298: call R30 with noreturn

00000408:
0000040b: goto @__gmon_start__

00000409:
000004e6: R16 := 0x20000
000004ed: R17 := mem[R16 + 0x10, el]:u64
000004f3: R16 := R16 + 0x10
000004f8: call R17 with noreturn

00000668: sub deregister_tm_clones(deregister_tm_clones_result)
0000069d: deregister_tm_clones_result :: out u32 = low:32[R0]

0000029e:
000002a1: R0 := 0x20000
000002a7: R0 := R0 + 0x38
000002ac: R1 := 0x20000
000002b2: R1 := R1 + 0x38
000002b8: #2 := ~R0
000002bd: #3 := R1 + ~R0
000002c3: VF := extend:65[#3 + 1] <> extend:65[R1] + extend:65[#2] + 1
000002c9: CF := pad:65[#3 + 1] <> pad:65[R1] + pad:65[#2] + 1
000002cd: ZF := #3 + 1 = 0
000002d1: NF := 63:63[#3 + 1]
000002d7: when ZF goto %000002d5
0000068d: goto %000003ea

000003ea:
000003ed: R1 := 0x1F000
000003f4: R1 := mem[R1 + 0xFC0, el]:u64
000003f9: when R1 = 0 goto %000002d5
0000068e: goto %000003fd

000002d5:
000002dd: call R30 with noreturn

000003fd:
00000401: R16 := R1
00000406: call R16 with noreturn

0000066b: sub frame_dummy(frame_dummy_result)
0000069e: frame_dummy_result :: out u32 = low:32[R0]

00000374:
00000376: call @register_tm_clones with noreturn

0000066c: sub get_two(get_two_result)
0000069f: get_two_result :: out u32 = low:32[R0]

0000037e:
00000383: R0 := pad:64[31:0[R1] + (0.7:0[R0])]
0000038a: R0 := pad:64[31:0[R0] + 31:0[R2]]
0000038f: call R30 with noreturn

0000066d: sub main(main_argc, main_argv, main_result)
000006a0: main_argc :: in u32 = low:32[R0]
000006a1: main_argv :: in out u64 = R1
000006a2: main_result :: out u32 = low:32[R0]

000001c1:
000001c5: #1 := R31 - 0x10
000001cb: mem := mem with [#1, el]:u64 <- R29
000001d1: mem := mem with [#1 + 8, el]:u64 <- R30
000001d5: R31 := #1
000001da: R0 := 0x20000
000001e0: R2 := R0 + 0x3C
000001e5: R3 := 1
000001eb: R29 := R31
000001f0: R1 := 0xE46B
000001f6: R1 := pad:64[0x540B.15:0[R1]]
000001fe: mem := mem with [R0 + 0x3C, el]:u32 <- 31:0[R3]
00000203: R0 := 0
00000209: R0 := R0 + 0x7C8
00000211: mem := mem with [R2 + 4, el]:u32 <- 31:0[R1]
00000216: R30 := 0x670
00000219: call @printf with return %0000021b

0000021b:
0000021e: R0 := 0
00000225: R29 := mem[R31, el]:u64
0000022a: R30 := mem[R31 + 8, el]:u64
0000022e: R31 := R31 + 0x10
00000233: call R30 with noreturn

0000066e: sub printf(printf_format, printf_result)
000006a3: printf_format :: in u64 = R0
000006a4: printf_result :: out u32 = low:32[R0]

00000217:
00000512: R16 := 0x20000
00000519: R17 := mem[R16 + 0x20, el]:u64
0000051f: R16 := R16 + 0x20
00000524: call R17 with noreturn

0000066f: sub register_tm_clones(register_tm_clones_result)
000006a5: register_tm_clones_result :: out u32 = low:32[R0]

000002df:
000002e2: R0 := 0x20000
000002e8: R0 := R0 + 0x38
000002ed: R1 := 0x20000
000002f3: R1 := R1 + 0x38
000002fa: R1 := R1 + ~R0 + 1
00000300: R2 := 0.63:63[R1]
00000307: R1 := R2 + (R1 ~>> 3)
0000030d: R1 := extend:64[63:1[R1]]
00000313: when R1 = 0 goto %00000311
0000068f: goto %000003cc

000003cc:
000003cf: R2 := 0x1F000
000003d6: R2 := mem[R2 + 0xFE0, el]:u64
000003db: when R2 = 0 goto %00000311
00000690: goto %000003df

00000311:
00000319: call R30 with noreturn

000003df:
000003e3: R16 := R2
000003e8: call R16 with noreturn
