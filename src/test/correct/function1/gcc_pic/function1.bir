000006fb: program
000006c4: sub __cxa_finalize(__cxa_finalize_result)
000006fc: __cxa_finalize_result :: out u32 = low:32[R0]

00000484:
0000058c: R16 := 0x10000
00000593: R17 := mem[R16 + 0xFA0, el]:u64
00000599: R16 := R16 + 0xFA0
0000059e: call R17 with noreturn

000006c5: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006fd: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002e6:
000002ea: #3 := R31 - 0x20
000002f0: mem := mem with [#3, el]:u64 <- R29
000002f6: mem := mem with [#3 + 8, el]:u64 <- R30
000002fa: R31 := #3
00000300: R29 := R31
00000308: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000030d: R19 := 0x11000
00000314: R0 := pad:64[mem[R19 + 0x10]]
0000031b: when 31:0[R0] <> 0 goto %00000319
000006f1: goto %0000044d

0000044d:
00000450: R0 := 0x10000
00000457: R0 := mem[R0 + 0xFD0, el]:u64
0000045d: when R0 = 0 goto %0000045b
000006f2: goto %00000474

00000474:
00000477: R0 := 0x11000
0000047e: R0 := mem[R0 + 8, el]:u64
00000483: R30 := 0x770
00000486: call @__cxa_finalize with return %0000045b

0000045b:
00000463: R30 := 0x774
00000465: call @deregister_tm_clones with return %00000467

00000467:
0000046a: R0 := 1
00000472: mem := mem with [R19 + 0x10] <- 7:0[R0]
000006f3: goto %00000319

00000319:
00000323: R19 := mem[R31 + 0x10, el]:u64
0000032a: R29 := mem[R31, el]:u64
0000032f: R30 := mem[R31 + 8, el]:u64
00000333: R31 := R31 + 0x20
00000338: call R30 with noreturn

000006c9: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006fe: __libc_start_main_main :: in u64 = R0
000006ff: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000700: __libc_start_main_arg3 :: in out u64 = R2
00000701: __libc_start_main_auxv :: in out u64 = R3
00000702: __libc_start_main_result :: out u32 = low:32[R0]

0000023f:
00000576: R16 := 0x10000
0000057d: R17 := mem[R16 + 0xF98, el]:u64
00000583: R16 := R16 + 0xF98
00000588: call R17 with noreturn

000006ca: sub _fini(_fini_result)
00000703: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000006cb: sub _init(_init_result)
00000704: _init_result :: out u32 = low:32[R0]

000005fc:
00000602: #6 := R31 - 0x10
00000608: mem := mem with [#6, el]:u64 <- R29
0000060e: mem := mem with [#6 + 8, el]:u64 <- R30
00000612: R31 := #6
00000618: R29 := R31
0000061d: R30 := 0x5F8
0000061f: call @call_weak_fn with return %00000621

00000621:
00000626: R29 := mem[R31, el]:u64
0000062b: R30 := mem[R31 + 8, el]:u64
0000062f: R31 := R31 + 0x10
00000634: call R30 with noreturn

000006cc: sub _start(_start_result)
00000705: _start_result :: out u32 = low:32[R0]

00000200:
00000205: R29 := 0
0000020a: R30 := 0
00000210: R5 := R0
00000217: R1 := mem[R31, el]:u64
0000021d: R2 := R31 + 8
00000223: R6 := R31
00000228: R0 := 0x10000
0000022f: R0 := mem[R0 + 0xFF0, el]:u64
00000234: R3 := 0
00000239: R4 := 0
0000023e: R30 := 0x6B0
00000241: call @__libc_start_main with return %00000243

00000243:
00000246: R30 := 0x6B4
00000249: call @abort with return %000006f4

000006f4:
000006f5: call @call_weak_fn with noreturn

000006cf: sub abort()


00000247:
000005b8: R16 := 0x10000
000005bf: R17 := mem[R16 + 0xFB0, el]:u64
000005c5: R16 := R16 + 0xFB0
000005ca: call R17 with noreturn

000006d0: sub call_weak_fn(call_weak_fn_result)
00000706: call_weak_fn_result :: out u32 = low:32[R0]

0000024b:
0000024e: R0 := 0x10000
00000255: R0 := mem[R0 + 0xFE0, el]:u64
0000025b: when R0 = 0 goto %00000259
000006f6: goto %000004c4

00000259:
00000261: call R30 with noreturn

000004c4:
000004c7: goto @__gmon_start__

000004c5:
000005a2: R16 := 0x10000
000005a9: R17 := mem[R16 + 0xFA8, el]:u64
000005af: R16 := R16 + 0xFA8
000005b4: call R17 with noreturn

000006d2: sub deregister_tm_clones(deregister_tm_clones_result)
00000707: deregister_tm_clones_result :: out u32 = low:32[R0]

00000267:
0000026a: R0 := 0x11000
00000270: R0 := R0 + 0x10
00000275: R1 := 0x11000
0000027b: R1 := R1 + 0x10
00000281: #1 := ~R0
00000286: #2 := R1 + ~R0
0000028c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000292: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000296: ZF := #2 + 1 = 0
0000029a: NF := 63:63[#2 + 1]
000002a0: when ZF goto %0000029e
000006f7: goto %000004a6

000004a6:
000004a9: R1 := 0x10000
000004b0: R1 := mem[R1 + 0xFC8, el]:u64
000004b5: when R1 = 0 goto %0000029e
000006f8: goto %000004b9

0000029e:
000002a6: call R30 with noreturn

000004b9:
000004bd: R16 := R1
000004c2: call R16 with noreturn

000006d5: sub frame_dummy(frame_dummy_result)
00000708: frame_dummy_result :: out u32 = low:32[R0]

0000033e:
00000340: call @register_tm_clones with noreturn

000006d6: sub get_two(get_two_result)
00000709: get_two_result :: out u32 = low:32[R0]

00000342:
00000346: R31 := R31 - 0x10
0000034e: mem := mem with [R31 + 0xF] <- 7:0[R0]
00000356: mem := mem with [R31 + 8, el]:u32 <- 31:0[R1]
0000035e: mem := mem with [R31, el]:u64 <- R2
00000365: R1 := pad:64[mem[R31 + 0xF]]
0000036c: R0 := pad:64[mem[R31 + 8, el]:u32]
00000373: R0 := pad:64[31:0[R1] + 31:0[R0]]
00000379: R1 := pad:64[31:0[R0]]
00000380: R0 := mem[R31, el]:u64
00000387: R0 := pad:64[31:0[R1] + 31:0[R0]]
0000038d: R31 := R31 + 0x10
00000392: call R30 with noreturn

000006d7: sub main(main_argc, main_argv, main_result)
0000070a: main_argc :: in u32 = low:32[R0]
0000070b: main_argv :: in out u64 = R1
0000070c: main_result :: out u32 = low:32[R0]

00000394:
00000398: #4 := R31 - 0x10
0000039e: mem := mem with [#4, el]:u64 <- R29
000003a4: mem := mem with [#4 + 8, el]:u64 <- R30
000003a8: R31 := #4
000003ae: R29 := R31
000003b3: R0 := 0x10000
000003ba: R0 := mem[R0 + 0xFD8, el]:u64
000003bf: R1 := 1
000003c7: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003cc: R2 := 0xE400
000003d3: R2 := 63:32[R2].0x540B.15:0[R2]
000003da: R2 := 63:48[R2].2.31:0[R2]
000003df: R1 := 0xA
000003e4: R0 := 0x61
000003e9: R30 := 0x7F4
000003eb: call @get_two with return %000003ed

000003ed:
000003f1: R1 := pad:64[31:0[R0]]
000003f6: R0 := 0x10000
000003fd: R0 := mem[R0 + 0xFE8, el]:u64
00000405: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000040a: R0 := 0x10000
00000411: R0 := mem[R0 + 0xFE8, el]:u64
00000418: R0 := pad:64[mem[R0, el]:u32]
0000041e: R1 := pad:64[31:0[R0]]
00000423: R0 := 0
00000429: R0 := R0 + 0x848
0000042e: R30 := 0x820
00000431: call @printf with return %00000433

00000433:
00000436: R0 := 0
0000043d: R29 := mem[R31, el]:u64
00000442: R30 := mem[R31 + 8, el]:u64
00000446: R31 := R31 + 0x10
0000044b: call R30 with noreturn

000006d8: sub printf(printf_format, printf_result)
0000070d: printf_format :: in u64 = R0
0000070e: printf_result :: out u32 = low:32[R0]

0000042f:
000005ce: R16 := 0x10000
000005d5: R17 := mem[R16 + 0xFB8, el]:u64
000005db: R16 := R16 + 0xFB8
000005e0: call R17 with noreturn

000006d9: sub register_tm_clones(register_tm_clones_result)
0000070f: register_tm_clones_result :: out u32 = low:32[R0]

000002a8:
000002ab: R0 := 0x11000
000002b1: R0 := R0 + 0x10
000002b6: R1 := 0x11000
000002bc: R1 := R1 + 0x10
000002c3: R1 := R1 + ~R0 + 1
000002c9: R2 := 0.63:63[R1]
000002d0: R1 := R2 + (R1 ~>> 3)
000002d6: R1 := extend:64[63:1[R1]]
000002dc: when R1 = 0 goto %000002da
000006f9: goto %00000488

00000488:
0000048b: R2 := 0x10000
00000492: R2 := mem[R2 + 0xFF8, el]:u64
00000497: when R2 = 0 goto %000002da
000006fa: goto %0000049b

000002da:
000002e2: call R30 with noreturn

0000049b:
0000049f: R16 := R2
000004a4: call R16 with noreturn
