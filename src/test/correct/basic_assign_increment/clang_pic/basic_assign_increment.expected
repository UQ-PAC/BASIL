var {:extern } Gamma_R0: bool;
var {:extern } Gamma_R8: bool;
var {:extern } Gamma_R9: bool;
var {:extern } Gamma_mem: [bv64]bool;
var {:extern } R0: bv64;
var {:extern } R8: bv64;
var {:extern } R9: bv64;
var {:extern } mem: [bv64]bv8;
const {:extern } $x_addr: bv64;
axiom ($x_addr == 69684bv64);
function {:extern } L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $x_addr) then true else false)
}

function {:extern } {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern } {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern } gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern } gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern } gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern } memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern } memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern } memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern } memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern } {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern } rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures ((memory_load32_le(mem, $x_addr) == old(memory_load32_le(mem, $x_addr))) || (memory_load32_le(mem, $x_addr) == 5bv32));
  free ensures (memory_load8_le(mem, 1924bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1925bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1926bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1927bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69576bv64) == 52bv8);
  free ensures (memory_load8_le(mem, 69577bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69578bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69579bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69580bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69581bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69582bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69583bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69672bv64) == 40bv8);
  free ensures (memory_load8_le(mem, 69673bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69674bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69675bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69676bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69677bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69678bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69679bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69056bv64) == 80bv8);
  free ensures (memory_load8_le(mem, 69057bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69058bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69059bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69060bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69061bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69062bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69063bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69064bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69065bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69066bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69067bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69068bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69069bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69070bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69071bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69592bv64) == 84bv8);
  free ensures (memory_load8_le(mem, 69593bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69594bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69595bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69596bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69597bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69598bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69599bv64) == 0bv8);

procedure {:extern } rely_transitive()
  modifies Gamma_mem, mem;
  ensures ((memory_load32_le(mem, $x_addr) == old(memory_load32_le(mem, $x_addr))) || (memory_load32_le(mem, $x_addr) == 5bv32));
{
  call rely();
  call rely();
}

procedure {:extern } rely_reflexive()
{
  assert ((memory_load32_le(mem, $x_addr) == memory_load32_le(mem, $x_addr)) || (memory_load32_le(mem, $x_addr) == 5bv32));
}

procedure {:extern } guarantee_reflexive()
  modifies Gamma_mem, mem;
{
  assert (((memory_load32_le(mem, $x_addr) == memory_load32_le(mem, $x_addr)) || (memory_load32_le(mem, $x_addr) == 1bv32)) || (memory_load32_le(mem, $x_addr) == 6bv32));
}

procedure main()
  modifies Gamma_R0, Gamma_R8, Gamma_R9, Gamma_mem, R0, R8, R9, mem;
  requires (memory_load32_le(mem, $x_addr) == 0bv32);
  free requires (memory_load8_le(mem, 69664bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69665bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69666bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69667bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69668bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69669bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69670bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69671bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69672bv64) == 40bv8);
  free requires (memory_load8_le(mem, 69673bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69674bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1924bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1925bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1926bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1927bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69576bv64) == 52bv8);
  free requires (memory_load8_le(mem, 69577bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69578bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69579bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69580bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69581bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69582bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69583bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69672bv64) == 40bv8);
  free requires (memory_load8_le(mem, 69673bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69674bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69056bv64) == 80bv8);
  free requires (memory_load8_le(mem, 69057bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69058bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69059bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69060bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69061bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69062bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69063bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69064bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69065bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69066bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69067bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69068bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69069bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69070bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69071bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69592bv64) == 84bv8);
  free requires (memory_load8_le(mem, 69593bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69594bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  ensures (((memory_load32_le(mem, $x_addr) == 1bv32) || (memory_load32_le(mem, $x_addr) == 5bv32)) || (memory_load32_le(mem, $x_addr) == 6bv32));
  free ensures (memory_load8_le(mem, 1924bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1925bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1926bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1927bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69576bv64) == 52bv8);
  free ensures (memory_load8_le(mem, 69577bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69578bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69579bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69580bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69581bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69582bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69583bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69672bv64) == 40bv8);
  free ensures (memory_load8_le(mem, 69673bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69674bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69675bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69676bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69677bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69678bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69679bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69056bv64) == 80bv8);
  free ensures (memory_load8_le(mem, 69057bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69058bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69059bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69060bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69061bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69062bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69063bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69064bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69065bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69066bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69067bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69068bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69069bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69070bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69071bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69592bv64) == 84bv8);
  free ensures (memory_load8_le(mem, 69593bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69594bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69595bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69596bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69597bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69598bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69599bv64) == 0bv8);
{
  var x_old: bv32;
  lmain:
    assume {:captureState "addr:lmain"} true;
    R9, Gamma_R9 := 65536bv64, true;
    call rely();
    R9, Gamma_R9 := memory_load64_le(mem, bvadd64(R9, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R9, 4040bv64)) || L(mem, bvadd64(R9, 4040bv64)));
    call rely();
    R8, Gamma_R8 := zero_extend32_32(memory_load32_le(mem, R9)), (gamma_load32(Gamma_mem, R9) || L(mem, R9));
    R8, Gamma_R8 := zero_extend32_32(bvadd32(R8[32:0], 1bv32)), Gamma_R8;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    x_old := memory_load32_le(mem, $x_addr);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assert (((memory_load32_le(mem, $x_addr) == x_old) || (memory_load32_le(mem, $x_addr) == 1bv32)) || (memory_load32_le(mem, $x_addr) == 6bv32));
    assume {:captureState "%000002e5"} true;
    R0, Gamma_R0 := 0bv64, true;
    return;
}
