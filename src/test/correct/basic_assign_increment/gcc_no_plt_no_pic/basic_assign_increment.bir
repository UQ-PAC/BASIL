00000b46: program
00000b30: sub __cxa_finalize(__cxa_finalize_result)
00000b47: __cxa_finalize_result :: out u32 = low:32[R0]

000008e2:
000009da: R16 := 0x10000
000009e1: R17 := mem[R16 + 0xFB8, el]:u64
000009e7: R16 := R16 + 0xFB8
000009ec: call R17 with noreturn

00000b31: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000b48: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000081a:
0000081e: #3 := R31 - 0x20
00000824: mem := mem with [#3, el]:u64 <- R29
0000082a: mem := mem with [#3 + 8, el]:u64 <- R30
0000082e: R31 := #3
00000834: R29 := R31
0000083c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000841: R19 := 0x11000
00000848: R0 := pad:64[mem[R19 + 0x10]]
0000084f: when 31:0[R0] <> 0 goto %0000084d
00000b32: goto %000008ab

000008ab:
000008ae: R0 := 0x10000
000008b5: R0 := mem[R0 + 0xFE0, el]:u64
000008bb: when R0 = 0 goto %000008b9
00000b33: goto %000008d2

000008d2:
000008d5: R0 := 0x11000
000008dc: R0 := mem[R0 + 8, el]:u64
000008e1: R30 := 0x6F0
000008e4: call @__cxa_finalize with return %000008b9

000008b9:
000008c1: R30 := 0x6F4
000008c3: call @deregister_tm_clones with return %000008c5

000008c5:
000008c8: R0 := 1
000008d0: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000b34: goto %0000084d

0000084d:
00000857: R19 := mem[R31 + 0x10, el]:u64
0000085e: R29 := mem[R31, el]:u64
00000863: R30 := mem[R31 + 8, el]:u64
00000867: R31 := R31 + 0x20
0000086c: call R30 with noreturn

00000b35: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000b49: __libc_start_main_main :: in u64 = R0
00000b4a: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000b4b: __libc_start_main_arg3 :: in out u64 = R2
00000b4c: __libc_start_main_auxv :: in out u64 = R3
00000b4d: __libc_start_main_result :: out u32 = low:32[R0]

00000773:
000009c4: R16 := 0x10000
000009cb: R17 := mem[R16 + 0xFB0, el]:u64
000009d1: R16 := R16 + 0xFB0
000009d6: call R17 with noreturn

00000b36: sub _fini(_fini_result)
00000b4e: _fini_result :: out u32 = low:32[R0]

000005c7:
000005cd: #0 := R31 - 0x10
000005d3: mem := mem with [#0, el]:u64 <- R29
000005d9: mem := mem with [#0 + 8, el]:u64 <- R30
000005dd: R31 := #0
000005e3: R29 := R31
000005ea: R29 := mem[R31, el]:u64
000005ef: R30 := mem[R31 + 8, el]:u64
000005f3: R31 := R31 + 0x10
000005f8: call R30 with noreturn

00000b37: sub _init(_init_result)
00000b4f: _init_result :: out u32 = low:32[R0]

00000a89:
00000a8f: #5 := R31 - 0x10
00000a95: mem := mem with [#5, el]:u64 <- R29
00000a9b: mem := mem with [#5 + 8, el]:u64 <- R30
00000a9f: R31 := #5
00000aa5: R29 := R31
00000aaa: R30 := 0x590
00000aac: call @call_weak_fn with return %00000aae

00000aae:
00000ab3: R29 := mem[R31, el]:u64
00000ab8: R30 := mem[R31 + 8, el]:u64
00000abc: R31 := R31 + 0x10
00000ac1: call R30 with noreturn

00000b38: sub _start(_start_result)
00000b50: _start_result :: out u32 = low:32[R0]

00000734:
00000739: R29 := 0
0000073e: R30 := 0
00000744: R5 := R0
0000074b: R1 := mem[R31, el]:u64
00000751: R2 := R31 + 8
00000757: R6 := R31
0000075c: R0 := 0x10000
00000763: R0 := mem[R0 + 0xFF0, el]:u64
00000768: R3 := 0
0000076d: R4 := 0
00000772: R30 := 0x630
00000775: call @__libc_start_main with return %00000777

00000777:
0000077a: R30 := 0x634
0000077d: call @abort with return %00000b39

00000b39:
00000b3a: call @call_weak_fn with noreturn

00000b3b: sub abort()


0000077b:
00000a06: R16 := 0x10000
00000a0d: R17 := mem[R16 + 0xFC8, el]:u64
00000a13: R16 := R16 + 0xFC8
00000a18: call R17 with noreturn

00000b3c: sub call_weak_fn(call_weak_fn_result)
00000b51: call_weak_fn_result :: out u32 = low:32[R0]

0000077f:
00000782: R0 := 0x10000
00000789: R0 := mem[R0 + 0xFE8, el]:u64
0000078f: when R0 = 0 goto %0000078d
00000b3d: goto %00000922

0000078d:
00000795: call R30 with noreturn

00000922:
00000925: goto @__gmon_start__

00000923:
000009f0: R16 := 0x10000
000009f7: R17 := mem[R16 + 0xFC0, el]:u64
000009fd: R16 := R16 + 0xFC0
00000a02: call R17 with noreturn

00000b3e: sub deregister_tm_clones(deregister_tm_clones_result)
00000b52: deregister_tm_clones_result :: out u32 = low:32[R0]

0000079b:
0000079e: R0 := 0x11000
000007a4: R0 := R0 + 0x10
000007a9: R1 := 0x11000
000007af: R1 := R1 + 0x10
000007b5: #1 := ~R0
000007ba: #2 := R1 + ~R0
000007c0: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000007c6: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000007ca: ZF := #2 + 1 = 0
000007ce: NF := 63:63[#2 + 1]
000007d4: when ZF goto %000007d2
00000b3f: goto %00000904

00000904:
00000907: R1 := 0x10000
0000090e: R1 := mem[R1 + 0xFD8, el]:u64
00000913: when R1 = 0 goto %000007d2
00000b40: goto %00000917

000007d2:
000007da: call R30 with noreturn

00000917:
0000091b: R16 := R1
00000920: call R16 with noreturn

00000b41: sub frame_dummy(frame_dummy_result)
00000b53: frame_dummy_result :: out u32 = low:32[R0]

00000872:
00000874: call @register_tm_clones with noreturn

00000b42: sub main(main_argc, main_argv, main_result)
00000b54: main_argc :: in u32 = low:32[R0]
00000b55: main_argv :: in out u64 = R1
00000b56: main_result :: out u32 = low:32[R0]

00000876:
00000879: R0 := 0x11000
0000087f: R0 := R0 + 0x14
00000886: R0 := pad:64[mem[R0, el]:u32]
0000088c: R1 := pad:64[31:0[R0] + 1]
00000891: R0 := 0x11000
00000897: R0 := R0 + 0x14
0000089f: mem := mem with [R0, el]:u32 <- 31:0[R1]
000008a4: R0 := 0
000008a9: call R30 with noreturn

00000b43: sub register_tm_clones(register_tm_clones_result)
00000b57: register_tm_clones_result :: out u32 = low:32[R0]

000007dc:
000007df: R0 := 0x11000
000007e5: R0 := R0 + 0x10
000007ea: R1 := 0x11000
000007f0: R1 := R1 + 0x10
000007f7: R1 := R1 + ~R0 + 1
000007fd: R2 := 0.63:63[R1]
00000804: R1 := R2 + (R1 ~>> 3)
0000080a: R1 := extend:64[63:1[R1]]
00000810: when R1 = 0 goto %0000080e
00000b44: goto %000008e6

000008e6:
000008e9: R2 := 0x10000
000008f0: R2 := mem[R2 + 0xFF8, el]:u64
000008f5: when R2 = 0 goto %0000080e
00000b45: goto %000008f9

0000080e:
00000816: call R30 with noreturn

000008f9:
000008fd: R16 := R2
00000902: call R16 with noreturn
