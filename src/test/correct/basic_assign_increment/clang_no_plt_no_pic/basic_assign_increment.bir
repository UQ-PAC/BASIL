00000b00: program
00000aea: sub __cxa_finalize(__cxa_finalize_result)
00000b01: __cxa_finalize_result :: out u32 = low:32[R0]

000008a2:
0000099a: R16 := 0x11000
000009a1: R17 := mem[R16 + 8, el]:u64
000009a7: R16 := R16 + 8
000009ac: call R17 with noreturn

00000aeb: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000b02: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000007eb:
000007ef: #3 := R31 - 0x20
000007f5: mem := mem with [#3, el]:u64 <- R29
000007fb: mem := mem with [#3 + 8, el]:u64 <- R30
000007ff: R31 := #3
00000805: R29 := R31
0000080d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000812: R19 := 0x11000
00000819: R0 := pad:64[mem[R19 + 0x30]]
00000820: when 31:0[R0] <> 0 goto %0000081e
00000aec: goto %0000086b

0000086b:
0000086e: R0 := 0x10000
00000875: R0 := mem[R0 + 0xFC8, el]:u64
0000087b: when R0 = 0 goto %00000879
00000aed: goto %00000892

00000892:
00000895: R0 := 0x11000
0000089c: R0 := mem[R0 + 0x28, el]:u64
000008a1: R30 := 0x6F0
000008a4: call @__cxa_finalize with return %00000879

00000879:
00000881: R30 := 0x6F4
00000883: call @deregister_tm_clones with return %00000885

00000885:
00000888: R0 := 1
00000890: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000aee: goto %0000081e

0000081e:
00000828: R19 := mem[R31 + 0x10, el]:u64
0000082f: R29 := mem[R31, el]:u64
00000834: R30 := mem[R31 + 8, el]:u64
00000838: R31 := R31 + 0x20
0000083d: call R30 with noreturn

00000aef: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000b03: __libc_start_main_main :: in u64 = R0
00000b04: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000b05: __libc_start_main_arg3 :: in out u64 = R2
00000b06: __libc_start_main_auxv :: in out u64 = R3
00000b07: __libc_start_main_result :: out u32 = low:32[R0]

00000744:
00000984: R16 := 0x11000
0000098b: R17 := mem[R16, el]:u64
00000991: R16 := R16
00000996: call R17 with noreturn

00000af0: sub _fini(_fini_result)
00000b08: _fini_result :: out u32 = low:32[R0]

000005a4:
000005aa: #0 := R31 - 0x10
000005b0: mem := mem with [#0, el]:u64 <- R29
000005b6: mem := mem with [#0 + 8, el]:u64 <- R30
000005ba: R31 := #0
000005c0: R29 := R31
000005c7: R29 := mem[R31, el]:u64
000005cc: R30 := mem[R31 + 8, el]:u64
000005d0: R31 := R31 + 0x10
000005d5: call R30 with noreturn

00000af1: sub _init(_init_result)
00000b09: _init_result :: out u32 = low:32[R0]

00000a46:
00000a4c: #5 := R31 - 0x10
00000a52: mem := mem with [#5, el]:u64 <- R29
00000a58: mem := mem with [#5 + 8, el]:u64 <- R30
00000a5c: R31 := #5
00000a62: R29 := R31
00000a67: R30 := 0x590
00000a69: call @call_weak_fn with return %00000a6b

00000a6b:
00000a70: R29 := mem[R31, el]:u64
00000a75: R30 := mem[R31 + 8, el]:u64
00000a79: R31 := R31 + 0x10
00000a7e: call R30 with noreturn

00000af2: sub _start(_start_result)
00000b0a: _start_result :: out u32 = low:32[R0]

00000705:
0000070a: R29 := 0
0000070f: R30 := 0
00000715: R5 := R0
0000071c: R1 := mem[R31, el]:u64
00000722: R2 := R31 + 8
00000728: R6 := R31
0000072d: R0 := 0x10000
00000734: R0 := mem[R0 + 0xFD8, el]:u64
00000739: R3 := 0
0000073e: R4 := 0
00000743: R30 := 0x630
00000746: call @__libc_start_main with return %00000748

00000748:
0000074b: R30 := 0x634
0000074e: call @abort with return %00000af3

00000af3:
00000af4: call @call_weak_fn with noreturn

00000af5: sub abort()


0000074c:
000009c6: R16 := 0x11000
000009cd: R17 := mem[R16 + 0x18, el]:u64
000009d3: R16 := R16 + 0x18
000009d8: call R17 with noreturn

00000af6: sub call_weak_fn(call_weak_fn_result)
00000b0b: call_weak_fn_result :: out u32 = low:32[R0]

00000750:
00000753: R0 := 0x10000
0000075a: R0 := mem[R0 + 0xFD0, el]:u64
00000760: when R0 = 0 goto %0000075e
00000af7: goto %000008e2

0000075e:
00000766: call R30 with noreturn

000008e2:
000008e5: goto @__gmon_start__

000008e3:
000009b0: R16 := 0x11000
000009b7: R17 := mem[R16 + 0x10, el]:u64
000009bd: R16 := R16 + 0x10
000009c2: call R17 with noreturn

00000af8: sub deregister_tm_clones(deregister_tm_clones_result)
00000b0c: deregister_tm_clones_result :: out u32 = low:32[R0]

0000076c:
0000076f: R0 := 0x11000
00000775: R0 := R0 + 0x30
0000077a: R1 := 0x11000
00000780: R1 := R1 + 0x30
00000786: #1 := ~R0
0000078b: #2 := R1 + ~R0
00000791: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000797: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000079b: ZF := #2 + 1 = 0
0000079f: NF := 63:63[#2 + 1]
000007a5: when ZF goto %000007a3
00000af9: goto %000008c4

000008c4:
000008c7: R1 := 0x10000
000008ce: R1 := mem[R1 + 0xFC0, el]:u64
000008d3: when R1 = 0 goto %000007a3
00000afa: goto %000008d7

000007a3:
000007ab: call R30 with noreturn

000008d7:
000008db: R16 := R1
000008e0: call R16 with noreturn

00000afb: sub frame_dummy(frame_dummy_result)
00000b0d: frame_dummy_result :: out u32 = low:32[R0]

00000843:
00000845: call @register_tm_clones with noreturn

00000afc: sub main(main_argc, main_argv, main_result)
00000b0e: main_argc :: in u32 = low:32[R0]
00000b0f: main_argv :: in out u64 = R1
00000b10: main_result :: out u32 = low:32[R0]

00000847:
0000084a: R9 := 0x11000
00000851: R8 := pad:64[mem[R9 + 0x34, el]:u32]
00000857: R8 := pad:64[31:0[R8] + 1]
0000085f: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
00000864: R0 := 0
00000869: call R30 with noreturn

00000afd: sub register_tm_clones(register_tm_clones_result)
00000b11: register_tm_clones_result :: out u32 = low:32[R0]

000007ad:
000007b0: R0 := 0x11000
000007b6: R0 := R0 + 0x30
000007bb: R1 := 0x11000
000007c1: R1 := R1 + 0x30
000007c8: R1 := R1 + ~R0 + 1
000007ce: R2 := 0.63:63[R1]
000007d5: R1 := R2 + (R1 ~>> 3)
000007db: R1 := extend:64[63:1[R1]]
000007e1: when R1 = 0 goto %000007df
00000afe: goto %000008a6

000008a6:
000008a9: R2 := 0x10000
000008b0: R2 := mem[R2 + 0xFE0, el]:u64
000008b5: when R2 = 0 goto %000007df
00000aff: goto %000008b9

000007df:
000007e7: call R30 with noreturn

000008b9:
000008bd: R16 := R2
000008c2: call R16 with noreturn
