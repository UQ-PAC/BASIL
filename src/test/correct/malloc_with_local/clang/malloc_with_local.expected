var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2320bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load64_le(mem, 2320bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 4211825664634808608bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 7307182754559698208bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 8511922461266111520bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 2334391151658365537bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 130488bv64) == 2128bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 2132bv64);
  free ensures (memory_load64_le(mem, 131136bv64) == 131136bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure #free();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 2320bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le(mem, 2336bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 4211825664634808608bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 7307182754559698208bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 8511922461266111520bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 2334391151658365537bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 130488bv64) == 2128bv64);
  free requires (memory_load64_le(mem, 130496bv64) == 2048bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 2132bv64);
  free requires (memory_load64_le(mem, 131136bv64) == 131136bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 4211825664634808608bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 7307182754559698208bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 8511922461266111520bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 2334391151658365537bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 130488bv64) == 2128bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 2132bv64);
  free ensures (memory_load64_le(mem, 131136bv64) == 131136bv64);

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R29, R30, R31, R8, R9, mem, stack;
  free requires (memory_load64_le(mem, 131128bv64) == 0bv64);
  free requires (memory_load64_le(mem, 131136bv64) == 131136bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le(mem, 2336bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 4211825664634808608bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 7307182754559698208bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 8511922461266111520bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 2334391151658365537bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 130488bv64) == 2128bv64);
  free requires (memory_load64_le(mem, 130496bv64) == 2048bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 2132bv64);
  free requires (memory_load64_le(mem, 131136bv64) == 131136bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 2320bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 4211825664634808608bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 7307182754559698208bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 8511922461266111520bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 2334391151658365537bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 130488bv64) == 2128bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 2132bv64);
  free ensures (memory_load64_le(mem, 131136bv64) == 131136bv64);

implementation main()
{
  var #4: bv64;
  var #5: bv64;
  var Gamma_#4: bool;
  var Gamma_#5: bool;
  lmain:
    assume {:captureState "lmain"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551568bv64), Gamma_R31;
    #4, Gamma_#4 := bvadd64(R31, 32bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #4, R29), gamma_store64(Gamma_stack, #4, Gamma_R29);
    assume {:captureState "%00000362"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#4, 8bv64), Gamma_R30);
    assume {:captureState "%00000368"} true;
    R29, Gamma_R29 := bvadd64(R31, 32bv64), Gamma_R31;
    R8, Gamma_R8 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, R31, R8[32:0]), gamma_store32(Gamma_stack, R31, Gamma_R8);
    assume {:captureState "%0000037b"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64), true);
    assume {:captureState "%00000382"} true;
    R0, Gamma_R0 := 1bv64, true;
    R30, Gamma_R30 := 2164bv64, true;
    call malloc();
    goto l00000391;
  l00000391:
    assume {:captureState "l00000391"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R0);
    assume {:captureState "%00000397"} true;
    R0, Gamma_R0 := 4bv64, true;
    R30, Gamma_R30 := 2176bv64, true;
    call malloc();
    goto l000003a5;
  l000003a5:
    assume {:captureState "l000003a5"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 8bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R0);
    assume {:captureState "%000003ab"} true;
    R8, Gamma_R8 := 10bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 4bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 4bv64), Gamma_R8);
    assume {:captureState "%000003b8"} true;
    R9, Gamma_R9 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R8, Gamma_R8 := 65bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store8_le(mem, R9, R8[8:0]), gamma_store8(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "%000003cc"} true;
    R9, Gamma_R9 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R8, Gamma_R8 := 42bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "%000003e0"} true;
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    call rely();
    R1, Gamma_R1 := zero_extend56_8(memory_load8_le(mem, R8)), (gamma_load8(Gamma_mem, R8) || L(mem, R8));
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2324bv64), Gamma_R0;
    R30, Gamma_R30 := 2232bv64, true;
    call printf();
    goto l00000403;
  l00000403:
    assume {:captureState "l00000403"} true;
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    call rely();
    R1, Gamma_R1 := zero_extend32_32(memory_load32_le(mem, R8)), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2341bv64), Gamma_R0;
    R30, Gamma_R30 := 2252bv64, true;
    call printf();
    goto l00000423;
  l00000423:
    assume {:captureState "l00000423"} true;
    R1, Gamma_R1 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 4bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 4bv64));
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2357bv64), Gamma_R0;
    R30, Gamma_R30 := 2268bv64, true;
    call printf();
    goto l0000043c;
  l0000043c:
    assume {:captureState "l0000043c"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R30, Gamma_R30 := 2276bv64, true;
    call #free();
    goto l0000044b;
  l0000044b:
    assume {:captureState "l0000044b"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := 2284bv64, true;
    call #free();
    goto l00000459;
  l00000459:
    assume {:captureState "l00000459"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, R31)), gamma_load32(Gamma_stack, R31);
    #5, Gamma_#5 := bvadd64(R31, 32bv64), Gamma_R31;
    R29, Gamma_R29 := memory_load64_le(stack, #5), gamma_load64(Gamma_stack, #5);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(#5, 8bv64)), gamma_load64(Gamma_stack, bvadd64(#5, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 48bv64), Gamma_R31;
    goto main_return;
  main_return:
    assume {:captureState "main_return"} true;
    return;
}

procedure malloc();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 2320bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le(mem, 2336bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 4211825664634808608bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 7307182754559698208bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 8511922461266111520bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 2334391151658365537bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 130488bv64) == 2128bv64);
  free requires (memory_load64_le(mem, 130496bv64) == 2048bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 2132bv64);
  free requires (memory_load64_le(mem, 131136bv64) == 131136bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 4211825664634808608bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 7307182754559698208bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 8511922461266111520bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 2334391151658365537bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 130488bv64) == 2128bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 2132bv64);
  free ensures (memory_load64_le(mem, 131136bv64) == 131136bv64);

procedure printf();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 2320bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 4211825664600402019bv64);
  free requires (memory_load64_le(mem, 2336bv64) == 7307182754559632672bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 4211825664634808608bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 7307182754559698208bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 8511922461266111520bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 2334391151658365537bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 130488bv64) == 2128bv64);
  free requires (memory_load64_le(mem, 130496bv64) == 2048bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 2132bv64);
  free requires (memory_load64_le(mem, 131136bv64) == 131136bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 4211825664600402019bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7307182754559632672bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 4211825664634808608bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 7307182754559698208bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 8511922461266111520bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 2334391151658365537bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 130488bv64) == 2128bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 2132bv64);
  free ensures (memory_load64_le(mem, 131136bv64) == 131136bv64);

