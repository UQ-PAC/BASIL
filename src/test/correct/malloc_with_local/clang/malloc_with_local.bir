00000763: program
0000074a: sub __cxa_finalize(__cxa_finalize_result)
00000764: __cxa_finalize_result :: out u32 = low:32[R0]

000004b2:
000005da: R16 := 0x11000
000005e1: R17 := mem[R16 + 8, el]:u64
000005e7: R16 := R16 + 8
000005ec: call R17 with noreturn

0000074b: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000765: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002f6:
000002fa: #3 := R31 - 0x20
00000300: mem := mem with [#3, el]:u64 <- R29
00000306: mem := mem with [#3 + 8, el]:u64 <- R30
0000030a: R31 := #3
00000310: R29 := R31
00000318: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000031d: R19 := 0x11000
00000324: R0 := pad:64[mem[R19 + 0x48]]
0000032b: when 31:0[R0] <> 0 goto %00000329
0000074c: goto %0000047b

0000047b:
0000047e: R0 := 0x10000
00000485: R0 := mem[R0 + 0xFC8, el]:u64
0000048b: when R0 = 0 goto %00000489
0000074d: goto %000004a2

000004a2:
000004a5: R0 := 0x11000
000004ac: R0 := mem[R0 + 0x40, el]:u64
000004b1: R30 := 0x7F0
000004b4: call @__cxa_finalize with return %00000489

00000489:
00000491: R30 := 0x7F4
00000493: call @deregister_tm_clones with return %00000495

00000495:
00000498: R0 := 1
000004a0: mem := mem with [R19 + 0x48] <- 7:0[R0]
0000074e: goto %00000329

00000329:
00000333: R19 := mem[R31 + 0x10, el]:u64
0000033a: R29 := mem[R31, el]:u64
0000033f: R30 := mem[R31 + 8, el]:u64
00000343: R31 := R31 + 0x20
00000348: call R30 with noreturn

0000074f: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000766: __libc_start_main_main :: in u64 = R0
00000767: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000768: __libc_start_main_arg3 :: in out u64 = R2
00000769: __libc_start_main_auxv :: in out u64 = R3
0000076a: __libc_start_main_result :: out u32 = low:32[R0]

0000024f:
000005c4: R16 := 0x11000
000005cb: R17 := mem[R16, el]:u64
000005d1: R16 := R16
000005d6: call R17 with noreturn

00000750: sub _fini(_fini_result)
0000076b: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000751: sub _init(_init_result)
0000076c: _init_result :: out u32 = low:32[R0]

00000676:
0000067c: #7 := R31 - 0x10
00000682: mem := mem with [#7, el]:u64 <- R29
00000688: mem := mem with [#7 + 8, el]:u64 <- R30
0000068c: R31 := #7
00000692: R29 := R31
00000697: R30 := 0x638
00000699: call @call_weak_fn with return %0000069b

0000069b:
000006a0: R29 := mem[R31, el]:u64
000006a5: R30 := mem[R31 + 8, el]:u64
000006a9: R31 := R31 + 0x10
000006ae: call R30 with noreturn

00000752: sub _start(_start_result)
0000076d: _start_result :: out u32 = low:32[R0]

00000210:
00000215: R29 := 0
0000021a: R30 := 0
00000220: R5 := R0
00000227: R1 := mem[R31, el]:u64
0000022d: R2 := R31 + 8
00000233: R6 := R31
00000238: R0 := 0x10000
0000023f: R0 := mem[R0 + 0xFD8, el]:u64
00000244: R3 := 0
00000249: R4 := 0
0000024e: R30 := 0x730
00000251: call @__libc_start_main with return %00000253

00000253:
00000256: R30 := 0x734
00000259: call @abort with return %00000753

00000753:
00000754: call @call_weak_fn with noreturn

00000755: sub abort()


00000257:
0000061c: R16 := 0x11000
00000623: R17 := mem[R16 + 0x20, el]:u64
00000629: R16 := R16 + 0x20
0000062e: call R17 with noreturn

00000756: sub call_weak_fn(call_weak_fn_result)
0000076e: call_weak_fn_result :: out u32 = low:32[R0]

0000025b:
0000025e: R0 := 0x10000
00000265: R0 := mem[R0 + 0xFD0, el]:u64
0000026b: when R0 = 0 goto %00000269
00000757: goto %000004f2

00000269:
00000271: call R30 with noreturn

000004f2:
000004f5: goto @__gmon_start__

000004f3:
00000606: R16 := 0x11000
0000060d: R17 := mem[R16 + 0x18, el]:u64
00000613: R16 := R16 + 0x18
00000618: call R17 with noreturn

00000758: sub deregister_tm_clones(deregister_tm_clones_result)
0000076f: deregister_tm_clones_result :: out u32 = low:32[R0]

00000277:
0000027a: R0 := 0x11000
00000280: R0 := R0 + 0x48
00000285: R1 := 0x11000
0000028b: R1 := R1 + 0x48
00000291: #1 := ~R0
00000296: #2 := R1 + ~R0
0000029c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002a2: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002a6: ZF := #2 + 1 = 0
000002aa: NF := 63:63[#2 + 1]
000002b0: when ZF goto %000002ae
00000759: goto %000004d4

000004d4:
000004d7: R1 := 0x10000
000004de: R1 := mem[R1 + 0xFC0, el]:u64
000004e3: when R1 = 0 goto %000002ae
0000075a: goto %000004e7

000002ae:
000002b6: call R30 with noreturn

000004e7:
000004eb: R16 := R1
000004f0: call R16 with noreturn

0000075b: sub frame_dummy(frame_dummy_result)
00000770: frame_dummy_result :: out u32 = low:32[R0]

0000034e:
00000350: call @register_tm_clones with noreturn

0000075c: sub free(free_ptr)
00000771: free_ptr :: in out u64 = R0

00000447:
00000632: R16 := 0x11000
00000639: R17 := mem[R16 + 0x28, el]:u64
0000063f: R16 := R16 + 0x28
00000644: call R17 with noreturn

0000075d: sub main(main_argc, main_argv, main_result)
00000772: main_argc :: in u32 = low:32[R0]
00000773: main_argv :: in out u64 = R1
00000774: main_result :: out u32 = low:32[R0]

00000352:
00000356: R31 := R31 - 0x30
0000035c: #4 := R31 + 0x20
00000362: mem := mem with [#4, el]:u64 <- R29
00000368: mem := mem with [#4 + 8, el]:u64 <- R30
0000036e: R29 := R31 + 0x20
00000373: R8 := 0
0000037b: mem := mem with [R31, el]:u32 <- 31:0[R8]
00000382: mem := mem with [R29 - 4, el]:u32 <- 0
00000387: R0 := 1
0000038c: R30 := 0x834
0000038f: call @malloc with return %00000391

00000391:
00000397: mem := mem with [R31 + 0x10, el]:u64 <- R0
0000039c: R0 := 4
000003a1: R30 := 0x840
000003a3: call @malloc with return %000003a5

000003a5:
000003ab: mem := mem with [R31 + 8, el]:u64 <- R0
000003b0: R8 := 0xA
000003b8: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
000003bf: R9 := mem[R31 + 0x10, el]:u64
000003c4: R8 := 0x41
000003cc: mem := mem with [R9] <- 7:0[R8]
000003d3: R9 := mem[R31 + 8, el]:u64
000003d8: R8 := 0x2A
000003e0: mem := mem with [R9, el]:u32 <- 31:0[R8]
000003e7: R8 := mem[R31 + 0x10, el]:u64
000003ee: R1 := pad:64[mem[R8]]
000003f3: R0 := 0
000003f9: R0 := R0 + 0x8D4
000003fe: R30 := 0x878
00000401: call @printf with return %00000403

00000403:
00000408: R8 := mem[R31 + 8, el]:u64
0000040f: R1 := pad:64[mem[R8, el]:u32]
00000414: R0 := 0
0000041a: R0 := R0 + 0x8E5
0000041f: R30 := 0x88C
00000421: call @printf with return %00000423

00000423:
00000428: R1 := pad:64[mem[R31 + 4, el]:u32]
0000042d: R0 := 0
00000433: R0 := R0 + 0x8F5
00000438: R30 := 0x89C
0000043a: call @printf with return %0000043c

0000043c:
00000441: R0 := mem[R31 + 0x10, el]:u64
00000446: R30 := 0x8A4
00000449: call @free with return %0000044b

0000044b:
00000450: R0 := mem[R31 + 8, el]:u64
00000455: R30 := 0x8AC
00000457: call @free with return %00000459

00000459:
0000045e: R0 := pad:64[mem[R31, el]:u32]
00000464: #5 := R31 + 0x20
00000469: R29 := mem[#5, el]:u64
0000046e: R30 := mem[#5 + 8, el]:u64
00000474: R31 := R31 + 0x30
00000479: call R30 with noreturn

0000075e: sub malloc(malloc_size, malloc_result)
00000775: malloc_size :: in u64 = R0
00000776: malloc_result :: out u64 = R0

0000038d:
000005f0: R16 := 0x11000
000005f7: R17 := mem[R16 + 0x10, el]:u64
000005fd: R16 := R16 + 0x10
00000602: call R17 with noreturn

0000075f: sub printf(printf_format, printf_result)
00000777: printf_format :: in u64 = R0
00000778: printf_result :: out u32 = low:32[R0]

000003ff:
00000648: R16 := 0x11000
0000064f: R17 := mem[R16 + 0x30, el]:u64
00000655: R16 := R16 + 0x30
0000065a: call R17 with noreturn

00000760: sub register_tm_clones(register_tm_clones_result)
00000779: register_tm_clones_result :: out u32 = low:32[R0]

000002b8:
000002bb: R0 := 0x11000
000002c1: R0 := R0 + 0x48
000002c6: R1 := 0x11000
000002cc: R1 := R1 + 0x48
000002d3: R1 := R1 + ~R0 + 1
000002d9: R2 := 0.63:63[R1]
000002e0: R1 := R2 + (R1 ~>> 3)
000002e6: R1 := extend:64[63:1[R1]]
000002ec: when R1 = 0 goto %000002ea
00000761: goto %000004b6

000004b6:
000004b9: R2 := 0x10000
000004c0: R2 := mem[R2 + 0xFE0, el]:u64
000004c5: when R2 = 0 goto %000002ea
00000762: goto %000004c9

000002ea:
000002f2: call R30 with noreturn

000004c9:
000004cd: R16 := R2
000004d2: call R16 with noreturn
