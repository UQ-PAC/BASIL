00000763: program
00000729: sub __cxa_finalize(__cxa_finalize_result)
00000764: __cxa_finalize_result :: out u32 = low:32[R0]

00000494:
000005bc: R16 := 0x20000
000005c3: R17 := mem[R16 + 8, el]:u64
000005c9: R16 := R16 + 8
000005ce: call R17 with noreturn

0000072a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000765: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002eb:
000002ef: #3 := R31 - 0x20
000002f5: mem := mem with [#3, el]:u64 <- R29
000002fb: mem := mem with [#3 + 8, el]:u64 <- R30
000002ff: R31 := #3
00000305: R29 := R31
0000030d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000312: R19 := 0x20000
00000319: R0 := pad:64[mem[R19 + 0x48]]
0000031f: when 0:0[R0] goto %0000031d
00000759: goto %0000045d

0000045d:
00000460: R0 := 0x1F000
00000467: R0 := mem[R0 + 0xFC8, el]:u64
0000046d: when R0 = 0 goto %0000046b
0000075a: goto %00000484

00000484:
00000487: R0 := 0x20000
0000048e: R0 := mem[R0 + 0x40, el]:u64
00000493: R30 := 0x7F0
00000496: call @__cxa_finalize with return %0000046b

0000046b:
00000473: R30 := 0x7F4
00000475: call @deregister_tm_clones with return %00000477

00000477:
0000047a: R0 := 1
00000482: mem := mem with [R19 + 0x48] <- 7:0[R0]
0000075b: goto %0000031d

0000031d:
00000327: R19 := mem[R31 + 0x10, el]:u64
0000032e: R29 := mem[R31, el]:u64
00000333: R30 := mem[R31 + 8, el]:u64
00000337: R31 := R31 + 0x20
0000033c: call R30 with noreturn

0000072e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000766: __libc_start_main_main :: in u64 = R0
00000767: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000768: __libc_start_main_arg3 :: in out u64 = R2
00000769: __libc_start_main_auxv :: in out u64 = R3
0000076a: __libc_start_main_result :: out u32 = low:32[R0]

00000244:
000005a6: R16 := 0x20000
000005ad: R17 := mem[R16, el]:u64
000005b3: R16 := R16
000005b8: call R17 with noreturn

0000072f: sub _fini(_fini_result)
0000076b: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000730: sub _init(_init_result)
0000076c: _init_result :: out u32 = low:32[R0]

00000658:
0000065e: #6 := R31 - 0x10
00000664: mem := mem with [#6, el]:u64 <- R29
0000066a: mem := mem with [#6 + 8, el]:u64 <- R30
0000066e: R31 := #6
00000674: R29 := R31
00000679: R30 := 0x638
0000067b: call @call_weak_fn with return %0000067d

0000067d:
00000682: R29 := mem[R31, el]:u64
00000687: R30 := mem[R31 + 8, el]:u64
0000068b: R31 := R31 + 0x10
00000690: call R30 with noreturn

00000731: sub _start(_start_result)
0000076d: _start_result :: out u32 = low:32[R0]

00000205:
0000020a: R29 := 0
0000020f: R30 := 0
00000215: R5 := R0
0000021c: R1 := mem[R31, el]:u64
00000222: R2 := R31 + 8
00000228: R6 := R31
0000022d: R0 := 0x1F000
00000234: R0 := mem[R0 + 0xFD8, el]:u64
00000239: R3 := 0
0000023e: R4 := 0
00000243: R30 := 0x730
00000246: call @__libc_start_main with return %00000248

00000248:
0000024b: R30 := 0x734
0000024e: call @abort with return %0000075c

0000075c:
0000075d: call @call_weak_fn with noreturn

00000734: sub abort()


0000024c:
000005fe: R16 := 0x20000
00000605: R17 := mem[R16 + 0x20, el]:u64
0000060b: R16 := R16 + 0x20
00000610: call R17 with noreturn

00000735: sub call_weak_fn(call_weak_fn_result)
0000076e: call_weak_fn_result :: out u32 = low:32[R0]

00000250:
00000253: R0 := 0x1F000
0000025a: R0 := mem[R0 + 0xFD0, el]:u64
00000260: when R0 = 0 goto %0000025e
0000075e: goto %000004d4

0000025e:
00000266: call R30 with noreturn

000004d4:
000004d7: goto @__gmon_start__

000004d5:
000005e8: R16 := 0x20000
000005ef: R17 := mem[R16 + 0x18, el]:u64
000005f5: R16 := R16 + 0x18
000005fa: call R17 with noreturn

00000737: sub deregister_tm_clones(deregister_tm_clones_result)
0000076f: deregister_tm_clones_result :: out u32 = low:32[R0]

0000026c:
0000026f: R0 := 0x20000
00000275: R0 := R0 + 0x48
0000027a: R1 := 0x20000
00000280: R1 := R1 + 0x48
00000286: #1 := ~R0
0000028b: #2 := R1 + ~R0
00000291: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000297: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000029b: ZF := #2 + 1 = 0
0000029f: NF := 63:63[#2 + 1]
000002a5: when ZF goto %000002a3
0000075f: goto %000004b6

000004b6:
000004b9: R1 := 0x1F000
000004c0: R1 := mem[R1 + 0xFC0, el]:u64
000004c5: when R1 = 0 goto %000002a3
00000760: goto %000004c9

000002a3:
000002ab: call R30 with noreturn

000004c9:
000004cd: R16 := R1
000004d2: call R16 with noreturn

0000073a: sub frame_dummy(frame_dummy_result)
00000770: frame_dummy_result :: out u32 = low:32[R0]

00000342:
00000344: call @register_tm_clones with noreturn

0000073b: sub free(free_ptr)
00000771: free_ptr :: in out u64 = R0

00000431:
00000614: R16 := 0x20000
0000061b: R17 := mem[R16 + 0x28, el]:u64
00000621: R16 := R16 + 0x28
00000626: call R17 with noreturn

0000073c: sub main(main_argc, main_argv, main_result)
00000772: main_argc :: in u32 = low:32[R0]
00000773: main_argv :: in out u64 = R1
00000774: main_result :: out u32 = low:32[R0]

00000346:
0000034a: #4 := R31 - 0x30
00000350: mem := mem with [#4, el]:u64 <- R29
00000356: mem := mem with [#4 + 8, el]:u64 <- R30
0000035a: R31 := #4
00000360: R29 := R31
00000365: R0 := 1
0000036a: R30 := 0x824
0000036d: call @malloc with return %0000036f

0000036f:
00000375: mem := mem with [R31 + 0x28, el]:u64 <- R0
0000037a: R0 := 4
0000037f: R30 := 0x830
00000381: call @malloc with return %00000383

00000383:
00000389: mem := mem with [R31 + 0x20, el]:u64 <- R0
0000038e: R0 := 0xA
00000396: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000039d: R0 := mem[R31 + 0x28, el]:u64
000003a2: R1 := 0x41
000003aa: mem := mem with [R0] <- 7:0[R1]
000003b1: R0 := mem[R31 + 0x20, el]:u64
000003b6: R1 := 0x2A
000003be: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003c5: R0 := mem[R31 + 0x28, el]:u64
000003cc: R0 := pad:64[mem[R0]]
000003d2: R1 := pad:64[31:0[R0]]
000003d7: R0 := 0
000003dd: R0 := R0 + 0x8D0
000003e2: R30 := 0x86C
000003e5: call @printf with return %000003e7

000003e7:
000003ec: R0 := mem[R31 + 0x20, el]:u64
000003f3: R0 := pad:64[mem[R0, el]:u32]
000003f9: R1 := pad:64[31:0[R0]]
000003fe: R0 := 0
00000404: R0 := R0 + 0x8E8
00000409: R30 := 0x884
0000040b: call @printf with return %0000040d

0000040d:
00000412: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
00000417: R0 := 0
0000041d: R0 := R0 + 0x8F8
00000422: R30 := 0x894
00000424: call @printf with return %00000426

00000426:
0000042b: R0 := mem[R31 + 0x28, el]:u64
00000430: R30 := 0x89C
00000433: call @free with return %00000435

00000435:
0000043a: R0 := mem[R31 + 0x20, el]:u64
0000043f: R30 := 0x8A4
00000441: call @free with return %00000443

00000443:
00000446: R0 := 0
0000044d: R29 := mem[R31, el]:u64
00000452: R30 := mem[R31 + 8, el]:u64
00000456: R31 := R31 + 0x30
0000045b: call R30 with noreturn

0000073d: sub malloc(malloc_size, malloc_result)
00000775: malloc_size :: in u64 = R0
00000776: malloc_result :: out u64 = R0

0000036b:
000005d2: R16 := 0x20000
000005d9: R17 := mem[R16 + 0x10, el]:u64
000005df: R16 := R16 + 0x10
000005e4: call R17 with noreturn

0000073e: sub printf(printf_format, printf_result)
00000777: printf_format :: in u64 = R0
00000778: printf_result :: out u32 = low:32[R0]

000003e3:
0000062a: R16 := 0x20000
00000631: R17 := mem[R16 + 0x30, el]:u64
00000637: R16 := R16 + 0x30
0000063c: call R17 with noreturn

0000073f: sub register_tm_clones(register_tm_clones_result)
00000779: register_tm_clones_result :: out u32 = low:32[R0]

000002ad:
000002b0: R0 := 0x20000
000002b6: R0 := R0 + 0x48
000002bb: R1 := 0x20000
000002c1: R1 := R1 + 0x48
000002c8: R1 := R1 + ~R0 + 1
000002ce: R2 := 0.63:63[R1]
000002d5: R1 := R2 + (R1 ~>> 3)
000002db: R1 := extend:64[63:1[R1]]
000002e1: when R1 = 0 goto %000002df
00000761: goto %00000498

00000498:
0000049b: R2 := 0x1F000
000004a2: R2 := mem[R2 + 0xFE0, el]:u64
000004a7: when R2 = 0 goto %000002df
00000762: goto %000004ab

000002df:
000002e7: call R30 with noreturn

000004ab:
000004af: R16 := R2
000004b4: call R16 with noreturn
