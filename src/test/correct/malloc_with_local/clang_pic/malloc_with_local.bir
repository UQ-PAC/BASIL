00000ed5: program
00000ebc: sub __cxa_finalize(__cxa_finalize_result)
00000ed6: __cxa_finalize_result :: out u32 = low:32[R0]

00000c24:
00000d4c: R16 := 0x11000
00000d53: R17 := mem[R16 + 8, el]:u64
00000d59: R16 := R16 + 8
00000d5e: call R17 with noreturn

00000ebd: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000ed7: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000a68:
00000a6c: #3 := R31 - 0x20
00000a72: mem := mem with [#3, el]:u64 <- R29
00000a78: mem := mem with [#3 + 8, el]:u64 <- R30
00000a7c: R31 := #3
00000a82: R29 := R31
00000a8a: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000a8f: R19 := 0x11000
00000a96: R0 := pad:64[mem[R19 + 0x48]]
00000a9d: when 31:0[R0] <> 0 goto %00000a9b
00000ebe: goto %00000bed

00000bed:
00000bf0: R0 := 0x10000
00000bf7: R0 := mem[R0 + 0xFC8, el]:u64
00000bfd: when R0 = 0 goto %00000bfb
00000ebf: goto %00000c14

00000c14:
00000c17: R0 := 0x11000
00000c1e: R0 := mem[R0 + 0x40, el]:u64
00000c23: R30 := 0x7F0
00000c26: call @__cxa_finalize with return %00000bfb

00000bfb:
00000c03: R30 := 0x7F4
00000c05: call @deregister_tm_clones with return %00000c07

00000c07:
00000c0a: R0 := 1
00000c12: mem := mem with [R19 + 0x48] <- 7:0[R0]
00000ec0: goto %00000a9b

00000a9b:
00000aa5: R19 := mem[R31 + 0x10, el]:u64
00000aac: R29 := mem[R31, el]:u64
00000ab1: R30 := mem[R31 + 8, el]:u64
00000ab5: R31 := R31 + 0x20
00000aba: call R30 with noreturn

00000ec1: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000ed8: __libc_start_main_main :: in u64 = R0
00000ed9: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000eda: __libc_start_main_arg3 :: in out u64 = R2
00000edb: __libc_start_main_auxv :: in out u64 = R3
00000edc: __libc_start_main_result :: out u32 = low:32[R0]

000009c1:
00000d36: R16 := 0x11000
00000d3d: R17 := mem[R16, el]:u64
00000d43: R16 := R16
00000d48: call R17 with noreturn

00000ec2: sub _fini(_fini_result)
00000edd: _fini_result :: out u32 = low:32[R0]

00000791:
00000797: #0 := R31 - 0x10
0000079d: mem := mem with [#0, el]:u64 <- R29
000007a3: mem := mem with [#0 + 8, el]:u64 <- R30
000007a7: R31 := #0
000007ad: R29 := R31
000007b4: R29 := mem[R31, el]:u64
000007b9: R30 := mem[R31 + 8, el]:u64
000007bd: R31 := R31 + 0x10
000007c2: call R30 with noreturn

00000ec3: sub _init(_init_result)
00000ede: _init_result :: out u32 = low:32[R0]

00000de8:
00000dee: #7 := R31 - 0x10
00000df4: mem := mem with [#7, el]:u64 <- R29
00000dfa: mem := mem with [#7 + 8, el]:u64 <- R30
00000dfe: R31 := #7
00000e04: R29 := R31
00000e09: R30 := 0x638
00000e0b: call @call_weak_fn with return %00000e0d

00000e0d:
00000e12: R29 := mem[R31, el]:u64
00000e17: R30 := mem[R31 + 8, el]:u64
00000e1b: R31 := R31 + 0x10
00000e20: call R30 with noreturn

00000ec4: sub _start(_start_result)
00000edf: _start_result :: out u32 = low:32[R0]

00000982:
00000987: R29 := 0
0000098c: R30 := 0
00000992: R5 := R0
00000999: R1 := mem[R31, el]:u64
0000099f: R2 := R31 + 8
000009a5: R6 := R31
000009aa: R0 := 0x10000
000009b1: R0 := mem[R0 + 0xFD8, el]:u64
000009b6: R3 := 0
000009bb: R4 := 0
000009c0: R30 := 0x730
000009c3: call @__libc_start_main with return %000009c5

000009c5:
000009c8: R30 := 0x734
000009cb: call @abort with return %00000ec5

00000ec5:
00000ec6: call @call_weak_fn with noreturn

00000ec7: sub abort()


000009c9:
00000d8e: R16 := 0x11000
00000d95: R17 := mem[R16 + 0x20, el]:u64
00000d9b: R16 := R16 + 0x20
00000da0: call R17 with noreturn

00000ec8: sub call_weak_fn(call_weak_fn_result)
00000ee0: call_weak_fn_result :: out u32 = low:32[R0]

000009cd:
000009d0: R0 := 0x10000
000009d7: R0 := mem[R0 + 0xFD0, el]:u64
000009dd: when R0 = 0 goto %000009db
00000ec9: goto %00000c64

000009db:
000009e3: call R30 with noreturn

00000c64:
00000c67: goto @__gmon_start__

00000c65:
00000d78: R16 := 0x11000
00000d7f: R17 := mem[R16 + 0x18, el]:u64
00000d85: R16 := R16 + 0x18
00000d8a: call R17 with noreturn

00000eca: sub deregister_tm_clones(deregister_tm_clones_result)
00000ee1: deregister_tm_clones_result :: out u32 = low:32[R0]

000009e9:
000009ec: R0 := 0x11000
000009f2: R0 := R0 + 0x48
000009f7: R1 := 0x11000
000009fd: R1 := R1 + 0x48
00000a03: #1 := ~R0
00000a08: #2 := R1 + ~R0
00000a0e: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000a14: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000a18: ZF := #2 + 1 = 0
00000a1c: NF := 63:63[#2 + 1]
00000a22: when ZF goto %00000a20
00000ecb: goto %00000c46

00000c46:
00000c49: R1 := 0x10000
00000c50: R1 := mem[R1 + 0xFC0, el]:u64
00000c55: when R1 = 0 goto %00000a20
00000ecc: goto %00000c59

00000a20:
00000a28: call R30 with noreturn

00000c59:
00000c5d: R16 := R1
00000c62: call R16 with noreturn

00000ecd: sub frame_dummy(frame_dummy_result)
00000ee2: frame_dummy_result :: out u32 = low:32[R0]

00000ac0:
00000ac2: call @register_tm_clones with noreturn

00000ece: sub free(free_ptr)
00000ee3: free_ptr :: in out u64 = R0

00000bb9:
00000da4: R16 := 0x11000
00000dab: R17 := mem[R16 + 0x28, el]:u64
00000db1: R16 := R16 + 0x28
00000db6: call R17 with noreturn

00000ecf: sub main(main_argc, main_argv, main_result)
00000ee4: main_argc :: in u32 = low:32[R0]
00000ee5: main_argv :: in out u64 = R1
00000ee6: main_result :: out u32 = low:32[R0]

00000ac4:
00000ac8: R31 := R31 - 0x30
00000ace: #4 := R31 + 0x20
00000ad4: mem := mem with [#4, el]:u64 <- R29
00000ada: mem := mem with [#4 + 8, el]:u64 <- R30
00000ae0: R29 := R31 + 0x20
00000ae5: R8 := 0
00000aed: mem := mem with [R31, el]:u32 <- 31:0[R8]
00000af4: mem := mem with [R29 - 4, el]:u32 <- 0
00000af9: R0 := 1
00000afe: R30 := 0x834
00000b01: call @malloc with return %00000b03

00000b03:
00000b09: mem := mem with [R31 + 0x10, el]:u64 <- R0
00000b0e: R0 := 4
00000b13: R30 := 0x840
00000b15: call @malloc with return %00000b17

00000b17:
00000b1d: mem := mem with [R31 + 8, el]:u64 <- R0
00000b22: R8 := 0xA
00000b2a: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000b31: R9 := mem[R31 + 0x10, el]:u64
00000b36: R8 := 0x41
00000b3e: mem := mem with [R9] <- 7:0[R8]
00000b45: R9 := mem[R31 + 8, el]:u64
00000b4a: R8 := 0x2A
00000b52: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000b59: R8 := mem[R31 + 0x10, el]:u64
00000b60: R1 := pad:64[mem[R8]]
00000b65: R0 := 0
00000b6b: R0 := R0 + 0x8D4
00000b70: R30 := 0x878
00000b73: call @printf with return %00000b75

00000b75:
00000b7a: R8 := mem[R31 + 8, el]:u64
00000b81: R1 := pad:64[mem[R8, el]:u32]
00000b86: R0 := 0
00000b8c: R0 := R0 + 0x8E5
00000b91: R30 := 0x88C
00000b93: call @printf with return %00000b95

00000b95:
00000b9a: R1 := pad:64[mem[R31 + 4, el]:u32]
00000b9f: R0 := 0
00000ba5: R0 := R0 + 0x8F5
00000baa: R30 := 0x89C
00000bac: call @printf with return %00000bae

00000bae:
00000bb3: R0 := mem[R31 + 0x10, el]:u64
00000bb8: R30 := 0x8A4
00000bbb: call @free with return %00000bbd

00000bbd:
00000bc2: R0 := mem[R31 + 8, el]:u64
00000bc7: R30 := 0x8AC
00000bc9: call @free with return %00000bcb

00000bcb:
00000bd0: R0 := pad:64[mem[R31, el]:u32]
00000bd6: #5 := R31 + 0x20
00000bdb: R29 := mem[#5, el]:u64
00000be0: R30 := mem[#5 + 8, el]:u64
00000be6: R31 := R31 + 0x30
00000beb: call R30 with noreturn

00000ed0: sub malloc(malloc_size, malloc_result)
00000ee7: malloc_size :: in u64 = R0
00000ee8: malloc_result :: out u64 = R0

00000aff:
00000d62: R16 := 0x11000
00000d69: R17 := mem[R16 + 0x10, el]:u64
00000d6f: R16 := R16 + 0x10
00000d74: call R17 with noreturn

00000ed1: sub printf(printf_format, printf_result)
00000ee9: printf_format :: in u64 = R0
00000eea: printf_result :: out u32 = low:32[R0]

00000b71:
00000dba: R16 := 0x11000
00000dc1: R17 := mem[R16 + 0x30, el]:u64
00000dc7: R16 := R16 + 0x30
00000dcc: call R17 with noreturn

00000ed2: sub register_tm_clones(register_tm_clones_result)
00000eeb: register_tm_clones_result :: out u32 = low:32[R0]

00000a2a:
00000a2d: R0 := 0x11000
00000a33: R0 := R0 + 0x48
00000a38: R1 := 0x11000
00000a3e: R1 := R1 + 0x48
00000a45: R1 := R1 + ~R0 + 1
00000a4b: R2 := 0.63:63[R1]
00000a52: R1 := R2 + (R1 ~>> 3)
00000a58: R1 := extend:64[63:1[R1]]
00000a5e: when R1 = 0 goto %00000a5c
00000ed3: goto %00000c28

00000c28:
00000c2b: R2 := 0x10000
00000c32: R2 := mem[R2 + 0xFE0, el]:u64
00000c37: when R2 = 0 goto %00000a5c
00000ed4: goto %00000c3b

00000a5c:
00000a64: call R30 with noreturn

00000c3b:
00000c3f: R16 := R2
00000c44: call R16 with noreturn
