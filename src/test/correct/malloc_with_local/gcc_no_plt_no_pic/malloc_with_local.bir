00000e93: program
00000e7a: sub __cxa_finalize(__cxa_finalize_result)
00000e94: __cxa_finalize_result :: out u32 = low:32[R0]

00000be5:
00000d0d: R16 := 0x10000
00000d14: R17 := mem[R16 + 0xFA0, el]:u64
00000d1a: R16 := R16 + 0xFA0
00000d1f: call R17 with noreturn

00000e7b: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000e95: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000a3b:
00000a3f: #3 := R31 - 0x20
00000a45: mem := mem with [#3, el]:u64 <- R29
00000a4b: mem := mem with [#3 + 8, el]:u64 <- R30
00000a4f: R31 := #3
00000a55: R29 := R31
00000a5d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000a62: R19 := 0x11000
00000a69: R0 := pad:64[mem[R19 + 0x10]]
00000a70: when 31:0[R0] <> 0 goto %00000a6e
00000e7c: goto %00000bae

00000bae:
00000bb1: R0 := 0x10000
00000bb8: R0 := mem[R0 + 0xFE0, el]:u64
00000bbe: when R0 = 0 goto %00000bbc
00000e7d: goto %00000bd5

00000bd5:
00000bd8: R0 := 0x11000
00000bdf: R0 := mem[R0 + 8, el]:u64
00000be4: R30 := 0x7F0
00000be7: call @__cxa_finalize with return %00000bbc

00000bbc:
00000bc4: R30 := 0x7F4
00000bc6: call @deregister_tm_clones with return %00000bc8

00000bc8:
00000bcb: R0 := 1
00000bd3: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000e7e: goto %00000a6e

00000a6e:
00000a78: R19 := mem[R31 + 0x10, el]:u64
00000a7f: R29 := mem[R31, el]:u64
00000a84: R30 := mem[R31 + 8, el]:u64
00000a88: R31 := R31 + 0x20
00000a8d: call R30 with noreturn

00000e7f: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000e96: __libc_start_main_main :: in u64 = R0
00000e97: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000e98: __libc_start_main_arg3 :: in out u64 = R2
00000e99: __libc_start_main_auxv :: in out u64 = R3
00000e9a: __libc_start_main_result :: out u32 = low:32[R0]

00000994:
00000cf7: R16 := 0x10000
00000cfe: R17 := mem[R16 + 0xF98, el]:u64
00000d04: R16 := R16 + 0xF98
00000d09: call R17 with noreturn

00000e80: sub _fini(_fini_result)
00000e9b: _fini_result :: out u32 = low:32[R0]

00000770:
00000776: #0 := R31 - 0x10
0000077c: mem := mem with [#0, el]:u64 <- R29
00000782: mem := mem with [#0 + 8, el]:u64 <- R30
00000786: R31 := #0
0000078c: R29 := R31
00000793: R29 := mem[R31, el]:u64
00000798: R30 := mem[R31 + 8, el]:u64
0000079c: R31 := R31 + 0x10
000007a1: call R30 with noreturn

00000e81: sub _init(_init_result)
00000e9c: _init_result :: out u32 = low:32[R0]

00000da9:
00000daf: #6 := R31 - 0x10
00000db5: mem := mem with [#6, el]:u64 <- R29
00000dbb: mem := mem with [#6 + 8, el]:u64 <- R30
00000dbf: R31 := #6
00000dc5: R29 := R31
00000dca: R30 := 0x638
00000dcc: call @call_weak_fn with return %00000dce

00000dce:
00000dd3: R29 := mem[R31, el]:u64
00000dd8: R30 := mem[R31 + 8, el]:u64
00000ddc: R31 := R31 + 0x10
00000de1: call R30 with noreturn

00000e82: sub _start(_start_result)
00000e9d: _start_result :: out u32 = low:32[R0]

00000955:
0000095a: R29 := 0
0000095f: R30 := 0
00000965: R5 := R0
0000096c: R1 := mem[R31, el]:u64
00000972: R2 := R31 + 8
00000978: R6 := R31
0000097d: R0 := 0x10000
00000984: R0 := mem[R0 + 0xFF0, el]:u64
00000989: R3 := 0
0000098e: R4 := 0
00000993: R30 := 0x730
00000996: call @__libc_start_main with return %00000998

00000998:
0000099b: R30 := 0x734
0000099e: call @abort with return %00000e83

00000e83:
00000e84: call @call_weak_fn with noreturn

00000e85: sub abort()


0000099c:
00000d4f: R16 := 0x10000
00000d56: R17 := mem[R16 + 0xFB8, el]:u64
00000d5c: R16 := R16 + 0xFB8
00000d61: call R17 with noreturn

00000e86: sub call_weak_fn(call_weak_fn_result)
00000e9e: call_weak_fn_result :: out u32 = low:32[R0]

000009a0:
000009a3: R0 := 0x10000
000009aa: R0 := mem[R0 + 0xFE8, el]:u64
000009b0: when R0 = 0 goto %000009ae
00000e87: goto %00000c25

000009ae:
000009b6: call R30 with noreturn

00000c25:
00000c28: goto @__gmon_start__

00000c26:
00000d39: R16 := 0x10000
00000d40: R17 := mem[R16 + 0xFB0, el]:u64
00000d46: R16 := R16 + 0xFB0
00000d4b: call R17 with noreturn

00000e88: sub deregister_tm_clones(deregister_tm_clones_result)
00000e9f: deregister_tm_clones_result :: out u32 = low:32[R0]

000009bc:
000009bf: R0 := 0x11000
000009c5: R0 := R0 + 0x10
000009ca: R1 := 0x11000
000009d0: R1 := R1 + 0x10
000009d6: #1 := ~R0
000009db: #2 := R1 + ~R0
000009e1: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000009e7: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000009eb: ZF := #2 + 1 = 0
000009ef: NF := 63:63[#2 + 1]
000009f5: when ZF goto %000009f3
00000e89: goto %00000c07

00000c07:
00000c0a: R1 := 0x10000
00000c11: R1 := mem[R1 + 0xFD8, el]:u64
00000c16: when R1 = 0 goto %000009f3
00000e8a: goto %00000c1a

000009f3:
000009fb: call R30 with noreturn

00000c1a:
00000c1e: R16 := R1
00000c23: call R16 with noreturn

00000e8b: sub frame_dummy(frame_dummy_result)
00000ea0: frame_dummy_result :: out u32 = low:32[R0]

00000a93:
00000a95: call @register_tm_clones with noreturn

00000e8c: sub free(free_ptr)
00000ea1: free_ptr :: in out u64 = R0

00000b82:
00000d65: R16 := 0x10000
00000d6c: R17 := mem[R16 + 0xFC0, el]:u64
00000d72: R16 := R16 + 0xFC0
00000d77: call R17 with noreturn

00000e8d: sub main(main_argc, main_argv, main_result)
00000ea2: main_argc :: in u32 = low:32[R0]
00000ea3: main_argv :: in out u64 = R1
00000ea4: main_result :: out u32 = low:32[R0]

00000a97:
00000a9b: #4 := R31 - 0x30
00000aa1: mem := mem with [#4, el]:u64 <- R29
00000aa7: mem := mem with [#4 + 8, el]:u64 <- R30
00000aab: R31 := #4
00000ab1: R29 := R31
00000ab6: R0 := 1
00000abb: R30 := 0x824
00000abe: call @malloc with return %00000ac0

00000ac0:
00000ac6: mem := mem with [R31 + 0x20, el]:u64 <- R0
00000acb: R0 := 4
00000ad0: R30 := 0x830
00000ad2: call @malloc with return %00000ad4

00000ad4:
00000ada: mem := mem with [R31 + 0x28, el]:u64 <- R0
00000adf: R0 := 0xA
00000ae7: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000aee: R0 := mem[R31 + 0x20, el]:u64
00000af3: R1 := 0x41
00000afb: mem := mem with [R0] <- 7:0[R1]
00000b02: R0 := mem[R31 + 0x28, el]:u64
00000b07: R1 := 0x2A
00000b0f: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000b16: R0 := mem[R31 + 0x20, el]:u64
00000b1d: R0 := pad:64[mem[R0]]
00000b23: R1 := pad:64[31:0[R0]]
00000b28: R0 := 0
00000b2e: R0 := R0 + 0x8D0
00000b33: R30 := 0x86C
00000b36: call @printf with return %00000b38

00000b38:
00000b3d: R0 := mem[R31 + 0x28, el]:u64
00000b44: R0 := pad:64[mem[R0, el]:u32]
00000b4a: R1 := pad:64[31:0[R0]]
00000b4f: R0 := 0
00000b55: R0 := R0 + 0x8E8
00000b5a: R30 := 0x884
00000b5c: call @printf with return %00000b5e

00000b5e:
00000b63: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
00000b68: R0 := 0
00000b6e: R0 := R0 + 0x8F8
00000b73: R30 := 0x894
00000b75: call @printf with return %00000b77

00000b77:
00000b7c: R0 := mem[R31 + 0x20, el]:u64
00000b81: R30 := 0x89C
00000b84: call @free with return %00000b86

00000b86:
00000b8b: R0 := mem[R31 + 0x28, el]:u64
00000b90: R30 := 0x8A4
00000b92: call @free with return %00000b94

00000b94:
00000b97: R0 := 0
00000b9e: R29 := mem[R31, el]:u64
00000ba3: R30 := mem[R31 + 8, el]:u64
00000ba7: R31 := R31 + 0x30
00000bac: call R30 with noreturn

00000e8e: sub malloc(malloc_size, malloc_result)
00000ea5: malloc_size :: in u64 = R0
00000ea6: malloc_result :: out u64 = R0

00000abc:
00000d23: R16 := 0x10000
00000d2a: R17 := mem[R16 + 0xFA8, el]:u64
00000d30: R16 := R16 + 0xFA8
00000d35: call R17 with noreturn

00000e8f: sub printf(printf_format, printf_result)
00000ea7: printf_format :: in u64 = R0
00000ea8: printf_result :: out u32 = low:32[R0]

00000b34:
00000d7b: R16 := 0x10000
00000d82: R17 := mem[R16 + 0xFC8, el]:u64
00000d88: R16 := R16 + 0xFC8
00000d8d: call R17 with noreturn

00000e90: sub register_tm_clones(register_tm_clones_result)
00000ea9: register_tm_clones_result :: out u32 = low:32[R0]

000009fd:
00000a00: R0 := 0x11000
00000a06: R0 := R0 + 0x10
00000a0b: R1 := 0x11000
00000a11: R1 := R1 + 0x10
00000a18: R1 := R1 + ~R0 + 1
00000a1e: R2 := 0.63:63[R1]
00000a25: R1 := R2 + (R1 ~>> 3)
00000a2b: R1 := extend:64[63:1[R1]]
00000a31: when R1 = 0 goto %00000a2f
00000e91: goto %00000be9

00000be9:
00000bec: R2 := 0x10000
00000bf3: R2 := mem[R2 + 0xFF8, el]:u64
00000bf8: when R2 = 0 goto %00000a2f
00000e92: goto %00000bfc

00000a2f:
00000a37: call R30 with noreturn

00000bfc:
00000c00: R16 := R2
00000c05: call R16 with noreturn
