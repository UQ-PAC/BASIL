000006d6: program
000006a1: sub __cxa_finalize(__cxa_finalize_result)
000006d7: __cxa_finalize_result :: out u32 = low:32[R0]

000003fb:
00000503: R16 := 0x20000
0000050a: R17 := mem[R16 + 8, el]:u64
00000510: R16 := R16 + 8
00000515: call R17 with noreturn

000006a2: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006d8: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000369:
0000036d: #4 := R31 - 0x20
00000373: mem := mem with [#4, el]:u64 <- R29
00000379: mem := mem with [#4 + 8, el]:u64 <- R30
0000037d: R31 := #4
00000383: R29 := R31
0000038b: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000390: R19 := 0x20000
00000397: R0 := pad:64[mem[R19 + 0x38]]
0000039d: when 0:0[R0] goto %0000039b
000006cc: goto %000003c4

000003c4:
000003c7: R0 := 0x1F000
000003ce: R0 := mem[R0 + 0xFC8, el]:u64
000003d4: when R0 = 0 goto %000003d2
000006cd: goto %000003eb

000003eb:
000003ee: R0 := 0x20000
000003f5: R0 := mem[R0 + 0x30, el]:u64
000003fa: R30 := 0x7B0
000003fd: call @__cxa_finalize with return %000003d2

000003d2:
000003da: R30 := 0x7B4
000003dc: call @deregister_tm_clones with return %000003de

000003de:
000003e1: R0 := 1
000003e9: mem := mem with [R19 + 0x38] <- 7:0[R0]
000006ce: goto %0000039b

0000039b:
000003a5: R19 := mem[R31 + 0x10, el]:u64
000003ac: R29 := mem[R31, el]:u64
000003b1: R30 := mem[R31 + 8, el]:u64
000003b5: R31 := R31 + 0x20
000003ba: call R30 with noreturn

000006a6: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006d9: __libc_start_main_main :: in u64 = R0
000006da: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006db: __libc_start_main_arg3 :: in out u64 = R2
000006dc: __libc_start_main_auxv :: in out u64 = R3
000006dd: __libc_start_main_result :: out u32 = low:32[R0]

000002c2:
000004ed: R16 := 0x20000
000004f4: R17 := mem[R16, el]:u64
000004fa: R16 := R16
000004ff: call R17 with noreturn

000006a7: sub _fini(_fini_result)
000006de: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000006a8: sub _init(_init_result)
000006df: _init_result :: out u32 = low:32[R0]

000005df:
000005e5: #6 := R31 - 0x10
000005eb: mem := mem with [#6, el]:u64 <- R29
000005f1: mem := mem with [#6 + 8, el]:u64 <- R30
000005f5: R31 := #6
000005fb: R29 := R31
00000600: R30 := 0x5C8
00000602: call @call_weak_fn with return %00000604

00000604:
00000609: R29 := mem[R31, el]:u64
0000060e: R30 := mem[R31 + 8, el]:u64
00000612: R31 := R31 + 0x10
00000617: call R30 with noreturn

000006a9: sub _start(_start_result)
000006e0: _start_result :: out u32 = low:32[R0]

00000283:
00000288: R29 := 0
0000028d: R30 := 0
00000293: R5 := R0
0000029a: R1 := mem[R31, el]:u64
000002a0: R2 := R31 + 8
000002a6: R6 := R31
000002ab: R0 := 0x1F000
000002b2: R0 := mem[R0 + 0xFD8, el]:u64
000002b7: R3 := 0
000002bc: R4 := 0
000002c1: R30 := 0x6F0
000002c4: call @__libc_start_main with return %000002c6

000002c6:
000002c9: R30 := 0x6F4
000002cc: call @abort with return %000006cf

000006cf:
000006d0: call @call_weak_fn with noreturn

000006ac: sub abort()


000002ca:
0000052f: R16 := 0x20000
00000536: R17 := mem[R16 + 0x18, el]:u64
0000053c: R16 := R16 + 0x18
00000541: call R17 with noreturn

000006ad: sub call_weak_fn(call_weak_fn_result)
000006e1: call_weak_fn_result :: out u32 = low:32[R0]

000002ce:
000002d1: R0 := 0x1F000
000002d8: R0 := mem[R0 + 0xFD0, el]:u64
000002de: when R0 = 0 goto %000002dc
000006d1: goto %0000043b

000002dc:
000002e4: call R30 with noreturn

0000043b:
0000043e: goto @__gmon_start__

0000043c:
00000519: R16 := 0x20000
00000520: R17 := mem[R16 + 0x10, el]:u64
00000526: R16 := R16 + 0x10
0000052b: call R17 with noreturn

000006af: sub deregister_tm_clones(deregister_tm_clones_result)
000006e2: deregister_tm_clones_result :: out u32 = low:32[R0]

000002ea:
000002ed: R0 := 0x20000
000002f3: R0 := R0 + 0x38
000002f8: R1 := 0x20000
000002fe: R1 := R1 + 0x38
00000304: #2 := ~R0
00000309: #3 := R1 + ~R0
0000030f: VF := extend:65[#3 + 1] <> extend:65[R1] + extend:65[#2] + 1
00000315: CF := pad:65[#3 + 1] <> pad:65[R1] + pad:65[#2] + 1
00000319: ZF := #3 + 1 = 0
0000031d: NF := 63:63[#3 + 1]
00000323: when ZF goto %00000321
000006d2: goto %0000041d

0000041d:
00000420: R1 := 0x1F000
00000427: R1 := mem[R1 + 0xFC0, el]:u64
0000042c: when R1 = 0 goto %00000321
000006d3: goto %00000430

00000321:
00000329: call R30 with noreturn

00000430:
00000434: R16 := R1
00000439: call R16 with noreturn

000006b2: sub frame_dummy(frame_dummy_result)
000006e3: frame_dummy_result :: out u32 = low:32[R0]

000003c0:
000003c2: call @register_tm_clones with noreturn

000006b3: sub main(main_argc, main_argv, main_result)
000006e4: main_argc :: in u32 = low:32[R0]
000006e5: main_argv :: in out u64 = R1
000006e6: main_result :: out u32 = low:32[R0]

000001e9:
000001ed: #1 := R31 - 0x10
000001f3: mem := mem with [#1, el]:u64 <- R29
000001f9: mem := mem with [#1 + 8, el]:u64 <- R30
000001fd: R31 := #1
00000202: R1 := 0x41
00000207: R0 := 0
0000020d: R29 := R31
00000213: R0 := R0 + 0x7F0
00000218: R30 := 0x658
0000021b: call @printf with return %0000021d

0000021d:
00000220: R1 := 0x2A
00000225: R0 := 0
0000022b: R0 := R0 + 0x808
00000230: R30 := 0x668
00000232: call @printf with return %00000234

00000234:
00000237: R1 := 0xA
0000023c: R0 := 0
00000242: R0 := R0 + 0x818
00000247: R30 := 0x678
00000249: call @printf with return %0000024b

0000024b:
0000024e: R0 := 0
00000255: R29 := mem[R31, el]:u64
0000025a: R30 := mem[R31 + 8, el]:u64
0000025e: R31 := R31 + 0x10
00000263: call R30 with noreturn

000006b4: sub printf(printf_format, printf_result)
000006e7: printf_format :: in u64 = R0
000006e8: printf_result :: out u32 = low:32[R0]

00000219:
00000545: R16 := 0x20000
0000054c: R17 := mem[R16 + 0x20, el]:u64
00000552: R16 := R16 + 0x20
00000557: call R17 with noreturn

000006b5: sub register_tm_clones(register_tm_clones_result)
000006e9: register_tm_clones_result :: out u32 = low:32[R0]

0000032b:
0000032e: R0 := 0x20000
00000334: R0 := R0 + 0x38
00000339: R1 := 0x20000
0000033f: R1 := R1 + 0x38
00000346: R1 := R1 + ~R0 + 1
0000034c: R2 := 0.63:63[R1]
00000353: R1 := R2 + (R1 ~>> 3)
00000359: R1 := extend:64[63:1[R1]]
0000035f: when R1 = 0 goto %0000035d
000006d4: goto %000003ff

000003ff:
00000402: R2 := 0x1F000
00000409: R2 := mem[R2 + 0xFE0, el]:u64
0000040e: when R2 = 0 goto %0000035d
000006d5: goto %00000412

0000035d:
00000365: call R30 with noreturn

00000412:
00000416: R16 := R2
0000041b: call R16 with noreturn
