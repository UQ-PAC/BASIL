var {:extern} $CF: bv1;
var {:extern} $Gamma_CF: bool;
var {:extern} $Gamma_NF: bool;
var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_VF: bool;
var {:extern} $Gamma_ZF: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $NF: bv1;
var {:extern} $R0: bv64;
var {:extern} $R31: bv64;
var {:extern} $VF: bv1;
var {:extern} $ZF: bv1;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $_DYNAMIC_addr: bv64;
axiom ($_DYNAMIC_addr == 69032bv64);
const {:extern} $_GLOBAL_OFFSET_TABLE__addr: bv64;
axiom ($_GLOBAL_OFFSET_TABLE__addr == 69584bv64);
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1916bv64);
const {:extern} $__FRAME_END___addr: bv64;
axiom ($__FRAME_END___addr == 2144bv64);
const {:extern} $__abi_tag_addr: bv64;
axiom ($__abi_tag_addr == 632bv64);
const {:extern} $__do_global_dtors_aux_fini_array_entry_addr: bv64;
axiom ($__do_global_dtors_aux_fini_array_entry_addr == 69024bv64);
const {:extern} $__frame_dummy_init_array_entry_addr: bv64;
axiom ($__frame_dummy_init_array_entry_addr == 69016bv64);
const {:extern} $completed.0_addr: bv64;
axiom ($completed.0_addr == 69648bv64);
function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 1916bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$main_1812();
  modifies $CF, $Gamma_CF, $Gamma_NF, $Gamma_R0, $Gamma_R31, $Gamma_VF, $Gamma_ZF, $Gamma_stack, $NF, $R0, $R31, $VF, $ZF, $stack;
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le($mem, 1916bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 1916bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_1812()
{
  var #Cse0__5_6: bv32;
  var #Cse0__5_7: bv32;
  var #Gamma_Cse0__5_6: bool;
  var #Gamma_Cse0__5_7: bool;
  var #Gamma_load19: bool;
  var #Gamma_load20: bool;
  var #load19: bv32;
  var #load20: bv32;
  b#main_entry:
    assume {:captureState "main_entry (fTP6a10DRkW0uClOUn3VYg==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551600bv64), $Gamma_R31;
    $R0, $Gamma_R0 := 1bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 8bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 8bv64), $Gamma_R0);
    assume {:captureState "1820_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), 0bv32), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), true);
    assume {:captureState "1824_0"} true;
    #load20, #Gamma_load20 := memory_load32_le($stack, bvadd64($R31, 8bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 8bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load20), #Gamma_load20;
    #Cse0__5_7, #Gamma_Cse0__5_7 := bvadd32($R0[32:0], 4294967295bv32), $Gamma_R0;
    $VF, $Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(#Cse0__5_7), bvadd33(sign_extend1_32($R0[32:0]), 8589934591bv33))), ($Gamma_R0 && #Gamma_Cse0__5_7);
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_7), bvadd33(zero_extend1_32($R0[32:0]), 4294967295bv33))), ($Gamma_R0 && #Gamma_Cse0__5_7);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_7, 0bv32), #Gamma_Cse0__5_7;
    $NF, $Gamma_NF := #Cse0__5_7[32:31], #Gamma_Cse0__5_7;
    assert $Gamma_ZF;
    goto b#main_7, b#main_19;
  b#main_19:
    assume {:captureState "main_19"} true;
    assume (!($ZF == 1bv1));
    #load19, #Gamma_load19 := memory_load32_le($stack, bvadd64($R31, 8bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 8bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load19), #Gamma_load19;
    #Cse0__5_6, #Gamma_Cse0__5_6 := bvadd32($R0[32:0], 4294967293bv32), $Gamma_R0;
    $VF, $Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(#Cse0__5_6), bvadd33(sign_extend1_32($R0[32:0]), 8589934589bv33))), ($Gamma_R0 && #Gamma_Cse0__5_6);
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_6), bvadd33(zero_extend1_32($R0[32:0]), 4294967293bv33))), ($Gamma_R0 && #Gamma_Cse0__5_6);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_6, 0bv32), #Gamma_Cse0__5_6;
    $NF, $Gamma_NF := #Cse0__5_6[32:31], #Gamma_Cse0__5_6;
    goto b#main_17;
  b#main_17:
    assume {:captureState "main_17 (qKMMRobvQhOFWJ6vLsAXWw==)"} true;
    assert $Gamma_ZF;
    goto b#main_11, b#main_15;
  b#main_15:
    assume {:captureState "main_15"} true;
    assume (!(!($ZF == 1bv1)));
    $R0, $Gamma_R0 := 3bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), $Gamma_R0);
    assume {:captureState "1856_0"} true;
    goto b#main_13;
  b#main_13:
    assume {:captureState "main_13 (0NcRUSBiRJiPUYrDF8NHDQ==)"} true;
    goto b#main_5;
  b#main_11:
    assume {:captureState "main_11"} true;
    assume (!($ZF == 1bv1));
    $R0, $Gamma_R0 := 5bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), $Gamma_R0);
    assume {:captureState "1876_0"} true;
    goto b#main_9;
  b#main_9:
    assume {:captureState "main_9 (DonY551VSjGOjsGSDV0czQ==)"} true;
    goto b#main_3;
  b#main_7:
    assume {:captureState "main_7"} true;
    assume ($ZF == 1bv1);
    goto b#main_5;
  b#main_5:
    assume {:captureState "main_5 (K4NVIb/2TLqhdwKQk4e4yQ==)"} true;
    $R0, $Gamma_R0 := 1bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), $Gamma_R0);
    assume {:captureState "1864_0"} true;
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (9WeRIM9VQHukMzVZYtgvQA==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 16bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

