var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1916bv64);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1916bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1917bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1918bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1919bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main(R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool);
  modifies Gamma_stack, stack;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 1916bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1917bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1918bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1919bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 1916bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1917bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1918bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1919bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main(R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool)
{
  var Gamma_R0_2: bool;
  var Gamma_R0_3: bool;
  var Gamma_R0_8: bool;
  var R0_2: bv32;
  var R0_3: bv32;
  var R0_8: bv64;
  $main$__0__$fTP6a10DRkW0uClOUn3VYg:
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), 1bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), true);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    R0_2, Gamma_R0_2 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551608bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64));
    assert Gamma_R0_2;
    goto $main$__0__$fTP6a10DRkW0uClOUn3VYg_goto_$main$__3__$K4NVIb_2TLqhdwKQk4e4yQ, $main$__0__$fTP6a10DRkW0uClOUn3VYg_goto_$main$__1__$qKMMRobvQhOFWJ6vLsAXWw;
  $main$__0__$fTP6a10DRkW0uClOUn3VYg_goto_$main$__1__$qKMMRobvQhOFWJ6vLsAXWw:
    assume (!(R0_2 == 1bv32));
    R0_3, Gamma_R0_3 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551608bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64));
    assert Gamma_R0_3;
    goto $main$__1__$qKMMRobvQhOFWJ6vLsAXWw_goto_$main$__4__$DonY551VSjGOjsGSDV0czQ, $main$__1__$qKMMRobvQhOFWJ6vLsAXWw_goto_$main$__2__$0NcRUSBiRJiPUYrDF8NHDQ;
  $main$__1__$qKMMRobvQhOFWJ6vLsAXWw_goto_$main$__2__$0NcRUSBiRJiPUYrDF8NHDQ:
    assume (R0_3 == 3bv32);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 3bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    goto $main$__3__$K4NVIb_2TLqhdwKQk4e4yQ;
  $main$__1__$qKMMRobvQhOFWJ6vLsAXWw_goto_$main$__4__$DonY551VSjGOjsGSDV0czQ:
    assume (!(R0_3 == 3bv32));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 5bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    R0_8, Gamma_R0_8 := 5bv64, true;
    goto $main$__5__$9WeRIM9VQHukMzVZYtgvQA;
  $main$__0__$fTP6a10DRkW0uClOUn3VYg_goto_$main$__3__$K4NVIb_2TLqhdwKQk4e4yQ:
    assume (R0_2 == 1bv32);
    goto $main$__3__$K4NVIb_2TLqhdwKQk4e4yQ;
  $main$__3__$K4NVIb_2TLqhdwKQk4e4yQ:
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 1bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    R0_8, Gamma_R0_8 := 1bv64, true;
    goto $main$__5__$9WeRIM9VQHukMzVZYtgvQA;
  $main$__5__$9WeRIM9VQHukMzVZYtgvQA:
    goto main_basil_return;
  main_basil_return:
    R0_out, R31_out := R0_8, R31_in;
    Gamma_R0_out, Gamma_R31_out := Gamma_R0_8, Gamma_R31_in;
    return;
}

