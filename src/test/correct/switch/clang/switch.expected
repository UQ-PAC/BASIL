var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1936bv64);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1936bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1937bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1938bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1939bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main(R31_in: bv64, Gamma_R31_in: bool) returns (R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool);
  modifies Gamma_stack, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load8_le(mem, 1936bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1937bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1938bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1939bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load8_le(mem, 1936bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1937bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1938bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1939bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main(R31_in: bv64, Gamma_R31_in: bool) returns (R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool)
{
  var Gamma_R8_13: bool;
  var Gamma_R8_18: bool;
  var Gamma_R8_2: bool;
  var Gamma_R8_7: bool;
  var Gamma_R8_8: bool;
  var R8_13: bv64;
  var R8_18: bv64;
  var R8_2: bv32;
  var R8_7: bv64;
  var R8_8: bv32;
  lmain:
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 1bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), true);
    R8_2, Gamma_R8_2 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551612bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551604bv64), R8_2), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64), Gamma_R8_2);
    assert Gamma_R8_2;
    goto lmain_goto_l0000035a, lmain_goto_l0000035d;
  lmain_goto_l0000035d:
    assume (R8_2 == 1bv32);
    R8_7, Gamma_R8_7 := 1bv64, true;
    goto l00000360;
  lmain_goto_l0000035a:
    assume (!(R8_2 == 1bv32));
    R8_7, Gamma_R8_7 := 0bv64, true;
    goto l00000360;
  l00000360:
    assert Gamma_R8_7;
    goto l00000360_goto_l00000368, l00000360_goto_l0000039a;
  l00000360_goto_l0000039a:
    assume (!(R8_7[1:0] == 1bv1));
    R8_8, Gamma_R8_8 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551604bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551604bv64));
    assert Gamma_R8_8;
    goto l0000039b_goto_l000003c4, l0000039b_goto_l000003c7;
  l0000039b_goto_l000003c7:
    assume (!(R8_8 == 3bv32));
    R8_13, Gamma_R8_13 := 1bv64, true;
    goto l000003ca;
  l0000039b_goto_l000003c4:
    assume (R8_8 == 3bv32);
    R8_13, Gamma_R8_13 := 0bv64, true;
    goto l000003ca;
  l000003ca:
    assert Gamma_R8_13;
    goto l000003ca_goto_l00000389, l000003ca_goto_l000003d7;
  l000003ca_goto_l000003d7:
    assume (!(R8_13[1:0] == 1bv1));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), 3bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), true);
    goto l00000368;
  l000003ca_goto_l00000389:
    assume (R8_13[1:0] == 1bv1);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), 5bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), true);
    R8_18, Gamma_R8_18 := 5bv64, true;
    goto l0000037b;
  l00000360_goto_l00000368:
    assume (R8_7[1:0] == 1bv1);
    goto l00000368;
  l00000368:
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), 1bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), true);
    R8_18, Gamma_R8_18 := 1bv64, true;
    goto l0000037b;
  l0000037b:
    goto main_basil_return;
  main_basil_return:
    R31_out, R8_out := R31_in, R8_18;
    Gamma_R31_out, Gamma_R8_out := Gamma_R31_in, Gamma_R8_18;
    return;
}

