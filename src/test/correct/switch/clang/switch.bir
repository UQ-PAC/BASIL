00000663: program
0000062d: sub __cxa_finalize(__cxa_finalize_result)
00000664: __cxa_finalize_result :: out u32 = low:32[R0]

00000423:
0000051b: R16 := 0x20000
00000522: R17 := mem[R16 + 8, el]:u64
00000528: R16 := R16 + 8
0000052d: call R17 with noreturn

0000062e: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000665: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002b7:
000002bb: #3 := R31 - 0x20
000002c1: mem := mem with [#3, el]:u64 <- R29
000002c7: mem := mem with [#3 + 8, el]:u64 <- R30
000002cb: R31 := #3
000002d1: R29 := R31
000002d9: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002de: R19 := 0x20000
000002e5: R0 := pad:64[mem[R19 + 0x30]]
000002eb: when 0:0[R0] goto %000002e9
00000657: goto %000003ec

000003ec:
000003ef: R0 := 0x1F000
000003f6: R0 := mem[R0 + 0xFC8, el]:u64
000003fc: when R0 = 0 goto %000003fa
00000658: goto %00000413

00000413:
00000416: R0 := 0x20000
0000041d: R0 := mem[R0 + 0x28, el]:u64
00000422: R30 := 0x730
00000425: call @__cxa_finalize with return %000003fa

000003fa:
00000402: R30 := 0x734
00000404: call @deregister_tm_clones with return %00000406

00000406:
00000409: R0 := 1
00000411: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000659: goto %000002e9

000002e9:
000002f3: R19 := mem[R31 + 0x10, el]:u64
000002fa: R29 := mem[R31, el]:u64
000002ff: R30 := mem[R31 + 8, el]:u64
00000303: R31 := R31 + 0x20
00000308: call R30 with noreturn

00000632: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000666: __libc_start_main_main :: in u64 = R0
00000667: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000668: __libc_start_main_arg3 :: in out u64 = R2
00000669: __libc_start_main_auxv :: in out u64 = R3
0000066a: __libc_start_main_result :: out u32 = low:32[R0]

00000210:
00000505: R16 := 0x20000
0000050c: R17 := mem[R16, el]:u64
00000512: R16 := R16
00000517: call R17 with noreturn

00000633: sub _fini(_fini_result)
0000066b: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000634: sub _init(_init_result)
0000066c: _init_result :: out u32 = low:32[R0]

00000575:
0000057b: #7 := R31 - 0x10
00000581: mem := mem with [#7, el]:u64 <- R29
00000587: mem := mem with [#7 + 8, el]:u64 <- R30
0000058b: R31 := #7
00000591: R29 := R31
00000596: R30 := 0x5C8
00000598: call @call_weak_fn with return %0000059a

0000059a:
0000059f: R29 := mem[R31, el]:u64
000005a4: R30 := mem[R31 + 8, el]:u64
000005a8: R31 := R31 + 0x10
000005ad: call R30 with noreturn

00000635: sub _start(_start_result)
0000066d: _start_result :: out u32 = low:32[R0]

000001d1:
000001d6: R29 := 0
000001db: R30 := 0
000001e1: R5 := R0
000001e8: R1 := mem[R31, el]:u64
000001ee: R2 := R31 + 8
000001f4: R6 := R31
000001f9: R0 := 0x1F000
00000200: R0 := mem[R0 + 0xFD8, el]:u64
00000205: R3 := 0
0000020a: R4 := 0
0000020f: R30 := 0x670
00000212: call @__libc_start_main with return %00000214

00000214:
00000217: R30 := 0x674
0000021a: call @abort with return %0000065a

0000065a:
0000065b: call @call_weak_fn with noreturn

00000638: sub abort()


00000218:
00000547: R16 := 0x20000
0000054e: R17 := mem[R16 + 0x18, el]:u64
00000554: R16 := R16 + 0x18
00000559: call R17 with noreturn

00000639: sub call_weak_fn(call_weak_fn_result)
0000066e: call_weak_fn_result :: out u32 = low:32[R0]

0000021c:
0000021f: R0 := 0x1F000
00000226: R0 := mem[R0 + 0xFD0, el]:u64
0000022c: when R0 = 0 goto %0000022a
0000065c: goto %00000463

0000022a:
00000232: call R30 with noreturn

00000463:
00000466: goto @__gmon_start__

00000464:
00000531: R16 := 0x20000
00000538: R17 := mem[R16 + 0x10, el]:u64
0000053e: R16 := R16 + 0x10
00000543: call R17 with noreturn

0000063b: sub deregister_tm_clones(deregister_tm_clones_result)
0000066f: deregister_tm_clones_result :: out u32 = low:32[R0]

00000238:
0000023b: R0 := 0x20000
00000241: R0 := R0 + 0x30
00000246: R1 := 0x20000
0000024c: R1 := R1 + 0x30
00000252: #1 := ~R0
00000257: #2 := R1 + ~R0
0000025d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000263: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000267: ZF := #2 + 1 = 0
0000026b: NF := 63:63[#2 + 1]
00000271: when ZF goto %0000026f
0000065d: goto %00000445

00000445:
00000448: R1 := 0x1F000
0000044f: R1 := mem[R1 + 0xFC0, el]:u64
00000454: when R1 = 0 goto %0000026f
0000065e: goto %00000458

0000026f:
00000277: call R30 with noreturn

00000458:
0000045c: R16 := R1
00000461: call R16 with noreturn

0000063e: sub frame_dummy(frame_dummy_result)
00000670: frame_dummy_result :: out u32 = low:32[R0]

0000030e:
00000310: call @register_tm_clones with noreturn

0000063f: sub main(main_argc, main_argv, main_result)
00000671: main_argc :: in u32 = low:32[R0]
00000672: main_argv :: in out u64 = R1
00000673: main_result :: out u32 = low:32[R0]

00000312:
00000316: R31 := R31 - 0x10
0000031b: R8 := 1
00000323: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000032a: mem := mem with [R31 + 8, el]:u32 <- 0
00000331: R8 := pad:64[mem[R31 + 0xC, el]:u32]
00000339: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
0000033f: #4 := 31:0[R8] - 2
00000344: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 1
00000349: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFF
0000034d: ZF := #4 + 1 = 0
00000351: NF := 31:31[#4 + 1]
00000355: R8 := pad:64[#4 + 1]
00000361: when ZF <> 1 goto %0000035a
00000362: goto %0000035d

0000035d:
0000035e: R8 := 1
00000364: goto %00000360

0000035a:
0000035b: R8 := 0
00000363: goto %00000360

00000360:
0000036a: when 0:0[R8] goto %00000368
0000065f: goto %0000039a

0000039a:
0000039d: goto %0000039b

0000039b:
000003a3: R8 := pad:64[mem[R31 + 4, el]:u32]
000003a9: #5 := 31:0[R8] - 4
000003ae: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] - 3
000003b3: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFD
000003b7: ZF := #5 + 1 = 0
000003bb: NF := 31:31[#5 + 1]
000003bf: R8 := pad:64[#5 + 1]
000003cb: when ZF goto %000003c4
000003cc: goto %000003c7

000003c7:
000003c8: R8 := 1
000003ce: goto %000003ca

000003c4:
000003c5: R8 := 0
000003cd: goto %000003ca

000003ca:
000003d3: when 0:0[R8] goto %00000389
00000660: goto %000003d7

00000389:
0000038c: R8 := 5
00000394: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000398: goto %0000037b

000003d7:
000003da: goto %000003d8

000003d8:
000003de: R8 := 3
000003e6: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003ea: goto %00000368

00000368:
00000370: R8 := 1
00000378: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000037d: goto %0000037b

0000037b:
00000382: R31 := R31 + 0x10
00000387: call R30 with noreturn

00000642: sub register_tm_clones(register_tm_clones_result)
00000674: register_tm_clones_result :: out u32 = low:32[R0]

00000279:
0000027c: R0 := 0x20000
00000282: R0 := R0 + 0x30
00000287: R1 := 0x20000
0000028d: R1 := R1 + 0x30
00000294: R1 := R1 + ~R0 + 1
0000029a: R2 := 0.63:63[R1]
000002a1: R1 := R2 + (R1 ~>> 3)
000002a7: R1 := extend:64[63:1[R1]]
000002ad: when R1 = 0 goto %000002ab
00000661: goto %00000427

00000427:
0000042a: R2 := 0x1F000
00000431: R2 := mem[R2 + 0xFE0, el]:u64
00000436: when R2 = 0 goto %000002ab
00000662: goto %0000043a

000002ab:
000002b3: call R30 with noreturn

0000043a:
0000043e: R16 := R2
00000443: call R16 with noreturn
