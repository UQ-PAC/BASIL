000006c9: program
00000693: sub __cxa_finalize(__cxa_finalize_result)
000006ca: __cxa_finalize_result :: out u32 = low:32[R0]

00000423:
0000051b: R16 := 0x11000
00000522: R17 := mem[R16 + 8, el]:u64
00000528: R16 := R16 + 8
0000052d: call R17 with noreturn

00000694: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006cb: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002b6:
000002ba: #3 := R31 - 0x20
000002c0: mem := mem with [#3, el]:u64 <- R29
000002c6: mem := mem with [#3 + 8, el]:u64 <- R30
000002ca: R31 := #3
000002d0: R29 := R31
000002d8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002dd: R19 := 0x11000
000002e4: R0 := pad:64[mem[R19 + 0x30]]
000002eb: when 31:0[R0] <> 0 goto %000002e9
000006bd: goto %000003ec

000003ec:
000003ef: R0 := 0x10000
000003f6: R0 := mem[R0 + 0xFC8, el]:u64
000003fc: when R0 = 0 goto %000003fa
000006be: goto %00000413

00000413:
00000416: R0 := 0x11000
0000041d: R0 := mem[R0 + 0x28, el]:u64
00000422: R30 := 0x6F0
00000425: call @__cxa_finalize with return %000003fa

000003fa:
00000402: R30 := 0x6F4
00000404: call @deregister_tm_clones with return %00000406

00000406:
00000409: R0 := 1
00000411: mem := mem with [R19 + 0x30] <- 7:0[R0]
000006bf: goto %000002e9

000002e9:
000002f3: R19 := mem[R31 + 0x10, el]:u64
000002fa: R29 := mem[R31, el]:u64
000002ff: R30 := mem[R31 + 8, el]:u64
00000303: R31 := R31 + 0x20
00000308: call R30 with noreturn

00000698: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006cc: __libc_start_main_main :: in u64 = R0
000006cd: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006ce: __libc_start_main_arg3 :: in out u64 = R2
000006cf: __libc_start_main_auxv :: in out u64 = R3
000006d0: __libc_start_main_result :: out u32 = low:32[R0]

0000020f:
00000505: R16 := 0x11000
0000050c: R17 := mem[R16, el]:u64
00000512: R16 := R16
00000517: call R17 with noreturn

00000699: sub _fini(_fini_result)
000006d1: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000069a: sub _init(_init_result)
000006d2: _init_result :: out u32 = low:32[R0]

000005db:
000005e1: #7 := R31 - 0x10
000005e7: mem := mem with [#7, el]:u64 <- R29
000005ed: mem := mem with [#7 + 8, el]:u64 <- R30
000005f1: R31 := #7
000005f7: R29 := R31
000005fc: R30 := 0x590
000005fe: call @call_weak_fn with return %00000600

00000600:
00000605: R29 := mem[R31, el]:u64
0000060a: R30 := mem[R31 + 8, el]:u64
0000060e: R31 := R31 + 0x10
00000613: call R30 with noreturn

0000069b: sub _start(_start_result)
000006d3: _start_result :: out u32 = low:32[R0]

000001d0:
000001d5: R29 := 0
000001da: R30 := 0
000001e0: R5 := R0
000001e7: R1 := mem[R31, el]:u64
000001ed: R2 := R31 + 8
000001f3: R6 := R31
000001f8: R0 := 0x10000
000001ff: R0 := mem[R0 + 0xFD8, el]:u64
00000204: R3 := 0
00000209: R4 := 0
0000020e: R30 := 0x630
00000211: call @__libc_start_main with return %00000213

00000213:
00000216: R30 := 0x634
00000219: call @abort with return %000006c0

000006c0:
000006c1: call @call_weak_fn with noreturn

0000069e: sub abort()


00000217:
00000547: R16 := 0x11000
0000054e: R17 := mem[R16 + 0x18, el]:u64
00000554: R16 := R16 + 0x18
00000559: call R17 with noreturn

0000069f: sub call_weak_fn(call_weak_fn_result)
000006d4: call_weak_fn_result :: out u32 = low:32[R0]

0000021b:
0000021e: R0 := 0x10000
00000225: R0 := mem[R0 + 0xFD0, el]:u64
0000022b: when R0 = 0 goto %00000229
000006c2: goto %00000463

00000229:
00000231: call R30 with noreturn

00000463:
00000466: goto @__gmon_start__

00000464:
00000531: R16 := 0x11000
00000538: R17 := mem[R16 + 0x10, el]:u64
0000053e: R16 := R16 + 0x10
00000543: call R17 with noreturn

000006a1: sub deregister_tm_clones(deregister_tm_clones_result)
000006d5: deregister_tm_clones_result :: out u32 = low:32[R0]

00000237:
0000023a: R0 := 0x11000
00000240: R0 := R0 + 0x30
00000245: R1 := 0x11000
0000024b: R1 := R1 + 0x30
00000251: #1 := ~R0
00000256: #2 := R1 + ~R0
0000025c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000262: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000266: ZF := #2 + 1 = 0
0000026a: NF := 63:63[#2 + 1]
00000270: when ZF goto %0000026e
000006c3: goto %00000445

00000445:
00000448: R1 := 0x10000
0000044f: R1 := mem[R1 + 0xFC0, el]:u64
00000454: when R1 = 0 goto %0000026e
000006c4: goto %00000458

0000026e:
00000276: call R30 with noreturn

00000458:
0000045c: R16 := R1
00000461: call R16 with noreturn

000006a4: sub frame_dummy(frame_dummy_result)
000006d6: frame_dummy_result :: out u32 = low:32[R0]

0000030e:
00000310: call @register_tm_clones with noreturn

000006a5: sub main(main_argc, main_argv, main_result)
000006d7: main_argc :: in u32 = low:32[R0]
000006d8: main_argv :: in out u64 = R1
000006d9: main_result :: out u32 = low:32[R0]

00000312:
00000316: R31 := R31 - 0x10
0000031b: R8 := 1
00000323: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000032a: mem := mem with [R31 + 8, el]:u32 <- 0
00000331: R8 := pad:64[mem[R31 + 0xC, el]:u32]
00000339: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
0000033f: #4 := 31:0[R8] - 2
00000344: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 1
00000349: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFF
0000034d: ZF := #4 + 1 = 0
00000351: NF := 31:31[#4 + 1]
00000355: R8 := pad:64[#4 + 1]
00000361: when ZF <> 1 goto %0000035a
00000362: goto %0000035d

0000035d:
0000035e: R8 := 1
00000364: goto %00000360

0000035a:
0000035b: R8 := 0
00000363: goto %00000360

00000360:
0000036a: when 0:0[R8] goto %00000368
000006c5: goto %0000039a

0000039a:
0000039d: goto %0000039b

0000039b:
000003a3: R8 := pad:64[mem[R31 + 4, el]:u32]
000003a9: #5 := 31:0[R8] - 4
000003ae: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] - 3
000003b3: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFD
000003b7: ZF := #5 + 1 = 0
000003bb: NF := 31:31[#5 + 1]
000003bf: R8 := pad:64[#5 + 1]
000003cb: when ZF goto %000003c4
000003cc: goto %000003c7

000003c7:
000003c8: R8 := 1
000003ce: goto %000003ca

000003c4:
000003c5: R8 := 0
000003cd: goto %000003ca

000003ca:
000003d3: when 0:0[R8] goto %00000389
000006c6: goto %000003d7

00000389:
0000038c: R8 := 5
00000394: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000398: goto %0000037b

000003d7:
000003da: goto %000003d8

000003d8:
000003de: R8 := 3
000003e6: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003ea: goto %00000368

00000368:
00000370: R8 := 1
00000378: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000037d: goto %0000037b

0000037b:
00000382: R31 := R31 + 0x10
00000387: call R30 with noreturn

000006a8: sub register_tm_clones(register_tm_clones_result)
000006da: register_tm_clones_result :: out u32 = low:32[R0]

00000278:
0000027b: R0 := 0x11000
00000281: R0 := R0 + 0x30
00000286: R1 := 0x11000
0000028c: R1 := R1 + 0x30
00000293: R1 := R1 + ~R0 + 1
00000299: R2 := 0.63:63[R1]
000002a0: R1 := R2 + (R1 ~>> 3)
000002a6: R1 := extend:64[63:1[R1]]
000002ac: when R1 = 0 goto %000002aa
000006c7: goto %00000427

00000427:
0000042a: R2 := 0x10000
00000431: R2 := mem[R2 + 0xFE0, el]:u64
00000436: when R2 = 0 goto %000002aa
000006c8: goto %0000043a

000002aa:
000002b2: call R30 with noreturn

0000043a:
0000043e: R16 := R2
00000443: call R16 with noreturn
