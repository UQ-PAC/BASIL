00000d60: program
00000d48: sub __cxa_finalize(__cxa_finalize_result)
00000d61: __cxa_finalize_result :: out u32 = low:32[R0]

00000ad8:
00000bd0: R16 := 0x11000
00000bd7: R17 := mem[R16 + 8, el]:u64
00000bdd: R16 := R16 + 8
00000be2: call R17 with noreturn

00000d49: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000d62: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000096b:
0000096f: #3 := R31 - 0x20
00000975: mem := mem with [#3, el]:u64 <- R29
0000097b: mem := mem with [#3 + 8, el]:u64 <- R30
0000097f: R31 := #3
00000985: R29 := R31
0000098d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000992: R19 := 0x11000
00000999: R0 := pad:64[mem[R19 + 0x30]]
000009a0: when 31:0[R0] <> 0 goto %0000099e
00000d4a: goto %00000aa1

00000aa1:
00000aa4: R0 := 0x10000
00000aab: R0 := mem[R0 + 0xFC8, el]:u64
00000ab1: when R0 = 0 goto %00000aaf
00000d4b: goto %00000ac8

00000ac8:
00000acb: R0 := 0x11000
00000ad2: R0 := mem[R0 + 0x28, el]:u64
00000ad7: R30 := 0x6F0
00000ada: call @__cxa_finalize with return %00000aaf

00000aaf:
00000ab7: R30 := 0x6F4
00000ab9: call @deregister_tm_clones with return %00000abb

00000abb:
00000abe: R0 := 1
00000ac6: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000d4c: goto %0000099e

0000099e:
000009a8: R19 := mem[R31 + 0x10, el]:u64
000009af: R29 := mem[R31, el]:u64
000009b4: R30 := mem[R31 + 8, el]:u64
000009b8: R31 := R31 + 0x20
000009bd: call R30 with noreturn

00000d4d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000d63: __libc_start_main_main :: in u64 = R0
00000d64: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000d65: __libc_start_main_arg3 :: in out u64 = R2
00000d66: __libc_start_main_auxv :: in out u64 = R3
00000d67: __libc_start_main_result :: out u32 = low:32[R0]

000008c4:
00000bba: R16 := 0x11000
00000bc1: R17 := mem[R16, el]:u64
00000bc7: R16 := R16
00000bcc: call R17 with noreturn

00000d4e: sub _fini(_fini_result)
00000d68: _fini_result :: out u32 = low:32[R0]

000006d4:
000006da: #0 := R31 - 0x10
000006e0: mem := mem with [#0, el]:u64 <- R29
000006e6: mem := mem with [#0 + 8, el]:u64 <- R30
000006ea: R31 := #0
000006f0: R29 := R31
000006f7: R29 := mem[R31, el]:u64
000006fc: R30 := mem[R31 + 8, el]:u64
00000700: R31 := R31 + 0x10
00000705: call R30 with noreturn

00000d4f: sub _init(_init_result)
00000d69: _init_result :: out u32 = low:32[R0]

00000c90:
00000c96: #7 := R31 - 0x10
00000c9c: mem := mem with [#7, el]:u64 <- R29
00000ca2: mem := mem with [#7 + 8, el]:u64 <- R30
00000ca6: R31 := #7
00000cac: R29 := R31
00000cb1: R30 := 0x590
00000cb3: call @call_weak_fn with return %00000cb5

00000cb5:
00000cba: R29 := mem[R31, el]:u64
00000cbf: R30 := mem[R31 + 8, el]:u64
00000cc3: R31 := R31 + 0x10
00000cc8: call R30 with noreturn

00000d50: sub _start(_start_result)
00000d6a: _start_result :: out u32 = low:32[R0]

00000885:
0000088a: R29 := 0
0000088f: R30 := 0
00000895: R5 := R0
0000089c: R1 := mem[R31, el]:u64
000008a2: R2 := R31 + 8
000008a8: R6 := R31
000008ad: R0 := 0x10000
000008b4: R0 := mem[R0 + 0xFD8, el]:u64
000008b9: R3 := 0
000008be: R4 := 0
000008c3: R30 := 0x630
000008c6: call @__libc_start_main with return %000008c8

000008c8:
000008cb: R30 := 0x634
000008ce: call @abort with return %00000d51

00000d51:
00000d52: call @call_weak_fn with noreturn

00000d53: sub abort()


000008cc:
00000bfc: R16 := 0x11000
00000c03: R17 := mem[R16 + 0x18, el]:u64
00000c09: R16 := R16 + 0x18
00000c0e: call R17 with noreturn

00000d54: sub call_weak_fn(call_weak_fn_result)
00000d6b: call_weak_fn_result :: out u32 = low:32[R0]

000008d0:
000008d3: R0 := 0x10000
000008da: R0 := mem[R0 + 0xFD0, el]:u64
000008e0: when R0 = 0 goto %000008de
00000d55: goto %00000b18

000008de:
000008e6: call R30 with noreturn

00000b18:
00000b1b: goto @__gmon_start__

00000b19:
00000be6: R16 := 0x11000
00000bed: R17 := mem[R16 + 0x10, el]:u64
00000bf3: R16 := R16 + 0x10
00000bf8: call R17 with noreturn

00000d56: sub deregister_tm_clones(deregister_tm_clones_result)
00000d6c: deregister_tm_clones_result :: out u32 = low:32[R0]

000008ec:
000008ef: R0 := 0x11000
000008f5: R0 := R0 + 0x30
000008fa: R1 := 0x11000
00000900: R1 := R1 + 0x30
00000906: #1 := ~R0
0000090b: #2 := R1 + ~R0
00000911: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000917: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000091b: ZF := #2 + 1 = 0
0000091f: NF := 63:63[#2 + 1]
00000925: when ZF goto %00000923
00000d57: goto %00000afa

00000afa:
00000afd: R1 := 0x10000
00000b04: R1 := mem[R1 + 0xFC0, el]:u64
00000b09: when R1 = 0 goto %00000923
00000d58: goto %00000b0d

00000923:
0000092b: call R30 with noreturn

00000b0d:
00000b11: R16 := R1
00000b16: call R16 with noreturn

00000d59: sub frame_dummy(frame_dummy_result)
00000d6d: frame_dummy_result :: out u32 = low:32[R0]

000009c3:
000009c5: call @register_tm_clones with noreturn

00000d5a: sub main(main_argc, main_argv, main_result)
00000d6e: main_argc :: in u32 = low:32[R0]
00000d6f: main_argv :: in out u64 = R1
00000d70: main_result :: out u32 = low:32[R0]

000009c7:
000009cb: R31 := R31 - 0x10
000009d0: R8 := 1
000009d8: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
000009df: mem := mem with [R31 + 8, el]:u32 <- 0
000009e6: R8 := pad:64[mem[R31 + 0xC, el]:u32]
000009ee: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
000009f4: #4 := 31:0[R8] - 2
000009f9: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 1
000009fe: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFF
00000a02: ZF := #4 + 1 = 0
00000a06: NF := 31:31[#4 + 1]
00000a0a: R8 := pad:64[#4 + 1]
00000a16: when ZF <> 1 goto %00000a0f
00000a17: goto %00000a12

00000a12:
00000a13: R8 := 1
00000a19: goto %00000a15

00000a0f:
00000a10: R8 := 0
00000a18: goto %00000a15

00000a15:
00000a1f: when 0:0[R8] goto %00000a1d
00000d5b: goto %00000a4f

00000a4f:
00000a52: goto %00000a50

00000a50:
00000a58: R8 := pad:64[mem[R31 + 4, el]:u32]
00000a5e: #5 := 31:0[R8] - 4
00000a63: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] - 3
00000a68: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFD
00000a6c: ZF := #5 + 1 = 0
00000a70: NF := 31:31[#5 + 1]
00000a74: R8 := pad:64[#5 + 1]
00000a80: when ZF goto %00000a79
00000a81: goto %00000a7c

00000a7c:
00000a7d: R8 := 1
00000a83: goto %00000a7f

00000a79:
00000a7a: R8 := 0
00000a82: goto %00000a7f

00000a7f:
00000a88: when 0:0[R8] goto %00000a3e
00000d5c: goto %00000a8c

00000a3e:
00000a41: R8 := 5
00000a49: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000a4d: goto %00000a30

00000a8c:
00000a8f: goto %00000a8d

00000a8d:
00000a93: R8 := 3
00000a9b: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000a9f: goto %00000a1d

00000a1d:
00000a25: R8 := 1
00000a2d: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000a32: goto %00000a30

00000a30:
00000a37: R31 := R31 + 0x10
00000a3c: call R30 with noreturn

00000d5d: sub register_tm_clones(register_tm_clones_result)
00000d71: register_tm_clones_result :: out u32 = low:32[R0]

0000092d:
00000930: R0 := 0x11000
00000936: R0 := R0 + 0x30
0000093b: R1 := 0x11000
00000941: R1 := R1 + 0x30
00000948: R1 := R1 + ~R0 + 1
0000094e: R2 := 0.63:63[R1]
00000955: R1 := R2 + (R1 ~>> 3)
0000095b: R1 := extend:64[63:1[R1]]
00000961: when R1 = 0 goto %0000095f
00000d5e: goto %00000adc

00000adc:
00000adf: R2 := 0x10000
00000ae6: R2 := mem[R2 + 0xFE0, el]:u64
00000aeb: when R2 = 0 goto %0000095f
00000d5f: goto %00000aef

0000095f:
00000967: call R30 with noreturn

00000aef:
00000af3: R16 := R2
00000af8: call R16 with noreturn
