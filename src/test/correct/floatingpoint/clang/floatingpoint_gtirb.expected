var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2088bv64);
function FPAdd$32(bv32, bv32, bv32) returns (bv32);
function FPAdd$64(bv64, bv64, bv32) returns (bv64);
function FPConvert$32$64(bv64, bv32) returns (bv32);
function FPConvert$64$32(bv32, bv32) returns (bv64);
function FPDiv$32(bv32, bv32, bv32) returns (bv32);
function FPDiv$64(bv64, bv64, bv32) returns (bv64);
function FPMul$32(bv32, bv32, bv32) returns (bv32);
function FPMul$64(bv64, bv64, bv32) returns (bv64);
function FPSub$32(bv32, bv32, bv32) returns (bv32);
function FPSub$64(bv64, bv64, bv32) returns (bv64);
function FPToFixed$32$64(bv64, int, bool, bv32, int) returns (bv32);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:inline} byte_extract64_64(value: bv64, offset: bv64) returns (bv8) {
  bvlshr64(value,bvmul64(offset,8bv64))[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then byte_extract64_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 64"} zero_extend64_64(bv64) returns (bv128);
function {:extern} {:bvbuiltin "zero_extend 96"} zero_extend96_32(bv32) returns (bv128);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load64_le(mem, 2088bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2096bv64) == 4767034467667331754bv64);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main(FPCR_in: bv32, Gamma_FPCR_in: bool, R0_in: bv64, Gamma_R0_in: bool, R1_in: bv64, Gamma_R1_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 2088bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2096bv64) == 4767034467667331754bv64);
  free requires (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 2088bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2096bv64) == 4767034467667331754bv64);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main(FPCR_in: bv32, Gamma_FPCR_in: bool, R0_in: bv64, Gamma_R0_in: bool, R1_in: bv64, Gamma_R1_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool)
{
  var Gamma_R0_2: bool;
  var Gamma_R8_6: bool;
  var Gamma_V0_1: bool;
  var Gamma_V0_10: bool;
  var Gamma_V0_11: bool;
  var Gamma_V0_12: bool;
  var Gamma_V0_13: bool;
  var Gamma_V0_14: bool;
  var Gamma_V0_15: bool;
  var Gamma_V0_16: bool;
  var Gamma_V0_17: bool;
  var Gamma_V0_18: bool;
  var Gamma_V0_19: bool;
  var Gamma_V0_2: bool;
  var Gamma_V0_20: bool;
  var Gamma_V0_21: bool;
  var Gamma_V0_22: bool;
  var Gamma_V0_23: bool;
  var Gamma_V0_24: bool;
  var Gamma_V0_3: bool;
  var Gamma_V0_4: bool;
  var Gamma_V0_5: bool;
  var Gamma_V0_6: bool;
  var Gamma_V0_7: bool;
  var Gamma_V0_8: bool;
  var Gamma_V0_9: bool;
  var Gamma_V1_1: bool;
  var Gamma_V1_11: bool;
  var Gamma_V1_2: bool;
  var Gamma_V1_3: bool;
  var Gamma_V1_4: bool;
  var Gamma_V1_5: bool;
  var Gamma_V1_7: bool;
  var Gamma_V1_9: bool;
  var R0_2: bv64;
  var R8_6: bv64;
  var V0_1: bv128;
  var V0_10: bv128;
  var V0_11: bv128;
  var V0_12: bv128;
  var V0_13: bv128;
  var V0_14: bv128;
  var V0_15: bv128;
  var V0_16: bv128;
  var V0_17: bv128;
  var V0_18: bv128;
  var V0_19: bv128;
  var V0_2: bv128;
  var V0_20: bv128;
  var V0_21: bv128;
  var V0_22: bv128;
  var V0_23: bv128;
  var V0_24: bv128;
  var V0_3: bv128;
  var V0_4: bv128;
  var V0_5: bv128;
  var V0_6: bv128;
  var V0_7: bv128;
  var V0_8: bv128;
  var V0_9: bv128;
  var V1_1: bv128;
  var V1_11: bv128;
  var V1_2: bv128;
  var V1_3: bv128;
  var V1_4: bv128;
  var V1_5: bv128;
  var V1_7: bv128;
  var V1_9: bv128;
  $main$__0__$b3UZxKKWTIWwuKGd8CuBtA:
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551608bv64), R0_in[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), Gamma_R0_in);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551600bv64), R1_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551600bv64), Gamma_R1_in);
    V0_1, Gamma_V0_1 := 1093186421bv128, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551596bv64), V0_1[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64), Gamma_V0_1);
    V0_2, Gamma_V0_2 := 1079401174bv128, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551592bv64), V0_2[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64), Gamma_V0_2);
    V0_3, Gamma_V0_3 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551596bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64));
    V1_1, Gamma_V1_1 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551592bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64));
    V0_4, Gamma_V0_4 := zero_extend96_32(FPMul$32(V0_3[32:0], V1_1[32:0], FPCR_in)), (Gamma_FPCR_in && (Gamma_V1_1 && Gamma_V0_3));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551588bv64), V0_4[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551588bv64), Gamma_V0_4);
    V0_5, Gamma_V0_5 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551596bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64));
    V1_2, Gamma_V1_2 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551592bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64));
    V0_6, Gamma_V0_6 := zero_extend96_32(FPDiv$32(V0_5[32:0], V1_2[32:0], FPCR_in)), (Gamma_FPCR_in && (Gamma_V1_2 && Gamma_V0_5));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551588bv64), V0_6[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551588bv64), Gamma_V0_6);
    V0_7, Gamma_V0_7 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551596bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64));
    V1_3, Gamma_V1_3 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551592bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64));
    V0_8, Gamma_V0_8 := zero_extend96_32(FPSub$32(V0_7[32:0], V1_3[32:0], FPCR_in)), (Gamma_FPCR_in && (Gamma_V1_3 && Gamma_V0_7));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551588bv64), V0_8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551588bv64), Gamma_V0_8);
    V0_9, Gamma_V0_9 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551596bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64));
    V1_4, Gamma_V1_4 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551592bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64));
    V0_10, Gamma_V0_10 := zero_extend96_32(FPAdd$32(V0_9[32:0], V1_4[32:0], FPCR_in)), (Gamma_FPCR_in && (Gamma_V1_4 && Gamma_V0_9));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551588bv64), V0_10[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551588bv64), Gamma_V0_10);
    call rely();
    V0_11, Gamma_V0_11 := zero_extend64_64(memory_load64_le(mem, 2096bv64)), (gamma_load64(Gamma_mem, 2096bv64) || L(mem, 2096bv64));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551576bv64), V0_11[64:0]), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551576bv64), Gamma_V0_11);
    V0_12, Gamma_V0_12 := zero_extend64_64(memory_load64_le(stack, bvadd64(R31_in, 18446744073709551576bv64))), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551576bv64));
    V1_5, Gamma_V1_5 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551592bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64));
    V0_13, Gamma_V0_13 := zero_extend64_64(FPMul$64(V0_12[64:0], FPConvert$64$32(V1_5[32:0], FPCR_in), FPCR_in)), (Gamma_FPCR_in && (Gamma_V1_5 && Gamma_V0_12));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551568bv64), V0_13[64:0]), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551568bv64), Gamma_V0_13);
    V0_14, Gamma_V0_14 := zero_extend64_64(memory_load64_le(stack, bvadd64(R31_in, 18446744073709551576bv64))), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551576bv64));
    V1_7, Gamma_V1_7 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551592bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64));
    V0_15, Gamma_V0_15 := zero_extend64_64(FPSub$64(V0_14[64:0], FPConvert$64$32(V1_7[32:0], FPCR_in), FPCR_in)), (Gamma_FPCR_in && (Gamma_V1_7 && Gamma_V0_14));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551568bv64), V0_15[64:0]), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551568bv64), Gamma_V0_15);
    V0_16, Gamma_V0_16 := zero_extend64_64(memory_load64_le(stack, bvadd64(R31_in, 18446744073709551576bv64))), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551576bv64));
    V1_9, Gamma_V1_9 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551592bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64));
    V0_17, Gamma_V0_17 := zero_extend64_64(FPAdd$64(V0_16[64:0], FPConvert$64$32(V1_9[32:0], FPCR_in), FPCR_in)), (Gamma_FPCR_in && (Gamma_V1_9 && Gamma_V0_16));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551568bv64), V0_17[64:0]), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551568bv64), Gamma_V0_17);
    V0_18, Gamma_V0_18 := zero_extend64_64(memory_load64_le(stack, bvadd64(R31_in, 18446744073709551576bv64))), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551576bv64));
    V1_11, Gamma_V1_11 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551592bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64));
    V0_19, Gamma_V0_19 := zero_extend64_64(FPDiv$64(V0_18[64:0], FPConvert$64$32(V1_11[32:0], FPCR_in), FPCR_in)), (Gamma_FPCR_in && (Gamma_V1_11 && Gamma_V0_18));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551568bv64), V0_19[64:0]), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551568bv64), Gamma_V0_19);
    V0_20, Gamma_V0_20 := zero_extend64_64(memory_load64_le(stack, bvadd64(R31_in, 18446744073709551568bv64))), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551568bv64));
    V0_21, Gamma_V0_21 := zero_extend96_32(FPConvert$32$64(V0_20[64:0], FPCR_in)), (Gamma_FPCR_in && Gamma_V0_20);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551596bv64), V0_21[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64), Gamma_V0_21);
    V0_22, Gamma_V0_22 := zero_extend96_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551592bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64));
    V0_23, Gamma_V0_23 := zero_extend64_64(FPConvert$64$32(V0_22[32:0], FPCR_in)), (Gamma_FPCR_in && Gamma_V0_22);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551576bv64), V0_23[64:0]), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551576bv64), Gamma_V0_23);
    V0_24, Gamma_V0_24 := zero_extend64_64(memory_load64_le(stack, bvadd64(R31_in, 18446744073709551568bv64))), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551568bv64));
    R8_6, Gamma_R8_6 := zero_extend32_32(FPToFixed$32$64(V0_24[64:0], 0, false, FPCR_in, 3)), (Gamma_FPCR_in && Gamma_V0_24);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551564bv64), R8_6[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551564bv64), Gamma_R8_6);
    R0_2, Gamma_R0_2 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551564bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551564bv64));
    goto main_basil_return;
  main_basil_return:
    R0_out, R31_out, R8_out := R0_2, R31_in, R8_6;
    Gamma_R0_out, Gamma_R31_out, Gamma_R8_out := Gamma_R0_2, Gamma_R31_in, Gamma_R8_6;
    return;
}

