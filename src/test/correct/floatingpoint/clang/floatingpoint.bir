0000081d: program
00000807: sub __cxa_finalize(__cxa_finalize_result)
0000081e: __cxa_finalize_result :: out u32 = low:32[R0]

0000054d:
00000645: R16 := 0x11000
0000064c: R17 := mem[R16 + 8, el]:u64
00000652: R16 := R16 + 8
00000657: call R17 with noreturn

00000808: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000081f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000034a:
0000034e: #3 := R31 - 0x20
00000354: mem := mem with [#3, el]:u64 <- R29
0000035a: mem := mem with [#3 + 8, el]:u64 <- R30
0000035e: R31 := #3
00000364: R29 := R31
0000036c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000371: R19 := 0x11000
00000378: R0 := pad:64[mem[R19 + 0x30]]
0000037f: when 31:0[R0] <> 0 goto %0000037d
00000809: goto %00000516

00000516:
00000519: R0 := 0x10000
00000520: R0 := mem[R0 + 0xFC8, el]:u64
00000526: when R0 = 0 goto %00000524
0000080a: goto %0000053d

0000053d:
00000540: R0 := 0x11000
00000547: R0 := mem[R0 + 0x28, el]:u64
0000054c: R30 := 0x6F0
0000054f: call @__cxa_finalize with return %00000524

00000524:
0000052c: R30 := 0x6F4
0000052e: call @deregister_tm_clones with return %00000530

00000530:
00000533: R0 := 1
0000053b: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000080b: goto %0000037d

0000037d:
00000387: R19 := mem[R31 + 0x10, el]:u64
0000038e: R29 := mem[R31, el]:u64
00000393: R30 := mem[R31 + 8, el]:u64
00000397: R31 := R31 + 0x20
0000039c: call R30 with noreturn

0000080c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000820: __libc_start_main_main :: in u64 = R0
00000821: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000822: __libc_start_main_arg3 :: in out u64 = R2
00000823: __libc_start_main_auxv :: in out u64 = R3
00000824: __libc_start_main_result :: out u32 = low:32[R0]

000002a3:
0000062f: R16 := 0x11000
00000636: R17 := mem[R16, el]:u64
0000063c: R16 := R16
00000641: call R17 with noreturn

0000080d: sub _fini(_fini_result)
00000825: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000080e: sub _init(_init_result)
00000826: _init_result :: out u32 = low:32[R0]

0000072a:
00000730: #5 := R31 - 0x10
00000736: mem := mem with [#5, el]:u64 <- R29
0000073c: mem := mem with [#5 + 8, el]:u64 <- R30
00000740: R31 := #5
00000746: R29 := R31
0000074b: R30 := 0x590
0000074d: call @call_weak_fn with return %0000074f

0000074f:
00000754: R29 := mem[R31, el]:u64
00000759: R30 := mem[R31 + 8, el]:u64
0000075d: R31 := R31 + 0x10
00000762: call R30 with noreturn

0000080f: sub _start(_start_result)
00000827: _start_result :: out u32 = low:32[R0]

00000264:
00000269: R29 := 0
0000026e: R30 := 0
00000274: R5 := R0
0000027b: R1 := mem[R31, el]:u64
00000281: R2 := R31 + 8
00000287: R6 := R31
0000028c: R0 := 0x10000
00000293: R0 := mem[R0 + 0xFD8, el]:u64
00000298: R3 := 0
0000029d: R4 := 0
000002a2: R30 := 0x630
000002a5: call @__libc_start_main with return %000002a7

000002a7:
000002aa: R30 := 0x634
000002ad: call @abort with return %00000810

00000810:
00000811: call @call_weak_fn with noreturn

00000812: sub abort()


000002ab:
00000671: R16 := 0x11000
00000678: R17 := mem[R16 + 0x18, el]:u64
0000067e: R16 := R16 + 0x18
00000683: call R17 with noreturn

00000813: sub call_weak_fn(call_weak_fn_result)
00000828: call_weak_fn_result :: out u32 = low:32[R0]

000002af:
000002b2: R0 := 0x10000
000002b9: R0 := mem[R0 + 0xFD0, el]:u64
000002bf: when R0 = 0 goto %000002bd
00000814: goto %0000058d

000002bd:
000002c5: call R30 with noreturn

0000058d:
00000590: goto @__gmon_start__

0000058e:
0000065b: R16 := 0x11000
00000662: R17 := mem[R16 + 0x10, el]:u64
00000668: R16 := R16 + 0x10
0000066d: call R17 with noreturn

00000815: sub deregister_tm_clones(deregister_tm_clones_result)
00000829: deregister_tm_clones_result :: out u32 = low:32[R0]

000002cb:
000002ce: R0 := 0x11000
000002d4: R0 := R0 + 0x30
000002d9: R1 := 0x11000
000002df: R1 := R1 + 0x30
000002e5: #1 := ~R0
000002ea: #2 := R1 + ~R0
000002f0: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002f6: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002fa: ZF := #2 + 1 = 0
000002fe: NF := 63:63[#2 + 1]
00000304: when ZF goto %00000302
00000816: goto %0000056f

0000056f:
00000572: R1 := 0x10000
00000579: R1 := mem[R1 + 0xFC0, el]:u64
0000057e: when R1 = 0 goto %00000302
00000817: goto %00000582

00000302:
0000030a: call R30 with noreturn

00000582:
00000586: R16 := R1
0000058b: call R16 with noreturn

00000818: sub frame_dummy(frame_dummy_result)
0000082a: frame_dummy_result :: out u32 = low:32[R0]

000003a2:
000003a4: call @register_tm_clones with noreturn

00000819: sub main(main_argc, main_argv, main_result)
0000082b: main_argc :: in u32 = low:32[R0]
0000082c: main_argv :: in out u64 = R1
0000082d: main_result :: out u32 = low:32[R0]

000003a6:
000003aa: R31 := R31 - 0x40
000003b1: mem := mem with [R31 + 0x3C, el]:u32 <- 0
000003b9: mem := mem with [R31 + 0x38, el]:u32 <- 31:0[R0]
000003c1: mem := mem with [R31 + 0x30, el]:u64 <- R1
000003c6: R8 := 0xB375
000003cc: R8 := pad:64[0x4128.15:0[R8]]
000003d2: V0 := pad:128[31:0[R8]]
000003da: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[V0]
000003df: R8 := 0x5AD6
000003e5: R8 := pad:64[0x4056.15:0[R8]]
000003eb: V0 := pad:128[31:0[R8]]
000003f3: mem := mem with [R31 + 0x28, el]:u32 <- 31:0[V0]
000003fa: V0 := pad:128[mem[R31 + 0x2C, el]:u32]
00000401: V1 := pad:128[mem[R31 + 0x28, el]:u32]
0000040b: mem := mem with [R31 + 0x24, el]:u32 <- 31:0[V0]
00000412: V0 := pad:128[mem[R31 + 0x2C, el]:u32]
00000419: V1 := pad:128[mem[R31 + 0x28, el]:u32]
00000423: mem := mem with [R31 + 0x24, el]:u32 <- 31:0[V0]
0000042a: V0 := pad:128[mem[R31 + 0x2C, el]:u32]
00000431: V1 := pad:128[mem[R31 + 0x28, el]:u32]
0000043b: mem := mem with [R31 + 0x24, el]:u32 <- 31:0[V0]
00000442: V0 := pad:128[mem[R31 + 0x2C, el]:u32]
00000449: V1 := pad:128[mem[R31 + 0x28, el]:u32]
00000453: mem := mem with [R31 + 0x24, el]:u32 <- 31:0[V0]
00000458: R8 := 0
0000045f: V0 := pad:128[mem[R8 + 0x830, el]:u64]
00000467: mem := mem with [R31 + 0x18, el]:u64 <- 63:0[V0]
0000046e: V0 := pad:128[mem[R31 + 0x18, el]:u64]
00000475: V1 := pad:128[mem[R31 + 0x28, el]:u32]
00000481: mem := mem with [R31 + 0x10, el]:u64 <- 63:0[V0]
00000488: V0 := pad:128[mem[R31 + 0x18, el]:u64]
0000048f: V1 := pad:128[mem[R31 + 0x28, el]:u32]
0000049b: mem := mem with [R31 + 0x10, el]:u64 <- 63:0[V0]
000004a2: V0 := pad:128[mem[R31 + 0x18, el]:u64]
000004a9: V1 := pad:128[mem[R31 + 0x28, el]:u32]
000004b5: mem := mem with [R31 + 0x10, el]:u64 <- 63:0[V0]
000004bc: V0 := pad:128[mem[R31 + 0x18, el]:u64]
000004c3: V1 := pad:128[mem[R31 + 0x28, el]:u32]
000004cf: mem := mem with [R31 + 0x10, el]:u64 <- 63:0[V0]
000004d6: V0 := pad:128[mem[R31 + 0x10, el]:u64]
000004e0: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[V0]
000004e7: V0 := pad:128[mem[R31 + 0x28, el]:u32]
000004f1: mem := mem with [R31 + 0x18, el]:u64 <- 63:0[V0]
000004f8: V0 := pad:128[mem[R31 + 0x10, el]:u64]
00000502: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000509: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000050f: R31 := R31 + 0x40
00000514: call R30 with noreturn

0000081a: sub register_tm_clones(register_tm_clones_result)
0000082e: register_tm_clones_result :: out u32 = low:32[R0]

0000030c:
0000030f: R0 := 0x11000
00000315: R0 := R0 + 0x30
0000031a: R1 := 0x11000
00000320: R1 := R1 + 0x30
00000327: R1 := R1 + ~R0 + 1
0000032d: R2 := 0.63:63[R1]
00000334: R1 := R2 + (R1 ~>> 3)
0000033a: R1 := extend:64[63:1[R1]]
00000340: when R1 = 0 goto %0000033e
0000081b: goto %00000551

00000551:
00000554: R2 := 0x10000
0000055b: R2 := mem[R2 + 0xFE0, el]:u64
00000560: when R2 = 0 goto %0000033e
0000081c: goto %00000564

0000033e:
00000346: call R30 with noreturn

00000564:
00000568: R16 := R2
0000056d: call R16 with noreturn
