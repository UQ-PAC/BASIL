00000e58: program
00000e3f: sub __cxa_finalize(__cxa_finalize_result)
00000e59: __cxa_finalize_result :: out u32 = low:32[R0]

00000bbf:
00000cb7: R16 := 0x11000
00000cbe: R17 := mem[R16 + 8, el]:u64
00000cc4: R16 := R16 + 8
00000cc9: call R17 with noreturn

00000e40: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000e5a: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000a07:
00000a0b: #3 := R31 - 0x20
00000a11: mem := mem with [#3, el]:u64 <- R29
00000a17: mem := mem with [#3 + 8, el]:u64 <- R30
00000a1b: R31 := #3
00000a21: R29 := R31
00000a29: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000a2e: R19 := 0x11000
00000a35: R0 := pad:64[mem[R19 + 0x30]]
00000a3c: when 31:0[R0] <> 0 goto %00000a3a
00000e41: goto %00000b88

00000b88:
00000b8b: R0 := 0x10000
00000b92: R0 := mem[R0 + 0xFC8, el]:u64
00000b98: when R0 = 0 goto %00000b96
00000e42: goto %00000baf

00000baf:
00000bb2: R0 := 0x11000
00000bb9: R0 := mem[R0 + 0x28, el]:u64
00000bbe: R30 := 0x6F0
00000bc1: call @__cxa_finalize with return %00000b96

00000b96:
00000b9e: R30 := 0x6F4
00000ba0: call @deregister_tm_clones with return %00000ba2

00000ba2:
00000ba5: R0 := 1
00000bad: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000e43: goto %00000a3a

00000a3a:
00000a44: R19 := mem[R31 + 0x10, el]:u64
00000a4b: R29 := mem[R31, el]:u64
00000a50: R30 := mem[R31 + 8, el]:u64
00000a54: R31 := R31 + 0x20
00000a59: call R30 with noreturn

00000e44: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000e5b: __libc_start_main_main :: in u64 = R0
00000e5c: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000e5d: __libc_start_main_arg3 :: in out u64 = R2
00000e5e: __libc_start_main_auxv :: in out u64 = R3
00000e5f: __libc_start_main_result :: out u32 = low:32[R0]

00000960:
00000ca1: R16 := 0x11000
00000ca8: R17 := mem[R16, el]:u64
00000cae: R16 := R16
00000cb3: call R17 with noreturn

00000e45: sub _fini(_fini_result)
00000e60: _fini_result :: out u32 = low:32[R0]

00000750:
00000756: #0 := R31 - 0x10
0000075c: mem := mem with [#0, el]:u64 <- R29
00000762: mem := mem with [#0 + 8, el]:u64 <- R30
00000766: R31 := #0
0000076c: R29 := R31
00000773: R29 := mem[R31, el]:u64
00000778: R30 := mem[R31 + 8, el]:u64
0000077c: R31 := R31 + 0x10
00000781: call R30 with noreturn

00000e46: sub _init(_init_result)
00000e61: _init_result :: out u32 = low:32[R0]

00000d7f:
00000d85: #8 := R31 - 0x10
00000d8b: mem := mem with [#8, el]:u64 <- R29
00000d91: mem := mem with [#8 + 8, el]:u64 <- R30
00000d95: R31 := #8
00000d9b: R29 := R31
00000da0: R30 := 0x590
00000da2: call @call_weak_fn with return %00000da4

00000da4:
00000da9: R29 := mem[R31, el]:u64
00000dae: R30 := mem[R31 + 8, el]:u64
00000db2: R31 := R31 + 0x10
00000db7: call R30 with noreturn

00000e47: sub _start(_start_result)
00000e62: _start_result :: out u32 = low:32[R0]

00000921:
00000926: R29 := 0
0000092b: R30 := 0
00000931: R5 := R0
00000938: R1 := mem[R31, el]:u64
0000093e: R2 := R31 + 8
00000944: R6 := R31
00000949: R0 := 0x10000
00000950: R0 := mem[R0 + 0xFD8, el]:u64
00000955: R3 := 0
0000095a: R4 := 0
0000095f: R30 := 0x630
00000962: call @__libc_start_main with return %00000964

00000964:
00000967: R30 := 0x634
0000096a: call @abort with return %00000e48

00000e48:
00000e49: call @call_weak_fn with noreturn

00000e4a: sub abort()


00000968:
00000ce3: R16 := 0x11000
00000cea: R17 := mem[R16 + 0x18, el]:u64
00000cf0: R16 := R16 + 0x18
00000cf5: call R17 with noreturn

00000e4b: sub call_weak_fn(call_weak_fn_result)
00000e63: call_weak_fn_result :: out u32 = low:32[R0]

0000096c:
0000096f: R0 := 0x10000
00000976: R0 := mem[R0 + 0xFD0, el]:u64
0000097c: when R0 = 0 goto %0000097a
00000e4c: goto %00000bff

0000097a:
00000982: call R30 with noreturn

00000bff:
00000c02: goto @__gmon_start__

00000c00:
00000ccd: R16 := 0x11000
00000cd4: R17 := mem[R16 + 0x10, el]:u64
00000cda: R16 := R16 + 0x10
00000cdf: call R17 with noreturn

00000e4d: sub deregister_tm_clones(deregister_tm_clones_result)
00000e64: deregister_tm_clones_result :: out u32 = low:32[R0]

00000988:
0000098b: R0 := 0x11000
00000991: R0 := R0 + 0x30
00000996: R1 := 0x11000
0000099c: R1 := R1 + 0x30
000009a2: #1 := ~R0
000009a7: #2 := R1 + ~R0
000009ad: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000009b3: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000009b7: ZF := #2 + 1 = 0
000009bb: NF := 63:63[#2 + 1]
000009c1: when ZF goto %000009bf
00000e4e: goto %00000be1

00000be1:
00000be4: R1 := 0x10000
00000beb: R1 := mem[R1 + 0xFC0, el]:u64
00000bf0: when R1 = 0 goto %000009bf
00000e4f: goto %00000bf4

000009bf:
000009c7: call R30 with noreturn

00000bf4:
00000bf8: R16 := R1
00000bfd: call R16 with noreturn

00000e50: sub frame_dummy(frame_dummy_result)
00000e65: frame_dummy_result :: out u32 = low:32[R0]

00000a5f:
00000a61: call @register_tm_clones with noreturn

00000e51: sub main(main_argc, main_argv, main_result)
00000e66: main_argc :: in u32 = low:32[R0]
00000e67: main_argv :: in out u64 = R1
00000e68: main_result :: out u32 = low:32[R0]

00000a63:
00000a67: R31 := R31 - 0x10
00000a6e: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000a73: R8 := 2
00000a7b: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000a82: mem := mem with [R31 + 4, el]:u32 <- 0
00000a89: R8 := pad:64[mem[R31 + 8, el]:u32]
00000a8f: #4 := 31:0[R8] - 1
00000a94: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000a99: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000a9d: ZF := #4 + 1 = 0
00000aa1: NF := 31:31[#4 + 1]
00000aa5: R8 := pad:64[#4 + 1]
00000ab1: when ZF goto %00000aaa
00000ab2: goto %00000aad

00000aad:
00000aae: R8 := 1
00000ab4: goto %00000ab0

00000aaa:
00000aab: R8 := 0
00000ab3: goto %00000ab0

00000ab0:
00000aba: when 0:0[R8] goto %00000ab8
00000e52: goto %00000b73

00000ab8:
00000ac2: R8 := pad:64[mem[R31 + 8, el]:u32]
00000ac8: #5 := 31:0[R8] - 2
00000acd: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] - 1
00000ad2: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFF
00000ad6: ZF := #5 + 1 = 0
00000ada: NF := 31:31[#5 + 1]
00000ade: R8 := pad:64[#5 + 1]
00000aea: when ZF goto %00000ae3
00000aeb: goto %00000ae6

00000ae6:
00000ae7: R8 := 1
00000aed: goto %00000ae9

00000ae3:
00000ae4: R8 := 0
00000aec: goto %00000ae9

00000ae9:
00000af3: when 0:0[R8] goto %00000af1
00000e53: goto %00000b5e

00000af1:
00000afb: R8 := pad:64[mem[R31 + 8, el]:u32]
00000b01: #6 := 31:0[R8] - 3
00000b06: VF := extend:33[#6 + 1] <> extend:33[31:0[R8]] - 2
00000b0b: CF := pad:33[#6 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFE
00000b0f: ZF := #6 + 1 = 0
00000b13: NF := 31:31[#6 + 1]
00000b17: R8 := pad:64[#6 + 1]
00000b23: when ZF goto %00000b1c
00000b24: goto %00000b1f

00000b1f:
00000b20: R8 := 1
00000b26: goto %00000b22

00000b1c:
00000b1d: R8 := 0
00000b25: goto %00000b22

00000b22:
00000b2c: when 0:0[R8] goto %00000b2a
00000e54: goto %00000b49

00000b49:
00000b4c: goto %00000b4a

00000b4a:
00000b50: R8 := 7
00000b58: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000b5c: goto %00000b2a

00000b2a:
00000b32: goto %00000b30

00000b5e:
00000b61: goto %00000b5f

00000b5f:
00000b65: R8 := 5
00000b6d: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000b71: goto %00000b30

00000b30:
00000b36: goto %00000b34

00000b73:
00000b76: goto %00000b74

00000b74:
00000b7a: R8 := 3
00000b82: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
00000b86: goto %00000b34

00000b34:
00000b3c: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000b42: R31 := R31 + 0x10
00000b47: call R30 with noreturn

00000e55: sub register_tm_clones(register_tm_clones_result)
00000e69: register_tm_clones_result :: out u32 = low:32[R0]

000009c9:
000009cc: R0 := 0x11000
000009d2: R0 := R0 + 0x30
000009d7: R1 := 0x11000
000009dd: R1 := R1 + 0x30
000009e4: R1 := R1 + ~R0 + 1
000009ea: R2 := 0.63:63[R1]
000009f1: R1 := R2 + (R1 ~>> 3)
000009f7: R1 := extend:64[63:1[R1]]
000009fd: when R1 = 0 goto %000009fb
00000e56: goto %00000bc3

00000bc3:
00000bc6: R2 := 0x10000
00000bcd: R2 := mem[R2 + 0xFE0, el]:u64
00000bd2: when R2 = 0 goto %000009fb
00000e57: goto %00000bd6

000009fb:
00000a03: call R30 with noreturn

00000bd6:
00000bda: R16 := R2
00000bdf: call R16 with noreturn
