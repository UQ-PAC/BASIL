var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1968bv64);
function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1968bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1969bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1970bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1971bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R31, Gamma_R8, Gamma_VF, Gamma_ZF, Gamma_stack, NF, R0, R31, R8, VF, ZF, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load8_le(mem, 1968bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1969bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1970bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1971bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 1968bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1969bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1970bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1971bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main()
{
  var Cse0__5$10$1: bv32;
  var Cse0__5$11$1: bv32;
  var Cse0__5$8$6: bv32;
  var Gamma_Cse0__5$10$1: bool;
  var Gamma_Cse0__5$11$1: bool;
  var Gamma_Cse0__5$8$6: bool;
  $main$__0__$IrGBcX_rSrqu9O4gDLNs3A:
    assume {:captureState "$main$__0__$IrGBcX_rSrqu9O4gDLNs3A"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), true);
    assume {:captureState "1816$0"} true;
    R8, Gamma_R8 := 2bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 8bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R8);
    assume {:captureState "1824$0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 4bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 4bv64), true);
    assume {:captureState "1828$0"} true;
    R8, Gamma_R8 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 8bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 8bv64));
    Cse0__5$8$6, Gamma_Cse0__5$8$6 := bvadd32(R8[32:0], 0bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp32(Cse0__5$8$6, Cse0__5$8$6)), Gamma_Cse0__5$8$6;
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$8$6), bvadd33(zero_extend1_32(R8[32:0]), 4294967296bv33))), (Gamma_R8 && Gamma_Cse0__5$8$6);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$8$6, 0bv32), Gamma_Cse0__5$8$6;
    NF, Gamma_NF := Cse0__5$8$6[32:31], Gamma_Cse0__5$8$6;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5$8$6), Gamma_Cse0__5$8$6;
    assert Gamma_ZF;
    goto $main$__0__$IrGBcX_rSrqu9O4gDLNs3A$__0, $main$__0__$IrGBcX_rSrqu9O4gDLNs3A$__1;
  $main$__1__$Uf9vvOAQTWKN0CkCar_aNg:
    assume {:captureState "$main$__1__$Uf9vvOAQTWKN0CkCar_aNg"} true;
    goto $main$__2__$2zYMwaWjR2CFcCE5qsBnDg;
  $main$__2__$2zYMwaWjR2CFcCE5qsBnDg:
    assume {:captureState "$main$__2__$2zYMwaWjR2CFcCE5qsBnDg"} true;
    R8, Gamma_R8 := 3bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 4bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 4bv64), Gamma_R8);
    assume {:captureState "1856$0"} true;
    goto $main$__11__$p7zH1DITQVOitceiXJCsmQ;
  $main$__3__$2Rc30R6uT9qoFwMECXfo8w:
    assume {:captureState "$main$__3__$2Rc30R6uT9qoFwMECXfo8w"} true;
    R8, Gamma_R8 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 8bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 8bv64));
    Cse0__5$11$1, Gamma_Cse0__5$11$1 := bvadd32(R8[32:0], 4294967295bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5$11$1), bvadd33(sign_extend1_32(R8[32:0]), 8589934591bv33))), (Gamma_R8 && Gamma_Cse0__5$11$1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$11$1), bvadd33(zero_extend1_32(R8[32:0]), 4294967295bv33))), (Gamma_R8 && Gamma_Cse0__5$11$1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$11$1, 0bv32), Gamma_Cse0__5$11$1;
    NF, Gamma_NF := Cse0__5$11$1[32:31], Gamma_Cse0__5$11$1;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5$11$1), Gamma_Cse0__5$11$1;
    assert Gamma_ZF;
    goto $main$__3__$2Rc30R6uT9qoFwMECXfo8w$__0, $main$__3__$2Rc30R6uT9qoFwMECXfo8w$__1;
  $main$__4__$jv~bq1DRSXOoajRSR5k4QQ:
    assume {:captureState "$main$__4__$jv~bq1DRSXOoajRSR5k4QQ"} true;
    goto $main$__5__$oK1nnrErSJC2bd7An54Mig;
  $main$__5__$oK1nnrErSJC2bd7An54Mig:
    assume {:captureState "$main$__5__$oK1nnrErSJC2bd7An54Mig"} true;
    R8, Gamma_R8 := 5bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 4bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 4bv64), Gamma_R8);
    assume {:captureState "1888$0"} true;
    goto $main$__10__$aEgW7lUSS0SclIvtTG3P9Q;
  $main$__6__$mX4HG~UJRJWY4YtuXkBzxw:
    assume {:captureState "$main$__6__$mX4HG~UJRJWY4YtuXkBzxw"} true;
    R8, Gamma_R8 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 8bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 8bv64));
    Cse0__5$10$1, Gamma_Cse0__5$10$1 := bvadd32(R8[32:0], 4294967294bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5$10$1), bvadd33(sign_extend1_32(R8[32:0]), 8589934590bv33))), (Gamma_R8 && Gamma_Cse0__5$10$1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$10$1), bvadd33(zero_extend1_32(R8[32:0]), 4294967294bv33))), (Gamma_R8 && Gamma_Cse0__5$10$1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$10$1, 0bv32), Gamma_Cse0__5$10$1;
    NF, Gamma_NF := Cse0__5$10$1[32:31], Gamma_Cse0__5$10$1;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5$10$1), Gamma_Cse0__5$10$1;
    assert Gamma_ZF;
    goto $main$__6__$mX4HG~UJRJWY4YtuXkBzxw$__0, $main$__6__$mX4HG~UJRJWY4YtuXkBzxw$__1;
  $main$__7__$q65GWyOmTgiK~1UZvihckQ:
    assume {:captureState "$main$__7__$q65GWyOmTgiK~1UZvihckQ"} true;
    goto $main$__8__$jSUhGh8MQaCTk8rtcNX6oQ;
  $main$__8__$jSUhGh8MQaCTk8rtcNX6oQ:
    assume {:captureState "$main$__8__$jSUhGh8MQaCTk8rtcNX6oQ"} true;
    R8, Gamma_R8 := 7bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 4bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 4bv64), Gamma_R8);
    assume {:captureState "1920$0"} true;
    goto $main$__9__$sBzbLRYFS02UheZIesSPZg;
  $main$__9__$sBzbLRYFS02UheZIesSPZg:
    assume {:captureState "$main$__9__$sBzbLRYFS02UheZIesSPZg"} true;
    goto $main$__10__$aEgW7lUSS0SclIvtTG3P9Q;
  $main$__10__$aEgW7lUSS0SclIvtTG3P9Q:
    assume {:captureState "$main$__10__$aEgW7lUSS0SclIvtTG3P9Q"} true;
    goto $main$__11__$p7zH1DITQVOitceiXJCsmQ;
  $main$__11__$p7zH1DITQVOitceiXJCsmQ:
    assume {:captureState "$main$__11__$p7zH1DITQVOitceiXJCsmQ"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 12bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_basil_return;
  $main$__0__$IrGBcX_rSrqu9O4gDLNs3A_goto_$main$__3__$2Rc30R6uT9qoFwMECXfo8w:
    assume {:captureState "$main$__0__$IrGBcX_rSrqu9O4gDLNs3A_goto_$main$__3__$2Rc30R6uT9qoFwMECXfo8w"} true;
    assume (R8[1:0] == 1bv1);
    goto $main$__3__$2Rc30R6uT9qoFwMECXfo8w;
  $main$__0__$IrGBcX_rSrqu9O4gDLNs3A_goto_$main$__1__$Uf9vvOAQTWKN0CkCar_aNg:
    assume {:captureState "$main$__0__$IrGBcX_rSrqu9O4gDLNs3A_goto_$main$__1__$Uf9vvOAQTWKN0CkCar_aNg"} true;
    assume (!(R8[1:0] == 1bv1));
    goto $main$__1__$Uf9vvOAQTWKN0CkCar_aNg;
  $main$__0__$IrGBcX_rSrqu9O4gDLNs3A$__0:
    assume {:captureState "$main$__0__$IrGBcX_rSrqu9O4gDLNs3A$__0"} true;
    assume (ZF == 1bv1);
    R8, Gamma_R8 := 0bv64, true;
    assert Gamma_R8;
    goto $main$__0__$IrGBcX_rSrqu9O4gDLNs3A_goto_$main$__3__$2Rc30R6uT9qoFwMECXfo8w, $main$__0__$IrGBcX_rSrqu9O4gDLNs3A_goto_$main$__1__$Uf9vvOAQTWKN0CkCar_aNg;
  $main$__0__$IrGBcX_rSrqu9O4gDLNs3A$__1:
    assume {:captureState "$main$__0__$IrGBcX_rSrqu9O4gDLNs3A$__1"} true;
    assume (!(ZF == 1bv1));
    R8, Gamma_R8 := 1bv64, true;
    assert Gamma_R8;
    goto $main$__0__$IrGBcX_rSrqu9O4gDLNs3A_goto_$main$__3__$2Rc30R6uT9qoFwMECXfo8w, $main$__0__$IrGBcX_rSrqu9O4gDLNs3A_goto_$main$__1__$Uf9vvOAQTWKN0CkCar_aNg;
  $main$__6__$mX4HG~UJRJWY4YtuXkBzxw_goto_$main$__9__$sBzbLRYFS02UheZIesSPZg:
    assume {:captureState "$main$__6__$mX4HG~UJRJWY4YtuXkBzxw_goto_$main$__9__$sBzbLRYFS02UheZIesSPZg"} true;
    assume (R8[1:0] == 1bv1);
    goto $main$__9__$sBzbLRYFS02UheZIesSPZg;
  $main$__6__$mX4HG~UJRJWY4YtuXkBzxw_goto_$main$__7__$q65GWyOmTgiK~1UZvihckQ:
    assume {:captureState "$main$__6__$mX4HG~UJRJWY4YtuXkBzxw_goto_$main$__7__$q65GWyOmTgiK~1UZvihckQ"} true;
    assume (!(R8[1:0] == 1bv1));
    goto $main$__7__$q65GWyOmTgiK~1UZvihckQ;
  $main$__6__$mX4HG~UJRJWY4YtuXkBzxw$__0:
    assume {:captureState "$main$__6__$mX4HG~UJRJWY4YtuXkBzxw$__0"} true;
    assume (ZF == 1bv1);
    R8, Gamma_R8 := 0bv64, true;
    assert Gamma_R8;
    goto $main$__6__$mX4HG~UJRJWY4YtuXkBzxw_goto_$main$__9__$sBzbLRYFS02UheZIesSPZg, $main$__6__$mX4HG~UJRJWY4YtuXkBzxw_goto_$main$__7__$q65GWyOmTgiK~1UZvihckQ;
  $main$__6__$mX4HG~UJRJWY4YtuXkBzxw$__1:
    assume {:captureState "$main$__6__$mX4HG~UJRJWY4YtuXkBzxw$__1"} true;
    assume (!(ZF == 1bv1));
    R8, Gamma_R8 := 1bv64, true;
    assert Gamma_R8;
    goto $main$__6__$mX4HG~UJRJWY4YtuXkBzxw_goto_$main$__9__$sBzbLRYFS02UheZIesSPZg, $main$__6__$mX4HG~UJRJWY4YtuXkBzxw_goto_$main$__7__$q65GWyOmTgiK~1UZvihckQ;
  $main$__3__$2Rc30R6uT9qoFwMECXfo8w_goto_$main$__6__$mX4HG~UJRJWY4YtuXkBzxw:
    assume {:captureState "$main$__3__$2Rc30R6uT9qoFwMECXfo8w_goto_$main$__6__$mX4HG~UJRJWY4YtuXkBzxw"} true;
    assume (R8[1:0] == 1bv1);
    goto $main$__6__$mX4HG~UJRJWY4YtuXkBzxw;
  $main$__3__$2Rc30R6uT9qoFwMECXfo8w_goto_$main$__4__$jv~bq1DRSXOoajRSR5k4QQ:
    assume {:captureState "$main$__3__$2Rc30R6uT9qoFwMECXfo8w_goto_$main$__4__$jv~bq1DRSXOoajRSR5k4QQ"} true;
    assume (!(R8[1:0] == 1bv1));
    goto $main$__4__$jv~bq1DRSXOoajRSR5k4QQ;
  $main$__3__$2Rc30R6uT9qoFwMECXfo8w$__0:
    assume {:captureState "$main$__3__$2Rc30R6uT9qoFwMECXfo8w$__0"} true;
    assume (ZF == 1bv1);
    R8, Gamma_R8 := 0bv64, true;
    assert Gamma_R8;
    goto $main$__3__$2Rc30R6uT9qoFwMECXfo8w_goto_$main$__6__$mX4HG~UJRJWY4YtuXkBzxw, $main$__3__$2Rc30R6uT9qoFwMECXfo8w_goto_$main$__4__$jv~bq1DRSXOoajRSR5k4QQ;
  $main$__3__$2Rc30R6uT9qoFwMECXfo8w$__1:
    assume {:captureState "$main$__3__$2Rc30R6uT9qoFwMECXfo8w$__1"} true;
    assume (!(ZF == 1bv1));
    R8, Gamma_R8 := 1bv64, true;
    assert Gamma_R8;
    goto $main$__3__$2Rc30R6uT9qoFwMECXfo8w_goto_$main$__6__$mX4HG~UJRJWY4YtuXkBzxw, $main$__3__$2Rc30R6uT9qoFwMECXfo8w_goto_$main$__4__$jv~bq1DRSXOoajRSR5k4QQ;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

