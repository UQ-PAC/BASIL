000006b2: program
00000678: sub __cxa_finalize(__cxa_finalize_result)
000006b3: __cxa_finalize_result :: out u32 = low:32[R0]

0000040c:
00000504: R16 := 0x10000
0000050b: R17 := mem[R16 + 0xFB8, el]:u64
00000511: R16 := R16 + 0xFB8
00000516: call R17 with noreturn

00000679: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006b4: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002ae:
000002b2: #3 := R31 - 0x20
000002b8: mem := mem with [#3, el]:u64 <- R29
000002be: mem := mem with [#3 + 8, el]:u64 <- R30
000002c2: R31 := #3
000002c8: R29 := R31
000002d0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002d5: R19 := 0x11000
000002dc: R0 := pad:64[mem[R19 + 0x10]]
000002e3: when 31:0[R0] <> 0 goto %000002e1
000006a4: goto %000003d5

000003d5:
000003d8: R0 := 0x10000
000003df: R0 := mem[R0 + 0xFE0, el]:u64
000003e5: when R0 = 0 goto %000003e3
000006a5: goto %000003fc

000003fc:
000003ff: R0 := 0x11000
00000406: R0 := mem[R0 + 8, el]:u64
0000040b: R30 := 0x6F0
0000040e: call @__cxa_finalize with return %000003e3

000003e3:
000003eb: R30 := 0x6F4
000003ed: call @deregister_tm_clones with return %000003ef

000003ef:
000003f2: R0 := 1
000003fa: mem := mem with [R19 + 0x10] <- 7:0[R0]
000006a6: goto %000002e1

000002e1:
000002eb: R19 := mem[R31 + 0x10, el]:u64
000002f2: R29 := mem[R31, el]:u64
000002f7: R30 := mem[R31 + 8, el]:u64
000002fb: R31 := R31 + 0x20
00000300: call R30 with noreturn

0000067d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006b5: __libc_start_main_main :: in u64 = R0
000006b6: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006b7: __libc_start_main_arg3 :: in out u64 = R2
000006b8: __libc_start_main_auxv :: in out u64 = R3
000006b9: __libc_start_main_result :: out u32 = low:32[R0]

00000207:
000004ee: R16 := 0x10000
000004f5: R17 := mem[R16 + 0xFB0, el]:u64
000004fb: R16 := R16 + 0xFB0
00000500: call R17 with noreturn

0000067e: sub _fini(_fini_result)
000006ba: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000067f: sub _init(_init_result)
000006bb: _init_result :: out u32 = low:32[R0]

000005c2:
000005c8: #8 := R31 - 0x10
000005ce: mem := mem with [#8, el]:u64 <- R29
000005d4: mem := mem with [#8 + 8, el]:u64 <- R30
000005d8: R31 := #8
000005de: R29 := R31
000005e3: R30 := 0x590
000005e5: call @call_weak_fn with return %000005e7

000005e7:
000005ec: R29 := mem[R31, el]:u64
000005f1: R30 := mem[R31 + 8, el]:u64
000005f5: R31 := R31 + 0x10
000005fa: call R30 with noreturn

00000680: sub _start(_start_result)
000006bc: _start_result :: out u32 = low:32[R0]

000001c8:
000001cd: R29 := 0
000001d2: R30 := 0
000001d8: R5 := R0
000001df: R1 := mem[R31, el]:u64
000001e5: R2 := R31 + 8
000001eb: R6 := R31
000001f0: R0 := 0x10000
000001f7: R0 := mem[R0 + 0xFF0, el]:u64
000001fc: R3 := 0
00000201: R4 := 0
00000206: R30 := 0x630
00000209: call @__libc_start_main with return %0000020b

0000020b:
0000020e: R30 := 0x634
00000211: call @abort with return %000006a7

000006a7:
000006a8: call @call_weak_fn with noreturn

00000683: sub abort()


0000020f:
00000530: R16 := 0x10000
00000537: R17 := mem[R16 + 0xFC8, el]:u64
0000053d: R16 := R16 + 0xFC8
00000542: call R17 with noreturn

00000684: sub call_weak_fn(call_weak_fn_result)
000006bd: call_weak_fn_result :: out u32 = low:32[R0]

00000213:
00000216: R0 := 0x10000
0000021d: R0 := mem[R0 + 0xFE8, el]:u64
00000223: when R0 = 0 goto %00000221
000006a9: goto %0000044c

00000221:
00000229: call R30 with noreturn

0000044c:
0000044f: goto @__gmon_start__

0000044d:
0000051a: R16 := 0x10000
00000521: R17 := mem[R16 + 0xFC0, el]:u64
00000527: R16 := R16 + 0xFC0
0000052c: call R17 with noreturn

00000686: sub deregister_tm_clones(deregister_tm_clones_result)
000006be: deregister_tm_clones_result :: out u32 = low:32[R0]

0000022f:
00000232: R0 := 0x11000
00000238: R0 := R0 + 0x10
0000023d: R1 := 0x11000
00000243: R1 := R1 + 0x10
00000249: #1 := ~R0
0000024e: #2 := R1 + ~R0
00000254: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000025a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000025e: ZF := #2 + 1 = 0
00000262: NF := 63:63[#2 + 1]
00000268: when ZF goto %00000266
000006aa: goto %0000042e

0000042e:
00000431: R1 := 0x10000
00000438: R1 := mem[R1 + 0xFD8, el]:u64
0000043d: when R1 = 0 goto %00000266
000006ab: goto %00000441

00000266:
0000026e: call R30 with noreturn

00000441:
00000445: R16 := R1
0000044a: call R16 with noreturn

00000689: sub frame_dummy(frame_dummy_result)
000006bf: frame_dummy_result :: out u32 = low:32[R0]

00000306:
00000308: call @register_tm_clones with noreturn

0000068a: sub main(main_argc, main_argv, main_result)
000006c0: main_argc :: in u32 = low:32[R0]
000006c1: main_argv :: in out u64 = R1
000006c2: main_result :: out u32 = low:32[R0]

0000030a:
0000030e: R31 := R31 - 0x10
00000313: R0 := 2
0000031b: mem := mem with [R31 + 8, el]:u32 <- 31:0[R0]
00000322: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000329: R0 := pad:64[mem[R31 + 8, el]:u32]
0000032f: #4 := 31:0[R0] - 1
00000334: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
00000339: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000033d: ZF := #4 + 1 = 0
00000341: NF := 31:31[#4 + 1]
00000347: when ZF <> 1 goto %00000345
000006ac: goto %000003c4

00000345:
0000034f: R0 := pad:64[mem[R31 + 8, el]:u32]
00000355: #5 := 31:0[R0] - 2
0000035a: VF := extend:33[#5 + 1] <> extend:33[31:0[R0]] - 1
0000035f: CF := pad:33[#5 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFF
00000363: ZF := #5 + 1 = 0
00000367: NF := 31:31[#5 + 1]
0000036d: when ZF <> 1 goto %0000036b
000006ad: goto %000003b3

0000036b:
00000375: R0 := pad:64[mem[R31 + 8, el]:u32]
0000037b: #6 := 31:0[R0] - 3
00000380: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] - 2
00000385: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFE
00000389: ZF := #6 + 1 = 0
0000038d: NF := 31:31[#6 + 1]
00000393: when ZF <> 1 goto %00000391
000006ae: goto %000003a6

000003a6:
000003a9: R0 := 7
000003b1: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000006af: goto %00000391

000003b3:
000003b6: R0 := 5
000003be: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000003c2: goto %00000391

000003c4:
000003c7: R0 := 3
000003cf: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000003d3: goto %00000391

00000391:
00000399: R0 := 0
0000039f: R31 := R31 + 0x10
000003a4: call R30 with noreturn

0000068f: sub register_tm_clones(register_tm_clones_result)
000006c3: register_tm_clones_result :: out u32 = low:32[R0]

00000270:
00000273: R0 := 0x11000
00000279: R0 := R0 + 0x10
0000027e: R1 := 0x11000
00000284: R1 := R1 + 0x10
0000028b: R1 := R1 + ~R0 + 1
00000291: R2 := 0.63:63[R1]
00000298: R1 := R2 + (R1 ~>> 3)
0000029e: R1 := extend:64[63:1[R1]]
000002a4: when R1 = 0 goto %000002a2
000006b0: goto %00000410

00000410:
00000413: R2 := 0x10000
0000041a: R2 := mem[R2 + 0xFF8, el]:u64
0000041f: when R2 = 0 goto %000002a2
000006b1: goto %00000423

000002a2:
000002aa: call R30 with noreturn

00000423:
00000427: R16 := R2
0000042c: call R16 with noreturn
