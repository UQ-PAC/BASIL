000008bb: program
00000874: sub __cxa_finalize(__cxa_finalize_result)
000008bc: __cxa_finalize_result :: out u32 = low:32[R0]

000004c3:
00000667: R16 := 0x20000
0000066f: R17 := mem[R16 + 0x18, el]:u64
00000676: R16 := R16 + 0x18
0000067b: call R17 with noreturn

00000875: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008bd: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002f6:
000002fd: #34 := R31 - 0x20
00000302: mem := mem with [#34, el]:u64 <- R29
00000307: mem := mem with [#34 + 8, el]:u64 <- R30
0000030b: R31 := #34
00000312: R29 := R31
0000031a: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000320: R19 := 0x20000
00000329: R0 := pad:32[mem[R19 + 0x70]]
00000335: #36 := ~~0:0[R0]
0000032f: when #36 goto %0000032d
000008b1: goto %00000481

00000481:
00000485: R0 := 0x1F000
0000048d: R0 := mem[R0 + 0xFC8, el]:u64
00000499: #85 := R0 = 0
00000493: when #85 goto %00000491
000008b2: goto %000004b1

000004b1:
000004b5: R0 := 0x20000
000004bd: R0 := mem[R0 + 0x58, el]:u64
000004c2: R30 := 0x8F0
000004c5: call @__cxa_finalize with return %00000491

00000491:
0000049e: R30 := 0x8F4
000004a0: call @deregister_tm_clones with return %000004a2

000004a2:
000004a7: R0 := 1
000004af: mem := mem with [R19 + 0x70] <- low:8[31:0[R0]]
000008b3: goto %0000032d

0000032d:
0000033d: R19 := mem[R31 + 0x10, el]:u64
00000347: R29 := mem[R31, el]:u64
0000034b: R30 := mem[R31 + 8, el]:u64
0000034e: R31 := R31 + 0x20
00000353: call R30 with noreturn

00000879: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008be: __libc_start_main_main :: in u64 = R0
000008bf: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008c0: __libc_start_main_arg3 :: in out u64 = R2
000008c1: __libc_start_main_auxv :: in out u64 = R3
000008c2: __libc_start_main_result :: out u32 = low:32[R0]

0000023a:
0000064e: R16 := 0x20000
00000656: R17 := mem[R16 + 0x10, el]:u64
0000065d: R16 := R16 + 0x10
00000662: call R17 with noreturn

0000087a: sub _fini(_fini_result)
000008c3: _fini_result :: out u32 = low:32[R0]

00000020:
00000029: #3 := R31 - 0x10
0000002e: mem := mem with [#3, el]:u64 <- R29
00000033: mem := mem with [#3 + 8, el]:u64 <- R30
00000037: R31 := #3
0000003e: R29 := R31
00000048: R29 := mem[R31, el]:u64
0000004c: R30 := mem[R31 + 8, el]:u64
0000004f: R31 := R31 + 0x10
00000054: call R30 with noreturn

0000087b: sub _init(_init_result)
000008c4: _init_result :: out u32 = low:32[R0]

0000079a:
000007a3: #116 := R31 - 0x10
000007a8: mem := mem with [#116, el]:u64 <- R29
000007ad: mem := mem with [#116 + 8, el]:u64 <- R30
000007b1: R31 := #116
000007b8: R29 := R31
000007bd: R30 := 0x738
000007bf: call @call_weak_fn with return %000007c1

000007c1:
000007c9: R29 := mem[R31, el]:u64
000007cd: R30 := mem[R31 + 8, el]:u64
000007d0: R31 := R31 + 0x10
000007d5: call R30 with noreturn

0000087c: sub _start(_start_result)
000008c5: _start_result :: out u32 = low:32[R0]

000001f0:
000001f6: R29 := 0
000001fc: R30 := 0
00000204: R5 := R0
0000020c: R1 := mem[R31, el]:u64
00000213: R2 := R31 + 8
0000021a: R6 := R31
00000220: R0 := 0x1F000
00000228: R0 := mem[R0 + 0xFD8, el]:u64
0000022e: R3 := 0
00000234: R4 := 0
00000239: R30 := 0x830
0000023c: call @__libc_start_main with return %0000023e

0000023e:
00000241: R30 := 0x834
00000244: call @abort with return %000008b4

000008b4:
000008b5: call @call_weak_fn with noreturn

0000087f: sub abort()


00000242:
000006cb: R16 := 0x20000
000006d3: R17 := mem[R16 + 0x38, el]:u64
000006da: R16 := R16 + 0x38
000006df: call R17 with noreturn

00000880: sub call_weak_fn(call_weak_fn_result)
000008c6: call_weak_fn_result :: out u32 = low:32[R0]

00000246:
0000024a: R0 := 0x1F000
00000252: R0 := mem[R0 + 0xFD0, el]:u64
0000025e: #12 := R0 = 0
00000258: when #12 goto %00000256
000008b6: goto %00000515

00000256:
00000263: call R30 with noreturn

00000515:
00000518: goto @__gmon_start__

00000516:
000006b2: R16 := 0x20000
000006ba: R17 := mem[R16 + 0x30, el]:u64
000006c1: R16 := R16 + 0x30
000006c6: call R17 with noreturn

00000882: sub deregister_tm_clones(deregister_tm_clones_result)
000008c7: deregister_tm_clones_result :: out u32 = low:32[R0]

00000269:
0000026d: R0 := 0x20000
00000274: R0 := R0 + 0x70
0000027a: R1 := 0x20000
00000281: R1 := R1 + 0x70
00000289: #16 := 1 + ~R0 + R1
0000028d: NF := 63:63[#16]
00000290: VF := 63:63[R1] & 63:63[~R0] & ~63:63[#16] | ~63:63[R1] &
          ~63:63[~R0] & 63:63[#16]
00000293: ZF := #16 = 0
00000296: CF := 63:63[R1] & 63:63[~R0] | 63:63[~R0] & ~63:63[#16] | 63:63[R1]
          & ~63:63[#16]
000002a4: #21 := ZF
0000029e: when #21 goto %0000029c
000008b7: goto %000004ee

000004ee:
000004f2: R1 := 0x1F000
000004fa: R1 := mem[R1 + 0xFC0, el]:u64
00000505: #93 := R1 = 0
000004ff: when #93 goto %0000029c
000008b8: goto %00000508

0000029c:
000002a9: call R30 with noreturn

00000508:
0000050e: R16 := R1
00000513: call R16 with noreturn

00000885: sub frame_dummy(frame_dummy_result)
000008c8: frame_dummy_result :: out u32 = low:32[R0]

00000359:
0000035b: call @register_tm_clones with noreturn

00000886: sub free(free_ptr)
000008c9: free_ptr :: in out u64 = R0

00000449:
000006fd: R16 := 0x20000
00000705: R17 := mem[R16 + 0x48, el]:u64
0000070c: R16 := R16 + 0x48
00000711: call R17 with noreturn

00000887: sub main(main_argc, main_argv, main_result)
000008ca: main_argc :: in u32 = low:32[R0]
000008cb: main_argv :: in out u64 = R1
000008cc: main_result :: out u32 = low:32[R0]

0000035d:
00000364: #42 := R31 - 0x30
00000369: mem := mem with [#42, el]:u64 <- R29
0000036e: mem := mem with [#42 + 8, el]:u64 <- R30
00000372: R31 := #42
0000037a: mem := mem with [R31 + 0x10, el]:u64 <- R21
00000382: #47 := R31 + 0x20
00000387: mem := mem with [#47, el]:u64 <- R20
0000038c: mem := mem with [#47 + 8, el]:u64 <- R19
00000393: R29 := R31
0000039a: R0 := 0xB
0000039f: R30 := 0x92C
000003a2: call @malloc with return %000003a4

000003a4:
000003a8: R21 := 0x20000
000003ae: R20 := 0x20000
000003b5: R20 := R20 + 0x61
000003bd: R19 := R0
000003c5: mem := mem with [R21 + 0x78, el]:u64 <- R0
000003cd: R0 := R20
000003d2: R30 := 0x948
000003d5: call @strlen with return %000003d7

000003d7:
000003dd: R2 := R0
000003e5: R0 := R19
000003ed: R1 := R20
000003f2: R30 := 0x958
000003f5: call @memcpy with return %000003f7

000003f7:
000003fd: R0 := R19
00000402: R30 := 0x960
00000405: call @puts with return %00000407

00000407:
0000040d: R19 := mem[R21 + 0x78, el]:u64
00000415: R0 := R19
0000041a: R30 := 0x96C
0000041c: call @strlen with return %0000041e

0000041e:
00000424: R2 := R0
0000042c: R0 := R19
00000433: R1 := 1
00000438: R30 := 0x97C
0000043b: call @memset with return %0000043d

0000043d:
00000443: R0 := mem[R21 + 0x78, el]:u64
00000448: R30 := 0x984
0000044b: call @free with return %0000044d

0000044d:
00000454: R0 := 0
0000045d: R20 := mem[R31 + 0x20, el]:u64
00000461: R19 := mem[R31 + 0x28, el]:u64
00000469: R21 := mem[R31 + 0x10, el]:u64
00000473: R29 := mem[R31, el]:u64
00000477: R30 := mem[R31 + 8, el]:u64
0000047a: R31 := R31 + 0x30
0000047f: call R30 with noreturn

00000888: sub malloc(malloc_size, malloc_result)
000008cd: malloc_size :: in u64 = R0
000008ce: malloc_result :: out u64 = R0

000003a0:
00000680: R16 := 0x20000
00000688: R17 := mem[R16 + 0x20, el]:u64
0000068f: R16 := R16 + 0x20
00000694: call R17 with noreturn

00000889: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
000008cf: memcpy_dst :: in out u64 = R0
000008d0: memcpy_src :: in out u64 = R1
000008d1: memcpy_n :: in u64 = R2
000008d2: memcpy_result :: out u64 = R0

000003f3:
0000061c: R16 := 0x20000
00000624: R17 := mem[R16, el]:u64
0000062b: R16 := R16
00000630: call R17 with noreturn

0000088a: sub memset(memset_buf, memset_c, memset_n, memset_result)
000008d3: memset_buf :: in out u64 = R0
000008d4: memset_c :: in u32 = low:32[R1]
000008d5: memset_n :: in u64 = R2
000008d6: memset_result :: out u64 = R0

00000439:
00000699: R16 := 0x20000
000006a1: R17 := mem[R16 + 0x28, el]:u64
000006a8: R16 := R16 + 0x28
000006ad: call R17 with noreturn

0000088b: sub puts(puts_s, puts_result)
000008d7: puts_s :: in u64 = R0
000008d8: puts_result :: out u32 = low:32[R0]

00000403:
000006e4: R16 := 0x20000
000006ec: R17 := mem[R16 + 0x40, el]:u64
000006f3: R16 := R16 + 0x40
000006f8: call R17 with noreturn

0000088c: sub register_tm_clones(register_tm_clones_result)
000008d9: register_tm_clones_result :: out u32 = low:32[R0]

000002ab:
000002af: R0 := 0x20000
000002b6: R0 := R0 + 0x70
000002bc: R1 := 0x20000
000002c3: R1 := R1 + 0x70
000002cb: R1 := R1 - R0
000002d2: R2 := R1 >> 0x3F
000002da: R1 := R2 + (R1 ~>> 3)
000002e1: R1 := R1 >> 1
000002ed: #30 := R1 = 0
000002e7: when #30 goto %000002e5
000008b9: goto %000004c7

000004c7:
000004cb: R2 := 0x1F000
000004d3: R2 := mem[R2 + 0xFE0, el]:u64
000004de: #88 := R2 = 0
000004d8: when #88 goto %000002e5
000008ba: goto %000004e1

000002e5:
000002f2: call R30 with noreturn

000004e1:
000004e7: R16 := R2
000004ec: call R16 with noreturn

0000088f: sub strlen(strlen_s, strlen_result)
000008da: strlen_s :: in u64 = R0
000008db: strlen_result :: out u64 = R0

000003d3:
00000635: R16 := 0x20000
0000063d: R17 := mem[R16 + 8, el]:u64
00000644: R16 := R16 + 8
00000649: call R17 with noreturn
