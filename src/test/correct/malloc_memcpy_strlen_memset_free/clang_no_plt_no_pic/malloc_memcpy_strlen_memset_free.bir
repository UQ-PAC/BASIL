0000091d: program
000008d6: sub __cxa_finalize(__cxa_finalize_result)
0000091e: __cxa_finalize_result :: out u32 = low:32[R0]

00000513:
000006b7: R16 := 0x20000
000006bf: R17 := mem[R16 + 0x18, el]:u64
000006c6: R16 := R16 + 0x18
000006cb: call R17 with noreturn

000008d7: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000091f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000031a:
00000321: #34 := R31 - 0x20
00000326: mem := mem with [#34, el]:u64 <- R29
0000032b: mem := mem with [#34 + 8, el]:u64 <- R30
0000032f: R31 := #34
00000336: R29 := R31
0000033e: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000344: R19 := 0x20000
0000034d: R0 := pad:32[mem[R19 + 0x70]]
00000359: #36 := ~~0:0[R0]
00000353: when #36 goto %00000351
00000913: goto %000004d1

000004d1:
000004d5: R0 := 0x1F000
000004dd: R0 := mem[R0 + 0xFC8, el]:u64
000004e9: #67 := R0 = 0
000004e3: when #67 goto %000004e1
00000914: goto %00000501

00000501:
00000505: R0 := 0x20000
0000050d: R0 := mem[R0 + 0x58, el]:u64
00000512: R30 := 0x8F0
00000515: call @__cxa_finalize with return %000004e1

000004e1:
000004ee: R30 := 0x8F4
000004f0: call @deregister_tm_clones with return %000004f2

000004f2:
000004f7: R0 := 1
000004ff: mem := mem with [R19 + 0x70] <- low:8[31:0[R0]]
00000915: goto %00000351

00000351:
00000361: R19 := mem[R31 + 0x10, el]:u64
0000036b: R29 := mem[R31, el]:u64
0000036f: R30 := mem[R31 + 8, el]:u64
00000372: R31 := R31 + 0x20
00000377: call R30 with noreturn

000008db: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000920: __libc_start_main_main :: in u64 = R0
00000921: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000922: __libc_start_main_arg3 :: in out u64 = R2
00000923: __libc_start_main_auxv :: in out u64 = R3
00000924: __libc_start_main_result :: out u32 = low:32[R0]

0000025e:
0000069e: R16 := 0x20000
000006a6: R17 := mem[R16 + 0x10, el]:u64
000006ad: R16 := R16 + 0x10
000006b2: call R17 with noreturn

000008dc: sub _fini(_fini_result)
00000925: _fini_result :: out u32 = low:32[R0]

00000020:
00000029: #3 := R31 - 0x10
0000002e: mem := mem with [#3, el]:u64 <- R29
00000033: mem := mem with [#3 + 8, el]:u64 <- R30
00000037: R31 := #3
0000003e: R29 := R31
00000048: R29 := mem[R31, el]:u64
0000004c: R30 := mem[R31 + 8, el]:u64
0000004f: R31 := R31 + 0x10
00000054: call R30 with noreturn

000008dd: sub _init(_init_result)
00000926: _init_result :: out u32 = low:32[R0]

000007f3:
000007fc: #98 := R31 - 0x10
00000801: mem := mem with [#98, el]:u64 <- R29
00000806: mem := mem with [#98 + 8, el]:u64 <- R30
0000080a: R31 := #98
00000811: R29 := R31
00000816: R30 := 0x738
00000818: call @call_weak_fn with return %0000081a

0000081a:
00000822: R29 := mem[R31, el]:u64
00000826: R30 := mem[R31 + 8, el]:u64
00000829: R31 := R31 + 0x10
0000082e: call R30 with noreturn

000008de: sub _start(_start_result)
00000927: _start_result :: out u32 = low:32[R0]

00000214:
0000021a: R29 := 0
00000220: R30 := 0
00000228: R5 := R0
00000230: R1 := mem[R31, el]:u64
00000237: R2 := R31 + 8
0000023e: R6 := R31
00000244: R0 := 0x1F000
0000024c: R0 := mem[R0 + 0xFD8, el]:u64
00000252: R3 := 0
00000258: R4 := 0
0000025d: R30 := 0x830
00000260: call @__libc_start_main with return %00000262

00000262:
00000265: R30 := 0x834
00000268: call @abort with return %00000916

00000916:
00000917: call @call_weak_fn with noreturn

000008e1: sub abort()


00000266:
0000071b: R16 := 0x20000
00000723: R17 := mem[R16 + 0x38, el]:u64
0000072a: R16 := R16 + 0x38
0000072f: call R17 with noreturn

000008e2: sub call_weak_fn(call_weak_fn_result)
00000928: call_weak_fn_result :: out u32 = low:32[R0]

0000026a:
0000026e: R0 := 0x1F000
00000276: R0 := mem[R0 + 0xFD0, el]:u64
00000282: #12 := R0 = 0
0000027c: when #12 goto %0000027a
00000918: goto %00000565

0000027a:
00000287: call R30 with noreturn

00000565:
00000568: goto @__gmon_start__

00000566:
00000702: R16 := 0x20000
0000070a: R17 := mem[R16 + 0x30, el]:u64
00000711: R16 := R16 + 0x30
00000716: call R17 with noreturn

000008e4: sub deregister_tm_clones(deregister_tm_clones_result)
00000929: deregister_tm_clones_result :: out u32 = low:32[R0]

0000028d:
00000291: R0 := 0x20000
00000298: R0 := R0 + 0x70
0000029e: R1 := 0x20000
000002a5: R1 := R1 + 0x70
000002ad: #16 := 1 + ~R0 + R1
000002b1: NF := 63:63[#16]
000002b4: VF := 63:63[R1] & 63:63[~R0] & ~63:63[#16] | ~63:63[R1] &
          ~63:63[~R0] & 63:63[#16]
000002b7: ZF := #16 = 0
000002ba: CF := 63:63[R1] & 63:63[~R0] | 63:63[~R0] & ~63:63[#16] | 63:63[R1]
          & ~63:63[#16]
000002c8: #21 := ZF
000002c2: when #21 goto %000002c0
00000919: goto %0000053e

0000053e:
00000542: R1 := 0x1F000
0000054a: R1 := mem[R1 + 0xFC0, el]:u64
00000555: #75 := R1 = 0
0000054f: when #75 goto %000002c0
0000091a: goto %00000558

000002c0:
000002cd: call R30 with noreturn

00000558:
0000055e: R16 := R1
00000563: call R16 with noreturn

000008e7: sub frame_dummy(frame_dummy_result)
0000092a: frame_dummy_result :: out u32 = low:32[R0]

0000037d:
0000037f: call @register_tm_clones with noreturn

000008e8: sub free(free_ptr)
0000092b: free_ptr :: in out u64 = R0

000004ab:
0000074d: R16 := 0x20000
00000755: R17 := mem[R16 + 0x48, el]:u64
0000075c: R16 := R16 + 0x48
00000761: call R17 with noreturn

000008e9: sub main(main_argc, main_argv, main_result)
0000092c: main_argc :: in u32 = low:32[R0]
0000092d: main_argv :: in out u64 = R1
0000092e: main_result :: out u32 = low:32[R0]

00000381:
00000386: R31 := R31 - 0x40
0000038e: #42 := R31 + 0x30
00000393: mem := mem with [#42, el]:u64 <- R29
00000398: mem := mem with [#42 + 8, el]:u64 <- R30
0000039f: R29 := R31 + 0x30
000003a7: mem := mem with [R29 - 8, el]:u64 <- 0
000003af: mem := mem with [R29 - 0x10, el]:u64 <- 0
000003b5: R0 := 0xB
000003ba: R30 := 0x930
000003bd: call @malloc with return %000003bf

000003bf:
000003c3: R8 := 0x20000
000003cb: mem := mem with [R31 + 0x18, el]:u64 <- R8
000003d3: mem := mem with [R8 + 0x78, el]:u64 <- R0
000003db: R8 := mem[R8 + 0x78, el]:u64
000003e3: mem := mem with [R31 + 8, el]:u64 <- R8
000003e9: R0 := 0x20000
000003f0: R0 := R0 + 0x61
000003f8: mem := mem with [R31, el]:u64 <- R0
000003fd: R30 := 0x954
00000400: call @strlen with return %00000402

00000402:
00000408: R1 := mem[R31, el]:u64
00000410: R2 := R0
00000418: R0 := mem[R31 + 8, el]:u64
0000041d: R30 := 0x964
00000420: call @memcpy with return %00000422

00000422:
00000428: R8 := mem[R31 + 0x18, el]:u64
00000430: R0 := mem[R8 + 0x78, el]:u64
00000435: R30 := 0x970
00000438: call @puts with return %0000043a

0000043a:
00000440: R8 := mem[R31 + 0x18, el]:u64
00000448: R9 := mem[R8 + 0x78, el]:u64
0000044f: R9 := R9 + 4
00000457: mem := mem with [R29 - 8, el]:u64 <- R9
0000045f: R9 := mem[R8 + 0x78, el]:u64
00000467: mem := mem with [R31 + 0x10, el]:u64 <- R9
0000046f: R0 := mem[R8 + 0x78, el]:u64
00000474: R30 := 0x990
00000476: call @strlen with return %00000478

00000478:
0000047e: R2 := R0
00000486: R0 := mem[R31 + 0x10, el]:u64
0000048d: R1 := 1
00000492: R30 := 0x9A0
00000495: call @memset with return %00000497

00000497:
0000049d: R8 := mem[R31 + 0x18, el]:u64
000004a5: R0 := mem[R8 + 0x78, el]:u64
000004aa: R30 := 0x9AC
000004ad: call @free with return %000004af

000004af:
000004b6: R0 := 0
000004bf: R29 := mem[R31 + 0x30, el]:u64
000004c3: R30 := mem[R31 + 0x38, el]:u64
000004ca: R31 := R31 + 0x40
000004cf: call R30 with noreturn

000008ea: sub malloc(malloc_size, malloc_result)
0000092f: malloc_size :: in u64 = R0
00000930: malloc_result :: out u64 = R0

000003bb:
000006d0: R16 := 0x20000
000006d8: R17 := mem[R16 + 0x20, el]:u64
000006df: R16 := R16 + 0x20
000006e4: call R17 with noreturn

000008eb: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
00000931: memcpy_dst :: in out u64 = R0
00000932: memcpy_src :: in out u64 = R1
00000933: memcpy_n :: in u64 = R2
00000934: memcpy_result :: out u64 = R0

0000041e:
0000066c: R16 := 0x20000
00000674: R17 := mem[R16, el]:u64
0000067b: R16 := R16
00000680: call R17 with noreturn

000008ec: sub memset(memset_buf, memset_c, memset_n, memset_result)
00000935: memset_buf :: in out u64 = R0
00000936: memset_c :: in u32 = low:32[R1]
00000937: memset_n :: in u64 = R2
00000938: memset_result :: out u64 = R0

00000493:
000006e9: R16 := 0x20000
000006f1: R17 := mem[R16 + 0x28, el]:u64
000006f8: R16 := R16 + 0x28
000006fd: call R17 with noreturn

000008ed: sub puts(puts_s, puts_result)
00000939: puts_s :: in u64 = R0
0000093a: puts_result :: out u32 = low:32[R0]

00000436:
00000734: R16 := 0x20000
0000073c: R17 := mem[R16 + 0x40, el]:u64
00000743: R16 := R16 + 0x40
00000748: call R17 with noreturn

000008ee: sub register_tm_clones(register_tm_clones_result)
0000093b: register_tm_clones_result :: out u32 = low:32[R0]

000002cf:
000002d3: R0 := 0x20000
000002da: R0 := R0 + 0x70
000002e0: R1 := 0x20000
000002e7: R1 := R1 + 0x70
000002ef: R1 := R1 - R0
000002f6: R2 := R1 >> 0x3F
000002fe: R1 := R2 + (R1 ~>> 3)
00000305: R1 := R1 >> 1
00000311: #30 := R1 = 0
0000030b: when #30 goto %00000309
0000091b: goto %00000517

00000517:
0000051b: R2 := 0x1F000
00000523: R2 := mem[R2 + 0xFE0, el]:u64
0000052e: #70 := R2 = 0
00000528: when #70 goto %00000309
0000091c: goto %00000531

00000309:
00000316: call R30 with noreturn

00000531:
00000537: R16 := R2
0000053c: call R16 with noreturn

000008f1: sub strlen(strlen_s, strlen_result)
0000093c: strlen_s :: in u64 = R0
0000093d: strlen_result :: out u64 = R0

000003fe:
00000685: R16 := 0x20000
0000068d: R17 := mem[R16 + 8, el]:u64
00000694: R16 := R16 + 8
00000699: call R17 with noreturn
