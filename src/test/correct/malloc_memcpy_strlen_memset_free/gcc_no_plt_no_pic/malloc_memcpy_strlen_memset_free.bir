00000902: program
000008bb: sub __cxa_finalize(__cxa_finalize_result)
00000903: __cxa_finalize_result :: out u32 = low:32[R0]

00000566:
0000070a: R16 := 0x20000
00000712: R17 := mem[R16 + 0x18, el]:u64
00000719: R16 := R16 + 0x18
0000071e: call R17 with noreturn

000008bc: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000904: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000033a:
00000341: #34 := R31 - 0x20
00000346: mem := mem with [#34, el]:u64 <- R29
0000034b: mem := mem with [#34 + 8, el]:u64 <- R30
0000034f: R31 := #34
00000356: R29 := R31
0000035e: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000364: R19 := 0x20000
0000036d: R0 := pad:32[mem[R19 + 0x78]]
00000379: #36 := ~~0:0[R0]
00000373: when #36 goto %00000371
000008f8: goto %00000524

00000524:
00000528: R0 := 0x1F000
00000530: R0 := mem[R0 + 0xFC8, el]:u64
0000053c: #68 := R0 = 0
00000536: when #68 goto %00000534
000008f9: goto %00000554

00000554:
00000558: R0 := 0x20000
00000560: R0 := mem[R0 + 0x58, el]:u64
00000565: R30 := 0x8B0
00000568: call @__cxa_finalize with return %00000534

00000534:
00000541: R30 := 0x8B4
00000543: call @deregister_tm_clones with return %00000545

00000545:
0000054a: R0 := 1
00000552: mem := mem with [R19 + 0x78] <- low:8[31:0[R0]]
000008fa: goto %00000371

00000371:
00000381: R19 := mem[R31 + 0x10, el]:u64
0000038b: R29 := mem[R31, el]:u64
0000038f: R30 := mem[R31 + 8, el]:u64
00000392: R31 := R31 + 0x20
00000397: call R30 with noreturn

000008c0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000905: __libc_start_main_main :: in u64 = R0
00000906: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000907: __libc_start_main_arg3 :: in out u64 = R2
00000908: __libc_start_main_auxv :: in out u64 = R3
00000909: __libc_start_main_result :: out u32 = low:32[R0]

0000027e:
000006f1: R16 := 0x20000
000006f9: R17 := mem[R16 + 0x10, el]:u64
00000700: R16 := R16 + 0x10
00000705: call R17 with noreturn

000008c1: sub _fini(_fini_result)
0000090a: _fini_result :: out u32 = low:32[R0]

00000020:
00000029: #3 := R31 - 0x10
0000002e: mem := mem with [#3, el]:u64 <- R29
00000033: mem := mem with [#3 + 8, el]:u64 <- R30
00000037: R31 := #3
0000003e: R29 := R31
00000048: R29 := mem[R31, el]:u64
0000004c: R30 := mem[R31 + 8, el]:u64
0000004f: R31 := R31 + 0x10
00000054: call R30 with noreturn

000008c2: sub _init(_init_result)
0000090b: _init_result :: out u32 = low:32[R0]

000007d0:
000007d9: #99 := R31 - 0x10
000007de: mem := mem with [#99, el]:u64 <- R29
000007e3: mem := mem with [#99 + 8, el]:u64 <- R30
000007e7: R31 := #99
000007ee: R29 := R31
000007f3: R30 := 0x6E8
000007f5: call @call_weak_fn with return %000007f7

000007f7:
000007ff: R29 := mem[R31, el]:u64
00000803: R30 := mem[R31 + 8, el]:u64
00000806: R31 := R31 + 0x10
0000080b: call R30 with noreturn

000008c3: sub _start(_start_result)
0000090c: _start_result :: out u32 = low:32[R0]

00000234:
0000023a: R29 := 0
00000240: R30 := 0
00000248: R5 := R0
00000250: R1 := mem[R31, el]:u64
00000257: R2 := R31 + 8
0000025e: R6 := R31
00000264: R0 := 0x1F000
0000026c: R0 := mem[R0 + 0xFD8, el]:u64
00000272: R3 := 0
00000278: R4 := 0
0000027d: R30 := 0x7F0
00000280: call @__libc_start_main with return %00000282

00000282:
00000285: R30 := 0x7F4
00000288: call @abort with return %000008fb

000008fb:
000008fc: call @call_weak_fn with noreturn

000008c6: sub abort()


00000286:
0000076e: R16 := 0x20000
00000776: R17 := mem[R16 + 0x38, el]:u64
0000077d: R16 := R16 + 0x38
00000782: call R17 with noreturn

000008c7: sub call_weak_fn(call_weak_fn_result)
0000090d: call_weak_fn_result :: out u32 = low:32[R0]

0000028a:
0000028e: R0 := 0x1F000
00000296: R0 := mem[R0 + 0xFD0, el]:u64
000002a2: #12 := R0 = 0
0000029c: when #12 goto %0000029a
000008fd: goto %000005b8

0000029a:
000002a7: call R30 with noreturn

000005b8:
000005bb: goto @__gmon_start__

000005b9:
00000755: R16 := 0x20000
0000075d: R17 := mem[R16 + 0x30, el]:u64
00000764: R16 := R16 + 0x30
00000769: call R17 with noreturn

000008c9: sub deregister_tm_clones(deregister_tm_clones_result)
0000090e: deregister_tm_clones_result :: out u32 = low:32[R0]

000002ad:
000002b1: R0 := 0x20000
000002b8: R0 := R0 + 0x78
000002be: R1 := 0x20000
000002c5: R1 := R1 + 0x78
000002cd: #16 := 1 + ~R0 + R1
000002d1: NF := 63:63[#16]
000002d4: VF := 63:63[R1] & 63:63[~R0] & ~63:63[#16] | ~63:63[R1] &
          ~63:63[~R0] & 63:63[#16]
000002d7: ZF := #16 = 0
000002da: CF := 63:63[R1] & 63:63[~R0] | 63:63[~R0] & ~63:63[#16] | 63:63[R1]
          & ~63:63[#16]
000002e8: #21 := ZF
000002e2: when #21 goto %000002e0
000008fe: goto %00000591

00000591:
00000595: R1 := 0x1F000
0000059d: R1 := mem[R1 + 0xFC0, el]:u64
000005a8: #76 := R1 = 0
000005a2: when #76 goto %000002e0
000008ff: goto %000005ab

000002e0:
000002ed: call R30 with noreturn

000005ab:
000005b1: R16 := R1
000005b6: call R16 with noreturn

000008cc: sub frame_dummy(frame_dummy_result)
0000090f: frame_dummy_result :: out u32 = low:32[R0]

0000039d:
0000039f: call @register_tm_clones with noreturn

000008cd: sub free(free_ptr)
00000910: free_ptr :: in out u64 = R0

000004fb:
000007a0: R16 := 0x20000
000007a8: R17 := mem[R16 + 0x48, el]:u64
000007af: R16 := R16 + 0x48
000007b4: call R17 with noreturn

000008ce: sub main(main_argc, main_argv, main_result)
00000911: main_argc :: in u32 = low:32[R0]
00000912: main_argv :: in out u64 = R1
00000913: main_result :: out u32 = low:32[R0]

000003a1:
000003a8: #42 := R31 - 0x30
000003ad: mem := mem with [#42, el]:u64 <- R29
000003b2: mem := mem with [#42 + 8, el]:u64 <- R30
000003b6: R31 := #42
000003bd: R29 := R31
000003c5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003cd: mem := mem with [R31 + 0x28, el]:u64 <- 0
000003d5: mem := mem with [R31 + 0x20, el]:u64 <- 0
000003db: R0 := 0xB
000003e0: R30 := 0x8F0
000003e3: call @malloc with return %000003e5

000003e5:
000003eb: R1 := R0
000003f1: R0 := 0x20000
000003f8: R0 := R0 + 0x80
00000400: mem := mem with [R0, el]:u64 <- R1
00000406: R0 := 0x20000
0000040d: R0 := R0 + 0x80
00000415: R19 := mem[R0, el]:u64
0000041b: R0 := 0x20000
00000422: R0 := R0 + 0x68
00000427: R30 := 0x918
0000042a: call @strlen with return %0000042c

0000042c:
00000432: R2 := R0
00000438: R0 := 0x20000
0000043f: R1 := R0 + 0x68
00000447: R0 := R19
0000044c: R30 := 0x92C
0000044f: call @memcpy with return %00000451

00000451:
00000455: R0 := 0x20000
0000045c: R0 := R0 + 0x80
00000464: R0 := mem[R0, el]:u64
00000469: R30 := 0x93C
0000046c: call @puts with return %0000046e

0000046e:
00000472: R0 := 0x20000
00000479: R0 := R0 + 0x80
00000481: R0 := mem[R0, el]:u64
00000488: R0 := R0 + 4
00000490: mem := mem with [R31 + 0x28, el]:u64 <- R0
00000496: R0 := 0x20000
0000049d: R0 := R0 + 0x80
000004a5: R19 := mem[R0, el]:u64
000004ab: R0 := 0x20000
000004b2: R0 := R0 + 0x80
000004ba: R0 := mem[R0, el]:u64
000004bf: R30 := 0x96C
000004c1: call @strlen with return %000004c3

000004c3:
000004c9: R2 := R0
000004d0: R1 := 1
000004d8: R0 := R19
000004dd: R30 := 0x97C
000004e0: call @memset with return %000004e2

000004e2:
000004e6: R0 := 0x20000
000004ed: R0 := R0 + 0x80
000004f5: R0 := mem[R0, el]:u64
000004fa: R30 := 0x98C
000004fd: call @free with return %000004ff

000004ff:
00000504: R0 := 0
0000050c: R19 := mem[R31 + 0x10, el]:u64
00000516: R29 := mem[R31, el]:u64
0000051a: R30 := mem[R31 + 8, el]:u64
0000051d: R31 := R31 + 0x30
00000522: call R30 with noreturn

000008cf: sub malloc(malloc_size, malloc_result)
00000914: malloc_size :: in u64 = R0
00000915: malloc_result :: out u64 = R0

000003e1:
00000723: R16 := 0x20000
0000072b: R17 := mem[R16 + 0x20, el]:u64
00000732: R16 := R16 + 0x20
00000737: call R17 with noreturn

000008d0: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
00000916: memcpy_dst :: in out u64 = R0
00000917: memcpy_src :: in out u64 = R1
00000918: memcpy_n :: in u64 = R2
00000919: memcpy_result :: out u64 = R0

0000044d:
000006bf: R16 := 0x20000
000006c7: R17 := mem[R16, el]:u64
000006ce: R16 := R16
000006d3: call R17 with noreturn

000008d1: sub memset(memset_buf, memset_c, memset_n, memset_result)
0000091a: memset_buf :: in out u64 = R0
0000091b: memset_c :: in u32 = low:32[R1]
0000091c: memset_n :: in u64 = R2
0000091d: memset_result :: out u64 = R0

000004de:
0000073c: R16 := 0x20000
00000744: R17 := mem[R16 + 0x28, el]:u64
0000074b: R16 := R16 + 0x28
00000750: call R17 with noreturn

000008d2: sub puts(puts_s, puts_result)
0000091e: puts_s :: in u64 = R0
0000091f: puts_result :: out u32 = low:32[R0]

0000046a:
00000787: R16 := 0x20000
0000078f: R17 := mem[R16 + 0x40, el]:u64
00000796: R16 := R16 + 0x40
0000079b: call R17 with noreturn

000008d3: sub register_tm_clones(register_tm_clones_result)
00000920: register_tm_clones_result :: out u32 = low:32[R0]

000002ef:
000002f3: R0 := 0x20000
000002fa: R0 := R0 + 0x78
00000300: R1 := 0x20000
00000307: R1 := R1 + 0x78
0000030f: R1 := R1 - R0
00000316: R2 := R1 >> 0x3F
0000031e: R1 := R2 + (R1 ~>> 3)
00000325: R1 := R1 >> 1
00000331: #30 := R1 = 0
0000032b: when #30 goto %00000329
00000900: goto %0000056a

0000056a:
0000056e: R2 := 0x1F000
00000576: R2 := mem[R2 + 0xFE0, el]:u64
00000581: #71 := R2 = 0
0000057b: when #71 goto %00000329
00000901: goto %00000584

00000329:
00000336: call R30 with noreturn

00000584:
0000058a: R16 := R2
0000058f: call R16 with noreturn

000008d6: sub strlen(strlen_s, strlen_result)
00000921: strlen_s :: in u64 = R0
00000922: strlen_result :: out u64 = R0

00000428:
000006d8: R16 := 0x20000
000006e0: R17 := mem[R16 + 8, el]:u64
000006e7: R16 := R16 + 8
000006ec: call R17 with noreturn
