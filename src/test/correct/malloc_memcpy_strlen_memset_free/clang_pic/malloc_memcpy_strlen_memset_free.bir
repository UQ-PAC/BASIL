00000832: program
000007eb: sub __cxa_finalize(__cxa_finalize_result)
00000833: __cxa_finalize_result :: out u32 = low:32[R0]

000004d3:
00000657: R16 := 0x20000
0000065e: R17 := mem[R16 + 0x18, el]:u64
00000664: R16 := R16 + 0x18
00000669: call R17 with noreturn

000007ec: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000834: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002ff:
00000303: #3 := R31 - 0x20
00000309: mem := mem with [#3, el]:u64 <- R29
0000030f: mem := mem with [#3 + 8, el]:u64 <- R30
00000313: R31 := #3
00000319: R29 := R31
00000321: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000326: R19 := 0x20000
0000032d: R0 := pad:64[mem[R19 + 0x70]]
00000333: when 0:0[R0] goto %00000331
00000828: goto %0000049c

0000049c:
0000049f: R0 := 0x1F000
000004a6: R0 := mem[R0 + 0xFB8, el]:u64
000004ac: when R0 = 0 goto %000004aa
00000829: goto %000004c3

000004c3:
000004c6: R0 := 0x20000
000004cd: R0 := mem[R0 + 0x58, el]:u64
000004d2: R30 := 0x930
000004d5: call @__cxa_finalize with return %000004aa

000004aa:
000004b2: R30 := 0x934
000004b4: call @deregister_tm_clones with return %000004b6

000004b6:
000004b9: R0 := 1
000004c1: mem := mem with [R19 + 0x70] <- 7:0[R0]
0000082a: goto %00000331

00000331:
0000033b: R19 := mem[R31 + 0x10, el]:u64
00000342: R29 := mem[R31, el]:u64
00000347: R30 := mem[R31 + 8, el]:u64
0000034b: R31 := R31 + 0x20
00000350: call R30 with noreturn

000007f0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000835: __libc_start_main_main :: in u64 = R0
00000836: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000837: __libc_start_main_arg3 :: in out u64 = R2
00000838: __libc_start_main_auxv :: in out u64 = R3
00000839: __libc_start_main_result :: out u32 = low:32[R0]

00000258:
00000641: R16 := 0x20000
00000648: R17 := mem[R16 + 0x10, el]:u64
0000064e: R16 := R16 + 0x10
00000653: call R17 with noreturn

000007f1: sub _fini(_fini_result)
0000083a: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000007f2: sub _init(_init_result)
0000083b: _init_result :: out u32 = low:32[R0]

00000709:
0000070f: #7 := R31 - 0x10
00000715: mem := mem with [#7, el]:u64 <- R29
0000071b: mem := mem with [#7 + 8, el]:u64 <- R30
0000071f: R31 := #7
00000725: R29 := R31
0000072a: R30 := 0x768
0000072c: call @call_weak_fn with return %0000072e

0000072e:
00000733: R29 := mem[R31, el]:u64
00000738: R30 := mem[R31 + 8, el]:u64
0000073c: R31 := R31 + 0x10
00000741: call R30 with noreturn

000007f3: sub _start(_start_result)
0000083c: _start_result :: out u32 = low:32[R0]

00000219:
0000021e: R29 := 0
00000223: R30 := 0
00000229: R5 := R0
00000230: R1 := mem[R31, el]:u64
00000236: R2 := R31 + 8
0000023c: R6 := R31
00000241: R0 := 0x1F000
00000248: R0 := mem[R0 + 0xFD8, el]:u64
0000024d: R3 := 0
00000252: R4 := 0
00000257: R30 := 0x870
0000025a: call @__libc_start_main with return %0000025c

0000025c:
0000025f: R30 := 0x874
00000262: call @abort with return %0000082b

0000082b:
0000082c: call @call_weak_fn with noreturn

000007f6: sub abort()


00000260:
000006af: R16 := 0x20000
000006b6: R17 := mem[R16 + 0x38, el]:u64
000006bc: R16 := R16 + 0x38
000006c1: call R17 with noreturn

000007f7: sub call_weak_fn(call_weak_fn_result)
0000083d: call_weak_fn_result :: out u32 = low:32[R0]

00000264:
00000267: R0 := 0x1F000
0000026e: R0 := mem[R0 + 0xFC0, el]:u64
00000274: when R0 = 0 goto %00000272
0000082d: goto %00000513

00000272:
0000027a: call R30 with noreturn

00000513:
00000516: goto @__gmon_start__

00000514:
00000699: R16 := 0x20000
000006a0: R17 := mem[R16 + 0x30, el]:u64
000006a6: R16 := R16 + 0x30
000006ab: call R17 with noreturn

000007f9: sub deregister_tm_clones(deregister_tm_clones_result)
0000083e: deregister_tm_clones_result :: out u32 = low:32[R0]

00000280:
00000283: R0 := 0x20000
00000289: R0 := R0 + 0x70
0000028e: R1 := 0x20000
00000294: R1 := R1 + 0x70
0000029a: #1 := ~R0
0000029f: #2 := R1 + ~R0
000002a5: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002ab: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002af: ZF := #2 + 1 = 0
000002b3: NF := 63:63[#2 + 1]
000002b9: when ZF goto %000002b7
0000082e: goto %000004f5

000004f5:
000004f8: R1 := 0x1F000
000004ff: R1 := mem[R1 + 0xFB0, el]:u64
00000504: when R1 = 0 goto %000002b7
0000082f: goto %00000508

000002b7:
000002bf: call R30 with noreturn

00000508:
0000050c: R16 := R1
00000511: call R16 with noreturn

000007fc: sub frame_dummy(frame_dummy_result)
0000083f: frame_dummy_result :: out u32 = low:32[R0]

00000356:
00000358: call @register_tm_clones with noreturn

000007fd: sub free(free_ptr)
00000840: free_ptr :: in out u64 = R0

00000478:
000006db: R16 := 0x20000
000006e2: R17 := mem[R16 + 0x48, el]:u64
000006e8: R16 := R16 + 0x48
000006ed: call R17 with noreturn

000007fe: sub main(main_argc, main_argv, main_result)
00000841: main_argc :: in u32 = low:32[R0]
00000842: main_argv :: in out u64 = R1
00000843: main_result :: out u32 = low:32[R0]

0000035a:
0000035e: R31 := R31 - 0x40
00000364: #4 := R31 + 0x30
0000036a: mem := mem with [#4, el]:u64 <- R29
00000370: mem := mem with [#4 + 8, el]:u64 <- R30
00000376: R29 := R31 + 0x30
0000037b: R8 := 0x1F000
00000382: R8 := mem[R8 + 0xFC8, el]:u64
0000038a: mem := mem with [R31 + 0x18, el]:u64 <- R8
00000391: mem := mem with [R29 - 8, el]:u64 <- 0
00000398: mem := mem with [R29 - 0x10, el]:u64 <- 0
0000039d: R0 := 0xB
000003a2: R30 := 0x97C
000003a5: call @malloc with return %000003a7

000003a7:
000003ac: R8 := mem[R31 + 0x18, el]:u64
000003b4: mem := mem with [R8, el]:u64 <- R0
000003bb: R8 := mem[R8, el]:u64
000003c3: mem := mem with [R31 + 8, el]:u64 <- R8
000003c8: R0 := 0x1F000
000003cf: R0 := mem[R0 + 0xFD0, el]:u64
000003d7: mem := mem with [R31, el]:u64 <- R0
000003dc: R30 := 0x99C
000003df: call @strlen with return %000003e1

000003e1:
000003e6: R1 := mem[R31, el]:u64
000003ec: R2 := R0
000003f3: R0 := mem[R31 + 8, el]:u64
000003f8: R30 := 0x9AC
000003fb: call @memcpy with return %000003fd

000003fd:
00000402: R8 := mem[R31 + 0x18, el]:u64
00000409: R0 := mem[R8, el]:u64
0000040e: R30 := 0x9B8
00000411: call @puts with return %00000413

00000413:
00000418: R8 := mem[R31 + 0x18, el]:u64
0000041f: R9 := mem[R8, el]:u64
00000425: R9 := R9 + 4
0000042d: mem := mem with [R29 - 8, el]:u64 <- R9
00000434: R9 := mem[R8, el]:u64
0000043c: mem := mem with [R31 + 0x10, el]:u64 <- R9
00000443: R0 := mem[R8, el]:u64
00000448: R30 := 0x9D8
0000044a: call @strlen with return %0000044c

0000044c:
00000450: R2 := R0
00000457: R0 := mem[R31 + 0x10, el]:u64
0000045c: R1 := 1
00000461: R30 := 0x9E8
00000464: call @memset with return %00000466

00000466:
0000046b: R8 := mem[R31 + 0x18, el]:u64
00000472: R0 := mem[R8, el]:u64
00000477: R30 := 0x9F4
0000047a: call @free with return %0000047c

0000047c:
0000047f: R0 := 0
00000485: #5 := R31 + 0x30
0000048a: R29 := mem[#5, el]:u64
0000048f: R30 := mem[#5 + 8, el]:u64
00000495: R31 := R31 + 0x40
0000049a: call R30 with noreturn

000007ff: sub malloc(malloc_size, malloc_result)
00000844: malloc_size :: in u64 = R0
00000845: malloc_result :: out u64 = R0

000003a3:
0000066d: R16 := 0x20000
00000674: R17 := mem[R16 + 0x20, el]:u64
0000067a: R16 := R16 + 0x20
0000067f: call R17 with noreturn

00000800: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
00000846: memcpy_dst :: in out u64 = R0
00000847: memcpy_src :: in out u64 = R1
00000848: memcpy_n :: in u64 = R2
00000849: memcpy_result :: out u64 = R0

000003f9:
00000615: R16 := 0x20000
0000061c: R17 := mem[R16, el]:u64
00000622: R16 := R16
00000627: call R17 with noreturn

00000801: sub memset(memset_buf, memset_c, memset_n, memset_result)
0000084a: memset_buf :: in out u64 = R0
0000084b: memset_c :: in u32 = low:32[R1]
0000084c: memset_n :: in u64 = R2
0000084d: memset_result :: out u64 = R0

00000462:
00000683: R16 := 0x20000
0000068a: R17 := mem[R16 + 0x28, el]:u64
00000690: R16 := R16 + 0x28
00000695: call R17 with noreturn

00000802: sub puts(puts_s, puts_result)
0000084e: puts_s :: in u64 = R0
0000084f: puts_result :: out u32 = low:32[R0]

0000040f:
000006c5: R16 := 0x20000
000006cc: R17 := mem[R16 + 0x40, el]:u64
000006d2: R16 := R16 + 0x40
000006d7: call R17 with noreturn

00000803: sub register_tm_clones(register_tm_clones_result)
00000850: register_tm_clones_result :: out u32 = low:32[R0]

000002c1:
000002c4: R0 := 0x20000
000002ca: R0 := R0 + 0x70
000002cf: R1 := 0x20000
000002d5: R1 := R1 + 0x70
000002dc: R1 := R1 + ~R0 + 1
000002e2: R2 := 0.63:63[R1]
000002e9: R1 := R2 + (R1 ~>> 3)
000002ef: R1 := extend:64[63:1[R1]]
000002f5: when R1 = 0 goto %000002f3
00000830: goto %000004d7

000004d7:
000004da: R2 := 0x1F000
000004e1: R2 := mem[R2 + 0xFE0, el]:u64
000004e6: when R2 = 0 goto %000002f3
00000831: goto %000004ea

000002f3:
000002fb: call R30 with noreturn

000004ea:
000004ee: R16 := R2
000004f3: call R16 with noreturn

00000806: sub strlen(strlen_s, strlen_result)
00000851: strlen_s :: in u64 = R0
00000852: strlen_result :: out u64 = R0

000003dd:
0000062b: R16 := 0x20000
00000632: R17 := mem[R16 + 8, el]:u64
00000638: R16 := R16 + 8
0000063d: call R17 with noreturn
