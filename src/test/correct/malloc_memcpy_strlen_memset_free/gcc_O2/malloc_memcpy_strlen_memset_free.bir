000008b4: program
0000086d: sub __cxa_finalize(__cxa_finalize_result)
000008b5: __cxa_finalize_result :: out u32 = low:32[R0]

0000051a:
000006be: R16 := 0x20000
000006c6: R17 := mem[R16 + 0x18, el]:u64
000006cd: R16 := R16 + 0x18
000006d2: call R17 with noreturn

0000086e: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008b6: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000471:
00000478: #76 := R31 - 0x20
0000047d: mem := mem with [#76, el]:u64 <- R29
00000482: mem := mem with [#76 + 8, el]:u64 <- R30
00000486: R31 := #76
0000048d: R29 := R31
00000495: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000049b: R19 := 0x20000
000004a4: R0 := pad:32[mem[R19 + 0x70]]
000004b0: #78 := ~~0:0[R0]
000004aa: when #78 goto %000004a8
000008aa: goto %000004d8

000004d8:
000004dc: R0 := 0x1F000
000004e4: R0 := mem[R0 + 0xFC8, el]:u64
000004f0: #82 := R0 = 0
000004ea: when #82 goto %000004e8
000008ab: goto %00000508

00000508:
0000050c: R0 := 0x20000
00000514: R0 := mem[R0 + 0x58, el]:u64
00000519: R30 := 0x970
0000051c: call @__cxa_finalize with return %000004e8

000004e8:
000004f5: R30 := 0x974
000004f7: call @deregister_tm_clones with return %000004f9

000004f9:
000004fe: R0 := 1
00000506: mem := mem with [R19 + 0x70] <- low:8[31:0[R0]]
000008ac: goto %000004a8

000004a8:
000004b8: R19 := mem[R31 + 0x10, el]:u64
000004c2: R29 := mem[R31, el]:u64
000004c6: R30 := mem[R31 + 8, el]:u64
000004c9: R31 := R31 + 0x20
000004ce: call R30 with noreturn

00000872: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008b7: __libc_start_main_main :: in u64 = R0
000008b8: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008b9: __libc_start_main_arg3 :: in out u64 = R2
000008ba: __libc_start_main_auxv :: in out u64 = R3
000008bb: __libc_start_main_result :: out u32 = low:32[R0]

000003b5:
000006a5: R16 := 0x20000
000006ad: R17 := mem[R16 + 0x10, el]:u64
000006b4: R16 := R16 + 0x10
000006b9: call R17 with noreturn

00000873: sub _fini(_fini_result)
000008bc: _fini_result :: out u32 = low:32[R0]

00000020:
00000029: #3 := R31 - 0x10
0000002e: mem := mem with [#3, el]:u64 <- R29
00000033: mem := mem with [#3 + 8, el]:u64 <- R30
00000037: R31 := #3
0000003e: R29 := R31
00000048: R29 := mem[R31, el]:u64
0000004c: R30 := mem[R31 + 8, el]:u64
0000004f: R31 := R31 + 0x10
00000054: call R30 with noreturn

00000874: sub _init(_init_result)
000008bd: _init_result :: out u32 = low:32[R0]

00000784:
0000078d: #113 := R31 - 0x10
00000792: mem := mem with [#113, el]:u64 <- R29
00000797: mem := mem with [#113 + 8, el]:u64 <- R30
0000079b: R31 := #113
000007a2: R29 := R31
000007a7: R30 := 0x6E8
000007a9: call @call_weak_fn with return %000007ab

000007ab:
000007b3: R29 := mem[R31, el]:u64
000007b7: R30 := mem[R31 + 8, el]:u64
000007ba: R31 := R31 + 0x10
000007bf: call R30 with noreturn

00000875: sub _start(_start_result)
000008be: _start_result :: out u32 = low:32[R0]

0000036b:
00000371: R29 := 0
00000377: R30 := 0
0000037f: R5 := R0
00000387: R1 := mem[R31, el]:u64
0000038e: R2 := R31 + 8
00000395: R6 := R31
0000039b: R0 := 0x1F000
000003a3: R0 := mem[R0 + 0xFD8, el]:u64
000003a9: R3 := 0
000003af: R4 := 0
000003b4: R30 := 0x8B0
000003b7: call @__libc_start_main with return %000003b9

000003b9:
000003bc: R30 := 0x8B4
000003bf: call @abort with return %000008ad

000008ad:
000008ae: call @call_weak_fn with noreturn

00000878: sub abort()


000003bd:
00000722: R16 := 0x20000
0000072a: R17 := mem[R16 + 0x38, el]:u64
00000731: R16 := R16 + 0x38
00000736: call R17 with noreturn

00000879: sub call_weak_fn(call_weak_fn_result)
000008bf: call_weak_fn_result :: out u32 = low:32[R0]

000003c1:
000003c5: R0 := 0x1F000
000003cd: R0 := mem[R0 + 0xFD0, el]:u64
000003d9: #54 := R0 = 0
000003d3: when #54 goto %000003d1
000008af: goto %0000056c

000003d1:
000003de: call R30 with noreturn

0000056c:
0000056f: goto @__gmon_start__

0000056d:
00000709: R16 := 0x20000
00000711: R17 := mem[R16 + 0x30, el]:u64
00000718: R16 := R16 + 0x30
0000071d: call R17 with noreturn

0000087b: sub deregister_tm_clones(deregister_tm_clones_result)
000008c0: deregister_tm_clones_result :: out u32 = low:32[R0]

000003e4:
000003e8: R0 := 0x20000
000003ef: R0 := R0 + 0x70
000003f5: R1 := 0x20000
000003fc: R1 := R1 + 0x70
00000404: #58 := 1 + ~R0 + R1
00000408: NF := 63:63[#58]
0000040b: VF := 63:63[R1] & 63:63[~R0] & ~63:63[#58] | ~63:63[R1] &
          ~63:63[~R0] & 63:63[#58]
0000040e: ZF := #58 = 0
00000411: CF := 63:63[R1] & 63:63[~R0] | 63:63[~R0] & ~63:63[#58] | 63:63[R1]
          & ~63:63[#58]
0000041f: #63 := ZF
00000419: when #63 goto %00000417
000008b0: goto %00000545

00000545:
00000549: R1 := 0x1F000
00000551: R1 := mem[R1 + 0xFC0, el]:u64
0000055c: #90 := R1 = 0
00000556: when #90 goto %00000417
000008b1: goto %0000055f

00000417:
00000424: call R30 with noreturn

0000055f:
00000565: R16 := R1
0000056a: call R16 with noreturn

0000087e: sub frame_dummy(frame_dummy_result)
000008c1: frame_dummy_result :: out u32 = low:32[R0]

000004d4:
000004d6: call @register_tm_clones with noreturn

0000087f: sub free(free_ptr)
000008c2: free_ptr :: in out u64 = R0

00000317:
00000754: R16 := 0x20000
0000075c: R17 := mem[R16 + 0x48, el]:u64
00000763: R16 := R16 + 0x48
00000768: call R17 with noreturn

00000880: sub main(main_argc, main_argv, main_result)
000008c3: main_argc :: in u32 = low:32[R0]
000008c4: main_argv :: in out u64 = R1
000008c5: main_result :: out u32 = low:32[R0]

0000022c:
00000233: #9 := R31 - 0x30
00000238: mem := mem with [#9, el]:u64 <- R29
0000023d: mem := mem with [#9 + 8, el]:u64 <- R30
00000241: R31 := #9
00000247: R0 := 0xB
0000024e: R29 := R31
00000256: mem := mem with [R31 + 0x20, el]:u64 <- R21
0000025c: R21 := 0x20000
00000264: #14 := R31 + 0x10
00000269: mem := mem with [#14, el]:u64 <- R19
0000026e: mem := mem with [#14 + 8, el]:u64 <- R20
00000273: R30 := 0x7DC
00000276: call @malloc with return %00000278

00000278:
0000027c: R20 := 0x20000
00000283: R20 := R20 + 0x60
0000028b: R19 := R0
00000293: R0 := R20
0000029b: mem := mem with [R21 + 0x78, el]:u64 <- R19
000002a0: R30 := 0x7F4
000002a3: call @strlen with return %000002a5

000002a5:
000002ab: R2 := R0
000002b3: R1 := R20
000002bb: R0 := R19
000002c0: R30 := 0x804
000002c3: call @memcpy with return %000002c5

000002c5:
000002cb: R0 := R19
000002d0: R30 := 0x80C
000002d3: call @puts with return %000002d5

000002d5:
000002db: R19 := mem[R21 + 0x78, el]:u64
000002e3: R0 := R19
000002e8: R30 := 0x818
000002ea: call @strlen with return %000002ec

000002ec:
000002f1: R1 := 1
000002f9: R2 := R0
00000301: R0 := R19
00000306: R30 := 0x828
00000309: call @memset with return %0000030b

0000030b:
00000311: R0 := mem[R21 + 0x78, el]:u64
00000316: R30 := 0x830
00000319: call @free with return %0000031b

0000031b:
00000322: R19 := mem[R31 + 0x10, el]:u64
00000326: R20 := mem[R31 + 0x18, el]:u64
0000032d: R0 := 0
00000335: R21 := mem[R31 + 0x20, el]:u64
0000033f: R29 := mem[R31, el]:u64
00000343: R30 := mem[R31 + 8, el]:u64
00000346: R31 := R31 + 0x30
0000034b: call R30 with noreturn

00000881: sub malloc(malloc_size, malloc_result)
000008c6: malloc_size :: in u64 = R0
000008c7: malloc_result :: out u64 = R0

00000274:
000006d7: R16 := 0x20000
000006df: R17 := mem[R16 + 0x20, el]:u64
000006e6: R16 := R16 + 0x20
000006eb: call R17 with noreturn

00000882: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
000008c8: memcpy_dst :: in out u64 = R0
000008c9: memcpy_src :: in out u64 = R1
000008ca: memcpy_n :: in u64 = R2
000008cb: memcpy_result :: out u64 = R0

000002c1:
00000673: R16 := 0x20000
0000067b: R17 := mem[R16, el]:u64
00000682: R16 := R16
00000687: call R17 with noreturn

00000883: sub memset(memset_buf, memset_c, memset_n, memset_result)
000008cc: memset_buf :: in out u64 = R0
000008cd: memset_c :: in u32 = low:32[R1]
000008ce: memset_n :: in u64 = R2
000008cf: memset_result :: out u64 = R0

00000307:
000006f0: R16 := 0x20000
000006f8: R17 := mem[R16 + 0x28, el]:u64
000006ff: R16 := R16 + 0x28
00000704: call R17 with noreturn

00000884: sub puts(puts_s, puts_result)
000008d0: puts_s :: in u64 = R0
000008d1: puts_result :: out u32 = low:32[R0]

000002d1:
0000073b: R16 := 0x20000
00000743: R17 := mem[R16 + 0x40, el]:u64
0000074a: R16 := R16 + 0x40
0000074f: call R17 with noreturn

00000885: sub register_tm_clones(register_tm_clones_result)
000008d2: register_tm_clones_result :: out u32 = low:32[R0]

00000426:
0000042a: R0 := 0x20000
00000431: R0 := R0 + 0x70
00000437: R1 := 0x20000
0000043e: R1 := R1 + 0x70
00000446: R1 := R1 - R0
0000044d: R2 := R1 >> 0x3F
00000455: R1 := R2 + (R1 ~>> 3)
0000045c: R1 := R1 >> 1
00000468: #72 := R1 = 0
00000462: when #72 goto %00000460
000008b2: goto %0000051e

0000051e:
00000522: R2 := 0x1F000
0000052a: R2 := mem[R2 + 0xFE0, el]:u64
00000535: #85 := R2 = 0
0000052f: when #85 goto %00000460
000008b3: goto %00000538

00000460:
0000046d: call R30 with noreturn

00000538:
0000053e: R16 := R2
00000543: call R16 with noreturn

00000888: sub strlen(strlen_s, strlen_result)
000008d3: strlen_s :: in u64 = R0
000008d4: strlen_result :: out u64 = R0

000002a1:
0000068c: R16 := 0x20000
00000694: R17 := mem[R16 + 8, el]:u64
0000069b: R16 := R16 + 8
000006a0: call R17 with noreturn
