00000826: program
000007df: sub __cxa_finalize(__cxa_finalize_result)
00000827: __cxa_finalize_result :: out u32 = low:32[R0]

000004c3:
00000647: R16 := 0x20000
0000064e: R17 := mem[R16 + 0x18, el]:u64
00000654: R16 := R16 + 0x18
00000659: call R17 with noreturn

000007e0: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000828: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000431:
00000435: #6 := R31 - 0x20
0000043b: mem := mem with [#6, el]:u64 <- R29
00000441: mem := mem with [#6 + 8, el]:u64 <- R30
00000445: R31 := #6
0000044b: R29 := R31
00000453: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000458: R19 := 0x20000
0000045f: R0 := pad:64[mem[R19 + 0x70]]
00000465: when 0:0[R0] goto %00000463
0000081c: goto %0000048c

0000048c:
0000048f: R0 := 0x1F000
00000496: R0 := mem[R0 + 0xFC8, el]:u64
0000049c: when R0 = 0 goto %0000049a
0000081d: goto %000004b3

000004b3:
000004b6: R0 := 0x20000
000004bd: R0 := mem[R0 + 0x58, el]:u64
000004c2: R30 := 0x970
000004c5: call @__cxa_finalize with return %0000049a

0000049a:
000004a2: R30 := 0x974
000004a4: call @deregister_tm_clones with return %000004a6

000004a6:
000004a9: R0 := 1
000004b1: mem := mem with [R19 + 0x70] <- 7:0[R0]
0000081e: goto %00000463

00000463:
0000046d: R19 := mem[R31 + 0x10, el]:u64
00000474: R29 := mem[R31, el]:u64
00000479: R30 := mem[R31 + 8, el]:u64
0000047d: R31 := R31 + 0x20
00000482: call R30 with noreturn

000007e4: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000829: __libc_start_main_main :: in u64 = R0
0000082a: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000082b: __libc_start_main_arg3 :: in out u64 = R2
0000082c: __libc_start_main_auxv :: in out u64 = R3
0000082d: __libc_start_main_result :: out u32 = low:32[R0]

0000038a:
00000631: R16 := 0x20000
00000638: R17 := mem[R16 + 0x10, el]:u64
0000063e: R16 := R16 + 0x10
00000643: call R17 with noreturn

000007e5: sub _fini(_fini_result)
0000082e: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000007e6: sub _init(_init_result)
0000082f: _init_result :: out u32 = low:32[R0]

000006f9:
000006ff: #8 := R31 - 0x10
00000705: mem := mem with [#8, el]:u64 <- R29
0000070b: mem := mem with [#8 + 8, el]:u64 <- R30
0000070f: R31 := #8
00000715: R29 := R31
0000071a: R30 := 0x6E8
0000071c: call @call_weak_fn with return %0000071e

0000071e:
00000723: R29 := mem[R31, el]:u64
00000728: R30 := mem[R31 + 8, el]:u64
0000072c: R31 := R31 + 0x10
00000731: call R30 with noreturn

000007e7: sub _start(_start_result)
00000830: _start_result :: out u32 = low:32[R0]

0000034b:
00000350: R29 := 0
00000355: R30 := 0
0000035b: R5 := R0
00000362: R1 := mem[R31, el]:u64
00000368: R2 := R31 + 8
0000036e: R6 := R31
00000373: R0 := 0x1F000
0000037a: R0 := mem[R0 + 0xFD8, el]:u64
0000037f: R3 := 0
00000384: R4 := 0
00000389: R30 := 0x8B0
0000038c: call @__libc_start_main with return %0000038e

0000038e:
00000391: R30 := 0x8B4
00000394: call @abort with return %0000081f

0000081f:
00000820: call @call_weak_fn with noreturn

000007ea: sub abort()


00000392:
0000069f: R16 := 0x20000
000006a6: R17 := mem[R16 + 0x38, el]:u64
000006ac: R16 := R16 + 0x38
000006b1: call R17 with noreturn

000007eb: sub call_weak_fn(call_weak_fn_result)
00000831: call_weak_fn_result :: out u32 = low:32[R0]

00000396:
00000399: R0 := 0x1F000
000003a0: R0 := mem[R0 + 0xFD0, el]:u64
000003a6: when R0 = 0 goto %000003a4
00000821: goto %00000503

000003a4:
000003ac: call R30 with noreturn

00000503:
00000506: goto @__gmon_start__

00000504:
00000689: R16 := 0x20000
00000690: R17 := mem[R16 + 0x30, el]:u64
00000696: R16 := R16 + 0x30
0000069b: call R17 with noreturn

000007ed: sub deregister_tm_clones(deregister_tm_clones_result)
00000832: deregister_tm_clones_result :: out u32 = low:32[R0]

000003b2:
000003b5: R0 := 0x20000
000003bb: R0 := R0 + 0x70
000003c0: R1 := 0x20000
000003c6: R1 := R1 + 0x70
000003cc: #4 := ~R0
000003d1: #5 := R1 + ~R0
000003d7: VF := extend:65[#5 + 1] <> extend:65[R1] + extend:65[#4] + 1
000003dd: CF := pad:65[#5 + 1] <> pad:65[R1] + pad:65[#4] + 1
000003e1: ZF := #5 + 1 = 0
000003e5: NF := 63:63[#5 + 1]
000003eb: when ZF goto %000003e9
00000822: goto %000004e5

000004e5:
000004e8: R1 := 0x1F000
000004ef: R1 := mem[R1 + 0xFC0, el]:u64
000004f4: when R1 = 0 goto %000003e9
00000823: goto %000004f8

000003e9:
000003f1: call R30 with noreturn

000004f8:
000004fc: R16 := R1
00000501: call R16 with noreturn

000007f0: sub frame_dummy(frame_dummy_result)
00000833: frame_dummy_result :: out u32 = low:32[R0]

00000488:
0000048a: call @register_tm_clones with noreturn

000007f1: sub free(free_ptr)
00000834: free_ptr :: in out u64 = R0

000002f8:
000006cb: R16 := 0x20000
000006d2: R17 := mem[R16 + 0x48, el]:u64
000006d8: R16 := R16 + 0x48
000006dd: call R17 with noreturn

000007f2: sub main(main_argc, main_argv, main_result)
00000835: main_argc :: in u32 = low:32[R0]
00000836: main_argv :: in out u64 = R1
00000837: main_result :: out u32 = low:32[R0]

00000229:
0000022d: #1 := R31 - 0x30
00000233: mem := mem with [#1, el]:u64 <- R29
00000239: mem := mem with [#1 + 8, el]:u64 <- R30
0000023d: R31 := #1
00000242: R0 := 0xB
00000248: R29 := R31
00000250: mem := mem with [R31 + 0x20, el]:u64 <- R21
00000255: R21 := 0x20000
0000025b: #2 := R31 + 0x10
00000261: mem := mem with [#2, el]:u64 <- R19
00000267: mem := mem with [#2 + 8, el]:u64 <- R20
0000026c: R30 := 0x7DC
0000026f: call @malloc with return %00000271

00000271:
00000274: R20 := 0x20000
0000027a: R20 := R20 + 0x60
00000280: R19 := R0
00000286: R0 := R20
0000028e: mem := mem with [R21 + 0x78, el]:u64 <- R19
00000293: R30 := 0x7F4
00000296: call @strlen with return %00000298

00000298:
0000029c: R2 := R0
000002a2: R1 := R20
000002a8: R0 := R19
000002ad: R30 := 0x804
000002b0: call @memcpy with return %000002b2

000002b2:
000002b6: R0 := R19
000002bb: R30 := 0x80C
000002be: call @puts with return %000002c0

000002c0:
000002c5: R19 := mem[R21 + 0x78, el]:u64
000002cb: R0 := R19
000002d0: R30 := 0x818
000002d2: call @strlen with return %000002d4

000002d4:
000002d7: R1 := 1
000002dd: R2 := R0
000002e3: R0 := R19
000002e8: R30 := 0x828
000002eb: call @memset with return %000002ed

000002ed:
000002f2: R0 := mem[R21 + 0x78, el]:u64
000002f7: R30 := 0x830
000002fa: call @free with return %000002fc

000002fc:
00000300: #3 := R31 + 0x10
00000305: R19 := mem[#3, el]:u64
0000030a: R20 := mem[#3 + 8, el]:u64
0000030f: R0 := 0
00000316: R21 := mem[R31 + 0x20, el]:u64
0000031d: R29 := mem[R31, el]:u64
00000322: R30 := mem[R31 + 8, el]:u64
00000326: R31 := R31 + 0x30
0000032b: call R30 with noreturn

000007f3: sub malloc(malloc_size, malloc_result)
00000838: malloc_size :: in u64 = R0
00000839: malloc_result :: out u64 = R0

0000026d:
0000065d: R16 := 0x20000
00000664: R17 := mem[R16 + 0x20, el]:u64
0000066a: R16 := R16 + 0x20
0000066f: call R17 with noreturn

000007f4: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
0000083a: memcpy_dst :: in out u64 = R0
0000083b: memcpy_src :: in out u64 = R1
0000083c: memcpy_n :: in u64 = R2
0000083d: memcpy_result :: out u64 = R0

000002ae:
00000605: R16 := 0x20000
0000060c: R17 := mem[R16, el]:u64
00000612: R16 := R16
00000617: call R17 with noreturn

000007f5: sub memset(memset_buf, memset_c, memset_n, memset_result)
0000083e: memset_buf :: in out u64 = R0
0000083f: memset_c :: in u32 = low:32[R1]
00000840: memset_n :: in u64 = R2
00000841: memset_result :: out u64 = R0

000002e9:
00000673: R16 := 0x20000
0000067a: R17 := mem[R16 + 0x28, el]:u64
00000680: R16 := R16 + 0x28
00000685: call R17 with noreturn

000007f6: sub puts(puts_s, puts_result)
00000842: puts_s :: in u64 = R0
00000843: puts_result :: out u32 = low:32[R0]

000002bc:
000006b5: R16 := 0x20000
000006bc: R17 := mem[R16 + 0x40, el]:u64
000006c2: R16 := R16 + 0x40
000006c7: call R17 with noreturn

000007f7: sub register_tm_clones(register_tm_clones_result)
00000844: register_tm_clones_result :: out u32 = low:32[R0]

000003f3:
000003f6: R0 := 0x20000
000003fc: R0 := R0 + 0x70
00000401: R1 := 0x20000
00000407: R1 := R1 + 0x70
0000040e: R1 := R1 + ~R0 + 1
00000414: R2 := 0.63:63[R1]
0000041b: R1 := R2 + (R1 ~>> 3)
00000421: R1 := extend:64[63:1[R1]]
00000427: when R1 = 0 goto %00000425
00000824: goto %000004c7

000004c7:
000004ca: R2 := 0x1F000
000004d1: R2 := mem[R2 + 0xFE0, el]:u64
000004d6: when R2 = 0 goto %00000425
00000825: goto %000004da

00000425:
0000042d: call R30 with noreturn

000004da:
000004de: R16 := R2
000004e3: call R16 with noreturn

000007fa: sub strlen(strlen_s, strlen_result)
00000845: strlen_s :: in u64 = R0
00000846: strlen_result :: out u64 = R0

00000294:
0000061b: R16 := 0x20000
00000622: R17 := mem[R16 + 8, el]:u64
00000628: R16 := R16 + 8
0000062d: call R17 with noreturn
