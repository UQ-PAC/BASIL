00000826: program
000007e2: sub __cxa_finalize(__cxa_finalize_result)
00000827: __cxa_finalize_result :: out u32 = low:32[R0]

000004c6:
00000634: R16 := 0x10000
0000063b: R17 := mem[R16 + 0xF90, el]:u64
00000641: R16 := R16 + 0xF90
00000646: call R17 with noreturn

000007e3: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000828: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000433:
00000437: #6 := R31 - 0x20
0000043d: mem := mem with [#6, el]:u64 <- R29
00000443: mem := mem with [#6 + 8, el]:u64 <- R30
00000447: R31 := #6
0000044d: R29 := R31
00000455: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000045a: R19 := 0x11000
00000461: R0 := pad:64[mem[R19 + 0x20]]
00000468: when 31:0[R0] <> 0 goto %00000466
0000081c: goto %0000048f

0000048f:
00000492: R0 := 0x10000
00000499: R0 := mem[R0 + 0xFE0, el]:u64
0000049f: when R0 = 0 goto %0000049d
0000081d: goto %000004b6

000004b6:
000004b9: R0 := 0x11000
000004c0: R0 := mem[R0 + 8, el]:u64
000004c5: R30 := 0x970
000004c8: call @__cxa_finalize with return %0000049d

0000049d:
000004a5: R30 := 0x974
000004a7: call @deregister_tm_clones with return %000004a9

000004a9:
000004ac: R0 := 1
000004b4: mem := mem with [R19 + 0x20] <- 7:0[R0]
0000081e: goto %00000466

00000466:
00000470: R19 := mem[R31 + 0x10, el]:u64
00000477: R29 := mem[R31, el]:u64
0000047c: R30 := mem[R31 + 8, el]:u64
00000480: R31 := R31 + 0x20
00000485: call R30 with noreturn

000007e7: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000829: __libc_start_main_main :: in u64 = R0
0000082a: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000082b: __libc_start_main_arg3 :: in out u64 = R2
0000082c: __libc_start_main_auxv :: in out u64 = R3
0000082d: __libc_start_main_result :: out u32 = low:32[R0]

0000038c:
0000061e: R16 := 0x10000
00000625: R17 := mem[R16 + 0xF88, el]:u64
0000062b: R16 := R16 + 0xF88
00000630: call R17 with noreturn

000007e8: sub __memcpy_chk(__memcpy_chk_result)
0000082e: __memcpy_chk_result :: out u32 = low:32[R0]

000002b2:
0000064a: R16 := 0x10000
00000651: R17 := mem[R16 + 0xF98, el]:u64
00000657: R16 := R16 + 0xF98
0000065c: call R17 with noreturn

000007e9: sub _fini(_fini_result)
0000082f: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000007ea: sub _init(_init_result)
00000830: _init_result :: out u32 = low:32[R0]

000006fc:
00000702: #8 := R31 - 0x10
00000708: mem := mem with [#8, el]:u64 <- R29
0000070e: mem := mem with [#8 + 8, el]:u64 <- R30
00000712: R31 := #8
00000718: R29 := R31
0000071d: R30 := 0x6E8
0000071f: call @call_weak_fn with return %00000721

00000721:
00000726: R29 := mem[R31, el]:u64
0000072b: R30 := mem[R31 + 8, el]:u64
0000072f: R31 := R31 + 0x10
00000734: call R30 with noreturn

000007eb: sub _start(_start_result)
00000831: _start_result :: out u32 = low:32[R0]

0000034d:
00000352: R29 := 0
00000357: R30 := 0
0000035d: R5 := R0
00000364: R1 := mem[R31, el]:u64
0000036a: R2 := R31 + 8
00000370: R6 := R31
00000375: R0 := 0x10000
0000037c: R0 := mem[R0 + 0xFF0, el]:u64
00000381: R3 := 0
00000386: R4 := 0
0000038b: R30 := 0x8B0
0000038e: call @__libc_start_main with return %00000390

00000390:
00000393: R30 := 0x8B4
00000396: call @abort with return %0000081f

0000081f:
00000820: call @call_weak_fn with noreturn

000007ee: sub abort()


00000394:
000006a2: R16 := 0x10000
000006a9: R17 := mem[R16 + 0xFB8, el]:u64
000006af: R16 := R16 + 0xFB8
000006b4: call R17 with noreturn

000007ef: sub call_weak_fn(call_weak_fn_result)
00000832: call_weak_fn_result :: out u32 = low:32[R0]

00000398:
0000039b: R0 := 0x10000
000003a2: R0 := mem[R0 + 0xFE8, el]:u64
000003a8: when R0 = 0 goto %000003a6
00000821: goto %00000506

000003a6:
000003ae: call R30 with noreturn

00000506:
00000509: goto @__gmon_start__

00000507:
0000068c: R16 := 0x10000
00000693: R17 := mem[R16 + 0xFB0, el]:u64
00000699: R16 := R16 + 0xFB0
0000069e: call R17 with noreturn

000007f1: sub deregister_tm_clones(deregister_tm_clones_result)
00000833: deregister_tm_clones_result :: out u32 = low:32[R0]

000003b4:
000003b7: R0 := 0x11000
000003bd: R0 := R0 + 0x20
000003c2: R1 := 0x11000
000003c8: R1 := R1 + 0x20
000003ce: #4 := ~R0
000003d3: #5 := R1 + ~R0
000003d9: VF := extend:65[#5 + 1] <> extend:65[R1] + extend:65[#4] + 1
000003df: CF := pad:65[#5 + 1] <> pad:65[R1] + pad:65[#4] + 1
000003e3: ZF := #5 + 1 = 0
000003e7: NF := 63:63[#5 + 1]
000003ed: when ZF goto %000003eb
00000822: goto %000004e8

000004e8:
000004eb: R1 := 0x10000
000004f2: R1 := mem[R1 + 0xFD8, el]:u64
000004f7: when R1 = 0 goto %000003eb
00000823: goto %000004fb

000003eb:
000003f3: call R30 with noreturn

000004fb:
000004ff: R16 := R1
00000504: call R16 with noreturn

000007f4: sub frame_dummy(frame_dummy_result)
00000834: frame_dummy_result :: out u32 = low:32[R0]

0000048b:
0000048d: call @register_tm_clones with noreturn

000007f5: sub free(free_ptr)
00000835: free_ptr :: in out u64 = R0

000002fc:
000006ce: R16 := 0x10000
000006d5: R17 := mem[R16 + 0xFC8, el]:u64
000006db: R16 := R16 + 0xFC8
000006e0: call R17 with noreturn

000007f6: sub main(main_argc, main_argv, main_result)
00000836: main_argc :: in u32 = low:32[R0]
00000837: main_argv :: in out u64 = R1
00000838: main_result :: out u32 = low:32[R0]

00000228:
0000022c: #1 := R31 - 0x30
00000232: mem := mem with [#1, el]:u64 <- R29
00000238: mem := mem with [#1 + 8, el]:u64 <- R30
0000023c: R31 := #1
00000241: R0 := 0xB
00000247: R29 := R31
0000024f: mem := mem with [R31 + 0x20, el]:u64 <- R21
00000254: R21 := 0x11000
0000025a: #2 := R31 + 0x10
00000260: mem := mem with [#2, el]:u64 <- R19
00000266: mem := mem with [#2 + 8, el]:u64 <- R20
0000026b: R30 := 0x7DC
0000026e: call @malloc with return %00000270

00000270:
00000273: R20 := 0x11000
00000279: R20 := R20 + 0x10
0000027f: R19 := R0
00000285: R0 := R20
0000028d: mem := mem with [R21 + 0x28, el]:u64 <- R19
00000292: R30 := 0x7F4
00000295: call @strlen with return %00000297

00000297:
0000029b: R2 := R0
000002a1: R1 := R20
000002a6: R3 := 0xB
000002ac: R0 := R19
000002b1: R30 := 0x808
000002b4: call @__memcpy_chk with return %000002b6

000002b6:
000002ba: R0 := R19
000002bf: R30 := 0x810
000002c2: call @puts with return %000002c4

000002c4:
000002c9: R19 := mem[R21 + 0x28, el]:u64
000002cf: R0 := R19
000002d4: R30 := 0x81C
000002d6: call @strlen with return %000002d8

000002d8:
000002db: R1 := 1
000002e1: R2 := R0
000002e7: R0 := R19
000002ec: R30 := 0x82C
000002ef: call @memset with return %000002f1

000002f1:
000002f6: R0 := mem[R21 + 0x28, el]:u64
000002fb: R30 := 0x834
000002fe: call @free with return %00000300

00000300:
00000303: R0 := 0
00000309: #3 := R31 + 0x10
0000030e: R19 := mem[#3, el]:u64
00000313: R20 := mem[#3 + 8, el]:u64
0000031a: R21 := mem[R31 + 0x20, el]:u64
00000321: R29 := mem[R31, el]:u64
00000326: R30 := mem[R31 + 8, el]:u64
0000032a: R31 := R31 + 0x30
0000032f: call R30 with noreturn

000007f7: sub malloc(malloc_size, malloc_result)
00000839: malloc_size :: in u64 = R0
0000083a: malloc_result :: out u64 = R0

0000026c:
00000660: R16 := 0x10000
00000667: R17 := mem[R16 + 0xFA0, el]:u64
0000066d: R16 := R16 + 0xFA0
00000672: call R17 with noreturn

000007f8: sub memset(memset_buf, memset_c, memset_n, memset_result)
0000083b: memset_buf :: in out u64 = R0
0000083c: memset_c :: in u32 = low:32[R1]
0000083d: memset_n :: in u64 = R2
0000083e: memset_result :: out u64 = R0

000002ed:
00000676: R16 := 0x10000
0000067d: R17 := mem[R16 + 0xFA8, el]:u64
00000683: R16 := R16 + 0xFA8
00000688: call R17 with noreturn

000007f9: sub puts(puts_s, puts_result)
0000083f: puts_s :: in u64 = R0
00000840: puts_result :: out u32 = low:32[R0]

000002c0:
000006b8: R16 := 0x10000
000006bf: R17 := mem[R16 + 0xFC0, el]:u64
000006c5: R16 := R16 + 0xFC0
000006ca: call R17 with noreturn

000007fa: sub register_tm_clones(register_tm_clones_result)
00000841: register_tm_clones_result :: out u32 = low:32[R0]

000003f5:
000003f8: R0 := 0x11000
000003fe: R0 := R0 + 0x20
00000403: R1 := 0x11000
00000409: R1 := R1 + 0x20
00000410: R1 := R1 + ~R0 + 1
00000416: R2 := 0.63:63[R1]
0000041d: R1 := R2 + (R1 ~>> 3)
00000423: R1 := extend:64[63:1[R1]]
00000429: when R1 = 0 goto %00000427
00000824: goto %000004ca

000004ca:
000004cd: R2 := 0x10000
000004d4: R2 := mem[R2 + 0xFF8, el]:u64
000004d9: when R2 = 0 goto %00000427
00000825: goto %000004dd

00000427:
0000042f: call R30 with noreturn

000004dd:
000004e1: R16 := R2
000004e6: call R16 with noreturn

000007fd: sub strlen(strlen_s, strlen_result)
00000842: strlen_s :: in u64 = R0
00000843: strlen_result :: out u64 = R0

00000293:
00000608: R16 := 0x10000
0000060f: R17 := mem[R16 + 0xF80, el]:u64
00000615: R16 := R16 + 0xF80
0000061a: call R17 with noreturn
