00000863: program
0000081c: sub __cxa_finalize(__cxa_finalize_result)
00000864: __cxa_finalize_result :: out u32 = low:32[R0]

000004fe:
00000682: R16 := 0x20000
00000689: R17 := mem[R16 + 0x18, el]:u64
0000068f: R16 := R16 + 0x18
00000694: call R17 with noreturn

0000081d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000865: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000317:
0000031b: #3 := R31 - 0x20
00000321: mem := mem with [#3, el]:u64 <- R29
00000327: mem := mem with [#3 + 8, el]:u64 <- R30
0000032b: R31 := #3
00000331: R29 := R31
00000339: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000033e: R19 := 0x20000
00000345: R0 := pad:64[mem[R19 + 0x78]]
0000034b: when 0:0[R0] goto %00000349
00000859: goto %000004c7

000004c7:
000004ca: R0 := 0x1F000
000004d1: R0 := mem[R0 + 0xFC8, el]:u64
000004d7: when R0 = 0 goto %000004d5
0000085a: goto %000004ee

000004ee:
000004f1: R0 := 0x20000
000004f8: R0 := mem[R0 + 0x58, el]:u64
000004fd: R30 := 0x8B0
00000500: call @__cxa_finalize with return %000004d5

000004d5:
000004dd: R30 := 0x8B4
000004df: call @deregister_tm_clones with return %000004e1

000004e1:
000004e4: R0 := 1
000004ec: mem := mem with [R19 + 0x78] <- 7:0[R0]
0000085b: goto %00000349

00000349:
00000353: R19 := mem[R31 + 0x10, el]:u64
0000035a: R29 := mem[R31, el]:u64
0000035f: R30 := mem[R31 + 8, el]:u64
00000363: R31 := R31 + 0x20
00000368: call R30 with noreturn

00000821: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000866: __libc_start_main_main :: in u64 = R0
00000867: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000868: __libc_start_main_arg3 :: in out u64 = R2
00000869: __libc_start_main_auxv :: in out u64 = R3
0000086a: __libc_start_main_result :: out u32 = low:32[R0]

00000270:
0000066c: R16 := 0x20000
00000673: R17 := mem[R16 + 0x10, el]:u64
00000679: R16 := R16 + 0x10
0000067e: call R17 with noreturn

00000822: sub _fini(_fini_result)
0000086b: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000823: sub _init(_init_result)
0000086c: _init_result :: out u32 = low:32[R0]

00000734:
0000073a: #6 := R31 - 0x10
00000740: mem := mem with [#6, el]:u64 <- R29
00000746: mem := mem with [#6 + 8, el]:u64 <- R30
0000074a: R31 := #6
00000750: R29 := R31
00000755: R30 := 0x6E8
00000757: call @call_weak_fn with return %00000759

00000759:
0000075e: R29 := mem[R31, el]:u64
00000763: R30 := mem[R31 + 8, el]:u64
00000767: R31 := R31 + 0x10
0000076c: call R30 with noreturn

00000824: sub _start(_start_result)
0000086d: _start_result :: out u32 = low:32[R0]

00000231:
00000236: R29 := 0
0000023b: R30 := 0
00000241: R5 := R0
00000248: R1 := mem[R31, el]:u64
0000024e: R2 := R31 + 8
00000254: R6 := R31
00000259: R0 := 0x1F000
00000260: R0 := mem[R0 + 0xFD8, el]:u64
00000265: R3 := 0
0000026a: R4 := 0
0000026f: R30 := 0x7F0
00000272: call @__libc_start_main with return %00000274

00000274:
00000277: R30 := 0x7F4
0000027a: call @abort with return %0000085c

0000085c:
0000085d: call @call_weak_fn with noreturn

00000827: sub abort()


00000278:
000006da: R16 := 0x20000
000006e1: R17 := mem[R16 + 0x38, el]:u64
000006e7: R16 := R16 + 0x38
000006ec: call R17 with noreturn

00000828: sub call_weak_fn(call_weak_fn_result)
0000086e: call_weak_fn_result :: out u32 = low:32[R0]

0000027c:
0000027f: R0 := 0x1F000
00000286: R0 := mem[R0 + 0xFD0, el]:u64
0000028c: when R0 = 0 goto %0000028a
0000085e: goto %0000053e

0000028a:
00000292: call R30 with noreturn

0000053e:
00000541: goto @__gmon_start__

0000053f:
000006c4: R16 := 0x20000
000006cb: R17 := mem[R16 + 0x30, el]:u64
000006d1: R16 := R16 + 0x30
000006d6: call R17 with noreturn

0000082a: sub deregister_tm_clones(deregister_tm_clones_result)
0000086f: deregister_tm_clones_result :: out u32 = low:32[R0]

00000298:
0000029b: R0 := 0x20000
000002a1: R0 := R0 + 0x78
000002a6: R1 := 0x20000
000002ac: R1 := R1 + 0x78
000002b2: #1 := ~R0
000002b7: #2 := R1 + ~R0
000002bd: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002c3: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002c7: ZF := #2 + 1 = 0
000002cb: NF := 63:63[#2 + 1]
000002d1: when ZF goto %000002cf
0000085f: goto %00000520

00000520:
00000523: R1 := 0x1F000
0000052a: R1 := mem[R1 + 0xFC0, el]:u64
0000052f: when R1 = 0 goto %000002cf
00000860: goto %00000533

000002cf:
000002d7: call R30 with noreturn

00000533:
00000537: R16 := R1
0000053c: call R16 with noreturn

0000082d: sub frame_dummy(frame_dummy_result)
00000870: frame_dummy_result :: out u32 = low:32[R0]

0000036e:
00000370: call @register_tm_clones with noreturn

0000082e: sub free(free_ptr)
00000871: free_ptr :: in out u64 = R0

000004a2:
00000706: R16 := 0x20000
0000070d: R17 := mem[R16 + 0x48, el]:u64
00000713: R16 := R16 + 0x48
00000718: call R17 with noreturn

0000082f: sub main(main_argc, main_argv, main_result)
00000872: main_argc :: in u32 = low:32[R0]
00000873: main_argv :: in out u64 = R1
00000874: main_result :: out u32 = low:32[R0]

00000372:
00000376: #4 := R31 - 0x30
0000037c: mem := mem with [#4, el]:u64 <- R29
00000382: mem := mem with [#4 + 8, el]:u64 <- R30
00000386: R31 := #4
0000038c: R29 := R31
00000394: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000039b: mem := mem with [R31 + 0x28, el]:u64 <- 0
000003a2: mem := mem with [R31 + 0x20, el]:u64 <- 0
000003a7: R0 := 0xB
000003ac: R30 := 0x8F0
000003af: call @malloc with return %000003b1

000003b1:
000003b5: R1 := R0
000003ba: R0 := 0x20000
000003c0: R0 := R0 + 0x80
000003c8: mem := mem with [R0, el]:u64 <- R1
000003cd: R0 := 0x20000
000003d3: R0 := R0 + 0x80
000003da: R19 := mem[R0, el]:u64
000003df: R0 := 0x20000
000003e5: R0 := R0 + 0x68
000003ea: R30 := 0x918
000003ed: call @strlen with return %000003ef

000003ef:
000003f3: R2 := R0
000003f8: R0 := 0x20000
000003fe: R1 := R0 + 0x68
00000404: R0 := R19
00000409: R30 := 0x92C
0000040c: call @memcpy with return %0000040e

0000040e:
00000411: R0 := 0x20000
00000417: R0 := R0 + 0x80
0000041e: R0 := mem[R0, el]:u64
00000423: R30 := 0x93C
00000426: call @puts with return %00000428

00000428:
0000042b: R0 := 0x20000
00000431: R0 := R0 + 0x80
00000438: R0 := mem[R0, el]:u64
0000043e: R0 := R0 + 4
00000446: mem := mem with [R31 + 0x28, el]:u64 <- R0
0000044b: R0 := 0x20000
00000451: R0 := R0 + 0x80
00000458: R19 := mem[R0, el]:u64
0000045d: R0 := 0x20000
00000463: R0 := R0 + 0x80
0000046a: R0 := mem[R0, el]:u64
0000046f: R30 := 0x96C
00000471: call @strlen with return %00000473

00000473:
00000477: R2 := R0
0000047c: R1 := 1
00000482: R0 := R19
00000487: R30 := 0x97C
0000048a: call @memset with return %0000048c

0000048c:
0000048f: R0 := 0x20000
00000495: R0 := R0 + 0x80
0000049c: R0 := mem[R0, el]:u64
000004a1: R30 := 0x98C
000004a4: call @free with return %000004a6

000004a6:
000004a9: R0 := 0
000004b0: R19 := mem[R31 + 0x10, el]:u64
000004b7: R29 := mem[R31, el]:u64
000004bc: R30 := mem[R31 + 8, el]:u64
000004c0: R31 := R31 + 0x30
000004c5: call R30 with noreturn

00000830: sub malloc(malloc_size, malloc_result)
00000875: malloc_size :: in u64 = R0
00000876: malloc_result :: out u64 = R0

000003ad:
00000698: R16 := 0x20000
0000069f: R17 := mem[R16 + 0x20, el]:u64
000006a5: R16 := R16 + 0x20
000006aa: call R17 with noreturn

00000831: sub memcpy(memcpy_dst, memcpy_src, memcpy_n, memcpy_result)
00000877: memcpy_dst :: in out u64 = R0
00000878: memcpy_src :: in out u64 = R1
00000879: memcpy_n :: in u64 = R2
0000087a: memcpy_result :: out u64 = R0

0000040a:
00000640: R16 := 0x20000
00000647: R17 := mem[R16, el]:u64
0000064d: R16 := R16
00000652: call R17 with noreturn

00000832: sub memset(memset_buf, memset_c, memset_n, memset_result)
0000087b: memset_buf :: in out u64 = R0
0000087c: memset_c :: in u32 = low:32[R1]
0000087d: memset_n :: in u64 = R2
0000087e: memset_result :: out u64 = R0

00000488:
000006ae: R16 := 0x20000
000006b5: R17 := mem[R16 + 0x28, el]:u64
000006bb: R16 := R16 + 0x28
000006c0: call R17 with noreturn

00000833: sub puts(puts_s, puts_result)
0000087f: puts_s :: in u64 = R0
00000880: puts_result :: out u32 = low:32[R0]

00000424:
000006f0: R16 := 0x20000
000006f7: R17 := mem[R16 + 0x40, el]:u64
000006fd: R16 := R16 + 0x40
00000702: call R17 with noreturn

00000834: sub register_tm_clones(register_tm_clones_result)
00000881: register_tm_clones_result :: out u32 = low:32[R0]

000002d9:
000002dc: R0 := 0x20000
000002e2: R0 := R0 + 0x78
000002e7: R1 := 0x20000
000002ed: R1 := R1 + 0x78
000002f4: R1 := R1 + ~R0 + 1
000002fa: R2 := 0.63:63[R1]
00000301: R1 := R2 + (R1 ~>> 3)
00000307: R1 := extend:64[63:1[R1]]
0000030d: when R1 = 0 goto %0000030b
00000861: goto %00000502

00000502:
00000505: R2 := 0x1F000
0000050c: R2 := mem[R2 + 0xFE0, el]:u64
00000511: when R2 = 0 goto %0000030b
00000862: goto %00000515

0000030b:
00000313: call R30 with noreturn

00000515:
00000519: R16 := R2
0000051e: call R16 with noreturn

00000837: sub strlen(strlen_s, strlen_result)
00000882: strlen_s :: in u64 = R0
00000883: strlen_result :: out u64 = R0

000003eb:
00000656: R16 := 0x20000
0000065d: R17 := mem[R16 + 8, el]:u64
00000663: R16 := R16 + 8
00000668: call R17 with noreturn
