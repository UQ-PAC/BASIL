000005f0: program
000005ba: sub __cxa_finalize(__cxa_finalize_result)
000005f1: __cxa_finalize_result :: out u32 = low:32[R0]

00000351:
00000456: R16 := 0x10000
0000045d: R17 := mem[R16 + 0xFB8, el]:u64
00000463: R16 := R16 + 0xFB8
00000468: call R17 with noreturn

000005bb: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005f2: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002be:
000002c2: #3 := R31 - 0x20
000002c8: mem := mem with [#3, el]:u64 <- R29
000002ce: mem := mem with [#3 + 8, el]:u64 <- R30
000002d2: R31 := #3
000002d8: R29 := R31
000002e0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002e5: R19 := 0x11000
000002ec: R0 := pad:64[mem[R19 + 0x10]]
000002f3: when 31:0[R0] <> 0 goto %000002f1
000005e4: goto %0000031a

0000031a:
0000031d: R0 := 0x10000
00000324: R0 := mem[R0 + 0xFE0, el]:u64
0000032a: when R0 = 0 goto %00000328
000005e5: goto %00000341

00000341:
00000344: R0 := 0x11000
0000034b: R0 := mem[R0 + 8, el]:u64
00000350: R30 := 0x730
00000353: call @__cxa_finalize with return %00000328

00000328:
00000330: R30 := 0x734
00000332: call @deregister_tm_clones with return %00000334

00000334:
00000337: R0 := 1
0000033f: mem := mem with [R19 + 0x10] <- 7:0[R0]
000005e6: goto %000002f1

000002f1:
000002fb: R19 := mem[R31 + 0x10, el]:u64
00000302: R29 := mem[R31, el]:u64
00000307: R30 := mem[R31 + 8, el]:u64
0000030b: R31 := R31 + 0x20
00000310: call R30 with noreturn

000005bf: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005f3: __libc_start_main_main :: in u64 = R0
000005f4: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005f5: __libc_start_main_arg3 :: in out u64 = R2
000005f6: __libc_start_main_auxv :: in out u64 = R3
000005f7: __libc_start_main_result :: out u32 = low:32[R0]

00000217:
00000440: R16 := 0x10000
00000447: R17 := mem[R16 + 0xFB0, el]:u64
0000044d: R16 := R16 + 0xFB0
00000452: call R17 with noreturn

000005c0: sub _fini(_fini_result)
000005f8: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005c1: sub _init(_init_result)
000005f9: _init_result :: out u32 = low:32[R0]

0000050c:
00000512: #5 := R31 - 0x10
00000518: mem := mem with [#5, el]:u64 <- R29
0000051e: mem := mem with [#5 + 8, el]:u64 <- R30
00000522: R31 := #5
00000528: R29 := R31
0000052d: R30 := 0x590
0000052f: call @call_weak_fn with return %00000531

00000531:
00000536: R29 := mem[R31, el]:u64
0000053b: R30 := mem[R31 + 8, el]:u64
0000053f: R31 := R31 + 0x10
00000544: call R30 with noreturn

000005c2: sub _start(_start_result)
000005fa: _start_result :: out u32 = low:32[R0]

000001d8:
000001dd: R29 := 0
000001e2: R30 := 0
000001e8: R5 := R0
000001ef: R1 := mem[R31, el]:u64
000001f5: R2 := R31 + 8
000001fb: R6 := R31
00000200: R0 := 0x10000
00000207: R0 := mem[R0 + 0xFF0, el]:u64
0000020c: R3 := 0
00000211: R4 := 0
00000216: R30 := 0x670
00000219: call @__libc_start_main with return %0000021b

0000021b:
0000021e: R30 := 0x674
00000221: call @abort with return %000005e7

000005e7:
000005e8: call @call_weak_fn with noreturn

000005c5: sub abort()


0000021f:
00000482: R16 := 0x10000
00000489: R17 := mem[R16 + 0xFC8, el]:u64
0000048f: R16 := R16 + 0xFC8
00000494: call R17 with noreturn

000005c6: sub call_weak_fn(call_weak_fn_result)
000005fb: call_weak_fn_result :: out u32 = low:32[R0]

00000223:
00000226: R0 := 0x10000
0000022d: R0 := mem[R0 + 0xFE8, el]:u64
00000233: when R0 = 0 goto %00000231
000005e9: goto %00000391

00000231:
00000239: call R30 with noreturn

00000391:
00000394: goto @__gmon_start__

00000392:
0000046c: R16 := 0x10000
00000473: R17 := mem[R16 + 0xFC0, el]:u64
00000479: R16 := R16 + 0xFC0
0000047e: call R17 with noreturn

000005c8: sub deregister_tm_clones(deregister_tm_clones_result)
000005fc: deregister_tm_clones_result :: out u32 = low:32[R0]

0000023f:
00000242: R0 := 0x11000
00000248: R0 := R0 + 0x10
0000024d: R1 := 0x11000
00000253: R1 := R1 + 0x10
00000259: #1 := ~R0
0000025e: #2 := R1 + ~R0
00000264: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000026a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000026e: ZF := #2 + 1 = 0
00000272: NF := 63:63[#2 + 1]
00000278: when ZF goto %00000276
000005ea: goto %00000373

00000373:
00000376: R1 := 0x10000
0000037d: R1 := mem[R1 + 0xFD8, el]:u64
00000382: when R1 = 0 goto %00000276
000005eb: goto %00000386

00000276:
0000027e: call R30 with noreturn

00000386:
0000038a: R16 := R1
0000038f: call R16 with noreturn

000005cb: sub frame_dummy(frame_dummy_result)
000005fd: frame_dummy_result :: out u32 = low:32[R0]

00000316:
00000318: call @register_tm_clones with noreturn

000005cc: sub main(main_argc, main_argv, main_result)
000005fe: main_argc :: in u32 = low:32[R0]
000005ff: main_argv :: in out u64 = R1
00000600: main_result :: out u32 = low:32[R0]

000001a8:
000001ab: R0 := 0x11000
000001b2: R1 := pad:64[mem[R0 + 0x14, el]:u32]
000001b9: when 31:0[R1] <> 0 goto %000001b7
000005ec: goto %00000396

00000396:
00000399: R1 := 1
000003a1: mem := mem with [R0 + 0x14, el]:u32 <- 31:0[R1]
000005ed: goto %000001b7

000001b7:
000001bf: R0 := 0
000001c4: call R30 with noreturn

000005cf: sub register_tm_clones(register_tm_clones_result)
00000601: register_tm_clones_result :: out u32 = low:32[R0]

00000280:
00000283: R0 := 0x11000
00000289: R0 := R0 + 0x10
0000028e: R1 := 0x11000
00000294: R1 := R1 + 0x10
0000029b: R1 := R1 + ~R0 + 1
000002a1: R2 := 0.63:63[R1]
000002a8: R1 := R2 + (R1 ~>> 3)
000002ae: R1 := extend:64[63:1[R1]]
000002b4: when R1 = 0 goto %000002b2
000005ee: goto %00000355

00000355:
00000358: R2 := 0x10000
0000035f: R2 := mem[R2 + 0xFF8, el]:u64
00000364: when R2 = 0 goto %000002b2
000005ef: goto %00000368

000002b2:
000002ba: call R30 with noreturn

00000368:
0000036c: R16 := R2
00000371: call R16 with noreturn
