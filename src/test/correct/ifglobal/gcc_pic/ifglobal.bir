00000593: program
0000055d: sub __cxa_finalize(__cxa_finalize_result)
00000594: __cxa_finalize_result :: out u32 = low:32[R0]

00000362:
0000045a: R16 := 0x20000
00000461: R17 := mem[R16 + 8, el]:u64
00000467: R16 := R16 + 8
0000046c: call R17 with noreturn

0000055e: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000595: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000027b:
0000027f: #3 := R31 - 0x20
00000285: mem := mem with [#3, el]:u64 <- R29
0000028b: mem := mem with [#3 + 8, el]:u64 <- R30
0000028f: R31 := #3
00000295: R29 := R31
0000029d: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002a2: R19 := 0x20000
000002a9: R0 := pad:64[mem[R19 + 0x30]]
000002af: when 0:0[R0] goto %000002ad
00000587: goto %0000032b

0000032b:
0000032e: R0 := 0x1F000
00000335: R0 := mem[R0 + 0xFC0, el]:u64
0000033b: when R0 = 0 goto %00000339
00000588: goto %00000352

00000352:
00000355: R0 := 0x20000
0000035c: R0 := mem[R0 + 0x28, el]:u64
00000361: R30 := 0x730
00000364: call @__cxa_finalize with return %00000339

00000339:
00000341: R30 := 0x734
00000343: call @deregister_tm_clones with return %00000345

00000345:
00000348: R0 := 1
00000350: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000589: goto %000002ad

000002ad:
000002b7: R19 := mem[R31 + 0x10, el]:u64
000002be: R29 := mem[R31, el]:u64
000002c3: R30 := mem[R31 + 8, el]:u64
000002c7: R31 := R31 + 0x20
000002cc: call R30 with noreturn

00000562: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000596: __libc_start_main_main :: in u64 = R0
00000597: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000598: __libc_start_main_arg3 :: in out u64 = R2
00000599: __libc_start_main_auxv :: in out u64 = R3
0000059a: __libc_start_main_result :: out u32 = low:32[R0]

000001d4:
00000444: R16 := 0x20000
0000044b: R17 := mem[R16, el]:u64
00000451: R16 := R16
00000456: call R17 with noreturn

00000563: sub _fini(_fini_result)
0000059b: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000564: sub _init(_init_result)
0000059c: _init_result :: out u32 = low:32[R0]

000004b4:
000004ba: #6 := R31 - 0x10
000004c0: mem := mem with [#6, el]:u64 <- R29
000004c6: mem := mem with [#6 + 8, el]:u64 <- R30
000004ca: R31 := #6
000004d0: R29 := R31
000004d5: R30 := 0x5A8
000004d7: call @call_weak_fn with return %000004d9

000004d9:
000004de: R29 := mem[R31, el]:u64
000004e3: R30 := mem[R31 + 8, el]:u64
000004e7: R31 := R31 + 0x10
000004ec: call R30 with noreturn

00000565: sub _start(_start_result)
0000059d: _start_result :: out u32 = low:32[R0]

00000195:
0000019a: R29 := 0
0000019f: R30 := 0
000001a5: R5 := R0
000001ac: R1 := mem[R31, el]:u64
000001b2: R2 := R31 + 8
000001b8: R6 := R31
000001bd: R0 := 0x1F000
000001c4: R0 := mem[R0 + 0xFD8, el]:u64
000001c9: R3 := 0
000001ce: R4 := 0
000001d3: R30 := 0x670
000001d6: call @__libc_start_main with return %000001d8

000001d8:
000001db: R30 := 0x674
000001de: call @abort with return %0000058a

0000058a:
0000058b: call @call_weak_fn with noreturn

00000568: sub abort()


000001dc:
00000486: R16 := 0x20000
0000048d: R17 := mem[R16 + 0x18, el]:u64
00000493: R16 := R16 + 0x18
00000498: call R17 with noreturn

00000569: sub call_weak_fn(call_weak_fn_result)
0000059e: call_weak_fn_result :: out u32 = low:32[R0]

000001e0:
000001e3: R0 := 0x1F000
000001ea: R0 := mem[R0 + 0xFD0, el]:u64
000001f0: when R0 = 0 goto %000001ee
0000058c: goto %000003a2

000001ee:
000001f6: call R30 with noreturn

000003a2:
000003a5: goto @__gmon_start__

000003a3:
00000470: R16 := 0x20000
00000477: R17 := mem[R16 + 0x10, el]:u64
0000047d: R16 := R16 + 0x10
00000482: call R17 with noreturn

0000056b: sub deregister_tm_clones(deregister_tm_clones_result)
0000059f: deregister_tm_clones_result :: out u32 = low:32[R0]

000001fc:
000001ff: R0 := 0x20000
00000205: R0 := R0 + 0x30
0000020a: R1 := 0x20000
00000210: R1 := R1 + 0x30
00000216: #1 := ~R0
0000021b: #2 := R1 + ~R0
00000221: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000227: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000022b: ZF := #2 + 1 = 0
0000022f: NF := 63:63[#2 + 1]
00000235: when ZF goto %00000233
0000058d: goto %00000384

00000384:
00000387: R1 := 0x1F000
0000038e: R1 := mem[R1 + 0xFB8, el]:u64
00000393: when R1 = 0 goto %00000233
0000058e: goto %00000397

00000233:
0000023b: call R30 with noreturn

00000397:
0000039b: R16 := R1
000003a0: call R16 with noreturn

0000056e: sub frame_dummy(frame_dummy_result)
000005a0: frame_dummy_result :: out u32 = low:32[R0]

000002d2:
000002d4: call @register_tm_clones with noreturn

0000056f: sub main(main_argc, main_argv, main_result)
000005a1: main_argc :: in u32 = low:32[R0]
000005a2: main_argv :: in out u64 = R1
000005a3: main_result :: out u32 = low:32[R0]

000002d6:
000002d9: R0 := 0x1F000
000002e0: R0 := mem[R0 + 0xFC8, el]:u64
000002e7: R0 := pad:64[mem[R0, el]:u32]
000002ed: #4 := 31:0[R0] - 1
000002f2: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
000002f7: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
000002fb: ZF := #4 + 1 = 0
000002ff: NF := 31:31[#4 + 1]
00000305: when ZF <> 1 goto %00000303
0000058f: goto %00000312

00000312:
00000315: R0 := 0x1F000
0000031c: R0 := mem[R0 + 0xFC8, el]:u64
00000321: R1 := 1
00000329: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000590: goto %00000303

00000303:
0000030b: R0 := 0
00000310: call R30 with noreturn

00000572: sub register_tm_clones(register_tm_clones_result)
000005a4: register_tm_clones_result :: out u32 = low:32[R0]

0000023d:
00000240: R0 := 0x20000
00000246: R0 := R0 + 0x30
0000024b: R1 := 0x20000
00000251: R1 := R1 + 0x30
00000258: R1 := R1 + ~R0 + 1
0000025e: R2 := 0.63:63[R1]
00000265: R1 := R2 + (R1 ~>> 3)
0000026b: R1 := extend:64[63:1[R1]]
00000271: when R1 = 0 goto %0000026f
00000591: goto %00000366

00000366:
00000369: R2 := 0x1F000
00000370: R2 := mem[R2 + 0xFE0, el]:u64
00000375: when R2 = 0 goto %0000026f
00000592: goto %00000379

0000026f:
00000277: call R30 with noreturn

00000379:
0000037d: R16 := R2
00000382: call R16 with noreturn
