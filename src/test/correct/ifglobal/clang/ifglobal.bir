00000622: program
000005ee: sub __cxa_finalize(__cxa_finalize_result)
00000623: __cxa_finalize_result :: out u32 = low:32[R0]

00000394:
0000048c: R16 := 0x11000
00000493: R17 := mem[R16 + 8, el]:u64
00000499: R16 := R16 + 8
0000049e: call R17 with noreturn

000005ef: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000624: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028a:
0000028e: #3 := R31 - 0x20
00000294: mem := mem with [#3, el]:u64 <- R29
0000029a: mem := mem with [#3 + 8, el]:u64 <- R30
0000029e: R31 := #3
000002a4: R29 := R31
000002ac: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b1: R19 := 0x11000
000002b8: R0 := pad:64[mem[R19 + 0x30]]
000002bf: when 31:0[R0] <> 0 goto %000002bd
00000617: goto %0000035d

0000035d:
00000360: R0 := 0x10000
00000367: R0 := mem[R0 + 0xFC8, el]:u64
0000036d: when R0 = 0 goto %0000036b
00000618: goto %00000384

00000384:
00000387: R0 := 0x11000
0000038e: R0 := mem[R0 + 0x28, el]:u64
00000393: R30 := 0x6F0
00000396: call @__cxa_finalize with return %0000036b

0000036b:
00000373: R30 := 0x6F4
00000375: call @deregister_tm_clones with return %00000377

00000377:
0000037a: R0 := 1
00000382: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000619: goto %000002bd

000002bd:
000002c7: R19 := mem[R31 + 0x10, el]:u64
000002ce: R29 := mem[R31, el]:u64
000002d3: R30 := mem[R31 + 8, el]:u64
000002d7: R31 := R31 + 0x20
000002dc: call R30 with noreturn

000005f3: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000625: __libc_start_main_main :: in u64 = R0
00000626: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000627: __libc_start_main_arg3 :: in out u64 = R2
00000628: __libc_start_main_auxv :: in out u64 = R3
00000629: __libc_start_main_result :: out u32 = low:32[R0]

000001e3:
00000476: R16 := 0x11000
0000047d: R17 := mem[R16, el]:u64
00000483: R16 := R16
00000488: call R17 with noreturn

000005f4: sub _fini(_fini_result)
0000062a: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005f5: sub _init(_init_result)
0000062b: _init_result :: out u32 = low:32[R0]

00000541:
00000547: #6 := R31 - 0x10
0000054d: mem := mem with [#6, el]:u64 <- R29
00000553: mem := mem with [#6 + 8, el]:u64 <- R30
00000557: R31 := #6
0000055d: R29 := R31
00000562: R30 := 0x590
00000564: call @call_weak_fn with return %00000566

00000566:
0000056b: R29 := mem[R31, el]:u64
00000570: R30 := mem[R31 + 8, el]:u64
00000574: R31 := R31 + 0x10
00000579: call R30 with noreturn

000005f6: sub _start(_start_result)
0000062c: _start_result :: out u32 = low:32[R0]

000001a4:
000001a9: R29 := 0
000001ae: R30 := 0
000001b4: R5 := R0
000001bb: R1 := mem[R31, el]:u64
000001c1: R2 := R31 + 8
000001c7: R6 := R31
000001cc: R0 := 0x10000
000001d3: R0 := mem[R0 + 0xFD8, el]:u64
000001d8: R3 := 0
000001dd: R4 := 0
000001e2: R30 := 0x630
000001e5: call @__libc_start_main with return %000001e7

000001e7:
000001ea: R30 := 0x634
000001ed: call @abort with return %0000061a

0000061a:
0000061b: call @call_weak_fn with noreturn

000005f9: sub abort()


000001eb:
000004b8: R16 := 0x11000
000004bf: R17 := mem[R16 + 0x18, el]:u64
000004c5: R16 := R16 + 0x18
000004ca: call R17 with noreturn

000005fa: sub call_weak_fn(call_weak_fn_result)
0000062d: call_weak_fn_result :: out u32 = low:32[R0]

000001ef:
000001f2: R0 := 0x10000
000001f9: R0 := mem[R0 + 0xFD0, el]:u64
000001ff: when R0 = 0 goto %000001fd
0000061c: goto %000003d4

000001fd:
00000205: call R30 with noreturn

000003d4:
000003d7: goto @__gmon_start__

000003d5:
000004a2: R16 := 0x11000
000004a9: R17 := mem[R16 + 0x10, el]:u64
000004af: R16 := R16 + 0x10
000004b4: call R17 with noreturn

000005fc: sub deregister_tm_clones(deregister_tm_clones_result)
0000062e: deregister_tm_clones_result :: out u32 = low:32[R0]

0000020b:
0000020e: R0 := 0x11000
00000214: R0 := R0 + 0x30
00000219: R1 := 0x11000
0000021f: R1 := R1 + 0x30
00000225: #1 := ~R0
0000022a: #2 := R1 + ~R0
00000230: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000236: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023a: ZF := #2 + 1 = 0
0000023e: NF := 63:63[#2 + 1]
00000244: when ZF goto %00000242
0000061d: goto %000003b6

000003b6:
000003b9: R1 := 0x10000
000003c0: R1 := mem[R1 + 0xFC0, el]:u64
000003c5: when R1 = 0 goto %00000242
0000061e: goto %000003c9

00000242:
0000024a: call R30 with noreturn

000003c9:
000003cd: R16 := R1
000003d2: call R16 with noreturn

000005ff: sub frame_dummy(frame_dummy_result)
0000062f: frame_dummy_result :: out u32 = low:32[R0]

000002e2:
000002e4: call @register_tm_clones with noreturn

00000600: sub main(main_argc, main_argv, main_result)
00000630: main_argc :: in u32 = low:32[R0]
00000631: main_argv :: in out u64 = R1
00000632: main_result :: out u32 = low:32[R0]

000002e6:
000002ea: R31 := R31 - 0x10
000002f1: mem := mem with [R31 + 0xC, el]:u32 <- 0
000002f6: R8 := 0x11000
000002fd: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000303: #4 := 31:0[R8] - 1
00000308: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
0000030d: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000311: ZF := #4 + 1 = 0
00000315: NF := 31:31[#4 + 1]
00000319: R8 := pad:64[#4 + 1]
00000325: when ZF goto %0000031e
00000326: goto %00000321

00000321:
00000322: R8 := 1
00000328: goto %00000324

0000031e:
0000031f: R8 := 0
00000327: goto %00000324

00000324:
0000032e: when 0:0[R8] goto %0000032c
0000061f: goto %00000343

00000343:
00000346: goto %00000344

00000344:
0000034a: R8 := 1
0000034f: R9 := 0x11000
00000357: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
0000035b: goto %0000032c

0000032c:
00000336: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000033c: R31 := R31 + 0x10
00000341: call R30 with noreturn

00000602: sub register_tm_clones(register_tm_clones_result)
00000633: register_tm_clones_result :: out u32 = low:32[R0]

0000024c:
0000024f: R0 := 0x11000
00000255: R0 := R0 + 0x30
0000025a: R1 := 0x11000
00000260: R1 := R1 + 0x30
00000267: R1 := R1 + ~R0 + 1
0000026d: R2 := 0.63:63[R1]
00000274: R1 := R2 + (R1 ~>> 3)
0000027a: R1 := extend:64[63:1[R1]]
00000280: when R1 = 0 goto %0000027e
00000620: goto %00000398

00000398:
0000039b: R2 := 0x10000
000003a2: R2 := mem[R2 + 0xFE0, el]:u64
000003a7: when R2 = 0 goto %0000027e
00000621: goto %000003ab

0000027e:
00000286: call R30 with noreturn

000003ab:
000003af: R16 := R2
000003b4: call R16 with noreturn
