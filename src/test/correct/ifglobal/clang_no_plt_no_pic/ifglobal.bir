00000c14: program
00000bfd: sub __cxa_finalize(__cxa_finalize_result)
00000c15: __cxa_finalize_result :: out u32 = low:32[R0]

000009a3:
00000a9b: R16 := 0x11000
00000aa2: R17 := mem[R16 + 8, el]:u64
00000aa8: R16 := R16 + 8
00000aad: call R17 with noreturn

00000bfe: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c16: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000899:
0000089d: #3 := R31 - 0x20
000008a3: mem := mem with [#3, el]:u64 <- R29
000008a9: mem := mem with [#3 + 8, el]:u64 <- R30
000008ad: R31 := #3
000008b3: R29 := R31
000008bb: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008c0: R19 := 0x11000
000008c7: R0 := pad:64[mem[R19 + 0x30]]
000008ce: when 31:0[R0] <> 0 goto %000008cc
00000bff: goto %0000096c

0000096c:
0000096f: R0 := 0x10000
00000976: R0 := mem[R0 + 0xFC8, el]:u64
0000097c: when R0 = 0 goto %0000097a
00000c00: goto %00000993

00000993:
00000996: R0 := 0x11000
0000099d: R0 := mem[R0 + 0x28, el]:u64
000009a2: R30 := 0x6F0
000009a5: call @__cxa_finalize with return %0000097a

0000097a:
00000982: R30 := 0x6F4
00000984: call @deregister_tm_clones with return %00000986

00000986:
00000989: R0 := 1
00000991: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000c01: goto %000008cc

000008cc:
000008d6: R19 := mem[R31 + 0x10, el]:u64
000008dd: R29 := mem[R31, el]:u64
000008e2: R30 := mem[R31 + 8, el]:u64
000008e6: R31 := R31 + 0x20
000008eb: call R30 with noreturn

00000c02: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c17: __libc_start_main_main :: in u64 = R0
00000c18: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c19: __libc_start_main_arg3 :: in out u64 = R2
00000c1a: __libc_start_main_auxv :: in out u64 = R3
00000c1b: __libc_start_main_result :: out u32 = low:32[R0]

000007f2:
00000a85: R16 := 0x11000
00000a8c: R17 := mem[R16, el]:u64
00000a92: R16 := R16
00000a97: call R17 with noreturn

00000c03: sub _fini(_fini_result)
00000c1c: _fini_result :: out u32 = low:32[R0]

0000062e:
00000634: #0 := R31 - 0x10
0000063a: mem := mem with [#0, el]:u64 <- R29
00000640: mem := mem with [#0 + 8, el]:u64 <- R30
00000644: R31 := #0
0000064a: R29 := R31
00000651: R29 := mem[R31, el]:u64
00000656: R30 := mem[R31 + 8, el]:u64
0000065a: R31 := R31 + 0x10
0000065f: call R30 with noreturn

00000c04: sub _init(_init_result)
00000c1d: _init_result :: out u32 = low:32[R0]

00000b50:
00000b56: #6 := R31 - 0x10
00000b5c: mem := mem with [#6, el]:u64 <- R29
00000b62: mem := mem with [#6 + 8, el]:u64 <- R30
00000b66: R31 := #6
00000b6c: R29 := R31
00000b71: R30 := 0x590
00000b73: call @call_weak_fn with return %00000b75

00000b75:
00000b7a: R29 := mem[R31, el]:u64
00000b7f: R30 := mem[R31 + 8, el]:u64
00000b83: R31 := R31 + 0x10
00000b88: call R30 with noreturn

00000c05: sub _start(_start_result)
00000c1e: _start_result :: out u32 = low:32[R0]

000007b3:
000007b8: R29 := 0
000007bd: R30 := 0
000007c3: R5 := R0
000007ca: R1 := mem[R31, el]:u64
000007d0: R2 := R31 + 8
000007d6: R6 := R31
000007db: R0 := 0x10000
000007e2: R0 := mem[R0 + 0xFD8, el]:u64
000007e7: R3 := 0
000007ec: R4 := 0
000007f1: R30 := 0x630
000007f4: call @__libc_start_main with return %000007f6

000007f6:
000007f9: R30 := 0x634
000007fc: call @abort with return %00000c06

00000c06:
00000c07: call @call_weak_fn with noreturn

00000c08: sub abort()


000007fa:
00000ac7: R16 := 0x11000
00000ace: R17 := mem[R16 + 0x18, el]:u64
00000ad4: R16 := R16 + 0x18
00000ad9: call R17 with noreturn

00000c09: sub call_weak_fn(call_weak_fn_result)
00000c1f: call_weak_fn_result :: out u32 = low:32[R0]

000007fe:
00000801: R0 := 0x10000
00000808: R0 := mem[R0 + 0xFD0, el]:u64
0000080e: when R0 = 0 goto %0000080c
00000c0a: goto %000009e3

0000080c:
00000814: call R30 with noreturn

000009e3:
000009e6: goto @__gmon_start__

000009e4:
00000ab1: R16 := 0x11000
00000ab8: R17 := mem[R16 + 0x10, el]:u64
00000abe: R16 := R16 + 0x10
00000ac3: call R17 with noreturn

00000c0b: sub deregister_tm_clones(deregister_tm_clones_result)
00000c20: deregister_tm_clones_result :: out u32 = low:32[R0]

0000081a:
0000081d: R0 := 0x11000
00000823: R0 := R0 + 0x30
00000828: R1 := 0x11000
0000082e: R1 := R1 + 0x30
00000834: #1 := ~R0
00000839: #2 := R1 + ~R0
0000083f: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000845: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000849: ZF := #2 + 1 = 0
0000084d: NF := 63:63[#2 + 1]
00000853: when ZF goto %00000851
00000c0c: goto %000009c5

000009c5:
000009c8: R1 := 0x10000
000009cf: R1 := mem[R1 + 0xFC0, el]:u64
000009d4: when R1 = 0 goto %00000851
00000c0d: goto %000009d8

00000851:
00000859: call R30 with noreturn

000009d8:
000009dc: R16 := R1
000009e1: call R16 with noreturn

00000c0e: sub frame_dummy(frame_dummy_result)
00000c21: frame_dummy_result :: out u32 = low:32[R0]

000008f1:
000008f3: call @register_tm_clones with noreturn

00000c0f: sub main(main_argc, main_argv, main_result)
00000c22: main_argc :: in u32 = low:32[R0]
00000c23: main_argv :: in out u64 = R1
00000c24: main_result :: out u32 = low:32[R0]

000008f5:
000008f9: R31 := R31 - 0x10
00000900: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000905: R8 := 0x11000
0000090c: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000912: #4 := 31:0[R8] - 1
00000917: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
0000091c: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000920: ZF := #4 + 1 = 0
00000924: NF := 31:31[#4 + 1]
00000928: R8 := pad:64[#4 + 1]
00000934: when ZF goto %0000092d
00000935: goto %00000930

00000930:
00000931: R8 := 1
00000937: goto %00000933

0000092d:
0000092e: R8 := 0
00000936: goto %00000933

00000933:
0000093d: when 0:0[R8] goto %0000093b
00000c10: goto %00000952

00000952:
00000955: goto %00000953

00000953:
00000959: R8 := 1
0000095e: R9 := 0x11000
00000966: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
0000096a: goto %0000093b

0000093b:
00000945: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000094b: R31 := R31 + 0x10
00000950: call R30 with noreturn

00000c11: sub register_tm_clones(register_tm_clones_result)
00000c25: register_tm_clones_result :: out u32 = low:32[R0]

0000085b:
0000085e: R0 := 0x11000
00000864: R0 := R0 + 0x30
00000869: R1 := 0x11000
0000086f: R1 := R1 + 0x30
00000876: R1 := R1 + ~R0 + 1
0000087c: R2 := 0.63:63[R1]
00000883: R1 := R2 + (R1 ~>> 3)
00000889: R1 := extend:64[63:1[R1]]
0000088f: when R1 = 0 goto %0000088d
00000c12: goto %000009a7

000009a7:
000009aa: R2 := 0x10000
000009b1: R2 := mem[R2 + 0xFE0, el]:u64
000009b6: when R2 = 0 goto %0000088d
00000c13: goto %000009ba

0000088d:
00000895: call R30 with noreturn

000009ba:
000009be: R16 := R2
000009c3: call R16 with noreturn
