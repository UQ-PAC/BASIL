000005e8: program
000005b2: sub __cxa_finalize(__cxa_finalize_result)
000005e9: __cxa_finalize_result :: out u32 = low:32[R0]

00000360:
00000458: R16 := 0x10000
0000045f: R17 := mem[R16 + 0xFB8, el]:u64
00000465: R16 := R16 + 0xFB8
0000046a: call R17 with noreturn

000005b3: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005ea: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000027a:
0000027e: #3 := R31 - 0x20
00000284: mem := mem with [#3, el]:u64 <- R29
0000028a: mem := mem with [#3 + 8, el]:u64 <- R30
0000028e: R31 := #3
00000294: R29 := R31
0000029c: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002a1: R19 := 0x11000
000002a8: R0 := pad:64[mem[R19 + 0x10]]
000002af: when 31:0[R0] <> 0 goto %000002ad
000005dc: goto %00000329

00000329:
0000032c: R0 := 0x10000
00000333: R0 := mem[R0 + 0xFE0, el]:u64
00000339: when R0 = 0 goto %00000337
000005dd: goto %00000350

00000350:
00000353: R0 := 0x11000
0000035a: R0 := mem[R0 + 8, el]:u64
0000035f: R30 := 0x6F0
00000362: call @__cxa_finalize with return %00000337

00000337:
0000033f: R30 := 0x6F4
00000341: call @deregister_tm_clones with return %00000343

00000343:
00000346: R0 := 1
0000034e: mem := mem with [R19 + 0x10] <- 7:0[R0]
000005de: goto %000002ad

000002ad:
000002b7: R19 := mem[R31 + 0x10, el]:u64
000002be: R29 := mem[R31, el]:u64
000002c3: R30 := mem[R31 + 8, el]:u64
000002c7: R31 := R31 + 0x20
000002cc: call R30 with noreturn

000005b7: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005eb: __libc_start_main_main :: in u64 = R0
000005ec: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005ed: __libc_start_main_arg3 :: in out u64 = R2
000005ee: __libc_start_main_auxv :: in out u64 = R3
000005ef: __libc_start_main_result :: out u32 = low:32[R0]

000001d3:
00000442: R16 := 0x10000
00000449: R17 := mem[R16 + 0xFB0, el]:u64
0000044f: R16 := R16 + 0xFB0
00000454: call R17 with noreturn

000005b8: sub _fini(_fini_result)
000005f0: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005b9: sub _init(_init_result)
000005f1: _init_result :: out u32 = low:32[R0]

00000509:
0000050f: #6 := R31 - 0x10
00000515: mem := mem with [#6, el]:u64 <- R29
0000051b: mem := mem with [#6 + 8, el]:u64 <- R30
0000051f: R31 := #6
00000525: R29 := R31
0000052a: R30 := 0x590
0000052c: call @call_weak_fn with return %0000052e

0000052e:
00000533: R29 := mem[R31, el]:u64
00000538: R30 := mem[R31 + 8, el]:u64
0000053c: R31 := R31 + 0x10
00000541: call R30 with noreturn

000005ba: sub _start(_start_result)
000005f2: _start_result :: out u32 = low:32[R0]

00000194:
00000199: R29 := 0
0000019e: R30 := 0
000001a4: R5 := R0
000001ab: R1 := mem[R31, el]:u64
000001b1: R2 := R31 + 8
000001b7: R6 := R31
000001bc: R0 := 0x10000
000001c3: R0 := mem[R0 + 0xFF0, el]:u64
000001c8: R3 := 0
000001cd: R4 := 0
000001d2: R30 := 0x630
000001d5: call @__libc_start_main with return %000001d7

000001d7:
000001da: R30 := 0x634
000001dd: call @abort with return %000005df

000005df:
000005e0: call @call_weak_fn with noreturn

000005bd: sub abort()


000001db:
00000484: R16 := 0x10000
0000048b: R17 := mem[R16 + 0xFC8, el]:u64
00000491: R16 := R16 + 0xFC8
00000496: call R17 with noreturn

000005be: sub call_weak_fn(call_weak_fn_result)
000005f3: call_weak_fn_result :: out u32 = low:32[R0]

000001df:
000001e2: R0 := 0x10000
000001e9: R0 := mem[R0 + 0xFE8, el]:u64
000001ef: when R0 = 0 goto %000001ed
000005e1: goto %000003a0

000001ed:
000001f5: call R30 with noreturn

000003a0:
000003a3: goto @__gmon_start__

000003a1:
0000046e: R16 := 0x10000
00000475: R17 := mem[R16 + 0xFC0, el]:u64
0000047b: R16 := R16 + 0xFC0
00000480: call R17 with noreturn

000005c0: sub deregister_tm_clones(deregister_tm_clones_result)
000005f4: deregister_tm_clones_result :: out u32 = low:32[R0]

000001fb:
000001fe: R0 := 0x11000
00000204: R0 := R0 + 0x10
00000209: R1 := 0x11000
0000020f: R1 := R1 + 0x10
00000215: #1 := ~R0
0000021a: #2 := R1 + ~R0
00000220: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000226: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000022a: ZF := #2 + 1 = 0
0000022e: NF := 63:63[#2 + 1]
00000234: when ZF goto %00000232
000005e2: goto %00000382

00000382:
00000385: R1 := 0x10000
0000038c: R1 := mem[R1 + 0xFD8, el]:u64
00000391: when R1 = 0 goto %00000232
000005e3: goto %00000395

00000232:
0000023a: call R30 with noreturn

00000395:
00000399: R16 := R1
0000039e: call R16 with noreturn

000005c3: sub frame_dummy(frame_dummy_result)
000005f5: frame_dummy_result :: out u32 = low:32[R0]

000002d2:
000002d4: call @register_tm_clones with noreturn

000005c4: sub main(main_argc, main_argv, main_result)
000005f6: main_argc :: in u32 = low:32[R0]
000005f7: main_argv :: in out u64 = R1
000005f8: main_result :: out u32 = low:32[R0]

000002d6:
000002d9: R0 := 0x11000
000002df: R0 := R0 + 0x14
000002e6: R0 := pad:64[mem[R0, el]:u32]
000002ec: #4 := 31:0[R0] - 1
000002f1: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
000002f6: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
000002fa: ZF := #4 + 1 = 0
000002fe: NF := 31:31[#4 + 1]
00000304: when ZF <> 1 goto %00000302
000005e4: goto %00000311

00000311:
00000314: R0 := 0x11000
0000031a: R0 := R0 + 0x14
0000031f: R1 := 1
00000327: mem := mem with [R0, el]:u32 <- 31:0[R1]
000005e5: goto %00000302

00000302:
0000030a: R0 := 0
0000030f: call R30 with noreturn

000005c7: sub register_tm_clones(register_tm_clones_result)
000005f9: register_tm_clones_result :: out u32 = low:32[R0]

0000023c:
0000023f: R0 := 0x11000
00000245: R0 := R0 + 0x10
0000024a: R1 := 0x11000
00000250: R1 := R1 + 0x10
00000257: R1 := R1 + ~R0 + 1
0000025d: R2 := 0.63:63[R1]
00000264: R1 := R2 + (R1 ~>> 3)
0000026a: R1 := extend:64[63:1[R1]]
00000270: when R1 = 0 goto %0000026e
000005e6: goto %00000364

00000364:
00000367: R2 := 0x10000
0000036e: R2 := mem[R2 + 0xFF8, el]:u64
00000373: when R2 = 0 goto %0000026e
000005e7: goto %00000377

0000026e:
00000276: call R30 with noreturn

00000377:
0000037b: R16 := R2
00000380: call R16 with noreturn
