var {:extern }Gamma_R0: bool;
var {:extern }Gamma_mem: [bv64]bool;
var {:extern }R0: bv64;
var {:extern }mem: [bv64]bv8;
const {:extern }$arr_addr: bv64;
axiom {:extern }($arr_addr == 69656bv64);
function {:extern }L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if ((index == bvadd64($arr_addr, 4bv64)) || (index == bvadd64($arr_addr, 0bv64))) then false else false)
}

function {:extern } {:bvbuiltin "bvadd"}bvadd64(bv64, bv64) returns (bv64);
function {:extern }gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern }gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern }gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern }memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern }memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern }memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern }memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern } {:bvbuiltin "zero_extend 32"}zero_extend32_32(bv32) returns (bv64);
procedure {:extern }rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (old(memory_load32_le(mem, bvadd64($arr_addr, 0bv64))) == memory_load32_le(mem, bvadd64($arr_addr, 0bv64)));
  free ensures (memory_load8_le(mem, 1924bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1925bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1926bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1927bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69608bv64) == 84bv8);
  free ensures (memory_load8_le(mem, 69609bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69610bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69611bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69612bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69613bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69614bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69615bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69640bv64) == 8bv8);
  free ensures (memory_load8_le(mem, 69641bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69642bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69643bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69644bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69645bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69646bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69647bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69616bv64) == 24bv8);
  free ensures (memory_load8_le(mem, 69617bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69618bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69619bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69620bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69621bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69622bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69623bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69016bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69017bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69018bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69019bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69020bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69021bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69022bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69023bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69008bv64) == 80bv8);
  free ensures (memory_load8_le(mem, 69009bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69010bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69011bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69012bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69013bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69014bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69015bv64) == 0bv8);

procedure {:extern }rely_transitive()
  modifies Gamma_mem, mem;
  ensures (old(memory_load32_le(mem, bvadd64($arr_addr, 0bv64))) == memory_load32_le(mem, bvadd64($arr_addr, 0bv64)));
{
  call rely();
  call rely();
}

procedure {:extern }rely_reflexive()
{
  assert (memory_load32_le(mem, bvadd64($arr_addr, 0bv64)) == memory_load32_le(mem, bvadd64($arr_addr, 0bv64)));
}

procedure {:extern }guarantee_reflexive()
  modifies Gamma_mem, mem;
{
  assert true;
}

procedure main()
  modifies Gamma_R0, Gamma_mem, R0, mem;
  free requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1924bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1925bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1926bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1927bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69608bv64) == 84bv8);
  free requires (memory_load8_le(mem, 69609bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69610bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69611bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69612bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69613bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69614bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69615bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69616bv64) == 24bv8);
  free requires (memory_load8_le(mem, 69617bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69618bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69619bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69620bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69621bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69622bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69623bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69016bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69017bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69018bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69019bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69020bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69021bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69022bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69023bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69008bv64) == 80bv8);
  free requires (memory_load8_le(mem, 69009bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69010bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69011bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69012bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69013bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69014bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69015bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1924bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1925bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1926bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1927bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69608bv64) == 84bv8);
  free ensures (memory_load8_le(mem, 69609bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69610bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69611bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69612bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69613bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69614bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69615bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69640bv64) == 8bv8);
  free ensures (memory_load8_le(mem, 69641bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69642bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69643bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69644bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69645bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69646bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69647bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69616bv64) == 24bv8);
  free ensures (memory_load8_le(mem, 69617bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69618bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69619bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69620bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69621bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69622bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69623bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69016bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69017bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69018bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69019bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69020bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69021bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69022bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69023bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69008bv64) == 80bv8);
  free ensures (memory_load8_le(mem, 69009bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69010bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69011bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69012bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69013bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69014bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69015bv64) == 0bv8);
{
  lmain:
    assume {:captureState "addr:0x754"}true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4080bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4080bv64)) || L(mem, bvadd64(R0, 4080bv64)));
    call rely();
    assert (L(mem, R0) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, R0, 0bv32), gamma_store32(Gamma_mem, R0, true);
    assert true;
    assume {:captureState "addr:0x75c"}true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4080bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4080bv64)) || L(mem, bvadd64(R0, 4080bv64)));
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    return;
}
