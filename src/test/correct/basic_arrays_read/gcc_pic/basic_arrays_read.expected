var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $mem: [bv64]bv8;
const {:extern} $arr_addr: bv64;
axiom ($arr_addr == 69656bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  (if ((#index == bvadd64($arr_addr, 4bv64)) || (#index == bvadd64($arr_addr, 0bv64))) then false else false)
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures (forall #i: bv64::  ((($mem[#i] == old($mem[#i])) ==> ($Gamma_mem[#i] == old($Gamma_mem[#i])))));
  ensures (old(memory_load32_le($mem, bvadd64($arr_addr, 0bv64))) == memory_load32_le($mem, bvadd64($arr_addr, 0bv64)));
  free ensures (memory_load32_le($mem, 1924bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69608bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 69656bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures (old(memory_load32_le($mem, bvadd64($arr_addr, 0bv64))) == memory_load32_le($mem, bvadd64($arr_addr, 0bv64)));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

implementation {:extern} p$rely_reflexive()
{
  assert (memory_load32_le($mem, bvadd64($arr_addr, 0bv64)) == memory_load32_le($mem, bvadd64($arr_addr, 0bv64)));
}

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

implementation {:extern} p$guarantee_reflexive()
{
  assert true;
}

procedure p$main_1876();
  modifies $Gamma_R0, $Gamma_mem, $R0, $mem;
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le($mem, 1924bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69608bv64) == 1876bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 69656bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures (memory_load32_le($mem, 1924bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69608bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 69656bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_1876()
{
  var #Gamma_load18: bool;
  var #Gamma_load19: bool;
  var #Gamma_load20: bool;
  var #load18: bv64;
  var #load19: bv64;
  var #load20: bv32;
  b#main_entry:
    assume {:captureState "main_entry"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load18, #Gamma_load18 := memory_load64_le($mem, bvadd64($R0, 4080bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4080bv64)) || L($mem, bvadd64($R0, 4080bv64)));
    $R0, $Gamma_R0 := #load18, #Gamma_load18;
    call p$rely();
    assert (L($mem, $R0) ==> true);
    $mem, $Gamma_mem := memory_store32_le($mem, $R0, 0bv32), gamma_store32($Gamma_mem, $R0, true);
    assume {:captureState "%000002d7"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load19, #Gamma_load19 := memory_load64_le($mem, bvadd64($R0, 4080bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4080bv64)) || L($mem, bvadd64($R0, 4080bv64)));
    $R0, $Gamma_R0 := #load19, #Gamma_load19;
    call p$rely();
    #load20, #Gamma_load20 := memory_load32_le($mem, $R0), (gamma_load32($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := zero_extend32_32(#load20), #Gamma_load20;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

