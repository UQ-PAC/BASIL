00000b1a: program
00000b04: sub __cxa_finalize(__cxa_finalize_result)
00000b1b: __cxa_finalize_result :: out u32 = low:32[R0]

000008ba:
000009b2: R16 := 0x11000
000009b9: R17 := mem[R16 + 8, el]:u64
000009bf: R16 := R16 + 8
000009c4: call R17 with noreturn

00000b05: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000b1c: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000007fc:
00000800: #3 := R31 - 0x20
00000806: mem := mem with [#3, el]:u64 <- R29
0000080c: mem := mem with [#3 + 8, el]:u64 <- R30
00000810: R31 := #3
00000816: R29 := R31
0000081e: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000823: R19 := 0x11000
0000082a: R0 := pad:64[mem[R19 + 0x30]]
00000831: when 31:0[R0] <> 0 goto %0000082f
00000b06: goto %00000883

00000883:
00000886: R0 := 0x10000
0000088d: R0 := mem[R0 + 0xFC8, el]:u64
00000893: when R0 = 0 goto %00000891
00000b07: goto %000008aa

000008aa:
000008ad: R0 := 0x11000
000008b4: R0 := mem[R0 + 0x28, el]:u64
000008b9: R30 := 0x6F0
000008bc: call @__cxa_finalize with return %00000891

00000891:
00000899: R30 := 0x6F4
0000089b: call @deregister_tm_clones with return %0000089d

0000089d:
000008a0: R0 := 1
000008a8: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000b08: goto %0000082f

0000082f:
00000839: R19 := mem[R31 + 0x10, el]:u64
00000840: R29 := mem[R31, el]:u64
00000845: R30 := mem[R31 + 8, el]:u64
00000849: R31 := R31 + 0x20
0000084e: call R30 with noreturn

00000b09: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000b1d: __libc_start_main_main :: in u64 = R0
00000b1e: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000b1f: __libc_start_main_arg3 :: in out u64 = R2
00000b20: __libc_start_main_auxv :: in out u64 = R3
00000b21: __libc_start_main_result :: out u32 = low:32[R0]

00000755:
0000099c: R16 := 0x11000
000009a3: R17 := mem[R16, el]:u64
000009a9: R16 := R16
000009ae: call R17 with noreturn

00000b0a: sub _fini(_fini_result)
00000b22: _fini_result :: out u32 = low:32[R0]

000005b1:
000005b7: #0 := R31 - 0x10
000005bd: mem := mem with [#0, el]:u64 <- R29
000005c3: mem := mem with [#0 + 8, el]:u64 <- R30
000005c7: R31 := #0
000005cd: R29 := R31
000005d4: R29 := mem[R31, el]:u64
000005d9: R30 := mem[R31 + 8, el]:u64
000005dd: R31 := R31 + 0x10
000005e2: call R30 with noreturn

00000b0b: sub _init(_init_result)
00000b23: _init_result :: out u32 = low:32[R0]

00000a5f:
00000a65: #5 := R31 - 0x10
00000a6b: mem := mem with [#5, el]:u64 <- R29
00000a71: mem := mem with [#5 + 8, el]:u64 <- R30
00000a75: R31 := #5
00000a7b: R29 := R31
00000a80: R30 := 0x590
00000a82: call @call_weak_fn with return %00000a84

00000a84:
00000a89: R29 := mem[R31, el]:u64
00000a8e: R30 := mem[R31 + 8, el]:u64
00000a92: R31 := R31 + 0x10
00000a97: call R30 with noreturn

00000b0c: sub _start(_start_result)
00000b24: _start_result :: out u32 = low:32[R0]

00000716:
0000071b: R29 := 0
00000720: R30 := 0
00000726: R5 := R0
0000072d: R1 := mem[R31, el]:u64
00000733: R2 := R31 + 8
00000739: R6 := R31
0000073e: R0 := 0x10000
00000745: R0 := mem[R0 + 0xFD8, el]:u64
0000074a: R3 := 0
0000074f: R4 := 0
00000754: R30 := 0x630
00000757: call @__libc_start_main with return %00000759

00000759:
0000075c: R30 := 0x634
0000075f: call @abort with return %00000b0d

00000b0d:
00000b0e: call @call_weak_fn with noreturn

00000b0f: sub abort()


0000075d:
000009de: R16 := 0x11000
000009e5: R17 := mem[R16 + 0x18, el]:u64
000009eb: R16 := R16 + 0x18
000009f0: call R17 with noreturn

00000b10: sub call_weak_fn(call_weak_fn_result)
00000b25: call_weak_fn_result :: out u32 = low:32[R0]

00000761:
00000764: R0 := 0x10000
0000076b: R0 := mem[R0 + 0xFD0, el]:u64
00000771: when R0 = 0 goto %0000076f
00000b11: goto %000008fa

0000076f:
00000777: call R30 with noreturn

000008fa:
000008fd: goto @__gmon_start__

000008fb:
000009c8: R16 := 0x11000
000009cf: R17 := mem[R16 + 0x10, el]:u64
000009d5: R16 := R16 + 0x10
000009da: call R17 with noreturn

00000b12: sub deregister_tm_clones(deregister_tm_clones_result)
00000b26: deregister_tm_clones_result :: out u32 = low:32[R0]

0000077d:
00000780: R0 := 0x11000
00000786: R0 := R0 + 0x30
0000078b: R1 := 0x11000
00000791: R1 := R1 + 0x30
00000797: #1 := ~R0
0000079c: #2 := R1 + ~R0
000007a2: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000007a8: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000007ac: ZF := #2 + 1 = 0
000007b0: NF := 63:63[#2 + 1]
000007b6: when ZF goto %000007b4
00000b13: goto %000008dc

000008dc:
000008df: R1 := 0x10000
000008e6: R1 := mem[R1 + 0xFC0, el]:u64
000008eb: when R1 = 0 goto %000007b4
00000b14: goto %000008ef

000007b4:
000007bc: call R30 with noreturn

000008ef:
000008f3: R16 := R1
000008f8: call R16 with noreturn

00000b15: sub frame_dummy(frame_dummy_result)
00000b27: frame_dummy_result :: out u32 = low:32[R0]

00000854:
00000856: call @register_tm_clones with noreturn

00000b16: sub main(main_argc, main_argv, main_result)
00000b28: main_argc :: in u32 = low:32[R0]
00000b29: main_argv :: in out u64 = R1
00000b2a: main_result :: out u32 = low:32[R0]

00000858:
0000085c: R31 := R31 - 0x10
00000863: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000868: R8 := 0x11000
0000086f: mem := mem with [R8 + 0x34, el]:u32 <- 0
00000876: R0 := pad:64[mem[R8 + 0x34, el]:u32]
0000087c: R31 := R31 + 0x10
00000881: call R30 with noreturn

00000b17: sub register_tm_clones(register_tm_clones_result)
00000b2b: register_tm_clones_result :: out u32 = low:32[R0]

000007be:
000007c1: R0 := 0x11000
000007c7: R0 := R0 + 0x30
000007cc: R1 := 0x11000
000007d2: R1 := R1 + 0x30
000007d9: R1 := R1 + ~R0 + 1
000007df: R2 := 0.63:63[R1]
000007e6: R1 := R2 + (R1 ~>> 3)
000007ec: R1 := extend:64[63:1[R1]]
000007f2: when R1 = 0 goto %000007f0
00000b18: goto %000008be

000008be:
000008c1: R2 := 0x10000
000008c8: R2 := mem[R2 + 0xFE0, el]:u64
000008cd: when R2 = 0 goto %000007f0
00000b19: goto %000008d1

000007f0:
000007f8: call R30 with noreturn

000008d1:
000008d5: R16 := R2
000008da: call R16 with noreturn
