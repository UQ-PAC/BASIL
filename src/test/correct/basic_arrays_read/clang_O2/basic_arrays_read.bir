0000052d: program
000004fb: sub __cxa_finalize(__cxa_finalize_result)
0000052e: __cxa_finalize_result :: out u32 = low:32[R0]

00000307:
000003ff: R16 := 0x20000
00000406: R17 := mem[R16 + 8, el]:u64
0000040c: R16 := R16 + 8
00000411: call R17 with noreturn

000004fc: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000052f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000025f:
00000263: #3 := R31 - 0x20
00000269: mem := mem with [#3, el]:u64 <- R29
0000026f: mem := mem with [#3 + 8, el]:u64 <- R30
00000273: R31 := #3
00000279: R29 := R31
00000281: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000286: R19 := 0x20000
0000028d: R0 := pad:64[mem[R19 + 0x30]]
00000293: when 0:0[R0] goto %00000291
00000523: goto %000002d0

000002d0:
000002d3: R0 := 0x1F000
000002da: R0 := mem[R0 + 0xFC8, el]:u64
000002e0: when R0 = 0 goto %000002de
00000524: goto %000002f7

000002f7:
000002fa: R0 := 0x20000
00000301: R0 := mem[R0 + 0x28, el]:u64
00000306: R30 := 0x730
00000309: call @__cxa_finalize with return %000002de

000002de:
000002e6: R30 := 0x734
000002e8: call @deregister_tm_clones with return %000002ea

000002ea:
000002ed: R0 := 1
000002f5: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000525: goto %00000291

00000291:
0000029b: R19 := mem[R31 + 0x10, el]:u64
000002a2: R29 := mem[R31, el]:u64
000002a7: R30 := mem[R31 + 8, el]:u64
000002ab: R31 := R31 + 0x20
000002b0: call R30 with noreturn

00000500: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000530: __libc_start_main_main :: in u64 = R0
00000531: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000532: __libc_start_main_arg3 :: in out u64 = R2
00000533: __libc_start_main_auxv :: in out u64 = R3
00000534: __libc_start_main_result :: out u32 = low:32[R0]

000001b8:
000003e9: R16 := 0x20000
000003f0: R17 := mem[R16, el]:u64
000003f6: R16 := R16
000003fb: call R17 with noreturn

00000501: sub _fini(_fini_result)
00000535: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000502: sub _init(_init_result)
00000536: _init_result :: out u32 = low:32[R0]

00000459:
0000045f: #5 := R31 - 0x10
00000465: mem := mem with [#5, el]:u64 <- R29
0000046b: mem := mem with [#5 + 8, el]:u64 <- R30
0000046f: R31 := #5
00000475: R29 := R31
0000047a: R30 := 0x5C8
0000047c: call @call_weak_fn with return %0000047e

0000047e:
00000483: R29 := mem[R31, el]:u64
00000488: R30 := mem[R31 + 8, el]:u64
0000048c: R31 := R31 + 0x10
00000491: call R30 with noreturn

00000503: sub _start(_start_result)
00000537: _start_result :: out u32 = low:32[R0]

00000179:
0000017e: R29 := 0
00000183: R30 := 0
00000189: R5 := R0
00000190: R1 := mem[R31, el]:u64
00000196: R2 := R31 + 8
0000019c: R6 := R31
000001a1: R0 := 0x1F000
000001a8: R0 := mem[R0 + 0xFD8, el]:u64
000001ad: R3 := 0
000001b2: R4 := 0
000001b7: R30 := 0x670
000001ba: call @__libc_start_main with return %000001bc

000001bc:
000001bf: R30 := 0x674
000001c2: call @abort with return %00000526

00000526:
00000527: call @call_weak_fn with noreturn

00000506: sub abort()


000001c0:
0000042b: R16 := 0x20000
00000432: R17 := mem[R16 + 0x18, el]:u64
00000438: R16 := R16 + 0x18
0000043d: call R17 with noreturn

00000507: sub call_weak_fn(call_weak_fn_result)
00000538: call_weak_fn_result :: out u32 = low:32[R0]

000001c4:
000001c7: R0 := 0x1F000
000001ce: R0 := mem[R0 + 0xFD0, el]:u64
000001d4: when R0 = 0 goto %000001d2
00000528: goto %00000347

000001d2:
000001da: call R30 with noreturn

00000347:
0000034a: goto @__gmon_start__

00000348:
00000415: R16 := 0x20000
0000041c: R17 := mem[R16 + 0x10, el]:u64
00000422: R16 := R16 + 0x10
00000427: call R17 with noreturn

00000509: sub deregister_tm_clones(deregister_tm_clones_result)
00000539: deregister_tm_clones_result :: out u32 = low:32[R0]

000001e0:
000001e3: R0 := 0x20000
000001e9: R0 := R0 + 0x30
000001ee: R1 := 0x20000
000001f4: R1 := R1 + 0x30
000001fa: #1 := ~R0
000001ff: #2 := R1 + ~R0
00000205: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000020b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000020f: ZF := #2 + 1 = 0
00000213: NF := 63:63[#2 + 1]
00000219: when ZF goto %00000217
00000529: goto %00000329

00000329:
0000032c: R1 := 0x1F000
00000333: R1 := mem[R1 + 0xFC0, el]:u64
00000338: when R1 = 0 goto %00000217
0000052a: goto %0000033c

00000217:
0000021f: call R30 with noreturn

0000033c:
00000340: R16 := R1
00000345: call R16 with noreturn

0000050c: sub frame_dummy(frame_dummy_result)
0000053a: frame_dummy_result :: out u32 = low:32[R0]

000002b6:
000002b8: call @register_tm_clones with noreturn

0000050d: sub main(main_argc, main_argv, main_result)
0000053b: main_argc :: in u32 = low:32[R0]
0000053c: main_argv :: in out u64 = R1
0000053d: main_result :: out u32 = low:32[R0]

000002ba:
000002bd: R8 := 0x20000
000002c2: R0 := 0
000002c9: mem := mem with [R8 + 0x34, el]:u32 <- 0
000002ce: call R30 with noreturn

0000050e: sub register_tm_clones(register_tm_clones_result)
0000053e: register_tm_clones_result :: out u32 = low:32[R0]

00000221:
00000224: R0 := 0x20000
0000022a: R0 := R0 + 0x30
0000022f: R1 := 0x20000
00000235: R1 := R1 + 0x30
0000023c: R1 := R1 + ~R0 + 1
00000242: R2 := 0.63:63[R1]
00000249: R1 := R2 + (R1 ~>> 3)
0000024f: R1 := extend:64[63:1[R1]]
00000255: when R1 = 0 goto %00000253
0000052b: goto %0000030b

0000030b:
0000030e: R2 := 0x1F000
00000315: R2 := mem[R2 + 0xFE0, el]:u64
0000031a: when R2 = 0 goto %00000253
0000052c: goto %0000031e

00000253:
0000025b: call R30 with noreturn

0000031e:
00000322: R16 := R2
00000327: call R16 with noreturn
