0000057d: program
0000054b: sub __cxa_finalize(__cxa_finalize_result)
0000057e: __cxa_finalize_result :: out u32 = low:32[R0]

00000307:
000003ff: R16 := 0x11000
00000406: R17 := mem[R16 + 8, el]:u64
0000040c: R16 := R16 + 8
00000411: call R17 with noreturn

0000054c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000057f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000025e:
00000262: #3 := R31 - 0x20
00000268: mem := mem with [#3, el]:u64 <- R29
0000026e: mem := mem with [#3 + 8, el]:u64 <- R30
00000272: R31 := #3
00000278: R29 := R31
00000280: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000285: R19 := 0x11000
0000028c: R0 := pad:64[mem[R19 + 0x30]]
00000293: when 31:0[R0] <> 0 goto %00000291
00000573: goto %000002d0

000002d0:
000002d3: R0 := 0x10000
000002da: R0 := mem[R0 + 0xFC8, el]:u64
000002e0: when R0 = 0 goto %000002de
00000574: goto %000002f7

000002f7:
000002fa: R0 := 0x11000
00000301: R0 := mem[R0 + 0x28, el]:u64
00000306: R30 := 0x6F0
00000309: call @__cxa_finalize with return %000002de

000002de:
000002e6: R30 := 0x6F4
000002e8: call @deregister_tm_clones with return %000002ea

000002ea:
000002ed: R0 := 1
000002f5: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000575: goto %00000291

00000291:
0000029b: R19 := mem[R31 + 0x10, el]:u64
000002a2: R29 := mem[R31, el]:u64
000002a7: R30 := mem[R31 + 8, el]:u64
000002ab: R31 := R31 + 0x20
000002b0: call R30 with noreturn

00000550: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000580: __libc_start_main_main :: in u64 = R0
00000581: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000582: __libc_start_main_arg3 :: in out u64 = R2
00000583: __libc_start_main_auxv :: in out u64 = R3
00000584: __libc_start_main_result :: out u32 = low:32[R0]

000001b7:
000003e9: R16 := 0x11000
000003f0: R17 := mem[R16, el]:u64
000003f6: R16 := R16
000003fb: call R17 with noreturn

00000551: sub _fini(_fini_result)
00000585: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000552: sub _init(_init_result)
00000586: _init_result :: out u32 = low:32[R0]

000004a9:
000004af: #5 := R31 - 0x10
000004b5: mem := mem with [#5, el]:u64 <- R29
000004bb: mem := mem with [#5 + 8, el]:u64 <- R30
000004bf: R31 := #5
000004c5: R29 := R31
000004ca: R30 := 0x590
000004cc: call @call_weak_fn with return %000004ce

000004ce:
000004d3: R29 := mem[R31, el]:u64
000004d8: R30 := mem[R31 + 8, el]:u64
000004dc: R31 := R31 + 0x10
000004e1: call R30 with noreturn

00000553: sub _start(_start_result)
00000587: _start_result :: out u32 = low:32[R0]

00000178:
0000017d: R29 := 0
00000182: R30 := 0
00000188: R5 := R0
0000018f: R1 := mem[R31, el]:u64
00000195: R2 := R31 + 8
0000019b: R6 := R31
000001a0: R0 := 0x10000
000001a7: R0 := mem[R0 + 0xFD8, el]:u64
000001ac: R3 := 0
000001b1: R4 := 0
000001b6: R30 := 0x630
000001b9: call @__libc_start_main with return %000001bb

000001bb:
000001be: R30 := 0x634
000001c1: call @abort with return %00000576

00000576:
00000577: call @call_weak_fn with noreturn

00000556: sub abort()


000001bf:
0000042b: R16 := 0x11000
00000432: R17 := mem[R16 + 0x18, el]:u64
00000438: R16 := R16 + 0x18
0000043d: call R17 with noreturn

00000557: sub call_weak_fn(call_weak_fn_result)
00000588: call_weak_fn_result :: out u32 = low:32[R0]

000001c3:
000001c6: R0 := 0x10000
000001cd: R0 := mem[R0 + 0xFD0, el]:u64
000001d3: when R0 = 0 goto %000001d1
00000578: goto %00000347

000001d1:
000001d9: call R30 with noreturn

00000347:
0000034a: goto @__gmon_start__

00000348:
00000415: R16 := 0x11000
0000041c: R17 := mem[R16 + 0x10, el]:u64
00000422: R16 := R16 + 0x10
00000427: call R17 with noreturn

00000559: sub deregister_tm_clones(deregister_tm_clones_result)
00000589: deregister_tm_clones_result :: out u32 = low:32[R0]

000001df:
000001e2: R0 := 0x11000
000001e8: R0 := R0 + 0x30
000001ed: R1 := 0x11000
000001f3: R1 := R1 + 0x30
000001f9: #1 := ~R0
000001fe: #2 := R1 + ~R0
00000204: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000020a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000020e: ZF := #2 + 1 = 0
00000212: NF := 63:63[#2 + 1]
00000218: when ZF goto %00000216
00000579: goto %00000329

00000329:
0000032c: R1 := 0x10000
00000333: R1 := mem[R1 + 0xFC0, el]:u64
00000338: when R1 = 0 goto %00000216
0000057a: goto %0000033c

00000216:
0000021e: call R30 with noreturn

0000033c:
00000340: R16 := R1
00000345: call R16 with noreturn

0000055c: sub frame_dummy(frame_dummy_result)
0000058a: frame_dummy_result :: out u32 = low:32[R0]

000002b6:
000002b8: call @register_tm_clones with noreturn

0000055d: sub main(main_argc, main_argv, main_result)
0000058b: main_argc :: in u32 = low:32[R0]
0000058c: main_argv :: in out u64 = R1
0000058d: main_result :: out u32 = low:32[R0]

000002ba:
000002bd: R8 := 0x11000
000002c2: R0 := 0
000002c9: mem := mem with [R8 + 0x34, el]:u32 <- 0
000002ce: call R30 with noreturn

0000055e: sub register_tm_clones(register_tm_clones_result)
0000058e: register_tm_clones_result :: out u32 = low:32[R0]

00000220:
00000223: R0 := 0x11000
00000229: R0 := R0 + 0x30
0000022e: R1 := 0x11000
00000234: R1 := R1 + 0x30
0000023b: R1 := R1 + ~R0 + 1
00000241: R2 := 0.63:63[R1]
00000248: R1 := R2 + (R1 ~>> 3)
0000024e: R1 := extend:64[63:1[R1]]
00000254: when R1 = 0 goto %00000252
0000057b: goto %0000030b

0000030b:
0000030e: R2 := 0x10000
00000315: R2 := mem[R2 + 0xFE0, el]:u64
0000031a: when R2 = 0 goto %00000252
0000057c: goto %0000031e

00000252:
0000025a: call R30 with noreturn

0000031e:
00000322: R16 := R2
00000327: call R16 with noreturn
