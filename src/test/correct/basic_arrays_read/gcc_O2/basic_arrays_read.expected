var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} mem: [bv64]bv8;
const {:extern} $arr_addr: bv64;
axiom ($arr_addr == 69656bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if ((index == bvadd64($arr_addr, 4bv64)) || (index == bvadd64($arr_addr, 0bv64))) then false else false)
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (old(memory_load32_le(mem, bvadd64($arr_addr, 0bv64))) == memory_load32_le(mem, bvadd64($arr_addr, 0bv64)));
  free ensures (memory_load8_le(mem, 1896bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1897bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1898bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1899bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);


procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (old(memory_load32_le(mem, bvadd64($arr_addr, 0bv64))) == memory_load32_le(mem, bvadd64($arr_addr, 0bv64)));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert (memory_load32_le(mem, bvadd64($arr_addr, 0bv64)) == memory_load32_le(mem, bvadd64($arr_addr, 0bv64)));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

implementation {:extern} guarantee_reflexive()
{
  assert true;
}

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 1896bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1897bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1898bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1899bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 1896bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1897bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1898bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1899bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main()
{
  lmain:
    assume {:captureState "lmain"} true;
    R1, Gamma_R1 := 69632bv64, true;
    R0, Gamma_R0 := 0bv64, true;
    call rely();
    assert (L(mem, bvadd64(R1, 24bv64)) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 24bv64), 0bv32), gamma_store32(Gamma_mem, bvadd64(R1, 24bv64), true);
    assert true;
    assume {:captureState "%000001b7"} true;
    return;
}

