000005dd: program
000005ab: sub __cxa_finalize(__cxa_finalize_result)
000005de: __cxa_finalize_result :: out u32 = low:32[R0]

0000034f:
00000447: R16 := 0x10000
0000044e: R17 := mem[R16 + 0xFB8, el]:u64
00000454: R16 := R16 + 0xFB8
00000459: call R17 with noreturn

000005ac: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005df: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002bc:
000002c0: #3 := R31 - 0x20
000002c6: mem := mem with [#3, el]:u64 <- R29
000002cc: mem := mem with [#3 + 8, el]:u64 <- R30
000002d0: R31 := #3
000002d6: R29 := R31
000002de: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002e3: R19 := 0x11000
000002ea: R0 := pad:64[mem[R19 + 0x10]]
000002f1: when 31:0[R0] <> 0 goto %000002ef
000005d3: goto %00000318

00000318:
0000031b: R0 := 0x10000
00000322: R0 := mem[R0 + 0xFE0, el]:u64
00000328: when R0 = 0 goto %00000326
000005d4: goto %0000033f

0000033f:
00000342: R0 := 0x11000
00000349: R0 := mem[R0 + 8, el]:u64
0000034e: R30 := 0x730
00000351: call @__cxa_finalize with return %00000326

00000326:
0000032e: R30 := 0x734
00000330: call @deregister_tm_clones with return %00000332

00000332:
00000335: R0 := 1
0000033d: mem := mem with [R19 + 0x10] <- 7:0[R0]
000005d5: goto %000002ef

000002ef:
000002f9: R19 := mem[R31 + 0x10, el]:u64
00000300: R29 := mem[R31, el]:u64
00000305: R30 := mem[R31 + 8, el]:u64
00000309: R31 := R31 + 0x20
0000030e: call R30 with noreturn

000005b0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005e0: __libc_start_main_main :: in u64 = R0
000005e1: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005e2: __libc_start_main_arg3 :: in out u64 = R2
000005e3: __libc_start_main_auxv :: in out u64 = R3
000005e4: __libc_start_main_result :: out u32 = low:32[R0]

00000215:
00000431: R16 := 0x10000
00000438: R17 := mem[R16 + 0xFB0, el]:u64
0000043e: R16 := R16 + 0xFB0
00000443: call R17 with noreturn

000005b1: sub _fini(_fini_result)
000005e5: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005b2: sub _init(_init_result)
000005e6: _init_result :: out u32 = low:32[R0]

000004fd:
00000503: #5 := R31 - 0x10
00000509: mem := mem with [#5, el]:u64 <- R29
0000050f: mem := mem with [#5 + 8, el]:u64 <- R30
00000513: R31 := #5
00000519: R29 := R31
0000051e: R30 := 0x590
00000520: call @call_weak_fn with return %00000522

00000522:
00000527: R29 := mem[R31, el]:u64
0000052c: R30 := mem[R31 + 8, el]:u64
00000530: R31 := R31 + 0x10
00000535: call R30 with noreturn

000005b3: sub _start(_start_result)
000005e7: _start_result :: out u32 = low:32[R0]

000001d6:
000001db: R29 := 0
000001e0: R30 := 0
000001e6: R5 := R0
000001ed: R1 := mem[R31, el]:u64
000001f3: R2 := R31 + 8
000001f9: R6 := R31
000001fe: R0 := 0x10000
00000205: R0 := mem[R0 + 0xFF0, el]:u64
0000020a: R3 := 0
0000020f: R4 := 0
00000214: R30 := 0x670
00000217: call @__libc_start_main with return %00000219

00000219:
0000021c: R30 := 0x674
0000021f: call @abort with return %000005d6

000005d6:
000005d7: call @call_weak_fn with noreturn

000005b6: sub abort()


0000021d:
00000473: R16 := 0x10000
0000047a: R17 := mem[R16 + 0xFC8, el]:u64
00000480: R16 := R16 + 0xFC8
00000485: call R17 with noreturn

000005b7: sub call_weak_fn(call_weak_fn_result)
000005e8: call_weak_fn_result :: out u32 = low:32[R0]

00000221:
00000224: R0 := 0x10000
0000022b: R0 := mem[R0 + 0xFE8, el]:u64
00000231: when R0 = 0 goto %0000022f
000005d8: goto %0000038f

0000022f:
00000237: call R30 with noreturn

0000038f:
00000392: goto @__gmon_start__

00000390:
0000045d: R16 := 0x10000
00000464: R17 := mem[R16 + 0xFC0, el]:u64
0000046a: R16 := R16 + 0xFC0
0000046f: call R17 with noreturn

000005b9: sub deregister_tm_clones(deregister_tm_clones_result)
000005e9: deregister_tm_clones_result :: out u32 = low:32[R0]

0000023d:
00000240: R0 := 0x11000
00000246: R0 := R0 + 0x10
0000024b: R1 := 0x11000
00000251: R1 := R1 + 0x10
00000257: #1 := ~R0
0000025c: #2 := R1 + ~R0
00000262: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000268: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000026c: ZF := #2 + 1 = 0
00000270: NF := 63:63[#2 + 1]
00000276: when ZF goto %00000274
000005d9: goto %00000371

00000371:
00000374: R1 := 0x10000
0000037b: R1 := mem[R1 + 0xFD8, el]:u64
00000380: when R1 = 0 goto %00000274
000005da: goto %00000384

00000274:
0000027c: call R30 with noreturn

00000384:
00000388: R16 := R1
0000038d: call R16 with noreturn

000005bc: sub frame_dummy(frame_dummy_result)
000005ea: frame_dummy_result :: out u32 = low:32[R0]

00000314:
00000316: call @register_tm_clones with noreturn

000005bd: sub main(main_argc, main_argv, main_result)
000005eb: main_argc :: in u32 = low:32[R0]
000005ec: main_argv :: in out u64 = R1
000005ed: main_result :: out u32 = low:32[R0]

000001a8:
000001ab: R1 := 0x11000
000001b0: R0 := 0
000001b7: mem := mem with [R1 + 0x18, el]:u32 <- 0
000001bc: call R30 with noreturn

000005be: sub register_tm_clones(register_tm_clones_result)
000005ee: register_tm_clones_result :: out u32 = low:32[R0]

0000027e:
00000281: R0 := 0x11000
00000287: R0 := R0 + 0x10
0000028c: R1 := 0x11000
00000292: R1 := R1 + 0x10
00000299: R1 := R1 + ~R0 + 1
0000029f: R2 := 0.63:63[R1]
000002a6: R1 := R2 + (R1 ~>> 3)
000002ac: R1 := extend:64[63:1[R1]]
000002b2: when R1 = 0 goto %000002b0
000005db: goto %00000353

00000353:
00000356: R2 := 0x10000
0000035d: R2 := mem[R2 + 0xFF8, el]:u64
00000362: when R2 = 0 goto %000002b0
000005dc: goto %00000366

000002b0:
000002b8: call R30 with noreturn

00000366:
0000036a: R16 := R2
0000036f: call R16 with noreturn
