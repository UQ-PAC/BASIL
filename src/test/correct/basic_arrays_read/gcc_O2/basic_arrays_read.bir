000005dd: program
000005ab: sub __cxa_finalize(__cxa_finalize_result)
000005de: __cxa_finalize_result :: out u32 = low:32[R0]

0000034f:
00000447: R16 := 0x20000
0000044e: R17 := mem[R16 + 8, el]:u64
00000454: R16 := R16 + 8
00000459: call R17 with noreturn

000005ac: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005df: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002bd:
000002c1: #3 := R31 - 0x20
000002c7: mem := mem with [#3, el]:u64 <- R29
000002cd: mem := mem with [#3 + 8, el]:u64 <- R30
000002d1: R31 := #3
000002d7: R29 := R31
000002df: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002e4: R19 := 0x20000
000002eb: R0 := pad:64[mem[R19 + 0x30]]
000002f1: when 0:0[R0] goto %000002ef
000005d3: goto %00000318

00000318:
0000031b: R0 := 0x1F000
00000322: R0 := mem[R0 + 0xFC8, el]:u64
00000328: when R0 = 0 goto %00000326
000005d4: goto %0000033f

0000033f:
00000342: R0 := 0x20000
00000349: R0 := mem[R0 + 0x28, el]:u64
0000034e: R30 := 0x730
00000351: call @__cxa_finalize with return %00000326

00000326:
0000032e: R30 := 0x734
00000330: call @deregister_tm_clones with return %00000332

00000332:
00000335: R0 := 1
0000033d: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005d5: goto %000002ef

000002ef:
000002f9: R19 := mem[R31 + 0x10, el]:u64
00000300: R29 := mem[R31, el]:u64
00000305: R30 := mem[R31 + 8, el]:u64
00000309: R31 := R31 + 0x20
0000030e: call R30 with noreturn

000005b0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005e0: __libc_start_main_main :: in u64 = R0
000005e1: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005e2: __libc_start_main_arg3 :: in out u64 = R2
000005e3: __libc_start_main_auxv :: in out u64 = R3
000005e4: __libc_start_main_result :: out u32 = low:32[R0]

00000216:
00000431: R16 := 0x20000
00000438: R17 := mem[R16, el]:u64
0000043e: R16 := R16
00000443: call R17 with noreturn

000005b1: sub _fini(_fini_result)
000005e5: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005b2: sub _init(_init_result)
000005e6: _init_result :: out u32 = low:32[R0]

000004fd:
00000503: #5 := R31 - 0x10
00000509: mem := mem with [#5, el]:u64 <- R29
0000050f: mem := mem with [#5 + 8, el]:u64 <- R30
00000513: R31 := #5
00000519: R29 := R31
0000051e: R30 := 0x590
00000520: call @call_weak_fn with return %00000522

00000522:
00000527: R29 := mem[R31, el]:u64
0000052c: R30 := mem[R31 + 8, el]:u64
00000530: R31 := R31 + 0x10
00000535: call R30 with noreturn

000005b3: sub _start(_start_result)
000005e7: _start_result :: out u32 = low:32[R0]

000001d7:
000001dc: R29 := 0
000001e1: R30 := 0
000001e7: R5 := R0
000001ee: R1 := mem[R31, el]:u64
000001f4: R2 := R31 + 8
000001fa: R6 := R31
000001ff: R0 := 0x1F000
00000206: R0 := mem[R0 + 0xFD8, el]:u64
0000020b: R3 := 0
00000210: R4 := 0
00000215: R30 := 0x670
00000218: call @__libc_start_main with return %0000021a

0000021a:
0000021d: R30 := 0x674
00000220: call @abort with return %000005d6

000005d6:
000005d7: call @call_weak_fn with noreturn

000005b6: sub abort()


0000021e:
00000473: R16 := 0x20000
0000047a: R17 := mem[R16 + 0x18, el]:u64
00000480: R16 := R16 + 0x18
00000485: call R17 with noreturn

000005b7: sub call_weak_fn(call_weak_fn_result)
000005e8: call_weak_fn_result :: out u32 = low:32[R0]

00000222:
00000225: R0 := 0x1F000
0000022c: R0 := mem[R0 + 0xFD0, el]:u64
00000232: when R0 = 0 goto %00000230
000005d8: goto %0000038f

00000230:
00000238: call R30 with noreturn

0000038f:
00000392: goto @__gmon_start__

00000390:
0000045d: R16 := 0x20000
00000464: R17 := mem[R16 + 0x10, el]:u64
0000046a: R16 := R16 + 0x10
0000046f: call R17 with noreturn

000005b9: sub deregister_tm_clones(deregister_tm_clones_result)
000005e9: deregister_tm_clones_result :: out u32 = low:32[R0]

0000023e:
00000241: R0 := 0x20000
00000247: R0 := R0 + 0x30
0000024c: R1 := 0x20000
00000252: R1 := R1 + 0x30
00000258: #1 := ~R0
0000025d: #2 := R1 + ~R0
00000263: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000269: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000026d: ZF := #2 + 1 = 0
00000271: NF := 63:63[#2 + 1]
00000277: when ZF goto %00000275
000005d9: goto %00000371

00000371:
00000374: R1 := 0x1F000
0000037b: R1 := mem[R1 + 0xFC0, el]:u64
00000380: when R1 = 0 goto %00000275
000005da: goto %00000384

00000275:
0000027d: call R30 with noreturn

00000384:
00000388: R16 := R1
0000038d: call R16 with noreturn

000005bc: sub frame_dummy(frame_dummy_result)
000005ea: frame_dummy_result :: out u32 = low:32[R0]

00000314:
00000316: call @register_tm_clones with noreturn

000005bd: sub main(main_argc, main_argv, main_result)
000005eb: main_argc :: in u32 = low:32[R0]
000005ec: main_argv :: in out u64 = R1
000005ed: main_result :: out u32 = low:32[R0]

000001a9:
000001ac: R1 := 0x20000
000001b1: R0 := 0
000001b8: mem := mem with [R1 + 0x38, el]:u32 <- 0
000001bd: call R30 with noreturn

000005be: sub register_tm_clones(register_tm_clones_result)
000005ee: register_tm_clones_result :: out u32 = low:32[R0]

0000027f:
00000282: R0 := 0x20000
00000288: R0 := R0 + 0x30
0000028d: R1 := 0x20000
00000293: R1 := R1 + 0x30
0000029a: R1 := R1 + ~R0 + 1
000002a0: R2 := 0.63:63[R1]
000002a7: R1 := R2 + (R1 ~>> 3)
000002ad: R1 := extend:64[63:1[R1]]
000002b3: when R1 = 0 goto %000002b1
000005db: goto %00000353

00000353:
00000356: R2 := 0x1F000
0000035d: R2 := mem[R2 + 0xFE0, el]:u64
00000362: when R2 = 0 goto %000002b1
000005dc: goto %00000366

000002b1:
000002b9: call R30 with noreturn

00000366:
0000036a: R16 := R2
0000036f: call R16 with noreturn
