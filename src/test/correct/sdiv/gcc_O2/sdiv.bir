00000000: program
00000004: sub __cxa_finalize(__cxa_finalize_result)
00000008: __cxa_finalize_result :: out u32 = low:32[R0]

0000000c:
00000010: R16 := 0x20000
00000014: R17 := mem[R16 + 8, el]:u64
00000018: R16 := R16 + 8
0000001c: call R17 with noreturn

00000020: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000024: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000028:
0000002c: #3 := R31 - 0x20
00000030: mem := mem with [#3, el]:u64 <- R29
00000034: mem := mem with [#3 + 8, el]:u64 <- R30
00000038: R31 := #3
0000003c: R29 := R31
00000040: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000044: R19 := 0x20000
00000048: R0 := pad:64[mem[R19 + 0x30]]
0000004c: when 0:0[R0] goto %00000050
00000054: goto %00000058

00000058:
0000005c: R0 := 0x1F000
00000060: R0 := mem[R0 + 0xFC8, el]:u64
00000064: when R0 = 0 goto %00000068
0000006c: goto %00000070

00000070:
00000074: R0 := 0x20000
00000078: R0 := mem[R0 + 0x28, el]:u64
0000007c: R30 := 0x8B0
00000080: call @__cxa_finalize with return %00000068

00000068:
00000084: R30 := 0x8B4
00000088: call @deregister_tm_clones with return %00000090

00000090:
00000094: R0 := 1
00000098: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000009c: goto %00000050

00000050:
000000a0: R19 := mem[R31 + 0x10, el]:u64
000000a4: R29 := mem[R31, el]:u64
000000a8: R30 := mem[R31 + 8, el]:u64
000000ac: R31 := R31 + 0x20
000000b0: call R30 with noreturn

000000b4: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000000b8: __libc_start_main_main :: in u64 = R0
000000bc: __libc_start_main_arg2 :: in u32 = low:32[R1]
000000c0: __libc_start_main_arg3 :: in out u64 = R2
000000c4: __libc_start_main_auxv :: in out u64 = R3
000000c8: __libc_start_main_result :: out u32 = low:32[R0]

000000cc:
000000d0: R16 := 0x20000
000000d4: R17 := mem[R16, el]:u64
000000d8: R16 := R16
000000dc: call R17 with noreturn

000000e0: sub _fini(_fini_result)
000000e4: _fini_result :: out u32 = low:32[R0]

000000e8:
000000ec: #0 := R31 - 0x10
000000f0: mem := mem with [#0, el]:u64 <- R29
000000f4: mem := mem with [#0 + 8, el]:u64 <- R30
000000f8: R31 := #0
000000fc: R29 := R31
00000100: R29 := mem[R31, el]:u64
00000104: R30 := mem[R31 + 8, el]:u64
00000108: R31 := R31 + 0x10
0000010c: call R30 with noreturn

00000110: sub _init(_init_result)
00000114: _init_result :: out u32 = low:32[R0]

00000118:
0000011c: #5 := R31 - 0x10
00000120: mem := mem with [#5, el]:u64 <- R29
00000124: mem := mem with [#5 + 8, el]:u64 <- R30
00000128: R31 := #5
0000012c: R29 := R31
00000130: R30 := 0x700
00000134: call @call_weak_fn with return %0000013c

0000013c:
00000140: R29 := mem[R31, el]:u64
00000144: R30 := mem[R31 + 8, el]:u64
00000148: R31 := R31 + 0x10
0000014c: call R30 with noreturn

00000150: sub _start(_start_result)
00000154: _start_result :: out u32 = low:32[R0]

00000158:
0000015c: R29 := 0
00000160: R30 := 0
00000164: R5 := R0
00000168: R1 := mem[R31, el]:u64
0000016c: R2 := R31 + 8
00000170: R6 := R31
00000174: R0 := 0x1F000
00000178: R0 := mem[R0 + 0xFD8, el]:u64
0000017c: R3 := 0
00000180: R4 := 0
00000184: R30 := 0x7F0
00000188: call @__libc_start_main with return %0000018c

0000018c:
00000190: R30 := 0x7F4
00000194: call @abort with return %0000019c

0000019c:
000001a0: call @call_weak_fn with noreturn

00000198: sub abort()


000001a4:
000001a8: R16 := 0x20000
000001ac: R17 := mem[R16 + 0x18, el]:u64
000001b0: R16 := R16 + 0x18
000001b4: call R17 with noreturn

00000138: sub call_weak_fn(call_weak_fn_result)
000001b8: call_weak_fn_result :: out u32 = low:32[R0]

000001bc:
000001c0: R0 := 0x1F000
000001c4: R0 := mem[R0 + 0xFD0, el]:u64
000001c8: when R0 = 0 goto %000001cc
000001d0: goto %000001d4

000001cc:
000001d8: call R30 with noreturn

000001d4:
000001dc: goto @__gmon_start__

000001e0:
000001e4: R16 := 0x20000
000001e8: R17 := mem[R16 + 0x10, el]:u64
000001ec: R16 := R16 + 0x10
000001f0: call R17 with noreturn

0000008c: sub deregister_tm_clones(deregister_tm_clones_result)
000001f4: deregister_tm_clones_result :: out u32 = low:32[R0]

000001f8:
000001fc: R0 := 0x20000
00000200: R0 := R0 + 0x30
00000204: R1 := 0x20000
00000208: R1 := R1 + 0x30
0000020c: #1 := ~R0
00000210: #2 := R1 + ~R0
00000214: VF := extend:128[#2 + 1] <> extend:128[R1] + extend:128[#1] + 1
00000218: CF := pad:128[#2 + 1] <> pad:128[R1] + pad:128[#1] + 1
0000021c: ZF := #2 + 1 = 0
00000220: NF := 63:63[#2 + 1]
00000224: when ZF goto %00000228
0000022c: goto %00000230

00000230:
00000234: R1 := 0x1F000
00000238: R1 := mem[R1 + 0xFC0, el]:u64
0000023c: when R1 = 0 goto %00000228
00000240: goto %00000244

00000228:
00000248: call R30 with noreturn

00000244:
0000024c: R16 := R1
00000250: call R16 with noreturn

00000254: sub frame_dummy(frame_dummy_result)
00000258: frame_dummy_result :: out u32 = low:32[R0]

0000025c:
00000260: call @register_tm_clones with noreturn

00000268: sub main(main_argc, main_argv, main_result)
0000026c: main_argc :: in u32 = low:32[R0]
00000270: main_argv :: in out u64 = R1
00000274: main_result :: out u32 = low:32[R0]

00000278:
0000027c: R0 := extend:64[31:0[R0]]
00000280: call R30 with noreturn

00000264: sub register_tm_clones(register_tm_clones_result)
00000284: register_tm_clones_result :: out u32 = low:32[R0]

00000288:
0000028c: R0 := 0x20000
00000290: R0 := R0 + 0x30
00000294: R1 := 0x20000
00000298: R1 := R1 + 0x30
0000029c: R1 := R1 + ~R0 + 1
000002a0: R2 := pad:64[63:63[R1]]
000002a4: R1 := R2 + (R1 ~>> 3)
000002a8: R1 := extend:64[63:1[R1]]
000002ac: when R1 = 0 goto %000002b0
000002b4: goto %000002b8

000002b8:
000002bc: R2 := 0x1F000
000002c0: R2 := mem[R2 + 0xFE0, el]:u64
000002c4: when R2 = 0 goto %000002b0
000002c8: goto %000002cc

000002b0:
000002d0: call R30 with noreturn

000002cc:
000002d4: R16 := R2
000002d8: call R16 with noreturn
