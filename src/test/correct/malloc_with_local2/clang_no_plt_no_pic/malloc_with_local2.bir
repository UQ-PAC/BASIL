00000fab: program
00000f92: sub __cxa_finalize(__cxa_finalize_result)
00000fac: __cxa_finalize_result :: out u32 = low:32[R0]

00000cf1:
00000e19: R16 := 0x11000
00000e20: R17 := mem[R16 + 8, el]:u64
00000e26: R16 := R16 + 8
00000e2b: call R17 with noreturn

00000f93: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000fad: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000af7:
00000afb: #3 := R31 - 0x20
00000b01: mem := mem with [#3, el]:u64 <- R29
00000b07: mem := mem with [#3 + 8, el]:u64 <- R30
00000b0b: R31 := #3
00000b11: R29 := R31
00000b19: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000b1e: R19 := 0x11000
00000b25: R0 := pad:64[mem[R19 + 0x48]]
00000b2c: when 31:0[R0] <> 0 goto %00000b2a
00000f94: goto %00000cba

00000cba:
00000cbd: R0 := 0x10000
00000cc4: R0 := mem[R0 + 0xFC8, el]:u64
00000cca: when R0 = 0 goto %00000cc8
00000f95: goto %00000ce1

00000ce1:
00000ce4: R0 := 0x11000
00000ceb: R0 := mem[R0 + 0x40, el]:u64
00000cf0: R30 := 0x7F0
00000cf3: call @__cxa_finalize with return %00000cc8

00000cc8:
00000cd0: R30 := 0x7F4
00000cd2: call @deregister_tm_clones with return %00000cd4

00000cd4:
00000cd7: R0 := 1
00000cdf: mem := mem with [R19 + 0x48] <- 7:0[R0]
00000f96: goto %00000b2a

00000b2a:
00000b34: R19 := mem[R31 + 0x10, el]:u64
00000b3b: R29 := mem[R31, el]:u64
00000b40: R30 := mem[R31 + 8, el]:u64
00000b44: R31 := R31 + 0x20
00000b49: call R30 with noreturn

00000f97: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000fae: __libc_start_main_main :: in u64 = R0
00000faf: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000fb0: __libc_start_main_arg3 :: in out u64 = R2
00000fb1: __libc_start_main_auxv :: in out u64 = R3
00000fb2: __libc_start_main_result :: out u32 = low:32[R0]

00000a50:
00000e03: R16 := 0x11000
00000e0a: R17 := mem[R16, el]:u64
00000e10: R16 := R16
00000e15: call R17 with noreturn

00000f98: sub _fini(_fini_result)
00000fb3: _fini_result :: out u32 = low:32[R0]

000007fc:
00000802: #0 := R31 - 0x10
00000808: mem := mem with [#0, el]:u64 <- R29
0000080e: mem := mem with [#0 + 8, el]:u64 <- R30
00000812: R31 := #0
00000818: R29 := R31
0000081f: R29 := mem[R31, el]:u64
00000824: R30 := mem[R31 + 8, el]:u64
00000828: R31 := R31 + 0x10
0000082d: call R30 with noreturn

00000f99: sub _init(_init_result)
00000fb4: _init_result :: out u32 = low:32[R0]

00000eb5:
00000ebb: #7 := R31 - 0x10
00000ec1: mem := mem with [#7, el]:u64 <- R29
00000ec7: mem := mem with [#7 + 8, el]:u64 <- R30
00000ecb: R31 := #7
00000ed1: R29 := R31
00000ed6: R30 := 0x638
00000ed8: call @call_weak_fn with return %00000eda

00000eda:
00000edf: R29 := mem[R31, el]:u64
00000ee4: R30 := mem[R31 + 8, el]:u64
00000ee8: R31 := R31 + 0x10
00000eed: call R30 with noreturn

00000f9a: sub _start(_start_result)
00000fb5: _start_result :: out u32 = low:32[R0]

00000a11:
00000a16: R29 := 0
00000a1b: R30 := 0
00000a21: R5 := R0
00000a28: R1 := mem[R31, el]:u64
00000a2e: R2 := R31 + 8
00000a34: R6 := R31
00000a39: R0 := 0x10000
00000a40: R0 := mem[R0 + 0xFD8, el]:u64
00000a45: R3 := 0
00000a4a: R4 := 0
00000a4f: R30 := 0x730
00000a52: call @__libc_start_main with return %00000a54

00000a54:
00000a57: R30 := 0x734
00000a5a: call @abort with return %00000f9b

00000f9b:
00000f9c: call @call_weak_fn with noreturn

00000f9d: sub abort()


00000a58:
00000e5b: R16 := 0x11000
00000e62: R17 := mem[R16 + 0x20, el]:u64
00000e68: R16 := R16 + 0x20
00000e6d: call R17 with noreturn

00000f9e: sub call_weak_fn(call_weak_fn_result)
00000fb6: call_weak_fn_result :: out u32 = low:32[R0]

00000a5c:
00000a5f: R0 := 0x10000
00000a66: R0 := mem[R0 + 0xFD0, el]:u64
00000a6c: when R0 = 0 goto %00000a6a
00000f9f: goto %00000d31

00000a6a:
00000a72: call R30 with noreturn

00000d31:
00000d34: goto @__gmon_start__

00000d32:
00000e45: R16 := 0x11000
00000e4c: R17 := mem[R16 + 0x18, el]:u64
00000e52: R16 := R16 + 0x18
00000e57: call R17 with noreturn

00000fa0: sub deregister_tm_clones(deregister_tm_clones_result)
00000fb7: deregister_tm_clones_result :: out u32 = low:32[R0]

00000a78:
00000a7b: R0 := 0x11000
00000a81: R0 := R0 + 0x48
00000a86: R1 := 0x11000
00000a8c: R1 := R1 + 0x48
00000a92: #1 := ~R0
00000a97: #2 := R1 + ~R0
00000a9d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000aa3: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000aa7: ZF := #2 + 1 = 0
00000aab: NF := 63:63[#2 + 1]
00000ab1: when ZF goto %00000aaf
00000fa1: goto %00000d13

00000d13:
00000d16: R1 := 0x10000
00000d1d: R1 := mem[R1 + 0xFC0, el]:u64
00000d22: when R1 = 0 goto %00000aaf
00000fa2: goto %00000d26

00000aaf:
00000ab7: call R30 with noreturn

00000d26:
00000d2a: R16 := R1
00000d2f: call R16 with noreturn

00000fa3: sub frame_dummy(frame_dummy_result)
00000fb8: frame_dummy_result :: out u32 = low:32[R0]

00000b4f:
00000b51: call @register_tm_clones with noreturn

00000fa4: sub free(free_ptr)
00000fb9: free_ptr :: in out u64 = R0

00000c86:
00000e71: R16 := 0x11000
00000e78: R17 := mem[R16 + 0x28, el]:u64
00000e7e: R16 := R16 + 0x28
00000e83: call R17 with noreturn

00000fa5: sub main(main_argc, main_argv, main_result)
00000fba: main_argc :: in u32 = low:32[R0]
00000fbb: main_argv :: in out u64 = R1
00000fbc: main_result :: out u32 = low:32[R0]

00000b53:
00000b57: R31 := R31 - 0x50
00000b5d: #4 := R31 + 0x40
00000b63: mem := mem with [#4, el]:u64 <- R29
00000b69: mem := mem with [#4 + 8, el]:u64 <- R30
00000b6f: R29 := R31 + 0x40
00000b74: R8 := 0
00000b7c: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000b83: mem := mem with [R29 - 4, el]:u32 <- 0
00000b88: R0 := 1
00000b8d: R30 := 0x834
00000b90: call @malloc with return %00000b92

00000b92:
00000b98: mem := mem with [R29 - 0x10, el]:u64 <- R0
00000b9d: R8 := 0xB
00000ba5: mem := mem with [R29 - 0x14, el]:u32 <- 31:0[R8]
00000baa: R0 := 4
00000bb2: mem := mem with [R31, el]:u64 <- R0
00000bb7: R30 := 0x84C
00000bb9: call @malloc with return %00000bbb

00000bbb:
00000bbf: R8 := R0
00000bc6: R0 := mem[R31, el]:u64
00000bce: mem := mem with [R31 + 0x20, el]:u64 <- R8
00000bd3: R8 := 0xA
00000bdb: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R8]
00000be0: R30 := 0x864
00000be2: call @malloc with return %00000be4

00000be4:
00000bea: mem := mem with [R31 + 0x10, el]:u64 <- R0
00000bef: R8 := 9
00000bf7: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000bfe: R9 := mem[R29 - 0x10, el]:u64
00000c03: R8 := 0x41
00000c0b: mem := mem with [R9] <- 7:0[R8]
00000c12: R9 := mem[R31 + 0x20, el]:u64
00000c17: R8 := 0x2A
00000c1f: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000c26: R8 := mem[R29 - 0x10, el]:u64
00000c2d: R1 := pad:64[mem[R8]]
00000c32: R0 := 0
00000c38: R0 := R0 + 0x8F8
00000c3d: R30 := 0x89C
00000c40: call @printf with return %00000c42

00000c42:
00000c47: R8 := mem[R31 + 0x20, el]:u64
00000c4e: R1 := pad:64[mem[R8, el]:u32]
00000c53: R0 := 0
00000c59: R0 := R0 + 0x909
00000c5e: R30 := 0x8B0
00000c60: call @printf with return %00000c62

00000c62:
00000c67: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
00000c6c: R0 := 0
00000c72: R0 := R0 + 0x919
00000c77: R30 := 0x8C0
00000c79: call @printf with return %00000c7b

00000c7b:
00000c80: R0 := mem[R29 - 0x10, el]:u64
00000c85: R30 := 0x8C8
00000c88: call @free with return %00000c8a

00000c8a:
00000c8f: R0 := mem[R31 + 0x20, el]:u64
00000c94: R30 := 0x8D0
00000c96: call @free with return %00000c98

00000c98:
00000c9d: R0 := pad:64[mem[R31 + 8, el]:u32]
00000ca3: #5 := R31 + 0x40
00000ca8: R29 := mem[#5, el]:u64
00000cad: R30 := mem[#5 + 8, el]:u64
00000cb3: R31 := R31 + 0x50
00000cb8: call R30 with noreturn

00000fa6: sub malloc(malloc_size, malloc_result)
00000fbd: malloc_size :: in u64 = R0
00000fbe: malloc_result :: out u64 = R0

00000b8e:
00000e2f: R16 := 0x11000
00000e36: R17 := mem[R16 + 0x10, el]:u64
00000e3c: R16 := R16 + 0x10
00000e41: call R17 with noreturn

00000fa7: sub printf(printf_format, printf_result)
00000fbf: printf_format :: in u64 = R0
00000fc0: printf_result :: out u32 = low:32[R0]

00000c3e:
00000e87: R16 := 0x11000
00000e8e: R17 := mem[R16 + 0x30, el]:u64
00000e94: R16 := R16 + 0x30
00000e99: call R17 with noreturn

00000fa8: sub register_tm_clones(register_tm_clones_result)
00000fc1: register_tm_clones_result :: out u32 = low:32[R0]

00000ab9:
00000abc: R0 := 0x11000
00000ac2: R0 := R0 + 0x48
00000ac7: R1 := 0x11000
00000acd: R1 := R1 + 0x48
00000ad4: R1 := R1 + ~R0 + 1
00000ada: R2 := 0.63:63[R1]
00000ae1: R1 := R2 + (R1 ~>> 3)
00000ae7: R1 := extend:64[63:1[R1]]
00000aed: when R1 = 0 goto %00000aeb
00000fa9: goto %00000cf5

00000cf5:
00000cf8: R2 := 0x10000
00000cff: R2 := mem[R2 + 0xFE0, el]:u64
00000d04: when R2 = 0 goto %00000aeb
00000faa: goto %00000d08

00000aeb:
00000af3: call R30 with noreturn

00000d08:
00000d0c: R16 := R2
00000d11: call R16 with noreturn
