00000640: program
00000629: sub __cxa_finalize(__cxa_finalize_result)
00000641: __cxa_finalize_result :: out u32 = low:32[R0]

000003a1:
000004a9: R16 := 0x11000
000004b0: R17 := mem[R16 + 8, el]:u64
000004b6: R16 := R16 + 8
000004bb: call R17 with noreturn

0000062a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000642: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000292:
00000296: #3 := R31 - 0x20
0000029c: mem := mem with [#3, el]:u64 <- R29
000002a2: mem := mem with [#3 + 8, el]:u64 <- R30
000002a6: R31 := #3
000002ac: R29 := R31
000002b4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b9: R19 := 0x11000
000002c0: R0 := pad:64[mem[R19 + 0x38]]
000002c7: when 31:0[R0] <> 0 goto %000002c5
0000062b: goto %0000036a

0000036a:
0000036d: R0 := 0x10000
00000374: R0 := mem[R0 + 0xFC8, el]:u64
0000037a: when R0 = 0 goto %00000378
0000062c: goto %00000391

00000391:
00000394: R0 := 0x11000
0000039b: R0 := mem[R0 + 0x30, el]:u64
000003a0: R30 := 0x730
000003a3: call @__cxa_finalize with return %00000378

00000378:
00000380: R30 := 0x734
00000382: call @deregister_tm_clones with return %00000384

00000384:
00000387: R0 := 1
0000038f: mem := mem with [R19 + 0x38] <- 7:0[R0]
0000062d: goto %000002c5

000002c5:
000002cf: R19 := mem[R31 + 0x10, el]:u64
000002d6: R29 := mem[R31, el]:u64
000002db: R30 := mem[R31 + 8, el]:u64
000002df: R31 := R31 + 0x20
000002e4: call R30 with noreturn

0000062e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000643: __libc_start_main_main :: in u64 = R0
00000644: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000645: __libc_start_main_arg3 :: in out u64 = R2
00000646: __libc_start_main_auxv :: in out u64 = R3
00000647: __libc_start_main_result :: out u32 = low:32[R0]

000001eb:
00000493: R16 := 0x11000
0000049a: R17 := mem[R16, el]:u64
000004a0: R16 := R16
000004a5: call R17 with noreturn

0000062f: sub _fini(_fini_result)
00000648: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000630: sub _init(_init_result)
00000649: _init_result :: out u32 = low:32[R0]

00000576:
0000057c: #6 := R31 - 0x10
00000582: mem := mem with [#6, el]:u64 <- R29
00000588: mem := mem with [#6 + 8, el]:u64 <- R30
0000058c: R31 := #6
00000592: R29 := R31
00000597: R30 := 0x5C8
00000599: call @call_weak_fn with return %0000059b

0000059b:
000005a0: R29 := mem[R31, el]:u64
000005a5: R30 := mem[R31 + 8, el]:u64
000005a9: R31 := R31 + 0x10
000005ae: call R30 with noreturn

00000631: sub _start(_start_result)
0000064a: _start_result :: out u32 = low:32[R0]

000001ac:
000001b1: R29 := 0
000001b6: R30 := 0
000001bc: R5 := R0
000001c3: R1 := mem[R31, el]:u64
000001c9: R2 := R31 + 8
000001cf: R6 := R31
000001d4: R0 := 0x10000
000001db: R0 := mem[R0 + 0xFD8, el]:u64
000001e0: R3 := 0
000001e5: R4 := 0
000001ea: R30 := 0x670
000001ed: call @__libc_start_main with return %000001ef

000001ef:
000001f2: R30 := 0x674
000001f5: call @abort with return %00000632

00000632:
00000633: call @call_weak_fn with noreturn

00000634: sub abort()


000001f3:
000004d5: R16 := 0x11000
000004dc: R17 := mem[R16 + 0x18, el]:u64
000004e2: R16 := R16 + 0x18
000004e7: call R17 with noreturn

00000635: sub call_weak_fn(call_weak_fn_result)
0000064b: call_weak_fn_result :: out u32 = low:32[R0]

000001f7:
000001fa: R0 := 0x10000
00000201: R0 := mem[R0 + 0xFD0, el]:u64
00000207: when R0 = 0 goto %00000205
00000636: goto %000003e1

00000205:
0000020d: call R30 with noreturn

000003e1:
000003e4: goto @__gmon_start__

000003e2:
000004bf: R16 := 0x11000
000004c6: R17 := mem[R16 + 0x10, el]:u64
000004cc: R16 := R16 + 0x10
000004d1: call R17 with noreturn

00000637: sub deregister_tm_clones(deregister_tm_clones_result)
0000064c: deregister_tm_clones_result :: out u32 = low:32[R0]

00000213:
00000216: R0 := 0x11000
0000021c: R0 := R0 + 0x38
00000221: R1 := 0x11000
00000227: R1 := R1 + 0x38
0000022d: #1 := ~R0
00000232: #2 := R1 + ~R0
00000238: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000242: ZF := #2 + 1 = 0
00000246: NF := 63:63[#2 + 1]
0000024c: when ZF goto %0000024a
00000638: goto %000003c3

000003c3:
000003c6: R1 := 0x10000
000003cd: R1 := mem[R1 + 0xFC0, el]:u64
000003d2: when R1 = 0 goto %0000024a
00000639: goto %000003d6

0000024a:
00000252: call R30 with noreturn

000003d6:
000003da: R16 := R1
000003df: call R16 with noreturn

0000063a: sub frame_dummy(frame_dummy_result)
0000064d: frame_dummy_result :: out u32 = low:32[R0]

000002ea:
000002ec: call @register_tm_clones with noreturn

0000063b: sub main(main_argc, main_argv, main_result)
0000064e: main_argc :: in u32 = low:32[R0]
0000064f: main_argv :: in out u64 = R1
00000650: main_result :: out u32 = low:32[R0]

000002ee:
000002f2: #4 := R31 - 0x10
000002f8: mem := mem with [#4, el]:u64 <- R29
000002fe: mem := mem with [#4 + 8, el]:u64 <- R30
00000302: R31 := #4
00000308: R29 := R31
0000030d: R0 := 0
00000313: R0 := R0 + 0x7B0
00000318: R1 := 0x41
0000031d: R30 := 0x76C
00000320: call @printf with return %00000322

00000322:
00000325: R0 := 0
0000032b: R0 := R0 + 0x7C1
00000330: R1 := 0x2A
00000335: R30 := 0x77C
00000337: call @printf with return %00000339

00000339:
0000033c: R0 := 0
00000342: R0 := R0 + 0x7D1
00000347: R1 := 0xA
0000034c: R30 := 0x78C
0000034e: call @printf with return %00000350

00000350:
00000353: R0 := 0
0000035a: R29 := mem[R31, el]:u64
0000035f: R30 := mem[R31 + 8, el]:u64
00000363: R31 := R31 + 0x10
00000368: call R30 with noreturn

0000063c: sub printf(printf_format, printf_result)
00000651: printf_format :: in u64 = R0
00000652: printf_result :: out u32 = low:32[R0]

0000031e:
000004eb: R16 := 0x11000
000004f2: R17 := mem[R16 + 0x20, el]:u64
000004f8: R16 := R16 + 0x20
000004fd: call R17 with noreturn

0000063d: sub register_tm_clones(register_tm_clones_result)
00000653: register_tm_clones_result :: out u32 = low:32[R0]

00000254:
00000257: R0 := 0x11000
0000025d: R0 := R0 + 0x38
00000262: R1 := 0x11000
00000268: R1 := R1 + 0x38
0000026f: R1 := R1 + ~R0 + 1
00000275: R2 := 0.63:63[R1]
0000027c: R1 := R2 + (R1 ~>> 3)
00000282: R1 := extend:64[63:1[R1]]
00000288: when R1 = 0 goto %00000286
0000063e: goto %000003a5

000003a5:
000003a8: R2 := 0x10000
000003af: R2 := mem[R2 + 0xFE0, el]:u64
000003b4: when R2 = 0 goto %00000286
0000063f: goto %000003b8

00000286:
0000028e: call R30 with noreturn

000003b8:
000003bc: R16 := R2
000003c1: call R16 with noreturn
