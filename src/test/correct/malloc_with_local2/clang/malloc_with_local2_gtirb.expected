var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2292bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 24"} zero_extend24_8(bv8) returns (bv32);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load8_le(mem, 2292bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2293bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2294bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2295bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free ensures (memory_load8_le(mem, 2352bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2353bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2354bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2355bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure FUN_6c0_1728();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load8_le(mem, 2292bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2293bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2294bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2295bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free requires (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free requires (memory_load8_le(mem, 2352bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2353bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2354bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2355bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load8_le(mem, 2292bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2293bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2294bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2295bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free ensures (memory_load8_le(mem, 2352bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2353bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2354bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2355bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation FUN_6c0_1728()
{
  var Gamma_load0: bool;
  var load0: bv64;
  FUN_6c0_1728__0___Yurx7rnRDiQIbh1u7Z0dw:
    assume {:captureState "FUN_6c0_1728__0___Yurx7rnRDiQIbh1u7Z0dw"} true;
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    load0, Gamma_load0 := memory_load64_le(mem, bvadd64(R16, 48bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 48bv64)) || L(mem, bvadd64(R16, 48bv64)));
    R17, Gamma_R17 := load0, Gamma_load0;
    R16, Gamma_R16 := bvadd64(R16, 48bv64), Gamma_R16;
    call printf();
    goto FUN_6c0_1728_basil_return;
  FUN_6c0_1728_basil_return:
    assume {:captureState "FUN_6c0_1728_basil_return"} true;
    return;
}

procedure main_2068();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R29, R30, R31, R8, R9, mem, stack;
  free requires (memory_load64_le(mem, 69688bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free requires (memory_load8_le(mem, 2292bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2293bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2294bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2295bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free requires (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free requires (memory_load8_le(mem, 2352bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2353bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2354bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2355bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 2292bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2293bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2294bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2295bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free ensures (memory_load8_le(mem, 2352bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2353bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2354bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2355bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation main_2068()
{
  var Cse0__5_0_1: bv64;
  var Cse0__5_1_1: bv64;
  var Gamma_Cse0__5_0_1: bool;
  var Gamma_Cse0__5_1_1: bool;
  var Gamma_load10: bool;
  var Gamma_load11: bool;
  var Gamma_load12: bool;
  var Gamma_load13: bool;
  var Gamma_load14: bool;
  var Gamma_load15: bool;
  var Gamma_load16: bool;
  var Gamma_load17: bool;
  var Gamma_load18: bool;
  var Gamma_load19: bool;
  var Gamma_load7: bool;
  var Gamma_load8: bool;
  var Gamma_load9: bool;
  var load10: bv64;
  var load11: bv64;
  var load12: bv64;
  var load13: bv8;
  var load14: bv64;
  var load15: bv64;
  var load16: bv64;
  var load17: bv32;
  var load18: bv64;
  var load19: bv32;
  var load7: bv32;
  var load8: bv64;
  var load9: bv64;
  main_2068__0__yN1LokBAR9yRD4RMSXSfxQ:
    assume {:captureState "main_2068__0__yN1LokBAR9yRD4RMSXSfxQ"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551536bv64), Gamma_R31;
    Cse0__5_0_1, Gamma_Cse0__5_0_1 := bvadd64(R31, 64bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5_0_1, R29), gamma_store64(Gamma_stack, Cse0__5_0_1, Gamma_R29);
    assume {:captureState "2072_1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5_0_1, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5_0_1, 8bv64), Gamma_R30);
    assume {:captureState "2072_2"} true;
    R29, Gamma_R29 := bvadd64(R31, 64bv64), Gamma_R31;
    R8, Gamma_R8 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 8bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R8);
    assume {:captureState "2084_0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64), true);
    assume {:captureState "2088_0"} true;
    R0, Gamma_R0 := 1bv64, true;
    R30, Gamma_R30 := 2100bv64, true;
    call FUN_680_1664();
    goto main_2068__1__eCR9p3I6QnuW7E2ugOxN7g;
  main_2068__1__eCR9p3I6QnuW7E2ugOxN7g:
    assume {:captureState "main_2068__1__eCR9p3I6QnuW7E2ugOxN7g"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R29, 18446744073709551600bv64), R0), gamma_store64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64), Gamma_R0);
    assume {:captureState "2100_0"} true;
    R8, Gamma_R8 := 11bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551596bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551596bv64), Gamma_R8);
    assume {:captureState "2108_0"} true;
    R0, Gamma_R0 := 4bv64, true;
    stack, Gamma_stack := memory_store64_le(stack, R31, R0), gamma_store64(Gamma_stack, R31, Gamma_R0);
    assume {:captureState "2116_0"} true;
    R30, Gamma_R30 := 2124bv64, true;
    call FUN_680_1664();
    goto main_2068__2__FSETkqUYRWuqGvRhnzp0tA;
  main_2068__2__FSETkqUYRWuqGvRhnzp0tA:
    assume {:captureState "main_2068__2__FSETkqUYRWuqGvRhnzp0tA"} true;
    R8, Gamma_R8 := R0, Gamma_R0;
    load18, Gamma_load18 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R0, Gamma_R0 := load18, Gamma_load18;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 32bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 32bv64), Gamma_R8);
    assume {:captureState "2132_0"} true;
    R8, Gamma_R8 := 10bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R8);
    assume {:captureState "2140_0"} true;
    R30, Gamma_R30 := 2148bv64, true;
    call FUN_680_1664();
    goto main_2068__3__trREPylQRuWIzMBYpyXfnQ;
  main_2068__3__trREPylQRuWIzMBYpyXfnQ:
    assume {:captureState "main_2068__3__trREPylQRuWIzMBYpyXfnQ"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R0);
    assume {:captureState "2148_0"} true;
    R8, Gamma_R8 := 9bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R8);
    assume {:captureState "2156_0"} true;
    load10, Gamma_load10 := memory_load64_le(stack, bvadd64(R29, 18446744073709551600bv64)), gamma_load64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64));
    R9, Gamma_R9 := load10, Gamma_load10;
    R8, Gamma_R8 := 65bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store8_le(mem, R9, R8[8:0]), gamma_store8(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "2168_0"} true;
    load11, Gamma_load11 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    R9, Gamma_R9 := load11, Gamma_load11;
    R8, Gamma_R8 := 42bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "2180_0"} true;
    load12, Gamma_load12 := memory_load64_le(stack, bvadd64(R29, 18446744073709551600bv64)), gamma_load64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64));
    R8, Gamma_R8 := load12, Gamma_load12;
    call rely();
    load13, Gamma_load13 := memory_load8_le(mem, R8), (gamma_load8(Gamma_mem, R8) || L(mem, R8));
    R1, Gamma_R1 := zero_extend32_32(zero_extend24_8(load13)), Gamma_load13;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2296bv64), Gamma_R0;
    R30, Gamma_R30 := 2204bv64, true;
    call FUN_6c0_1728();
    goto main_2068__4__qWMJh7qWT8yorxt1BpnoAg;
  main_2068__4__qWMJh7qWT8yorxt1BpnoAg:
    assume {:captureState "main_2068__4__qWMJh7qWT8yorxt1BpnoAg"} true;
    load16, Gamma_load16 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    R8, Gamma_R8 := load16, Gamma_load16;
    call rely();
    load17, Gamma_load17 := memory_load32_le(mem, R8), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R1, Gamma_R1 := zero_extend32_32(load17), Gamma_load17;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2313bv64), Gamma_R0;
    R30, Gamma_R30 := 2224bv64, true;
    call FUN_6c0_1728();
    goto main_2068__5__XGVqaesVShylRrbOWqzjFw;
  main_2068__5__XGVqaesVShylRrbOWqzjFw:
    assume {:captureState "main_2068__5__XGVqaesVShylRrbOWqzjFw"} true;
    load19, Gamma_load19 := memory_load32_le(stack, bvadd64(R31, 28bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    R1, Gamma_R1 := zero_extend32_32(load19), Gamma_load19;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2329bv64), Gamma_R0;
    R30, Gamma_R30 := 2240bv64, true;
    call FUN_6c0_1728();
    goto main_2068__6__KOWJQzAnSc2QejZ1C9Zzjw;
  main_2068__6__KOWJQzAnSc2QejZ1C9Zzjw:
    assume {:captureState "main_2068__6__KOWJQzAnSc2QejZ1C9Zzjw"} true;
    load14, Gamma_load14 := memory_load64_le(stack, bvadd64(R29, 18446744073709551600bv64)), gamma_load64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64));
    R0, Gamma_R0 := load14, Gamma_load14;
    R30, Gamma_R30 := 2248bv64, true;
    call FUN_6b0_1712();
    goto main_2068__7__XxlrxTEbSBSt~FnDRB3sPg;
  main_2068__7__XxlrxTEbSBSt~FnDRB3sPg:
    assume {:captureState "main_2068__7__XxlrxTEbSBSt~FnDRB3sPg"} true;
    load15, Gamma_load15 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    R0, Gamma_R0 := load15, Gamma_load15;
    R30, Gamma_R30 := 2256bv64, true;
    call FUN_6b0_1712();
    goto main_2068__8__vRLqE2TDSi2s0PYIJ~bRSA;
  main_2068__8__vRLqE2TDSi2s0PYIJ~bRSA:
    assume {:captureState "main_2068__8__vRLqE2TDSi2s0PYIJ~bRSA"} true;
    load7, Gamma_load7 := memory_load32_le(stack, bvadd64(R31, 8bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 8bv64));
    R0, Gamma_R0 := zero_extend32_32(load7), Gamma_load7;
    Cse0__5_1_1, Gamma_Cse0__5_1_1 := bvadd64(R31, 64bv64), Gamma_R31;
    load8, Gamma_load8 := memory_load64_le(stack, Cse0__5_1_1), gamma_load64(Gamma_stack, Cse0__5_1_1);
    R29, Gamma_R29 := load8, Gamma_load8;
    load9, Gamma_load9 := memory_load64_le(stack, bvadd64(Cse0__5_1_1, 8bv64)), gamma_load64(Gamma_stack, bvadd64(Cse0__5_1_1, 8bv64));
    R30, Gamma_R30 := load9, Gamma_load9;
    R31, Gamma_R31 := bvadd64(R31, 80bv64), Gamma_R31;
    goto main_2068_basil_return;
  main_2068_basil_return:
    assume {:captureState "main_2068_basil_return"} true;
    return;
}

procedure FUN_6b0_1712();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load8_le(mem, 2292bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2293bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2294bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2295bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free requires (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free requires (memory_load8_le(mem, 2352bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2353bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2354bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2355bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load8_le(mem, 2292bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2293bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2294bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2295bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free ensures (memory_load8_le(mem, 2352bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2353bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2354bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2355bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation FUN_6b0_1712()
{
  var Gamma_load30: bool;
  var load30: bv64;
  FUN_6b0_1712__0__ftC9I58hTr~uInFEjp~qaQ:
    assume {:captureState "FUN_6b0_1712__0__ftC9I58hTr~uInFEjp~qaQ"} true;
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    load30, Gamma_load30 := memory_load64_le(mem, bvadd64(R16, 40bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 40bv64)) || L(mem, bvadd64(R16, 40bv64)));
    R17, Gamma_R17 := load30, Gamma_load30;
    R16, Gamma_R16 := bvadd64(R16, 40bv64), Gamma_R16;
    call #free();
    goto FUN_6b0_1712_basil_return;
  FUN_6b0_1712_basil_return:
    assume {:captureState "FUN_6b0_1712_basil_return"} true;
    return;
}

procedure FUN_680_1664();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load8_le(mem, 2292bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2293bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2294bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2295bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free requires (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free requires (memory_load8_le(mem, 2352bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2353bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2354bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2355bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load8_le(mem, 2292bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2293bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2294bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2295bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free ensures (memory_load8_le(mem, 2352bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2353bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2354bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2355bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation FUN_680_1664()
{
  var Gamma_load33: bool;
  var load33: bv64;
  FUN_680_1664__0__5~1SMMaYTnC_yOEStjKdRw:
    assume {:captureState "FUN_680_1664__0__5~1SMMaYTnC_yOEStjKdRw"} true;
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    load33, Gamma_load33 := memory_load64_le(mem, bvadd64(R16, 16bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 16bv64)) || L(mem, bvadd64(R16, 16bv64)));
    R17, Gamma_R17 := load33, Gamma_load33;
    R16, Gamma_R16 := bvadd64(R16, 16bv64), Gamma_R16;
    call malloc();
    goto FUN_680_1664_basil_return;
  FUN_680_1664_basil_return:
    assume {:captureState "FUN_680_1664_basil_return"} true;
    return;
}

procedure printf();
  free requires (memory_load8_le(mem, 2292bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2293bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2294bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2295bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free requires (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free requires (memory_load8_le(mem, 2352bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2353bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2354bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2355bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load8_le(mem, 2292bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2293bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2294bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2295bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free ensures (memory_load8_le(mem, 2352bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2353bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2354bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2355bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure #free();
  free requires (memory_load8_le(mem, 2292bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2293bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2294bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2295bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free requires (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free requires (memory_load8_le(mem, 2352bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2353bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2354bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2355bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load8_le(mem, 2292bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2293bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2294bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2295bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free ensures (memory_load8_le(mem, 2352bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2353bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2354bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2355bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure malloc();
  free requires (memory_load8_le(mem, 2292bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2293bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2294bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2295bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free requires (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free requires (memory_load8_le(mem, 2352bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2353bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2354bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2355bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load8_le(mem, 2292bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2293bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2294bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2295bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2296bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 748482783423457568bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 8389758743699018752bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 748764258400168224bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 7165064418565837824bv64);
  free ensures (memory_load64_le(mem, 2336bv64) == 7019267257152859233bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2322295453215190114bv64);
  free ensures (memory_load8_le(mem, 2352bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2353bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2354bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2355bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

