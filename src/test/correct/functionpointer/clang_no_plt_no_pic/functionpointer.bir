0000108b: program
0000106f: sub __cxa_finalize(__cxa_finalize_result)
0000108c: __cxa_finalize_result :: out u32 = low:32[R0]

00000dc5:
00000ebd: R16 := 0x11000
00000ec4: R17 := mem[R16 + 8, el]:u64
00000eca: R16 := R16 + 8
00000ecf: call R17 with noreturn

00001070: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000108d: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000b76:
00000b7a: #3 := R31 - 0x20
00000b80: mem := mem with [#3, el]:u64 <- R29
00000b86: mem := mem with [#3 + 8, el]:u64 <- R30
00000b8a: R31 := #3
00000b90: R29 := R31
00000b98: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000b9d: R19 := 0x11000
00000ba4: R0 := pad:64[mem[R19 + 0x30]]
00000bab: when 31:0[R0] <> 0 goto %00000ba9
00001071: goto %00000d8e

00000d8e:
00000d91: R0 := 0x10000
00000d98: R0 := mem[R0 + 0xFC8, el]:u64
00000d9e: when R0 = 0 goto %00000d9c
00001072: goto %00000db5

00000db5:
00000db8: R0 := 0x11000
00000dbf: R0 := mem[R0 + 0x28, el]:u64
00000dc4: R30 := 0x6F0
00000dc7: call @__cxa_finalize with return %00000d9c

00000d9c:
00000da4: R30 := 0x6F4
00000da6: call @deregister_tm_clones with return %00000da8

00000da8:
00000dab: R0 := 1
00000db3: mem := mem with [R19 + 0x30] <- 7:0[R0]
00001073: goto %00000ba9

00000ba9:
00000bb3: R19 := mem[R31 + 0x10, el]:u64
00000bba: R29 := mem[R31, el]:u64
00000bbf: R30 := mem[R31 + 8, el]:u64
00000bc3: R31 := R31 + 0x20
00000bc8: call R30 with noreturn

00001074: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000108e: __libc_start_main_main :: in u64 = R0
0000108f: __libc_start_main_arg2 :: in u32 = low:32[R1]
00001090: __libc_start_main_arg3 :: in out u64 = R2
00001091: __libc_start_main_auxv :: in out u64 = R3
00001092: __libc_start_main_result :: out u32 = low:32[R0]

00000acf:
00000ea7: R16 := 0x11000
00000eae: R17 := mem[R16, el]:u64
00000eb4: R16 := R16
00000eb9: call R17 with noreturn

00001075: sub _fini(_fini_result)
00001093: _fini_result :: out u32 = low:32[R0]

0000086b:
00000871: #0 := R31 - 0x10
00000877: mem := mem with [#0, el]:u64 <- R29
0000087d: mem := mem with [#0 + 8, el]:u64 <- R30
00000881: R31 := #0
00000887: R29 := R31
0000088e: R29 := mem[R31, el]:u64
00000893: R30 := mem[R31 + 8, el]:u64
00000897: R31 := R31 + 0x10
0000089c: call R30 with noreturn

00001076: sub _init(_init_result)
00001094: _init_result :: out u32 = low:32[R0]

00000f9a:
00000fa0: #10 := R31 - 0x10
00000fa6: mem := mem with [#10, el]:u64 <- R29
00000fac: mem := mem with [#10 + 8, el]:u64 <- R30
00000fb0: R31 := #10
00000fb6: R29 := R31
00000fbb: R30 := 0x590
00000fbd: call @call_weak_fn with return %00000fbf

00000fbf:
00000fc4: R29 := mem[R31, el]:u64
00000fc9: R30 := mem[R31 + 8, el]:u64
00000fcd: R31 := R31 + 0x10
00000fd2: call R30 with noreturn

00001077: sub _start(_start_result)
00001095: _start_result :: out u32 = low:32[R0]

00000a90:
00000a95: R29 := 0
00000a9a: R30 := 0
00000aa0: R5 := R0
00000aa7: R1 := mem[R31, el]:u64
00000aad: R2 := R31 + 8
00000ab3: R6 := R31
00000ab8: R0 := 0x10000
00000abf: R0 := mem[R0 + 0xFD8, el]:u64
00000ac4: R3 := 0
00000ac9: R4 := 0
00000ace: R30 := 0x630
00000ad1: call @__libc_start_main with return %00000ad3

00000ad3:
00000ad6: R30 := 0x634
00000ad9: call @abort with return %00001078

00001078:
00001079: call @call_weak_fn with noreturn

0000107a: sub abort()


00000ad7:
00000ee9: R16 := 0x11000
00000ef0: R17 := mem[R16 + 0x18, el]:u64
00000ef6: R16 := R16 + 0x18
00000efb: call R17 with noreturn

0000107b: sub call_weak_fn(call_weak_fn_result)
00001096: call_weak_fn_result :: out u32 = low:32[R0]

00000adb:
00000ade: R0 := 0x10000
00000ae5: R0 := mem[R0 + 0xFD0, el]:u64
00000aeb: when R0 = 0 goto %00000ae9
0000107c: goto %00000e05

00000ae9:
00000af1: call R30 with noreturn

00000e05:
00000e08: goto @__gmon_start__

00000e06:
00000ed3: R16 := 0x11000
00000eda: R17 := mem[R16 + 0x10, el]:u64
00000ee0: R16 := R16 + 0x10
00000ee5: call R17 with noreturn

0000107d: sub deregister_tm_clones(deregister_tm_clones_result)
00001097: deregister_tm_clones_result :: out u32 = low:32[R0]

00000af7:
00000afa: R0 := 0x11000
00000b00: R0 := R0 + 0x30
00000b05: R1 := 0x11000
00000b0b: R1 := R1 + 0x30
00000b11: #1 := ~R0
00000b16: #2 := R1 + ~R0
00000b1c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000b22: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000b26: ZF := #2 + 1 = 0
00000b2a: NF := 63:63[#2 + 1]
00000b30: when ZF goto %00000b2e
0000107e: goto %00000de7

00000de7:
00000dea: R1 := 0x10000
00000df1: R1 := mem[R1 + 0xFC0, el]:u64
00000df6: when R1 = 0 goto %00000b2e
0000107f: goto %00000dfa

00000b2e:
00000b36: call R30 with noreturn

00000dfa:
00000dfe: R16 := R1
00000e03: call R16 with noreturn

00001080: sub frame_dummy(frame_dummy_result)
00001098: frame_dummy_result :: out u32 = low:32[R0]

00000bce:
00000bd0: call @register_tm_clones with noreturn

00001081: sub main(main_argc, main_argv, main_result)
00001099: main_argc :: in u32 = low:32[R0]
0000109a: main_argv :: in out u64 = R1
0000109b: main_result :: out u32 = low:32[R0]

00000c17:
00000c1b: R31 := R31 - 0x30
00000c21: #4 := R31 + 0x20
00000c27: mem := mem with [#4, el]:u64 <- R29
00000c2d: mem := mem with [#4 + 8, el]:u64 <- R30
00000c33: R29 := R31 + 0x20
00000c3a: mem := mem with [R29 - 4, el]:u32 <- 0
00000c42: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
00000c49: R8 := pad:64[mem[R29 - 8, el]:u32]
00000c51: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000c57: #5 := 31:0[R8] - 1
00000c5c: VF := extend:33[#5 + 1] <> extend:33[31:0[R8]] + 0
00000c61: CF := pad:33[#5 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000c65: ZF := #5 + 1 = 0
00000c69: NF := 31:31[#5 + 1]
00000c6d: R8 := pad:64[#5 + 1]
00000c79: when ZF <> 1 goto %00000c72
00000c7a: goto %00000c75

00000c75:
00000c76: R8 := 1
00000c7c: goto %00000c78

00000c72:
00000c73: R8 := 0
00000c7b: goto %00000c78

00000c78:
00000c82: when 0:0[R8] goto %00000c80
00001082: goto %00000d10

00000c80:
00000c88: R8 := 0
00000c8e: R8 := R8 + 0x714
00000c96: mem := mem with [R31 + 0x10, el]:u64 <- R8
00000c9b: goto %00000c99

00000d10:
00000d13: goto %00000d11

00000d11:
00000d19: R8 := pad:64[mem[R31 + 0xC, el]:u32]
00000d1f: #7 := 31:0[R8] - 2
00000d24: VF := extend:33[#7 + 1] <> extend:33[31:0[R8]] - 1
00000d29: CF := pad:33[#7 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFF
00000d2d: ZF := #7 + 1 = 0
00000d31: NF := 31:31[#7 + 1]
00000d35: R8 := pad:64[#7 + 1]
00000d41: when ZF <> 1 goto %00000d3a
00000d42: goto %00000d3d

00000d3d:
00000d3e: R8 := 1
00000d44: goto %00000d40

00000d3a:
00000d3b: R8 := 0
00000d43: goto %00000d40

00000d40:
00000d49: when 0:0[R8] goto %00000ccb
00001083: goto %00000d4d

00000ccb:
00000cce: R8 := 0
00000cd4: R8 := R8 + 0x724
00000cdc: mem := mem with [R31 + 0x10, el]:u64 <- R8
00000ce0: goto %00000c99

00000d4d:
00000d50: goto %00000d4e

00000d4e:
00000d56: R8 := pad:64[mem[R31 + 0xC, el]:u32]
00000d5c: #8 := 31:0[R8] - 3
00000d61: VF := extend:33[#8 + 1] <> extend:33[31:0[R8]] - 2
00000d66: CF := pad:33[#8 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFFE
00000d6a: ZF := #8 + 1 = 0
00000d6e: NF := 31:31[#8 + 1]
00000d72: R8 := pad:64[#8 + 1]
00000d7e: when ZF <> 1 goto %00000d77
00000d7f: goto %00000d7a

00000d7a:
00000d7b: R8 := 1
00000d81: goto %00000d7d

00000d77:
00000d78: R8 := 0
00000d80: goto %00000d7d

00000d7d:
00000d86: when 0:0[R8] goto %00000ce2
00001084: goto %00000d8a

00000ce2:
00000ce5: R8 := 0
00000ceb: R8 := R8 + 0x734
00000cf3: mem := mem with [R31 + 0x10, el]:u64 <- R8
00000cf7: goto %00000c99

00000d8a:
00000d8c: goto %00000cf9

00000cf9:
00000cfc: R8 := 0
00000d02: R8 := R8 + 0x714
00000d0a: mem := mem with [R31 + 0x10, el]:u64 <- R8
00000d0e: goto %00000c99

00000c99:
00000ca1: R8 := mem[R31 + 0x10, el]:u64
00000ca6: R30 := 0x7E0
00000ca9: call R8 with return %00000cab

00000cab:
00000cae: R0 := 0
00000cb4: #6 := R31 + 0x20
00000cb9: R29 := mem[#6, el]:u64
00000cbe: R30 := mem[#6 + 8, el]:u64
00000cc4: R31 := R31 + 0x30
00000cc9: call R30 with noreturn

00001085: sub register_tm_clones(register_tm_clones_result)
0000109c: register_tm_clones_result :: out u32 = low:32[R0]

00000b38:
00000b3b: R0 := 0x11000
00000b41: R0 := R0 + 0x30
00000b46: R1 := 0x11000
00000b4c: R1 := R1 + 0x30
00000b53: R1 := R1 + ~R0 + 1
00000b59: R2 := 0.63:63[R1]
00000b60: R1 := R2 + (R1 ~>> 3)
00000b66: R1 := extend:64[63:1[R1]]
00000b6c: when R1 = 0 goto %00000b6a
00001086: goto %00000dc9

00000dc9:
00000dcc: R2 := 0x10000
00000dd3: R2 := mem[R2 + 0xFE0, el]:u64
00000dd8: when R2 = 0 goto %00000b6a
00001087: goto %00000ddc

00000b6a:
00000b72: call R30 with noreturn

00000ddc:
00000de0: R16 := R2
00000de5: call R16 with noreturn

00001088: sub set_seven(set_seven_result)
0000109d: set_seven_result :: out u32 = low:32[R0]

00000c00:
00000c03: R9 := 0x11000
00000c08: R8 := 7
00000c10: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
00000c15: call R30 with noreturn

00001089: sub set_six(set_six_result)
0000109e: set_six_result :: out u32 = low:32[R0]

00000be9:
00000bec: R9 := 0x11000
00000bf1: R8 := 6
00000bf9: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
00000bfe: call R30 with noreturn

0000108a: sub set_two(set_two_result)
0000109f: set_two_result :: out u32 = low:32[R0]

00000bd2:
00000bd5: R9 := 0x11000
00000bda: R8 := 2
00000be2: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
00000be7: call R30 with noreturn
