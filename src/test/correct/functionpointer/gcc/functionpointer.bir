0000084b: program
00000809: sub __cxa_finalize(__cxa_finalize_result)
0000084c: __cxa_finalize_result :: out u32 = low:32[R0]

0000055f:
00000657: R16 := 0x20000
0000065e: R17 := mem[R16 + 8, el]:u64
00000664: R16 := R16 + 8
00000669: call R17 with noreturn

0000080a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000084d: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000032b:
0000032f: #3 := R31 - 0x20
00000335: mem := mem with [#3, el]:u64 <- R29
0000033b: mem := mem with [#3 + 8, el]:u64 <- R30
0000033f: R31 := #3
00000345: R29 := R31
0000034d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000352: R19 := 0x20000
00000359: R0 := pad:64[mem[R19 + 0x30]]
0000035f: when 0:0[R0] goto %0000035d
0000083c: goto %00000528

00000528:
0000052b: R0 := 0x1F000
00000532: R0 := mem[R0 + 0xFC8, el]:u64
00000538: when R0 = 0 goto %00000536
0000083d: goto %0000054f

0000054f:
00000552: R0 := 0x20000
00000559: R0 := mem[R0 + 0x28, el]:u64
0000055e: R30 := 0x6F0
00000561: call @__cxa_finalize with return %00000536

00000536:
0000053e: R30 := 0x6F4
00000540: call @deregister_tm_clones with return %00000542

00000542:
00000545: R0 := 1
0000054d: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000083e: goto %0000035d

0000035d:
00000367: R19 := mem[R31 + 0x10, el]:u64
0000036e: R29 := mem[R31, el]:u64
00000373: R30 := mem[R31 + 8, el]:u64
00000377: R31 := R31 + 0x20
0000037c: call R30 with noreturn

0000080e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000084e: __libc_start_main_main :: in u64 = R0
0000084f: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000850: __libc_start_main_arg3 :: in out u64 = R2
00000851: __libc_start_main_auxv :: in out u64 = R3
00000852: __libc_start_main_result :: out u32 = low:32[R0]

00000284:
00000641: R16 := 0x20000
00000648: R17 := mem[R16, el]:u64
0000064e: R16 := R16
00000653: call R17 with noreturn

0000080f: sub _fini(_fini_result)
00000853: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000810: sub _init(_init_result)
00000854: _init_result :: out u32 = low:32[R0]

00000734:
0000073a: #10 := R31 - 0x10
00000740: mem := mem with [#10, el]:u64 <- R29
00000746: mem := mem with [#10 + 8, el]:u64 <- R30
0000074a: R31 := #10
00000750: R29 := R31
00000755: R30 := 0x590
00000757: call @call_weak_fn with return %00000759

00000759:
0000075e: R29 := mem[R31, el]:u64
00000763: R30 := mem[R31 + 8, el]:u64
00000767: R31 := R31 + 0x10
0000076c: call R30 with noreturn

00000811: sub _start(_start_result)
00000855: _start_result :: out u32 = low:32[R0]

00000245:
0000024a: R29 := 0
0000024f: R30 := 0
00000255: R5 := R0
0000025c: R1 := mem[R31, el]:u64
00000262: R2 := R31 + 8
00000268: R6 := R31
0000026d: R0 := 0x1F000
00000274: R0 := mem[R0 + 0xFD8, el]:u64
00000279: R3 := 0
0000027e: R4 := 0
00000283: R30 := 0x630
00000286: call @__libc_start_main with return %00000288

00000288:
0000028b: R30 := 0x634
0000028e: call @abort with return %0000083f

0000083f:
00000840: call @call_weak_fn with noreturn

00000814: sub abort()


0000028c:
00000683: R16 := 0x20000
0000068a: R17 := mem[R16 + 0x18, el]:u64
00000690: R16 := R16 + 0x18
00000695: call R17 with noreturn

00000815: sub call_weak_fn(call_weak_fn_result)
00000856: call_weak_fn_result :: out u32 = low:32[R0]

00000290:
00000293: R0 := 0x1F000
0000029a: R0 := mem[R0 + 0xFD0, el]:u64
000002a0: when R0 = 0 goto %0000029e
00000841: goto %0000059f

0000029e:
000002a6: call R30 with noreturn

0000059f:
000005a2: goto @__gmon_start__

000005a0:
0000066d: R16 := 0x20000
00000674: R17 := mem[R16 + 0x10, el]:u64
0000067a: R16 := R16 + 0x10
0000067f: call R17 with noreturn

00000817: sub deregister_tm_clones(deregister_tm_clones_result)
00000857: deregister_tm_clones_result :: out u32 = low:32[R0]

000002ac:
000002af: R0 := 0x20000
000002b5: R0 := R0 + 0x30
000002ba: R1 := 0x20000
000002c0: R1 := R1 + 0x30
000002c6: #1 := ~R0
000002cb: #2 := R1 + ~R0
000002d1: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002d7: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002db: ZF := #2 + 1 = 0
000002df: NF := 63:63[#2 + 1]
000002e5: when ZF goto %000002e3
00000842: goto %00000581

00000581:
00000584: R1 := 0x1F000
0000058b: R1 := mem[R1 + 0xFC0, el]:u64
00000590: when R1 = 0 goto %000002e3
00000843: goto %00000594

000002e3:
000002eb: call R30 with noreturn

00000594:
00000598: R16 := R1
0000059d: call R16 with noreturn

0000081a: sub frame_dummy(frame_dummy_result)
00000858: frame_dummy_result :: out u32 = low:32[R0]

00000382:
00000384: call @register_tm_clones with noreturn

0000081b: sub main(main_argc, main_argv, main_result)
00000859: main_argc :: in u32 = low:32[R0]
0000085a: main_argv :: in out u64 = R1
0000085b: main_result :: out u32 = low:32[R0]

000003e3:
000003e7: #4 := R31 - 0x30
000003ed: mem := mem with [#4, el]:u64 <- R29
000003f3: mem := mem with [#4 + 8, el]:u64 <- R30
000003f7: R31 := #4
000003fd: R29 := R31
00000405: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000040c: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000412: #5 := 31:0[R0] - 3
00000417: VF := extend:33[#5 + 1] <> extend:33[31:0[R0]] - 2
0000041c: CF := pad:33[#5 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFE
00000420: ZF := #5 + 1 = 0
00000424: NF := 31:31[#5 + 1]
0000042a: when ZF goto %00000428
00000844: goto %00000482

00000428:
00000430: R0 := 0
00000436: R0 := R0 + 0x744
0000043e: mem := mem with [R31 + 0x28, el]:u64 <- R0
00000443: goto %00000441

00000482:
00000487: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000048d: #6 := 31:0[R0] - 3
00000492: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] - 2
00000497: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFE
0000049b: ZF := #6 + 1 = 0
0000049f: NF := 31:31[#6 + 1]
000004a6: when NF = VF & ~ZF goto %0000046d
00000845: goto %000004aa

000004aa:
000004af: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000004b5: #7 := 31:0[R0] - 1
000004ba: VF := extend:33[#7 + 1] <> extend:33[31:0[R0]] + 0
000004bf: CF := pad:33[#7 + 1] <> pad:33[31:0[R0]] - 0x100000000
000004c3: ZF := #7 + 1 = 0
000004c7: NF := 31:31[#7 + 1]
000004cd: when ZF goto %000004cb
00000846: goto %000004fe

000004cb:
000004d3: R0 := 0
000004d9: R0 := R0 + 0x714
000004e1: mem := mem with [R31 + 0x28, el]:u64 <- R0
000004e5: goto %00000441

000004fe:
00000503: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000509: #8 := 31:0[R0] - 2
0000050e: VF := extend:33[#8 + 1] <> extend:33[31:0[R0]] - 1
00000513: CF := pad:33[#8 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFF
00000517: ZF := #8 + 1 = 0
0000051b: NF := 31:31[#8 + 1]
00000520: when ZF goto %000004e7
00000847: goto %00000524

000004e7:
000004ea: R0 := 0
000004f0: R0 := R0 + 0x72C
000004f8: mem := mem with [R31 + 0x28, el]:u64 <- R0
000004fc: goto %00000441

00000524:
00000526: goto %0000046d

0000046d:
00000470: R0 := 0
00000476: R0 := R0 + 0x714
0000047e: mem := mem with [R31 + 0x28, el]:u64 <- R0
00000848: goto %00000441

00000441:
00000449: R0 := mem[R31 + 0x28, el]:u64
0000044e: R30 := 0x7E4
00000451: call R0 with return %00000453

00000453:
00000456: R0 := 0
0000045d: R29 := mem[R31, el]:u64
00000462: R30 := mem[R31 + 8, el]:u64
00000466: R31 := R31 + 0x30
0000046b: call R30 with noreturn

00000821: sub register_tm_clones(register_tm_clones_result)
0000085c: register_tm_clones_result :: out u32 = low:32[R0]

000002ed:
000002f0: R0 := 0x20000
000002f6: R0 := R0 + 0x30
000002fb: R1 := 0x20000
00000301: R1 := R1 + 0x30
00000308: R1 := R1 + ~R0 + 1
0000030e: R2 := 0.63:63[R1]
00000315: R1 := R2 + (R1 ~>> 3)
0000031b: R1 := extend:64[63:1[R1]]
00000321: when R1 = 0 goto %0000031f
00000849: goto %00000563

00000563:
00000566: R2 := 0x1F000
0000056d: R2 := mem[R2 + 0xFE0, el]:u64
00000572: when R2 = 0 goto %0000031f
0000084a: goto %00000576

0000031f:
00000327: call R30 with noreturn

00000576:
0000057a: R16 := R2
0000057f: call R16 with noreturn

00000824: sub set_seven(set_seven_result)
0000085d: set_seven_result :: out u32 = low:32[R0]

000003c4:
000003c7: R0 := 0x20000
000003cd: R0 := R0 + 0x34
000003d2: R1 := 7
000003da: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003e1: call R30 with noreturn

00000825: sub set_six(set_six_result)
0000085e: set_six_result :: out u32 = low:32[R0]

000003a5:
000003a8: R0 := 0x20000
000003ae: R0 := R0 + 0x34
000003b3: R1 := 6
000003bb: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003c2: call R30 with noreturn

00000826: sub set_two(set_two_result)
0000085f: set_two_result :: out u32 = low:32[R0]

00000386:
00000389: R0 := 0x20000
0000038f: R0 := R0 + 0x34
00000394: R1 := 2
0000039c: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003a3: call R30 with noreturn
