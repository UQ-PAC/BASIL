var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R2: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R2: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp64(bv64, bv64) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 32"} sign_extend32_32(bv32) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 4196480bv64) == 131073bv32);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R1, Gamma_R2, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_VF, Gamma_ZF, Gamma_mem, Gamma_stack, NF, R0, R1, R2, R29, R30, R31, VF, ZF, mem, stack;
  requires (Gamma_R0 == true);
  free requires (memory_load64_le(mem, 4325376bv64) == 0bv64);
  free requires (memory_load64_le(mem, 4325384bv64) == 0bv64);
  free requires (memory_load32_le(mem, 4196480bv64) == 131073bv32);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 4196480bv64) == 131073bv32);

implementation main()
{
  var $load3: bv64;
  var $load4: bv64;
  var $load5: bv64;
  var $load6: bv64;
  var $load7: bv64;
  var Cse0__5$4$0: bv64;
  var Cse0__5$4$2: bv32;
  var Cse0__5$5$2: bv32;
  var Gamma_$load3: bool;
  var Gamma_$load4: bool;
  var Gamma_$load5: bool;
  var Gamma_$load6: bool;
  var Gamma_$load7: bool;
  var Gamma_Cse0__5$4$0: bool;
  var Gamma_Cse0__5$4$2: bool;
  var Gamma_Cse0__5$5$2: bool;
  $main$__0__$Djx7L34DQzuSXaBFEj_bpQ:
    assume {:captureState "$main$__0__$Djx7L34DQzuSXaBFEj_bpQ"} true;
    Cse0__5$4$0, Gamma_Cse0__5$4$0 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5$4$0, R29), gamma_store64(Gamma_stack, Cse0__5$4$0, Gamma_R29);
    assume {:captureState "4195968$1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5$4$0, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5$4$0, 8bv64), Gamma_R30);
    assume {:captureState "4195968$2"} true;
    R31, Gamma_R31 := Cse0__5$4$0, Gamma_Cse0__5$4$0;
    R29, Gamma_R29 := R31, Gamma_R31;
    Cse0__5$4$2, Gamma_Cse0__5$4$2 := bvadd32(R0[32:0], 4294967295bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp64(sign_extend32_32(Cse0__5$4$2), bvadd64(sign_extend32_32(R0[32:0]), 18446744073709551615bv64))), (Gamma_R0 && Gamma_Cse0__5$4$2);
    CF, Gamma_CF := bvnot1(bvcomp64(zero_extend32_32(Cse0__5$4$2), bvadd64(zero_extend32_32(R0[32:0]), 4294967295bv64))), (Gamma_R0 && Gamma_Cse0__5$4$2);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$4$2, 0bv32), Gamma_Cse0__5$4$2;
    NF, Gamma_NF := Cse0__5$4$2[32:31], Gamma_Cse0__5$4$2;
    assert Gamma_ZF;
    goto $main$__0__$Djx7L34DQzuSXaBFEj_bpQ_goto_$main$__4__$GghTYm6bT12tNFmqu0nIjA, $main$__0__$Djx7L34DQzuSXaBFEj_bpQ_goto_$main$__1__$fxMAJl44TWOTA8IHVD8V7Q;
  $main$__1__$fxMAJl44TWOTA8IHVD8V7Q:
    assume {:captureState "$main$__1__$fxMAJl44TWOTA8IHVD8V7Q"} true;
    R1, Gamma_R1 := 4321280bv64, true;
    call rely();
    $load6, Gamma_$load6 := memory_load64_le(mem, bvadd64(R1, 4080bv64)), (gamma_load64(Gamma_mem, bvadd64(R1, 4080bv64)) || L(mem, bvadd64(R1, 4080bv64)));
    R1, Gamma_R1 := $load6, Gamma_$load6;
    Cse0__5$5$2, Gamma_Cse0__5$5$2 := bvadd32(R0[32:0], 4294967294bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp64(sign_extend32_32(Cse0__5$5$2), bvadd64(sign_extend32_32(R0[32:0]), 18446744073709551614bv64))), (Gamma_R0 && Gamma_Cse0__5$5$2);
    CF, Gamma_CF := bvnot1(bvcomp64(zero_extend32_32(Cse0__5$5$2), bvadd64(zero_extend32_32(R0[32:0]), 4294967294bv64))), (Gamma_R0 && Gamma_Cse0__5$5$2);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$5$2, 0bv32), Gamma_Cse0__5$5$2;
    NF, Gamma_NF := Cse0__5$5$2[32:31], Gamma_Cse0__5$5$2;
    R2, Gamma_R2 := 4321280bv64, true;
    call rely();
    $load7, Gamma_$load7 := memory_load64_le(mem, bvadd64(R2, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R2, 4064bv64)) || L(mem, bvadd64(R2, 4064bv64)));
    R2, Gamma_R2 := $load7, Gamma_$load7;
    assert Gamma_ZF;
    goto $main$__1__$fxMAJl44TWOTA8IHVD8V7Q$__0, $main$__1__$fxMAJl44TWOTA8IHVD8V7Q$__1;
  $main$__2__$yQ1z8A~IRoSs4MRYTbbghg:
    assume {:captureState "$main$__2__$yQ1z8A~IRoSs4MRYTbbghg"} true;
    R30, Gamma_R30 := 4195972bv64, true;
    call set_six();
    goto $main$__3__$GW0MHC~ORUKlCdpgOcZ6zA;
  $main$__3__$GW0MHC~ORUKlCdpgOcZ6zA:
    assume {:captureState "$main$__3__$GW0MHC~ORUKlCdpgOcZ6zA"} true;
    R0, Gamma_R0 := 0bv64, true;
    $load3, Gamma_$load3 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R29, Gamma_R29 := $load3, Gamma_$load3;
    $load4, Gamma_$load4 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := $load4, Gamma_$load4;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_basil_return;
  $main$__4__$GghTYm6bT12tNFmqu0nIjA:
    assume {:captureState "$main$__4__$GghTYm6bT12tNFmqu0nIjA"} true;
    R0, Gamma_R0 := 4321280bv64, true;
    call rely();
    $load5, Gamma_$load5 := memory_load64_le(mem, bvadd64(R0, 4072bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4072bv64)) || L(mem, bvadd64(R0, 4072bv64)));
    R0, Gamma_R0 := $load5, Gamma_$load5;
    goto $main$__2__$yQ1z8A~IRoSs4MRYTbbghg;
  $main$__0__$Djx7L34DQzuSXaBFEj_bpQ_goto_$main$__4__$GghTYm6bT12tNFmqu0nIjA:
    assume {:captureState "$main$__0__$Djx7L34DQzuSXaBFEj_bpQ_goto_$main$__4__$GghTYm6bT12tNFmqu0nIjA"} true;
    assume (ZF == 1bv1);
    goto $main$__4__$GghTYm6bT12tNFmqu0nIjA;
  $main$__0__$Djx7L34DQzuSXaBFEj_bpQ_goto_$main$__1__$fxMAJl44TWOTA8IHVD8V7Q:
    assume {:captureState "$main$__0__$Djx7L34DQzuSXaBFEj_bpQ_goto_$main$__1__$fxMAJl44TWOTA8IHVD8V7Q"} true;
    assume (!(ZF == 1bv1));
    goto $main$__1__$fxMAJl44TWOTA8IHVD8V7Q;
  $main$__1__$fxMAJl44TWOTA8IHVD8V7Q$__0:
    assume {:captureState "$main$__1__$fxMAJl44TWOTA8IHVD8V7Q$__0"} true;
    assume (ZF == 1bv1);
    R0, Gamma_R0 := R1, Gamma_R1;
    goto $main$__2__$yQ1z8A~IRoSs4MRYTbbghg;
  $main$__1__$fxMAJl44TWOTA8IHVD8V7Q$__1:
    assume {:captureState "$main$__1__$fxMAJl44TWOTA8IHVD8V7Q$__1"} true;
    assume (!(ZF == 1bv1));
    R0, Gamma_R0 := R2, Gamma_R2;
    goto $main$__2__$yQ1z8A~IRoSs4MRYTbbghg;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

procedure set_six();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load32_le(mem, 4196480bv64) == 131073bv32);
  free ensures (memory_load32_le(mem, 4196480bv64) == 131073bv32);

implementation set_six()
{
  var $load17: bv64;
  var Gamma_$load17: bool;
  $set_six$__0__$24sQpyZMTFejNeMkgQiWnw:
    assume {:captureState "$set_six$__0__$24sQpyZMTFejNeMkgQiWnw"} true;
    R0, Gamma_R0 := 4321280bv64, true;
    call rely();
    $load17, Gamma_$load17 := memory_load64_le(mem, bvadd64(R0, 4048bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4048bv64)) || L(mem, bvadd64(R0, 4048bv64)));
    R0, Gamma_R0 := $load17, Gamma_$load17;
    R1, Gamma_R1 := 6bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "4196412$0"} true;
    R0, Gamma_R0 := 0bv64, true;
    R1, Gamma_R1 := 0bv64, true;
    goto set_six_basil_return;
  set_six_basil_return:
    assume {:captureState "set_six_basil_return"} true;
    return;
}

