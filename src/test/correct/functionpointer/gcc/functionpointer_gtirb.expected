var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsgt"} bvsgt32(bv32, bv32) returns (bool);
function {:extern} {:bvbuiltin "bvsle"} bvsle32(bv32, bv32) returns (bool);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:inline} byte_extract64_64(value: bv64, offset: bv64) returns (bv8) {
  bvlshr64(value,bvmul64(offset,8bv64))[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then byte_extract64_64(value, bvsub64(i, index)) else memory[i])))
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2052bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2053bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2054bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2055bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1884bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure set_six();
  modifies Gamma_mem, mem;
  free requires (memory_load8_le(mem, 2052bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2053bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2054bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2055bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1884bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2052bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2053bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2054bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2055bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1884bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation set_six()
{
  $set_six$__0__$fFBUlQZnQASntc8S7REItw:
    call rely();
    assert (L(mem, 69652bv64) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, 69652bv64, 6bv32), gamma_store32(Gamma_mem, 69652bv64, true);
    goto set_six_basil_return;
  set_six_basil_return:
    return;
}

procedure main(R0_in: bv64, Gamma_R0_in: bool, R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R29_out: bv64, Gamma_R29_out: bool, R30_out: bv64, Gamma_R30_out: bool, R31_out: bv64, Gamma_R31_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  requires (Gamma_R0_in == true);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 2052bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2053bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2054bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2055bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1884bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2052bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2053bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2054bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2055bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1884bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R29_out: bv64, Gamma_R29_out: bool, R30_out: bv64, Gamma_R30_out: bool, R31_out: bv64, Gamma_R31_out: bool)
{
  var Gamma_R0_14: bool;
  var Gamma_R0_2: bool;
  var Gamma_R0_3: bool;
  var Gamma_R0_4: bool;
  var Gamma_R0_5: bool;
  var Gamma_R1: bool;
  var Gamma_R29_3: bool;
  var Gamma_R30_3: bool;
  var R0_14: bv64;
  var R0_2: bv32;
  var R0_3: bv32;
  var R0_4: bv32;
  var R0_5: bv32;
  var R1: bv64;
  var R29_3: bv64;
  var R30_3: bv64;
  $main$__0__$_D9FajgJRbSw2iGYcpsBIw:
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551568bv64), R29_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551568bv64), Gamma_R29_in);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551576bv64), R30_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551576bv64), Gamma_R30_in);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551596bv64), R0_in[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64), Gamma_R0_in);
    R0_2, Gamma_R0_2 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551596bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64));
    assert Gamma_R0_2;
    goto $main$__0__$_D9FajgJRbSw2iGYcpsBIw_goto_$main$__7__$0vBHGw4KTwa~IJS_dHoKWg, $main$__0__$_D9FajgJRbSw2iGYcpsBIw_goto_$main$__1__$f9ntZhvlQY6oxTWcOq0JTg;
  $main$__0__$_D9FajgJRbSw2iGYcpsBIw_goto_$main$__1__$f9ntZhvlQY6oxTWcOq0JTg:
    assume (!(R0_2 == 2bv32));
    R0_3, Gamma_R0_3 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551596bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64));
    assert Gamma_R0_3;
    goto $main$__1__$f9ntZhvlQY6oxTWcOq0JTg_goto_$main$__8__$_yFfkL_NQBGG_4FltkEZPA, $main$__1__$f9ntZhvlQY6oxTWcOq0JTg_goto_$main$__2__$DHZJ7cSQSna~nrpNXjA6pQ;
  $main$__1__$f9ntZhvlQY6oxTWcOq0JTg_goto_$main$__2__$DHZJ7cSQSna~nrpNXjA6pQ:
    assume bvsle32(R0_3, 2bv32);
    R0_4, Gamma_R0_4 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551596bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64));
    assert Gamma_R0_4;
    goto $main$__2__$DHZJ7cSQSna~nrpNXjA6pQ_goto_$main$__5__$3a21fgw4S6uXIwvw1rvH7A, $main$__2__$DHZJ7cSQSna~nrpNXjA6pQ_goto_$main$__3__$Y~lfjyGjQ_WvS7i15Hyi6w;
  $main$__2__$DHZJ7cSQSna~nrpNXjA6pQ_goto_$main$__3__$Y~lfjyGjQ_WvS7i15Hyi6w:
    assume (!(R0_4 == 0bv32));
    R0_5, Gamma_R0_5 := memory_load32_le(stack, bvadd64(R31_in, 18446744073709551596bv64)), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64));
    assert Gamma_R0_5;
    goto $main$__3__$Y~lfjyGjQ_WvS7i15Hyi6w_goto_$main$__6__$c0TNLKEPT3GkfwAOFWCdMw, $main$__3__$Y~lfjyGjQ_WvS7i15Hyi6w_goto_$main$__4__$3NbhKlSfRPah6thY7nGsGQ;
  $main$__3__$Y~lfjyGjQ_WvS7i15Hyi6w_goto_$main$__4__$3NbhKlSfRPah6thY7nGsGQ:
    assume (!(R0_5 == 1bv32));
    goto $main$__8__$_yFfkL_NQBGG_4FltkEZPA;
  $main$__3__$Y~lfjyGjQ_WvS7i15Hyi6w_goto_$main$__6__$c0TNLKEPT3GkfwAOFWCdMw:
    assume (R0_5 == 1bv32);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551608bv64), 1836bv64), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), true);
    goto $main$__9__$N87MnmJ9SDqTYx5EXy~u6g;
  $main$__2__$DHZJ7cSQSna~nrpNXjA6pQ_goto_$main$__5__$3a21fgw4S6uXIwvw1rvH7A:
    assume (R0_4 == 0bv32);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551608bv64), 1812bv64), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), true);
    goto $main$__9__$N87MnmJ9SDqTYx5EXy~u6g;
  $main$__1__$f9ntZhvlQY6oxTWcOq0JTg_goto_$main$__8__$_yFfkL_NQBGG_4FltkEZPA:
    assume bvsgt32(R0_3, 2bv32);
    goto $main$__8__$_yFfkL_NQBGG_4FltkEZPA;
  $main$__8__$_yFfkL_NQBGG_4FltkEZPA:
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551608bv64), 1812bv64), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), true);
    goto $main$__9__$N87MnmJ9SDqTYx5EXy~u6g;
  $main$__0__$_D9FajgJRbSw2iGYcpsBIw_goto_$main$__7__$0vBHGw4KTwa~IJS_dHoKWg:
    assume (R0_2 == 2bv32);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551608bv64), 1860bv64), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), true);
    goto $main$__9__$N87MnmJ9SDqTYx5EXy~u6g;
  $main$__9__$N87MnmJ9SDqTYx5EXy~u6g:
    R0_14, Gamma_R0_14 := memory_load64_le(stack, bvadd64(R31_in, 18446744073709551608bv64)), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64));
    goto $main$__9__$N87MnmJ9SDqTYx5EXy~u6g$set_seven, $main$__9__$N87MnmJ9SDqTYx5EXy~u6g$set_two, $main$__9__$N87MnmJ9SDqTYx5EXy~u6g$set_six;
  $main$__9__$N87MnmJ9SDqTYx5EXy~u6g$set_six:
    assume (R0_14 == 1836bv64);
    call set_six();
    goto $main$__10__$Y1PxorE9TmC2XsQ0OMAzBg;
  $main$__9__$N87MnmJ9SDqTYx5EXy~u6g$set_two:
    assume (R0_14 == 1812bv64);
    call set_two();
    goto $main$__10__$Y1PxorE9TmC2XsQ0OMAzBg;
  $main$__9__$N87MnmJ9SDqTYx5EXy~u6g$set_seven:
    assume (R0_14 == 1860bv64);
    call set_seven();
    goto $main$__10__$Y1PxorE9TmC2XsQ0OMAzBg;
  $main$__10__$Y1PxorE9TmC2XsQ0OMAzBg:
    R29_3, Gamma_R29_3 := memory_load64_le(stack, bvadd64(R31_in, 18446744073709551568bv64)), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551568bv64));
    R30_3, Gamma_R30_3 := memory_load64_le(stack, bvadd64(R31_in, 18446744073709551576bv64)), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551576bv64));
    goto main_basil_return;
  main_basil_return:
    R0_out, R1_out, R29_out, R30_out, R31_out := 0bv64, R1, R29_3, R30_3, R31_in;
    Gamma_R0_out, Gamma_R1_out, Gamma_R29_out, Gamma_R30_out, Gamma_R31_out := true, Gamma_R1, Gamma_R29_3, Gamma_R30_3, Gamma_R31_in;
    return;
}

procedure set_seven();
  modifies Gamma_mem, mem;
  free requires (memory_load8_le(mem, 2052bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2053bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2054bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2055bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1884bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2052bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2053bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2054bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2055bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1884bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation set_seven()
{
  $set_seven$__0__$N5CM0prJRzCc8vJXtN888g:
    call rely();
    assert (L(mem, 69652bv64) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, 69652bv64, 7bv32), gamma_store32(Gamma_mem, 69652bv64, true);
    goto set_seven_basil_return;
  set_seven_basil_return:
    return;
}

procedure set_two();
  modifies Gamma_mem, mem;
  free requires (memory_load8_le(mem, 2052bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2053bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2054bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2055bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1884bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2052bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2053bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2054bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2055bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1884bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation set_two()
{
  $set_two$__0__$pAd9qDTFTLWR4Wy64dKK0A:
    call rely();
    assert (L(mem, 69652bv64) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, 69652bv64, 2bv32), gamma_store32(Gamma_mem, 69652bv64, true);
    goto set_two_basil_return;
  set_two_basil_return:
    return;
}

