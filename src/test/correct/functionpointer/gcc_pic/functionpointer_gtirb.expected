var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 2180bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 1964bv64);
  free ensures (memory_load64_le(mem, 69608bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1988bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure set_seven_1988();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load32_le(mem, 2180bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69576bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 1964bv64);
  free requires (memory_load64_le(mem, 69608bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1988bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load32_le(mem, 2180bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 1964bv64);
  free ensures (memory_load64_le(mem, 69608bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1988bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation set_seven_1988()
{
  var Gamma_load13: bool;
  var load13: bv64;
  set_seven_1988__0__L4yUagLBRvmbr9rJ4OG7AA:
    assume {:captureState "set_seven_1988__0__L4yUagLBRvmbr9rJ4OG7AA"} true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load13, Gamma_load13 := memory_load64_le(mem, bvadd64(R0, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4040bv64)) || L(mem, bvadd64(R0, 4040bv64)));
    R0, Gamma_R0 := load13, Gamma_load13;
    R1, Gamma_R1 := 7bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "2000_0"} true;
    goto set_seven_1988_basil_return;
  set_seven_1988_basil_return:
    assume {:captureState "set_seven_1988_basil_return"} true;
    return;
}

procedure main_2012();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R1, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_VF, Gamma_ZF, Gamma_mem, Gamma_stack, NF, R0, R1, R29, R30, R31, VF, ZF, mem, stack;
  requires (Gamma_R0 == true);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le(mem, 2180bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69576bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 1964bv64);
  free requires (memory_load64_le(mem, 69608bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1988bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 2180bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 1964bv64);
  free ensures (memory_load64_le(mem, 69608bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1988bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main_2012()
{
  var Cse0__5_10_0: bv64;
  var Cse0__5_10_4: bv32;
  var Cse0__5_2_1: bv32;
  var Cse0__5_7_1: bv32;
  var Cse0__5_8_1: bv32;
  var Gamma_Cse0__5_10_0: bool;
  var Gamma_Cse0__5_10_4: bool;
  var Gamma_Cse0__5_2_1: bool;
  var Gamma_Cse0__5_7_1: bool;
  var Gamma_Cse0__5_8_1: bool;
  var Gamma_load15: bool;
  var Gamma_load16: bool;
  var Gamma_load17: bool;
  var Gamma_load18: bool;
  var Gamma_load19: bool;
  var Gamma_load20: bool;
  var Gamma_load21: bool;
  var Gamma_load22: bool;
  var Gamma_load23: bool;
  var Gamma_load24: bool;
  var Gamma_load25: bool;
  var load15: bv64;
  var load16: bv64;
  var load17: bv32;
  var load18: bv64;
  var load19: bv64;
  var load20: bv64;
  var load21: bv32;
  var load22: bv32;
  var load23: bv64;
  var load24: bv64;
  var load25: bv32;
  main_2012__0__mSqeYLPTTSeWCfH6eJwJtA:
    assume {:captureState "main_2012__0__mSqeYLPTTSeWCfH6eJwJtA"} true;
    Cse0__5_10_0, Gamma_Cse0__5_10_0 := bvadd64(R31, 18446744073709551568bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5_10_0, R29), gamma_store64(Gamma_stack, Cse0__5_10_0, Gamma_R29);
    assume {:captureState "2012_1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5_10_0, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5_10_0, 8bv64), Gamma_R30);
    assume {:captureState "2012_2"} true;
    R31, Gamma_R31 := Cse0__5_10_0, Gamma_Cse0__5_10_0;
    R29, Gamma_R29 := R31, Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R0);
    assume {:captureState "2020_0"} true;
    load25, Gamma_load25 := memory_load32_le(stack, bvadd64(R31, 28bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    R0, Gamma_R0 := zero_extend32_32(load25), Gamma_load25;
    Cse0__5_10_4, Gamma_Cse0__5_10_4 := bvadd32(R0[32:0], 4294967294bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_10_4), bvadd33(sign_extend1_32(R0[32:0]), 8589934590bv33))), (Gamma_R0 && Gamma_Cse0__5_10_4);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_10_4), bvadd33(zero_extend1_32(R0[32:0]), 4294967294bv33))), (Gamma_R0 && Gamma_Cse0__5_10_4);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_10_4, 0bv32), Gamma_Cse0__5_10_4;
    NF, Gamma_NF := Cse0__5_10_4[32:31], Gamma_Cse0__5_10_4;
    assert Gamma_ZF;
    goto main_2012__0__mSqeYLPTTSeWCfH6eJwJtA_goto_main_2012__7__CM1tpRQfSBKhPNKoMwfCqQ, main_2012__0__mSqeYLPTTSeWCfH6eJwJtA_goto_main_2012__1__Itcc9ikmRriat4P2PfBY9Q;
  main_2012__0__mSqeYLPTTSeWCfH6eJwJtA_goto_main_2012__1__Itcc9ikmRriat4P2PfBY9Q:
    assume {:captureState "main_2012__0__mSqeYLPTTSeWCfH6eJwJtA_goto_main_2012__1__Itcc9ikmRriat4P2PfBY9Q"} true;
    assume (!(ZF == 1bv1));
    load22, Gamma_load22 := memory_load32_le(stack, bvadd64(R31, 28bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    R0, Gamma_R0 := zero_extend32_32(load22), Gamma_load22;
    Cse0__5_8_1, Gamma_Cse0__5_8_1 := bvadd32(R0[32:0], 4294967294bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_8_1), bvadd33(sign_extend1_32(R0[32:0]), 8589934590bv33))), (Gamma_R0 && Gamma_Cse0__5_8_1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_8_1), bvadd33(zero_extend1_32(R0[32:0]), 4294967294bv33))), (Gamma_R0 && Gamma_Cse0__5_8_1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_8_1, 0bv32), Gamma_Cse0__5_8_1;
    NF, Gamma_NF := Cse0__5_8_1[32:31], Gamma_Cse0__5_8_1;
    goto main_2012__1__Itcc9ikmRriat4P2PfBY9Q;
  main_2012__1__Itcc9ikmRriat4P2PfBY9Q:
    assume {:captureState "main_2012__1__Itcc9ikmRriat4P2PfBY9Q"} true;
    assert ((Gamma_NF && Gamma_VF) && Gamma_ZF);
    goto main_2012__1__Itcc9ikmRriat4P2PfBY9Q_goto_main_2012__8__sD4BTrlRTieCvvugZUYF7A, main_2012__1__Itcc9ikmRriat4P2PfBY9Q_goto_main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ;
  main_2012__1__Itcc9ikmRriat4P2PfBY9Q_goto_main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ:
    assume {:captureState "main_2012__1__Itcc9ikmRriat4P2PfBY9Q_goto_main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ"} true;
    assume (!((NF == VF) && (ZF == 0bv1)));
    load17, Gamma_load17 := memory_load32_le(stack, bvadd64(R31, 28bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    R0, Gamma_R0 := zero_extend32_32(load17), Gamma_load17;
    Cse0__5_2_1, Gamma_Cse0__5_2_1 := bvadd32(R0[32:0], 0bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp32(Cse0__5_2_1, Cse0__5_2_1)), Gamma_Cse0__5_2_1;
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_2_1), bvadd33(zero_extend1_32(R0[32:0]), 4294967296bv33))), (Gamma_R0 && Gamma_Cse0__5_2_1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_2_1, 0bv32), Gamma_Cse0__5_2_1;
    NF, Gamma_NF := Cse0__5_2_1[32:31], Gamma_Cse0__5_2_1;
    goto main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ;
  main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ:
    assume {:captureState "main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ"} true;
    assert Gamma_ZF;
    goto main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ_goto_main_2012__5__cPLOwypmRFeVmHCrCFAc_g, main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ_goto_main_2012__3__09_lQb5MT_SJaYe07Vmc_g;
  main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ_goto_main_2012__3__09_lQb5MT_SJaYe07Vmc_g:
    assume {:captureState "main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ_goto_main_2012__3__09_lQb5MT_SJaYe07Vmc_g"} true;
    assume (!(ZF == 1bv1));
    load21, Gamma_load21 := memory_load32_le(stack, bvadd64(R31, 28bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    R0, Gamma_R0 := zero_extend32_32(load21), Gamma_load21;
    Cse0__5_7_1, Gamma_Cse0__5_7_1 := bvadd32(R0[32:0], 4294967295bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_7_1), bvadd33(sign_extend1_32(R0[32:0]), 8589934591bv33))), (Gamma_R0 && Gamma_Cse0__5_7_1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_7_1), bvadd33(zero_extend1_32(R0[32:0]), 4294967295bv33))), (Gamma_R0 && Gamma_Cse0__5_7_1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_7_1, 0bv32), Gamma_Cse0__5_7_1;
    NF, Gamma_NF := Cse0__5_7_1[32:31], Gamma_Cse0__5_7_1;
    goto main_2012__3__09_lQb5MT_SJaYe07Vmc_g;
  main_2012__3__09_lQb5MT_SJaYe07Vmc_g:
    assume {:captureState "main_2012__3__09_lQb5MT_SJaYe07Vmc_g"} true;
    assert Gamma_ZF;
    goto main_2012__3__09_lQb5MT_SJaYe07Vmc_g_goto_main_2012__6__SujlhOerQhygmgKHSc1XZw, main_2012__3__09_lQb5MT_SJaYe07Vmc_g_goto_main_2012__4__Bt04V5oVRaOM5Ip3wRkfUw;
  main_2012__3__09_lQb5MT_SJaYe07Vmc_g_goto_main_2012__4__Bt04V5oVRaOM5Ip3wRkfUw:
    assume {:captureState "main_2012__3__09_lQb5MT_SJaYe07Vmc_g_goto_main_2012__4__Bt04V5oVRaOM5Ip3wRkfUw"} true;
    assume (!(ZF == 1bv1));
    goto main_2012__4__Bt04V5oVRaOM5Ip3wRkfUw;
  main_2012__4__Bt04V5oVRaOM5Ip3wRkfUw:
    assume {:captureState "main_2012__4__Bt04V5oVRaOM5Ip3wRkfUw"} true;
    goto main_2012__8__sD4BTrlRTieCvvugZUYF7A;
  main_2012__3__09_lQb5MT_SJaYe07Vmc_g_goto_main_2012__6__SujlhOerQhygmgKHSc1XZw:
    assume {:captureState "main_2012__3__09_lQb5MT_SJaYe07Vmc_g_goto_main_2012__6__SujlhOerQhygmgKHSc1XZw"} true;
    assume (ZF == 1bv1);
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load19, Gamma_load19 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    R0, Gamma_R0 := load19, Gamma_load19;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 40bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 40bv64), Gamma_R0);
    assume {:captureState "2100_0"} true;
    goto main_2012__6__SujlhOerQhygmgKHSc1XZw;
  main_2012__6__SujlhOerQhygmgKHSc1XZw:
    assume {:captureState "main_2012__6__SujlhOerQhygmgKHSc1XZw"} true;
    goto main_2012__9__7RwlIZnASouKYJ2frkUUKw;
  main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ_goto_main_2012__5__cPLOwypmRFeVmHCrCFAc_g:
    assume {:captureState "main_2012__2__1AJ~HowZR3iJDHcHLtAuzQ_goto_main_2012__5__cPLOwypmRFeVmHCrCFAc_g"} true;
    assume (ZF == 1bv1);
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load20, Gamma_load20 := memory_load64_le(mem, bvadd64(R0, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4056bv64)) || L(mem, bvadd64(R0, 4056bv64)));
    R0, Gamma_R0 := load20, Gamma_load20;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 40bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 40bv64), Gamma_R0);
    assume {:captureState "2084_0"} true;
    goto main_2012__5__cPLOwypmRFeVmHCrCFAc_g;
  main_2012__5__cPLOwypmRFeVmHCrCFAc_g:
    assume {:captureState "main_2012__5__cPLOwypmRFeVmHCrCFAc_g"} true;
    goto main_2012__9__7RwlIZnASouKYJ2frkUUKw;
  main_2012__1__Itcc9ikmRriat4P2PfBY9Q_goto_main_2012__8__sD4BTrlRTieCvvugZUYF7A:
    assume {:captureState "main_2012__1__Itcc9ikmRriat4P2PfBY9Q_goto_main_2012__8__sD4BTrlRTieCvvugZUYF7A"} true;
    assume ((NF == VF) && (ZF == 0bv1));
    goto main_2012__8__sD4BTrlRTieCvvugZUYF7A;
  main_2012__8__sD4BTrlRTieCvvugZUYF7A:
    assume {:captureState "main_2012__8__sD4BTrlRTieCvvugZUYF7A"} true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load15, Gamma_load15 := memory_load64_le(mem, bvadd64(R0, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4056bv64)) || L(mem, bvadd64(R0, 4056bv64)));
    R0, Gamma_R0 := load15, Gamma_load15;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 40bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 40bv64), Gamma_R0);
    assume {:captureState "2132_0"} true;
    goto main_2012__9__7RwlIZnASouKYJ2frkUUKw;
  main_2012__0__mSqeYLPTTSeWCfH6eJwJtA_goto_main_2012__7__CM1tpRQfSBKhPNKoMwfCqQ:
    assume {:captureState "main_2012__0__mSqeYLPTTSeWCfH6eJwJtA_goto_main_2012__7__CM1tpRQfSBKhPNKoMwfCqQ"} true;
    assume (ZF == 1bv1);
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load16, Gamma_load16 := memory_load64_le(mem, bvadd64(R0, 4080bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4080bv64)) || L(mem, bvadd64(R0, 4080bv64)));
    R0, Gamma_R0 := load16, Gamma_load16;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 40bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 40bv64), Gamma_R0);
    assume {:captureState "2116_0"} true;
    goto main_2012__7__CM1tpRQfSBKhPNKoMwfCqQ;
  main_2012__7__CM1tpRQfSBKhPNKoMwfCqQ:
    assume {:captureState "main_2012__7__CM1tpRQfSBKhPNKoMwfCqQ"} true;
    goto main_2012__9__7RwlIZnASouKYJ2frkUUKw;
  main_2012__9__7RwlIZnASouKYJ2frkUUKw:
    assume {:captureState "main_2012__9__7RwlIZnASouKYJ2frkUUKw"} true;
    load18, Gamma_load18 := memory_load64_le(stack, bvadd64(R31, 40bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 40bv64));
    R0, Gamma_R0 := load18, Gamma_load18;
    R30, Gamma_R30 := 2148bv64, true;
    goto main_2012__9__7RwlIZnASouKYJ2frkUUKw_set_six_1964, main_2012__9__7RwlIZnASouKYJ2frkUUKw_set_two_1940, main_2012__9__7RwlIZnASouKYJ2frkUUKw_set_seven_1988;
  main_2012__9__7RwlIZnASouKYJ2frkUUKw_set_seven_1988:
    assume {:captureState "main_2012__9__7RwlIZnASouKYJ2frkUUKw_set_seven_1988"} true;
    assume (R0 == 1988bv64);
    call set_seven_1988();
    goto main_2012__10__~6BcLPrzR_qqeDcEFjH5oA;
  main_2012__9__7RwlIZnASouKYJ2frkUUKw_set_two_1940:
    assume {:captureState "main_2012__9__7RwlIZnASouKYJ2frkUUKw_set_two_1940"} true;
    assume (R0 == 1940bv64);
    call set_two_1940();
    goto main_2012__10__~6BcLPrzR_qqeDcEFjH5oA;
  main_2012__9__7RwlIZnASouKYJ2frkUUKw_set_six_1964:
    assume {:captureState "main_2012__9__7RwlIZnASouKYJ2frkUUKw_set_six_1964"} true;
    assume (R0 == 1964bv64);
    call set_six_1964();
    goto main_2012__10__~6BcLPrzR_qqeDcEFjH5oA;
  main_2012__10__~6BcLPrzR_qqeDcEFjH5oA:
    assume {:captureState "main_2012__10__~6BcLPrzR_qqeDcEFjH5oA"} true;
    R0, Gamma_R0 := 0bv64, true;
    load23, Gamma_load23 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R29, Gamma_R29 := load23, Gamma_load23;
    load24, Gamma_load24 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := load24, Gamma_load24;
    R31, Gamma_R31 := bvadd64(R31, 48bv64), Gamma_R31;
    goto main_2012_basil_return;
  main_2012_basil_return:
    assume {:captureState "main_2012_basil_return"} true;
    return;
}

procedure set_two_1940();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load32_le(mem, 2180bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69576bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 1964bv64);
  free requires (memory_load64_le(mem, 69608bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1988bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load32_le(mem, 2180bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 1964bv64);
  free ensures (memory_load64_le(mem, 69608bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1988bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation set_two_1940()
{
  var Gamma_load29: bool;
  var load29: bv64;
  set_two_1940__0__pc4EEuLAT5~NeDl373acBA:
    assume {:captureState "set_two_1940__0__pc4EEuLAT5~NeDl373acBA"} true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load29, Gamma_load29 := memory_load64_le(mem, bvadd64(R0, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4040bv64)) || L(mem, bvadd64(R0, 4040bv64)));
    R0, Gamma_R0 := load29, Gamma_load29;
    R1, Gamma_R1 := 2bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "1952_0"} true;
    goto set_two_1940_basil_return;
  set_two_1940_basil_return:
    assume {:captureState "set_two_1940_basil_return"} true;
    return;
}

procedure set_six_1964();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load32_le(mem, 2180bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69576bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 1964bv64);
  free requires (memory_load64_le(mem, 69608bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1988bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load32_le(mem, 2180bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 1964bv64);
  free ensures (memory_load64_le(mem, 69608bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1988bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation set_six_1964()
{
  var Gamma_load30: bool;
  var load30: bv64;
  set_six_1964__0__MeJQ5u2GT2qTPkmi76_Clg:
    assume {:captureState "set_six_1964__0__MeJQ5u2GT2qTPkmi76_Clg"} true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load30, Gamma_load30 := memory_load64_le(mem, bvadd64(R0, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4040bv64)) || L(mem, bvadd64(R0, 4040bv64)));
    R0, Gamma_R0 := load30, Gamma_load30;
    R1, Gamma_R1 := 6bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "1976_0"} true;
    goto set_six_1964_basil_return;
  set_six_1964_basil_return:
    assume {:captureState "set_six_1964_basil_return"} true;
    return;
}

