var {:extern} $CF: bv1;
var {:extern} $Gamma_CF: bool;
var {:extern} $Gamma_NF: bool;
var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R1: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_VF: bool;
var {:extern} $Gamma_ZF: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $NF: bv1;
var {:extern} $R0: bv64;
var {:extern} $R1: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $VF: bv1;
var {:extern} $ZF: bv1;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 2180bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le($mem, 69576bv64) == 69652bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1940bv64);
  free ensures (memory_load64_le($mem, 69600bv64) == 1964bv64);
  free ensures (memory_load64_le($mem, 69608bv64) == 2012bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1988bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$set_six_1964();
  modifies $Gamma_R0, $Gamma_R1, $Gamma_mem, $R0, $R1, $mem;
  free requires (memory_load32_le($mem, 2180bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 68984bv64) == 1936bv64);
  free requires (memory_load64_le($mem, 68992bv64) == 1856bv64);
  free requires (memory_load64_le($mem, 69576bv64) == 69652bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1940bv64);
  free requires (memory_load64_le($mem, 69600bv64) == 1964bv64);
  free requires (memory_load64_le($mem, 69608bv64) == 2012bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1988bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures (memory_load32_le($mem, 2180bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le($mem, 69576bv64) == 69652bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1940bv64);
  free ensures (memory_load64_le($mem, 69600bv64) == 1964bv64);
  free ensures (memory_load64_le($mem, 69608bv64) == 2012bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1988bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$set_six_1964()
{
  var #Gamma_load3: bool;
  var #load3: bv64;
  b#set_six_entry:
    assume {:captureState "set_six_entry (MeJQ5u2GT2qTPkmi76/Clg==)"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load3, #Gamma_load3 := memory_load64_le($mem, bvadd64($R0, 4040bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4040bv64)) || L($mem, bvadd64($R0, 4040bv64)));
    $R0, $Gamma_R0 := #load3, #Gamma_load3;
    $R1, $Gamma_R1 := 6bv64, true;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store32_le($mem, $R0, $R1[32:0]), gamma_store32($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "1976_0"} true;
    goto b#set_six_basil_return_1;
  b#set_six_basil_return_1:
    assume {:captureState "set_six_basil_return_1"} true;
    return;
}

procedure p$set_two_1940();
  modifies $Gamma_R0, $Gamma_R1, $Gamma_mem, $R0, $R1, $mem;
  free requires (memory_load32_le($mem, 2180bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 68984bv64) == 1936bv64);
  free requires (memory_load64_le($mem, 68992bv64) == 1856bv64);
  free requires (memory_load64_le($mem, 69576bv64) == 69652bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1940bv64);
  free requires (memory_load64_le($mem, 69600bv64) == 1964bv64);
  free requires (memory_load64_le($mem, 69608bv64) == 2012bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1988bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures (memory_load32_le($mem, 2180bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le($mem, 69576bv64) == 69652bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1940bv64);
  free ensures (memory_load64_le($mem, 69600bv64) == 1964bv64);
  free ensures (memory_load64_le($mem, 69608bv64) == 2012bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1988bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$set_two_1940()
{
  var #Gamma_load21: bool;
  var #load21: bv64;
  b#set_two_entry:
    assume {:captureState "set_two_entry (pc4EEuLAT5+NeDl373acBA==)"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load21, #Gamma_load21 := memory_load64_le($mem, bvadd64($R0, 4040bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4040bv64)) || L($mem, bvadd64($R0, 4040bv64)));
    $R0, $Gamma_R0 := #load21, #Gamma_load21;
    $R1, $Gamma_R1 := 2bv64, true;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store32_le($mem, $R0, $R1[32:0]), gamma_store32($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "1952_0"} true;
    goto b#set_two_basil_return_1;
  b#set_two_basil_return_1:
    assume {:captureState "set_two_basil_return_1"} true;
    return;
}

procedure p$set_seven_1988();
  modifies $Gamma_R0, $Gamma_R1, $Gamma_mem, $R0, $R1, $mem;
  free requires (memory_load32_le($mem, 2180bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 68984bv64) == 1936bv64);
  free requires (memory_load64_le($mem, 68992bv64) == 1856bv64);
  free requires (memory_load64_le($mem, 69576bv64) == 69652bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1940bv64);
  free requires (memory_load64_le($mem, 69600bv64) == 1964bv64);
  free requires (memory_load64_le($mem, 69608bv64) == 2012bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1988bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures (memory_load32_le($mem, 2180bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le($mem, 69576bv64) == 69652bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1940bv64);
  free ensures (memory_load64_le($mem, 69600bv64) == 1964bv64);
  free ensures (memory_load64_le($mem, 69608bv64) == 2012bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1988bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$set_seven_1988()
{
  var #Gamma_load0: bool;
  var #load0: bv64;
  b#set_seven_entry:
    assume {:captureState "set_seven_entry (L4yUagLBRvmbr9rJ4OG7AA==)"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load0, #Gamma_load0 := memory_load64_le($mem, bvadd64($R0, 4040bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4040bv64)) || L($mem, bvadd64($R0, 4040bv64)));
    $R0, $Gamma_R0 := #load0, #Gamma_load0;
    $R1, $Gamma_R1 := 7bv64, true;
    call p$rely();
    assert (L($mem, $R0) ==> $Gamma_R1);
    $mem, $Gamma_mem := memory_store32_le($mem, $R0, $R1[32:0]), gamma_store32($Gamma_mem, $R0, $Gamma_R1);
    assume {:captureState "2000_0"} true;
    goto b#set_seven_basil_return_1;
  b#set_seven_basil_return_1:
    assume {:captureState "set_seven_basil_return_1"} true;
    return;
}

procedure p$main_2012();
  modifies $CF, $Gamma_CF, $Gamma_NF, $Gamma_R0, $Gamma_R1, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_VF, $Gamma_ZF, $Gamma_mem, $Gamma_stack, $NF, $R0, $R1, $R29, $R30, $R31, $VF, $ZF, $mem, $stack;
  requires ($Gamma_R0 == true);
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le($mem, 2180bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 68984bv64) == 1936bv64);
  free requires (memory_load64_le($mem, 68992bv64) == 1856bv64);
  free requires (memory_load64_le($mem, 69576bv64) == 69652bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1940bv64);
  free requires (memory_load64_le($mem, 69600bv64) == 1964bv64);
  free requires (memory_load64_le($mem, 69608bv64) == 2012bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1988bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 2180bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le($mem, 69576bv64) == 69652bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1940bv64);
  free ensures (memory_load64_le($mem, 69600bv64) == 1964bv64);
  free ensures (memory_load64_le($mem, 69608bv64) == 2012bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1988bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_2012()
{
  var #Cse0__5_4: bv32;
  var #Cse0__5_5: bv64;
  var #Cse0__5_6: bv32;
  var #Cse0__5_7: bv32;
  var #Cse0__5_8: bv32;
  var #Gamma_Cse0__5_4: bool;
  var #Gamma_Cse0__5_5: bool;
  var #Gamma_Cse0__5_6: bool;
  var #Gamma_Cse0__5_7: bool;
  var #Gamma_Cse0__5_8: bool;
  var #Gamma_load10: bool;
  var #Gamma_load11: bool;
  var #Gamma_load12: bool;
  var #Gamma_load13: bool;
  var #Gamma_load14: bool;
  var #Gamma_load15: bool;
  var #Gamma_load16: bool;
  var #Gamma_load6: bool;
  var #Gamma_load7: bool;
  var #Gamma_load8: bool;
  var #Gamma_load9: bool;
  var #load10: bv64;
  var #load11: bv32;
  var #load12: bv32;
  var #load13: bv32;
  var #load14: bv64;
  var #load15: bv64;
  var #load16: bv64;
  var #load6: bv32;
  var #load7: bv64;
  var #load8: bv64;
  var #load9: bv64;
  b#main_entry:
    assume {:captureState "main_entry (mSqeYLPTTSeWCfH6eJwJtA==)"} true;
    #Cse0__5_5, #Gamma_Cse0__5_5 := bvadd64($R31, 18446744073709551568bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_5, $R29), gamma_store64($Gamma_stack, #Cse0__5_5, $Gamma_R29);
    assume {:captureState "2012_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_5, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_5, 8bv64), $Gamma_R30);
    assume {:captureState "2012_2"} true;
    $R31, $Gamma_R31 := #Cse0__5_5, #Gamma_Cse0__5_5;
    $R29, $Gamma_R29 := $R31, $Gamma_R31;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 28bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 28bv64), $Gamma_R0);
    assume {:captureState "2020_0"} true;
    #load11, #Gamma_load11 := memory_load32_le($stack, bvadd64($R31, 28bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 28bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load11), #Gamma_load11;
    #Cse0__5_6, #Gamma_Cse0__5_6 := bvadd32($R0[32:0], 4294967294bv32), $Gamma_R0;
    $VF, $Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(#Cse0__5_6), bvadd33(sign_extend1_32($R0[32:0]), 8589934590bv33))), ($Gamma_R0 && #Gamma_Cse0__5_6);
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_6), bvadd33(zero_extend1_32($R0[32:0]), 4294967294bv33))), ($Gamma_R0 && #Gamma_Cse0__5_6);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_6, 0bv32), #Gamma_Cse0__5_6;
    $NF, $Gamma_NF := #Cse0__5_6[32:31], #Gamma_Cse0__5_6;
    assert $Gamma_ZF;
    goto b#main_15, b#main_43;
  b#main_43:
    assume {:captureState "main_43"} true;
    assume (!($ZF == 1bv1));
    #load13, #Gamma_load13 := memory_load32_le($stack, bvadd64($R31, 28bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 28bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load13), #Gamma_load13;
    #Cse0__5_8, #Gamma_Cse0__5_8 := bvadd32($R0[32:0], 4294967294bv32), $Gamma_R0;
    $VF, $Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(#Cse0__5_8), bvadd33(sign_extend1_32($R0[32:0]), 8589934590bv33))), ($Gamma_R0 && #Gamma_Cse0__5_8);
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_8), bvadd33(zero_extend1_32($R0[32:0]), 4294967294bv33))), ($Gamma_R0 && #Gamma_Cse0__5_8);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_8, 0bv32), #Gamma_Cse0__5_8;
    $NF, $Gamma_NF := #Cse0__5_8[32:31], #Gamma_Cse0__5_8;
    goto b#main_41;
  b#main_41:
    assume {:captureState "main_41 (Itcc9ikmRriat4P2PfBY9Q==)"} true;
    assert (($Gamma_NF && $Gamma_VF) && $Gamma_ZF);
    goto b#main_19, b#main_39;
  b#main_39:
    assume {:captureState "main_39"} true;
    assume (!(($NF == $VF) && ($ZF == 0bv1)));
    #load6, #Gamma_load6 := memory_load32_le($stack, bvadd64($R31, 28bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 28bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load6), #Gamma_load6;
    #Cse0__5_4, #Gamma_Cse0__5_4 := bvadd32($R0[32:0], 0bv32), $Gamma_R0;
    $VF, $Gamma_VF := bvnot1(bvcomp32(#Cse0__5_4, #Cse0__5_4)), #Gamma_Cse0__5_4;
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_4), bvadd33(zero_extend1_32($R0[32:0]), 4294967296bv33))), ($Gamma_R0 && #Gamma_Cse0__5_4);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_4, 0bv32), #Gamma_Cse0__5_4;
    $NF, $Gamma_NF := #Cse0__5_4[32:31], #Gamma_Cse0__5_4;
    goto b#main_37;
  b#main_37:
    assume {:captureState "main_37 (1AJ+HowZR3iJDHcHLtAuzQ==)"} true;
    assert $Gamma_ZF;
    goto b#main_23, b#main_35;
  b#main_35:
    assume {:captureState "main_35"} true;
    assume (!($ZF == 1bv1));
    #load12, #Gamma_load12 := memory_load32_le($stack, bvadd64($R31, 28bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 28bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load12), #Gamma_load12;
    #Cse0__5_7, #Gamma_Cse0__5_7 := bvadd32($R0[32:0], 4294967295bv32), $Gamma_R0;
    $VF, $Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(#Cse0__5_7), bvadd33(sign_extend1_32($R0[32:0]), 8589934591bv33))), ($Gamma_R0 && #Gamma_Cse0__5_7);
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_7), bvadd33(zero_extend1_32($R0[32:0]), 4294967295bv33))), ($Gamma_R0 && #Gamma_Cse0__5_7);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_7, 0bv32), #Gamma_Cse0__5_7;
    $NF, $Gamma_NF := #Cse0__5_7[32:31], #Gamma_Cse0__5_7;
    goto b#main_33;
  b#main_33:
    assume {:captureState "main_33 (09/lQb5MT/SJaYe07Vmc/g==)"} true;
    assert $Gamma_ZF;
    goto b#main_27, b#main_31;
  b#main_31:
    assume {:captureState "main_31"} true;
    assume (!($ZF == 1bv1));
    goto b#main_29;
  b#main_29:
    assume {:captureState "main_29 (Bt04V5oVRaOM5Ip3wRkfUw==)"} true;
    goto b#main_17;
  b#main_27:
    assume {:captureState "main_27"} true;
    assume ($ZF == 1bv1);
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load10, #Gamma_load10 := memory_load64_le($mem, bvadd64($R0, 4064bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4064bv64)) || L($mem, bvadd64($R0, 4064bv64)));
    $R0, $Gamma_R0 := #load10, #Gamma_load10;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 40bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 40bv64), $Gamma_R0);
    assume {:captureState "2100_0"} true;
    goto b#main_25;
  b#main_25:
    assume {:captureState "main_25 (SujlhOerQhygmgKHSc1XZw==)"} true;
    goto b#main_11;
  b#main_23:
    assume {:captureState "main_23"} true;
    assume ($ZF == 1bv1);
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load7, #Gamma_load7 := memory_load64_le($mem, bvadd64($R0, 4056bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4056bv64)) || L($mem, bvadd64($R0, 4056bv64)));
    $R0, $Gamma_R0 := #load7, #Gamma_load7;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 40bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 40bv64), $Gamma_R0);
    assume {:captureState "2084_0"} true;
    goto b#main_21;
  b#main_21:
    assume {:captureState "main_21 (cPLOwypmRFeVmHCrCFAc/g==)"} true;
    goto b#main_11;
  b#main_19:
    assume {:captureState "main_19"} true;
    assume (($NF == $VF) && ($ZF == 0bv1));
    goto b#main_17;
  b#main_17:
    assume {:captureState "main_17 (sD4BTrlRTieCvvugZUYF7A==)"} true;
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load9, #Gamma_load9 := memory_load64_le($mem, bvadd64($R0, 4056bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4056bv64)) || L($mem, bvadd64($R0, 4056bv64)));
    $R0, $Gamma_R0 := #load9, #Gamma_load9;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 40bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 40bv64), $Gamma_R0);
    assume {:captureState "2132_0"} true;
    goto b#main_11;
  b#main_15:
    assume {:captureState "main_15"} true;
    assume ($ZF == 1bv1);
    $R0, $Gamma_R0 := 65536bv64, true;
    call p$rely();
    #load14, #Gamma_load14 := memory_load64_le($mem, bvadd64($R0, 4080bv64)), (gamma_load64($Gamma_mem, bvadd64($R0, 4080bv64)) || L($mem, bvadd64($R0, 4080bv64)));
    $R0, $Gamma_R0 := #load14, #Gamma_load14;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 40bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 40bv64), $Gamma_R0);
    assume {:captureState "2116_0"} true;
    goto b#main_13;
  b#main_13:
    assume {:captureState "main_13 (CM1tpRQfSBKhPNKoMwfCqQ==)"} true;
    goto b#main_11;
  b#main_11:
    assume {:captureState "main_11 (7RwlIZnASouKYJ2frkUUKw==)"} true;
    #load8, #Gamma_load8 := memory_load64_le($stack, bvadd64($R31, 40bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 40bv64));
    $R0, $Gamma_R0 := #load8, #Gamma_load8;
    $R30, $Gamma_R30 := 2148bv64, true;
    goto b#main_5, b#main_7, b#main_9;
  b#main_9:
    assume {:captureState "main_9"} true;
    assume ($R0 == 1988bv64);
    call p$set_seven_1988();
    goto b#main_3;
  b#main_7:
    assume {:captureState "main_7"} true;
    assume ($R0 == 1940bv64);
    call p$set_two_1940();
    goto b#main_3;
  b#main_5:
    assume {:captureState "main_5"} true;
    assume ($R0 == 1964bv64);
    call p$set_six_1964();
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (+6BcLPrzR/qqeDcEFjH5oA==)"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    #load15, #Gamma_load15 := memory_load64_le($stack, $R31), gamma_load64($Gamma_stack, $R31);
    $R29, $Gamma_R29 := #load15, #Gamma_load15;
    #load16, #Gamma_load16 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R30, $Gamma_R30 := #load16, #Gamma_load16;
    $R31, $Gamma_R31 := bvadd64($R31, 48bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

