var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 2192bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69032bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69040bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69552bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 1960bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1980bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure set_seven_1980();
  modifies Gamma_R8, Gamma_R9, Gamma_mem, R8, R9, mem;
  free requires (memory_load32_le(mem, 2192bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69032bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69040bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69552bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69576bv64) == 1960bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1980bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load32_le(mem, 2192bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69032bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69040bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69552bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 1960bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1980bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation set_seven_1980()
{
  var Gamma_load6: bool;
  var load6: bv64;
  set_seven_1980__0__kTg_e3tbRpqCznoQ8obi7A:
    assume {:captureState "set_seven_1980__0__kTg_e3tbRpqCznoQ8obi7A"} true;
    R9, Gamma_R9 := 65536bv64, true;
    call rely();
    load6, Gamma_load6 := memory_load64_le(mem, bvadd64(R9, 4016bv64)), (gamma_load64(Gamma_mem, bvadd64(R9, 4016bv64)) || L(mem, bvadd64(R9, 4016bv64)));
    R9, Gamma_R9 := load6, Gamma_load6;
    R8, Gamma_R8 := 7bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "1992_0"} true;
    goto set_seven_1980_basil_return;
  set_seven_1980_basil_return:
    assume {:captureState "set_seven_1980_basil_return"} true;
    return;
}

procedure set_six_1960();
  modifies Gamma_R8, Gamma_R9, Gamma_mem, R8, R9, mem;
  free requires (memory_load32_le(mem, 2192bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69032bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69040bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69552bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69576bv64) == 1960bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1980bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load32_le(mem, 2192bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69032bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69040bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69552bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 1960bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1980bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation set_six_1960()
{
  var Gamma_load7: bool;
  var load7: bv64;
  set_six_1960__0__ciqx_PCBQwevaWTzDpNJDQ:
    assume {:captureState "set_six_1960__0__ciqx_PCBQwevaWTzDpNJDQ"} true;
    R9, Gamma_R9 := 65536bv64, true;
    call rely();
    load7, Gamma_load7 := memory_load64_le(mem, bvadd64(R9, 4016bv64)), (gamma_load64(Gamma_mem, bvadd64(R9, 4016bv64)) || L(mem, bvadd64(R9, 4016bv64)));
    R9, Gamma_R9 := load7, Gamma_load7;
    R8, Gamma_R8 := 6bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "1972_0"} true;
    goto set_six_1960_basil_return;
  set_six_1960_basil_return:
    assume {:captureState "set_six_1960_basil_return"} true;
    return;
}

procedure main_2000();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_VF, Gamma_ZF, Gamma_mem, Gamma_stack, NF, R0, R29, R30, R31, R8, R9, VF, ZF, mem, stack;
  requires (Gamma_R0 == true);
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le(mem, 2192bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69032bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69040bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69552bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69576bv64) == 1960bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1980bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 2192bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69032bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69040bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69552bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 1960bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1980bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main_2000()
{
  var Cse0__5_10_1: bv64;
  var Cse0__5_5_1: bv32;
  var Cse0__5_6_1: bv64;
  var Cse0__5_6_7: bv32;
  var Cse0__5_7_1: bv32;
  var Gamma_Cse0__5_10_1: bool;
  var Gamma_Cse0__5_5_1: bool;
  var Gamma_Cse0__5_6_1: bool;
  var Gamma_Cse0__5_6_7: bool;
  var Gamma_Cse0__5_7_1: bool;
  var Gamma_load10: bool;
  var Gamma_load11: bool;
  var Gamma_load12: bool;
  var Gamma_load13: bool;
  var Gamma_load14: bool;
  var Gamma_load15: bool;
  var Gamma_load16: bool;
  var Gamma_load17: bool;
  var Gamma_load8: bool;
  var Gamma_load9: bool;
  var load10: bv64;
  var load11: bv64;
  var load12: bv32;
  var load13: bv32;
  var load14: bv32;
  var load15: bv64;
  var load16: bv64;
  var load17: bv64;
  var load8: bv64;
  var load9: bv64;
  main_2000__0__G_1Y6jALRC~8UvxN~Oh74A:
    assume {:captureState "main_2000__0__G_1Y6jALRC~8UvxN~Oh74A"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551568bv64), Gamma_R31;
    Cse0__5_6_1, Gamma_Cse0__5_6_1 := bvadd64(R31, 32bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5_6_1, R29), gamma_store64(Gamma_stack, Cse0__5_6_1, Gamma_R29);
    assume {:captureState "2004_1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5_6_1, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5_6_1, 8bv64), Gamma_R30);
    assume {:captureState "2004_2"} true;
    R29, Gamma_R29 := bvadd64(R31, 32bv64), Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64), true);
    assume {:captureState "2012_0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551608bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551608bv64), Gamma_R0);
    assume {:captureState "2016_0"} true;
    load13, Gamma_load13 := memory_load32_le(stack, bvadd64(R29, 18446744073709551608bv64)), gamma_load32(Gamma_stack, bvadd64(R29, 18446744073709551608bv64));
    R8, Gamma_R8 := zero_extend32_32(load13), Gamma_load13;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R8);
    assume {:captureState "2024_0"} true;
    Cse0__5_6_7, Gamma_Cse0__5_6_7 := bvadd32(R8[32:0], 0bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp32(Cse0__5_6_7, Cse0__5_6_7)), Gamma_Cse0__5_6_7;
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_6_7), bvadd33(zero_extend1_32(R8[32:0]), 4294967296bv33))), (Gamma_R8 && Gamma_Cse0__5_6_7);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_6_7, 0bv32), Gamma_Cse0__5_6_7;
    NF, Gamma_NF := Cse0__5_6_7[32:31], Gamma_Cse0__5_6_7;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5_6_7), Gamma_Cse0__5_6_7;
    assert Gamma_ZF;
    goto main_2000__0__G_1Y6jALRC~8UvxN~Oh74A$__0, main_2000__0__G_1Y6jALRC~8UvxN~Oh74A$__1;
  main_2000__0__G_1Y6jALRC~8UvxN~Oh74A$__1:
    assume {:captureState "main_2000__0__G_1Y6jALRC~8UvxN~Oh74A$__1"} true;
    assume (!(!(ZF == 1bv1)));
    R8, Gamma_R8 := 1bv64, true;
    assert Gamma_R8;
    goto main_2000__0__G_1Y6jALRC~8UvxN~Oh74A_goto_main_2000__6__f4nhHXxoReqZDuDK6zxsSQ, main_2000__0__G_1Y6jALRC~8UvxN~Oh74A_goto_main_2000__1__9glsOoBtTsagmZpc7KXoEQ;
  main_2000__0__G_1Y6jALRC~8UvxN~Oh74A$__0:
    assume {:captureState "main_2000__0__G_1Y6jALRC~8UvxN~Oh74A$__0"} true;
    assume (!(ZF == 1bv1));
    R8, Gamma_R8 := 0bv64, true;
    assert Gamma_R8;
    goto main_2000__0__G_1Y6jALRC~8UvxN~Oh74A_goto_main_2000__6__f4nhHXxoReqZDuDK6zxsSQ, main_2000__0__G_1Y6jALRC~8UvxN~Oh74A_goto_main_2000__1__9glsOoBtTsagmZpc7KXoEQ;
  main_2000__0__G_1Y6jALRC~8UvxN~Oh74A_goto_main_2000__1__9glsOoBtTsagmZpc7KXoEQ:
    assume {:captureState "main_2000__0__G_1Y6jALRC~8UvxN~Oh74A_goto_main_2000__1__9glsOoBtTsagmZpc7KXoEQ"} true;
    assume (!(R8[1:0] == 1bv1));
    goto main_2000__1__9glsOoBtTsagmZpc7KXoEQ;
  main_2000__1__9glsOoBtTsagmZpc7KXoEQ:
    assume {:captureState "main_2000__1__9glsOoBtTsagmZpc7KXoEQ"} true;
    goto main_2000__2__A0okiAJhRZaNrB4lOPZtTw;
  main_2000__2__A0okiAJhRZaNrB4lOPZtTw:
    assume {:captureState "main_2000__2__A0okiAJhRZaNrB4lOPZtTw"} true;
    load12, Gamma_load12 := memory_load32_le(stack, bvadd64(R31, 12bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    R8, Gamma_R8 := zero_extend32_32(load12), Gamma_load12;
    Cse0__5_5_1, Gamma_Cse0__5_5_1 := bvadd32(R8[32:0], 4294967295bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_5_1), bvadd33(sign_extend1_32(R8[32:0]), 8589934591bv33))), (Gamma_R8 && Gamma_Cse0__5_5_1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_5_1), bvadd33(zero_extend1_32(R8[32:0]), 4294967295bv33))), (Gamma_R8 && Gamma_Cse0__5_5_1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_5_1, 0bv32), Gamma_Cse0__5_5_1;
    NF, Gamma_NF := Cse0__5_5_1[32:31], Gamma_Cse0__5_5_1;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5_5_1), Gamma_Cse0__5_5_1;
    assert Gamma_ZF;
    goto main_2000__2__A0okiAJhRZaNrB4lOPZtTw$__0, main_2000__2__A0okiAJhRZaNrB4lOPZtTw$__1;
  main_2000__2__A0okiAJhRZaNrB4lOPZtTw$__1:
    assume {:captureState "main_2000__2__A0okiAJhRZaNrB4lOPZtTw$__1"} true;
    assume (!(!(ZF == 1bv1)));
    R8, Gamma_R8 := 1bv64, true;
    assert Gamma_R8;
    goto main_2000__2__A0okiAJhRZaNrB4lOPZtTw_goto_main_2000__7__WBIrr~FJQGaywM0EFL_~lQ, main_2000__2__A0okiAJhRZaNrB4lOPZtTw_goto_main_2000__3__BN0TEK1EQNeAY2qOwIEG5g;
  main_2000__2__A0okiAJhRZaNrB4lOPZtTw$__0:
    assume {:captureState "main_2000__2__A0okiAJhRZaNrB4lOPZtTw$__0"} true;
    assume (!(ZF == 1bv1));
    R8, Gamma_R8 := 0bv64, true;
    assert Gamma_R8;
    goto main_2000__2__A0okiAJhRZaNrB4lOPZtTw_goto_main_2000__7__WBIrr~FJQGaywM0EFL_~lQ, main_2000__2__A0okiAJhRZaNrB4lOPZtTw_goto_main_2000__3__BN0TEK1EQNeAY2qOwIEG5g;
  main_2000__2__A0okiAJhRZaNrB4lOPZtTw_goto_main_2000__3__BN0TEK1EQNeAY2qOwIEG5g:
    assume {:captureState "main_2000__2__A0okiAJhRZaNrB4lOPZtTw_goto_main_2000__3__BN0TEK1EQNeAY2qOwIEG5g"} true;
    assume (!(R8[1:0] == 1bv1));
    goto main_2000__3__BN0TEK1EQNeAY2qOwIEG5g;
  main_2000__3__BN0TEK1EQNeAY2qOwIEG5g:
    assume {:captureState "main_2000__3__BN0TEK1EQNeAY2qOwIEG5g"} true;
    goto main_2000__4__ZMwLE9GySQC4wAmL8es_Tw;
  main_2000__4__ZMwLE9GySQC4wAmL8es_Tw:
    assume {:captureState "main_2000__4__ZMwLE9GySQC4wAmL8es_Tw"} true;
    load14, Gamma_load14 := memory_load32_le(stack, bvadd64(R31, 12bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    R8, Gamma_R8 := zero_extend32_32(load14), Gamma_load14;
    Cse0__5_7_1, Gamma_Cse0__5_7_1 := bvadd32(R8[32:0], 4294967294bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_7_1), bvadd33(sign_extend1_32(R8[32:0]), 8589934590bv33))), (Gamma_R8 && Gamma_Cse0__5_7_1);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_7_1), bvadd33(zero_extend1_32(R8[32:0]), 4294967294bv33))), (Gamma_R8 && Gamma_Cse0__5_7_1);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_7_1, 0bv32), Gamma_Cse0__5_7_1;
    NF, Gamma_NF := Cse0__5_7_1[32:31], Gamma_Cse0__5_7_1;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5_7_1), Gamma_Cse0__5_7_1;
    assert Gamma_ZF;
    goto main_2000__4__ZMwLE9GySQC4wAmL8es_Tw$__0, main_2000__4__ZMwLE9GySQC4wAmL8es_Tw$__1;
  main_2000__4__ZMwLE9GySQC4wAmL8es_Tw$__1:
    assume {:captureState "main_2000__4__ZMwLE9GySQC4wAmL8es_Tw$__1"} true;
    assume (!(!(ZF == 1bv1)));
    R8, Gamma_R8 := 1bv64, true;
    assert Gamma_R8;
    goto main_2000__4__ZMwLE9GySQC4wAmL8es_Tw_goto_main_2000__8__MFGHilZOSS~y6mrYfWAhnQ, main_2000__4__ZMwLE9GySQC4wAmL8es_Tw_goto_main_2000__5__tQCpvwKrSeCFPREd7E8FUA;
  main_2000__4__ZMwLE9GySQC4wAmL8es_Tw$__0:
    assume {:captureState "main_2000__4__ZMwLE9GySQC4wAmL8es_Tw$__0"} true;
    assume (!(ZF == 1bv1));
    R8, Gamma_R8 := 0bv64, true;
    assert Gamma_R8;
    goto main_2000__4__ZMwLE9GySQC4wAmL8es_Tw_goto_main_2000__8__MFGHilZOSS~y6mrYfWAhnQ, main_2000__4__ZMwLE9GySQC4wAmL8es_Tw_goto_main_2000__5__tQCpvwKrSeCFPREd7E8FUA;
  main_2000__4__ZMwLE9GySQC4wAmL8es_Tw_goto_main_2000__5__tQCpvwKrSeCFPREd7E8FUA:
    assume {:captureState "main_2000__4__ZMwLE9GySQC4wAmL8es_Tw_goto_main_2000__5__tQCpvwKrSeCFPREd7E8FUA"} true;
    assume (!(R8[1:0] == 1bv1));
    goto main_2000__5__tQCpvwKrSeCFPREd7E8FUA;
  main_2000__5__tQCpvwKrSeCFPREd7E8FUA:
    assume {:captureState "main_2000__5__tQCpvwKrSeCFPREd7E8FUA"} true;
    goto main_2000__9__zMmLxlHWR8mJqTkM1yPBaQ;
  main_2000__9__zMmLxlHWR8mJqTkM1yPBaQ:
    assume {:captureState "main_2000__9__zMmLxlHWR8mJqTkM1yPBaQ"} true;
    R8, Gamma_R8 := 65536bv64, true;
    call rely();
    load11, Gamma_load11 := memory_load64_le(mem, bvadd64(R8, 4032bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4032bv64)) || L(mem, bvadd64(R8, 4032bv64)));
    R8, Gamma_R8 := load11, Gamma_load11;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R8);
    assume {:captureState "2140_0"} true;
    goto main_2000__10__0TNylRK6RmS5UECtsNwwsA;
  main_2000__4__ZMwLE9GySQC4wAmL8es_Tw_goto_main_2000__8__MFGHilZOSS~y6mrYfWAhnQ:
    assume {:captureState "main_2000__4__ZMwLE9GySQC4wAmL8es_Tw_goto_main_2000__8__MFGHilZOSS~y6mrYfWAhnQ"} true;
    assume (R8[1:0] == 1bv1);
    R8, Gamma_R8 := 65536bv64, true;
    call rely();
    load8, Gamma_load8 := memory_load64_le(mem, bvadd64(R8, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4056bv64)) || L(mem, bvadd64(R8, 4056bv64)));
    R8, Gamma_R8 := load8, Gamma_load8;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R8);
    assume {:captureState "2124_0"} true;
    goto main_2000__8__MFGHilZOSS~y6mrYfWAhnQ;
  main_2000__8__MFGHilZOSS~y6mrYfWAhnQ:
    assume {:captureState "main_2000__8__MFGHilZOSS~y6mrYfWAhnQ"} true;
    goto main_2000__10__0TNylRK6RmS5UECtsNwwsA;
  main_2000__2__A0okiAJhRZaNrB4lOPZtTw_goto_main_2000__7__WBIrr~FJQGaywM0EFL_~lQ:
    assume {:captureState "main_2000__2__A0okiAJhRZaNrB4lOPZtTw_goto_main_2000__7__WBIrr~FJQGaywM0EFL_~lQ"} true;
    assume (R8[1:0] == 1bv1);
    R8, Gamma_R8 := 65536bv64, true;
    call rely();
    load17, Gamma_load17 := memory_load64_le(mem, bvadd64(R8, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4040bv64)) || L(mem, bvadd64(R8, 4040bv64)));
    R8, Gamma_R8 := load17, Gamma_load17;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R8);
    assume {:captureState "2108_0"} true;
    goto main_2000__7__WBIrr~FJQGaywM0EFL_~lQ;
  main_2000__7__WBIrr~FJQGaywM0EFL_~lQ:
    assume {:captureState "main_2000__7__WBIrr~FJQGaywM0EFL_~lQ"} true;
    goto main_2000__10__0TNylRK6RmS5UECtsNwwsA;
  main_2000__0__G_1Y6jALRC~8UvxN~Oh74A_goto_main_2000__6__f4nhHXxoReqZDuDK6zxsSQ:
    assume {:captureState "main_2000__0__G_1Y6jALRC~8UvxN~Oh74A_goto_main_2000__6__f4nhHXxoReqZDuDK6zxsSQ"} true;
    assume (R8[1:0] == 1bv1);
    R8, Gamma_R8 := 65536bv64, true;
    call rely();
    load10, Gamma_load10 := memory_load64_le(mem, bvadd64(R8, 4032bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4032bv64)) || L(mem, bvadd64(R8, 4032bv64)));
    R8, Gamma_R8 := load10, Gamma_load10;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R8);
    assume {:captureState "2092_0"} true;
    goto main_2000__6__f4nhHXxoReqZDuDK6zxsSQ;
  main_2000__6__f4nhHXxoReqZDuDK6zxsSQ:
    assume {:captureState "main_2000__6__f4nhHXxoReqZDuDK6zxsSQ"} true;
    goto main_2000__10__0TNylRK6RmS5UECtsNwwsA;
  main_2000__10__0TNylRK6RmS5UECtsNwwsA:
    assume {:captureState "main_2000__10__0TNylRK6RmS5UECtsNwwsA"} true;
    load9, Gamma_load9 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R8, Gamma_R8 := load9, Gamma_load9;
    R30, Gamma_R30 := 2156bv64, true;
    goto main_2000__10__0TNylRK6RmS5UECtsNwwsA_set_six_1960, main_2000__10__0TNylRK6RmS5UECtsNwwsA_set_two_1940, main_2000__10__0TNylRK6RmS5UECtsNwwsA_set_seven_1980;
  main_2000__10__0TNylRK6RmS5UECtsNwwsA_set_seven_1980:
    assume {:captureState "main_2000__10__0TNylRK6RmS5UECtsNwwsA_set_seven_1980"} true;
    assume (R8 == 1980bv64);
    call set_seven_1980();
    goto main_2000__11__5RCauC7lSbWG2IsnALJTGg;
  main_2000__10__0TNylRK6RmS5UECtsNwwsA_set_two_1940:
    assume {:captureState "main_2000__10__0TNylRK6RmS5UECtsNwwsA_set_two_1940"} true;
    assume (R8 == 1940bv64);
    call set_two_1940();
    goto main_2000__11__5RCauC7lSbWG2IsnALJTGg;
  main_2000__10__0TNylRK6RmS5UECtsNwwsA_set_six_1960:
    assume {:captureState "main_2000__10__0TNylRK6RmS5UECtsNwwsA_set_six_1960"} true;
    assume (R8 == 1960bv64);
    call set_six_1960();
    goto main_2000__11__5RCauC7lSbWG2IsnALJTGg;
  main_2000__11__5RCauC7lSbWG2IsnALJTGg:
    assume {:captureState "main_2000__11__5RCauC7lSbWG2IsnALJTGg"} true;
    R0, Gamma_R0 := 0bv64, true;
    Cse0__5_10_1, Gamma_Cse0__5_10_1 := bvadd64(R31, 32bv64), Gamma_R31;
    load15, Gamma_load15 := memory_load64_le(stack, Cse0__5_10_1), gamma_load64(Gamma_stack, Cse0__5_10_1);
    R29, Gamma_R29 := load15, Gamma_load15;
    load16, Gamma_load16 := memory_load64_le(stack, bvadd64(Cse0__5_10_1, 8bv64)), gamma_load64(Gamma_stack, bvadd64(Cse0__5_10_1, 8bv64));
    R30, Gamma_R30 := load16, Gamma_load16;
    R31, Gamma_R31 := bvadd64(R31, 48bv64), Gamma_R31;
    goto main_2000_basil_return;
  main_2000_basil_return:
    assume {:captureState "main_2000_basil_return"} true;
    return;
}

procedure set_two_1940();
  modifies Gamma_R8, Gamma_R9, Gamma_mem, R8, R9, mem;
  free requires (memory_load32_le(mem, 2192bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69032bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69040bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69552bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69576bv64) == 1960bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1980bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load32_le(mem, 2192bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69032bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69040bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69552bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 1960bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1980bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation set_two_1940()
{
  var Gamma_load26: bool;
  var load26: bv64;
  set_two_1940__0__AzAVXZGMSrCSi1E8o7VxfQ:
    assume {:captureState "set_two_1940__0__AzAVXZGMSrCSi1E8o7VxfQ"} true;
    R9, Gamma_R9 := 65536bv64, true;
    call rely();
    load26, Gamma_load26 := memory_load64_le(mem, bvadd64(R9, 4016bv64)), (gamma_load64(Gamma_mem, bvadd64(R9, 4016bv64)) || L(mem, bvadd64(R9, 4016bv64)));
    R9, Gamma_R9 := load26, Gamma_load26;
    R8, Gamma_R8 := 2bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "1952_0"} true;
    goto set_two_1940_basil_return;
  set_two_1940_basil_return:
    assume {:captureState "set_two_1940_basil_return"} true;
    return;
}

