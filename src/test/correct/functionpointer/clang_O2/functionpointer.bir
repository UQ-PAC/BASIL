0000068b: program
00000653: sub __cxa_finalize(__cxa_finalize_result)
0000068c: __cxa_finalize_result :: out u32 = low:32[R0]

00000447:
0000053f: R16 := 0x20000
00000546: R17 := mem[R16 + 8, el]:u64
0000054c: R16 := R16 + 8
00000551: call R17 with noreturn

00000654: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000068d: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002bf:
000002c3: #3 := R31 - 0x20
000002c9: mem := mem with [#3, el]:u64 <- R29
000002cf: mem := mem with [#3 + 8, el]:u64 <- R30
000002d3: R31 := #3
000002d9: R29 := R31
000002e1: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002e6: R19 := 0x20000
000002ed: R0 := pad:64[mem[R19 + 0x30]]
000002f3: when 0:0[R0] goto %000002f1
00000681: goto %00000410

00000410:
00000413: R0 := 0x1F000
0000041a: R0 := mem[R0 + 0xFC8, el]:u64
00000420: when R0 = 0 goto %0000041e
00000682: goto %00000437

00000437:
0000043a: R0 := 0x20000
00000441: R0 := mem[R0 + 0x28, el]:u64
00000446: R30 := 0x730
00000449: call @__cxa_finalize with return %0000041e

0000041e:
00000426: R30 := 0x734
00000428: call @deregister_tm_clones with return %0000042a

0000042a:
0000042d: R0 := 1
00000435: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000683: goto %000002f1

000002f1:
000002fb: R19 := mem[R31 + 0x10, el]:u64
00000302: R29 := mem[R31, el]:u64
00000307: R30 := mem[R31 + 8, el]:u64
0000030b: R31 := R31 + 0x20
00000310: call R30 with noreturn

00000658: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000068e: __libc_start_main_main :: in u64 = R0
0000068f: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000690: __libc_start_main_arg3 :: in out u64 = R2
00000691: __libc_start_main_auxv :: in out u64 = R3
00000692: __libc_start_main_result :: out u32 = low:32[R0]

00000218:
00000529: R16 := 0x20000
00000530: R17 := mem[R16, el]:u64
00000536: R16 := R16
0000053b: call R17 with noreturn

00000659: sub _fini(_fini_result)
00000693: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000065a: sub _init(_init_result)
00000694: _init_result :: out u32 = low:32[R0]

00000599:
0000059f: #8 := R31 - 0x10
000005a5: mem := mem with [#8, el]:u64 <- R29
000005ab: mem := mem with [#8 + 8, el]:u64 <- R30
000005af: R31 := #8
000005b5: R29 := R31
000005ba: R30 := 0x5C8
000005bc: call @call_weak_fn with return %000005be

000005be:
000005c3: R29 := mem[R31, el]:u64
000005c8: R30 := mem[R31 + 8, el]:u64
000005cc: R31 := R31 + 0x10
000005d1: call R30 with noreturn

0000065b: sub _start(_start_result)
00000695: _start_result :: out u32 = low:32[R0]

000001d9:
000001de: R29 := 0
000001e3: R30 := 0
000001e9: R5 := R0
000001f0: R1 := mem[R31, el]:u64
000001f6: R2 := R31 + 8
000001fc: R6 := R31
00000201: R0 := 0x1F000
00000208: R0 := mem[R0 + 0xFD8, el]:u64
0000020d: R3 := 0
00000212: R4 := 0
00000217: R30 := 0x670
0000021a: call @__libc_start_main with return %0000021c

0000021c:
0000021f: R30 := 0x674
00000222: call @abort with return %00000684

00000684:
00000685: call @call_weak_fn with noreturn

0000065e: sub abort()


00000220:
0000056b: R16 := 0x20000
00000572: R17 := mem[R16 + 0x18, el]:u64
00000578: R16 := R16 + 0x18
0000057d: call R17 with noreturn

0000065f: sub call_weak_fn(call_weak_fn_result)
00000696: call_weak_fn_result :: out u32 = low:32[R0]

00000224:
00000227: R0 := 0x1F000
0000022e: R0 := mem[R0 + 0xFD0, el]:u64
00000234: when R0 = 0 goto %00000232
00000686: goto %00000487

00000232:
0000023a: call R30 with noreturn

00000487:
0000048a: goto @__gmon_start__

00000488:
00000555: R16 := 0x20000
0000055c: R17 := mem[R16 + 0x10, el]:u64
00000562: R16 := R16 + 0x10
00000567: call R17 with noreturn

00000661: sub deregister_tm_clones(deregister_tm_clones_result)
00000697: deregister_tm_clones_result :: out u32 = low:32[R0]

00000240:
00000243: R0 := 0x20000
00000249: R0 := R0 + 0x30
0000024e: R1 := 0x20000
00000254: R1 := R1 + 0x30
0000025a: #1 := ~R0
0000025f: #2 := R1 + ~R0
00000265: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000026b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000026f: ZF := #2 + 1 = 0
00000273: NF := 63:63[#2 + 1]
00000279: when ZF goto %00000277
00000687: goto %00000469

00000469:
0000046c: R1 := 0x1F000
00000473: R1 := mem[R1 + 0xFC0, el]:u64
00000478: when R1 = 0 goto %00000277
00000688: goto %0000047c

00000277:
0000027f: call R30 with noreturn

0000047c:
00000480: R16 := R1
00000485: call R16 with noreturn

00000664: sub frame_dummy(frame_dummy_result)
00000698: frame_dummy_result :: out u32 = low:32[R0]

00000316:
00000318: call @register_tm_clones with noreturn

00000665: sub main(main_argc, main_argv, main_result)
00000699: main_argc :: in u32 = low:32[R0]
0000069a: main_argv :: in out u64 = R1
0000069b: main_result :: out u32 = low:32[R0]

0000035f:
00000363: #4 := R31 - 0x10
00000369: mem := mem with [#4, el]:u64 <- R29
0000036f: mem := mem with [#4 + 8, el]:u64 <- R30
00000373: R31 := #4
00000379: R29 := R31
0000037e: R8 := 0
00000384: R8 := R8 + 0x754
00000389: R9 := 0
0000038f: R9 := R9 + 0x764
00000395: #5 := 31:0[R0] - 2
0000039a: VF := extend:33[#5 + 1] <> extend:33[31:0[R0]] - 1
0000039f: CF := pad:33[#5 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFF
000003a3: ZF := #5 + 1 = 0
000003a7: NF := 31:31[#5 + 1]
000003ac: R10 := 0
000003b2: R10 := R10 + 0x774
000003c0: when ZF goto %000003b8
000003c1: goto %000003bc

000003bc:
000003bd: R8 := R8
000003c3: goto %000003bf

000003b8:
000003b9: R8 := R9
000003c2: goto %000003bf

000003bf:
000003c9: #6 := 31:0[R0] - 3
000003ce: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] - 2
000003d3: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFE
000003d7: ZF := #6 + 1 = 0
000003db: NF := 31:31[#6 + 1]
000003e9: when ZF goto %000003e1
000003ea: goto %000003e5

000003e5:
000003e6: R8 := R8
000003ec: goto %000003e8

000003e1:
000003e2: R8 := R10
000003eb: goto %000003e8

000003e8:
000003f1: R30 := 0x7B8
000003f4: call R8 with return %000003f6

000003f6:
000003f9: R0 := 0
00000400: R29 := mem[R31, el]:u64
00000405: R30 := mem[R31 + 8, el]:u64
00000409: R31 := R31 + 0x10
0000040e: call R30 with noreturn

00000666: sub register_tm_clones(register_tm_clones_result)
0000069c: register_tm_clones_result :: out u32 = low:32[R0]

00000281:
00000284: R0 := 0x20000
0000028a: R0 := R0 + 0x30
0000028f: R1 := 0x20000
00000295: R1 := R1 + 0x30
0000029c: R1 := R1 + ~R0 + 1
000002a2: R2 := 0.63:63[R1]
000002a9: R1 := R2 + (R1 ~>> 3)
000002af: R1 := extend:64[63:1[R1]]
000002b5: when R1 = 0 goto %000002b3
00000689: goto %0000044b

0000044b:
0000044e: R2 := 0x1F000
00000455: R2 := mem[R2 + 0xFE0, el]:u64
0000045a: when R2 = 0 goto %000002b3
0000068a: goto %0000045e

000002b3:
000002bb: call R30 with noreturn

0000045e:
00000462: R16 := R2
00000467: call R16 with noreturn

00000669: sub set_seven(set_seven_result)
0000069d: set_seven_result :: out u32 = low:32[R0]

00000348:
0000034b: R8 := 0x20000
00000350: R9 := 7
00000358: mem := mem with [R8 + 0x34, el]:u32 <- 31:0[R9]
0000035d: call R30 with noreturn

0000066a: sub set_six(set_six_result)
0000069e: set_six_result :: out u32 = low:32[R0]

00000331:
00000334: R8 := 0x20000
00000339: R9 := 6
00000341: mem := mem with [R8 + 0x34, el]:u32 <- 31:0[R9]
00000346: call R30 with noreturn

0000066b: sub set_two(set_two_result)
0000069f: set_two_result :: out u32 = low:32[R0]

0000031a:
0000031d: R8 := 0x20000
00000322: R9 := 2
0000032a: mem := mem with [R8 + 0x34, el]:u32 <- 31:0[R9]
0000032f: call R30 with noreturn
