var {:extern} $CF: bv1;
var {:extern} $Gamma_CF: bool;
var {:extern} $Gamma_NF: bool;
var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_R9: bool;
var {:extern} $Gamma_VF: bool;
var {:extern} $Gamma_ZF: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $NF: bv1;
var {:extern} $R0: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $R8: bv64;
var {:extern} $R9: bv64;
var {:extern} $VF: bv1;
var {:extern} $ZF: bv1;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1860bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$set_two_1812();
  modifies $Gamma_R8, $Gamma_R9, $Gamma_mem, $R8, $R9, $mem;
  free requires (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1860bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1860bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

implementation p$set_two_1812()
{
  b#set_two_entry:
    assume {:captureState "set_two_entry (ZGCFxZYOSZCYCnRYI0pW4w==)"} true;
    $R9, $Gamma_R9 := 69632bv64, true;
    $R8, $Gamma_R8 := 2bv64, true;
    call p$rely();
    assert (L($mem, bvadd64($R9, 52bv64)) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R9, 52bv64), $R8[32:0]), gamma_store32($Gamma_mem, bvadd64($R9, 52bv64), $Gamma_R8);
    assume {:captureState "1820_0"} true;
    goto b#set_two_basil_return_1;
  b#set_two_basil_return_1:
    assume {:captureState "set_two_basil_return_1"} true;
    return;
}

procedure p$set_six_1828();
  modifies $Gamma_R8, $Gamma_R9, $Gamma_mem, $R8, $R9, $mem;
  free requires (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1860bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1860bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

implementation p$set_six_1828()
{
  b#set_six_entry:
    assume {:captureState "set_six_entry (TW+TmrKcRPK8KwdrX6QBgg==)"} true;
    $R9, $Gamma_R9 := 69632bv64, true;
    $R8, $Gamma_R8 := 6bv64, true;
    call p$rely();
    assert (L($mem, bvadd64($R9, 52bv64)) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R9, 52bv64), $R8[32:0]), gamma_store32($Gamma_mem, bvadd64($R9, 52bv64), $Gamma_R8);
    assume {:captureState "1836_0"} true;
    goto b#set_six_basil_return_1;
  b#set_six_basil_return_1:
    assume {:captureState "set_six_basil_return_1"} true;
    return;
}

procedure p$set_seven_1844();
  modifies $Gamma_R8, $Gamma_R9, $Gamma_mem, $R8, $R9, $mem;
  free requires (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1860bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1860bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

implementation p$set_seven_1844()
{
  b#set_seven_entry:
    assume {:captureState "set_seven_entry (GYdDLawJSPSwhQJx8RNe6g==)"} true;
    $R9, $Gamma_R9 := 69632bv64, true;
    $R8, $Gamma_R8 := 7bv64, true;
    call p$rely();
    assert (L($mem, bvadd64($R9, 52bv64)) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R9, 52bv64), $R8[32:0]), gamma_store32($Gamma_mem, bvadd64($R9, 52bv64), $Gamma_R8);
    assume {:captureState "1852_0"} true;
    goto b#set_seven_basil_return_1;
  b#set_seven_basil_return_1:
    assume {:captureState "set_seven_basil_return_1"} true;
    return;
}

procedure p$main_1860();
  modifies $CF, $Gamma_CF, $Gamma_NF, $Gamma_R0, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_R8, $Gamma_R9, $Gamma_VF, $Gamma_ZF, $Gamma_mem, $Gamma_stack, $NF, $R0, $R29, $R30, $R31, $R8, $R9, $VF, $ZF, $mem, $stack;
  requires ($Gamma_R0 == true);
  free requires (memory_load64_le($mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1860bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1860bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

implementation p$main_1860()
{
  var #Cse0__5_1: bv64;
  var #Cse0__5_2: bv32;
  var #Cse0__5_3: bv64;
  var #Cse0__5_4: bv32;
  var #Cse0__5_5: bv32;
  var #Gamma_Cse0__5_1: bool;
  var #Gamma_Cse0__5_2: bool;
  var #Gamma_Cse0__5_3: bool;
  var #Gamma_Cse0__5_4: bool;
  var #Gamma_Cse0__5_5: bool;
  var #Gamma_load2: bool;
  var #Gamma_load3: bool;
  var #Gamma_load4: bool;
  var #Gamma_load5: bool;
  var #Gamma_load6: bool;
  var #Gamma_load7: bool;
  var #load2: bv64;
  var #load3: bv64;
  var #load4: bv64;
  var #load5: bv32;
  var #load6: bv32;
  var #load7: bv32;
  b#main_entry:
    assume {:captureState "main_entry (rboiQVDCQyC6FKdIfNmCPw==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551568bv64), $Gamma_R31;
    #Cse0__5_3, #Gamma_Cse0__5_3 := bvadd64($R31, 32bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_3, $R29), gamma_store64($Gamma_stack, #Cse0__5_3, $Gamma_R29);
    assume {:captureState "1864_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_3, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_3, 8bv64), $Gamma_R30);
    assume {:captureState "1864_2"} true;
    $R29, $Gamma_R29 := bvadd64($R31, 32bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R29, 18446744073709551612bv64), 0bv32), gamma_store32($Gamma_stack, bvadd64($R29, 18446744073709551612bv64), true);
    assume {:captureState "1872_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R29, 18446744073709551608bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R29, 18446744073709551608bv64), $Gamma_R0);
    assume {:captureState "1876_0"} true;
    #load6, #Gamma_load6 := memory_load32_le($stack, bvadd64($R29, 18446744073709551608bv64)), gamma_load32($Gamma_stack, bvadd64($R29, 18446744073709551608bv64));
    $R8, $Gamma_R8 := zero_extend32_32(#load6), #Gamma_load6;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), $R8[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), $Gamma_R8);
    assume {:captureState "1884_0"} true;
    #Cse0__5_4, #Gamma_Cse0__5_4 := bvadd32($R8[32:0], 0bv32), $Gamma_R8;
    $VF, $Gamma_VF := bvnot1(bvcomp32(#Cse0__5_4, #Cse0__5_4)), #Gamma_Cse0__5_4;
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_4), bvadd33(zero_extend1_32($R8[32:0]), 4294967296bv33))), ($Gamma_R8 && #Gamma_Cse0__5_4);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_4, 0bv32), #Gamma_Cse0__5_4;
    $NF, $Gamma_NF := #Cse0__5_4[32:31], #Gamma_Cse0__5_4;
    $R8, $Gamma_R8 := zero_extend32_32(#Cse0__5_4), #Gamma_Cse0__5_4;
    assert $Gamma_ZF;
    goto b#main_51, b#main_53;
  b#main_53:
    assume {:captureState "main_53"} true;
    assume (!(!($ZF == 1bv1)));
    $R8, $Gamma_R8 := 1bv64, true;
    assert $Gamma_R8;
    goto b#main_15, b#main_49;
  b#main_51:
    assume {:captureState "main_51"} true;
    assume (!($ZF == 1bv1));
    $R8, $Gamma_R8 := 0bv64, true;
    assert $Gamma_R8;
    goto b#main_15, b#main_49;
  b#main_49:
    assume {:captureState "main_49"} true;
    assume (!($R8[1:0] == 1bv1));
    goto b#main_47;
  b#main_47:
    assume {:captureState "main_47 (RQAiG6zTRPieGXtg8phNzg==)"} true;
    goto b#main_45;
  b#main_45:
    assume {:captureState "main_45 (AkRBc3htTB6hp/enLsE9xA==)"} true;
    #load5, #Gamma_load5 := memory_load32_le($stack, bvadd64($R31, 12bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 12bv64));
    $R8, $Gamma_R8 := zero_extend32_32(#load5), #Gamma_load5;
    #Cse0__5_2, #Gamma_Cse0__5_2 := bvadd32($R8[32:0], 4294967295bv32), $Gamma_R8;
    $VF, $Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(#Cse0__5_2), bvadd33(sign_extend1_32($R8[32:0]), 8589934591bv33))), ($Gamma_R8 && #Gamma_Cse0__5_2);
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_2), bvadd33(zero_extend1_32($R8[32:0]), 4294967295bv33))), ($Gamma_R8 && #Gamma_Cse0__5_2);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_2, 0bv32), #Gamma_Cse0__5_2;
    $NF, $Gamma_NF := #Cse0__5_2[32:31], #Gamma_Cse0__5_2;
    $R8, $Gamma_R8 := zero_extend32_32(#Cse0__5_2), #Gamma_Cse0__5_2;
    assert $Gamma_ZF;
    goto b#main_41, b#main_43;
  b#main_43:
    assume {:captureState "main_43"} true;
    assume (!(!($ZF == 1bv1)));
    $R8, $Gamma_R8 := 1bv64, true;
    assert $Gamma_R8;
    goto b#main_19, b#main_39;
  b#main_41:
    assume {:captureState "main_41"} true;
    assume (!($ZF == 1bv1));
    $R8, $Gamma_R8 := 0bv64, true;
    assert $Gamma_R8;
    goto b#main_19, b#main_39;
  b#main_39:
    assume {:captureState "main_39"} true;
    assume (!($R8[1:0] == 1bv1));
    goto b#main_37;
  b#main_37:
    assume {:captureState "main_37 (I8FZ352ZRO+IEf+R/0OuJQ==)"} true;
    goto b#main_35;
  b#main_35:
    assume {:captureState "main_35 (70RWhLkDTe+EhsDioLw8WQ==)"} true;
    #load7, #Gamma_load7 := memory_load32_le($stack, bvadd64($R31, 12bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 12bv64));
    $R8, $Gamma_R8 := zero_extend32_32(#load7), #Gamma_load7;
    #Cse0__5_5, #Gamma_Cse0__5_5 := bvadd32($R8[32:0], 4294967294bv32), $Gamma_R8;
    $VF, $Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(#Cse0__5_5), bvadd33(sign_extend1_32($R8[32:0]), 8589934590bv33))), ($Gamma_R8 && #Gamma_Cse0__5_5);
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_5), bvadd33(zero_extend1_32($R8[32:0]), 4294967294bv33))), ($Gamma_R8 && #Gamma_Cse0__5_5);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_5, 0bv32), #Gamma_Cse0__5_5;
    $NF, $Gamma_NF := #Cse0__5_5[32:31], #Gamma_Cse0__5_5;
    $R8, $Gamma_R8 := zero_extend32_32(#Cse0__5_5), #Gamma_Cse0__5_5;
    assert $Gamma_ZF;
    goto b#main_31, b#main_33;
  b#main_33:
    assume {:captureState "main_33"} true;
    assume (!(!($ZF == 1bv1)));
    $R8, $Gamma_R8 := 1bv64, true;
    assert $Gamma_R8;
    goto b#main_23, b#main_29;
  b#main_31:
    assume {:captureState "main_31"} true;
    assume (!($ZF == 1bv1));
    $R8, $Gamma_R8 := 0bv64, true;
    assert $Gamma_R8;
    goto b#main_23, b#main_29;
  b#main_29:
    assume {:captureState "main_29"} true;
    assume (!($R8[1:0] == 1bv1));
    goto b#main_27;
  b#main_27:
    assume {:captureState "main_27 (y41iXcMRRS60gPiNTMEqUA==)"} true;
    goto b#main_25;
  b#main_25:
    assume {:captureState "main_25 (AsLE5WYARJCWvKLiwF4hRQ==)"} true;
    $R8, $Gamma_R8 := 0bv64, true;
    $R8, $Gamma_R8 := bvadd64($R8, 1812bv64), $Gamma_R8;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 16bv64), $R8), gamma_store64($Gamma_stack, bvadd64($R31, 16bv64), $Gamma_R8);
    assume {:captureState "2000_0"} true;
    goto b#main_11;
  b#main_23:
    assume {:captureState "main_23"} true;
    assume ($R8[1:0] == 1bv1);
    $R8, $Gamma_R8 := 0bv64, true;
    $R8, $Gamma_R8 := bvadd64($R8, 1844bv64), $Gamma_R8;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 16bv64), $R8), gamma_store64($Gamma_stack, bvadd64($R31, 16bv64), $Gamma_R8);
    assume {:captureState "1984_0"} true;
    goto b#main_21;
  b#main_21:
    assume {:captureState "main_21 (5eLcB2fBTiuduOLFrI7HMQ==)"} true;
    goto b#main_11;
  b#main_19:
    assume {:captureState "main_19"} true;
    assume ($R8[1:0] == 1bv1);
    $R8, $Gamma_R8 := 0bv64, true;
    $R8, $Gamma_R8 := bvadd64($R8, 1828bv64), $Gamma_R8;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 16bv64), $R8), gamma_store64($Gamma_stack, bvadd64($R31, 16bv64), $Gamma_R8);
    assume {:captureState "1968_0"} true;
    goto b#main_17;
  b#main_17:
    assume {:captureState "main_17 (esd5Zx0TR0e4D/8HsKRPlw==)"} true;
    goto b#main_11;
  b#main_15:
    assume {:captureState "main_15"} true;
    assume ($R8[1:0] == 1bv1);
    $R8, $Gamma_R8 := 0bv64, true;
    $R8, $Gamma_R8 := bvadd64($R8, 1812bv64), $Gamma_R8;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 16bv64), $R8), gamma_store64($Gamma_stack, bvadd64($R31, 16bv64), $Gamma_R8);
    assume {:captureState "1952_0"} true;
    goto b#main_13;
  b#main_13:
    assume {:captureState "main_13 (JHDryML5TjOA3hQf2kM0Cg==)"} true;
    goto b#main_11;
  b#main_11:
    assume {:captureState "main_11 (97Y0dwDdTcSoq5o31slpCQ==)"} true;
    #load4, #Gamma_load4 := memory_load64_le($stack, bvadd64($R31, 16bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 16bv64));
    $R8, $Gamma_R8 := #load4, #Gamma_load4;
    $R30, $Gamma_R30 := 2016bv64, true;
    goto b#main_5, b#main_7, b#main_9;
  b#main_9:
    assume {:captureState "main_9"} true;
    assume ($R8 == 1844bv64);
    call p$set_seven_1844();
    goto b#main_3;
  b#main_7:
    assume {:captureState "main_7"} true;
    assume ($R8 == 1828bv64);
    call p$set_six_1828();
    goto b#main_3;
  b#main_5:
    assume {:captureState "main_5"} true;
    assume ($R8 == 1812bv64);
    call p$set_two_1812();
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (jAHnJBxNS3WjIRJVHu5UsQ==)"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    #Cse0__5_1, #Gamma_Cse0__5_1 := bvadd64($R31, 32bv64), $Gamma_R31;
    #load2, #Gamma_load2 := memory_load64_le($stack, #Cse0__5_1), gamma_load64($Gamma_stack, #Cse0__5_1);
    $R29, $Gamma_R29 := #load2, #Gamma_load2;
    #load3, #Gamma_load3 := memory_load64_le($stack, bvadd64(#Cse0__5_1, 8bv64)), gamma_load64($Gamma_stack, bvadd64(#Cse0__5_1, 8bv64));
    $R30, $Gamma_R30 := #load3, #Gamma_load3;
    $R31, $Gamma_R31 := bvadd64($R31, 48bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

