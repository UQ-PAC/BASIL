00000787: program
0000074b: sub __cxa_finalize(__cxa_finalize_result)
00000788: __cxa_finalize_result :: out u32 = low:32[R0]

00000472:
000005a9: R16 := 0x20000
000005b0: R17 := mem[R16 + 8, el]:u64
000005b6: R16 := R16 + 8
000005bb: call R17 with noreturn

0000074c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000789: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000395:
00000399: #5 := R31 - 0x20
0000039f: mem := mem with [#5, el]:u64 <- R29
000003a5: mem := mem with [#5 + 8, el]:u64 <- R30
000003a9: R31 := #5
000003af: R29 := R31
000003b7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003bc: R19 := 0x20000
000003c3: R0 := pad:64[mem[R19 + 0x30]]
000003c9: when 0:0[R0] goto %000003c7
0000077b: goto %0000043b

0000043b:
0000043e: R0 := 0x1F000
00000445: R0 := mem[R0 + 0xFC8, el]:u64
0000044b: when R0 = 0 goto %00000449
0000077c: goto %00000462

00000462:
00000465: R0 := 0x20000
0000046c: R0 := mem[R0 + 0x28, el]:u64
00000471: R30 := 0x770
00000474: call @__cxa_finalize with return %00000449

00000449:
00000451: R30 := 0x774
00000453: call @deregister_tm_clones with return %00000455

00000455:
00000458: R0 := 1
00000460: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000077d: goto %000003c7

000003c7:
000003d1: R19 := mem[R31 + 0x10, el]:u64
000003d8: R29 := mem[R31, el]:u64
000003dd: R30 := mem[R31 + 8, el]:u64
000003e1: R31 := R31 + 0x20
000003e6: call R30 with noreturn

00000750: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000078a: __libc_start_main_main :: in u64 = R0
0000078b: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000078c: __libc_start_main_arg3 :: in out u64 = R2
0000078d: __libc_start_main_auxv :: in out u64 = R3
0000078e: __libc_start_main_result :: out u32 = low:32[R0]

000002ee:
00000593: R16 := 0x20000
0000059a: R17 := mem[R16, el]:u64
000005a0: R16 := R16
000005a5: call R17 with noreturn

00000751: sub _fini(_fini_result)
0000078f: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000752: sub _init(_init_result)
00000790: _init_result :: out u32 = low:32[R0]

0000067e:
00000684: #8 := R31 - 0x10
0000068a: mem := mem with [#8, el]:u64 <- R29
00000690: mem := mem with [#8 + 8, el]:u64 <- R30
00000694: R31 := #8
0000069a: R29 := R31
0000069f: R30 := 0x590
000006a1: call @call_weak_fn with return %000006a3

000006a3:
000006a8: R29 := mem[R31, el]:u64
000006ad: R30 := mem[R31 + 8, el]:u64
000006b1: R31 := R31 + 0x10
000006b6: call R30 with noreturn

00000753: sub _start(_start_result)
00000791: _start_result :: out u32 = low:32[R0]

000002af:
000002b4: R29 := 0
000002b9: R30 := 0
000002bf: R5 := R0
000002c6: R1 := mem[R31, el]:u64
000002cc: R2 := R31 + 8
000002d2: R6 := R31
000002d7: R0 := 0x1F000
000002de: R0 := mem[R0 + 0xFD8, el]:u64
000002e3: R3 := 0
000002e8: R4 := 0
000002ed: R30 := 0x6B0
000002f0: call @__libc_start_main with return %000002f2

000002f2:
000002f5: R30 := 0x6B4
000002f8: call @abort with return %0000077e

0000077e:
0000077f: call @call_weak_fn with noreturn

00000756: sub abort()


000002f6:
000005d5: R16 := 0x20000
000005dc: R17 := mem[R16 + 0x18, el]:u64
000005e2: R16 := R16 + 0x18
000005e7: call R17 with noreturn

00000757: sub call_weak_fn(call_weak_fn_result)
00000792: call_weak_fn_result :: out u32 = low:32[R0]

000002fa:
000002fd: R0 := 0x1F000
00000304: R0 := mem[R0 + 0xFD0, el]:u64
0000030a: when R0 = 0 goto %00000308
00000780: goto %000004b2

00000308:
00000310: call R30 with noreturn

000004b2:
000004b5: goto @__gmon_start__

000004b3:
000005bf: R16 := 0x20000
000005c6: R17 := mem[R16 + 0x10, el]:u64
000005cc: R16 := R16 + 0x10
000005d1: call R17 with noreturn

00000759: sub deregister_tm_clones(deregister_tm_clones_result)
00000793: deregister_tm_clones_result :: out u32 = low:32[R0]

00000316:
00000319: R0 := 0x20000
0000031f: R0 := R0 + 0x30
00000324: R1 := 0x20000
0000032a: R1 := R1 + 0x30
00000330: #3 := ~R0
00000335: #4 := R1 + ~R0
0000033b: VF := extend:65[#4 + 1] <> extend:65[R1] + extend:65[#3] + 1
00000341: CF := pad:65[#4 + 1] <> pad:65[R1] + pad:65[#3] + 1
00000345: ZF := #4 + 1 = 0
00000349: NF := 63:63[#4 + 1]
0000034f: when ZF goto %0000034d
00000781: goto %00000494

00000494:
00000497: R1 := 0x1F000
0000049e: R1 := mem[R1 + 0xFC0, el]:u64
000004a3: when R1 = 0 goto %0000034d
00000782: goto %000004a7

0000034d:
00000355: call R30 with noreturn

000004a7:
000004ab: R16 := R1
000004b0: call R16 with noreturn

0000075c: sub frame_dummy(frame_dummy_result)
00000794: frame_dummy_result :: out u32 = low:32[R0]

000003ec:
000003ee: call @register_tm_clones with noreturn

0000075d: sub main(main_argc, main_argv, main_result)
00000795: main_argc :: in u32 = low:32[R0]
00000796: main_argv :: in out u64 = R1
00000797: main_result :: out u32 = low:32[R0]

00000225:
00000229: #1 := R31 - 0x10
0000022f: mem := mem with [#1, el]:u64 <- R29
00000235: mem := mem with [#1 + 8, el]:u64 <- R30
00000239: R31 := #1
0000023f: R29 := R31
00000245: #2 := 31:0[R0] - 2
0000024a: VF := extend:33[#2 + 1] <> extend:33[31:0[R0]] - 1
0000024f: CF := pad:33[#2 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFF
00000253: ZF := #2 + 1 = 0
00000257: NF := 31:31[#2 + 1]
0000025d: when ZF goto %0000025b
00000783: goto %000004b7

0000025b:
00000263: R0 := 0
00000269: R0 := R0 + 0x7B0
0000026e: goto %0000026c

000004b7:
000004bb: #6 := 31:0[R0] - 3
000004c0: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] - 2
000004c5: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] + 0xFFFFFFFE
000004c9: ZF := #6 + 1 = 0
000004cd: NF := 31:31[#6 + 1]
000004d2: R1 := 0
000004d7: R0 := 0
000004dd: R1 := R1 + 0x7A0
000004e3: R0 := R0 + 0x7C0
000004f1: when ZF goto %000004e9
000004f2: goto %000004ed

000004ed:
000004ee: R0 := R1
000004f4: goto %000004f0

000004e9:
000004ea: R0 := R0
000004f3: goto %000004f0

000004f0:
00000784: goto %0000026c

0000026c:
00000272: R30 := 0x62C
00000275: call R0 with return %00000277

00000277:
0000027a: R0 := 0
00000281: R29 := mem[R31, el]:u64
00000286: R30 := mem[R31 + 8, el]:u64
0000028a: R31 := R31 + 0x10
0000028f: call R30 with noreturn

00000760: sub register_tm_clones(register_tm_clones_result)
00000798: register_tm_clones_result :: out u32 = low:32[R0]

00000357:
0000035a: R0 := 0x20000
00000360: R0 := R0 + 0x30
00000365: R1 := 0x20000
0000036b: R1 := R1 + 0x30
00000372: R1 := R1 + ~R0 + 1
00000378: R2 := 0.63:63[R1]
0000037f: R1 := R2 + (R1 ~>> 3)
00000385: R1 := extend:64[63:1[R1]]
0000038b: when R1 = 0 goto %00000389
00000785: goto %00000476

00000476:
00000479: R2 := 0x1F000
00000480: R2 := mem[R2 + 0xFE0, el]:u64
00000485: when R2 = 0 goto %00000389
00000786: goto %00000489

00000389:
00000391: call R30 with noreturn

00000489:
0000048d: R16 := R2
00000492: call R16 with noreturn

00000763: sub set_seven(set_seven_result)
00000799: set_seven_result :: out u32 = low:32[R0]

00000424:
00000427: R0 := 0x20000
0000042c: R1 := 7
00000434: mem := mem with [R0 + 0x34, el]:u32 <- 31:0[R1]
00000439: call R30 with noreturn

00000764: sub set_six(set_six_result)
0000079a: set_six_result :: out u32 = low:32[R0]

0000040d:
00000410: R0 := 0x20000
00000415: R1 := 6
0000041d: mem := mem with [R0 + 0x34, el]:u32 <- 31:0[R1]
00000422: call R30 with noreturn

00000765: sub set_two(set_two_result)
0000079b: set_two_result :: out u32 = low:32[R0]

000003f6:
000003f9: R0 := 0x20000
000003fe: R1 := 2
00000406: mem := mem with [R0 + 0x34, el]:u32 <- 31:0[R1]
0000040b: call R30 with noreturn
