var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 2020bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69016bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure set_six_1968();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load32_le(mem, 2020bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69016bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load32_le(mem, 2020bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69016bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation set_six_1968()
{
  set_six_1968__0__dX4gaI1OSUabhEuG9un0cA:
    assume {:captureState "set_six_1968__0__dX4gaI1OSUabhEuG9un0cA"} true;
    R0, Gamma_R0 := 69632bv64, true;
    R1, Gamma_R1 := 6bv64, true;
    call rely();
    assert (L(mem, bvadd64(R0, 20bv64)) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R0, 20bv64), R1[32:0]), gamma_store32(Gamma_mem, bvadd64(R0, 20bv64), Gamma_R1);
    assume {:captureState "1976_0"} true;
    goto set_six_1968_basil_return;
  set_six_1968_basil_return:
    assume {:captureState "set_six_1968_basil_return"} true;
    return;
}

procedure main_1536();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R1, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_VF, Gamma_ZF, Gamma_mem, Gamma_stack, NF, R0, R1, R29, R30, R31, VF, ZF, mem, stack;
  requires (Gamma_R0 == true);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le(mem, 2020bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69016bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 2020bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69016bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main_1536()
{
  var Cse0__5_0_0: bv64;
  var Cse0__5_0_2: bv32;
  var Cse0__5_1_0: bv32;
  var Gamma_Cse0__5_0_0: bool;
  var Gamma_Cse0__5_0_2: bool;
  var Gamma_Cse0__5_1_0: bool;
  var Gamma_load20: bool;
  var Gamma_load21: bool;
  var load20: bv64;
  var load21: bv64;
  main_1536__0__eOh8YVTlQnKonp~fpb5jKw:
    assume {:captureState "main_1536__0__eOh8YVTlQnKonp~fpb5jKw"} true;
    Cse0__5_0_0, Gamma_Cse0__5_0_0 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5_0_0, R29), gamma_store64(Gamma_stack, Cse0__5_0_0, Gamma_R29);
    assume {:captureState "1536_1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5_0_0, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5_0_0, 8bv64), Gamma_R30);
    assume {:captureState "1536_2"} true;
    R31, Gamma_R31 := Cse0__5_0_0, Gamma_Cse0__5_0_0;
    R29, Gamma_R29 := R31, Gamma_R31;
    Cse0__5_0_2, Gamma_Cse0__5_0_2 := bvadd32(R0[32:0], 4294967295bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_0_2), bvadd33(sign_extend1_32(R0[32:0]), 8589934591bv33))), (Gamma_R0 && Gamma_Cse0__5_0_2);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_0_2), bvadd33(zero_extend1_32(R0[32:0]), 4294967295bv33))), (Gamma_R0 && Gamma_Cse0__5_0_2);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_0_2, 0bv32), Gamma_Cse0__5_0_2;
    NF, Gamma_NF := Cse0__5_0_2[32:31], Gamma_Cse0__5_0_2;
    assert Gamma_ZF;
    goto main_1536__0__eOh8YVTlQnKonp~fpb5jKw_goto_main_1536__4__S8383WrHT8i~O1Ieq4qHoA, main_1536__0__eOh8YVTlQnKonp~fpb5jKw_goto_main_1536__1__ca5W8ecrTdSh_xILQFKWFg;
  main_1536__0__eOh8YVTlQnKonp~fpb5jKw_goto_main_1536__1__ca5W8ecrTdSh_xILQFKWFg:
    assume {:captureState "main_1536__0__eOh8YVTlQnKonp~fpb5jKw_goto_main_1536__1__ca5W8ecrTdSh_xILQFKWFg"} true;
    assume (!(ZF == 1bv1));
    Cse0__5_1_0, Gamma_Cse0__5_1_0 := bvadd32(R0[32:0], 4294967294bv32), Gamma_R0;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_1_0), bvadd33(sign_extend1_32(R0[32:0]), 8589934590bv33))), (Gamma_R0 && Gamma_Cse0__5_1_0);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_1_0), bvadd33(zero_extend1_32(R0[32:0]), 4294967294bv33))), (Gamma_R0 && Gamma_Cse0__5_1_0);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_1_0, 0bv32), Gamma_Cse0__5_1_0;
    NF, Gamma_NF := Cse0__5_1_0[32:31], Gamma_Cse0__5_1_0;
    R1, Gamma_R1 := 0bv64, true;
    R0, Gamma_R0 := 0bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 1984bv64), Gamma_R1;
    R0, Gamma_R0 := bvadd64(R0, 1952bv64), Gamma_R0;
    goto main_1536__1__ca5W8ecrTdSh_xILQFKWFg;
  main_1536__1__ca5W8ecrTdSh_xILQFKWFg:
    assume {:captureState "main_1536__1__ca5W8ecrTdSh_xILQFKWFg"} true;
    assert Gamma_ZF;
    goto main_1536__1__ca5W8ecrTdSh_xILQFKWFg$__0, main_1536__1__ca5W8ecrTdSh_xILQFKWFg$__1;
  main_1536__1__ca5W8ecrTdSh_xILQFKWFg$__1:
    assume {:captureState "main_1536__1__ca5W8ecrTdSh_xILQFKWFg$__1"} true;
    assume (!(!(ZF == 1bv1)));
    R0, Gamma_R0 := R1, Gamma_R1;
    goto main_1536__2__fEZ8GKsISKaOAJptXmofmg;
  main_1536__1__ca5W8ecrTdSh_xILQFKWFg$__0:
    assume {:captureState "main_1536__1__ca5W8ecrTdSh_xILQFKWFg$__0"} true;
    assume (!(ZF == 1bv1));
    R0, Gamma_R0 := R0, Gamma_R0;
    goto main_1536__2__fEZ8GKsISKaOAJptXmofmg;
  main_1536__0__eOh8YVTlQnKonp~fpb5jKw_goto_main_1536__4__S8383WrHT8i~O1Ieq4qHoA:
    assume {:captureState "main_1536__0__eOh8YVTlQnKonp~fpb5jKw_goto_main_1536__4__S8383WrHT8i~O1Ieq4qHoA"} true;
    assume (ZF == 1bv1);
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 1968bv64), Gamma_R0;
    goto main_1536__4__S8383WrHT8i~O1Ieq4qHoA;
  main_1536__4__S8383WrHT8i~O1Ieq4qHoA:
    assume {:captureState "main_1536__4__S8383WrHT8i~O1Ieq4qHoA"} true;
    goto main_1536__2__fEZ8GKsISKaOAJptXmofmg;
  main_1536__2__fEZ8GKsISKaOAJptXmofmg:
    assume {:captureState "main_1536__2__fEZ8GKsISKaOAJptXmofmg"} true;
    R30, Gamma_R30 := 1580bv64, true;
    call set_six_1968();
    goto main_1536__3__F~EXshFNSrygGBX5dfkWLg;
  main_1536__3__F~EXshFNSrygGBX5dfkWLg:
    assume {:captureState "main_1536__3__F~EXshFNSrygGBX5dfkWLg"} true;
    R0, Gamma_R0 := 0bv64, true;
    load20, Gamma_load20 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R29, Gamma_R29 := load20, Gamma_load20;
    load21, Gamma_load21 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := load21, Gamma_load21;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_1536_basil_return;
  main_1536_basil_return:
    assume {:captureState "main_1536_basil_return"} true;
    return;
}

