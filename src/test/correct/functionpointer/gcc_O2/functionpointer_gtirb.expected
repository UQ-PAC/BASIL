var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:inline} byte_extract64_64(value: bv64, offset: bv64) returns (bv8) {
  bvlshr64(value,bvmul64(offset,8bv64))[8:0]
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then byte_extract64_64(value, bvsub64(i, index)) else memory[i])))
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2020bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2021bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2022bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2023bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure set_six();
  modifies Gamma_mem, mem;
  free requires (memory_load8_le(mem, 2020bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2021bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2022bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2023bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2020bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2021bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2022bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2023bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation set_six()
{
  $set_six$__0__$dX4gaI1OSUabhEuG9un0cA:
    call rely();
    assert (L(mem, 69652bv64) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, 69652bv64, 6bv32), gamma_store32(Gamma_mem, 69652bv64, true);
    goto set_six_basil_return;
  set_six_basil_return:
    return;
}

procedure main(R0_in: bv64, Gamma_R0_in: bool, R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R29_out: bv64, Gamma_R29_out: bool, R30_out: bv64, Gamma_R30_out: bool, R31_out: bv64, Gamma_R31_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  requires (Gamma_R0_in == true);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 2020bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2021bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2022bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2023bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69016bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69024bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2020bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2021bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2022bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2023bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69016bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69024bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1536bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R29_out: bv64, Gamma_R29_out: bool, R30_out: bv64, Gamma_R30_out: bool, R31_out: bv64, Gamma_R31_out: bool)
{
  var Gamma_R1: bool;
  var Gamma_R1_5: bool;
  var Gamma_R29_3: bool;
  var Gamma_R30_3: bool;
  var R1: bv64;
  var R1_5: bv64;
  var R29_3: bv64;
  var R30_3: bv64;
  $main$__0__$eOh8YVTlQnKonp~fpb5jKw:
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551600bv64), R29_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551600bv64), Gamma_R29_in);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551608bv64), R30_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), Gamma_R30_in);
    assert Gamma_R0_in;
    goto $main$__0__$eOh8YVTlQnKonp~fpb5jKw_goto_$main$__4__$S8383WrHT8i~O1Ieq4qHoA, $main$__0__$eOh8YVTlQnKonp~fpb5jKw_goto_$main$__1__$ca5W8ecrTdSh_xILQFKWFg;
  $main$__0__$eOh8YVTlQnKonp~fpb5jKw_goto_$main$__1__$ca5W8ecrTdSh_xILQFKWFg:
    assume (!(R0_in[32:0] == 1bv32));
    assert Gamma_R0_in;
    goto $main$__1__$ca5W8ecrTdSh_xILQFKWFg$__0, $main$__1__$ca5W8ecrTdSh_xILQFKWFg$__1;
  $main$__1__$ca5W8ecrTdSh_xILQFKWFg$__1:
    assume (R0_in[32:0] == 2bv32);
    R1_5, Gamma_R1_5 := 1984bv64, true;
    goto $main$__2__$fEZ8GKsISKaOAJptXmofmg;
  $main$__1__$ca5W8ecrTdSh_xILQFKWFg$__0:
    assume (!(R0_in[32:0] == 2bv32));
    R1_5, Gamma_R1_5 := 1984bv64, true;
    goto $main$__2__$fEZ8GKsISKaOAJptXmofmg;
  $main$__0__$eOh8YVTlQnKonp~fpb5jKw_goto_$main$__4__$S8383WrHT8i~O1Ieq4qHoA:
    assume (R0_in[32:0] == 1bv32);
    R1_5, Gamma_R1_5 := R1, Gamma_R1;
    goto $main$__2__$fEZ8GKsISKaOAJptXmofmg;
  $main$__2__$fEZ8GKsISKaOAJptXmofmg:
    call set_six();
    goto $main$__3__$F~EXshFNSrygGBX5dfkWLg;
  $main$__3__$F~EXshFNSrygGBX5dfkWLg:
    R29_3, Gamma_R29_3 := memory_load64_le(stack, bvadd64(R31_in, 18446744073709551600bv64)), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551600bv64));
    R30_3, Gamma_R30_3 := memory_load64_le(stack, bvadd64(R31_in, 18446744073709551608bv64)), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64));
    goto main_basil_return;
  main_basil_return:
    R0_out, R1_out, R29_out, R30_out, R31_out := 0bv64, R1_5, R29_3, R30_3, R31_in;
    Gamma_R0_out, Gamma_R1_out, Gamma_R29_out, Gamma_R30_out, Gamma_R31_out := true, Gamma_R1_5, Gamma_R29_3, Gamma_R30_3, Gamma_R31_in;
    return;
}

