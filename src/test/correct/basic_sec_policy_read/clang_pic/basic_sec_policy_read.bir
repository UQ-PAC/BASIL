000005ed: program
000005b9: sub __cxa_finalize(__cxa_finalize_result)
000005ee: __cxa_finalize_result :: out u32 = low:32[R0]

000003b7:
000004af: R16 := 0x20000
000004b6: R17 := mem[R16 + 8, el]:u64
000004bc: R16 := R16 + 8
000004c1: call R17 with noreturn

000005ba: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005ef: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000297:
0000029b: #3 := R31 - 0x20
000002a1: mem := mem with [#3, el]:u64 <- R29
000002a7: mem := mem with [#3 + 8, el]:u64 <- R30
000002ab: R31 := #3
000002b1: R29 := R31
000002b9: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002be: R19 := 0x20000
000002c5: R0 := pad:64[mem[R19 + 0x30]]
000002cb: when 0:0[R0] goto %000002c9
000005e2: goto %00000380

00000380:
00000383: R0 := 0x1F000
0000038a: R0 := mem[R0 + 0xFB8, el]:u64
00000390: when R0 = 0 goto %0000038e
000005e3: goto %000003a7

000003a7:
000003aa: R0 := 0x20000
000003b1: R0 := mem[R0 + 0x28, el]:u64
000003b6: R30 := 0x770
000003b9: call @__cxa_finalize with return %0000038e

0000038e:
00000396: R30 := 0x774
00000398: call @deregister_tm_clones with return %0000039a

0000039a:
0000039d: R0 := 1
000003a5: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005e4: goto %000002c9

000002c9:
000002d3: R19 := mem[R31 + 0x10, el]:u64
000002da: R29 := mem[R31, el]:u64
000002df: R30 := mem[R31 + 8, el]:u64
000002e3: R31 := R31 + 0x20
000002e8: call R30 with noreturn

000005be: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005f0: __libc_start_main_main :: in u64 = R0
000005f1: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005f2: __libc_start_main_arg3 :: in out u64 = R2
000005f3: __libc_start_main_auxv :: in out u64 = R3
000005f4: __libc_start_main_result :: out u32 = low:32[R0]

000001f0:
00000499: R16 := 0x20000
000004a0: R17 := mem[R16, el]:u64
000004a6: R16 := R16
000004ab: call R17 with noreturn

000005bf: sub _fini(_fini_result)
000005f5: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005c0: sub _init(_init_result)
000005f6: _init_result :: out u32 = low:32[R0]

00000509:
0000050f: #6 := R31 - 0x10
00000515: mem := mem with [#6, el]:u64 <- R29
0000051b: mem := mem with [#6 + 8, el]:u64 <- R30
0000051f: R31 := #6
00000525: R29 := R31
0000052a: R30 := 0x5F8
0000052c: call @call_weak_fn with return %0000052e

0000052e:
00000533: R29 := mem[R31, el]:u64
00000538: R30 := mem[R31 + 8, el]:u64
0000053c: R31 := R31 + 0x10
00000541: call R30 with noreturn

000005c1: sub _start(_start_result)
000005f7: _start_result :: out u32 = low:32[R0]

000001b1:
000001b6: R29 := 0
000001bb: R30 := 0
000001c1: R5 := R0
000001c8: R1 := mem[R31, el]:u64
000001ce: R2 := R31 + 8
000001d4: R6 := R31
000001d9: R0 := 0x1F000
000001e0: R0 := mem[R0 + 0xFD8, el]:u64
000001e5: R3 := 0
000001ea: R4 := 0
000001ef: R30 := 0x6B0
000001f2: call @__libc_start_main with return %000001f4

000001f4:
000001f7: R30 := 0x6B4
000001fa: call @abort with return %000005e5

000005e5:
000005e6: call @call_weak_fn with noreturn

000005c4: sub abort()


000001f8:
000004db: R16 := 0x20000
000004e2: R17 := mem[R16 + 0x18, el]:u64
000004e8: R16 := R16 + 0x18
000004ed: call R17 with noreturn

000005c5: sub call_weak_fn(call_weak_fn_result)
000005f8: call_weak_fn_result :: out u32 = low:32[R0]

000001fc:
000001ff: R0 := 0x1F000
00000206: R0 := mem[R0 + 0xFD0, el]:u64
0000020c: when R0 = 0 goto %0000020a
000005e7: goto %000003f7

0000020a:
00000212: call R30 with noreturn

000003f7:
000003fa: goto @__gmon_start__

000003f8:
000004c5: R16 := 0x20000
000004cc: R17 := mem[R16 + 0x10, el]:u64
000004d2: R16 := R16 + 0x10
000004d7: call R17 with noreturn

000005c7: sub deregister_tm_clones(deregister_tm_clones_result)
000005f9: deregister_tm_clones_result :: out u32 = low:32[R0]

00000218:
0000021b: R0 := 0x20000
00000221: R0 := R0 + 0x30
00000226: R1 := 0x20000
0000022c: R1 := R1 + 0x30
00000232: #1 := ~R0
00000237: #2 := R1 + ~R0
0000023d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000243: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000247: ZF := #2 + 1 = 0
0000024b: NF := 63:63[#2 + 1]
00000251: when ZF goto %0000024f
000005e8: goto %000003d9

000003d9:
000003dc: R1 := 0x1F000
000003e3: R1 := mem[R1 + 0xFB0, el]:u64
000003e8: when R1 = 0 goto %0000024f
000005e9: goto %000003ec

0000024f:
00000257: call R30 with noreturn

000003ec:
000003f0: R16 := R1
000003f5: call R16 with noreturn

000005ca: sub frame_dummy(frame_dummy_result)
000005fa: frame_dummy_result :: out u32 = low:32[R0]

000002ee:
000002f0: call @register_tm_clones with noreturn

000005cb: sub main(main_argc, main_argv, main_result)
000005fb: main_argc :: in u32 = low:32[R0]
000005fc: main_argv :: in out u64 = R1
000005fd: main_result :: out u32 = low:32[R0]

000002f2:
000002f6: R31 := R31 - 0x10
000002fd: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000302: R8 := 0x1F000
00000309: R8 := mem[R8 + 0xFC8, el]:u64
00000310: R8 := pad:64[mem[R8, el]:u32]
00000318: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000031d: R8 := 0x1F000
00000324: R8 := mem[R8 + 0xFC0, el]:u64
0000032b: R8 := pad:64[mem[R8, el]:u32]
00000331: #4 := 31:0[R8] - 1
00000336: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
0000033b: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
0000033f: ZF := #4 + 1 = 0
00000343: NF := 31:31[#4 + 1]
00000347: R8 := pad:64[#4 + 1]
00000353: when ZF <> 1 goto %0000034c
00000354: goto %0000034f

0000034f:
00000350: R8 := 1
00000356: goto %00000352

0000034c:
0000034d: R8 := 0
00000355: goto %00000352

00000352:
0000035c: when 0:0[R8] goto %0000035a
000005ea: goto %00000371

00000371:
00000374: goto %00000372

00000372:
0000037a: mem := mem with [R31 + 8, el]:u32 <- 0
0000037e: goto %0000035a

0000035a:
00000364: R0 := pad:64[mem[R31 + 8, el]:u32]
0000036a: R31 := R31 + 0x10
0000036f: call R30 with noreturn

000005cd: sub register_tm_clones(register_tm_clones_result)
000005fe: register_tm_clones_result :: out u32 = low:32[R0]

00000259:
0000025c: R0 := 0x20000
00000262: R0 := R0 + 0x30
00000267: R1 := 0x20000
0000026d: R1 := R1 + 0x30
00000274: R1 := R1 + ~R0 + 1
0000027a: R2 := 0.63:63[R1]
00000281: R1 := R2 + (R1 ~>> 3)
00000287: R1 := extend:64[63:1[R1]]
0000028d: when R1 = 0 goto %0000028b
000005eb: goto %000003bb

000003bb:
000003be: R2 := 0x1F000
000003c5: R2 := mem[R2 + 0xFE0, el]:u64
000003ca: when R2 = 0 goto %0000028b
000005ec: goto %000003ce

0000028b:
00000293: call R30 with noreturn

000003ce:
000003d2: R16 := R2
000003d7: call R16 with noreturn
