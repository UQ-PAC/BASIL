var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69684bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69688bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $z_addr) then true else (if (index == $x_addr) then (memory_load32_le(mem$in, $z_addr) == 0bv32) else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures ((old(memory_load32_le(mem, $z_addr)) != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
  free ensures (memory_load32_le(mem, 1968bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures ((old(memory_load32_le(mem, $z_addr)) != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert ((memory_load32_le(mem, $z_addr) != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

implementation {:extern} guarantee_reflexive()
{
  assert (memory_load32_le(mem, $z_addr) == memory_load32_le(mem, $z_addr));
}

procedure main();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R31, Gamma_R8, Gamma_VF, Gamma_ZF, Gamma_mem, Gamma_stack, NF, R0, R31, R8, VF, ZF, mem, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le(mem, 1968bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free requires (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 1968bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69048bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main()
{
  var $load17: bv32;
  var $load18: bv64;
  var $load19: bv32;
  var $load20: bv64;
  var $load21: bv32;
  var Cse0__5$3$9: bv32;
  var Gamma_$load17: bool;
  var Gamma_$load18: bool;
  var Gamma_$load19: bool;
  var Gamma_$load20: bool;
  var Gamma_$load21: bool;
  var Gamma_Cse0__5$3$9: bool;
  $main$__0__$_zy4nZRRQ4202Be_0Qr3jw:
    assume {:captureState "$main$__0__$_zy4nZRRQ4202Be_0Qr3jw"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), true);
    assume {:captureState "1880$0"} true;
    R8, Gamma_R8 := 65536bv64, true;
    call rely();
    $load18, Gamma_$load18 := memory_load64_le(mem, bvadd64(R8, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4040bv64)) || L(mem, bvadd64(R8, 4040bv64)));
    R8, Gamma_R8 := $load18, Gamma_$load18;
    call rely();
    $load19, Gamma_$load19 := memory_load32_le(mem, R8), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R8, Gamma_R8 := zero_extend32_32($load19), Gamma_$load19;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 8bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R8);
    assume {:captureState "1896$0"} true;
    R8, Gamma_R8 := 65536bv64, true;
    call rely();
    $load20, Gamma_$load20 := memory_load64_le(mem, bvadd64(R8, 4032bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4032bv64)) || L(mem, bvadd64(R8, 4032bv64)));
    R8, Gamma_R8 := $load20, Gamma_$load20;
    call rely();
    $load21, Gamma_$load21 := memory_load32_le(mem, R8), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R8, Gamma_R8 := zero_extend32_32($load21), Gamma_$load21;
    Cse0__5$3$9, Gamma_Cse0__5$3$9 := bvadd32(R8[32:0], 0bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp32(Cse0__5$3$9, Cse0__5$3$9)), Gamma_Cse0__5$3$9;
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5$3$9), bvadd33(zero_extend1_32(R8[32:0]), 4294967296bv33))), (Gamma_R8 && Gamma_Cse0__5$3$9);
    ZF, Gamma_ZF := bvcomp32(Cse0__5$3$9, 0bv32), Gamma_Cse0__5$3$9;
    NF, Gamma_NF := Cse0__5$3$9[32:31], Gamma_Cse0__5$3$9;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5$3$9), Gamma_Cse0__5$3$9;
    assert Gamma_ZF;
    goto $main$__0__$_zy4nZRRQ4202Be_0Qr3jw$__0, $main$__0__$_zy4nZRRQ4202Be_0Qr3jw$__1;
  $main$__1__$rmVyzzfSSQeYVjuxiNU3PA:
    assume {:captureState "$main$__1__$rmVyzzfSSQeYVjuxiNU3PA"} true;
    goto $main$__2__$nmt_XUHDT5eyVHAHshN3ww;
  $main$__2__$nmt_XUHDT5eyVHAHshN3ww:
    assume {:captureState "$main$__2__$nmt_XUHDT5eyVHAHshN3ww"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 8bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 8bv64), true);
    assume {:captureState "1928$0"} true;
    goto $main$__3__$LP5ka6yvSFWP2kjw23G57g;
  $main$__3__$LP5ka6yvSFWP2kjw23G57g:
    assume {:captureState "$main$__3__$LP5ka6yvSFWP2kjw23G57g"} true;
    $load17, Gamma_$load17 := memory_load32_le(stack, bvadd64(R31, 8bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 8bv64));
    R0, Gamma_R0 := zero_extend32_32($load17), Gamma_$load17;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_basil_return;
  $main$__0__$_zy4nZRRQ4202Be_0Qr3jw_goto_$main$__3__$LP5ka6yvSFWP2kjw23G57g:
    assume {:captureState "$main$__0__$_zy4nZRRQ4202Be_0Qr3jw_goto_$main$__3__$LP5ka6yvSFWP2kjw23G57g"} true;
    assume (R8[1:0] == 1bv1);
    goto $main$__3__$LP5ka6yvSFWP2kjw23G57g;
  $main$__0__$_zy4nZRRQ4202Be_0Qr3jw_goto_$main$__1__$rmVyzzfSSQeYVjuxiNU3PA:
    assume {:captureState "$main$__0__$_zy4nZRRQ4202Be_0Qr3jw_goto_$main$__1__$rmVyzzfSSQeYVjuxiNU3PA"} true;
    assume (!(R8[1:0] == 1bv1));
    goto $main$__1__$rmVyzzfSSQeYVjuxiNU3PA;
  $main$__0__$_zy4nZRRQ4202Be_0Qr3jw$__0:
    assume {:captureState "$main$__0__$_zy4nZRRQ4202Be_0Qr3jw$__0"} true;
    assume (!(ZF == 1bv1));
    R8, Gamma_R8 := 0bv64, true;
    assert Gamma_R8;
    goto $main$__0__$_zy4nZRRQ4202Be_0Qr3jw_goto_$main$__3__$LP5ka6yvSFWP2kjw23G57g, $main$__0__$_zy4nZRRQ4202Be_0Qr3jw_goto_$main$__1__$rmVyzzfSSQeYVjuxiNU3PA;
  $main$__0__$_zy4nZRRQ4202Be_0Qr3jw$__1:
    assume {:captureState "$main$__0__$_zy4nZRRQ4202Be_0Qr3jw$__1"} true;
    assume (!(!(ZF == 1bv1)));
    R8, Gamma_R8 := 1bv64, true;
    assert Gamma_R8;
    goto $main$__0__$_zy4nZRRQ4202Be_0Qr3jw_goto_$main$__3__$LP5ka6yvSFWP2kjw23G57g, $main$__0__$_zy4nZRRQ4202Be_0Qr3jw_goto_$main$__1__$rmVyzzfSSQeYVjuxiNU3PA;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

