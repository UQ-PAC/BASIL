var {:extern} Gamma_mem: [bv64]bool;
var {:extern} mem: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69684bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69688bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $z_addr) then true else (if (index == $x_addr) then (memory_load32_le(memory, $z_addr) == 0bv32) else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures ((old(memory_load32_le(mem, $z_addr)) != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
  free ensures (memory_load8_le(mem, 1860bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1861bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1862bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1863bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures ((old(memory_load32_le(mem, $z_addr)) != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert ((memory_load32_le(mem, $z_addr) != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

implementation {:extern} guarantee_reflexive()
{
  assert (memory_load32_le(mem, $z_addr) == memory_load32_le(mem, $z_addr));
}

procedure main(R8_in: bv64, Gamma_R8_in: bool, R9_in: bv64, Gamma_R9_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool);
  modifies Gamma_mem, mem;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load8_le(mem, 1860bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1861bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1862bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1863bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load8_le(mem, 1860bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1861bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1862bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1863bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main(R8_in: bv64, Gamma_R8_in: bool, R9_in: bv64, Gamma_R9_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool)
{
  var Gamma_R0_3: bool;
  var Gamma_R0_4: bool;
  var Gamma_R8_3: bool;
  var Gamma_R9_3: bool;
  var R0_3: bv64;
  var R0_4: bv64;
  var R8_3: bv64;
  var R9_3: bv64;
  $main$__0__$a~U4vJBkTaO8Xfm888rzkw:
    call rely();
    R8_3, Gamma_R8_3 := zero_extend32_32(memory_load32_le(mem, 69688bv64)), (gamma_load32(Gamma_mem, 69688bv64) || L(mem, 69688bv64));
    call rely();
    R9_3, Gamma_R9_3 := zero_extend32_32(memory_load32_le(mem, 69684bv64)), (gamma_load32(Gamma_mem, 69684bv64) || L(mem, 69684bv64));
    assert Gamma_R8_3;
    goto $main$__0__$a~U4vJBkTaO8Xfm888rzkw$__0, $main$__0__$a~U4vJBkTaO8Xfm888rzkw$__1;
  $main$__0__$a~U4vJBkTaO8Xfm888rzkw$__1:
    assume (!(R8_3[32:0] == 0bv32));
    R0_4, Gamma_R0_4 := 0bv64, true;
    goto main_basil_return;
  $main$__0__$a~U4vJBkTaO8Xfm888rzkw$__0:
    assume (R8_3[32:0] == 0bv32);
    R0_3, Gamma_R0_3 := zero_extend32_32(R9_3[32:0]), Gamma_R9_3;
    R0_4, Gamma_R0_4 := R0_3, Gamma_R0_3;
    goto main_basil_return;
  main_basil_return:
    R0_out, R8_out, R9_out := R0_4, R8_3, R9_3;
    Gamma_R0_out, Gamma_R8_out, Gamma_R9_out := Gamma_R0_4, Gamma_R8_3, Gamma_R9_3;
    return;
}

