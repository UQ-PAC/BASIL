00000c32: program
00000c1b: sub __cxa_finalize(__cxa_finalize_result)
00000c33: __cxa_finalize_result :: out u32 = low:32[R0]

000009bf:
00000ab7: R16 := 0x11000
00000abe: R17 := mem[R16 + 8, el]:u64
00000ac4: R16 := R16 + 8
00000ac9: call R17 with noreturn

00000c1c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c34: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008ac:
000008b0: #3 := R31 - 0x20
000008b6: mem := mem with [#3, el]:u64 <- R29
000008bc: mem := mem with [#3 + 8, el]:u64 <- R30
000008c0: R31 := #3
000008c6: R29 := R31
000008ce: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008d3: R19 := 0x11000
000008da: R0 := pad:64[mem[R19 + 0x30]]
000008e1: when 31:0[R0] <> 0 goto %000008df
00000c1d: goto %00000988

00000988:
0000098b: R0 := 0x10000
00000992: R0 := mem[R0 + 0xFC8, el]:u64
00000998: when R0 = 0 goto %00000996
00000c1e: goto %000009af

000009af:
000009b2: R0 := 0x11000
000009b9: R0 := mem[R0 + 0x28, el]:u64
000009be: R30 := 0x6F0
000009c1: call @__cxa_finalize with return %00000996

00000996:
0000099e: R30 := 0x6F4
000009a0: call @deregister_tm_clones with return %000009a2

000009a2:
000009a5: R0 := 1
000009ad: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000c1f: goto %000008df

000008df:
000008e9: R19 := mem[R31 + 0x10, el]:u64
000008f0: R29 := mem[R31, el]:u64
000008f5: R30 := mem[R31 + 8, el]:u64
000008f9: R31 := R31 + 0x20
000008fe: call R30 with noreturn

00000c20: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c35: __libc_start_main_main :: in u64 = R0
00000c36: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c37: __libc_start_main_arg3 :: in out u64 = R2
00000c38: __libc_start_main_auxv :: in out u64 = R3
00000c39: __libc_start_main_result :: out u32 = low:32[R0]

00000805:
00000aa1: R16 := 0x11000
00000aa8: R17 := mem[R16, el]:u64
00000aae: R16 := R16
00000ab3: call R17 with noreturn

00000c21: sub _fini(_fini_result)
00000c3a: _fini_result :: out u32 = low:32[R0]

0000063d:
00000643: #0 := R31 - 0x10
00000649: mem := mem with [#0, el]:u64 <- R29
0000064f: mem := mem with [#0 + 8, el]:u64 <- R30
00000653: R31 := #0
00000659: R29 := R31
00000660: R29 := mem[R31, el]:u64
00000665: R30 := mem[R31 + 8, el]:u64
00000669: R31 := R31 + 0x10
0000066e: call R30 with noreturn

00000c22: sub _init(_init_result)
00000c3b: _init_result :: out u32 = low:32[R0]

00000b6d:
00000b73: #6 := R31 - 0x10
00000b79: mem := mem with [#6, el]:u64 <- R29
00000b7f: mem := mem with [#6 + 8, el]:u64 <- R30
00000b83: R31 := #6
00000b89: R29 := R31
00000b8e: R30 := 0x590
00000b90: call @call_weak_fn with return %00000b92

00000b92:
00000b97: R29 := mem[R31, el]:u64
00000b9c: R30 := mem[R31 + 8, el]:u64
00000ba0: R31 := R31 + 0x10
00000ba5: call R30 with noreturn

00000c23: sub _start(_start_result)
00000c3c: _start_result :: out u32 = low:32[R0]

000007c6:
000007cb: R29 := 0
000007d0: R30 := 0
000007d6: R5 := R0
000007dd: R1 := mem[R31, el]:u64
000007e3: R2 := R31 + 8
000007e9: R6 := R31
000007ee: R0 := 0x10000
000007f5: R0 := mem[R0 + 0xFD8, el]:u64
000007fa: R3 := 0
000007ff: R4 := 0
00000804: R30 := 0x630
00000807: call @__libc_start_main with return %00000809

00000809:
0000080c: R30 := 0x634
0000080f: call @abort with return %00000c24

00000c24:
00000c25: call @call_weak_fn with noreturn

00000c26: sub abort()


0000080d:
00000ae3: R16 := 0x11000
00000aea: R17 := mem[R16 + 0x18, el]:u64
00000af0: R16 := R16 + 0x18
00000af5: call R17 with noreturn

00000c27: sub call_weak_fn(call_weak_fn_result)
00000c3d: call_weak_fn_result :: out u32 = low:32[R0]

00000811:
00000814: R0 := 0x10000
0000081b: R0 := mem[R0 + 0xFD0, el]:u64
00000821: when R0 = 0 goto %0000081f
00000c28: goto %000009ff

0000081f:
00000827: call R30 with noreturn

000009ff:
00000a02: goto @__gmon_start__

00000a00:
00000acd: R16 := 0x11000
00000ad4: R17 := mem[R16 + 0x10, el]:u64
00000ada: R16 := R16 + 0x10
00000adf: call R17 with noreturn

00000c29: sub deregister_tm_clones(deregister_tm_clones_result)
00000c3e: deregister_tm_clones_result :: out u32 = low:32[R0]

0000082d:
00000830: R0 := 0x11000
00000836: R0 := R0 + 0x30
0000083b: R1 := 0x11000
00000841: R1 := R1 + 0x30
00000847: #1 := ~R0
0000084c: #2 := R1 + ~R0
00000852: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000858: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000085c: ZF := #2 + 1 = 0
00000860: NF := 63:63[#2 + 1]
00000866: when ZF goto %00000864
00000c2a: goto %000009e1

000009e1:
000009e4: R1 := 0x10000
000009eb: R1 := mem[R1 + 0xFC0, el]:u64
000009f0: when R1 = 0 goto %00000864
00000c2b: goto %000009f4

00000864:
0000086c: call R30 with noreturn

000009f4:
000009f8: R16 := R1
000009fd: call R16 with noreturn

00000c2c: sub frame_dummy(frame_dummy_result)
00000c3f: frame_dummy_result :: out u32 = low:32[R0]

00000904:
00000906: call @register_tm_clones with noreturn

00000c2d: sub main(main_argc, main_argv, main_result)
00000c40: main_argc :: in u32 = low:32[R0]
00000c41: main_argv :: in out u64 = R1
00000c42: main_result :: out u32 = low:32[R0]

00000908:
0000090c: R31 := R31 - 0x10
00000913: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000918: R8 := 0x11000
0000091f: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000927: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000092c: R8 := 0x11000
00000933: R8 := pad:64[mem[R8 + 0x38, el]:u32]
00000939: #4 := 31:0[R8] - 1
0000093e: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000943: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000947: ZF := #4 + 1 = 0
0000094b: NF := 31:31[#4 + 1]
0000094f: R8 := pad:64[#4 + 1]
0000095b: when ZF <> 1 goto %00000954
0000095c: goto %00000957

00000957:
00000958: R8 := 1
0000095e: goto %0000095a

00000954:
00000955: R8 := 0
0000095d: goto %0000095a

0000095a:
00000964: when 0:0[R8] goto %00000962
00000c2e: goto %00000979

00000979:
0000097c: goto %0000097a

0000097a:
00000982: mem := mem with [R31 + 8, el]:u32 <- 0
00000986: goto %00000962

00000962:
0000096c: R0 := pad:64[mem[R31 + 8, el]:u32]
00000972: R31 := R31 + 0x10
00000977: call R30 with noreturn

00000c2f: sub register_tm_clones(register_tm_clones_result)
00000c43: register_tm_clones_result :: out u32 = low:32[R0]

0000086e:
00000871: R0 := 0x11000
00000877: R0 := R0 + 0x30
0000087c: R1 := 0x11000
00000882: R1 := R1 + 0x30
00000889: R1 := R1 + ~R0 + 1
0000088f: R2 := 0.63:63[R1]
00000896: R1 := R2 + (R1 ~>> 3)
0000089c: R1 := extend:64[63:1[R1]]
000008a2: when R1 = 0 goto %000008a0
00000c30: goto %000009c3

000009c3:
000009c6: R2 := 0x10000
000009cd: R2 := mem[R2 + 0xFE0, el]:u64
000009d2: when R2 = 0 goto %000008a0
00000c31: goto %000009d6

000008a0:
000008a8: call R30 with noreturn

000009d6:
000009da: R16 := R2
000009df: call R16 with noreturn
