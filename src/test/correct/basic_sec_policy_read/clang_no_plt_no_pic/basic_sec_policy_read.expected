var {:extern } Gamma_R0: bool;
var {:extern } Gamma_R31: bool;
var {:extern } Gamma_R8: bool;
var {:extern } Gamma_mem: [bv64]bool;
var {:extern } Gamma_stack: [bv64]bool;
var {:extern } R0: bv64;
var {:extern } R31: bv64;
var {:extern } R8: bv64;
var {:extern } mem: [bv64]bv8;
var {:extern } stack: [bv64]bv8;
const {:extern } $x_addr: bv64;
axiom ($x_addr == 69684bv64);
const {:extern } $z_addr: bv64;
axiom ($z_addr == 69688bv64);
function {:extern } L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $z_addr) then true else (if (index == $x_addr) then (memory_load32_le(memory, $z_addr) == 0bv32) else false))
}

function {:extern } {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern } {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern } {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern } {:bvbuiltin "bvcomp"} bvcomp1(bv1, bv1) returns (bv1);
function {:extern } {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern } {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern } {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern } gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern } gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern } memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern } memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern } memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern } {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern } {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern } {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern } rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures ((old(memory_load32_le(mem, $z_addr)) != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
  free ensures (memory_load8_le(mem, 1896bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1897bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1898bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1899bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69064bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69065bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69066bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69067bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69068bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69069bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69070bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69071bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69072bv64) == 192bv8);
  free ensures (memory_load8_le(mem, 69073bv64) == 6bv8);
  free ensures (memory_load8_le(mem, 69074bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69075bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69076bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69077bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69078bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69079bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69592bv64) == 20bv8);
  free ensures (memory_load8_le(mem, 69593bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69594bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69595bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69596bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69597bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69598bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69599bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69672bv64) == 40bv8);
  free ensures (memory_load8_le(mem, 69673bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69674bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69675bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69676bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69677bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69678bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69679bv64) == 0bv8);

procedure {:extern } rely_transitive()
  modifies Gamma_mem, mem;
  ensures ((old(memory_load32_le(mem, $z_addr)) != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
{
  call rely();
  call rely();
}

procedure {:extern } rely_reflexive()
{
  assert ((memory_load32_le(mem, $z_addr) != 0bv32) ==> (memory_load32_le(mem, $z_addr) != 0bv32));
}

procedure {:extern } guarantee_reflexive()
  modifies Gamma_mem, mem;
{
  assert (memory_load32_le(mem, $z_addr) == memory_load32_le(mem, $z_addr));
}

procedure main()
  modifies Gamma_R0, Gamma_R31, Gamma_R8, Gamma_mem, Gamma_stack, R0, R31, R8, mem, stack;
  free requires (memory_load8_le(mem, 69664bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69665bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69666bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69667bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69668bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69669bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69670bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69671bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69672bv64) == 40bv8);
  free requires (memory_load8_le(mem, 69673bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69674bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1896bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1897bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1898bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1899bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69064bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69065bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69066bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69067bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69068bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69069bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69070bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69071bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69072bv64) == 192bv8);
  free requires (memory_load8_le(mem, 69073bv64) == 6bv8);
  free requires (memory_load8_le(mem, 69074bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69075bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69076bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69077bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69078bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69079bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69592bv64) == 20bv8);
  free requires (memory_load8_le(mem, 69593bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69594bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69672bv64) == 40bv8);
  free requires (memory_load8_le(mem, 69673bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69674bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 1896bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1897bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1898bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1899bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69064bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69065bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69066bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69067bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69068bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69069bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69070bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69071bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69072bv64) == 192bv8);
  free ensures (memory_load8_le(mem, 69073bv64) == 6bv8);
  free ensures (memory_load8_le(mem, 69074bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69075bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69076bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69077bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69078bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69079bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69592bv64) == 20bv8);
  free ensures (memory_load8_le(mem, 69593bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69594bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69595bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69596bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69597bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69598bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69599bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69672bv64) == 40bv8);
  free ensures (memory_load8_le(mem, 69673bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69674bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69675bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69676bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69677bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69678bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69679bv64) == 0bv8);
{
  var #4: bv32;
  var CF: bv1;
  var Gamma_#4: bool;
  var Gamma_CF: bool;
  var Gamma_NF: bool;
  var Gamma_VF: bool;
  var Gamma_ZF: bool;
  var NF: bv1;
  var VF: bv1;
  var ZF: bv1;
  lmain:
    assume {:captureState "addr:lmain"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), true);
    assume {:captureState "%00000913"} true;
    R8, Gamma_R8 := 69632bv64, true;
    call rely();
    R8, Gamma_R8 := zero_extend32_32(memory_load32_le(mem, bvadd64(R8, 52bv64))), (gamma_load32(Gamma_mem, bvadd64(R8, 52bv64)) || L(mem, bvadd64(R8, 52bv64)));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 8bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R8);
    assume {:captureState "%00000927"} true;
    R8, Gamma_R8 := 69632bv64, true;
    call rely();
    R8, Gamma_R8 := zero_extend32_32(memory_load32_le(mem, bvadd64(R8, 56bv64))), (gamma_load32(Gamma_mem, bvadd64(R8, 56bv64)) || L(mem, bvadd64(R8, 56bv64)));
    #4, Gamma_#4 := bvadd32(R8[32:0], 4294967295bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(bvadd32(#4, 1bv32)), bvadd33(sign_extend1_32(R8[32:0]), 0bv33))), (Gamma_R8 && Gamma_#4);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(bvadd32(#4, 1bv32)), bvadd33(zero_extend1_32(R8[32:0]), 4294967296bv33))), (Gamma_R8 && Gamma_#4);
    ZF, Gamma_ZF := bvcomp32(bvadd32(#4, 1bv32), 0bv32), Gamma_#4;
    NF, Gamma_NF := bvadd32(#4, 1bv32)[32:31], Gamma_#4;
    R8, Gamma_R8 := zero_extend32_32(bvadd32(#4, 1bv32)), Gamma_#4;
    assert Gamma_ZF;
    if ((bvnot1(bvcomp1(ZF, 1bv1)) != 0bv1)) {
      goto l00000954;
    }
    goto l00000957;
  l00000957:
    R8, Gamma_R8 := 1bv64, true;
    goto l0000095a;
  l00000954:
    R8, Gamma_R8 := 0bv64, true;
    goto l0000095a;
  l0000095a:
    assert Gamma_R8;
    if ((bvcomp1(R8[1:0], 1bv1) != 0bv1)) {
      goto l00000962;
    }
    goto l00000979;
  l00000979:
    assume {:captureState "addr:l00000979"} true;
    goto l0000097a;
  l0000097a:
    assume {:captureState "addr:l0000097a"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 8bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31, 8bv64), true);
    assume {:captureState "%00000982"} true;
    goto l00000962;
  l00000962:
    assume {:captureState "addr:l00000962"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 8bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    return;
}
