00000d71: program
00000d59: sub __cxa_finalize(__cxa_finalize_result)
00000d72: __cxa_finalize_result :: out u32 = low:32[R0]

00000ae5:
00000bdd: R16 := 0x20000
00000be4: R17 := mem[R16 + 8, el]:u64
00000bea: R16 := R16 + 8
00000bef: call R17 with noreturn

00000d5a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000d73: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000983:
00000987: #3 := R31 - 0x20
0000098d: mem := mem with [#3, el]:u64 <- R29
00000993: mem := mem with [#3 + 8, el]:u64 <- R30
00000997: R31 := #3
0000099d: R29 := R31
000009a5: mem := mem with [R31 + 0x10, el]:u64 <- R19
000009aa: R19 := 0x20000
000009b1: R0 := pad:64[mem[R19 + 0x30]]
000009b7: when 0:0[R0] goto %000009b5
00000d5b: goto %00000aae

00000aae:
00000ab1: R0 := 0x1F000
00000ab8: R0 := mem[R0 + 0xFC8, el]:u64
00000abe: when R0 = 0 goto %00000abc
00000d5c: goto %00000ad5

00000ad5:
00000ad8: R0 := 0x20000
00000adf: R0 := mem[R0 + 0x28, el]:u64
00000ae4: R30 := 0x6FC
00000ae7: call @__cxa_finalize with return %00000abc

00000abc:
00000ac4: R30 := 0x700
00000ac6: call @deregister_tm_clones with return %00000ac8

00000ac8:
00000acb: R0 := 1
00000ad3: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000d5d: goto %000009b5

000009b5:
000009bf: R19 := mem[R31 + 0x10, el]:u64
000009c6: R29 := mem[R31, el]:u64
000009cb: R30 := mem[R31 + 8, el]:u64
000009cf: R31 := R31 + 0x20
000009d4: call R30 with noreturn

00000d5e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000d74: __libc_start_main_main :: in u64 = R0
00000d75: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000d76: __libc_start_main_arg3 :: in out u64 = R2
00000d77: __libc_start_main_auxv :: in out u64 = R3
00000d78: __libc_start_main_result :: out u32 = low:32[R0]

000008d6:
00000bc7: R16 := 0x20000
00000bce: R17 := mem[R16, el]:u64
00000bd4: R16 := R16
00000bd9: call R17 with noreturn

00000d5f: sub _fini(_fini_result)
00000d79: _fini_result :: out u32 = low:32[R0]

000006de:
000006e4: #0 := R31 - 0x10
000006ea: mem := mem with [#0, el]:u64 <- R29
000006f0: mem := mem with [#0 + 8, el]:u64 <- R30
000006f4: R31 := #0
000006fa: R29 := R31
00000701: R29 := mem[R31, el]:u64
00000706: R30 := mem[R31 + 8, el]:u64
0000070a: R31 := R31 + 0x10
0000070f: call R30 with noreturn

00000d60: sub _init(_init_result)
00000d7a: _init_result :: out u32 = low:32[R0]

00000c9f:
00000ca5: #7 := R31 - 0x10
00000cab: mem := mem with [#7, el]:u64 <- R29
00000cb1: mem := mem with [#7 + 8, el]:u64 <- R30
00000cb5: R31 := #7
00000cbb: R29 := R31
00000cc0: R30 := 0x590
00000cc2: call @call_weak_fn with return %00000cc4

00000cc4:
00000cc9: R29 := mem[R31, el]:u64
00000cce: R30 := mem[R31 + 8, el]:u64
00000cd2: R31 := R31 + 0x10
00000cd7: call R30 with noreturn

00000d61: sub _start(_start_result)
00000d7b: _start_result :: out u32 = low:32[R0]

00000897:
0000089c: R29 := 0
000008a1: R30 := 0
000008a7: R5 := R0
000008ae: R1 := mem[R31, el]:u64
000008b4: R2 := R31 + 8
000008ba: R6 := R31
000008bf: R0 := 0x1F000
000008c6: R0 := mem[R0 + 0xFD8, el]:u64
000008cb: R3 := 0
000008d0: R4 := 0
000008d5: R30 := 0x630
000008d8: call @__libc_start_main with return %000008da

000008da:
000008dd: R30 := 0x634
000008e0: call @abort with return %00000d62

00000d62:
00000d63: call @call_weak_fn with noreturn

00000d64: sub abort()


000008de:
00000c09: R16 := 0x20000
00000c10: R17 := mem[R16 + 0x18, el]:u64
00000c16: R16 := R16 + 0x18
00000c1b: call R17 with noreturn

00000d65: sub call_weak_fn(call_weak_fn_result)
00000d7c: call_weak_fn_result :: out u32 = low:32[R0]

000008e2:
000008e5: R0 := 0x1F000
000008ec: R0 := mem[R0 + 0xFD0, el]:u64
000008f2: when R0 = 0 goto %000008f0
00000d66: goto %00000b25

000008f0:
000008f8: call R30 with noreturn

00000b25:
00000b28: goto @__gmon_start__

00000b26:
00000bf3: R16 := 0x20000
00000bfa: R17 := mem[R16 + 0x10, el]:u64
00000c00: R16 := R16 + 0x10
00000c05: call R17 with noreturn

00000d67: sub deregister_tm_clones(deregister_tm_clones_result)
00000d7d: deregister_tm_clones_result :: out u32 = low:32[R0]

00000906:
00000909: R0 := 0x20000
0000090f: R0 := R0 + 0x30
00000914: R1 := 0x20000
0000091a: R1 := R1 + 0x30
00000920: #1 := ~R0
00000925: #2 := R1 + ~R0
0000092b: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000931: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000935: ZF := #2 + 1 = 0
00000939: NF := 63:63[#2 + 1]
0000093f: when ZF goto %0000093d
00000d68: goto %00000b07

00000b07:
00000b0a: R1 := 0x1F000
00000b11: R1 := mem[R1 + 0xFC0, el]:u64
00000b16: when R1 = 0 goto %0000093d
00000d69: goto %00000b1a

0000093d:
00000945: call R30 with noreturn

00000b1a:
00000b1e: R16 := R1
00000b23: call R16 with noreturn

00000d6a: sub f(f_result)
00000d7e: f_result :: out u32 = low:32[R0]

00000a16:
00000a1a: #4 := R31 - 0x20
00000a20: mem := mem with [#4, el]:u64 <- R29
00000a26: mem := mem with [#4 + 8, el]:u64 <- R30
00000a2a: R31 := #4
00000a30: R29 := R31
00000a38: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000a3f: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
00000a46: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000a4b: R30 := 0x75C
00000a4d: call @g with return %00000a4f

00000a4f:
00000a54: R29 := mem[R31, el]:u64
00000a59: R30 := mem[R31 + 8, el]:u64
00000a5d: R31 := R31 + 0x20
00000a62: call R30 with noreturn

00000d6b: sub frame_dummy(frame_dummy_result)
00000d7f: frame_dummy_result :: out u32 = low:32[R0]

000009dc:
000009de: call @register_tm_clones with noreturn

00000d6c: sub g(g_result)
00000d80: g_result :: out u32 = low:32[R0]

000009e0:
000009e4: R31 := R31 - 0x10
000009ec: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000009f4: mem := mem with [R31 + 8, el]:u32 <- 31:0[R1]
000009fb: R1 := pad:64[mem[R31 + 0xC, el]:u32]
00000a02: R0 := pad:64[mem[R31 + 8, el]:u32]
00000a09: R0 := pad:64[31:0[R1] + 31:0[R0]]
00000a0f: R31 := R31 + 0x10
00000a14: call R30 with noreturn

00000d6d: sub main(main_argc, main_argv, main_result)
00000d81: main_argc :: in u32 = low:32[R0]
00000d82: main_argv :: in out u64 = R1
00000d83: main_result :: out u32 = low:32[R0]

00000a64:
00000a68: #5 := R31 - 0x10
00000a6e: mem := mem with [#5, el]:u64 <- R29
00000a74: mem := mem with [#5 + 8, el]:u64 <- R30
00000a78: R31 := #5
00000a7e: R29 := R31
00000a83: R0 := 0x20000
00000a89: R0 := R0 + 0x34
00000a90: R0 := pad:64[mem[R0, el]:u32]
00000a95: R30 := 0x77C
00000a97: call @f with return %00000a99

00000a99:
00000a9e: R29 := mem[R31, el]:u64
00000aa3: R30 := mem[R31 + 8, el]:u64
00000aa7: R31 := R31 + 0x10
00000aac: call R30 with noreturn

00000d6e: sub register_tm_clones(register_tm_clones_result)
00000d84: register_tm_clones_result :: out u32 = low:32[R0]

00000947:
0000094a: R0 := 0x20000
00000950: R0 := R0 + 0x30
00000955: R1 := 0x20000
0000095b: R1 := R1 + 0x30
00000962: R1 := R1 + ~R0 + 1
00000968: R2 := 0.63:63[R1]
0000096f: R1 := R2 + (R1 ~>> 3)
00000975: R1 := extend:64[63:1[R1]]
0000097b: when R1 = 0 goto %00000979
00000d6f: goto %00000ae9

00000ae9:
00000aec: R2 := 0x1F000
00000af3: R2 := mem[R2 + 0xFE0, el]:u64
00000af8: when R2 = 0 goto %00000979
00000d70: goto %00000afc

00000979:
00000981: call R30 with noreturn

00000afc:
00000b00: R16 := R2
00000b05: call R16 with noreturn
