00000c63: program
00000c4c: sub __cxa_finalize(__cxa_finalize_result)
00000c64: __cxa_finalize_result :: out u32 = low:32[R0]

000009ec:
00000ae4: R16 := 0x10000
00000aeb: R17 := mem[R16 + 0xFB8, el]:u64
00000af1: R16 := R16 + 0xFB8
00000af6: call R17 with noreturn

00000c4d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c65: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008cd:
000008d1: #3 := R31 - 0x20
000008d7: mem := mem with [#3, el]:u64 <- R29
000008dd: mem := mem with [#3 + 8, el]:u64 <- R30
000008e1: R31 := #3
000008e7: R29 := R31
000008ef: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008f4: R19 := 0x11000
000008fb: R0 := pad:64[mem[R19 + 0x10]]
00000902: when 31:0[R0] <> 0 goto %00000900
00000c4e: goto %000009b5

000009b5:
000009b8: R0 := 0x10000
000009bf: R0 := mem[R0 + 0xFE0, el]:u64
000009c5: when R0 = 0 goto %000009c3
00000c4f: goto %000009dc

000009dc:
000009df: R0 := 0x11000
000009e6: R0 := mem[R0 + 8, el]:u64
000009eb: R30 := 0x6F0
000009ee: call @__cxa_finalize with return %000009c3

000009c3:
000009cb: R30 := 0x6F4
000009cd: call @deregister_tm_clones with return %000009cf

000009cf:
000009d2: R0 := 1
000009da: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000c50: goto %00000900

00000900:
0000090a: R19 := mem[R31 + 0x10, el]:u64
00000911: R29 := mem[R31, el]:u64
00000916: R30 := mem[R31 + 8, el]:u64
0000091a: R31 := R31 + 0x20
0000091f: call R30 with noreturn

00000c51: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c66: __libc_start_main_main :: in u64 = R0
00000c67: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c68: __libc_start_main_arg3 :: in out u64 = R2
00000c69: __libc_start_main_auxv :: in out u64 = R3
00000c6a: __libc_start_main_result :: out u32 = low:32[R0]

00000826:
00000ace: R16 := 0x10000
00000ad5: R17 := mem[R16 + 0xFB0, el]:u64
00000adb: R16 := R16 + 0xFB0
00000ae0: call R17 with noreturn

00000c52: sub _fini(_fini_result)
00000c6b: _fini_result :: out u32 = low:32[R0]

00000656:
0000065c: #0 := R31 - 0x10
00000662: mem := mem with [#0, el]:u64 <- R29
00000668: mem := mem with [#0 + 8, el]:u64 <- R30
0000066c: R31 := #0
00000672: R29 := R31
00000679: R29 := mem[R31, el]:u64
0000067e: R30 := mem[R31 + 8, el]:u64
00000682: R31 := R31 + 0x10
00000687: call R30 with noreturn

00000c53: sub _init(_init_result)
00000c6c: _init_result :: out u32 = low:32[R0]

00000b9c:
00000ba2: #6 := R31 - 0x10
00000ba8: mem := mem with [#6, el]:u64 <- R29
00000bae: mem := mem with [#6 + 8, el]:u64 <- R30
00000bb2: R31 := #6
00000bb8: R29 := R31
00000bbd: R30 := 0x590
00000bbf: call @call_weak_fn with return %00000bc1

00000bc1:
00000bc6: R29 := mem[R31, el]:u64
00000bcb: R30 := mem[R31 + 8, el]:u64
00000bcf: R31 := R31 + 0x10
00000bd4: call R30 with noreturn

00000c54: sub _start(_start_result)
00000c6d: _start_result :: out u32 = low:32[R0]

000007e7:
000007ec: R29 := 0
000007f1: R30 := 0
000007f7: R5 := R0
000007fe: R1 := mem[R31, el]:u64
00000804: R2 := R31 + 8
0000080a: R6 := R31
0000080f: R0 := 0x10000
00000816: R0 := mem[R0 + 0xFF0, el]:u64
0000081b: R3 := 0
00000820: R4 := 0
00000825: R30 := 0x630
00000828: call @__libc_start_main with return %0000082a

0000082a:
0000082d: R30 := 0x634
00000830: call @abort with return %00000c55

00000c55:
00000c56: call @call_weak_fn with noreturn

00000c57: sub abort()


0000082e:
00000b10: R16 := 0x10000
00000b17: R17 := mem[R16 + 0xFC8, el]:u64
00000b1d: R16 := R16 + 0xFC8
00000b22: call R17 with noreturn

00000c58: sub call_weak_fn(call_weak_fn_result)
00000c6e: call_weak_fn_result :: out u32 = low:32[R0]

00000832:
00000835: R0 := 0x10000
0000083c: R0 := mem[R0 + 0xFE8, el]:u64
00000842: when R0 = 0 goto %00000840
00000c59: goto %00000a2c

00000840:
00000848: call R30 with noreturn

00000a2c:
00000a2f: goto @__gmon_start__

00000a2d:
00000afa: R16 := 0x10000
00000b01: R17 := mem[R16 + 0xFC0, el]:u64
00000b07: R16 := R16 + 0xFC0
00000b0c: call R17 with noreturn

00000c5a: sub deregister_tm_clones(deregister_tm_clones_result)
00000c6f: deregister_tm_clones_result :: out u32 = low:32[R0]

0000084e:
00000851: R0 := 0x11000
00000857: R0 := R0 + 0x10
0000085c: R1 := 0x11000
00000862: R1 := R1 + 0x10
00000868: #1 := ~R0
0000086d: #2 := R1 + ~R0
00000873: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000879: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000087d: ZF := #2 + 1 = 0
00000881: NF := 63:63[#2 + 1]
00000887: when ZF goto %00000885
00000c5b: goto %00000a0e

00000a0e:
00000a11: R1 := 0x10000
00000a18: R1 := mem[R1 + 0xFD8, el]:u64
00000a1d: when R1 = 0 goto %00000885
00000c5c: goto %00000a21

00000885:
0000088d: call R30 with noreturn

00000a21:
00000a25: R16 := R1
00000a2a: call R16 with noreturn

00000c5d: sub frame_dummy(frame_dummy_result)
00000c70: frame_dummy_result :: out u32 = low:32[R0]

00000925:
00000927: call @register_tm_clones with noreturn

00000c5e: sub main(main_argc, main_argv, main_result)
00000c71: main_argc :: in u32 = low:32[R0]
00000c72: main_argv :: in out u64 = R1
00000c73: main_result :: out u32 = low:32[R0]

00000929:
0000092d: #4 := R31 - 0x20
00000933: mem := mem with [#4, el]:u64 <- R29
00000939: mem := mem with [#4 + 8, el]:u64 <- R30
0000093d: R31 := #4
00000943: R29 := R31
00000948: R0 := 1
00000950: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
00000955: R0 := 2
0000095d: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000964: R0 := pad:64[mem[R31 + 0x18, el]:u32]
00000969: R30 := 0x734
0000096c: call @plus_one with return %00000993

00000993:
00000999: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
0000099e: R0 := 0
000009a5: R29 := mem[R31, el]:u64
000009aa: R30 := mem[R31 + 8, el]:u64
000009ae: R31 := R31 + 0x20
000009b3: call R30 with noreturn

00000c5f: sub plus_one(plus_one_result)
00000c74: plus_one_result :: out u32 = low:32[R0]

0000096a:
00000971: R31 := R31 - 0x10
00000979: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000980: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000986: R0 := pad:64[31:0[R0] + 1]
0000098c: R31 := R31 + 0x10
00000991: call R30 with noreturn

00000c60: sub register_tm_clones(register_tm_clones_result)
00000c75: register_tm_clones_result :: out u32 = low:32[R0]

0000088f:
00000892: R0 := 0x11000
00000898: R0 := R0 + 0x10
0000089d: R1 := 0x11000
000008a3: R1 := R1 + 0x10
000008aa: R1 := R1 + ~R0 + 1
000008b0: R2 := 0.63:63[R1]
000008b7: R1 := R2 + (R1 ~>> 3)
000008bd: R1 := extend:64[63:1[R1]]
000008c3: when R1 = 0 goto %000008c1
00000c61: goto %000009f0

000009f0:
000009f3: R2 := 0x10000
000009fa: R2 := mem[R2 + 0xFF8, el]:u64
000009ff: when R2 = 0 goto %000008c1
00000c62: goto %00000a03

000008c1:
000008c9: call R30 with noreturn

00000a03:
00000a07: R16 := R2
00000a0c: call R16 with noreturn
