0000065d: program
00000629: sub __cxa_finalize(__cxa_finalize_result)
0000065e: __cxa_finalize_result :: out u32 = low:32[R0]

000003c5:
000004bd: R16 := 0x11000
000004c4: R17 := mem[R16 + 8, el]:u64
000004ca: R16 := R16 + 8
000004cf: call R17 with noreturn

0000062a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000065f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029e:
000002a2: #3 := R31 - 0x20
000002a8: mem := mem with [#3, el]:u64 <- R29
000002ae: mem := mem with [#3 + 8, el]:u64 <- R30
000002b2: R31 := #3
000002b8: R29 := R31
000002c0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c5: R19 := 0x11000
000002cc: R0 := pad:64[mem[R19 + 0x30]]
000002d3: when 31:0[R0] <> 0 goto %000002d1
00000653: goto %0000038e

0000038e:
00000391: R0 := 0x10000
00000398: R0 := mem[R0 + 0xFC8, el]:u64
0000039e: when R0 = 0 goto %0000039c
00000654: goto %000003b5

000003b5:
000003b8: R0 := 0x11000
000003bf: R0 := mem[R0 + 0x28, el]:u64
000003c4: R30 := 0x6F0
000003c7: call @__cxa_finalize with return %0000039c

0000039c:
000003a4: R30 := 0x6F4
000003a6: call @deregister_tm_clones with return %000003a8

000003a8:
000003ab: R0 := 1
000003b3: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000655: goto %000002d1

000002d1:
000002db: R19 := mem[R31 + 0x10, el]:u64
000002e2: R29 := mem[R31, el]:u64
000002e7: R30 := mem[R31 + 8, el]:u64
000002eb: R31 := R31 + 0x20
000002f0: call R30 with noreturn

0000062e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000660: __libc_start_main_main :: in u64 = R0
00000661: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000662: __libc_start_main_arg3 :: in out u64 = R2
00000663: __libc_start_main_auxv :: in out u64 = R3
00000664: __libc_start_main_result :: out u32 = low:32[R0]

000001f7:
000004a7: R16 := 0x11000
000004ae: R17 := mem[R16, el]:u64
000004b4: R16 := R16
000004b9: call R17 with noreturn

0000062f: sub _fini(_fini_result)
00000665: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000630: sub _init(_init_result)
00000666: _init_result :: out u32 = low:32[R0]

00000577:
0000057d: #7 := R31 - 0x10
00000583: mem := mem with [#7, el]:u64 <- R29
00000589: mem := mem with [#7 + 8, el]:u64 <- R30
0000058d: R31 := #7
00000593: R29 := R31
00000598: R30 := 0x590
0000059a: call @call_weak_fn with return %0000059c

0000059c:
000005a1: R29 := mem[R31, el]:u64
000005a6: R30 := mem[R31 + 8, el]:u64
000005aa: R31 := R31 + 0x10
000005af: call R30 with noreturn

00000631: sub _start(_start_result)
00000667: _start_result :: out u32 = low:32[R0]

000001b8:
000001bd: R29 := 0
000001c2: R30 := 0
000001c8: R5 := R0
000001cf: R1 := mem[R31, el]:u64
000001d5: R2 := R31 + 8
000001db: R6 := R31
000001e0: R0 := 0x10000
000001e7: R0 := mem[R0 + 0xFD8, el]:u64
000001ec: R3 := 0
000001f1: R4 := 0
000001f6: R30 := 0x630
000001f9: call @__libc_start_main with return %000001fb

000001fb:
000001fe: R30 := 0x634
00000201: call @abort with return %00000656

00000656:
00000657: call @call_weak_fn with noreturn

00000634: sub abort()


000001ff:
000004e9: R16 := 0x11000
000004f0: R17 := mem[R16 + 0x18, el]:u64
000004f6: R16 := R16 + 0x18
000004fb: call R17 with noreturn

00000635: sub call_weak_fn(call_weak_fn_result)
00000668: call_weak_fn_result :: out u32 = low:32[R0]

00000203:
00000206: R0 := 0x10000
0000020d: R0 := mem[R0 + 0xFD0, el]:u64
00000213: when R0 = 0 goto %00000211
00000658: goto %00000405

00000211:
00000219: call R30 with noreturn

00000405:
00000408: goto @__gmon_start__

00000406:
000004d3: R16 := 0x11000
000004da: R17 := mem[R16 + 0x10, el]:u64
000004e0: R16 := R16 + 0x10
000004e5: call R17 with noreturn

00000637: sub deregister_tm_clones(deregister_tm_clones_result)
00000669: deregister_tm_clones_result :: out u32 = low:32[R0]

0000021f:
00000222: R0 := 0x11000
00000228: R0 := R0 + 0x30
0000022d: R1 := 0x11000
00000233: R1 := R1 + 0x30
00000239: #1 := ~R0
0000023e: #2 := R1 + ~R0
00000244: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024e: ZF := #2 + 1 = 0
00000252: NF := 63:63[#2 + 1]
00000258: when ZF goto %00000256
00000659: goto %000003e7

000003e7:
000003ea: R1 := 0x10000
000003f1: R1 := mem[R1 + 0xFC0, el]:u64
000003f6: when R1 = 0 goto %00000256
0000065a: goto %000003fa

00000256:
0000025e: call R30 with noreturn

000003fa:
000003fe: R16 := R1
00000403: call R16 with noreturn

0000063a: sub frame_dummy(frame_dummy_result)
0000066a: frame_dummy_result :: out u32 = low:32[R0]

000002f6:
000002f8: call @register_tm_clones with noreturn

0000063b: sub main(main_argc, main_argv, main_result)
0000066b: main_argc :: in u32 = low:32[R0]
0000066c: main_argv :: in out u64 = R1
0000066d: main_result :: out u32 = low:32[R0]

000002fa:
000002fe: R31 := R31 - 0x20
00000304: #4 := R31 + 0x10
0000030a: mem := mem with [#4, el]:u64 <- R29
00000310: mem := mem with [#4 + 8, el]:u64 <- R30
00000316: R29 := R31 + 0x10
0000031b: R8 := 1
00000323: mem := mem with [R29 - 4, el]:u32 <- 31:0[R8]
00000328: R8 := 2
00000330: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000337: R0 := pad:64[mem[R29 - 4, el]:u32]
0000033c: R30 := 0x738
0000033f: call @plus_one with return %00000366

00000366:
0000036c: mem := mem with [R29 - 4, el]:u32 <- 31:0[R0]
00000371: R0 := 0
00000377: #5 := R31 + 0x10
0000037c: R29 := mem[#5, el]:u64
00000381: R30 := mem[#5 + 8, el]:u64
00000387: R31 := R31 + 0x20
0000038c: call R30 with noreturn

0000063c: sub plus_one(plus_one_result)
0000066e: plus_one_result :: out u32 = low:32[R0]

0000033d:
00000344: R31 := R31 - 0x10
0000034c: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000353: R8 := pad:64[mem[R31 + 0xC, el]:u32]
00000359: R0 := pad:64[31:0[R8] + 1]
0000035f: R31 := R31 + 0x10
00000364: call R30 with noreturn

0000063d: sub register_tm_clones(register_tm_clones_result)
0000066f: register_tm_clones_result :: out u32 = low:32[R0]

00000260:
00000263: R0 := 0x11000
00000269: R0 := R0 + 0x30
0000026e: R1 := 0x11000
00000274: R1 := R1 + 0x30
0000027b: R1 := R1 + ~R0 + 1
00000281: R2 := 0.63:63[R1]
00000288: R1 := R2 + (R1 ~>> 3)
0000028e: R1 := extend:64[63:1[R1]]
00000294: when R1 = 0 goto %00000292
0000065b: goto %000003c9

000003c9:
000003cc: R2 := 0x10000
000003d3: R2 := mem[R2 + 0xFE0, el]:u64
000003d8: when R2 = 0 goto %00000292
0000065c: goto %000003dc

00000292:
0000029a: call R30 with noreturn

000003dc:
000003e0: R16 := R2
000003e5: call R16 with noreturn
