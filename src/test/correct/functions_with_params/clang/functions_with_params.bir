000005fd: program
000005c9: sub __cxa_finalize(__cxa_finalize_result)
000005fe: __cxa_finalize_result :: out u32 = low:32[R0]

000003c5:
000004bd: R16 := 0x20000
000004c4: R17 := mem[R16 + 8, el]:u64
000004ca: R16 := R16 + 8
000004cf: call R17 with noreturn

000005ca: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005ff: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029f:
000002a3: #3 := R31 - 0x20
000002a9: mem := mem with [#3, el]:u64 <- R29
000002af: mem := mem with [#3 + 8, el]:u64 <- R30
000002b3: R31 := #3
000002b9: R29 := R31
000002c1: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c6: R19 := 0x20000
000002cd: R0 := pad:64[mem[R19 + 0x30]]
000002d3: when 0:0[R0] goto %000002d1
000005f3: goto %0000038e

0000038e:
00000391: R0 := 0x1F000
00000398: R0 := mem[R0 + 0xFC8, el]:u64
0000039e: when R0 = 0 goto %0000039c
000005f4: goto %000003b5

000003b5:
000003b8: R0 := 0x20000
000003bf: R0 := mem[R0 + 0x28, el]:u64
000003c4: R30 := 0x730
000003c7: call @__cxa_finalize with return %0000039c

0000039c:
000003a4: R30 := 0x734
000003a6: call @deregister_tm_clones with return %000003a8

000003a8:
000003ab: R0 := 1
000003b3: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005f5: goto %000002d1

000002d1:
000002db: R19 := mem[R31 + 0x10, el]:u64
000002e2: R29 := mem[R31, el]:u64
000002e7: R30 := mem[R31 + 8, el]:u64
000002eb: R31 := R31 + 0x20
000002f0: call R30 with noreturn

000005ce: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000600: __libc_start_main_main :: in u64 = R0
00000601: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000602: __libc_start_main_arg3 :: in out u64 = R2
00000603: __libc_start_main_auxv :: in out u64 = R3
00000604: __libc_start_main_result :: out u32 = low:32[R0]

000001f8:
000004a7: R16 := 0x20000
000004ae: R17 := mem[R16, el]:u64
000004b4: R16 := R16
000004b9: call R17 with noreturn

000005cf: sub _fini(_fini_result)
00000605: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005d0: sub _init(_init_result)
00000606: _init_result :: out u32 = low:32[R0]

00000517:
0000051d: #7 := R31 - 0x10
00000523: mem := mem with [#7, el]:u64 <- R29
00000529: mem := mem with [#7 + 8, el]:u64 <- R30
0000052d: R31 := #7
00000533: R29 := R31
00000538: R30 := 0x5C8
0000053a: call @call_weak_fn with return %0000053c

0000053c:
00000541: R29 := mem[R31, el]:u64
00000546: R30 := mem[R31 + 8, el]:u64
0000054a: R31 := R31 + 0x10
0000054f: call R30 with noreturn

000005d1: sub _start(_start_result)
00000607: _start_result :: out u32 = low:32[R0]

000001b9:
000001be: R29 := 0
000001c3: R30 := 0
000001c9: R5 := R0
000001d0: R1 := mem[R31, el]:u64
000001d6: R2 := R31 + 8
000001dc: R6 := R31
000001e1: R0 := 0x1F000
000001e8: R0 := mem[R0 + 0xFD8, el]:u64
000001ed: R3 := 0
000001f2: R4 := 0
000001f7: R30 := 0x670
000001fa: call @__libc_start_main with return %000001fc

000001fc:
000001ff: R30 := 0x674
00000202: call @abort with return %000005f6

000005f6:
000005f7: call @call_weak_fn with noreturn

000005d4: sub abort()


00000200:
000004e9: R16 := 0x20000
000004f0: R17 := mem[R16 + 0x18, el]:u64
000004f6: R16 := R16 + 0x18
000004fb: call R17 with noreturn

000005d5: sub call_weak_fn(call_weak_fn_result)
00000608: call_weak_fn_result :: out u32 = low:32[R0]

00000204:
00000207: R0 := 0x1F000
0000020e: R0 := mem[R0 + 0xFD0, el]:u64
00000214: when R0 = 0 goto %00000212
000005f8: goto %00000405

00000212:
0000021a: call R30 with noreturn

00000405:
00000408: goto @__gmon_start__

00000406:
000004d3: R16 := 0x20000
000004da: R17 := mem[R16 + 0x10, el]:u64
000004e0: R16 := R16 + 0x10
000004e5: call R17 with noreturn

000005d7: sub deregister_tm_clones(deregister_tm_clones_result)
00000609: deregister_tm_clones_result :: out u32 = low:32[R0]

00000220:
00000223: R0 := 0x20000
00000229: R0 := R0 + 0x30
0000022e: R1 := 0x20000
00000234: R1 := R1 + 0x30
0000023a: #1 := ~R0
0000023f: #2 := R1 + ~R0
00000245: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024f: ZF := #2 + 1 = 0
00000253: NF := 63:63[#2 + 1]
00000259: when ZF goto %00000257
000005f9: goto %000003e7

000003e7:
000003ea: R1 := 0x1F000
000003f1: R1 := mem[R1 + 0xFC0, el]:u64
000003f6: when R1 = 0 goto %00000257
000005fa: goto %000003fa

00000257:
0000025f: call R30 with noreturn

000003fa:
000003fe: R16 := R1
00000403: call R16 with noreturn

000005da: sub frame_dummy(frame_dummy_result)
0000060a: frame_dummy_result :: out u32 = low:32[R0]

000002f6:
000002f8: call @register_tm_clones with noreturn

000005db: sub main(main_argc, main_argv, main_result)
0000060b: main_argc :: in u32 = low:32[R0]
0000060c: main_argv :: in out u64 = R1
0000060d: main_result :: out u32 = low:32[R0]

000002fa:
000002fe: R31 := R31 - 0x20
00000304: #4 := R31 + 0x10
0000030a: mem := mem with [#4, el]:u64 <- R29
00000310: mem := mem with [#4 + 8, el]:u64 <- R30
00000316: R29 := R31 + 0x10
0000031b: R8 := 1
00000323: mem := mem with [R29 - 4, el]:u32 <- 31:0[R8]
00000328: R8 := 2
00000330: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000337: R0 := pad:64[mem[R29 - 4, el]:u32]
0000033c: R30 := 0x778
0000033f: call @plus_one with return %00000366

00000366:
0000036c: mem := mem with [R29 - 4, el]:u32 <- 31:0[R0]
00000371: R0 := 0
00000377: #5 := R31 + 0x10
0000037c: R29 := mem[#5, el]:u64
00000381: R30 := mem[#5 + 8, el]:u64
00000387: R31 := R31 + 0x20
0000038c: call R30 with noreturn

000005dc: sub plus_one(plus_one_result)
0000060e: plus_one_result :: out u32 = low:32[R0]

0000033d:
00000344: R31 := R31 - 0x10
0000034c: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000353: R8 := pad:64[mem[R31 + 0xC, el]:u32]
00000359: R0 := pad:64[31:0[R8] + 1]
0000035f: R31 := R31 + 0x10
00000364: call R30 with noreturn

000005dd: sub register_tm_clones(register_tm_clones_result)
0000060f: register_tm_clones_result :: out u32 = low:32[R0]

00000261:
00000264: R0 := 0x20000
0000026a: R0 := R0 + 0x30
0000026f: R1 := 0x20000
00000275: R1 := R1 + 0x30
0000027c: R1 := R1 + ~R0 + 1
00000282: R2 := 0.63:63[R1]
00000289: R1 := R2 + (R1 ~>> 3)
0000028f: R1 := extend:64[63:1[R1]]
00000295: when R1 = 0 goto %00000293
000005fb: goto %000003c9

000003c9:
000003cc: R2 := 0x1F000
000003d3: R2 := mem[R2 + 0xFE0, el]:u64
000003d8: when R2 = 0 goto %00000293
000005fc: goto %000003dc

00000293:
0000029b: call R30 with noreturn

000003dc:
000003e0: R16 := R2
000003e5: call R16 with noreturn
