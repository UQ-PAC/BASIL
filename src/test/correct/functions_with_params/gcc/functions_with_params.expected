var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $_DYNAMIC_addr: bv64;
axiom ($_DYNAMIC_addr == 69032bv64);
const {:extern} $_GLOBAL_OFFSET_TABLE__addr: bv64;
axiom ($_GLOBAL_OFFSET_TABLE__addr == 69584bv64);
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1904bv64);
const {:extern} $__FRAME_END___addr: bv64;
axiom ($__FRAME_END___addr == 2168bv64);
const {:extern} $__abi_tag_addr: bv64;
axiom ($__abi_tag_addr == 632bv64);
const {:extern} $__do_global_dtors_aux_fini_array_entry_addr: bv64;
axiom ($__do_global_dtors_aux_fini_array_entry_addr == 69024bv64);
const {:extern} $__frame_dummy_init_array_entry_addr: bv64;
axiom ($__frame_dummy_init_array_entry_addr == 69016bv64);
const {:extern} $completed.0_addr: bv64;
axiom ($completed.0_addr == 69648bv64);
function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 1904bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$plus_one_1860();
  modifies $Gamma_R0, $Gamma_R31, $Gamma_stack, $R0, $R31, $stack;
  free requires (memory_load32_le($mem, 1904bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 1904bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$plus_one_1860()
{
  var #Gamma_load21: bool;
  var #load21: bv32;
  b#plus_one_entry:
    assume {:captureState "plus_one_entry"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551600bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), $Gamma_R0);
    assume {:captureState "%00000342"} true;
    #load21, #Gamma_load21 := memory_load32_le($stack, bvadd64($R31, 12bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 12bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load21), #Gamma_load21;
    $R0, $Gamma_R0 := zero_extend32_32(bvadd32($R0[32:0], 1bv32)), $Gamma_R0;
    $R31, $Gamma_R31 := bvadd64($R31, 16bv64), $Gamma_R31;
    goto b#plus_one_basil_return_1;
  b#plus_one_basil_return_1:
    assume {:captureState "plus_one_basil_return_1"} true;
    return;
}

procedure p$main_1812();
  modifies $Gamma_R0, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_stack, $R0, $R29, $R30, $R31, $stack;
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le($mem, 1904bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 1904bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_1812()
{
  var ##4: bv64;
  var #Gamma_#4: bool;
  var #Gamma_load18: bool;
  var #Gamma_load19: bool;
  var #Gamma_load20: bool;
  var #load18: bv32;
  var #load19: bv64;
  var #load20: bv64;
  b#main_entry:
    assume {:captureState "main_entry"} true;
    ##4, #Gamma_#4 := bvadd64($R31, 18446744073709551584bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, ##4, $R29), gamma_store64($Gamma_stack, ##4, $Gamma_R29);
    assume {:captureState "%000002fc"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(##4, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(##4, 8bv64), $Gamma_R30);
    assume {:captureState "%00000302"} true;
    $R31, $Gamma_R31 := ##4, #Gamma_#4;
    $R29, $Gamma_R29 := $R31, $Gamma_R31;
    $R0, $Gamma_R0 := 1bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 24bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 24bv64), $Gamma_R0);
    assume {:captureState "%00000319"} true;
    $R0, $Gamma_R0 := 2bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 28bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 28bv64), $Gamma_R0);
    assume {:captureState "%00000326"} true;
    #load18, #Gamma_load18 := memory_load32_le($stack, bvadd64($R31, 24bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 24bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load18), #Gamma_load18;
    $R30, $Gamma_R30 := 1844bv64, true;
    call p$plus_one_1860();
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 24bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 24bv64), $Gamma_R0);
    assume {:captureState "%00000362"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    #load19, #Gamma_load19 := memory_load64_le($stack, $R31), gamma_load64($Gamma_stack, $R31);
    $R29, $Gamma_R29 := #load19, #Gamma_load19;
    #load20, #Gamma_load20 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R30, $Gamma_R30 := #load20, #Gamma_load20;
    $R31, $Gamma_R31 := bvadd64($R31, 32bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

