00000649: program
00000615: sub __cxa_finalize(__cxa_finalize_result)
0000064a: __cxa_finalize_result :: out u32 = low:32[R0]

000003b5:
000004ad: R16 := 0x20000
000004b4: R17 := mem[R16 + 8, el]:u64
000004ba: R16 := R16 + 8
000004bf: call R17 with noreturn

00000616: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000064b: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000297:
0000029b: #3 := R31 - 0x20
000002a1: mem := mem with [#3, el]:u64 <- R29
000002a7: mem := mem with [#3 + 8, el]:u64 <- R30
000002ab: R31 := #3
000002b1: R29 := R31
000002b9: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002be: R19 := 0x20000
000002c5: R0 := pad:64[mem[R19 + 0x30]]
000002cb: when 0:0[R0] goto %000002c9
0000063f: goto %0000037e

0000037e:
00000381: R0 := 0x1F000
00000388: R0 := mem[R0 + 0xFC8, el]:u64
0000038e: when R0 = 0 goto %0000038c
00000640: goto %000003a5

000003a5:
000003a8: R0 := 0x20000
000003af: R0 := mem[R0 + 0x28, el]:u64
000003b4: R30 := 0x6F0
000003b7: call @__cxa_finalize with return %0000038c

0000038c:
00000394: R30 := 0x6F4
00000396: call @deregister_tm_clones with return %00000398

00000398:
0000039b: R0 := 1
000003a3: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000641: goto %000002c9

000002c9:
000002d3: R19 := mem[R31 + 0x10, el]:u64
000002da: R29 := mem[R31, el]:u64
000002df: R30 := mem[R31 + 8, el]:u64
000002e3: R31 := R31 + 0x20
000002e8: call R30 with noreturn

0000061a: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000064c: __libc_start_main_main :: in u64 = R0
0000064d: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000064e: __libc_start_main_arg3 :: in out u64 = R2
0000064f: __libc_start_main_auxv :: in out u64 = R3
00000650: __libc_start_main_result :: out u32 = low:32[R0]

000001f0:
00000497: R16 := 0x20000
0000049e: R17 := mem[R16, el]:u64
000004a4: R16 := R16
000004a9: call R17 with noreturn

0000061b: sub _fini(_fini_result)
00000651: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000061c: sub _init(_init_result)
00000652: _init_result :: out u32 = low:32[R0]

00000565:
0000056b: #6 := R31 - 0x10
00000571: mem := mem with [#6, el]:u64 <- R29
00000577: mem := mem with [#6 + 8, el]:u64 <- R30
0000057b: R31 := #6
00000581: R29 := R31
00000586: R30 := 0x590
00000588: call @call_weak_fn with return %0000058a

0000058a:
0000058f: R29 := mem[R31, el]:u64
00000594: R30 := mem[R31 + 8, el]:u64
00000598: R31 := R31 + 0x10
0000059d: call R30 with noreturn

0000061d: sub _start(_start_result)
00000653: _start_result :: out u32 = low:32[R0]

000001b1:
000001b6: R29 := 0
000001bb: R30 := 0
000001c1: R5 := R0
000001c8: R1 := mem[R31, el]:u64
000001ce: R2 := R31 + 8
000001d4: R6 := R31
000001d9: R0 := 0x1F000
000001e0: R0 := mem[R0 + 0xFD8, el]:u64
000001e5: R3 := 0
000001ea: R4 := 0
000001ef: R30 := 0x630
000001f2: call @__libc_start_main with return %000001f4

000001f4:
000001f7: R30 := 0x634
000001fa: call @abort with return %00000642

00000642:
00000643: call @call_weak_fn with noreturn

00000620: sub abort()


000001f8:
000004d9: R16 := 0x20000
000004e0: R17 := mem[R16 + 0x18, el]:u64
000004e6: R16 := R16 + 0x18
000004eb: call R17 with noreturn

00000621: sub call_weak_fn(call_weak_fn_result)
00000654: call_weak_fn_result :: out u32 = low:32[R0]

000001fc:
000001ff: R0 := 0x1F000
00000206: R0 := mem[R0 + 0xFD0, el]:u64
0000020c: when R0 = 0 goto %0000020a
00000644: goto %000003f5

0000020a:
00000212: call R30 with noreturn

000003f5:
000003f8: goto @__gmon_start__

000003f6:
000004c3: R16 := 0x20000
000004ca: R17 := mem[R16 + 0x10, el]:u64
000004d0: R16 := R16 + 0x10
000004d5: call R17 with noreturn

00000623: sub deregister_tm_clones(deregister_tm_clones_result)
00000655: deregister_tm_clones_result :: out u32 = low:32[R0]

00000218:
0000021b: R0 := 0x20000
00000221: R0 := R0 + 0x30
00000226: R1 := 0x20000
0000022c: R1 := R1 + 0x30
00000232: #1 := ~R0
00000237: #2 := R1 + ~R0
0000023d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000243: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000247: ZF := #2 + 1 = 0
0000024b: NF := 63:63[#2 + 1]
00000251: when ZF goto %0000024f
00000645: goto %000003d7

000003d7:
000003da: R1 := 0x1F000
000003e1: R1 := mem[R1 + 0xFC0, el]:u64
000003e6: when R1 = 0 goto %0000024f
00000646: goto %000003ea

0000024f:
00000257: call R30 with noreturn

000003ea:
000003ee: R16 := R1
000003f3: call R16 with noreturn

00000626: sub frame_dummy(frame_dummy_result)
00000656: frame_dummy_result :: out u32 = low:32[R0]

000002ee:
000002f0: call @register_tm_clones with noreturn

00000627: sub main(main_argc, main_argv, main_result)
00000657: main_argc :: in u32 = low:32[R0]
00000658: main_argv :: in out u64 = R1
00000659: main_result :: out u32 = low:32[R0]

000002f2:
000002f6: #4 := R31 - 0x20
000002fc: mem := mem with [#4, el]:u64 <- R29
00000302: mem := mem with [#4 + 8, el]:u64 <- R30
00000306: R31 := #4
0000030c: R29 := R31
00000311: R0 := 1
00000319: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000031e: R0 := 2
00000326: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
0000032d: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000332: R30 := 0x734
00000335: call @plus_one with return %0000035c

0000035c:
00000362: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000367: R0 := 0
0000036e: R29 := mem[R31, el]:u64
00000373: R30 := mem[R31 + 8, el]:u64
00000377: R31 := R31 + 0x20
0000037c: call R30 with noreturn

00000628: sub plus_one(plus_one_result)
0000065a: plus_one_result :: out u32 = low:32[R0]

00000333:
0000033a: R31 := R31 - 0x10
00000342: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000349: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000034f: R0 := pad:64[31:0[R0] + 1]
00000355: R31 := R31 + 0x10
0000035a: call R30 with noreturn

00000629: sub register_tm_clones(register_tm_clones_result)
0000065b: register_tm_clones_result :: out u32 = low:32[R0]

00000259:
0000025c: R0 := 0x20000
00000262: R0 := R0 + 0x30
00000267: R1 := 0x20000
0000026d: R1 := R1 + 0x30
00000274: R1 := R1 + ~R0 + 1
0000027a: R2 := 0.63:63[R1]
00000281: R1 := R2 + (R1 ~>> 3)
00000287: R1 := extend:64[63:1[R1]]
0000028d: when R1 = 0 goto %0000028b
00000647: goto %000003b9

000003b9:
000003bc: R2 := 0x1F000
000003c3: R2 := mem[R2 + 0xFE0, el]:u64
000003c8: when R2 = 0 goto %0000028b
00000648: goto %000003cc

0000028b:
00000293: call R30 with noreturn

000003cc:
000003d0: R16 := R2
000003d5: call R16 with noreturn
