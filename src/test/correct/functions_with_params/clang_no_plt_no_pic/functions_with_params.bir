00000c8b: program
00000c74: sub __cxa_finalize(__cxa_finalize_result)
00000c8c: __cxa_finalize_result :: out u32 = low:32[R0]

00000a10:
00000b08: R16 := 0x11000
00000b0f: R17 := mem[R16 + 8, el]:u64
00000b15: R16 := R16 + 8
00000b1a: call R17 with noreturn

00000c75: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c8d: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008e9:
000008ed: #3 := R31 - 0x20
000008f3: mem := mem with [#3, el]:u64 <- R29
000008f9: mem := mem with [#3 + 8, el]:u64 <- R30
000008fd: R31 := #3
00000903: R29 := R31
0000090b: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000910: R19 := 0x11000
00000917: R0 := pad:64[mem[R19 + 0x30]]
0000091e: when 31:0[R0] <> 0 goto %0000091c
00000c76: goto %000009d9

000009d9:
000009dc: R0 := 0x10000
000009e3: R0 := mem[R0 + 0xFC8, el]:u64
000009e9: when R0 = 0 goto %000009e7
00000c77: goto %00000a00

00000a00:
00000a03: R0 := 0x11000
00000a0a: R0 := mem[R0 + 0x28, el]:u64
00000a0f: R30 := 0x6F0
00000a12: call @__cxa_finalize with return %000009e7

000009e7:
000009ef: R30 := 0x6F4
000009f1: call @deregister_tm_clones with return %000009f3

000009f3:
000009f6: R0 := 1
000009fe: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000c78: goto %0000091c

0000091c:
00000926: R19 := mem[R31 + 0x10, el]:u64
0000092d: R29 := mem[R31, el]:u64
00000932: R30 := mem[R31 + 8, el]:u64
00000936: R31 := R31 + 0x20
0000093b: call R30 with noreturn

00000c79: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c8e: __libc_start_main_main :: in u64 = R0
00000c8f: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c90: __libc_start_main_arg3 :: in out u64 = R2
00000c91: __libc_start_main_auxv :: in out u64 = R3
00000c92: __libc_start_main_result :: out u32 = low:32[R0]

00000842:
00000af2: R16 := 0x11000
00000af9: R17 := mem[R16, el]:u64
00000aff: R16 := R16
00000b04: call R17 with noreturn

00000c7a: sub _fini(_fini_result)
00000c93: _fini_result :: out u32 = low:32[R0]

0000066a:
00000670: #0 := R31 - 0x10
00000676: mem := mem with [#0, el]:u64 <- R29
0000067c: mem := mem with [#0 + 8, el]:u64 <- R30
00000680: R31 := #0
00000686: R29 := R31
0000068d: R29 := mem[R31, el]:u64
00000692: R30 := mem[R31 + 8, el]:u64
00000696: R31 := R31 + 0x10
0000069b: call R30 with noreturn

00000c7b: sub _init(_init_result)
00000c94: _init_result :: out u32 = low:32[R0]

00000bc2:
00000bc8: #7 := R31 - 0x10
00000bce: mem := mem with [#7, el]:u64 <- R29
00000bd4: mem := mem with [#7 + 8, el]:u64 <- R30
00000bd8: R31 := #7
00000bde: R29 := R31
00000be3: R30 := 0x590
00000be5: call @call_weak_fn with return %00000be7

00000be7:
00000bec: R29 := mem[R31, el]:u64
00000bf1: R30 := mem[R31 + 8, el]:u64
00000bf5: R31 := R31 + 0x10
00000bfa: call R30 with noreturn

00000c7c: sub _start(_start_result)
00000c95: _start_result :: out u32 = low:32[R0]

00000803:
00000808: R29 := 0
0000080d: R30 := 0
00000813: R5 := R0
0000081a: R1 := mem[R31, el]:u64
00000820: R2 := R31 + 8
00000826: R6 := R31
0000082b: R0 := 0x10000
00000832: R0 := mem[R0 + 0xFD8, el]:u64
00000837: R3 := 0
0000083c: R4 := 0
00000841: R30 := 0x630
00000844: call @__libc_start_main with return %00000846

00000846:
00000849: R30 := 0x634
0000084c: call @abort with return %00000c7d

00000c7d:
00000c7e: call @call_weak_fn with noreturn

00000c7f: sub abort()


0000084a:
00000b34: R16 := 0x11000
00000b3b: R17 := mem[R16 + 0x18, el]:u64
00000b41: R16 := R16 + 0x18
00000b46: call R17 with noreturn

00000c80: sub call_weak_fn(call_weak_fn_result)
00000c96: call_weak_fn_result :: out u32 = low:32[R0]

0000084e:
00000851: R0 := 0x10000
00000858: R0 := mem[R0 + 0xFD0, el]:u64
0000085e: when R0 = 0 goto %0000085c
00000c81: goto %00000a50

0000085c:
00000864: call R30 with noreturn

00000a50:
00000a53: goto @__gmon_start__

00000a51:
00000b1e: R16 := 0x11000
00000b25: R17 := mem[R16 + 0x10, el]:u64
00000b2b: R16 := R16 + 0x10
00000b30: call R17 with noreturn

00000c82: sub deregister_tm_clones(deregister_tm_clones_result)
00000c97: deregister_tm_clones_result :: out u32 = low:32[R0]

0000086a:
0000086d: R0 := 0x11000
00000873: R0 := R0 + 0x30
00000878: R1 := 0x11000
0000087e: R1 := R1 + 0x30
00000884: #1 := ~R0
00000889: #2 := R1 + ~R0
0000088f: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000895: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000899: ZF := #2 + 1 = 0
0000089d: NF := 63:63[#2 + 1]
000008a3: when ZF goto %000008a1
00000c83: goto %00000a32

00000a32:
00000a35: R1 := 0x10000
00000a3c: R1 := mem[R1 + 0xFC0, el]:u64
00000a41: when R1 = 0 goto %000008a1
00000c84: goto %00000a45

000008a1:
000008a9: call R30 with noreturn

00000a45:
00000a49: R16 := R1
00000a4e: call R16 with noreturn

00000c85: sub frame_dummy(frame_dummy_result)
00000c98: frame_dummy_result :: out u32 = low:32[R0]

00000941:
00000943: call @register_tm_clones with noreturn

00000c86: sub main(main_argc, main_argv, main_result)
00000c99: main_argc :: in u32 = low:32[R0]
00000c9a: main_argv :: in out u64 = R1
00000c9b: main_result :: out u32 = low:32[R0]

00000945:
00000949: R31 := R31 - 0x20
0000094f: #4 := R31 + 0x10
00000955: mem := mem with [#4, el]:u64 <- R29
0000095b: mem := mem with [#4 + 8, el]:u64 <- R30
00000961: R29 := R31 + 0x10
00000966: R8 := 1
0000096e: mem := mem with [R29 - 4, el]:u32 <- 31:0[R8]
00000973: R8 := 2
0000097b: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
00000982: R0 := pad:64[mem[R29 - 4, el]:u32]
00000987: R30 := 0x738
0000098a: call @plus_one with return %000009b1

000009b1:
000009b7: mem := mem with [R29 - 4, el]:u32 <- 31:0[R0]
000009bc: R0 := 0
000009c2: #5 := R31 + 0x10
000009c7: R29 := mem[#5, el]:u64
000009cc: R30 := mem[#5 + 8, el]:u64
000009d2: R31 := R31 + 0x20
000009d7: call R30 with noreturn

00000c87: sub plus_one(plus_one_result)
00000c9c: plus_one_result :: out u32 = low:32[R0]

00000988:
0000098f: R31 := R31 - 0x10
00000997: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000099e: R8 := pad:64[mem[R31 + 0xC, el]:u32]
000009a4: R0 := pad:64[31:0[R8] + 1]
000009aa: R31 := R31 + 0x10
000009af: call R30 with noreturn

00000c88: sub register_tm_clones(register_tm_clones_result)
00000c9d: register_tm_clones_result :: out u32 = low:32[R0]

000008ab:
000008ae: R0 := 0x11000
000008b4: R0 := R0 + 0x30
000008b9: R1 := 0x11000
000008bf: R1 := R1 + 0x30
000008c6: R1 := R1 + ~R0 + 1
000008cc: R2 := 0.63:63[R1]
000008d3: R1 := R2 + (R1 ~>> 3)
000008d9: R1 := extend:64[63:1[R1]]
000008df: when R1 = 0 goto %000008dd
00000c89: goto %00000a14

00000a14:
00000a17: R2 := 0x10000
00000a1e: R2 := mem[R2 + 0xFE0, el]:u64
00000a23: when R2 = 0 goto %000008dd
00000c8a: goto %00000a27

000008dd:
000008e5: call R30 with noreturn

00000a27:
00000a2b: R16 := R2
00000a30: call R16 with noreturn
