00000606: program
000005d2: sub __cxa_finalize(__cxa_finalize_result)
00000607: __cxa_finalize_result :: out u32 = low:32[R0]

0000036c:
00000464: R16 := 0x20000
0000046b: R17 := mem[R16 + 8, el]:u64
00000471: R16 := R16 + 8
00000476: call R17 with noreturn

000005d3: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000608: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c9:
000002cd: #3 := R31 - 0x20
000002d3: mem := mem with [#3, el]:u64 <- R29
000002d9: mem := mem with [#3 + 8, el]:u64 <- R30
000002dd: R31 := #3
000002e3: R29 := R31
000002eb: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002f0: R19 := 0x20000
000002f7: R0 := pad:64[mem[R19 + 0x30]]
000002fd: when 0:0[R0] goto %000002fb
000005fc: goto %00000335

00000335:
00000338: R0 := 0x1F000
0000033f: R0 := mem[R0 + 0xFC8, el]:u64
00000345: when R0 = 0 goto %00000343
000005fd: goto %0000035c

0000035c:
0000035f: R0 := 0x20000
00000366: R0 := mem[R0 + 0x28, el]:u64
0000036b: R30 := 0x730
0000036e: call @__cxa_finalize with return %00000343

00000343:
0000034b: R30 := 0x734
0000034d: call @deregister_tm_clones with return %0000034f

0000034f:
00000352: R0 := 1
0000035a: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005fe: goto %000002fb

000002fb:
00000305: R19 := mem[R31 + 0x10, el]:u64
0000030c: R29 := mem[R31, el]:u64
00000311: R30 := mem[R31 + 8, el]:u64
00000315: R31 := R31 + 0x20
0000031a: call R30 with noreturn

000005d7: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000609: __libc_start_main_main :: in u64 = R0
0000060a: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000060b: __libc_start_main_arg3 :: in out u64 = R2
0000060c: __libc_start_main_auxv :: in out u64 = R3
0000060d: __libc_start_main_result :: out u32 = low:32[R0]

00000222:
0000044e: R16 := 0x20000
00000455: R17 := mem[R16, el]:u64
0000045b: R16 := R16
00000460: call R17 with noreturn

000005d8: sub _fini(_fini_result)
0000060e: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005d9: sub _init(_init_result)
0000060f: _init_result :: out u32 = low:32[R0]

0000051f:
00000525: #5 := R31 - 0x10
0000052b: mem := mem with [#5, el]:u64 <- R29
00000531: mem := mem with [#5 + 8, el]:u64 <- R30
00000535: R31 := #5
0000053b: R29 := R31
00000540: R30 := 0x590
00000542: call @call_weak_fn with return %00000544

00000544:
00000549: R29 := mem[R31, el]:u64
0000054e: R30 := mem[R31 + 8, el]:u64
00000552: R31 := R31 + 0x10
00000557: call R30 with noreturn

000005da: sub _start(_start_result)
00000610: _start_result :: out u32 = low:32[R0]

000001e3:
000001e8: R29 := 0
000001ed: R30 := 0
000001f3: R5 := R0
000001fa: R1 := mem[R31, el]:u64
00000200: R2 := R31 + 8
00000206: R6 := R31
0000020b: R0 := 0x1F000
00000212: R0 := mem[R0 + 0xFD8, el]:u64
00000217: R3 := 0
0000021c: R4 := 0
00000221: R30 := 0x670
00000224: call @__libc_start_main with return %00000226

00000226:
00000229: R30 := 0x674
0000022c: call @abort with return %000005ff

000005ff:
00000600: call @call_weak_fn with noreturn

000005dd: sub abort()


0000022a:
00000490: R16 := 0x20000
00000497: R17 := mem[R16 + 0x18, el]:u64
0000049d: R16 := R16 + 0x18
000004a2: call R17 with noreturn

000005de: sub call_weak_fn(call_weak_fn_result)
00000611: call_weak_fn_result :: out u32 = low:32[R0]

0000022e:
00000231: R0 := 0x1F000
00000238: R0 := mem[R0 + 0xFD0, el]:u64
0000023e: when R0 = 0 goto %0000023c
00000601: goto %000003ac

0000023c:
00000244: call R30 with noreturn

000003ac:
000003af: goto @__gmon_start__

000003ad:
0000047a: R16 := 0x20000
00000481: R17 := mem[R16 + 0x10, el]:u64
00000487: R16 := R16 + 0x10
0000048c: call R17 with noreturn

000005e0: sub deregister_tm_clones(deregister_tm_clones_result)
00000612: deregister_tm_clones_result :: out u32 = low:32[R0]

0000024a:
0000024d: R0 := 0x20000
00000253: R0 := R0 + 0x30
00000258: R1 := 0x20000
0000025e: R1 := R1 + 0x30
00000264: #1 := ~R0
00000269: #2 := R1 + ~R0
0000026f: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000275: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000279: ZF := #2 + 1 = 0
0000027d: NF := 63:63[#2 + 1]
00000283: when ZF goto %00000281
00000602: goto %0000038e

0000038e:
00000391: R1 := 0x1F000
00000398: R1 := mem[R1 + 0xFC0, el]:u64
0000039d: when R1 = 0 goto %00000281
00000603: goto %000003a1

00000281:
00000289: call R30 with noreturn

000003a1:
000003a5: R16 := R1
000003aa: call R16 with noreturn

000005e3: sub frame_dummy(frame_dummy_result)
00000613: frame_dummy_result :: out u32 = low:32[R0]

00000320:
00000322: call @register_tm_clones with noreturn

000005e4: sub main(main_argc, main_argv, main_result)
00000614: main_argc :: in u32 = low:32[R0]
00000615: main_argv :: in out u64 = R1
00000616: main_result :: out u32 = low:32[R0]

000001bd:
000001c0: R0 := 0
000001c5: call R30 with noreturn

000005e5: sub plus_one(plus_one_result)
00000617: plus_one_result :: out u32 = low:32[R0]

0000032a:
0000032e: R0 := pad:64[31:0[R0] + 1]
00000333: call R30 with noreturn

000005e6: sub register_tm_clones(register_tm_clones_result)
00000618: register_tm_clones_result :: out u32 = low:32[R0]

0000028b:
0000028e: R0 := 0x20000
00000294: R0 := R0 + 0x30
00000299: R1 := 0x20000
0000029f: R1 := R1 + 0x30
000002a6: R1 := R1 + ~R0 + 1
000002ac: R2 := 0.63:63[R1]
000002b3: R1 := R2 + (R1 ~>> 3)
000002b9: R1 := extend:64[63:1[R1]]
000002bf: when R1 = 0 goto %000002bd
00000604: goto %00000370

00000370:
00000373: R2 := 0x1F000
0000037a: R2 := mem[R2 + 0xFE0, el]:u64
0000037f: when R2 = 0 goto %000002bd
00000605: goto %00000383

000002bd:
000002c5: call R30 with noreturn

00000383:
00000387: R16 := R2
0000038c: call R16 with noreturn
