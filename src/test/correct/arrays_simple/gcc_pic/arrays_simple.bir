00000cb3: program
00000c9b: sub __cxa_finalize(__cxa_finalize_result)
00000cb4: __cxa_finalize_result :: out u32 = low:32[R0]

00000a84:
00000b8c: R16 := 0x10000
00000b93: R17 := mem[R16 + 0xFA8, el]:u64
00000b99: R16 := R16 + 0xFA8
00000b9e: call R17 with noreturn

00000c9c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000cb5: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000915:
00000919: #3 := R31 - 0x20
0000091f: mem := mem with [#3, el]:u64 <- R29
00000925: mem := mem with [#3 + 8, el]:u64 <- R30
00000929: R31 := #3
0000092f: R29 := R31
00000937: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000093c: R19 := 0x11000
00000943: R0 := pad:64[mem[R19 + 0x10]]
0000094a: when 31:0[R0] <> 0 goto %00000948
00000c9d: goto %00000a4d

00000a4d:
00000a50: R0 := 0x10000
00000a57: R0 := mem[R0 + 0xFD8, el]:u64
00000a5d: when R0 = 0 goto %00000a5b
00000c9e: goto %00000a74

00000a74:
00000a77: R0 := 0x11000
00000a7e: R0 := mem[R0 + 8, el]:u64
00000a83: R30 := 0x7F0
00000a86: call @__cxa_finalize with return %00000a5b

00000a5b:
00000a63: R30 := 0x7F4
00000a65: call @deregister_tm_clones with return %00000a67

00000a67:
00000a6a: R0 := 1
00000a72: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000c9f: goto %00000948

00000948:
00000952: R19 := mem[R31 + 0x10, el]:u64
00000959: R29 := mem[R31, el]:u64
0000095e: R30 := mem[R31 + 8, el]:u64
00000962: R31 := R31 + 0x20
00000967: call R30 with noreturn

00000ca0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000cb6: __libc_start_main_main :: in u64 = R0
00000cb7: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000cb8: __libc_start_main_arg3 :: in out u64 = R2
00000cb9: __libc_start_main_auxv :: in out u64 = R3
00000cba: __libc_start_main_result :: out u32 = low:32[R0]

0000086e:
00000b76: R16 := 0x10000
00000b7d: R17 := mem[R16 + 0xFA0, el]:u64
00000b83: R16 := R16 + 0xFA0
00000b88: call R17 with noreturn

00000ca1: sub __stack_chk_fail(__stack_chk_fail_result)
00000cbb: __stack_chk_fail_result :: out u32 = low:32[R0]

00000a49:
00000ba2: R16 := 0x10000
00000ba9: R17 := mem[R16 + 0xFB0, el]:u64
00000baf: R16 := R16 + 0xFB0
00000bb4: call R17 with noreturn

00000ca2: sub _fini(_fini_result)
00000cbc: _fini_result :: out u32 = low:32[R0]

0000067e:
00000684: #0 := R31 - 0x10
0000068a: mem := mem with [#0, el]:u64 <- R29
00000690: mem := mem with [#0 + 8, el]:u64 <- R30
00000694: R31 := #0
0000069a: R29 := R31
000006a1: R29 := mem[R31, el]:u64
000006a6: R30 := mem[R31 + 8, el]:u64
000006aa: R31 := R31 + 0x10
000006af: call R30 with noreturn

00000ca3: sub _init(_init_result)
00000cbd: _init_result :: out u32 = low:32[R0]

00000bfc:
00000c02: #8 := R31 - 0x10
00000c08: mem := mem with [#8, el]:u64 <- R29
00000c0e: mem := mem with [#8 + 8, el]:u64 <- R30
00000c12: R31 := #8
00000c18: R29 := R31
00000c1d: R30 := 0x650
00000c1f: call @call_weak_fn with return %00000c21

00000c21:
00000c26: R29 := mem[R31, el]:u64
00000c2b: R30 := mem[R31 + 8, el]:u64
00000c2f: R31 := R31 + 0x10
00000c34: call R30 with noreturn

00000ca4: sub _start(_start_result)
00000cbe: _start_result :: out u32 = low:32[R0]

0000082f:
00000834: R29 := 0
00000839: R30 := 0
0000083f: R5 := R0
00000846: R1 := mem[R31, el]:u64
0000084c: R2 := R31 + 8
00000852: R6 := R31
00000857: R0 := 0x10000
0000085e: R0 := mem[R0 + 0xFF0, el]:u64
00000863: R3 := 0
00000868: R4 := 0
0000086d: R30 := 0x730
00000870: call @__libc_start_main with return %00000872

00000872:
00000875: R30 := 0x734
00000878: call @abort with return %00000ca5

00000ca5:
00000ca6: call @call_weak_fn with noreturn

00000ca7: sub abort()


00000876:
00000bce: R16 := 0x10000
00000bd5: R17 := mem[R16 + 0xFC0, el]:u64
00000bdb: R16 := R16 + 0xFC0
00000be0: call R17 with noreturn

00000ca8: sub call_weak_fn(call_weak_fn_result)
00000cbf: call_weak_fn_result :: out u32 = low:32[R0]

0000087a:
0000087d: R0 := 0x10000
00000884: R0 := mem[R0 + 0xFE0, el]:u64
0000088a: when R0 = 0 goto %00000888
00000ca9: goto %00000ac4

00000888:
00000890: call R30 with noreturn

00000ac4:
00000ac7: goto @__gmon_start__

00000ac5:
00000bb8: R16 := 0x10000
00000bbf: R17 := mem[R16 + 0xFB8, el]:u64
00000bc5: R16 := R16 + 0xFB8
00000bca: call R17 with noreturn

00000caa: sub deregister_tm_clones(deregister_tm_clones_result)
00000cc0: deregister_tm_clones_result :: out u32 = low:32[R0]

00000896:
00000899: R0 := 0x11000
0000089f: R0 := R0 + 0x10
000008a4: R1 := 0x11000
000008aa: R1 := R1 + 0x10
000008b0: #1 := ~R0
000008b5: #2 := R1 + ~R0
000008bb: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000008c1: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000008c5: ZF := #2 + 1 = 0
000008c9: NF := 63:63[#2 + 1]
000008cf: when ZF goto %000008cd
00000cab: goto %00000aa6

00000aa6:
00000aa9: R1 := 0x10000
00000ab0: R1 := mem[R1 + 0xFD0, el]:u64
00000ab5: when R1 = 0 goto %000008cd
00000cac: goto %00000ab9

000008cd:
000008d5: call R30 with noreturn

00000ab9:
00000abd: R16 := R1
00000ac2: call R16 with noreturn

00000cad: sub frame_dummy(frame_dummy_result)
00000cc1: frame_dummy_result :: out u32 = low:32[R0]

0000096d:
0000096f: call @register_tm_clones with noreturn

00000cae: sub main(main_argc, main_argv, main_result)
00000cc2: main_argc :: in u32 = low:32[R0]
00000cc3: main_argv :: in out u64 = R1
00000cc4: main_result :: out u32 = low:32[R0]

00000971:
00000975: #4 := R31 - 0x40
0000097b: mem := mem with [#4, el]:u64 <- R29
00000981: mem := mem with [#4 + 8, el]:u64 <- R30
00000985: R31 := #4
0000098b: R29 := R31
00000990: R0 := 0x10000
00000997: R0 := mem[R0 + 0xFE8, el]:u64
0000099e: R1 := mem[R0, el]:u64
000009a6: mem := mem with [R31 + 0x38, el]:u64 <- R1
000009ab: R1 := 0
000009b0: R0 := 3
000009b8: mem := mem with [R31 + 0x28, el]:u32 <- 31:0[R0]
000009bd: R0 := 7
000009c5: mem := mem with [R31 + 0x30, el]:u32 <- 31:0[R0]
000009cc: R0 := pad:64[mem[R31 + 0x28, el]:u32]
000009d4: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000009d9: R0 := 0
000009df: R1 := pad:64[31:0[R0]]
000009e4: R0 := 0x10000
000009eb: R0 := mem[R0 + 0xFE8, el]:u64
000009f2: R3 := mem[R31 + 0x38, el]:u64
000009f9: R2 := mem[R0, el]:u64
000009ff: #5 := ~R2
00000a04: #6 := R3 + ~R2
00000a0a: VF := extend:65[#6 + 1] <> extend:65[R3] + extend:65[#5] + 1
00000a10: CF := pad:65[#6 + 1] <> pad:65[R3] + pad:65[#5] + 1
00000a14: ZF := #6 + 1 = 0
00000a18: NF := 63:63[#6 + 1]
00000a1c: R3 := #6 + 1
00000a21: R2 := 0
00000a27: when ZF goto %00000a25
00000caf: goto %00000a45

00000a45:
00000a48: R30 := 0x870
00000a4b: call @__stack_chk_fail with return %00000a25

00000a25:
00000a2e: R0 := pad:64[31:0[R1]]
00000a35: R29 := mem[R31, el]:u64
00000a3a: R30 := mem[R31 + 8, el]:u64
00000a3e: R31 := R31 + 0x40
00000a43: call R30 with noreturn

00000cb0: sub register_tm_clones(register_tm_clones_result)
00000cc5: register_tm_clones_result :: out u32 = low:32[R0]

000008d7:
000008da: R0 := 0x11000
000008e0: R0 := R0 + 0x10
000008e5: R1 := 0x11000
000008eb: R1 := R1 + 0x10
000008f2: R1 := R1 + ~R0 + 1
000008f8: R2 := 0.63:63[R1]
000008ff: R1 := R2 + (R1 ~>> 3)
00000905: R1 := extend:64[63:1[R1]]
0000090b: when R1 = 0 goto %00000909
00000cb1: goto %00000a88

00000a88:
00000a8b: R2 := 0x10000
00000a92: R2 := mem[R2 + 0xFF8, el]:u64
00000a97: when R2 = 0 goto %00000909
00000cb2: goto %00000a9b

00000909:
00000911: call R30 with noreturn

00000a9b:
00000a9f: R16 := R2
00000aa4: call R16 with noreturn
