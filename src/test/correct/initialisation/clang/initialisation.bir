0000065a: program
00000628: sub __cxa_finalize(__cxa_finalize_result)
0000065b: __cxa_finalize_result :: out u32 = low:32[R0]

000003c4:
000004bc: R16 := 0x11000
000004c3: R17 := mem[R16 + 8, el]:u64
000004c9: R16 := R16 + 8
000004ce: call R17 with noreturn

00000629: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000065c: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029e:
000002a2: #3 := R31 - 0x20
000002a8: mem := mem with [#3, el]:u64 <- R29
000002ae: mem := mem with [#3 + 8, el]:u64 <- R30
000002b2: R31 := #3
000002b8: R29 := R31
000002c0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c5: R19 := 0x11000
000002cc: R0 := pad:64[mem[R19 + 0x48]]
000002d3: when 31:0[R0] <> 0 goto %000002d1
00000650: goto %0000038d

0000038d:
00000390: R0 := 0x10000
00000397: R0 := mem[R0 + 0xFC8, el]:u64
0000039d: when R0 = 0 goto %0000039b
00000651: goto %000003b4

000003b4:
000003b7: R0 := 0x11000
000003be: R0 := mem[R0 + 0x28, el]:u64
000003c3: R30 := 0x6F0
000003c6: call @__cxa_finalize with return %0000039b

0000039b:
000003a3: R30 := 0x6F4
000003a5: call @deregister_tm_clones with return %000003a7

000003a7:
000003aa: R0 := 1
000003b2: mem := mem with [R19 + 0x48] <- 7:0[R0]
00000652: goto %000002d1

000002d1:
000002db: R19 := mem[R31 + 0x10, el]:u64
000002e2: R29 := mem[R31, el]:u64
000002e7: R30 := mem[R31 + 8, el]:u64
000002eb: R31 := R31 + 0x20
000002f0: call R30 with noreturn

0000062d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000065d: __libc_start_main_main :: in u64 = R0
0000065e: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000065f: __libc_start_main_arg3 :: in out u64 = R2
00000660: __libc_start_main_auxv :: in out u64 = R3
00000661: __libc_start_main_result :: out u32 = low:32[R0]

000001f7:
000004a6: R16 := 0x11000
000004ad: R17 := mem[R16, el]:u64
000004b3: R16 := R16
000004b8: call R17 with noreturn

0000062e: sub _fini(_fini_result)
00000662: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000062f: sub _init(_init_result)
00000663: _init_result :: out u32 = low:32[R0]

00000576:
0000057c: #6 := R31 - 0x10
00000582: mem := mem with [#6, el]:u64 <- R29
00000588: mem := mem with [#6 + 8, el]:u64 <- R30
0000058c: R31 := #6
00000592: R29 := R31
00000597: R30 := 0x590
00000599: call @call_weak_fn with return %0000059b

0000059b:
000005a0: R29 := mem[R31, el]:u64
000005a5: R30 := mem[R31 + 8, el]:u64
000005a9: R31 := R31 + 0x10
000005ae: call R30 with noreturn

00000630: sub _start(_start_result)
00000664: _start_result :: out u32 = low:32[R0]

000001b8:
000001bd: R29 := 0
000001c2: R30 := 0
000001c8: R5 := R0
000001cf: R1 := mem[R31, el]:u64
000001d5: R2 := R31 + 8
000001db: R6 := R31
000001e0: R0 := 0x10000
000001e7: R0 := mem[R0 + 0xFD8, el]:u64
000001ec: R3 := 0
000001f1: R4 := 0
000001f6: R30 := 0x630
000001f9: call @__libc_start_main with return %000001fb

000001fb:
000001fe: R30 := 0x634
00000201: call @abort with return %00000653

00000653:
00000654: call @call_weak_fn with noreturn

00000633: sub abort()


000001ff:
000004e8: R16 := 0x11000
000004ef: R17 := mem[R16 + 0x18, el]:u64
000004f5: R16 := R16 + 0x18
000004fa: call R17 with noreturn

00000634: sub call_weak_fn(call_weak_fn_result)
00000665: call_weak_fn_result :: out u32 = low:32[R0]

00000203:
00000206: R0 := 0x10000
0000020d: R0 := mem[R0 + 0xFD0, el]:u64
00000213: when R0 = 0 goto %00000211
00000655: goto %00000404

00000211:
00000219: call R30 with noreturn

00000404:
00000407: goto @__gmon_start__

00000405:
000004d2: R16 := 0x11000
000004d9: R17 := mem[R16 + 0x10, el]:u64
000004df: R16 := R16 + 0x10
000004e4: call R17 with noreturn

00000636: sub deregister_tm_clones(deregister_tm_clones_result)
00000666: deregister_tm_clones_result :: out u32 = low:32[R0]

0000021f:
00000222: R0 := 0x11000
00000228: R0 := R0 + 0x48
0000022d: R1 := 0x11000
00000233: R1 := R1 + 0x48
00000239: #1 := ~R0
0000023e: #2 := R1 + ~R0
00000244: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024e: ZF := #2 + 1 = 0
00000252: NF := 63:63[#2 + 1]
00000258: when ZF goto %00000256
00000656: goto %000003e6

000003e6:
000003e9: R1 := 0x10000
000003f0: R1 := mem[R1 + 0xFC0, el]:u64
000003f5: when R1 = 0 goto %00000256
00000657: goto %000003f9

00000256:
0000025e: call R30 with noreturn

000003f9:
000003fd: R16 := R1
00000402: call R16 with noreturn

00000639: sub frame_dummy(frame_dummy_result)
00000667: frame_dummy_result :: out u32 = low:32[R0]

000002f6:
000002f8: call @register_tm_clones with noreturn

0000063a: sub main(main_argc, main_argv, main_result)
00000668: main_argc :: in u32 = low:32[R0]
00000669: main_argv :: in out u64 = R1
0000066a: main_result :: out u32 = low:32[R0]

000002fa:
000002fd: R8 := 0x11000
00000302: R9 := 0x11000
00000308: R9 := R9 + 0x40
0000030d: R11 := 0x11000
00000314: R10 := pad:64[mem[R11 + 0x30, el]:u32]
0000031a: R10 := pad:64[31:0[R10] + 1]
00000322: mem := mem with [R11 + 0x30, el]:u32 <- 31:0[R10]
00000327: R11 := 0x11000
0000032e: R10 := mem[R11 + 0x38, el]:u64
00000334: #4 := R10 - 2
00000339: VF := extend:65[#4 + 1] <> extend:65[R10] - 1
0000033e: CF := pad:65[#4 + 1] <> pad:65[R10] + 0xFFFFFFFFFFFFFFFF
00000342: ZF := #4 + 1 = 0
00000346: NF := 63:63[#4 + 1]
0000034a: R10 := #4 + 1
00000352: mem := mem with [R11 + 0x38, el]:u64 <- R10
00000359: R8 := pad:64[mem[R8 + 0x40, el]:u32]
0000035f: R8 := pad:64[31:0[R8] + 3]
00000367: mem := mem with [R9 + 4, el]:u32 <- 31:0[R8]
0000036c: R9 := 0x11000
00000373: R8 := pad:64[mem[R9 + 0x34]]
00000379: R8 := pad:64[31:0[R8] + 1]
00000381: mem := mem with [R9 + 0x34] <- 7:0[R8]
00000386: R0 := 0
0000038b: call R30 with noreturn

0000063b: sub register_tm_clones(register_tm_clones_result)
0000066b: register_tm_clones_result :: out u32 = low:32[R0]

00000260:
00000263: R0 := 0x11000
00000269: R0 := R0 + 0x48
0000026e: R1 := 0x11000
00000274: R1 := R1 + 0x48
0000027b: R1 := R1 + ~R0 + 1
00000281: R2 := 0.63:63[R1]
00000288: R1 := R2 + (R1 ~>> 3)
0000028e: R1 := extend:64[63:1[R1]]
00000294: when R1 = 0 goto %00000292
00000658: goto %000003c8

000003c8:
000003cb: R2 := 0x10000
000003d2: R2 := mem[R2 + 0xFE0, el]:u64
000003d7: when R2 = 0 goto %00000292
00000659: goto %000003db

00000292:
0000029a: call R30 with noreturn

000003db:
000003df: R16 := R2
000003e4: call R16 with noreturn
