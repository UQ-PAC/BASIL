var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R10: bool;
var {:extern} Gamma_R11: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R10: bv64;
var {:extern} R11: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
const {:extern} $a_addr: bv64;
axiom ($a_addr == 69696bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69680bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69684bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69688bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvadd"} bvadd65(bv65, bv65) returns (bv65);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp64(bv64, bv64) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp65(bv65, bv65) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_64(bv64) returns (bv65);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_64(bv64) returns (bv65);
function {:extern} {:bvbuiltin "zero_extend 24"} zero_extend24_8(bv8) returns (bv32);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 1912bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main_1812();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R10, Gamma_R11, Gamma_R8, Gamma_R9, Gamma_VF, Gamma_ZF, Gamma_mem, NF, R0, R10, R11, R8, R9, VF, ZF, mem;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 416611827717bv64);
  free requires (memory_load64_le(mem, 69688bv64) == 68719476735bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 8589934593bv64);
  free requires (memory_load32_le(mem, 1912bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  ensures (memory_load32_le(mem, $x_addr) == 6bv32);
  ensures (memory_load32_le(mem, bvadd64($a_addr, 4bv64)) == 4bv32);
  ensures (memory_load32_le(mem, bvadd64($a_addr, 0bv64)) == 1bv32);
  free ensures (memory_load32_le(mem, 1912bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main_1812()
{
  var Cse0__5_0_9: bv64;
  var Gamma_Cse0__5_0_9: bool;
  var Gamma_load6: bool;
  var Gamma_load7: bool;
  var Gamma_load8: bool;
  var Gamma_load9: bool;
  var load6: bv32;
  var load7: bv64;
  var load8: bv32;
  var load9: bv8;
  main_1812__0__bXjOvzBIQmSVnOWXdNnWZA:
    assume {:captureState "main_1812__0__bXjOvzBIQmSVnOWXdNnWZA"} true;
    R8, Gamma_R8 := 69632bv64, true;
    R9, Gamma_R9 := 69632bv64, true;
    R9, Gamma_R9 := bvadd64(R9, 64bv64), Gamma_R9;
    R11, Gamma_R11 := 69632bv64, true;
    call rely();
    load6, Gamma_load6 := memory_load32_le(mem, bvadd64(R11, 48bv64)), (gamma_load32(Gamma_mem, bvadd64(R11, 48bv64)) || L(mem, bvadd64(R11, 48bv64)));
    R10, Gamma_R10 := zero_extend32_32(load6), Gamma_load6;
    R10, Gamma_R10 := zero_extend32_32(bvadd32(R10[32:0], 1bv32)), Gamma_R10;
    call rely();
    assert (L(mem, bvadd64(R11, 48bv64)) ==> Gamma_R10);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R11, 48bv64), R10[32:0]), gamma_store32(Gamma_mem, bvadd64(R11, 48bv64), Gamma_R10);
    assume {:captureState "1836_0"} true;
    R11, Gamma_R11 := 69632bv64, true;
    call rely();
    load7, Gamma_load7 := memory_load64_le(mem, bvadd64(R11, 56bv64)), (gamma_load64(Gamma_mem, bvadd64(R11, 56bv64)) || L(mem, bvadd64(R11, 56bv64)));
    R10, Gamma_R10 := load7, Gamma_load7;
    Cse0__5_0_9, Gamma_Cse0__5_0_9 := bvadd64(R10, 18446744073709551615bv64), Gamma_R10;
    VF, Gamma_VF := bvnot1(bvcomp65(sign_extend1_64(Cse0__5_0_9), bvadd65(sign_extend1_64(R10), 36893488147419103231bv65))), (Gamma_R10 && Gamma_Cse0__5_0_9);
    CF, Gamma_CF := bvnot1(bvcomp65(zero_extend1_64(Cse0__5_0_9), bvadd65(zero_extend1_64(R10), 18446744073709551615bv65))), (Gamma_R10 && Gamma_Cse0__5_0_9);
    ZF, Gamma_ZF := bvcomp64(Cse0__5_0_9, 0bv64), Gamma_Cse0__5_0_9;
    NF, Gamma_NF := Cse0__5_0_9[64:63], Gamma_Cse0__5_0_9;
    R10, Gamma_R10 := Cse0__5_0_9, Gamma_Cse0__5_0_9;
    call rely();
    assert (L(mem, bvadd64(R11, 56bv64)) ==> Gamma_R10);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(R11, 56bv64), R10), gamma_store64(Gamma_mem, bvadd64(R11, 56bv64), Gamma_R10);
    assume {:captureState "1852_0"} true;
    call rely();
    load8, Gamma_load8 := memory_load32_le(mem, bvadd64(R8, 64bv64)), (gamma_load32(Gamma_mem, bvadd64(R8, 64bv64)) || L(mem, bvadd64(R8, 64bv64)));
    R8, Gamma_R8 := zero_extend32_32(load8), Gamma_load8;
    R8, Gamma_R8 := zero_extend32_32(bvadd32(R8[32:0], 3bv32)), Gamma_R8;
    call rely();
    assert (L(mem, bvadd64(R9, 4bv64)) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R9, 4bv64), R8[32:0]), gamma_store32(Gamma_mem, bvadd64(R9, 4bv64), Gamma_R8);
    assume {:captureState "1864_0"} true;
    R9, Gamma_R9 := 69632bv64, true;
    call rely();
    load9, Gamma_load9 := memory_load8_le(mem, bvadd64(R9, 52bv64)), (gamma_load8(Gamma_mem, bvadd64(R9, 52bv64)) || L(mem, bvadd64(R9, 52bv64)));
    R8, Gamma_R8 := zero_extend32_32(zero_extend24_8(load9)), Gamma_load9;
    R8, Gamma_R8 := zero_extend32_32(bvadd32(R8[32:0], 1bv32)), Gamma_R8;
    call rely();
    assert (L(mem, bvadd64(R9, 52bv64)) ==> Gamma_R8);
    mem, Gamma_mem := memory_store8_le(mem, bvadd64(R9, 52bv64), R8[8:0]), gamma_store8(Gamma_mem, bvadd64(R9, 52bv64), Gamma_R8);
    assume {:captureState "1880_0"} true;
    R0, Gamma_R0 := 0bv64, true;
    goto main_1812_basil_return;
  main_1812_basil_return:
    assume {:captureState "main_1812_basil_return"} true;
    return;
}

