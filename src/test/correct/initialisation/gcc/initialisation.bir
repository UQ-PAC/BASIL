000006c5: program
00000693: sub __cxa_finalize(__cxa_finalize_result)
000006c6: __cxa_finalize_result :: out u32 = low:32[R0]

00000419:
00000511: R16 := 0x10000
00000518: R17 := mem[R16 + 0xFB8, el]:u64
0000051e: R16 := R16 + 0xFB8
00000523: call R17 with noreturn

00000694: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006c7: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002ca:
000002ce: #3 := R31 - 0x20
000002d4: mem := mem with [#3, el]:u64 <- R29
000002da: mem := mem with [#3 + 8, el]:u64 <- R30
000002de: R31 := #3
000002e4: R29 := R31
000002ec: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002f1: R19 := 0x11000
000002f8: R0 := pad:64[mem[R19 + 0x28]]
000002ff: when 31:0[R0] <> 0 goto %000002fd
000006bb: goto %000003e2

000003e2:
000003e5: R0 := 0x10000
000003ec: R0 := mem[R0 + 0xFE0, el]:u64
000003f2: when R0 = 0 goto %000003f0
000006bc: goto %00000409

00000409:
0000040c: R0 := 0x11000
00000413: R0 := mem[R0 + 8, el]:u64
00000418: R30 := 0x6F0
0000041b: call @__cxa_finalize with return %000003f0

000003f0:
000003f8: R30 := 0x6F4
000003fa: call @deregister_tm_clones with return %000003fc

000003fc:
000003ff: R0 := 1
00000407: mem := mem with [R19 + 0x28] <- 7:0[R0]
000006bd: goto %000002fd

000002fd:
00000307: R19 := mem[R31 + 0x10, el]:u64
0000030e: R29 := mem[R31, el]:u64
00000313: R30 := mem[R31 + 8, el]:u64
00000317: R31 := R31 + 0x20
0000031c: call R30 with noreturn

00000698: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006c8: __libc_start_main_main :: in u64 = R0
000006c9: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006ca: __libc_start_main_arg3 :: in out u64 = R2
000006cb: __libc_start_main_auxv :: in out u64 = R3
000006cc: __libc_start_main_result :: out u32 = low:32[R0]

00000223:
000004fb: R16 := 0x10000
00000502: R17 := mem[R16 + 0xFB0, el]:u64
00000508: R16 := R16 + 0xFB0
0000050d: call R17 with noreturn

00000699: sub _fini(_fini_result)
000006cd: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000069a: sub _init(_init_result)
000006ce: _init_result :: out u32 = low:32[R0]

000005d6:
000005dc: #5 := R31 - 0x10
000005e2: mem := mem with [#5, el]:u64 <- R29
000005e8: mem := mem with [#5 + 8, el]:u64 <- R30
000005ec: R31 := #5
000005f2: R29 := R31
000005f7: R30 := 0x590
000005f9: call @call_weak_fn with return %000005fb

000005fb:
00000600: R29 := mem[R31, el]:u64
00000605: R30 := mem[R31 + 8, el]:u64
00000609: R31 := R31 + 0x10
0000060e: call R30 with noreturn

0000069b: sub _start(_start_result)
000006cf: _start_result :: out u32 = low:32[R0]

000001e4:
000001e9: R29 := 0
000001ee: R30 := 0
000001f4: R5 := R0
000001fb: R1 := mem[R31, el]:u64
00000201: R2 := R31 + 8
00000207: R6 := R31
0000020c: R0 := 0x10000
00000213: R0 := mem[R0 + 0xFF0, el]:u64
00000218: R3 := 0
0000021d: R4 := 0
00000222: R30 := 0x630
00000225: call @__libc_start_main with return %00000227

00000227:
0000022a: R30 := 0x634
0000022d: call @abort with return %000006be

000006be:
000006bf: call @call_weak_fn with noreturn

0000069e: sub abort()


0000022b:
0000053d: R16 := 0x10000
00000544: R17 := mem[R16 + 0xFC8, el]:u64
0000054a: R16 := R16 + 0xFC8
0000054f: call R17 with noreturn

0000069f: sub call_weak_fn(call_weak_fn_result)
000006d0: call_weak_fn_result :: out u32 = low:32[R0]

0000022f:
00000232: R0 := 0x10000
00000239: R0 := mem[R0 + 0xFE8, el]:u64
0000023f: when R0 = 0 goto %0000023d
000006c0: goto %00000459

0000023d:
00000245: call R30 with noreturn

00000459:
0000045c: goto @__gmon_start__

0000045a:
00000527: R16 := 0x10000
0000052e: R17 := mem[R16 + 0xFC0, el]:u64
00000534: R16 := R16 + 0xFC0
00000539: call R17 with noreturn

000006a1: sub deregister_tm_clones(deregister_tm_clones_result)
000006d1: deregister_tm_clones_result :: out u32 = low:32[R0]

0000024b:
0000024e: R0 := 0x11000
00000254: R0 := R0 + 0x28
00000259: R1 := 0x11000
0000025f: R1 := R1 + 0x28
00000265: #1 := ~R0
0000026a: #2 := R1 + ~R0
00000270: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000276: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000027a: ZF := #2 + 1 = 0
0000027e: NF := 63:63[#2 + 1]
00000284: when ZF goto %00000282
000006c1: goto %0000043b

0000043b:
0000043e: R1 := 0x10000
00000445: R1 := mem[R1 + 0xFD8, el]:u64
0000044a: when R1 = 0 goto %00000282
000006c2: goto %0000044e

00000282:
0000028a: call R30 with noreturn

0000044e:
00000452: R16 := R1
00000457: call R16 with noreturn

000006a4: sub frame_dummy(frame_dummy_result)
000006d2: frame_dummy_result :: out u32 = low:32[R0]

00000322:
00000324: call @register_tm_clones with noreturn

000006a5: sub main(main_argc, main_argv, main_result)
000006d3: main_argc :: in u32 = low:32[R0]
000006d4: main_argv :: in out u64 = R1
000006d5: main_result :: out u32 = low:32[R0]

00000326:
00000329: R0 := 0x11000
0000032f: R0 := R0 + 0x10
00000336: R0 := pad:64[mem[R0, el]:u32]
0000033c: R1 := pad:64[31:0[R0] + 1]
00000341: R0 := 0x11000
00000347: R0 := R0 + 0x10
0000034f: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000354: R0 := 0x11000
0000035a: R0 := R0 + 0x18
00000361: R0 := mem[R0, el]:u64
00000367: R1 := R0 - 1
0000036c: R0 := 0x11000
00000372: R0 := R0 + 0x18
0000037a: mem := mem with [R0, el]:u64 <- R1
0000037f: R0 := 0x11000
00000385: R0 := R0 + 0x20
0000038c: R0 := pad:64[mem[R0, el]:u32]
00000392: R1 := pad:64[31:0[R0] + 3]
00000397: R0 := 0x11000
0000039d: R0 := R0 + 0x20
000003a5: mem := mem with [R0 + 4, el]:u32 <- 31:0[R1]
000003aa: R0 := 0x11000
000003b0: R0 := R0 + 0x14
000003b7: R0 := pad:64[mem[R0]]
000003bd: R0 := pad:64[31:0[R0] + 1]
000003c3: R1 := pad:64[0.7:0[R0]]
000003c8: R0 := 0x11000
000003ce: R0 := R0 + 0x14
000003d6: mem := mem with [R0] <- 7:0[R1]
000003db: R0 := 0
000003e0: call R30 with noreturn

000006a6: sub register_tm_clones(register_tm_clones_result)
000006d6: register_tm_clones_result :: out u32 = low:32[R0]

0000028c:
0000028f: R0 := 0x11000
00000295: R0 := R0 + 0x28
0000029a: R1 := 0x11000
000002a0: R1 := R1 + 0x28
000002a7: R1 := R1 + ~R0 + 1
000002ad: R2 := 0.63:63[R1]
000002b4: R1 := R2 + (R1 ~>> 3)
000002ba: R1 := extend:64[63:1[R1]]
000002c0: when R1 = 0 goto %000002be
000006c3: goto %0000041d

0000041d:
00000420: R2 := 0x10000
00000427: R2 := mem[R2 + 0xFF8, el]:u64
0000042c: when R2 = 0 goto %000002be
000006c4: goto %00000430

000002be:
000002c6: call R30 with noreturn

00000430:
00000434: R16 := R2
00000439: call R16 with noreturn
