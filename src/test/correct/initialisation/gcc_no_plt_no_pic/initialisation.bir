00000d5c: program
00000d46: sub __cxa_finalize(__cxa_finalize_result)
00000d5d: __cxa_finalize_result :: out u32 = low:32[R0]

00000acc:
00000bc4: R16 := 0x10000
00000bcb: R17 := mem[R16 + 0xFB8, el]:u64
00000bd1: R16 := R16 + 0xFB8
00000bd6: call R17 with noreturn

00000d47: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000d5e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000097d:
00000981: #3 := R31 - 0x20
00000987: mem := mem with [#3, el]:u64 <- R29
0000098d: mem := mem with [#3 + 8, el]:u64 <- R30
00000991: R31 := #3
00000997: R29 := R31
0000099f: mem := mem with [R31 + 0x10, el]:u64 <- R19
000009a4: R19 := 0x11000
000009ab: R0 := pad:64[mem[R19 + 0x28]]
000009b2: when 31:0[R0] <> 0 goto %000009b0
00000d48: goto %00000a95

00000a95:
00000a98: R0 := 0x10000
00000a9f: R0 := mem[R0 + 0xFE0, el]:u64
00000aa5: when R0 = 0 goto %00000aa3
00000d49: goto %00000abc

00000abc:
00000abf: R0 := 0x11000
00000ac6: R0 := mem[R0 + 8, el]:u64
00000acb: R30 := 0x6F0
00000ace: call @__cxa_finalize with return %00000aa3

00000aa3:
00000aab: R30 := 0x6F4
00000aad: call @deregister_tm_clones with return %00000aaf

00000aaf:
00000ab2: R0 := 1
00000aba: mem := mem with [R19 + 0x28] <- 7:0[R0]
00000d4a: goto %000009b0

000009b0:
000009ba: R19 := mem[R31 + 0x10, el]:u64
000009c1: R29 := mem[R31, el]:u64
000009c6: R30 := mem[R31 + 8, el]:u64
000009ca: R31 := R31 + 0x20
000009cf: call R30 with noreturn

00000d4b: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000d5f: __libc_start_main_main :: in u64 = R0
00000d60: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000d61: __libc_start_main_arg3 :: in out u64 = R2
00000d62: __libc_start_main_auxv :: in out u64 = R3
00000d63: __libc_start_main_result :: out u32 = low:32[R0]

000008d6:
00000bae: R16 := 0x10000
00000bb5: R17 := mem[R16 + 0xFB0, el]:u64
00000bbb: R16 := R16 + 0xFB0
00000bc0: call R17 with noreturn

00000d4c: sub _fini(_fini_result)
00000d64: _fini_result :: out u32 = low:32[R0]

000006d2:
000006d8: #0 := R31 - 0x10
000006de: mem := mem with [#0, el]:u64 <- R29
000006e4: mem := mem with [#0 + 8, el]:u64 <- R30
000006e8: R31 := #0
000006ee: R29 := R31
000006f5: R29 := mem[R31, el]:u64
000006fa: R30 := mem[R31 + 8, el]:u64
000006fe: R31 := R31 + 0x10
00000703: call R30 with noreturn

00000d4d: sub _init(_init_result)
00000d65: _init_result :: out u32 = low:32[R0]

00000c89:
00000c8f: #5 := R31 - 0x10
00000c95: mem := mem with [#5, el]:u64 <- R29
00000c9b: mem := mem with [#5 + 8, el]:u64 <- R30
00000c9f: R31 := #5
00000ca5: R29 := R31
00000caa: R30 := 0x590
00000cac: call @call_weak_fn with return %00000cae

00000cae:
00000cb3: R29 := mem[R31, el]:u64
00000cb8: R30 := mem[R31 + 8, el]:u64
00000cbc: R31 := R31 + 0x10
00000cc1: call R30 with noreturn

00000d4e: sub _start(_start_result)
00000d66: _start_result :: out u32 = low:32[R0]

00000897:
0000089c: R29 := 0
000008a1: R30 := 0
000008a7: R5 := R0
000008ae: R1 := mem[R31, el]:u64
000008b4: R2 := R31 + 8
000008ba: R6 := R31
000008bf: R0 := 0x10000
000008c6: R0 := mem[R0 + 0xFF0, el]:u64
000008cb: R3 := 0
000008d0: R4 := 0
000008d5: R30 := 0x630
000008d8: call @__libc_start_main with return %000008da

000008da:
000008dd: R30 := 0x634
000008e0: call @abort with return %00000d4f

00000d4f:
00000d50: call @call_weak_fn with noreturn

00000d51: sub abort()


000008de:
00000bf0: R16 := 0x10000
00000bf7: R17 := mem[R16 + 0xFC8, el]:u64
00000bfd: R16 := R16 + 0xFC8
00000c02: call R17 with noreturn

00000d52: sub call_weak_fn(call_weak_fn_result)
00000d67: call_weak_fn_result :: out u32 = low:32[R0]

000008e2:
000008e5: R0 := 0x10000
000008ec: R0 := mem[R0 + 0xFE8, el]:u64
000008f2: when R0 = 0 goto %000008f0
00000d53: goto %00000b0c

000008f0:
000008f8: call R30 with noreturn

00000b0c:
00000b0f: goto @__gmon_start__

00000b0d:
00000bda: R16 := 0x10000
00000be1: R17 := mem[R16 + 0xFC0, el]:u64
00000be7: R16 := R16 + 0xFC0
00000bec: call R17 with noreturn

00000d54: sub deregister_tm_clones(deregister_tm_clones_result)
00000d68: deregister_tm_clones_result :: out u32 = low:32[R0]

000008fe:
00000901: R0 := 0x11000
00000907: R0 := R0 + 0x28
0000090c: R1 := 0x11000
00000912: R1 := R1 + 0x28
00000918: #1 := ~R0
0000091d: #2 := R1 + ~R0
00000923: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000929: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000092d: ZF := #2 + 1 = 0
00000931: NF := 63:63[#2 + 1]
00000937: when ZF goto %00000935
00000d55: goto %00000aee

00000aee:
00000af1: R1 := 0x10000
00000af8: R1 := mem[R1 + 0xFD8, el]:u64
00000afd: when R1 = 0 goto %00000935
00000d56: goto %00000b01

00000935:
0000093d: call R30 with noreturn

00000b01:
00000b05: R16 := R1
00000b0a: call R16 with noreturn

00000d57: sub frame_dummy(frame_dummy_result)
00000d69: frame_dummy_result :: out u32 = low:32[R0]

000009d5:
000009d7: call @register_tm_clones with noreturn

00000d58: sub main(main_argc, main_argv, main_result)
00000d6a: main_argc :: in u32 = low:32[R0]
00000d6b: main_argv :: in out u64 = R1
00000d6c: main_result :: out u32 = low:32[R0]

000009d9:
000009dc: R0 := 0x11000
000009e2: R0 := R0 + 0x10
000009e9: R0 := pad:64[mem[R0, el]:u32]
000009ef: R1 := pad:64[31:0[R0] + 1]
000009f4: R0 := 0x11000
000009fa: R0 := R0 + 0x10
00000a02: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000a07: R0 := 0x11000
00000a0d: R0 := R0 + 0x18
00000a14: R0 := mem[R0, el]:u64
00000a1a: R1 := R0 - 1
00000a1f: R0 := 0x11000
00000a25: R0 := R0 + 0x18
00000a2d: mem := mem with [R0, el]:u64 <- R1
00000a32: R0 := 0x11000
00000a38: R0 := R0 + 0x20
00000a3f: R0 := pad:64[mem[R0, el]:u32]
00000a45: R1 := pad:64[31:0[R0] + 3]
00000a4a: R0 := 0x11000
00000a50: R0 := R0 + 0x20
00000a58: mem := mem with [R0 + 4, el]:u32 <- 31:0[R1]
00000a5d: R0 := 0x11000
00000a63: R0 := R0 + 0x14
00000a6a: R0 := pad:64[mem[R0]]
00000a70: R0 := pad:64[31:0[R0] + 1]
00000a76: R1 := pad:64[0.7:0[R0]]
00000a7b: R0 := 0x11000
00000a81: R0 := R0 + 0x14
00000a89: mem := mem with [R0] <- 7:0[R1]
00000a8e: R0 := 0
00000a93: call R30 with noreturn

00000d59: sub register_tm_clones(register_tm_clones_result)
00000d6d: register_tm_clones_result :: out u32 = low:32[R0]

0000093f:
00000942: R0 := 0x11000
00000948: R0 := R0 + 0x28
0000094d: R1 := 0x11000
00000953: R1 := R1 + 0x28
0000095a: R1 := R1 + ~R0 + 1
00000960: R2 := 0.63:63[R1]
00000967: R1 := R2 + (R1 ~>> 3)
0000096d: R1 := extend:64[63:1[R1]]
00000973: when R1 = 0 goto %00000971
00000d5a: goto %00000ad0

00000ad0:
00000ad3: R2 := 0x10000
00000ada: R2 := mem[R2 + 0xFF8, el]:u64
00000adf: when R2 = 0 goto %00000971
00000d5b: goto %00000ae3

00000971:
00000979: call R30 with noreturn

00000ae3:
00000ae7: R16 := R2
00000aec: call R16 with noreturn
