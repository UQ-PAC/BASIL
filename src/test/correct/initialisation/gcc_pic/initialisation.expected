var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} mem: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2084bv64);
const {:extern} $a_addr: bv64;
axiom ($a_addr == 131136bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 131120bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 131124bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 131128bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2084bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2085bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2086bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2087bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free ensures (memory_load64_le(mem, 130472bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 131016bv64) == 131136bv64);
  free ensures (memory_load64_le(mem, 131024bv64) == 131124bv64);
  free ensures (memory_load64_le(mem, 130992bv64) == 131128bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 131000bv64) == 131120bv64);
  free ensures (memory_load64_le(mem, 130480bv64) == 1856bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load64_le(mem, 131104bv64) == 0bv64);
  free requires (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free requires (memory_load64_le(mem, 131120bv64) == 416611827717bv64);
  free requires (memory_load64_le(mem, 131128bv64) == 68719476735bv64);
  free requires (memory_load64_le(mem, 131136bv64) == 8589934593bv64);
  free requires (memory_load8_le(mem, 2084bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2085bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2086bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2087bv64) == 0bv8);
  free requires (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free requires (memory_load64_le(mem, 130472bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 131016bv64) == 131136bv64);
  free requires (memory_load64_le(mem, 131024bv64) == 131124bv64);
  free requires (memory_load64_le(mem, 130992bv64) == 131128bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 131000bv64) == 131120bv64);
  free requires (memory_load64_le(mem, 130480bv64) == 1856bv64);
  free ensures (memory_load8_le(mem, 2084bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2085bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2086bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2087bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free ensures (memory_load64_le(mem, 130472bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 131016bv64) == 131136bv64);
  free ensures (memory_load64_le(mem, 131024bv64) == 131124bv64);
  free ensures (memory_load64_le(mem, 130992bv64) == 131128bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 131000bv64) == 131120bv64);
  free ensures (memory_load64_le(mem, 130480bv64) == 1856bv64);

implementation main()
{
  lmain:
    assume {:captureState "lmain"} true;
    R0, Gamma_R0 := 126976bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4024bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4024bv64)) || L(mem, bvadd64(R0, 4024bv64)));
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R1, Gamma_R1 := zero_extend32_32(bvadd32(R0[32:0], 1bv32)), Gamma_R0;
    R0, Gamma_R0 := 126976bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4024bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4024bv64)) || L(mem, bvadd64(R0, 4024bv64)));
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%00000351"} true;
    R0, Gamma_R0 := 126976bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4016bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4016bv64)) || L(mem, bvadd64(R0, 4016bv64)));
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, R0), (gamma_load64(Gamma_mem, R0) || L(mem, R0));
    R1, Gamma_R1 := bvadd64(R0, 18446744073709551615bv64), Gamma_R0;
    R0, Gamma_R0 := 126976bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4016bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4016bv64)) || L(mem, bvadd64(R0, 4016bv64)));
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store64_le(mem, R0, R1), gamma_store64(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%0000037e"} true;
    R0, Gamma_R0 := 126976bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4040bv64)) || L(mem, bvadd64(R0, 4040bv64)));
    call rely();
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, R0)), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R1, Gamma_R1 := zero_extend32_32(bvadd32(R0[32:0], 3bv32)), Gamma_R0;
    R0, Gamma_R0 := 126976bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4040bv64)) || L(mem, bvadd64(R0, 4040bv64)));
    call rely();
    assert (L(mem, bvadd64(R0, 4bv64)) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R0, 4bv64), R1[32:0]), gamma_store32(Gamma_mem, bvadd64(R0, 4bv64), Gamma_R1);
    assume {:captureState "%000003ab"} true;
    R0, Gamma_R0 := 126976bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4048bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4048bv64)) || L(mem, bvadd64(R0, 4048bv64)));
    call rely();
    R0, Gamma_R0 := zero_extend56_8(memory_load8_le(mem, R0)), (gamma_load8(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 1bv32)), Gamma_R0;
    R1, Gamma_R1 := zero_extend32_32((0bv24 ++ R0[8:0])), Gamma_R0;
    R0, Gamma_R0 := 126976bv64, true;
    call rely();
    R0, Gamma_R0 := memory_load64_le(mem, bvadd64(R0, 4048bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4048bv64)) || L(mem, bvadd64(R0, 4048bv64)));
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store8_le(mem, R0, R1[8:0]), gamma_store8(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%000003de"} true;
    R0, Gamma_R0 := 0bv64, true;
    goto main_return;
  main_return:
    assume {:captureState "main_return"} true;
    return;
}

