var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} mem: [bv64]bv8;
const {:extern} $a_addr: bv64;
axiom ($a_addr == 69664bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69648bv64);
const {:extern} $y_addr: bv64;
axiom ($y_addr == 69652bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69656bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 2084bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69648bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69664bv64);
  free ensures (memory_load64_le(mem, 69608bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main_1940();
  modifies Gamma_R0, Gamma_R1, Gamma_mem, R0, R1, mem;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le(mem, 69648bv64) == 416611827717bv64);
  free requires (memory_load64_le(mem, 69656bv64) == 68719476735bv64);
  free requires (memory_load64_le(mem, 69664bv64) == 8589934593bv64);
  free requires (memory_load32_le(mem, 2084bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69576bv64) == 69656bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 69648bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 69664bv64);
  free requires (memory_load64_le(mem, 69608bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  ensures (memory_load32_le(mem, $x_addr) == 6bv32);
  ensures (memory_load32_le(mem, bvadd64($a_addr, 4bv64)) == 4bv32);
  ensures (memory_load32_le(mem, bvadd64($a_addr, 0bv64)) == 1bv32);
  free ensures (memory_load32_le(mem, 2084bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 68984bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69576bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69648bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69664bv64);
  free ensures (memory_load64_le(mem, 69608bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main_1940()
{
  var Gamma_load18: bool;
  var Gamma_load19: bool;
  var Gamma_load20: bool;
  var Gamma_load21: bool;
  var Gamma_load22: bool;
  var Gamma_load23: bool;
  var Gamma_load24: bool;
  var Gamma_load25: bool;
  var Gamma_load26: bool;
  var Gamma_load27: bool;
  var Gamma_load28: bool;
  var Gamma_load29: bool;
  var load18: bv64;
  var load19: bv32;
  var load20: bv64;
  var load21: bv64;
  var load22: bv64;
  var load23: bv64;
  var load24: bv64;
  var load25: bv32;
  var load26: bv64;
  var load27: bv64;
  var load28: bv8;
  var load29: bv64;
  lmain:
    assume {:captureState "lmain"} true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load18, Gamma_load18 := memory_load64_le(mem, bvadd64(R0, 4048bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4048bv64)) || L(mem, bvadd64(R0, 4048bv64)));
    R0, Gamma_R0 := load18, Gamma_load18;
    call rely();
    load19, Gamma_load19 := memory_load32_le(mem, R0), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := zero_extend32_32(load19), Gamma_load19;
    R1, Gamma_R1 := zero_extend32_32(bvadd32(R0[32:0], 1bv32)), Gamma_R0;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load20, Gamma_load20 := memory_load64_le(mem, bvadd64(R0, 4048bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4048bv64)) || L(mem, bvadd64(R0, 4048bv64)));
    R0, Gamma_R0 := load20, Gamma_load20;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, R0, R1[32:0]), gamma_store32(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%00000351"} true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load21, Gamma_load21 := memory_load64_le(mem, bvadd64(R0, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4040bv64)) || L(mem, bvadd64(R0, 4040bv64)));
    R0, Gamma_R0 := load21, Gamma_load21;
    call rely();
    load22, Gamma_load22 := memory_load64_le(mem, R0), (gamma_load64(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := load22, Gamma_load22;
    R1, Gamma_R1 := bvadd64(R0, 18446744073709551615bv64), Gamma_R0;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load23, Gamma_load23 := memory_load64_le(mem, bvadd64(R0, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4040bv64)) || L(mem, bvadd64(R0, 4040bv64)));
    R0, Gamma_R0 := load23, Gamma_load23;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store64_le(mem, R0, R1), gamma_store64(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%0000037e"} true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load24, Gamma_load24 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    R0, Gamma_R0 := load24, Gamma_load24;
    call rely();
    load25, Gamma_load25 := memory_load32_le(mem, R0), (gamma_load32(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := zero_extend32_32(load25), Gamma_load25;
    R1, Gamma_R1 := zero_extend32_32(bvadd32(R0[32:0], 3bv32)), Gamma_R0;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load26, Gamma_load26 := memory_load64_le(mem, bvadd64(R0, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4064bv64)) || L(mem, bvadd64(R0, 4064bv64)));
    R0, Gamma_R0 := load26, Gamma_load26;
    call rely();
    assert (L(mem, bvadd64(R0, 4bv64)) ==> Gamma_R1);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R0, 4bv64), R1[32:0]), gamma_store32(Gamma_mem, bvadd64(R0, 4bv64), Gamma_R1);
    assume {:captureState "%000003ab"} true;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load27, Gamma_load27 := memory_load64_le(mem, bvadd64(R0, 4072bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4072bv64)) || L(mem, bvadd64(R0, 4072bv64)));
    R0, Gamma_R0 := load27, Gamma_load27;
    call rely();
    load28, Gamma_load28 := memory_load8_le(mem, R0), (gamma_load8(Gamma_mem, R0) || L(mem, R0));
    R0, Gamma_R0 := zero_extend56_8(load28), Gamma_load28;
    R0, Gamma_R0 := zero_extend32_32(bvadd32(R0[32:0], 1bv32)), Gamma_R0;
    R1, Gamma_R1 := zero_extend32_32((0bv24 ++ R0[8:0])), Gamma_R0;
    R0, Gamma_R0 := 65536bv64, true;
    call rely();
    load29, Gamma_load29 := memory_load64_le(mem, bvadd64(R0, 4072bv64)), (gamma_load64(Gamma_mem, bvadd64(R0, 4072bv64)) || L(mem, bvadd64(R0, 4072bv64)));
    R0, Gamma_R0 := load29, Gamma_load29;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store8_le(mem, R0, R1[8:0]), gamma_store8(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%000003de"} true;
    R0, Gamma_R0 := 0bv64, true;
    goto main_1940_basil_return;
  main_1940_basil_return:
    assume {:captureState "main_1940_basil_return"} true;
    return;
}

