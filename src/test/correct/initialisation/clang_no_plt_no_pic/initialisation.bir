000005fa: program
000005c8: sub __cxa_finalize(__cxa_finalize_result)
000005fb: __cxa_finalize_result :: out u32 = low:32[R0]

000003c4:
000004bc: R16 := 0x20000
000004c3: R17 := mem[R16 + 8, el]:u64
000004c9: R16 := R16 + 8
000004ce: call R17 with noreturn

000005c9: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005fc: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000029f:
000002a3: #3 := R31 - 0x20
000002a9: mem := mem with [#3, el]:u64 <- R29
000002af: mem := mem with [#3 + 8, el]:u64 <- R30
000002b3: R31 := #3
000002b9: R29 := R31
000002c1: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c6: R19 := 0x20000
000002cd: R0 := pad:64[mem[R19 + 0x48]]
000002d3: when 0:0[R0] goto %000002d1
000005f0: goto %0000038d

0000038d:
00000390: R0 := 0x1F000
00000397: R0 := mem[R0 + 0xFC8, el]:u64
0000039d: when R0 = 0 goto %0000039b
000005f1: goto %000003b4

000003b4:
000003b7: R0 := 0x20000
000003be: R0 := mem[R0 + 0x28, el]:u64
000003c3: R30 := 0x730
000003c6: call @__cxa_finalize with return %0000039b

0000039b:
000003a3: R30 := 0x734
000003a5: call @deregister_tm_clones with return %000003a7

000003a7:
000003aa: R0 := 1
000003b2: mem := mem with [R19 + 0x48] <- 7:0[R0]
000005f2: goto %000002d1

000002d1:
000002db: R19 := mem[R31 + 0x10, el]:u64
000002e2: R29 := mem[R31, el]:u64
000002e7: R30 := mem[R31 + 8, el]:u64
000002eb: R31 := R31 + 0x20
000002f0: call R30 with noreturn

000005cd: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005fd: __libc_start_main_main :: in u64 = R0
000005fe: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005ff: __libc_start_main_arg3 :: in out u64 = R2
00000600: __libc_start_main_auxv :: in out u64 = R3
00000601: __libc_start_main_result :: out u32 = low:32[R0]

000001f8:
000004a6: R16 := 0x20000
000004ad: R17 := mem[R16, el]:u64
000004b3: R16 := R16
000004b8: call R17 with noreturn

000005ce: sub _fini(_fini_result)
00000602: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005cf: sub _init(_init_result)
00000603: _init_result :: out u32 = low:32[R0]

00000516:
0000051c: #6 := R31 - 0x10
00000522: mem := mem with [#6, el]:u64 <- R29
00000528: mem := mem with [#6 + 8, el]:u64 <- R30
0000052c: R31 := #6
00000532: R29 := R31
00000537: R30 := 0x5C8
00000539: call @call_weak_fn with return %0000053b

0000053b:
00000540: R29 := mem[R31, el]:u64
00000545: R30 := mem[R31 + 8, el]:u64
00000549: R31 := R31 + 0x10
0000054e: call R30 with noreturn

000005d0: sub _start(_start_result)
00000604: _start_result :: out u32 = low:32[R0]

000001b9:
000001be: R29 := 0
000001c3: R30 := 0
000001c9: R5 := R0
000001d0: R1 := mem[R31, el]:u64
000001d6: R2 := R31 + 8
000001dc: R6 := R31
000001e1: R0 := 0x1F000
000001e8: R0 := mem[R0 + 0xFD8, el]:u64
000001ed: R3 := 0
000001f2: R4 := 0
000001f7: R30 := 0x670
000001fa: call @__libc_start_main with return %000001fc

000001fc:
000001ff: R30 := 0x674
00000202: call @abort with return %000005f3

000005f3:
000005f4: call @call_weak_fn with noreturn

000005d3: sub abort()


00000200:
000004e8: R16 := 0x20000
000004ef: R17 := mem[R16 + 0x18, el]:u64
000004f5: R16 := R16 + 0x18
000004fa: call R17 with noreturn

000005d4: sub call_weak_fn(call_weak_fn_result)
00000605: call_weak_fn_result :: out u32 = low:32[R0]

00000204:
00000207: R0 := 0x1F000
0000020e: R0 := mem[R0 + 0xFD0, el]:u64
00000214: when R0 = 0 goto %00000212
000005f5: goto %00000404

00000212:
0000021a: call R30 with noreturn

00000404:
00000407: goto @__gmon_start__

00000405:
000004d2: R16 := 0x20000
000004d9: R17 := mem[R16 + 0x10, el]:u64
000004df: R16 := R16 + 0x10
000004e4: call R17 with noreturn

000005d6: sub deregister_tm_clones(deregister_tm_clones_result)
00000606: deregister_tm_clones_result :: out u32 = low:32[R0]

00000220:
00000223: R0 := 0x20000
00000229: R0 := R0 + 0x48
0000022e: R1 := 0x20000
00000234: R1 := R1 + 0x48
0000023a: #1 := ~R0
0000023f: #2 := R1 + ~R0
00000245: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000024f: ZF := #2 + 1 = 0
00000253: NF := 63:63[#2 + 1]
00000259: when ZF goto %00000257
000005f6: goto %000003e6

000003e6:
000003e9: R1 := 0x1F000
000003f0: R1 := mem[R1 + 0xFC0, el]:u64
000003f5: when R1 = 0 goto %00000257
000005f7: goto %000003f9

00000257:
0000025f: call R30 with noreturn

000003f9:
000003fd: R16 := R1
00000402: call R16 with noreturn

000005d9: sub frame_dummy(frame_dummy_result)
00000607: frame_dummy_result :: out u32 = low:32[R0]

000002f6:
000002f8: call @register_tm_clones with noreturn

000005da: sub main(main_argc, main_argv, main_result)
00000608: main_argc :: in u32 = low:32[R0]
00000609: main_argv :: in out u64 = R1
0000060a: main_result :: out u32 = low:32[R0]

000002fa:
000002fd: R8 := 0x20000
00000302: R9 := 0x20000
00000308: R9 := R9 + 0x40
0000030d: R11 := 0x20000
00000314: R10 := pad:64[mem[R11 + 0x30, el]:u32]
0000031a: R10 := pad:64[31:0[R10] + 1]
00000322: mem := mem with [R11 + 0x30, el]:u32 <- 31:0[R10]
00000327: R11 := 0x20000
0000032e: R10 := mem[R11 + 0x38, el]:u64
00000334: #4 := R10 - 2
00000339: VF := extend:65[#4 + 1] <> extend:65[R10] - 1
0000033e: CF := pad:65[#4 + 1] <> pad:65[R10] + 0xFFFFFFFFFFFFFFFF
00000342: ZF := #4 + 1 = 0
00000346: NF := 63:63[#4 + 1]
0000034a: R10 := #4 + 1
00000352: mem := mem with [R11 + 0x38, el]:u64 <- R10
00000359: R8 := pad:64[mem[R8 + 0x40, el]:u32]
0000035f: R8 := pad:64[31:0[R8] + 3]
00000367: mem := mem with [R9 + 4, el]:u32 <- 31:0[R8]
0000036c: R9 := 0x20000
00000373: R8 := pad:64[mem[R9 + 0x34]]
00000379: R8 := pad:64[31:0[R8] + 1]
00000381: mem := mem with [R9 + 0x34] <- 7:0[R8]
00000386: R0 := 0
0000038b: call R30 with noreturn

000005db: sub register_tm_clones(register_tm_clones_result)
0000060b: register_tm_clones_result :: out u32 = low:32[R0]

00000261:
00000264: R0 := 0x20000
0000026a: R0 := R0 + 0x48
0000026f: R1 := 0x20000
00000275: R1 := R1 + 0x48
0000027c: R1 := R1 + ~R0 + 1
00000282: R2 := 0.63:63[R1]
00000289: R1 := R2 + (R1 ~>> 3)
0000028f: R1 := extend:64[63:1[R1]]
00000295: when R1 = 0 goto %00000293
000005f8: goto %000003c8

000003c8:
000003cb: R2 := 0x1F000
000003d2: R2 := mem[R2 + 0xFE0, el]:u64
000003d7: when R2 = 0 goto %00000293
000005f9: goto %000003db

00000293:
0000029b: call R30 with noreturn

000003db:
000003df: R16 := R2
000003e4: call R16 with noreturn
