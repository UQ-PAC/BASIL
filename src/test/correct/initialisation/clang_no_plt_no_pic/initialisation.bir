00000c86: program
00000c70: sub __cxa_finalize(__cxa_finalize_result)
00000c87: __cxa_finalize_result :: out u32 = low:32[R0]

00000a0c:
00000b04: R16 := 0x11000
00000b0b: R17 := mem[R16 + 8, el]:u64
00000b11: R16 := R16 + 8
00000b16: call R17 with noreturn

00000c71: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c88: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008e6:
000008ea: #3 := R31 - 0x20
000008f0: mem := mem with [#3, el]:u64 <- R29
000008f6: mem := mem with [#3 + 8, el]:u64 <- R30
000008fa: R31 := #3
00000900: R29 := R31
00000908: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000090d: R19 := 0x11000
00000914: R0 := pad:64[mem[R19 + 0x48]]
0000091b: when 31:0[R0] <> 0 goto %00000919
00000c72: goto %000009d5

000009d5:
000009d8: R0 := 0x10000
000009df: R0 := mem[R0 + 0xFC8, el]:u64
000009e5: when R0 = 0 goto %000009e3
00000c73: goto %000009fc

000009fc:
000009ff: R0 := 0x11000
00000a06: R0 := mem[R0 + 0x28, el]:u64
00000a0b: R30 := 0x6F0
00000a0e: call @__cxa_finalize with return %000009e3

000009e3:
000009eb: R30 := 0x6F4
000009ed: call @deregister_tm_clones with return %000009ef

000009ef:
000009f2: R0 := 1
000009fa: mem := mem with [R19 + 0x48] <- 7:0[R0]
00000c74: goto %00000919

00000919:
00000923: R19 := mem[R31 + 0x10, el]:u64
0000092a: R29 := mem[R31, el]:u64
0000092f: R30 := mem[R31 + 8, el]:u64
00000933: R31 := R31 + 0x20
00000938: call R30 with noreturn

00000c75: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c89: __libc_start_main_main :: in u64 = R0
00000c8a: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c8b: __libc_start_main_arg3 :: in out u64 = R2
00000c8c: __libc_start_main_auxv :: in out u64 = R3
00000c8d: __libc_start_main_result :: out u32 = low:32[R0]

0000083f:
00000aee: R16 := 0x11000
00000af5: R17 := mem[R16, el]:u64
00000afb: R16 := R16
00000b00: call R17 with noreturn

00000c76: sub _fini(_fini_result)
00000c8e: _fini_result :: out u32 = low:32[R0]

00000667:
0000066d: #0 := R31 - 0x10
00000673: mem := mem with [#0, el]:u64 <- R29
00000679: mem := mem with [#0 + 8, el]:u64 <- R30
0000067d: R31 := #0
00000683: R29 := R31
0000068a: R29 := mem[R31, el]:u64
0000068f: R30 := mem[R31 + 8, el]:u64
00000693: R31 := R31 + 0x10
00000698: call R30 with noreturn

00000c77: sub _init(_init_result)
00000c8f: _init_result :: out u32 = low:32[R0]

00000bbe:
00000bc4: #6 := R31 - 0x10
00000bca: mem := mem with [#6, el]:u64 <- R29
00000bd0: mem := mem with [#6 + 8, el]:u64 <- R30
00000bd4: R31 := #6
00000bda: R29 := R31
00000bdf: R30 := 0x590
00000be1: call @call_weak_fn with return %00000be3

00000be3:
00000be8: R29 := mem[R31, el]:u64
00000bed: R30 := mem[R31 + 8, el]:u64
00000bf1: R31 := R31 + 0x10
00000bf6: call R30 with noreturn

00000c78: sub _start(_start_result)
00000c90: _start_result :: out u32 = low:32[R0]

00000800:
00000805: R29 := 0
0000080a: R30 := 0
00000810: R5 := R0
00000817: R1 := mem[R31, el]:u64
0000081d: R2 := R31 + 8
00000823: R6 := R31
00000828: R0 := 0x10000
0000082f: R0 := mem[R0 + 0xFD8, el]:u64
00000834: R3 := 0
00000839: R4 := 0
0000083e: R30 := 0x630
00000841: call @__libc_start_main with return %00000843

00000843:
00000846: R30 := 0x634
00000849: call @abort with return %00000c79

00000c79:
00000c7a: call @call_weak_fn with noreturn

00000c7b: sub abort()


00000847:
00000b30: R16 := 0x11000
00000b37: R17 := mem[R16 + 0x18, el]:u64
00000b3d: R16 := R16 + 0x18
00000b42: call R17 with noreturn

00000c7c: sub call_weak_fn(call_weak_fn_result)
00000c91: call_weak_fn_result :: out u32 = low:32[R0]

0000084b:
0000084e: R0 := 0x10000
00000855: R0 := mem[R0 + 0xFD0, el]:u64
0000085b: when R0 = 0 goto %00000859
00000c7d: goto %00000a4c

00000859:
00000861: call R30 with noreturn

00000a4c:
00000a4f: goto @__gmon_start__

00000a4d:
00000b1a: R16 := 0x11000
00000b21: R17 := mem[R16 + 0x10, el]:u64
00000b27: R16 := R16 + 0x10
00000b2c: call R17 with noreturn

00000c7e: sub deregister_tm_clones(deregister_tm_clones_result)
00000c92: deregister_tm_clones_result :: out u32 = low:32[R0]

00000867:
0000086a: R0 := 0x11000
00000870: R0 := R0 + 0x48
00000875: R1 := 0x11000
0000087b: R1 := R1 + 0x48
00000881: #1 := ~R0
00000886: #2 := R1 + ~R0
0000088c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000892: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000896: ZF := #2 + 1 = 0
0000089a: NF := 63:63[#2 + 1]
000008a0: when ZF goto %0000089e
00000c7f: goto %00000a2e

00000a2e:
00000a31: R1 := 0x10000
00000a38: R1 := mem[R1 + 0xFC0, el]:u64
00000a3d: when R1 = 0 goto %0000089e
00000c80: goto %00000a41

0000089e:
000008a6: call R30 with noreturn

00000a41:
00000a45: R16 := R1
00000a4a: call R16 with noreturn

00000c81: sub frame_dummy(frame_dummy_result)
00000c93: frame_dummy_result :: out u32 = low:32[R0]

0000093e:
00000940: call @register_tm_clones with noreturn

00000c82: sub main(main_argc, main_argv, main_result)
00000c94: main_argc :: in u32 = low:32[R0]
00000c95: main_argv :: in out u64 = R1
00000c96: main_result :: out u32 = low:32[R0]

00000942:
00000945: R8 := 0x11000
0000094a: R9 := 0x11000
00000950: R9 := R9 + 0x40
00000955: R11 := 0x11000
0000095c: R10 := pad:64[mem[R11 + 0x30, el]:u32]
00000962: R10 := pad:64[31:0[R10] + 1]
0000096a: mem := mem with [R11 + 0x30, el]:u32 <- 31:0[R10]
0000096f: R11 := 0x11000
00000976: R10 := mem[R11 + 0x38, el]:u64
0000097c: #4 := R10 - 2
00000981: VF := extend:65[#4 + 1] <> extend:65[R10] - 1
00000986: CF := pad:65[#4 + 1] <> pad:65[R10] + 0xFFFFFFFFFFFFFFFF
0000098a: ZF := #4 + 1 = 0
0000098e: NF := 63:63[#4 + 1]
00000992: R10 := #4 + 1
0000099a: mem := mem with [R11 + 0x38, el]:u64 <- R10
000009a1: R8 := pad:64[mem[R8 + 0x40, el]:u32]
000009a7: R8 := pad:64[31:0[R8] + 3]
000009af: mem := mem with [R9 + 4, el]:u32 <- 31:0[R8]
000009b4: R9 := 0x11000
000009bb: R8 := pad:64[mem[R9 + 0x34]]
000009c1: R8 := pad:64[31:0[R8] + 1]
000009c9: mem := mem with [R9 + 0x34] <- 7:0[R8]
000009ce: R0 := 0
000009d3: call R30 with noreturn

00000c83: sub register_tm_clones(register_tm_clones_result)
00000c97: register_tm_clones_result :: out u32 = low:32[R0]

000008a8:
000008ab: R0 := 0x11000
000008b1: R0 := R0 + 0x48
000008b6: R1 := 0x11000
000008bc: R1 := R1 + 0x48
000008c3: R1 := R1 + ~R0 + 1
000008c9: R2 := 0.63:63[R1]
000008d0: R1 := R2 + (R1 ~>> 3)
000008d6: R1 := extend:64[63:1[R1]]
000008dc: when R1 = 0 goto %000008da
00000c84: goto %00000a10

00000a10:
00000a13: R2 := 0x10000
00000a1a: R2 := mem[R2 + 0xFE0, el]:u64
00000a1f: when R2 = 0 goto %000008da
00000c85: goto %00000a23

000008da:
000008e2: call R30 with noreturn

00000a23:
00000a27: R16 := R2
00000a2c: call R16 with noreturn
