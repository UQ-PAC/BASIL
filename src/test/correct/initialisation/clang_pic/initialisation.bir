00000615: program
000005e3: sub __cxa_finalize(__cxa_finalize_result)
00000616: __cxa_finalize_result :: out u32 = low:32[R0]

000003dd:
000004d5: R16 := 0x20000
000004dc: R17 := mem[R16 + 8, el]:u64
000004e2: R16 := R16 + 8
000004e7: call R17 with noreturn

000005e4: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000617: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002a7:
000002ab: #3 := R31 - 0x20
000002b1: mem := mem with [#3, el]:u64 <- R29
000002b7: mem := mem with [#3 + 8, el]:u64 <- R30
000002bb: R31 := #3
000002c1: R29 := R31
000002c9: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ce: R19 := 0x20000
000002d5: R0 := pad:64[mem[R19 + 0x48]]
000002db: when 0:0[R0] goto %000002d9
0000060b: goto %000003a6

000003a6:
000003a9: R0 := 0x1F000
000003b0: R0 := mem[R0 + 0xFA8, el]:u64
000003b6: when R0 = 0 goto %000003b4
0000060c: goto %000003cd

000003cd:
000003d0: R0 := 0x20000
000003d7: R0 := mem[R0 + 0x28, el]:u64
000003dc: R30 := 0x7B0
000003df: call @__cxa_finalize with return %000003b4

000003b4:
000003bc: R30 := 0x7B4
000003be: call @deregister_tm_clones with return %000003c0

000003c0:
000003c3: R0 := 1
000003cb: mem := mem with [R19 + 0x48] <- 7:0[R0]
0000060d: goto %000002d9

000002d9:
000002e3: R19 := mem[R31 + 0x10, el]:u64
000002ea: R29 := mem[R31, el]:u64
000002ef: R30 := mem[R31 + 8, el]:u64
000002f3: R31 := R31 + 0x20
000002f8: call R30 with noreturn

000005e8: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000618: __libc_start_main_main :: in u64 = R0
00000619: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000061a: __libc_start_main_arg3 :: in out u64 = R2
0000061b: __libc_start_main_auxv :: in out u64 = R3
0000061c: __libc_start_main_result :: out u32 = low:32[R0]

00000200:
000004bf: R16 := 0x20000
000004c6: R17 := mem[R16, el]:u64
000004cc: R16 := R16
000004d1: call R17 with noreturn

000005e9: sub _fini(_fini_result)
0000061d: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005ea: sub _init(_init_result)
0000061e: _init_result :: out u32 = low:32[R0]

0000052f:
00000535: #6 := R31 - 0x10
0000053b: mem := mem with [#6, el]:u64 <- R29
00000541: mem := mem with [#6 + 8, el]:u64 <- R30
00000545: R31 := #6
0000054b: R29 := R31
00000550: R30 := 0x628
00000552: call @call_weak_fn with return %00000554

00000554:
00000559: R29 := mem[R31, el]:u64
0000055e: R30 := mem[R31 + 8, el]:u64
00000562: R31 := R31 + 0x10
00000567: call R30 with noreturn

000005eb: sub _start(_start_result)
0000061f: _start_result :: out u32 = low:32[R0]

000001c1:
000001c6: R29 := 0
000001cb: R30 := 0
000001d1: R5 := R0
000001d8: R1 := mem[R31, el]:u64
000001de: R2 := R31 + 8
000001e4: R6 := R31
000001e9: R0 := 0x1F000
000001f0: R0 := mem[R0 + 0xFD8, el]:u64
000001f5: R3 := 0
000001fa: R4 := 0
000001ff: R30 := 0x6F0
00000202: call @__libc_start_main with return %00000204

00000204:
00000207: R30 := 0x6F4
0000020a: call @abort with return %0000060e

0000060e:
0000060f: call @call_weak_fn with noreturn

000005ee: sub abort()


00000208:
00000501: R16 := 0x20000
00000508: R17 := mem[R16 + 0x18, el]:u64
0000050e: R16 := R16 + 0x18
00000513: call R17 with noreturn

000005ef: sub call_weak_fn(call_weak_fn_result)
00000620: call_weak_fn_result :: out u32 = low:32[R0]

0000020c:
0000020f: R0 := 0x1F000
00000216: R0 := mem[R0 + 0xFC0, el]:u64
0000021c: when R0 = 0 goto %0000021a
00000610: goto %0000041d

0000021a:
00000222: call R30 with noreturn

0000041d:
00000420: goto @__gmon_start__

0000041e:
000004eb: R16 := 0x20000
000004f2: R17 := mem[R16 + 0x10, el]:u64
000004f8: R16 := R16 + 0x10
000004fd: call R17 with noreturn

000005f1: sub deregister_tm_clones(deregister_tm_clones_result)
00000621: deregister_tm_clones_result :: out u32 = low:32[R0]

00000228:
0000022b: R0 := 0x20000
00000231: R0 := R0 + 0x48
00000236: R1 := 0x20000
0000023c: R1 := R1 + 0x48
00000242: #1 := ~R0
00000247: #2 := R1 + ~R0
0000024d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000253: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000257: ZF := #2 + 1 = 0
0000025b: NF := 63:63[#2 + 1]
00000261: when ZF goto %0000025f
00000611: goto %000003ff

000003ff:
00000402: R1 := 0x1F000
00000409: R1 := mem[R1 + 0xFA0, el]:u64
0000040e: when R1 = 0 goto %0000025f
00000612: goto %00000412

0000025f:
00000267: call R30 with noreturn

00000412:
00000416: R16 := R1
0000041b: call R16 with noreturn

000005f4: sub frame_dummy(frame_dummy_result)
00000622: frame_dummy_result :: out u32 = low:32[R0]

000002fe:
00000300: call @register_tm_clones with noreturn

000005f5: sub main(main_argc, main_argv, main_result)
00000623: main_argc :: in u32 = low:32[R0]
00000624: main_argv :: in out u64 = R1
00000625: main_result :: out u32 = low:32[R0]

00000302:
00000305: R9 := 0x1F000
0000030c: R9 := mem[R9 + 0xFC8, el]:u64
00000311: R10 := 0x1F000
00000318: R10 := mem[R10 + 0xFB8, el]:u64
0000031f: R8 := pad:64[mem[R10, el]:u32]
00000325: R8 := pad:64[31:0[R8] + 1]
0000032d: mem := mem with [R10, el]:u32 <- 31:0[R8]
00000332: R10 := 0x1F000
00000339: R10 := mem[R10 + 0xFB0, el]:u64
00000340: R8 := mem[R10, el]:u64
00000346: #4 := R8 - 2
0000034b: VF := extend:65[#4 + 1] <> extend:65[R8] - 1
00000350: CF := pad:65[#4 + 1] <> pad:65[R8] + 0xFFFFFFFFFFFFFFFF
00000354: ZF := #4 + 1 = 0
00000358: NF := 63:63[#4 + 1]
0000035c: R8 := #4 + 1
00000364: mem := mem with [R10, el]:u64 <- R8
0000036b: R8 := pad:64[mem[R9, el]:u32]
00000371: R8 := pad:64[31:0[R8] + 3]
00000379: mem := mem with [R9 + 4, el]:u32 <- 31:0[R8]
0000037e: R9 := 0x1F000
00000385: R9 := mem[R9 + 0xFD0, el]:u64
0000038c: R8 := pad:64[mem[R9]]
00000392: R8 := pad:64[31:0[R8] + 1]
0000039a: mem := mem with [R9] <- 7:0[R8]
0000039f: R0 := 0
000003a4: call R30 with noreturn

000005f6: sub register_tm_clones(register_tm_clones_result)
00000626: register_tm_clones_result :: out u32 = low:32[R0]

00000269:
0000026c: R0 := 0x20000
00000272: R0 := R0 + 0x48
00000277: R1 := 0x20000
0000027d: R1 := R1 + 0x48
00000284: R1 := R1 + ~R0 + 1
0000028a: R2 := 0.63:63[R1]
00000291: R1 := R2 + (R1 ~>> 3)
00000297: R1 := extend:64[63:1[R1]]
0000029d: when R1 = 0 goto %0000029b
00000613: goto %000003e1

000003e1:
000003e4: R2 := 0x1F000
000003eb: R2 := mem[R2 + 0xFE0, el]:u64
000003f0: when R2 = 0 goto %0000029b
00000614: goto %000003f4

0000029b:
000002a3: call R30 with noreturn

000003f4:
000003f8: R16 := R2
000003fd: call R16 with noreturn
