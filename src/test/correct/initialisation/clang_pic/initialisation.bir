000005fc: program
000005ca: sub __cxa_finalize(__cxa_finalize_result)
000005fd: __cxa_finalize_result :: out u32 = low:32[R0]

000003dd:
000004d5: R16 := 0x11000
000004dc: R17 := mem[R16 + 8, el]:u64
000004e2: R16 := R16 + 8
000004e7: call R17 with noreturn

000005cb: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005fe: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002a6:
000002aa: #3 := R31 - 0x20
000002b0: mem := mem with [#3, el]:u64 <- R29
000002b6: mem := mem with [#3 + 8, el]:u64 <- R30
000002ba: R31 := #3
000002c0: R29 := R31
000002c8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002cd: R19 := 0x11000
000002d4: R0 := pad:64[mem[R19 + 0x48]]
000002db: when 31:0[R0] <> 0 goto %000002d9
000005f2: goto %000003a6

000003a6:
000003a9: R0 := 0x10000
000003b0: R0 := mem[R0 + 0xFA8, el]:u64
000003b6: when R0 = 0 goto %000003b4
000005f3: goto %000003cd

000003cd:
000003d0: R0 := 0x11000
000003d7: R0 := mem[R0 + 0x28, el]:u64
000003dc: R30 := 0x770
000003df: call @__cxa_finalize with return %000003b4

000003b4:
000003bc: R30 := 0x774
000003be: call @deregister_tm_clones with return %000003c0

000003c0:
000003c3: R0 := 1
000003cb: mem := mem with [R19 + 0x48] <- 7:0[R0]
000005f4: goto %000002d9

000002d9:
000002e3: R19 := mem[R31 + 0x10, el]:u64
000002ea: R29 := mem[R31, el]:u64
000002ef: R30 := mem[R31 + 8, el]:u64
000002f3: R31 := R31 + 0x20
000002f8: call R30 with noreturn

000005cf: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005ff: __libc_start_main_main :: in u64 = R0
00000600: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000601: __libc_start_main_arg3 :: in out u64 = R2
00000602: __libc_start_main_auxv :: in out u64 = R3
00000603: __libc_start_main_result :: out u32 = low:32[R0]

000001ff:
000004bf: R16 := 0x11000
000004c6: R17 := mem[R16, el]:u64
000004cc: R16 := R16
000004d1: call R17 with noreturn

000005d0: sub _fini(_fini_result)
00000604: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005d1: sub _init(_init_result)
00000605: _init_result :: out u32 = low:32[R0]

0000052f:
00000535: #6 := R31 - 0x10
0000053b: mem := mem with [#6, el]:u64 <- R29
00000541: mem := mem with [#6 + 8, el]:u64 <- R30
00000545: R31 := #6
0000054b: R29 := R31
00000550: R30 := 0x5F0
00000552: call @call_weak_fn with return %00000554

00000554:
00000559: R29 := mem[R31, el]:u64
0000055e: R30 := mem[R31 + 8, el]:u64
00000562: R31 := R31 + 0x10
00000567: call R30 with noreturn

000005d2: sub _start(_start_result)
00000606: _start_result :: out u32 = low:32[R0]

000001c0:
000001c5: R29 := 0
000001ca: R30 := 0
000001d0: R5 := R0
000001d7: R1 := mem[R31, el]:u64
000001dd: R2 := R31 + 8
000001e3: R6 := R31
000001e8: R0 := 0x10000
000001ef: R0 := mem[R0 + 0xFD8, el]:u64
000001f4: R3 := 0
000001f9: R4 := 0
000001fe: R30 := 0x6B0
00000201: call @__libc_start_main with return %00000203

00000203:
00000206: R30 := 0x6B4
00000209: call @abort with return %000005f5

000005f5:
000005f6: call @call_weak_fn with noreturn

000005d5: sub abort()


00000207:
00000501: R16 := 0x11000
00000508: R17 := mem[R16 + 0x18, el]:u64
0000050e: R16 := R16 + 0x18
00000513: call R17 with noreturn

000005d6: sub call_weak_fn(call_weak_fn_result)
00000607: call_weak_fn_result :: out u32 = low:32[R0]

0000020b:
0000020e: R0 := 0x10000
00000215: R0 := mem[R0 + 0xFC0, el]:u64
0000021b: when R0 = 0 goto %00000219
000005f7: goto %0000041d

00000219:
00000221: call R30 with noreturn

0000041d:
00000420: goto @__gmon_start__

0000041e:
000004eb: R16 := 0x11000
000004f2: R17 := mem[R16 + 0x10, el]:u64
000004f8: R16 := R16 + 0x10
000004fd: call R17 with noreturn

000005d8: sub deregister_tm_clones(deregister_tm_clones_result)
00000608: deregister_tm_clones_result :: out u32 = low:32[R0]

00000227:
0000022a: R0 := 0x11000
00000230: R0 := R0 + 0x48
00000235: R1 := 0x11000
0000023b: R1 := R1 + 0x48
00000241: #1 := ~R0
00000246: #2 := R1 + ~R0
0000024c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000252: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000256: ZF := #2 + 1 = 0
0000025a: NF := 63:63[#2 + 1]
00000260: when ZF goto %0000025e
000005f8: goto %000003ff

000003ff:
00000402: R1 := 0x10000
00000409: R1 := mem[R1 + 0xFA0, el]:u64
0000040e: when R1 = 0 goto %0000025e
000005f9: goto %00000412

0000025e:
00000266: call R30 with noreturn

00000412:
00000416: R16 := R1
0000041b: call R16 with noreturn

000005db: sub frame_dummy(frame_dummy_result)
00000609: frame_dummy_result :: out u32 = low:32[R0]

000002fe:
00000300: call @register_tm_clones with noreturn

000005dc: sub main(main_argc, main_argv, main_result)
0000060a: main_argc :: in u32 = low:32[R0]
0000060b: main_argv :: in out u64 = R1
0000060c: main_result :: out u32 = low:32[R0]

00000302:
00000305: R9 := 0x10000
0000030c: R9 := mem[R9 + 0xFC8, el]:u64
00000311: R10 := 0x10000
00000318: R10 := mem[R10 + 0xFB8, el]:u64
0000031f: R8 := pad:64[mem[R10, el]:u32]
00000325: R8 := pad:64[31:0[R8] + 1]
0000032d: mem := mem with [R10, el]:u32 <- 31:0[R8]
00000332: R10 := 0x10000
00000339: R10 := mem[R10 + 0xFB0, el]:u64
00000340: R8 := mem[R10, el]:u64
00000346: #4 := R8 - 2
0000034b: VF := extend:65[#4 + 1] <> extend:65[R8] - 1
00000350: CF := pad:65[#4 + 1] <> pad:65[R8] + 0xFFFFFFFFFFFFFFFF
00000354: ZF := #4 + 1 = 0
00000358: NF := 63:63[#4 + 1]
0000035c: R8 := #4 + 1
00000364: mem := mem with [R10, el]:u64 <- R8
0000036b: R8 := pad:64[mem[R9, el]:u32]
00000371: R8 := pad:64[31:0[R8] + 3]
00000379: mem := mem with [R9 + 4, el]:u32 <- 31:0[R8]
0000037e: R9 := 0x10000
00000385: R9 := mem[R9 + 0xFD0, el]:u64
0000038c: R8 := pad:64[mem[R9]]
00000392: R8 := pad:64[31:0[R8] + 1]
0000039a: mem := mem with [R9] <- 7:0[R8]
0000039f: R0 := 0
000003a4: call R30 with noreturn

000005dd: sub register_tm_clones(register_tm_clones_result)
0000060d: register_tm_clones_result :: out u32 = low:32[R0]

00000268:
0000026b: R0 := 0x11000
00000271: R0 := R0 + 0x48
00000276: R1 := 0x11000
0000027c: R1 := R1 + 0x48
00000283: R1 := R1 + ~R0 + 1
00000289: R2 := 0.63:63[R1]
00000290: R1 := R2 + (R1 ~>> 3)
00000296: R1 := extend:64[63:1[R1]]
0000029c: when R1 = 0 goto %0000029a
000005fa: goto %000003e1

000003e1:
000003e4: R2 := 0x10000
000003eb: R2 := mem[R2 + 0xFE0, el]:u64
000003f0: when R2 = 0 goto %0000029a
000005fb: goto %000003f4

0000029a:
000002a2: call R30 with noreturn

000003f4:
000003f8: R16 := R2
000003fd: call R16 with noreturn
