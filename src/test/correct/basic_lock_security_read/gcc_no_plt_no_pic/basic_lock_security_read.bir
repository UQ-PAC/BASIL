00000611: program
000005db: sub __cxa_finalize(__cxa_finalize_result)
00000612: __cxa_finalize_result :: out u32 = low:32[R0]

00000383:
0000047b: R16 := 0x20000
00000482: R17 := mem[R16 + 8, el]:u64
00000488: R16 := R16 + 8
0000048d: call R17 with noreturn

000005dc: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000613: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000287:
0000028b: #3 := R31 - 0x20
00000291: mem := mem with [#3, el]:u64 <- R29
00000297: mem := mem with [#3 + 8, el]:u64 <- R30
0000029b: R31 := #3
000002a1: R29 := R31
000002a9: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ae: R19 := 0x20000
000002b5: R0 := pad:64[mem[R19 + 0x30]]
000002bb: when 0:0[R0] goto %000002b9
00000605: goto %0000034c

0000034c:
0000034f: R0 := 0x1F000
00000356: R0 := mem[R0 + 0xFC8, el]:u64
0000035c: when R0 = 0 goto %0000035a
00000606: goto %00000373

00000373:
00000376: R0 := 0x20000
0000037d: R0 := mem[R0 + 0x28, el]:u64
00000382: R30 := 0x6F0
00000385: call @__cxa_finalize with return %0000035a

0000035a:
00000362: R30 := 0x6F4
00000364: call @deregister_tm_clones with return %00000366

00000366:
00000369: R0 := 1
00000371: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000607: goto %000002b9

000002b9:
000002c3: R19 := mem[R31 + 0x10, el]:u64
000002ca: R29 := mem[R31, el]:u64
000002cf: R30 := mem[R31 + 8, el]:u64
000002d3: R31 := R31 + 0x20
000002d8: call R30 with noreturn

000005e0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000614: __libc_start_main_main :: in u64 = R0
00000615: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000616: __libc_start_main_arg3 :: in out u64 = R2
00000617: __libc_start_main_auxv :: in out u64 = R3
00000618: __libc_start_main_result :: out u32 = low:32[R0]

000001e0:
00000465: R16 := 0x20000
0000046c: R17 := mem[R16, el]:u64
00000472: R16 := R16
00000477: call R17 with noreturn

000005e1: sub _fini(_fini_result)
00000619: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000005e2: sub _init(_init_result)
0000061a: _init_result :: out u32 = low:32[R0]

0000052f:
00000535: #6 := R31 - 0x10
0000053b: mem := mem with [#6, el]:u64 <- R29
00000541: mem := mem with [#6 + 8, el]:u64 <- R30
00000545: R31 := #6
0000054b: R29 := R31
00000550: R30 := 0x590
00000552: call @call_weak_fn with return %00000554

00000554:
00000559: R29 := mem[R31, el]:u64
0000055e: R30 := mem[R31 + 8, el]:u64
00000562: R31 := R31 + 0x10
00000567: call R30 with noreturn

000005e3: sub _start(_start_result)
0000061b: _start_result :: out u32 = low:32[R0]

000001a1:
000001a6: R29 := 0
000001ab: R30 := 0
000001b1: R5 := R0
000001b8: R1 := mem[R31, el]:u64
000001be: R2 := R31 + 8
000001c4: R6 := R31
000001c9: R0 := 0x1F000
000001d0: R0 := mem[R0 + 0xFD8, el]:u64
000001d5: R3 := 0
000001da: R4 := 0
000001df: R30 := 0x630
000001e2: call @__libc_start_main with return %000001e4

000001e4:
000001e7: R30 := 0x634
000001ea: call @abort with return %00000608

00000608:
00000609: call @call_weak_fn with noreturn

000005e6: sub abort()


000001e8:
000004a7: R16 := 0x20000
000004ae: R17 := mem[R16 + 0x18, el]:u64
000004b4: R16 := R16 + 0x18
000004b9: call R17 with noreturn

000005e7: sub call_weak_fn(call_weak_fn_result)
0000061c: call_weak_fn_result :: out u32 = low:32[R0]

000001ec:
000001ef: R0 := 0x1F000
000001f6: R0 := mem[R0 + 0xFD0, el]:u64
000001fc: when R0 = 0 goto %000001fa
0000060a: goto %000003c3

000001fa:
00000202: call R30 with noreturn

000003c3:
000003c6: goto @__gmon_start__

000003c4:
00000491: R16 := 0x20000
00000498: R17 := mem[R16 + 0x10, el]:u64
0000049e: R16 := R16 + 0x10
000004a3: call R17 with noreturn

000005e9: sub deregister_tm_clones(deregister_tm_clones_result)
0000061d: deregister_tm_clones_result :: out u32 = low:32[R0]

00000208:
0000020b: R0 := 0x20000
00000211: R0 := R0 + 0x30
00000216: R1 := 0x20000
0000021c: R1 := R1 + 0x30
00000222: #1 := ~R0
00000227: #2 := R1 + ~R0
0000022d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000233: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000237: ZF := #2 + 1 = 0
0000023b: NF := 63:63[#2 + 1]
00000241: when ZF goto %0000023f
0000060b: goto %000003a5

000003a5:
000003a8: R1 := 0x1F000
000003af: R1 := mem[R1 + 0xFC0, el]:u64
000003b4: when R1 = 0 goto %0000023f
0000060c: goto %000003b8

0000023f:
00000247: call R30 with noreturn

000003b8:
000003bc: R16 := R1
000003c1: call R16 with noreturn

000005ec: sub frame_dummy(frame_dummy_result)
0000061e: frame_dummy_result :: out u32 = low:32[R0]

000002de:
000002e0: call @register_tm_clones with noreturn

000005ed: sub main(main_argc, main_argv, main_result)
0000061f: main_argc :: in u32 = low:32[R0]
00000620: main_argv :: in out u64 = R1
00000621: main_result :: out u32 = low:32[R0]

000002e2:
000002e6: R31 := R31 - 0x10
000002ed: mem := mem with [R31 + 0xC, el]:u32 <- 0
000002f2: R0 := 0x20000
000002f8: R0 := R0 + 0x38
000002ff: R0 := pad:64[mem[R0, el]:u32]
00000305: #4 := 31:0[R0] - 1
0000030a: VF := extend:33[#4 + 1] <> extend:33[31:0[R0]] + 0
0000030f: CF := pad:33[#4 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000313: ZF := #4 + 1 = 0
00000317: NF := 31:31[#4 + 1]
0000031d: when ZF <> 1 goto %0000031b
0000060d: goto %00000332

00000332:
00000335: R0 := 0x20000
0000033b: R0 := R0 + 0x34
00000342: R0 := pad:64[mem[R0, el]:u32]
0000034a: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000060e: goto %0000031b

0000031b:
00000325: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000032b: R31 := R31 + 0x10
00000330: call R30 with noreturn

000005f0: sub register_tm_clones(register_tm_clones_result)
00000622: register_tm_clones_result :: out u32 = low:32[R0]

00000249:
0000024c: R0 := 0x20000
00000252: R0 := R0 + 0x30
00000257: R1 := 0x20000
0000025d: R1 := R1 + 0x30
00000264: R1 := R1 + ~R0 + 1
0000026a: R2 := 0.63:63[R1]
00000271: R1 := R2 + (R1 ~>> 3)
00000277: R1 := extend:64[63:1[R1]]
0000027d: when R1 = 0 goto %0000027b
0000060f: goto %00000387

00000387:
0000038a: R2 := 0x1F000
00000391: R2 := mem[R2 + 0xFE0, el]:u64
00000396: when R2 = 0 goto %0000027b
00000610: goto %0000039a

0000027b:
00000283: call R30 with noreturn

0000039a:
0000039e: R16 := R2
000003a3: call R16 with noreturn
