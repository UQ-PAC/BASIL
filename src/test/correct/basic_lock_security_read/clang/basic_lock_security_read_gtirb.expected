var {:extern} $CF: bv1;
var {:extern} $Gamma_CF: bool;
var {:extern} $Gamma_NF: bool;
var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_VF: bool;
var {:extern} $Gamma_ZF: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $NF: bv1;
var {:extern} $R0: bv64;
var {:extern} $R31: bv64;
var {:extern} $R8: bv64;
var {:extern} $VF: bv1;
var {:extern} $ZF: bv1;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69688bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69684bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  (if (#index == $x_addr) then (memory_load32_le(#mem$in, $z_addr) == 0bv32) else (if (#index == $z_addr) then true else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures (forall #i: bv64::  ((($mem[#i] == old($mem[#i])) ==> ($Gamma_mem[#i] == old($Gamma_mem[#i])))));
  ensures ((old(memory_load32_le($mem, $z_addr)) == 0bv32) ==> ((memory_load32_le($mem, $x_addr) == old(memory_load32_le($mem, $x_addr))) && (memory_load32_le($mem, $z_addr) == old(memory_load32_le($mem, $z_addr)))));
  free ensures (memory_load32_le($mem, 1896bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ((old(memory_load32_le($mem, $z_addr)) == 0bv32) ==> ((memory_load32_le($mem, $x_addr) == old(memory_load32_le($mem, $x_addr))) && (memory_load32_le($mem, $z_addr) == old(memory_load32_le($mem, $z_addr)))));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

implementation {:extern} p$rely_reflexive()
{
  assert ((memory_load32_le($mem, $z_addr) == 0bv32) ==> ((memory_load32_le($mem, $x_addr) == memory_load32_le($mem, $x_addr)) && (memory_load32_le($mem, $z_addr) == memory_load32_le($mem, $z_addr))));
}

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

implementation {:extern} p$guarantee_reflexive()
{
  assert ((memory_load32_le($mem, $z_addr) == memory_load32_le($mem, $z_addr)) && (memory_load32_le($mem, $x_addr) == memory_load32_le($mem, $x_addr)));
}

procedure p$main_1812();
  modifies $CF, $Gamma_CF, $Gamma_NF, $Gamma_R0, $Gamma_R31, $Gamma_R8, $Gamma_VF, $Gamma_ZF, $Gamma_mem, $Gamma_stack, $NF, $R0, $R31, $R8, $VF, $ZF, $mem, $stack;
  free requires (memory_load64_le($mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le($mem, 1896bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 1896bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

implementation p$main_1812()
{
  var #Cse0__5_7: bv32;
  var #Gamma_Cse0__5_7: bool;
  var #Gamma_load20: bool;
  var #Gamma_load21: bool;
  var #Gamma_load22: bool;
  var #load20: bv32;
  var #load21: bv32;
  var #load22: bv32;
  b#main_entry:
    assume {:captureState "main_entry (9r6UOwhWT0e4r/v5VvoQOg==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551600bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), 0bv32), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), true);
    assume {:captureState "1816_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 8bv64), 0bv32), gamma_store32($Gamma_stack, bvadd64($R31, 8bv64), true);
    assume {:captureState "1820_0"} true;
    $R8, $Gamma_R8 := 69632bv64, true;
    call p$rely();
    #load22, #Gamma_load22 := memory_load32_le($mem, bvadd64($R8, 52bv64)), (gamma_load32($Gamma_mem, bvadd64($R8, 52bv64)) || L($mem, bvadd64($R8, 52bv64)));
    $R8, $Gamma_R8 := zero_extend32_32(#load22), #Gamma_load22;
    #Cse0__5_7, #Gamma_Cse0__5_7 := bvadd32($R8[32:0], 0bv32), $Gamma_R8;
    $VF, $Gamma_VF := bvnot1(bvcomp32(#Cse0__5_7, #Cse0__5_7)), #Gamma_Cse0__5_7;
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_7), bvadd33(zero_extend1_32($R8[32:0]), 4294967296bv33))), ($Gamma_R8 && #Gamma_Cse0__5_7);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_7, 0bv32), #Gamma_Cse0__5_7;
    $NF, $Gamma_NF := #Cse0__5_7[32:31], #Gamma_Cse0__5_7;
    $R8, $Gamma_R8 := zero_extend32_32(#Cse0__5_7), #Gamma_Cse0__5_7;
    assert $Gamma_ZF;
    goto b#main_13, b#main_15;
  b#main_15:
    assume {:captureState "main_15"} true;
    assume (!($ZF == 1bv1));
    $R8, $Gamma_R8 := 1bv64, true;
    assert $Gamma_R8;
    goto b#main_5, b#main_11;
  b#main_13:
    assume {:captureState "main_13"} true;
    assume ($ZF == 1bv1);
    $R8, $Gamma_R8 := 0bv64, true;
    assert $Gamma_R8;
    goto b#main_5, b#main_11;
  b#main_11:
    assume {:captureState "main_11"} true;
    assume (!($R8[1:0] == 1bv1));
    goto b#main_9;
  b#main_9:
    assume {:captureState "main_9 (cbw8VJ/4TNWMhitLYT/zHw==)"} true;
    goto b#main_7;
  b#main_7:
    assume {:captureState "main_7 (u39p8w6rTnOZAd6DunNDgQ==)"} true;
    $R8, $Gamma_R8 := 69632bv64, true;
    call p$rely();
    #load21, #Gamma_load21 := memory_load32_le($mem, bvadd64($R8, 56bv64)), (gamma_load32($Gamma_mem, bvadd64($R8, 56bv64)) || L($mem, bvadd64($R8, 56bv64)));
    $R8, $Gamma_R8 := zero_extend32_32(#load21), #Gamma_load21;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 8bv64), $R8[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 8bv64), $Gamma_R8);
    assume {:captureState "1856_0"} true;
    goto b#main_3;
  b#main_5:
    assume {:captureState "main_5"} true;
    assume ($R8[1:0] == 1bv1);
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (hMq94Gt8Rsi1RNq0G5+fMQ==)"} true;
    #load20, #Gamma_load20 := memory_load32_le($stack, bvadd64($R31, 8bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 8bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load20), #Gamma_load20;
    $R31, $Gamma_R31 := bvadd64($R31, 16bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

