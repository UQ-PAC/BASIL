000005d4: program
000005a0: sub __cxa_finalize(__cxa_finalize_result)
000005d5: __cxa_finalize_result :: out u32 = low:32[R0]

000003b7:
000004af: R16 := 0x11000
000004b6: R17 := mem[R16 + 8, el]:u64
000004bc: R16 := R16 + 8
000004c1: call R17 with noreturn

000005a1: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005d6: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000296:
0000029a: #3 := R31 - 0x20
000002a0: mem := mem with [#3, el]:u64 <- R29
000002a6: mem := mem with [#3 + 8, el]:u64 <- R30
000002aa: R31 := #3
000002b0: R29 := R31
000002b8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002bd: R19 := 0x11000
000002c4: R0 := pad:64[mem[R19 + 0x30]]
000002cb: when 31:0[R0] <> 0 goto %000002c9
000005c9: goto %00000380

00000380:
00000383: R0 := 0x10000
0000038a: R0 := mem[R0 + 0xFB8, el]:u64
00000390: when R0 = 0 goto %0000038e
000005ca: goto %000003a7

000003a7:
000003aa: R0 := 0x11000
000003b1: R0 := mem[R0 + 0x28, el]:u64
000003b6: R30 := 0x730
000003b9: call @__cxa_finalize with return %0000038e

0000038e:
00000396: R30 := 0x734
00000398: call @deregister_tm_clones with return %0000039a

0000039a:
0000039d: R0 := 1
000003a5: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005cb: goto %000002c9

000002c9:
000002d3: R19 := mem[R31 + 0x10, el]:u64
000002da: R29 := mem[R31, el]:u64
000002df: R30 := mem[R31 + 8, el]:u64
000002e3: R31 := R31 + 0x20
000002e8: call R30 with noreturn

000005a5: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005d7: __libc_start_main_main :: in u64 = R0
000005d8: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005d9: __libc_start_main_arg3 :: in out u64 = R2
000005da: __libc_start_main_auxv :: in out u64 = R3
000005db: __libc_start_main_result :: out u32 = low:32[R0]

000001ef:
00000499: R16 := 0x11000
000004a0: R17 := mem[R16, el]:u64
000004a6: R16 := R16
000004ab: call R17 with noreturn

000005a6: sub _fini(_fini_result)
000005dc: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005a7: sub _init(_init_result)
000005dd: _init_result :: out u32 = low:32[R0]

00000509:
0000050f: #6 := R31 - 0x10
00000515: mem := mem with [#6, el]:u64 <- R29
0000051b: mem := mem with [#6 + 8, el]:u64 <- R30
0000051f: R31 := #6
00000525: R29 := R31
0000052a: R30 := 0x5C0
0000052c: call @call_weak_fn with return %0000052e

0000052e:
00000533: R29 := mem[R31, el]:u64
00000538: R30 := mem[R31 + 8, el]:u64
0000053c: R31 := R31 + 0x10
00000541: call R30 with noreturn

000005a8: sub _start(_start_result)
000005de: _start_result :: out u32 = low:32[R0]

000001b0:
000001b5: R29 := 0
000001ba: R30 := 0
000001c0: R5 := R0
000001c7: R1 := mem[R31, el]:u64
000001cd: R2 := R31 + 8
000001d3: R6 := R31
000001d8: R0 := 0x10000
000001df: R0 := mem[R0 + 0xFD8, el]:u64
000001e4: R3 := 0
000001e9: R4 := 0
000001ee: R30 := 0x670
000001f1: call @__libc_start_main with return %000001f3

000001f3:
000001f6: R30 := 0x674
000001f9: call @abort with return %000005cc

000005cc:
000005cd: call @call_weak_fn with noreturn

000005ab: sub abort()


000001f7:
000004db: R16 := 0x11000
000004e2: R17 := mem[R16 + 0x18, el]:u64
000004e8: R16 := R16 + 0x18
000004ed: call R17 with noreturn

000005ac: sub call_weak_fn(call_weak_fn_result)
000005df: call_weak_fn_result :: out u32 = low:32[R0]

000001fb:
000001fe: R0 := 0x10000
00000205: R0 := mem[R0 + 0xFD0, el]:u64
0000020b: when R0 = 0 goto %00000209
000005ce: goto %000003f7

00000209:
00000211: call R30 with noreturn

000003f7:
000003fa: goto @__gmon_start__

000003f8:
000004c5: R16 := 0x11000
000004cc: R17 := mem[R16 + 0x10, el]:u64
000004d2: R16 := R16 + 0x10
000004d7: call R17 with noreturn

000005ae: sub deregister_tm_clones(deregister_tm_clones_result)
000005e0: deregister_tm_clones_result :: out u32 = low:32[R0]

00000217:
0000021a: R0 := 0x11000
00000220: R0 := R0 + 0x30
00000225: R1 := 0x11000
0000022b: R1 := R1 + 0x30
00000231: #1 := ~R0
00000236: #2 := R1 + ~R0
0000023c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000242: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000246: ZF := #2 + 1 = 0
0000024a: NF := 63:63[#2 + 1]
00000250: when ZF goto %0000024e
000005cf: goto %000003d9

000003d9:
000003dc: R1 := 0x10000
000003e3: R1 := mem[R1 + 0xFB0, el]:u64
000003e8: when R1 = 0 goto %0000024e
000005d0: goto %000003ec

0000024e:
00000256: call R30 with noreturn

000003ec:
000003f0: R16 := R1
000003f5: call R16 with noreturn

000005b1: sub frame_dummy(frame_dummy_result)
000005e1: frame_dummy_result :: out u32 = low:32[R0]

000002ee:
000002f0: call @register_tm_clones with noreturn

000005b2: sub main(main_argc, main_argv, main_result)
000005e2: main_argc :: in u32 = low:32[R0]
000005e3: main_argv :: in out u64 = R1
000005e4: main_result :: out u32 = low:32[R0]

000002f2:
000002f6: R31 := R31 - 0x10
000002fd: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000304: mem := mem with [R31 + 8, el]:u32 <- 0
00000309: R8 := 0x10000
00000310: R8 := mem[R8 + 0xFC0, el]:u64
00000317: R8 := pad:64[mem[R8, el]:u32]
0000031d: #4 := 31:0[R8] - 1
00000322: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
00000327: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
0000032b: ZF := #4 + 1 = 0
0000032f: NF := 31:31[#4 + 1]
00000333: R8 := pad:64[#4 + 1]
0000033f: when ZF goto %00000338
00000340: goto %0000033b

0000033b:
0000033c: R8 := 1
00000342: goto %0000033e

00000338:
00000339: R8 := 0
00000341: goto %0000033e

0000033e:
00000348: when 0:0[R8] goto %00000346
000005d1: goto %0000035d

0000035d:
00000360: goto %0000035e

0000035e:
00000364: R8 := 0x10000
0000036b: R8 := mem[R8 + 0xFC8, el]:u64
00000372: R8 := pad:64[mem[R8, el]:u32]
0000037a: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000037e: goto %00000346

00000346:
00000350: R0 := pad:64[mem[R31 + 8, el]:u32]
00000356: R31 := R31 + 0x10
0000035b: call R30 with noreturn

000005b4: sub register_tm_clones(register_tm_clones_result)
000005e5: register_tm_clones_result :: out u32 = low:32[R0]

00000258:
0000025b: R0 := 0x11000
00000261: R0 := R0 + 0x30
00000266: R1 := 0x11000
0000026c: R1 := R1 + 0x30
00000273: R1 := R1 + ~R0 + 1
00000279: R2 := 0.63:63[R1]
00000280: R1 := R2 + (R1 ~>> 3)
00000286: R1 := extend:64[63:1[R1]]
0000028c: when R1 = 0 goto %0000028a
000005d2: goto %000003bb

000003bb:
000003be: R2 := 0x10000
000003c5: R2 := mem[R2 + 0xFE0, el]:u64
000003ca: when R2 = 0 goto %0000028a
000005d3: goto %000003ce

0000028a:
00000292: call R30 with noreturn

000003ce:
000003d2: R16 := R2
000003d7: call R16 with noreturn
