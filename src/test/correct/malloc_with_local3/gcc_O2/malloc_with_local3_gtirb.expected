var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R19: bool;
var {:extern} Gamma_R2: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R3: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R19: bv64;
var {:extern} R2: bv64;
var {:extern} R29: bv64;
var {:extern} R3: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2264bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 24"} zero_extend24_8(bv8) returns (bv32);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 2336bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2337bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2338bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure FUN_690_1680();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 2336bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2337bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2338bv64) == 0bv8);
  free requires (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 2336bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2337bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2338bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation FUN_690_1680()
{
  var Gamma_load1: bool;
  var load1: bv64;
  FUN_690_1680__0__mY9s1Q7ERri98AKVPtsmww:
    assume {:captureState "FUN_690_1680__0__mY9s1Q7ERri98AKVPtsmww"} true;
    R16, Gamma_R16 := 65536bv64, true;
    call rely();
    load1, Gamma_load1 := memory_load64_le(mem, bvadd64(R16, 4008bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 4008bv64)) || L(mem, bvadd64(R16, 4008bv64)));
    R17, Gamma_R17 := load1, Gamma_load1;
    R16, Gamma_R16 := bvadd64(R16, 4008bv64), Gamma_R16;
    call malloc();
    goto FUN_690_1680_basil_return;
  FUN_690_1680_basil_return:
    assume {:captureState "FUN_690_1680_basil_return"} true;
    return;
}

procedure FUN_6d0_1744();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 2336bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2337bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2338bv64) == 0bv8);
  free requires (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 2336bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2337bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2338bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation FUN_6d0_1744()
{
  var Gamma_load2: bool;
  var load2: bv64;
  FUN_6d0_1744__0__TBxeE0XrQd~VB7pBlFfEjQ:
    assume {:captureState "FUN_6d0_1744__0__TBxeE0XrQd~VB7pBlFfEjQ"} true;
    R16, Gamma_R16 := 65536bv64, true;
    call rely();
    load2, Gamma_load2 := memory_load64_le(mem, bvadd64(R16, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 4040bv64)) || L(mem, bvadd64(R16, 4040bv64)));
    R17, Gamma_R17 := load2, Gamma_load2;
    R16, Gamma_R16 := bvadd64(R16, 4040bv64), Gamma_R16;
    call #free();
    goto FUN_6d0_1744_basil_return;
  FUN_6d0_1744_basil_return:
    assume {:captureState "FUN_6d0_1744_basil_return"} true;
    return;
}

procedure FUN_6a0_1696();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 2336bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2337bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2338bv64) == 0bv8);
  free requires (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 2336bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2337bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2338bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation FUN_6a0_1696()
{
  var Gamma_load8: bool;
  var load8: bv64;
  FUN_6a0_1696__0__O00NhqclR_SCVHbvubgdHA:
    assume {:captureState "FUN_6a0_1696__0__O00NhqclR_SCVHbvubgdHA"} true;
    R16, Gamma_R16 := 65536bv64, true;
    call rely();
    load8, Gamma_load8 := memory_load64_le(mem, bvadd64(R16, 4016bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 4016bv64)) || L(mem, bvadd64(R16, 4016bv64)));
    R17, Gamma_R17 := load8, Gamma_load8;
    R16, Gamma_R16 := bvadd64(R16, 4016bv64), Gamma_R16;
    call __printf_chk();
    goto FUN_6a0_1696_basil_return;
  FUN_6a0_1696_basil_return:
    assume {:captureState "FUN_6a0_1696_basil_return"} true;
    return;
}

procedure main_1792();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R19, Gamma_R2, Gamma_R29, Gamma_R3, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R19, R2, R29, R3, R30, R31, mem, stack;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 2336bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2337bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2338bv64) == 0bv8);
  free requires (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R19 == old(Gamma_R19));
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R19 == old(R19));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 2336bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2337bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2338bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main_1792()
{
  var Cse0__5_2_0: bv64;
  var Gamma_Cse0__5_2_0: bool;
  var Gamma_load15: bool;
  var Gamma_load16: bool;
  var Gamma_load17: bool;
  var load15: bv64;
  var load16: bv64;
  var load17: bv64;
  main_1792__0__EGWpjBzGR2uGhrMJAyG~3g:
    assume {:captureState "main_1792__0__EGWpjBzGR2uGhrMJAyG~3g"} true;
    Cse0__5_2_0, Gamma_Cse0__5_2_0 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5_2_0, R29), gamma_store64(Gamma_stack, Cse0__5_2_0, Gamma_R29);
    assume {:captureState "1792_1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5_2_0, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5_2_0, 8bv64), Gamma_R30);
    assume {:captureState "1792_2"} true;
    R31, Gamma_R31 := Cse0__5_2_0, Gamma_Cse0__5_2_0;
    R0, Gamma_R0 := 1bv64, true;
    R29, Gamma_R29 := R31, Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R19), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R19);
    assume {:captureState "1804_0"} true;
    R30, Gamma_R30 := 1812bv64, true;
    call FUN_690_1680();
    goto main_1792__1__1G3_7a3~SsmqJyDUhqAFGg;
  main_1792__1__1G3_7a3~SsmqJyDUhqAFGg:
    assume {:captureState "main_1792__1__1G3_7a3~SsmqJyDUhqAFGg"} true;
    R1, Gamma_R1 := 65bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store8_le(mem, R0, R1[8:0]), gamma_store8(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "1816_0"} true;
    R19, Gamma_R19 := R0, Gamma_R0;
    R30, Gamma_R30 := 1828bv64, true;
    call printCharValue_2208();
    goto main_1792__2__rV0qH7AUTYCipfKaroPpAw;
  main_1792__2__rV0qH7AUTYCipfKaroPpAw:
    assume {:captureState "main_1792__2__rV0qH7AUTYCipfKaroPpAw"} true;
    R2, Gamma_R2 := 42bv64, true;
    R1, Gamma_R1 := 0bv64, true;
    R0, Gamma_R0 := 1bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 2296bv64), Gamma_R1;
    R30, Gamma_R30 := 1848bv64, true;
    call FUN_6a0_1696();
    goto main_1792__3__IxBBXD6FTfupEp7ajNK8uA;
  main_1792__3__IxBBXD6FTfupEp7ajNK8uA:
    assume {:captureState "main_1792__3__IxBBXD6FTfupEp7ajNK8uA"} true;
    R1, Gamma_R1 := 0bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 2312bv64), Gamma_R1;
    R2, Gamma_R2 := 10bv64, true;
    R0, Gamma_R0 := 1bv64, true;
    R30, Gamma_R30 := 1868bv64, true;
    call FUN_6a0_1696();
    goto main_1792__4__aEiQ_BI9RcCTTmScF~6KKw;
  main_1792__4__aEiQ_BI9RcCTTmScF~6KKw:
    assume {:captureState "main_1792__4__aEiQ_BI9RcCTTmScF~6KKw"} true;
    R0, Gamma_R0 := R19, Gamma_R19;
    R30, Gamma_R30 := 1812bv64, true;
    call FUN_6d0_1744();
    goto main_1792__5__WNzpebfFQGeh7VGQ52Mh0w;
  main_1792__5__WNzpebfFQGeh7VGQ52Mh0w:
    assume {:captureState "main_1792__5__WNzpebfFQGeh7VGQ52Mh0w"} true;
    R0, Gamma_R0 := 0bv64, true;
    load15, Gamma_load15 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R19, Gamma_R19 := load15, Gamma_load15;
    load16, Gamma_load16 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R29, Gamma_R29 := load16, Gamma_load16;
    load17, Gamma_load17 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := load17, Gamma_load17;
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto main_1792_basil_return;
  main_1792_basil_return:
    assume {:captureState "main_1792_basil_return"} true;
    return;
}

procedure printCharValue_2208();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R2, Gamma_R3, Gamma_mem, R0, R1, R16, R17, R2, R3, mem;
  free requires (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 2336bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2337bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2338bv64) == 0bv8);
  free requires (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 2336bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2337bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2338bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation printCharValue_2208()
{
  var Gamma_load23: bool;
  var load23: bv8;
  printCharValue_2208__0__PI~q8_8oRjGuRvGwgENEcw:
    assume {:captureState "printCharValue_2208__0__PI~q8_8oRjGuRvGwgENEcw"} true;
    R3, Gamma_R3 := R0, Gamma_R0;
    R0, Gamma_R0 := 1bv64, true;
    R1, Gamma_R1 := 0bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 2272bv64), Gamma_R1;
    call rely();
    load23, Gamma_load23 := memory_load8_le(mem, R3), (gamma_load8(Gamma_mem, R3) || L(mem, R3));
    R2, Gamma_R2 := zero_extend32_32(zero_extend24_8(load23)), Gamma_load23;
    R2, Gamma_R2 := zero_extend32_32(bvadd32(R2[32:0], R0[32:0])), (Gamma_R0 && Gamma_R2);
    R2, Gamma_R2 := zero_extend32_32((0bv24 ++ R2[8:0])), Gamma_R2;
    call rely();
    assert (L(mem, R3) ==> Gamma_R2);
    mem, Gamma_mem := memory_store8_le(mem, R3, R2[8:0]), gamma_store8(Gamma_mem, R3, Gamma_R2);
    assume {:captureState "2236_0"} true;
    call FUN_6a0_1696();
    goto printCharValue_2208_basil_return;
  printCharValue_2208_basil_return:
    assume {:captureState "printCharValue_2208_basil_return"} true;
    return;
}

procedure malloc();
  free requires (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 2336bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2337bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2338bv64) == 0bv8);
  free requires (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 2336bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2337bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2338bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure #free();
  free requires (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 2336bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2337bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2338bv64) == 0bv8);
  free requires (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 2336bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2337bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2338bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure __printf_chk();
  free requires (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 2336bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2337bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2338bv64) == 0bv8);
  free requires (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 2264bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 2272bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 2280bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 2288bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 2296bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 2304bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 2312bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 2320bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 2328bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 2336bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 2337bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2338bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 68992bv64) == 2192bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 2112bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

