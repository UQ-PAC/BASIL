var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2264bv64);
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
function {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure __printf_chk(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (__printf_chk_result: bv32, Gamma___printf_chk_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool);
  modifies mem, Gamma_mem, stack, Gamma_stack;

procedure #free(free_ptr: bv64, Gamma_free_ptr: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (free_ptr_out: bv64, Gamma_free_ptr_out: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool);
  modifies mem, Gamma_mem, stack, Gamma_stack;

procedure main(main_argc: bv32, Gamma_main_argc: bool, main_argv: bv64, Gamma_main_argv: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (main_argv_out: bv64, Gamma_main_argv_out: bool, main_result: bv32, Gamma_main_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
  requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  requires (memory_load8_le(mem, 69647bv64) == 0bv8);
{
  var #1: bv64;
  var #temp0: bv32;
  var Gamma_#1: bool;
  var Gamma_#temp0: bool;
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R19: bool;
  var Gamma_R2: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R1: bv64;
  var R19: bv64;
  var R2: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  R0, Gamma_R0 := zero_extend32_32(main_argc), Gamma_main_argc;
  R1, Gamma_R1 := main_argv, Gamma_main_argv;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lmain:
    #1, Gamma_#1 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    call rely();
    assert (L(mem, #1) ==> Gamma_R29);
    mem, Gamma_mem := memory_store64_le(mem, #1, R29), gamma_store64(Gamma_mem, #1, Gamma_R29);
    call rely();
    assert (L(mem, bvadd64(#1, 8bv64)) ==> Gamma_R30);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#1, 8bv64), R30), gamma_store64(Gamma_mem, bvadd64(#1, 8bv64), Gamma_R30);
    R31, Gamma_R31 := #1, Gamma_#1;
    R0, Gamma_R0 := 1bv64, true;
    R29, Gamma_R29 := R31, Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R19), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R19);
    R30, Gamma_R30 := 1812bv64, true;
    call R0, Gamma_R0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := malloc(R0, Gamma_R0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    goto l00000249;
  l00000249:
    R1, Gamma_R1 := 65bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store8_le(mem, R0, R1[8:0]), gamma_store8(Gamma_mem, R0, Gamma_R1);
    R19, Gamma_R19 := R0, Gamma_R0;
    R30, Gamma_R30 := 1828bv64, true;
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := printCharValue(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    goto l0000029a;
  l0000029a:
    R2, Gamma_R2 := 42bv64, true;
    R1, Gamma_R1 := 0bv64, true;
    R0, Gamma_R0 := 1bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 2296bv64), Gamma_R1;
    R30, Gamma_R30 := 1848bv64, true;
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := __printf_chk(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    goto l000002b6;
  l000002b6:
    R1, Gamma_R1 := 0bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 2312bv64), Gamma_R1;
    R2, Gamma_R2 := 10bv64, true;
    R0, Gamma_R0 := 1bv64, true;
    R30, Gamma_R30 := 1868bv64, true;
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := __printf_chk(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    goto l000002d2;
  l000002d2:
    R0, Gamma_R0 := R19, Gamma_R19;
    R30, Gamma_R30 := 1876bv64, true;
    call R0, Gamma_R0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := #free(R0, Gamma_R0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    goto l000002e0;
  l000002e0:
    R0, Gamma_R0 := 0bv64, true;
    R19, Gamma_R19 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    main_argv_out, Gamma_main_argv_out := R1, Gamma_R1;
    main_result, Gamma_main_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}

procedure malloc(malloc_size: bv64, Gamma_malloc_size: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (malloc_result: bv64, Gamma_malloc_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool);
  modifies mem, Gamma_mem, stack, Gamma_stack;

procedure printCharValue(FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (printCharValue_result: bv32, Gamma_printCharValue_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
{
  var #temp0: bv32;
  var Gamma_#temp0: bool;
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R2: bool;
  var Gamma_R29: bool;
  var Gamma_R3: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var R0: bv64;
  var R1: bv64;
  var R2: bv64;
  var R29: bv64;
  var R3: bv64;
  var R30: bv64;
  var R31: bv64;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lprintCharValue:
    R3, Gamma_R3 := R0, Gamma_R0;
    R0, Gamma_R0 := 1bv64, true;
    R1, Gamma_R1 := 0bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 2272bv64), Gamma_R1;
    call rely();
    R2, Gamma_R2 := zero_extend56_8(memory_load8_le(mem, R3)), (gamma_load8(Gamma_mem, R3) || L(mem, R3));
    R2, Gamma_R2 := zero_extend32_32(bvadd32(R2[32:0], R0[32:0])), (Gamma_R0 && Gamma_R2);
    R2, Gamma_R2 := zero_extend32_32((0bv24 ++ R2[8:0])), Gamma_R2;
    call rely();
    assert (L(mem, R3) ==> Gamma_R2);
    mem, Gamma_mem := memory_store8_le(mem, R3, R2[8:0]), gamma_store8(Gamma_mem, R3, Gamma_R2);
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := __printf_chk(R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    // no return target
    assume false;
}
