var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R19: bool;
var {:extern} Gamma_R2: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R3: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R19: bv64;
var {:extern} R2: bv64;
var {:extern} R29: bv64;
var {:extern} R3: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 4196680bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load64_le(mem, 4196680bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 4196688bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 4196696bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 4196704bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 4196712bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 4196720bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 4196728bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 4196736bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 4196744bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 4196752bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 4196753bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 4196754bv64) == 0bv8);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure __printf_chk();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 4196680bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 4196688bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 4196696bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 4196704bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 4196712bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 4196720bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 4196728bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 4196736bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 4196744bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 4196752bv64) == 100bv8);
  free requires (memory_load8_le(mem, 4196753bv64) == 10bv8);
  free requires (memory_load8_le(mem, 4196754bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 4196680bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 4196688bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 4196696bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 4196704bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 4196712bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 4196720bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 4196728bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 4196736bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 4196744bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 4196752bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 4196753bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 4196754bv64) == 0bv8);

procedure #free();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 4196680bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 4196688bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 4196696bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 4196704bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 4196712bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 4196720bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 4196728bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 4196736bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 4196744bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 4196752bv64) == 100bv8);
  free requires (memory_load8_le(mem, 4196753bv64) == 10bv8);
  free requires (memory_load8_le(mem, 4196754bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 4196680bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 4196688bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 4196696bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 4196704bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 4196712bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 4196720bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 4196728bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 4196736bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 4196744bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 4196752bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 4196753bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 4196754bv64) == 0bv8);

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R19, Gamma_R2, Gamma_R29, Gamma_R3, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R19, R2, R29, R3, R30, R31, mem, stack;
  free requires (memory_load64_le(mem, 4325376bv64) == 0bv64);
  free requires (memory_load64_le(mem, 4325384bv64) == 0bv64);
  free requires (memory_load64_le(mem, 4196680bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 4196688bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 4196696bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 4196704bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 4196712bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 4196720bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 4196728bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 4196736bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 4196744bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 4196752bv64) == 100bv8);
  free requires (memory_load8_le(mem, 4196753bv64) == 10bv8);
  free requires (memory_load8_le(mem, 4196754bv64) == 0bv8);
  free ensures (Gamma_R19 == old(Gamma_R19));
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R19 == old(R19));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 4196680bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 4196688bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 4196696bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 4196704bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 4196712bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 4196720bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 4196728bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 4196736bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 4196744bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 4196752bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 4196753bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 4196754bv64) == 0bv8);

implementation main()
{
  var #1: bv64;
  var $load$16: bv64;
  var $load$17: bv64;
  var $load$18: bv64;
  var Gamma_#1: bool;
  var Gamma_$load$16: bool;
  var Gamma_$load$17: bool;
  var Gamma_$load$18: bool;
  lmain:
    assume {:captureState "lmain"} true;
    #1, Gamma_#1 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #1, R29), gamma_store64(Gamma_stack, #1, Gamma_R29);
    assume {:captureState "%00000284"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#1, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#1, 8bv64), Gamma_R30);
    assume {:captureState "%00000288"} true;
    R31, Gamma_R31 := #1, Gamma_#1;
    R0, Gamma_R0 := 1bv64, true;
    R29, Gamma_R29 := R31, Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R19), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R19);
    assume {:captureState "%00000298"} true;
    R30, Gamma_R30 := 4196244bv64, true;
    call malloc();
    goto l000002a8;
  l000002a8:
    assume {:captureState "l000002a8"} true;
    R1, Gamma_R1 := 65bv64, true;
    call rely();
    assert (L(mem, R0) ==> Gamma_R1);
    mem, Gamma_mem := memory_store8_le(mem, R0, R1[8:0]), gamma_store8(Gamma_mem, R0, Gamma_R1);
    assume {:captureState "%000002b0"} true;
    R19, Gamma_R19 := R0, Gamma_R0;
    R30, Gamma_R30 := 4196260bv64, true;
    call printCharValue();
    goto l000002c4;
  l000002c4:
    assume {:captureState "l000002c4"} true;
    R2, Gamma_R2 := 42bv64, true;
    R1, Gamma_R1 := 4194304bv64, true;
    R0, Gamma_R0 := 2bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 2408bv64), Gamma_R1;
    R30, Gamma_R30 := 4196280bv64, true;
    call __printf_chk();
    goto l000002e0;
  l000002e0:
    assume {:captureState "l000002e0"} true;
    R1, Gamma_R1 := 4194304bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 2424bv64), Gamma_R1;
    R2, Gamma_R2 := 10bv64, true;
    R0, Gamma_R0 := 2bv64, true;
    R30, Gamma_R30 := 4196300bv64, true;
    call __printf_chk();
    goto l000002fc;
  l000002fc:
    assume {:captureState "l000002fc"} true;
    R0, Gamma_R0 := R19, Gamma_R19;
    R30, Gamma_R30 := 4196308bv64, true;
    call #free();
    goto l0000030c;
  l0000030c:
    assume {:captureState "l0000030c"} true;
    $load$16, Gamma_$load$16 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R19, Gamma_R19 := $load$16, Gamma_$load$16;
    R0, Gamma_R0 := 0bv64, true;
    $load$17, Gamma_$load$17 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R29, Gamma_R29 := $load$17, Gamma_$load$17;
    $load$18, Gamma_$load$18 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := $load$18, Gamma_$load$18;
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

procedure malloc();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 4196680bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 4196688bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 4196696bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 4196704bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 4196712bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 4196720bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 4196728bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 4196736bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 4196744bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 4196752bv64) == 100bv8);
  free requires (memory_load8_le(mem, 4196753bv64) == 10bv8);
  free requires (memory_load8_le(mem, 4196754bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 4196680bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 4196688bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 4196696bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 4196704bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 4196712bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 4196720bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 4196728bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 4196736bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 4196744bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 4196752bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 4196753bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 4196754bv64) == 0bv8);

procedure printCharValue();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R2, Gamma_R3, Gamma_mem, R0, R1, R16, R17, R2, R3, mem;
  free requires (memory_load64_le(mem, 4196680bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 4196688bv64) == 8241983568019286100bv64);
  free requires (memory_load64_le(mem, 4196696bv64) == 7575166128241079840bv64);
  free requires (memory_load64_le(mem, 4196704bv64) == 11420940909171bv64);
  free requires (memory_load64_le(mem, 4196712bv64) == 2338615504306268244bv64);
  free requires (memory_load64_le(mem, 4196720bv64) == 2924860384375657bv64);
  free requires (memory_load64_le(mem, 4196728bv64) == 7017575154564032596bv64);
  free requires (memory_load64_le(mem, 4196736bv64) == 7089063228440191084bv64);
  free requires (memory_load64_le(mem, 4196744bv64) == 2675202446017455468bv64);
  free requires (memory_load8_le(mem, 4196752bv64) == 100bv8);
  free requires (memory_load8_le(mem, 4196753bv64) == 10bv8);
  free requires (memory_load8_le(mem, 4196754bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 4196680bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 4196688bv64) == 8241983568019286100bv64);
  free ensures (memory_load64_le(mem, 4196696bv64) == 7575166128241079840bv64);
  free ensures (memory_load64_le(mem, 4196704bv64) == 11420940909171bv64);
  free ensures (memory_load64_le(mem, 4196712bv64) == 2338615504306268244bv64);
  free ensures (memory_load64_le(mem, 4196720bv64) == 2924860384375657bv64);
  free ensures (memory_load64_le(mem, 4196728bv64) == 7017575154564032596bv64);
  free ensures (memory_load64_le(mem, 4196736bv64) == 7089063228440191084bv64);
  free ensures (memory_load64_le(mem, 4196744bv64) == 2675202446017455468bv64);
  free ensures (memory_load8_le(mem, 4196752bv64) == 100bv8);
  free ensures (memory_load8_le(mem, 4196753bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 4196754bv64) == 0bv8);

implementation printCharValue()
{
  var $load$20: bv8;
  var Gamma_$load$20: bool;
  lprintCharValue:
    assume {:captureState "lprintCharValue"} true;
    R3, Gamma_R3 := R0, Gamma_R0;
    R1, Gamma_R1 := 4194304bv64, true;
    R0, Gamma_R0 := 2bv64, true;
    R1, Gamma_R1 := bvadd64(R1, 2384bv64), Gamma_R1;
    call rely();
    $load$20, Gamma_$load$20 := memory_load8_le(mem, R3), (gamma_load8(Gamma_mem, R3) || L(mem, R3));
    R2, Gamma_R2 := zero_extend56_8($load$20), Gamma_$load$20;
    R2, Gamma_R2 := zero_extend32_32(bvadd32(R2[32:0], 1bv32)), Gamma_R2;
    R2, Gamma_R2 := zero_extend56_8(R2[8:0]), Gamma_R2;
    call rely();
    assert (L(mem, R3) ==> Gamma_R2);
    mem, Gamma_mem := memory_store8_le(mem, R3, R2[8:0]), gamma_store8(Gamma_mem, R3, Gamma_R2);
    assume {:captureState "%00000368"} true;
    call __printf_chk();
    assume false;
}

