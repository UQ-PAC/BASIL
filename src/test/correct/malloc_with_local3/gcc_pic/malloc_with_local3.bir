000010a8: program
0000108e: sub __cxa_finalize(__cxa_finalize_result)
000010a9: __cxa_finalize_result :: out u32 = low:32[R0]

00000de4:
00000f0c: R16 := 0x10000
00000f13: R17 := mem[R16 + 0xFA0, el]:u64
00000f19: R16 := R16 + 0xFA0
00000f1e: call R17 with noreturn

0000108f: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000010aa: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000b9a:
00000b9e: #3 := R31 - 0x20
00000ba4: mem := mem with [#3, el]:u64 <- R29
00000baa: mem := mem with [#3 + 8, el]:u64 <- R30
00000bae: R31 := #3
00000bb4: R29 := R31
00000bbc: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000bc1: R19 := 0x11000
00000bc8: R0 := pad:64[mem[R19 + 0x10]]
00000bcf: when 31:0[R0] <> 0 goto %00000bcd
00001090: goto %00000dad

00000dad:
00000db0: R0 := 0x10000
00000db7: R0 := mem[R0 + 0xFE0, el]:u64
00000dbd: when R0 = 0 goto %00000dbb
00001091: goto %00000dd4

00000dd4:
00000dd7: R0 := 0x11000
00000dde: R0 := mem[R0 + 8, el]:u64
00000de3: R30 := 0x7F0
00000de6: call @__cxa_finalize with return %00000dbb

00000dbb:
00000dc3: R30 := 0x7F4
00000dc5: call @deregister_tm_clones with return %00000dc7

00000dc7:
00000dca: R0 := 1
00000dd2: mem := mem with [R19 + 0x10] <- 7:0[R0]
00001092: goto %00000bcd

00000bcd:
00000bd7: R19 := mem[R31 + 0x10, el]:u64
00000bde: R29 := mem[R31, el]:u64
00000be3: R30 := mem[R31 + 8, el]:u64
00000be7: R31 := R31 + 0x20
00000bec: call R30 with noreturn

00001093: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000010ab: __libc_start_main_main :: in u64 = R0
000010ac: __libc_start_main_arg2 :: in u32 = low:32[R1]
000010ad: __libc_start_main_arg3 :: in out u64 = R2
000010ae: __libc_start_main_auxv :: in out u64 = R3
000010af: __libc_start_main_result :: out u32 = low:32[R0]

00000af3:
00000ef6: R16 := 0x10000
00000efd: R17 := mem[R16 + 0xF98, el]:u64
00000f03: R16 := R16 + 0xF98
00000f08: call R17 with noreturn

00001094: sub _fini(_fini_result)
000010b0: _fini_result :: out u32 = low:32[R0]

0000087b:
00000881: #0 := R31 - 0x10
00000887: mem := mem with [#0, el]:u64 <- R29
0000088d: mem := mem with [#0 + 8, el]:u64 <- R30
00000891: R31 := #0
00000897: R29 := R31
0000089e: R29 := mem[R31, el]:u64
000008a3: R30 := mem[R31 + 8, el]:u64
000008a7: R31 := R31 + 0x10
000008ac: call R30 with noreturn

00001095: sub _init(_init_result)
000010b1: _init_result :: out u32 = low:32[R0]

00000fa8:
00000fae: #7 := R31 - 0x10
00000fb4: mem := mem with [#7, el]:u64 <- R29
00000fba: mem := mem with [#7 + 8, el]:u64 <- R30
00000fbe: R31 := #7
00000fc4: R29 := R31
00000fc9: R30 := 0x638
00000fcb: call @call_weak_fn with return %00000fcd

00000fcd:
00000fd2: R29 := mem[R31, el]:u64
00000fd7: R30 := mem[R31 + 8, el]:u64
00000fdb: R31 := R31 + 0x10
00000fe0: call R30 with noreturn

00001096: sub _start(_start_result)
000010b2: _start_result :: out u32 = low:32[R0]

00000ab4:
00000ab9: R29 := 0
00000abe: R30 := 0
00000ac4: R5 := R0
00000acb: R1 := mem[R31, el]:u64
00000ad1: R2 := R31 + 8
00000ad7: R6 := R31
00000adc: R0 := 0x10000
00000ae3: R0 := mem[R0 + 0xFF0, el]:u64
00000ae8: R3 := 0
00000aed: R4 := 0
00000af2: R30 := 0x730
00000af5: call @__libc_start_main with return %00000af7

00000af7:
00000afa: R30 := 0x734
00000afd: call @abort with return %00001097

00001097:
00001098: call @call_weak_fn with noreturn

00001099: sub abort()


00000afb:
00000f4e: R16 := 0x10000
00000f55: R17 := mem[R16 + 0xFB8, el]:u64
00000f5b: R16 := R16 + 0xFB8
00000f60: call R17 with noreturn

0000109a: sub call_weak_fn(call_weak_fn_result)
000010b3: call_weak_fn_result :: out u32 = low:32[R0]

00000aff:
00000b02: R0 := 0x10000
00000b09: R0 := mem[R0 + 0xFE8, el]:u64
00000b0f: when R0 = 0 goto %00000b0d
0000109b: goto %00000e24

00000b0d:
00000b15: call R30 with noreturn

00000e24:
00000e27: goto @__gmon_start__

00000e25:
00000f38: R16 := 0x10000
00000f3f: R17 := mem[R16 + 0xFB0, el]:u64
00000f45: R16 := R16 + 0xFB0
00000f4a: call R17 with noreturn

0000109c: sub deregister_tm_clones(deregister_tm_clones_result)
000010b4: deregister_tm_clones_result :: out u32 = low:32[R0]

00000b1b:
00000b1e: R0 := 0x11000
00000b24: R0 := R0 + 0x10
00000b29: R1 := 0x11000
00000b2f: R1 := R1 + 0x10
00000b35: #1 := ~R0
00000b3a: #2 := R1 + ~R0
00000b40: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000b46: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000b4a: ZF := #2 + 1 = 0
00000b4e: NF := 63:63[#2 + 1]
00000b54: when ZF goto %00000b52
0000109d: goto %00000e06

00000e06:
00000e09: R1 := 0x10000
00000e10: R1 := mem[R1 + 0xFD8, el]:u64
00000e15: when R1 = 0 goto %00000b52
0000109e: goto %00000e19

00000b52:
00000b5a: call R30 with noreturn

00000e19:
00000e1d: R16 := R1
00000e22: call R16 with noreturn

0000109f: sub frame_dummy(frame_dummy_result)
000010b5: frame_dummy_result :: out u32 = low:32[R0]

00000bf2:
00000bf4: call @register_tm_clones with noreturn

000010a0: sub free(free_ptr)
000010b6: free_ptr :: in out u64 = R0

00000d81:
00000f64: R16 := 0x10000
00000f6b: R17 := mem[R16 + 0xFC0, el]:u64
00000f71: R16 := R16 + 0xFC0
00000f76: call R17 with noreturn

000010a1: sub main(main_argc, main_argv, main_result)
000010b7: main_argc :: in u32 = low:32[R0]
000010b8: main_argv :: in out u64 = R1
000010b9: main_result :: out u32 = low:32[R0]

00000bf6:
00000bfa: #4 := R31 - 0x40
00000c00: mem := mem with [#4, el]:u64 <- R29
00000c06: mem := mem with [#4 + 8, el]:u64 <- R30
00000c0a: R31 := #4
00000c10: R29 := R31
00000c15: R0 := 1
00000c1a: R30 := 0x824
00000c1d: call @malloc with return %00000c1f

00000c1f:
00000c25: mem := mem with [R31 + 0x28, el]:u64 <- R0
00000c2a: R0 := 0xB
00000c32: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000c37: R0 := 4
00000c3c: R30 := 0x838
00000c3e: call @malloc with return %00000c40

00000c40:
00000c46: mem := mem with [R31 + 0x30, el]:u64 <- R0
00000c4b: R0 := 0xA
00000c53: mem := mem with [R31 + 0x20, el]:u32 <- 31:0[R0]
00000c58: R0 := 4
00000c5d: R30 := 0x84C
00000c5f: call @malloc with return %00000c61

00000c61:
00000c67: mem := mem with [R31 + 0x38, el]:u64 <- R0
00000c6c: R0 := 9
00000c74: mem := mem with [R31 + 0x24, el]:u32 <- 31:0[R0]
00000c7b: R0 := mem[R31 + 0x28, el]:u64
00000c80: R1 := 0x41
00000c88: mem := mem with [R0] <- 7:0[R1]
00000c8f: R0 := mem[R31 + 0x30, el]:u64
00000c94: R1 := 0x2A
00000c9c: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000ca3: R0 := mem[R31 + 0x28, el]:u64
00000ca8: R30 := 0x878
00000cab: call @printCharValue with return %00000d37

00000d37:
00000d3c: R0 := mem[R31 + 0x30, el]:u64
00000d43: R0 := pad:64[mem[R0, el]:u32]
00000d49: R1 := pad:64[31:0[R0]]
00000d4e: R0 := 0
00000d54: R0 := R0 + 0x920
00000d59: R30 := 0x890
00000d5b: call @printf with return %00000d5d

00000d5d:
00000d62: R1 := pad:64[mem[R31 + 0x20, el]:u32]
00000d67: R0 := 0
00000d6d: R0 := R0 + 0x930
00000d72: R30 := 0x8A0
00000d74: call @printf with return %00000d76

00000d76:
00000d7b: R0 := mem[R31 + 0x28, el]:u64
00000d80: R30 := 0x8A8
00000d83: call @free with return %00000d85

00000d85:
00000d8a: R0 := mem[R31 + 0x30, el]:u64
00000d8f: R30 := 0x8B0
00000d91: call @free with return %00000d93

00000d93:
00000d96: R0 := 0
00000d9d: R29 := mem[R31, el]:u64
00000da2: R30 := mem[R31 + 8, el]:u64
00000da6: R31 := R31 + 0x40
00000dab: call R30 with noreturn

000010a2: sub malloc(malloc_size, malloc_result)
000010ba: malloc_size :: in u64 = R0
000010bb: malloc_result :: out u64 = R0

00000c1b:
00000f22: R16 := 0x10000
00000f29: R17 := mem[R16 + 0xFA8, el]:u64
00000f2f: R16 := R16 + 0xFA8
00000f34: call R17 with noreturn

000010a3: sub printCharValue(printCharValue_result)
000010bc: printCharValue_result :: out u32 = low:32[R0]

00000ca9:
00000cb0: #5 := R31 - 0x20
00000cb6: mem := mem with [#5, el]:u64 <- R29
00000cbc: mem := mem with [#5 + 8, el]:u64 <- R30
00000cc0: R31 := #5
00000cc6: R29 := R31
00000cce: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000cd5: R0 := mem[R31 + 0x18, el]:u64
00000cdc: R0 := pad:64[mem[R0]]
00000ce2: R0 := pad:64[31:0[R0] + 1]
00000ce8: R1 := pad:64[0.7:0[R0]]
00000cef: R0 := mem[R31 + 0x18, el]:u64
00000cf7: mem := mem with [R0] <- 7:0[R1]
00000cfe: R0 := mem[R31 + 0x18, el]:u64
00000d05: R0 := pad:64[mem[R0]]
00000d0b: R1 := pad:64[31:0[R0]]
00000d10: R0 := 0
00000d16: R0 := R0 + 0x950
00000d1b: R30 := 0x8F8
00000d1e: call @printf with return %00000d20

00000d20:
00000d27: R29 := mem[R31, el]:u64
00000d2c: R30 := mem[R31 + 8, el]:u64
00000d30: R31 := R31 + 0x20
00000d35: call R30 with noreturn

000010a4: sub printf(printf_format, printf_result)
000010bd: printf_format :: in u64 = R0
000010be: printf_result :: out u32 = low:32[R0]

00000d1c:
00000f7a: R16 := 0x10000
00000f81: R17 := mem[R16 + 0xFC8, el]:u64
00000f87: R16 := R16 + 0xFC8
00000f8c: call R17 with noreturn

000010a5: sub register_tm_clones(register_tm_clones_result)
000010bf: register_tm_clones_result :: out u32 = low:32[R0]

00000b5c:
00000b5f: R0 := 0x11000
00000b65: R0 := R0 + 0x10
00000b6a: R1 := 0x11000
00000b70: R1 := R1 + 0x10
00000b77: R1 := R1 + ~R0 + 1
00000b7d: R2 := 0.63:63[R1]
00000b84: R1 := R2 + (R1 ~>> 3)
00000b8a: R1 := extend:64[63:1[R1]]
00000b90: when R1 = 0 goto %00000b8e
000010a6: goto %00000de8

00000de8:
00000deb: R2 := 0x10000
00000df2: R2 := mem[R2 + 0xFF8, el]:u64
00000df7: when R2 = 0 goto %00000b8e
000010a7: goto %00000dfb

00000b8e:
00000b96: call R30 with noreturn

00000dfb:
00000dff: R16 := R2
00000e04: call R16 with noreturn
