var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2344bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 24"} zero_extend24_8(bv8) returns (bv32);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R29, R30, R31, R8, R9, mem, stack;
  free requires (memory_load64_le(mem, 69688bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation main()
{
  var Cse0__5$0$1: bv64;
  var Cse0__5$2$1: bv64;
  var Gamma_Cse0__5$0$1: bool;
  var Gamma_Cse0__5$2$1: bool;
  $main$__0__$CLxKWYdFRn2Ej6C~_C~VEQ:
    assume {:captureState "$main$__0__$CLxKWYdFRn2Ej6C~_C~VEQ"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551536bv64), Gamma_R31;
    Cse0__5$0$1, Gamma_Cse0__5$0$1 := bvadd64(R31, 64bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5$0$1, R29), gamma_store64(Gamma_stack, Cse0__5$0$1, Gamma_R29);
    assume {:captureState "2072$1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5$0$1, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5$0$1, 8bv64), Gamma_R30);
    assume {:captureState "2072$2"} true;
    R29, Gamma_R29 := bvadd64(R31, 64bv64), Gamma_R31;
    R8, Gamma_R8 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 8bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R8);
    assume {:captureState "2084$0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64), true);
    assume {:captureState "2088$0"} true;
    R0, Gamma_R0 := 1bv64, true;
    R30, Gamma_R30 := 2100bv64, true;
    call FUN_680();
    goto $main$__1__$ZbaYBBxVQ3qlZsS~lJaabA;
  $main$__1__$ZbaYBBxVQ3qlZsS~lJaabA:
    assume {:captureState "$main$__1__$ZbaYBBxVQ3qlZsS~lJaabA"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R29, 18446744073709551600bv64), R0), gamma_store64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64), Gamma_R0);
    assume {:captureState "2100$0"} true;
    R8, Gamma_R8 := 11bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551596bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551596bv64), Gamma_R8);
    assume {:captureState "2108$0"} true;
    R0, Gamma_R0 := 4bv64, true;
    stack, Gamma_stack := memory_store64_le(stack, R31, R0), gamma_store64(Gamma_stack, R31, Gamma_R0);
    assume {:captureState "2116$0"} true;
    R30, Gamma_R30 := 2124bv64, true;
    call FUN_680();
    goto $main$__2__$0tBrbu1MTkOeXN6JtpN~zA;
  $main$__2__$0tBrbu1MTkOeXN6JtpN~zA:
    assume {:captureState "$main$__2__$0tBrbu1MTkOeXN6JtpN~zA"} true;
    R8, Gamma_R8 := R0, Gamma_R0;
    R0, Gamma_R0 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 32bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 32bv64), Gamma_R8);
    assume {:captureState "2132$0"} true;
    R8, Gamma_R8 := 10bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R8);
    assume {:captureState "2140$0"} true;
    R30, Gamma_R30 := 2148bv64, true;
    call FUN_680();
    goto $main$__3__$QxdV0s0HRvev7KLnAs2FWw;
  $main$__3__$QxdV0s0HRvev7KLnAs2FWw:
    assume {:captureState "$main$__3__$QxdV0s0HRvev7KLnAs2FWw"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R0);
    assume {:captureState "2148$0"} true;
    R8, Gamma_R8 := 9bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R8);
    assume {:captureState "2156$0"} true;
    R9, Gamma_R9 := memory_load64_le(stack, bvadd64(R29, 18446744073709551600bv64)), gamma_load64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64));
    R8, Gamma_R8 := 65bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store8_le(mem, R9, R8[8:0]), gamma_store8(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "2168$0"} true;
    R9, Gamma_R9 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    R8, Gamma_R8 := 42bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "2180$0"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R29, 18446744073709551600bv64)), gamma_load64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64));
    R30, Gamma_R30 := 2192bv64, true;
    call printCharValue();
    goto $main$__4__$CckVGZ6WQ36P8yXGhMT~xQ;
  $main$__4__$CckVGZ6WQ36P8yXGhMT~xQ:
    assume {:captureState "$main$__4__$CckVGZ6WQ36P8yXGhMT~xQ"} true;
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    call rely();
    R1, Gamma_R1 := zero_extend32_32(memory_load32_le(mem, R8)), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2348bv64), Gamma_R0;
    R30, Gamma_R30 := 2148bv64, true;
    call FUN_6c0();
    goto $main$__5__$~iWXcFqqRQGjQiW4nILLvQ;
  $main$__5__$~iWXcFqqRQGjQiW4nILLvQ:
    assume {:captureState "$main$__5__$~iWXcFqqRQGjQiW4nILLvQ"} true;
    R1, Gamma_R1 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 28bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2364bv64), Gamma_R0;
    R30, Gamma_R30 := 2228bv64, true;
    call FUN_6c0();
    goto $main$__6__$0oIieHYMR~~BC94qfvN9QQ;
  $main$__6__$0oIieHYMR~~BC94qfvN9QQ:
    assume {:captureState "$main$__6__$0oIieHYMR~~BC94qfvN9QQ"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R29, 18446744073709551600bv64)), gamma_load64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64));
    R30, Gamma_R30 := 2236bv64, true;
    call FUN_6b0();
    goto $main$__7__$g3yYisT0ThmeUKIcCw1y6Q;
  $main$__7__$g3yYisT0ThmeUKIcCw1y6Q:
    assume {:captureState "$main$__7__$g3yYisT0ThmeUKIcCw1y6Q"} true;
    R0, Gamma_R0 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    R30, Gamma_R30 := 2244bv64, true;
    call FUN_6b0();
    goto $main$__8__$mMUcABnGSza5aySuj1XeLA;
  $main$__8__$mMUcABnGSza5aySuj1XeLA:
    assume {:captureState "$main$__8__$mMUcABnGSza5aySuj1XeLA"} true;
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 8bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 8bv64));
    Cse0__5$2$1, Gamma_Cse0__5$2$1 := bvadd64(R31, 64bv64), Gamma_R31;
    R29, Gamma_R29 := memory_load64_le(stack, Cse0__5$2$1), gamma_load64(Gamma_stack, Cse0__5$2$1);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(Cse0__5$2$1, 8bv64)), gamma_load64(Gamma_stack, bvadd64(Cse0__5$2$1, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 80bv64), Gamma_R31;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

procedure FUN_680();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation FUN_680()
{
  $FUN_680$__0__$X1k95sMBQnu6iSIq9aHGaQ:
    assume {:captureState "$FUN_680$__0__$X1k95sMBQnu6iSIq9aHGaQ"} true;
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, bvadd64(R16, 16bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 16bv64)) || L(mem, bvadd64(R16, 16bv64)));
    R16, Gamma_R16 := bvadd64(R16, 16bv64), Gamma_R16;
    call malloc();
    assume false; //no return target
}

procedure FUN_6b0();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation FUN_6b0()
{
  $FUN_6b0$__0__$2X75spjfQTO2JsX5y_kQow:
    assume {:captureState "$FUN_6b0$__0__$2X75spjfQTO2JsX5y_kQow"} true;
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, bvadd64(R16, 40bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 40bv64)) || L(mem, bvadd64(R16, 40bv64)));
    R16, Gamma_R16 := bvadd64(R16, 40bv64), Gamma_R16;
    call #free();
    assume false; //no return target
}

procedure printCharValue();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R29, R30, R31, R8, R9, mem, stack;
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation printCharValue()
{
  var Cse0__5$0$0: bv64;
  var Cse0__5$1$1: bv64;
  var Gamma_Cse0__5$0$0: bool;
  var Gamma_Cse0__5$1$1: bool;
  $printCharValue$__0__$X3k1aAV6QNOyQUqOun4dHA:
    assume {:captureState "$printCharValue$__0__$X3k1aAV6QNOyQUqOun4dHA"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    Cse0__5$1$1, Gamma_Cse0__5$1$1 := bvadd64(R31, 16bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5$1$1, R29), gamma_store64(Gamma_stack, Cse0__5$1$1, Gamma_R29);
    assume {:captureState "2264$1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5$1$1, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5$1$1, 8bv64), Gamma_R30);
    assume {:captureState "2264$2"} true;
    R29, Gamma_R29 := bvadd64(R31, 16bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 8bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R0);
    assume {:captureState "2272$0"} true;
    R9, Gamma_R9 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    call rely();
    R8, Gamma_R8 := zero_extend32_32(zero_extend24_8(memory_load8_le(mem, R9))), (gamma_load8(Gamma_mem, R9) || L(mem, R9));
    R8, Gamma_R8 := zero_extend32_32(bvadd32(R8[32:0], 1bv32)), Gamma_R8;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store8_le(mem, R9, R8[8:0]), gamma_store8(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "2288$0"} true;
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    call rely();
    R1, Gamma_R1 := zero_extend32_32(zero_extend24_8(memory_load8_le(mem, R8))), (gamma_load8(Gamma_mem, R8) || L(mem, R8));
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2391bv64), Gamma_R0;
    R30, Gamma_R30 := 2312bv64, true;
    call FUN_6c0();
    goto $printCharValue$__1__$Rl5GzGDaRGmqpE8yhw5nyA;
  $printCharValue$__1__$Rl5GzGDaRGmqpE8yhw5nyA:
    assume {:captureState "$printCharValue$__1__$Rl5GzGDaRGmqpE8yhw5nyA"} true;
    Cse0__5$0$0, Gamma_Cse0__5$0$0 := bvadd64(R31, 16bv64), Gamma_R31;
    R29, Gamma_R29 := memory_load64_le(stack, Cse0__5$0$0), gamma_load64(Gamma_stack, Cse0__5$0$0);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(Cse0__5$0$0, 8bv64)), gamma_load64(Gamma_stack, bvadd64(Cse0__5$0$0, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto printCharValue_basil_return;
  printCharValue_basil_return:
    assume {:captureState "printCharValue_basil_return"} true;
    return;
}

procedure FUN_6c0();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation FUN_6c0()
{
  $FUN_6c0$__0__$ZRhnGQXgTSKNWGKIiYaDNQ:
    assume {:captureState "$FUN_6c0$__0__$ZRhnGQXgTSKNWGKIiYaDNQ"} true;
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    R17, Gamma_R17 := memory_load64_le(mem, bvadd64(R16, 48bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 48bv64)) || L(mem, bvadd64(R16, 48bv64)));
    R16, Gamma_R16 := bvadd64(R16, 48bv64), Gamma_R16;
    call printf();
    assume false; //no return target
}

procedure malloc();
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure #free();
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure printf();
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

