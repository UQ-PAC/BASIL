0000087b: program
00000861: sub __cxa_finalize(__cxa_finalize_result)
0000087c: __cxa_finalize_result :: out u32 = low:32[R0]

000005b3:
000006db: R16 := 0x11000
000006e2: R17 := mem[R16 + 8, el]:u64
000006e8: R16 := R16 + 8
000006ed: call R17 with noreturn

00000862: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000087d: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000034e:
00000352: #3 := R31 - 0x20
00000358: mem := mem with [#3, el]:u64 <- R29
0000035e: mem := mem with [#3 + 8, el]:u64 <- R30
00000362: R31 := #3
00000368: R29 := R31
00000370: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000375: R19 := 0x11000
0000037c: R0 := pad:64[mem[R19 + 0x48]]
00000383: when 31:0[R0] <> 0 goto %00000381
00000863: goto %0000057c

0000057c:
0000057f: R0 := 0x10000
00000586: R0 := mem[R0 + 0xFC8, el]:u64
0000058c: when R0 = 0 goto %0000058a
00000864: goto %000005a3

000005a3:
000005a6: R0 := 0x11000
000005ad: R0 := mem[R0 + 0x40, el]:u64
000005b2: R30 := 0x7F0
000005b5: call @__cxa_finalize with return %0000058a

0000058a:
00000592: R30 := 0x7F4
00000594: call @deregister_tm_clones with return %00000596

00000596:
00000599: R0 := 1
000005a1: mem := mem with [R19 + 0x48] <- 7:0[R0]
00000865: goto %00000381

00000381:
0000038b: R19 := mem[R31 + 0x10, el]:u64
00000392: R29 := mem[R31, el]:u64
00000397: R30 := mem[R31 + 8, el]:u64
0000039b: R31 := R31 + 0x20
000003a0: call R30 with noreturn

00000866: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000087e: __libc_start_main_main :: in u64 = R0
0000087f: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000880: __libc_start_main_arg3 :: in out u64 = R2
00000881: __libc_start_main_auxv :: in out u64 = R3
00000882: __libc_start_main_result :: out u32 = low:32[R0]

000002a7:
000006c5: R16 := 0x11000
000006cc: R17 := mem[R16, el]:u64
000006d2: R16 := R16
000006d7: call R17 with noreturn

00000867: sub _fini(_fini_result)
00000883: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000868: sub _init(_init_result)
00000884: _init_result :: out u32 = low:32[R0]

00000777:
0000077d: #9 := R31 - 0x10
00000783: mem := mem with [#9, el]:u64 <- R29
00000789: mem := mem with [#9 + 8, el]:u64 <- R30
0000078d: R31 := #9
00000793: R29 := R31
00000798: R30 := 0x638
0000079a: call @call_weak_fn with return %0000079c

0000079c:
000007a1: R29 := mem[R31, el]:u64
000007a6: R30 := mem[R31 + 8, el]:u64
000007aa: R31 := R31 + 0x10
000007af: call R30 with noreturn

00000869: sub _start(_start_result)
00000885: _start_result :: out u32 = low:32[R0]

00000268:
0000026d: R29 := 0
00000272: R30 := 0
00000278: R5 := R0
0000027f: R1 := mem[R31, el]:u64
00000285: R2 := R31 + 8
0000028b: R6 := R31
00000290: R0 := 0x10000
00000297: R0 := mem[R0 + 0xFD8, el]:u64
0000029c: R3 := 0
000002a1: R4 := 0
000002a6: R30 := 0x730
000002a9: call @__libc_start_main with return %000002ab

000002ab:
000002ae: R30 := 0x734
000002b1: call @abort with return %0000086a

0000086a:
0000086b: call @call_weak_fn with noreturn

0000086c: sub abort()


000002af:
0000071d: R16 := 0x11000
00000724: R17 := mem[R16 + 0x20, el]:u64
0000072a: R16 := R16 + 0x20
0000072f: call R17 with noreturn

0000086d: sub call_weak_fn(call_weak_fn_result)
00000886: call_weak_fn_result :: out u32 = low:32[R0]

000002b3:
000002b6: R0 := 0x10000
000002bd: R0 := mem[R0 + 0xFD0, el]:u64
000002c3: when R0 = 0 goto %000002c1
0000086e: goto %000005f3

000002c1:
000002c9: call R30 with noreturn

000005f3:
000005f6: goto @__gmon_start__

000005f4:
00000707: R16 := 0x11000
0000070e: R17 := mem[R16 + 0x18, el]:u64
00000714: R16 := R16 + 0x18
00000719: call R17 with noreturn

0000086f: sub deregister_tm_clones(deregister_tm_clones_result)
00000887: deregister_tm_clones_result :: out u32 = low:32[R0]

000002cf:
000002d2: R0 := 0x11000
000002d8: R0 := R0 + 0x48
000002dd: R1 := 0x11000
000002e3: R1 := R1 + 0x48
000002e9: #1 := ~R0
000002ee: #2 := R1 + ~R0
000002f4: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002fa: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002fe: ZF := #2 + 1 = 0
00000302: NF := 63:63[#2 + 1]
00000308: when ZF goto %00000306
00000870: goto %000005d5

000005d5:
000005d8: R1 := 0x10000
000005df: R1 := mem[R1 + 0xFC0, el]:u64
000005e4: when R1 = 0 goto %00000306
00000871: goto %000005e8

00000306:
0000030e: call R30 with noreturn

000005e8:
000005ec: R16 := R1
000005f1: call R16 with noreturn

00000872: sub frame_dummy(frame_dummy_result)
00000888: frame_dummy_result :: out u32 = low:32[R0]

000003a6:
000003a8: call @register_tm_clones with noreturn

00000873: sub free(free_ptr)
00000889: free_ptr :: in out u64 = R0

00000548:
00000733: R16 := 0x11000
0000073a: R17 := mem[R16 + 0x28, el]:u64
00000740: R16 := R16 + 0x28
00000745: call R17 with noreturn

00000874: sub main(main_argc, main_argv, main_result)
0000088a: main_argc :: in u32 = low:32[R0]
0000088b: main_argv :: in out u64 = R1
0000088c: main_result :: out u32 = low:32[R0]

000003aa:
000003ae: R31 := R31 - 0x50
000003b4: #4 := R31 + 0x40
000003ba: mem := mem with [#4, el]:u64 <- R29
000003c0: mem := mem with [#4 + 8, el]:u64 <- R30
000003c6: R29 := R31 + 0x40
000003cb: R8 := 0
000003d3: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003da: mem := mem with [R29 - 4, el]:u32 <- 0
000003df: R0 := 1
000003e4: R30 := 0x834
000003e7: call @malloc with return %000003e9

000003e9:
000003ef: mem := mem with [R29 - 0x10, el]:u64 <- R0
000003f4: R8 := 0xB
000003fc: mem := mem with [R29 - 0x14, el]:u32 <- 31:0[R8]
00000401: R0 := 4
00000409: mem := mem with [R31, el]:u64 <- R0
0000040e: R30 := 0x84C
00000410: call @malloc with return %00000412

00000412:
00000416: R8 := R0
0000041d: R0 := mem[R31, el]:u64
00000425: mem := mem with [R31 + 0x20, el]:u64 <- R8
0000042a: R8 := 0xA
00000432: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R8]
00000437: R30 := 0x864
00000439: call @malloc with return %0000043b

0000043b:
00000441: mem := mem with [R31 + 0x10, el]:u64 <- R0
00000446: R8 := 9
0000044e: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000455: R9 := mem[R29 - 0x10, el]:u64
0000045a: R8 := 0x41
00000462: mem := mem with [R9] <- 7:0[R8]
00000469: R9 := mem[R31 + 0x20, el]:u64
0000046e: R8 := 0x2A
00000476: mem := mem with [R9, el]:u32 <- 31:0[R8]
0000047d: R0 := mem[R29 - 0x10, el]:u64
00000482: R30 := 0x890
00000485: call @printCharValue with return %00000504

00000504:
00000509: R8 := mem[R31 + 0x20, el]:u64
00000510: R1 := pad:64[mem[R8, el]:u32]
00000515: R0 := 0
0000051b: R0 := R0 + 0x92C
00000520: R30 := 0x8A4
00000522: call @printf with return %00000524

00000524:
00000529: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
0000052e: R0 := 0
00000534: R0 := R0 + 0x93C
00000539: R30 := 0x8B4
0000053b: call @printf with return %0000053d

0000053d:
00000542: R0 := mem[R29 - 0x10, el]:u64
00000547: R30 := 0x8BC
0000054a: call @free with return %0000054c

0000054c:
00000551: R0 := mem[R31 + 0x20, el]:u64
00000556: R30 := 0x8C4
00000558: call @free with return %0000055a

0000055a:
0000055f: R0 := pad:64[mem[R31 + 8, el]:u32]
00000565: #7 := R31 + 0x40
0000056a: R29 := mem[#7, el]:u64
0000056f: R30 := mem[#7 + 8, el]:u64
00000575: R31 := R31 + 0x50
0000057a: call R30 with noreturn

00000875: sub malloc(malloc_size, malloc_result)
0000088d: malloc_size :: in u64 = R0
0000088e: malloc_result :: out u64 = R0

000003e5:
000006f1: R16 := 0x11000
000006f8: R17 := mem[R16 + 0x10, el]:u64
000006fe: R16 := R16 + 0x10
00000703: call R17 with noreturn

00000876: sub printCharValue(printCharValue_result)
0000088f: printCharValue_result :: out u32 = low:32[R0]

00000483:
0000048a: R31 := R31 - 0x20
00000490: #5 := R31 + 0x10
00000496: mem := mem with [#5, el]:u64 <- R29
0000049c: mem := mem with [#5 + 8, el]:u64 <- R30
000004a2: R29 := R31 + 0x10
000004aa: mem := mem with [R31 + 8, el]:u64 <- R0
000004b1: R9 := mem[R31 + 8, el]:u64
000004b8: R8 := pad:64[mem[R9]]
000004be: R8 := pad:64[31:0[R8] + 1]
000004c6: mem := mem with [R9] <- 7:0[R8]
000004cd: R8 := mem[R31 + 8, el]:u64
000004d4: R1 := pad:64[mem[R8]]
000004d9: R0 := 0
000004df: R0 := R0 + 0x957
000004e4: R30 := 0x908
000004e7: call @printf with return %000004e9

000004e9:
000004ed: #6 := R31 + 0x10
000004f2: R29 := mem[#6, el]:u64
000004f7: R30 := mem[#6 + 8, el]:u64
000004fd: R31 := R31 + 0x20
00000502: call R30 with noreturn

00000877: sub printf(printf_format, printf_result)
00000890: printf_format :: in u64 = R0
00000891: printf_result :: out u32 = low:32[R0]

000004e5:
00000749: R16 := 0x11000
00000750: R17 := mem[R16 + 0x30, el]:u64
00000756: R16 := R16 + 0x30
0000075b: call R17 with noreturn

00000878: sub register_tm_clones(register_tm_clones_result)
00000892: register_tm_clones_result :: out u32 = low:32[R0]

00000310:
00000313: R0 := 0x11000
00000319: R0 := R0 + 0x48
0000031e: R1 := 0x11000
00000324: R1 := R1 + 0x48
0000032b: R1 := R1 + ~R0 + 1
00000331: R2 := 0.63:63[R1]
00000338: R1 := R2 + (R1 ~>> 3)
0000033e: R1 := extend:64[63:1[R1]]
00000344: when R1 = 0 goto %00000342
00000879: goto %000005b7

000005b7:
000005ba: R2 := 0x10000
000005c1: R2 := mem[R2 + 0xFE0, el]:u64
000005c6: when R2 = 0 goto %00000342
0000087a: goto %000005ca

00000342:
0000034a: call R30 with noreturn

000005ca:
000005ce: R16 := R2
000005d3: call R16 with noreturn
