var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2344bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_load8(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  gammaMap[index]
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} gamma_store8(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} memory_store8_le(memory: [bv64]bv8, index: bv64, value: bv8) returns ([bv64]bv8) {
  memory[index := value[8:0]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
function {:extern} {:bvbuiltin "zero_extend 56"} zero_extend56_8(bv8) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure #free();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure main();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R29, R30, R31, R8, R9, mem, stack;
  free requires (memory_load64_le(mem, 69688bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation main()
{
  var #4: bv64;
  var #7: bv64;
  var $load$19: bv64;
  var $load$20: bv64;
  var $load$21: bv64;
  var $load$22: bv64;
  var $load$23: bv64;
  var $load$24: bv32;
  var $load$25: bv32;
  var $load$26: bv64;
  var $load$27: bv64;
  var $load$28: bv32;
  var $load$29: bv64;
  var $load$30: bv64;
  var Gamma_#4: bool;
  var Gamma_#7: bool;
  var Gamma_$load$19: bool;
  var Gamma_$load$20: bool;
  var Gamma_$load$21: bool;
  var Gamma_$load$22: bool;
  var Gamma_$load$23: bool;
  var Gamma_$load$24: bool;
  var Gamma_$load$25: bool;
  var Gamma_$load$26: bool;
  var Gamma_$load$27: bool;
  var Gamma_$load$28: bool;
  var Gamma_$load$29: bool;
  var Gamma_$load$30: bool;
  $main:
    assume {:captureState "$main"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551536bv64), Gamma_R31;
    #4, Gamma_#4 := bvadd64(R31, 64bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #4, R29), gamma_store64(Gamma_stack, #4, Gamma_R29);
    assume {:captureState "%000003ba"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#4, 8bv64), Gamma_R30);
    assume {:captureState "%000003c0"} true;
    R29, Gamma_R29 := bvadd64(R31, 64bv64), Gamma_R31;
    R8, Gamma_R8 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 8bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R8);
    assume {:captureState "%000003d3"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64), true);
    assume {:captureState "%000003da"} true;
    R0, Gamma_R0 := 1bv64, true;
    R30, Gamma_R30 := 2100bv64, true;
    call malloc();
    goto $000003e9;
  $000003e9:
    assume {:captureState "$000003e9"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R29, 18446744073709551600bv64), R0), gamma_store64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64), Gamma_R0);
    assume {:captureState "%000003ef"} true;
    R8, Gamma_R8 := 11bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551596bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551596bv64), Gamma_R8);
    assume {:captureState "%000003fc"} true;
    R0, Gamma_R0 := 4bv64, true;
    stack, Gamma_stack := memory_store64_le(stack, R31, R0), gamma_store64(Gamma_stack, R31, Gamma_R0);
    assume {:captureState "%00000409"} true;
    R30, Gamma_R30 := 2124bv64, true;
    call malloc();
    goto $00000412;
  $00000412:
    assume {:captureState "$00000412"} true;
    R8, Gamma_R8 := R0, Gamma_R0;
    $load$19, Gamma_$load$19 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R0, Gamma_R0 := $load$19, Gamma_$load$19;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 32bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 32bv64), Gamma_R8);
    assume {:captureState "%00000425"} true;
    R8, Gamma_R8 := 10bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 28bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 28bv64), Gamma_R8);
    assume {:captureState "%00000432"} true;
    R30, Gamma_R30 := 2148bv64, true;
    call malloc();
    goto $0000043b;
  $0000043b:
    assume {:captureState "$0000043b"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R0);
    assume {:captureState "%00000441"} true;
    R8, Gamma_R8 := 9bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R8);
    assume {:captureState "%0000044e"} true;
    $load$20, Gamma_$load$20 := memory_load64_le(stack, bvadd64(R29, 18446744073709551600bv64)), gamma_load64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64));
    R9, Gamma_R9 := $load$20, Gamma_$load$20;
    R8, Gamma_R8 := 65bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store8_le(mem, R9, R8[8:0]), gamma_store8(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "%00000462"} true;
    $load$21, Gamma_$load$21 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    R9, Gamma_R9 := $load$21, Gamma_$load$21;
    R8, Gamma_R8 := 42bv64, true;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "%00000476"} true;
    $load$22, Gamma_$load$22 := memory_load64_le(stack, bvadd64(R29, 18446744073709551600bv64)), gamma_load64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64));
    R0, Gamma_R0 := $load$22, Gamma_$load$22;
    R30, Gamma_R30 := 2192bv64, true;
    call printCharValue();
    goto $00000504;
  $00000504:
    assume {:captureState "$00000504"} true;
    $load$23, Gamma_$load$23 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    R8, Gamma_R8 := $load$23, Gamma_$load$23;
    call rely();
    $load$24, Gamma_$load$24 := memory_load32_le(mem, R8), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R1, Gamma_R1 := zero_extend32_32($load$24), Gamma_$load$24;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2348bv64), Gamma_R0;
    R30, Gamma_R30 := 2212bv64, true;
    call printf();
    goto $00000524;
  $00000524:
    assume {:captureState "$00000524"} true;
    $load$25, Gamma_$load$25 := memory_load32_le(stack, bvadd64(R31, 28bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 28bv64));
    R1, Gamma_R1 := zero_extend32_32($load$25), Gamma_$load$25;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2364bv64), Gamma_R0;
    R30, Gamma_R30 := 2228bv64, true;
    call printf();
    goto $0000053d;
  $0000053d:
    assume {:captureState "$0000053d"} true;
    $load$26, Gamma_$load$26 := memory_load64_le(stack, bvadd64(R29, 18446744073709551600bv64)), gamma_load64(Gamma_stack, bvadd64(R29, 18446744073709551600bv64));
    R0, Gamma_R0 := $load$26, Gamma_$load$26;
    R30, Gamma_R30 := 2236bv64, true;
    call #free();
    goto $0000054c;
  $0000054c:
    assume {:captureState "$0000054c"} true;
    $load$27, Gamma_$load$27 := memory_load64_le(stack, bvadd64(R31, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 32bv64));
    R0, Gamma_R0 := $load$27, Gamma_$load$27;
    R30, Gamma_R30 := 2244bv64, true;
    call #free();
    goto $0000055a;
  $0000055a:
    assume {:captureState "$0000055a"} true;
    $load$28, Gamma_$load$28 := memory_load32_le(stack, bvadd64(R31, 8bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 8bv64));
    R0, Gamma_R0 := zero_extend32_32($load$28), Gamma_$load$28;
    #7, Gamma_#7 := bvadd64(R31, 64bv64), Gamma_R31;
    $load$29, Gamma_$load$29 := memory_load64_le(stack, #7), gamma_load64(Gamma_stack, #7);
    R29, Gamma_R29 := $load$29, Gamma_$load$29;
    $load$30, Gamma_$load$30 := memory_load64_le(stack, bvadd64(#7, 8bv64)), gamma_load64(Gamma_stack, bvadd64(#7, 8bv64));
    R30, Gamma_R30 := $load$30, Gamma_$load$30;
    R31, Gamma_R31 := bvadd64(R31, 80bv64), Gamma_R31;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

procedure malloc();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

procedure printCharValue();
  modifies Gamma_R0, Gamma_R1, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R1, R16, R17, R29, R30, R31, R8, R9, mem, stack;
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

implementation printCharValue()
{
  var #5: bv64;
  var #6: bv64;
  var $load$32: bv64;
  var $load$33: bv8;
  var $load$34: bv64;
  var $load$35: bv8;
  var $load$36: bv64;
  var $load$37: bv64;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  var Gamma_$load$32: bool;
  var Gamma_$load$33: bool;
  var Gamma_$load$34: bool;
  var Gamma_$load$35: bool;
  var Gamma_$load$36: bool;
  var Gamma_$load$37: bool;
  $printCharValue:
    assume {:captureState "$printCharValue"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    #5, Gamma_#5 := bvadd64(R31, 16bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #5, R29), gamma_store64(Gamma_stack, #5, Gamma_R29);
    assume {:captureState "%00000496"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#5, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#5, 8bv64), Gamma_R30);
    assume {:captureState "%0000049c"} true;
    R29, Gamma_R29 := bvadd64(R31, 16bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 8bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 8bv64), Gamma_R0);
    assume {:captureState "%000004aa"} true;
    $load$32, Gamma_$load$32 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R9, Gamma_R9 := $load$32, Gamma_$load$32;
    call rely();
    $load$33, Gamma_$load$33 := memory_load8_le(mem, R9), (gamma_load8(Gamma_mem, R9) || L(mem, R9));
    R8, Gamma_R8 := zero_extend56_8($load$33), Gamma_$load$33;
    R8, Gamma_R8 := zero_extend32_32(bvadd32(R8[32:0], 1bv32)), Gamma_R8;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store8_le(mem, R9, R8[8:0]), gamma_store8(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "%000004c6"} true;
    $load$34, Gamma_$load$34 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R8, Gamma_R8 := $load$34, Gamma_$load$34;
    call rely();
    $load$35, Gamma_$load$35 := memory_load8_le(mem, R8), (gamma_load8(Gamma_mem, R8) || L(mem, R8));
    R1, Gamma_R1 := zero_extend56_8($load$35), Gamma_$load$35;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2391bv64), Gamma_R0;
    R30, Gamma_R30 := 2312bv64, true;
    call printf();
    goto $000004e9;
  $000004e9:
    assume {:captureState "$000004e9"} true;
    #6, Gamma_#6 := bvadd64(R31, 16bv64), Gamma_R31;
    $load$36, Gamma_$load$36 := memory_load64_le(stack, #6), gamma_load64(Gamma_stack, #6);
    R29, Gamma_R29 := $load$36, Gamma_$load$36;
    $load$37, Gamma_$load$37 := memory_load64_le(stack, bvadd64(#6, 8bv64)), gamma_load64(Gamma_stack, bvadd64(#6, 8bv64));
    R30, Gamma_R30 := $load$37, Gamma_$load$37;
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto printCharValue_basil_return;
  printCharValue_basil_return:
    assume {:captureState "printCharValue_basil_return"} true;
    return;
}

procedure printf();
  modifies Gamma_R16, Gamma_R17, R16, R17;
  free requires (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free requires (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free requires (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free requires (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free requires (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free requires (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free requires (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free requires (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free requires (memory_load8_le(mem, 2408bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2409bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2410bv64) == 37bv8);
  free requires (memory_load8_le(mem, 2411bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2412bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2413bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 69696bv64);
  free ensures (memory_load64_le(mem, 2344bv64) == 2334386691848142849bv64);
  free ensures (memory_load64_le(mem, 2352bv64) == 2322295453216173673bv64);
  free ensures (memory_load64_le(mem, 2360bv64) == 2334386691848692773bv64);
  free ensures (memory_load64_le(mem, 2368bv64) == 7022836318793330540bv64);
  free ensures (memory_load64_le(mem, 2376bv64) == 7575166089418598770bv64);
  free ensures (memory_load64_le(mem, 2384bv64) == 6052849324421823091bv64);
  free ensures (memory_load64_le(mem, 2392bv64) == 2338038257526269288bv64);
  free ensures (memory_load64_le(mem, 2400bv64) == 8316213807050154358bv64);
  free ensures (memory_load8_le(mem, 2408bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2409bv64) == 32bv8);
  free ensures (memory_load8_le(mem, 2410bv64) == 37bv8);
  free ensures (memory_load8_le(mem, 2411bv64) == 99bv8);
  free ensures (memory_load8_le(mem, 2412bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2413bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 2064bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1984bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 2068bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 69696bv64);

