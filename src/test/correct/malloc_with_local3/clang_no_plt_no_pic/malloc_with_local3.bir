00000878: program
0000083c: sub __cxa_finalize(__cxa_finalize_result)
00000879: __cxa_finalize_result :: out u32 = low:32[R0]

000005b3:
000006db: R16 := 0x20000
000006e2: R17 := mem[R16 + 8, el]:u64
000006e8: R16 := R16 + 8
000006ed: call R17 with noreturn

0000083d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000087a: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000034f:
00000353: #3 := R31 - 0x20
00000359: mem := mem with [#3, el]:u64 <- R29
0000035f: mem := mem with [#3 + 8, el]:u64 <- R30
00000363: R31 := #3
00000369: R29 := R31
00000371: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000376: R19 := 0x20000
0000037d: R0 := pad:64[mem[R19 + 0x48]]
00000383: when 0:0[R0] goto %00000381
0000086e: goto %0000057c

0000057c:
0000057f: R0 := 0x1F000
00000586: R0 := mem[R0 + 0xFC8, el]:u64
0000058c: when R0 = 0 goto %0000058a
0000086f: goto %000005a3

000005a3:
000005a6: R0 := 0x20000
000005ad: R0 := mem[R0 + 0x40, el]:u64
000005b2: R30 := 0x830
000005b5: call @__cxa_finalize with return %0000058a

0000058a:
00000592: R30 := 0x834
00000594: call @deregister_tm_clones with return %00000596

00000596:
00000599: R0 := 1
000005a1: mem := mem with [R19 + 0x48] <- 7:0[R0]
00000870: goto %00000381

00000381:
0000038b: R19 := mem[R31 + 0x10, el]:u64
00000392: R29 := mem[R31, el]:u64
00000397: R30 := mem[R31 + 8, el]:u64
0000039b: R31 := R31 + 0x20
000003a0: call R30 with noreturn

00000841: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000087b: __libc_start_main_main :: in u64 = R0
0000087c: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000087d: __libc_start_main_arg3 :: in out u64 = R2
0000087e: __libc_start_main_auxv :: in out u64 = R3
0000087f: __libc_start_main_result :: out u32 = low:32[R0]

000002a8:
000006c5: R16 := 0x20000
000006cc: R17 := mem[R16, el]:u64
000006d2: R16 := R16
000006d7: call R17 with noreturn

00000842: sub _fini(_fini_result)
00000880: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000843: sub _init(_init_result)
00000881: _init_result :: out u32 = low:32[R0]

00000777:
0000077d: #9 := R31 - 0x10
00000783: mem := mem with [#9, el]:u64 <- R29
00000789: mem := mem with [#9 + 8, el]:u64 <- R30
0000078d: R31 := #9
00000793: R29 := R31
00000798: R30 := 0x680
0000079a: call @call_weak_fn with return %0000079c

0000079c:
000007a1: R29 := mem[R31, el]:u64
000007a6: R30 := mem[R31 + 8, el]:u64
000007aa: R31 := R31 + 0x10
000007af: call R30 with noreturn

00000844: sub _start(_start_result)
00000882: _start_result :: out u32 = low:32[R0]

00000269:
0000026e: R29 := 0
00000273: R30 := 0
00000279: R5 := R0
00000280: R1 := mem[R31, el]:u64
00000286: R2 := R31 + 8
0000028c: R6 := R31
00000291: R0 := 0x1F000
00000298: R0 := mem[R0 + 0xFD8, el]:u64
0000029d: R3 := 0
000002a2: R4 := 0
000002a7: R30 := 0x770
000002aa: call @__libc_start_main with return %000002ac

000002ac:
000002af: R30 := 0x774
000002b2: call @abort with return %00000871

00000871:
00000872: call @call_weak_fn with noreturn

00000847: sub abort()


000002b0:
0000071d: R16 := 0x20000
00000724: R17 := mem[R16 + 0x20, el]:u64
0000072a: R16 := R16 + 0x20
0000072f: call R17 with noreturn

00000848: sub call_weak_fn(call_weak_fn_result)
00000883: call_weak_fn_result :: out u32 = low:32[R0]

000002b4:
000002b7: R0 := 0x1F000
000002be: R0 := mem[R0 + 0xFD0, el]:u64
000002c4: when R0 = 0 goto %000002c2
00000873: goto %000005f3

000002c2:
000002ca: call R30 with noreturn

000005f3:
000005f6: goto @__gmon_start__

000005f4:
00000707: R16 := 0x20000
0000070e: R17 := mem[R16 + 0x18, el]:u64
00000714: R16 := R16 + 0x18
00000719: call R17 with noreturn

0000084a: sub deregister_tm_clones(deregister_tm_clones_result)
00000884: deregister_tm_clones_result :: out u32 = low:32[R0]

000002d0:
000002d3: R0 := 0x20000
000002d9: R0 := R0 + 0x48
000002de: R1 := 0x20000
000002e4: R1 := R1 + 0x48
000002ea: #1 := ~R0
000002ef: #2 := R1 + ~R0
000002f5: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002fb: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002ff: ZF := #2 + 1 = 0
00000303: NF := 63:63[#2 + 1]
00000309: when ZF goto %00000307
00000874: goto %000005d5

000005d5:
000005d8: R1 := 0x1F000
000005df: R1 := mem[R1 + 0xFC0, el]:u64
000005e4: when R1 = 0 goto %00000307
00000875: goto %000005e8

00000307:
0000030f: call R30 with noreturn

000005e8:
000005ec: R16 := R1
000005f1: call R16 with noreturn

0000084d: sub frame_dummy(frame_dummy_result)
00000885: frame_dummy_result :: out u32 = low:32[R0]

000003a6:
000003a8: call @register_tm_clones with noreturn

0000084e: sub free(free_ptr)
00000886: free_ptr :: in out u64 = R0

00000548:
00000733: R16 := 0x20000
0000073a: R17 := mem[R16 + 0x28, el]:u64
00000740: R16 := R16 + 0x28
00000745: call R17 with noreturn

0000084f: sub main(main_argc, main_argv, main_result)
00000887: main_argc :: in u32 = low:32[R0]
00000888: main_argv :: in out u64 = R1
00000889: main_result :: out u32 = low:32[R0]

000003aa:
000003ae: R31 := R31 - 0x50
000003b4: #4 := R31 + 0x40
000003ba: mem := mem with [#4, el]:u64 <- R29
000003c0: mem := mem with [#4 + 8, el]:u64 <- R30
000003c6: R29 := R31 + 0x40
000003cb: R8 := 0
000003d3: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003da: mem := mem with [R29 - 4, el]:u32 <- 0
000003df: R0 := 1
000003e4: R30 := 0x874
000003e7: call @malloc with return %000003e9

000003e9:
000003ef: mem := mem with [R29 - 0x10, el]:u64 <- R0
000003f4: R8 := 0xB
000003fc: mem := mem with [R29 - 0x14, el]:u32 <- 31:0[R8]
00000401: R0 := 4
00000409: mem := mem with [R31, el]:u64 <- R0
0000040e: R30 := 0x88C
00000410: call @malloc with return %00000412

00000412:
00000416: R8 := R0
0000041d: R0 := mem[R31, el]:u64
00000425: mem := mem with [R31 + 0x20, el]:u64 <- R8
0000042a: R8 := 0xA
00000432: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R8]
00000437: R30 := 0x8A4
00000439: call @malloc with return %0000043b

0000043b:
00000441: mem := mem with [R31 + 0x10, el]:u64 <- R0
00000446: R8 := 9
0000044e: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000455: R9 := mem[R29 - 0x10, el]:u64
0000045a: R8 := 0x41
00000462: mem := mem with [R9] <- 7:0[R8]
00000469: R9 := mem[R31 + 0x20, el]:u64
0000046e: R8 := 0x2A
00000476: mem := mem with [R9, el]:u32 <- 31:0[R8]
0000047d: R0 := mem[R29 - 0x10, el]:u64
00000482: R30 := 0x8D0
00000485: call @printCharValue with return %00000504

00000504:
00000509: R8 := mem[R31 + 0x20, el]:u64
00000510: R1 := pad:64[mem[R8, el]:u32]
00000515: R0 := 0
0000051b: R0 := R0 + 0x96C
00000520: R30 := 0x8E4
00000522: call @printf with return %00000524

00000524:
00000529: R1 := pad:64[mem[R31 + 0x1C, el]:u32]
0000052e: R0 := 0
00000534: R0 := R0 + 0x97C
00000539: R30 := 0x8F4
0000053b: call @printf with return %0000053d

0000053d:
00000542: R0 := mem[R29 - 0x10, el]:u64
00000547: R30 := 0x8FC
0000054a: call @free with return %0000054c

0000054c:
00000551: R0 := mem[R31 + 0x20, el]:u64
00000556: R30 := 0x904
00000558: call @free with return %0000055a

0000055a:
0000055f: R0 := pad:64[mem[R31 + 8, el]:u32]
00000565: #7 := R31 + 0x40
0000056a: R29 := mem[#7, el]:u64
0000056f: R30 := mem[#7 + 8, el]:u64
00000575: R31 := R31 + 0x50
0000057a: call R30 with noreturn

00000850: sub malloc(malloc_size, malloc_result)
0000088a: malloc_size :: in u64 = R0
0000088b: malloc_result :: out u64 = R0

000003e5:
000006f1: R16 := 0x20000
000006f8: R17 := mem[R16 + 0x10, el]:u64
000006fe: R16 := R16 + 0x10
00000703: call R17 with noreturn

00000851: sub printCharValue(printCharValue_result)
0000088c: printCharValue_result :: out u32 = low:32[R0]

00000483:
0000048a: R31 := R31 - 0x20
00000490: #5 := R31 + 0x10
00000496: mem := mem with [#5, el]:u64 <- R29
0000049c: mem := mem with [#5 + 8, el]:u64 <- R30
000004a2: R29 := R31 + 0x10
000004aa: mem := mem with [R31 + 8, el]:u64 <- R0
000004b1: R9 := mem[R31 + 8, el]:u64
000004b8: R8 := pad:64[mem[R9]]
000004be: R8 := pad:64[31:0[R8] + 1]
000004c6: mem := mem with [R9] <- 7:0[R8]
000004cd: R8 := mem[R31 + 8, el]:u64
000004d4: R1 := pad:64[mem[R8]]
000004d9: R0 := 0
000004df: R0 := R0 + 0x997
000004e4: R30 := 0x948
000004e7: call @printf with return %000004e9

000004e9:
000004ed: #6 := R31 + 0x10
000004f2: R29 := mem[#6, el]:u64
000004f7: R30 := mem[#6 + 8, el]:u64
000004fd: R31 := R31 + 0x20
00000502: call R30 with noreturn

00000852: sub printf(printf_format, printf_result)
0000088d: printf_format :: in u64 = R0
0000088e: printf_result :: out u32 = low:32[R0]

000004e5:
00000749: R16 := 0x20000
00000750: R17 := mem[R16 + 0x30, el]:u64
00000756: R16 := R16 + 0x30
0000075b: call R17 with noreturn

00000853: sub register_tm_clones(register_tm_clones_result)
0000088f: register_tm_clones_result :: out u32 = low:32[R0]

00000311:
00000314: R0 := 0x20000
0000031a: R0 := R0 + 0x48
0000031f: R1 := 0x20000
00000325: R1 := R1 + 0x48
0000032c: R1 := R1 + ~R0 + 1
00000332: R2 := 0.63:63[R1]
00000339: R1 := R2 + (R1 ~>> 3)
0000033f: R1 := extend:64[63:1[R1]]
00000345: when R1 = 0 goto %00000343
00000876: goto %000005b7

000005b7:
000005ba: R2 := 0x1F000
000005c1: R2 := mem[R2 + 0xFE0, el]:u64
000005c6: when R2 = 0 goto %00000343
00000877: goto %000005ca

00000343:
0000034b: call R30 with noreturn

000005ca:
000005ce: R16 := R2
000005d3: call R16 with noreturn
