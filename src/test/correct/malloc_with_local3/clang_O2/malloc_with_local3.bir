000006a1: program
00000689: sub __cxa_finalize(__cxa_finalize_result)
000006a2: __cxa_finalize_result :: out u32 = low:32[R0]

000003f1:
000004f9: R16 := 0x11000
00000500: R17 := mem[R16 + 8, el]:u64
00000506: R16 := R16 + 8
0000050b: call R17 with noreturn

0000068a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006a3: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002b2:
000002b6: #3 := R31 - 0x20
000002bc: mem := mem with [#3, el]:u64 <- R29
000002c2: mem := mem with [#3 + 8, el]:u64 <- R30
000002c6: R31 := #3
000002cc: R29 := R31
000002d4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002d9: R19 := 0x11000
000002e0: R0 := pad:64[mem[R19 + 0x38]]
000002e7: when 31:0[R0] <> 0 goto %000002e5
0000068b: goto %000003ba

000003ba:
000003bd: R0 := 0x10000
000003c4: R0 := mem[R0 + 0xFC8, el]:u64
000003ca: when R0 = 0 goto %000003c8
0000068c: goto %000003e1

000003e1:
000003e4: R0 := 0x11000
000003eb: R0 := mem[R0 + 0x30, el]:u64
000003f0: R30 := 0x730
000003f3: call @__cxa_finalize with return %000003c8

000003c8:
000003d0: R30 := 0x734
000003d2: call @deregister_tm_clones with return %000003d4

000003d4:
000003d7: R0 := 1
000003df: mem := mem with [R19 + 0x38] <- 7:0[R0]
0000068d: goto %000002e5

000002e5:
000002ef: R19 := mem[R31 + 0x10, el]:u64
000002f6: R29 := mem[R31, el]:u64
000002fb: R30 := mem[R31 + 8, el]:u64
000002ff: R31 := R31 + 0x20
00000304: call R30 with noreturn

0000068e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006a4: __libc_start_main_main :: in u64 = R0
000006a5: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006a6: __libc_start_main_arg3 :: in out u64 = R2
000006a7: __libc_start_main_auxv :: in out u64 = R3
000006a8: __libc_start_main_result :: out u32 = low:32[R0]

0000020b:
000004e3: R16 := 0x11000
000004ea: R17 := mem[R16, el]:u64
000004f0: R16 := R16
000004f5: call R17 with noreturn

0000068f: sub _fini(_fini_result)
000006a9: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000690: sub _init(_init_result)
000006aa: _init_result :: out u32 = low:32[R0]

000005ce:
000005d4: #6 := R31 - 0x10
000005da: mem := mem with [#6, el]:u64 <- R29
000005e0: mem := mem with [#6 + 8, el]:u64 <- R30
000005e4: R31 := #6
000005ea: R29 := R31
000005ef: R30 := 0x5C8
000005f1: call @call_weak_fn with return %000005f3

000005f3:
000005f8: R29 := mem[R31, el]:u64
000005fd: R30 := mem[R31 + 8, el]:u64
00000601: R31 := R31 + 0x10
00000606: call R30 with noreturn

00000691: sub _start(_start_result)
000006ab: _start_result :: out u32 = low:32[R0]

000001cc:
000001d1: R29 := 0
000001d6: R30 := 0
000001dc: R5 := R0
000001e3: R1 := mem[R31, el]:u64
000001e9: R2 := R31 + 8
000001ef: R6 := R31
000001f4: R0 := 0x10000
000001fb: R0 := mem[R0 + 0xFD8, el]:u64
00000200: R3 := 0
00000205: R4 := 0
0000020a: R30 := 0x670
0000020d: call @__libc_start_main with return %0000020f

0000020f:
00000212: R30 := 0x674
00000215: call @abort with return %00000692

00000692:
00000693: call @call_weak_fn with noreturn

00000694: sub abort()


00000213:
00000525: R16 := 0x11000
0000052c: R17 := mem[R16 + 0x18, el]:u64
00000532: R16 := R16 + 0x18
00000537: call R17 with noreturn

00000695: sub call_weak_fn(call_weak_fn_result)
000006ac: call_weak_fn_result :: out u32 = low:32[R0]

00000217:
0000021a: R0 := 0x10000
00000221: R0 := mem[R0 + 0xFD0, el]:u64
00000227: when R0 = 0 goto %00000225
00000696: goto %00000431

00000225:
0000022d: call R30 with noreturn

00000431:
00000434: goto @__gmon_start__

00000432:
0000050f: R16 := 0x11000
00000516: R17 := mem[R16 + 0x10, el]:u64
0000051c: R16 := R16 + 0x10
00000521: call R17 with noreturn

00000697: sub deregister_tm_clones(deregister_tm_clones_result)
000006ad: deregister_tm_clones_result :: out u32 = low:32[R0]

00000233:
00000236: R0 := 0x11000
0000023c: R0 := R0 + 0x38
00000241: R1 := 0x11000
00000247: R1 := R1 + 0x38
0000024d: #1 := ~R0
00000252: #2 := R1 + ~R0
00000258: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000025e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000262: ZF := #2 + 1 = 0
00000266: NF := 63:63[#2 + 1]
0000026c: when ZF goto %0000026a
00000698: goto %00000413

00000413:
00000416: R1 := 0x10000
0000041d: R1 := mem[R1 + 0xFC0, el]:u64
00000422: when R1 = 0 goto %0000026a
00000699: goto %00000426

0000026a:
00000272: call R30 with noreturn

00000426:
0000042a: R16 := R1
0000042f: call R16 with noreturn

0000069a: sub frame_dummy(frame_dummy_result)
000006ae: frame_dummy_result :: out u32 = low:32[R0]

0000030a:
0000030c: call @register_tm_clones with noreturn

0000069b: sub main(main_argc, main_argv, main_result)
000006af: main_argc :: in u32 = low:32[R0]
000006b0: main_argv :: in out u64 = R1
000006b1: main_result :: out u32 = low:32[R0]

0000030e:
00000312: #4 := R31 - 0x10
00000318: mem := mem with [#4, el]:u64 <- R29
0000031e: mem := mem with [#4 + 8, el]:u64 <- R30
00000322: R31 := #4
00000328: R29 := R31
0000032d: R0 := 0
00000333: R0 := R0 + 0x7FB
00000338: R1 := 0x42
0000033d: R30 := 0x76C
00000340: call @printf with return %00000342

00000342:
00000345: R0 := 0
0000034b: R0 := R0 + 0x7D0
00000350: R1 := 0x2A
00000355: R30 := 0x77C
00000357: call @printf with return %00000359

00000359:
0000035c: R0 := 0
00000362: R0 := R0 + 0x7E0
00000367: R1 := 0xA
0000036c: R30 := 0x78C
0000036e: call @printf with return %00000370

00000370:
00000373: R0 := 0
0000037a: R29 := mem[R31, el]:u64
0000037f: R30 := mem[R31 + 8, el]:u64
00000383: R31 := R31 + 0x10
00000388: call R30 with noreturn

0000069c: sub printCharValue(printCharValue_result)
000006b2: printCharValue_result :: out u32 = low:32[R0]

0000038a:
0000038f: R9 := pad:64[mem[R0]]
00000395: R8 := R0
0000039a: R0 := 0
000003a0: R0 := R0 + 0x7FB
000003a6: R9 := pad:64[31:0[R9] + 1]
000003ac: R1 := pad:64[0.7:0[R9]]
000003b4: mem := mem with [R8] <- 7:0[R9]
000003b8: call @printf with noreturn

0000069d: sub printf(printf_format, printf_result)
000006b3: printf_format :: in u64 = R0
000006b4: printf_result :: out u32 = low:32[R0]

0000033e:
0000053b: R16 := 0x11000
00000542: R17 := mem[R16 + 0x20, el]:u64
00000548: R16 := R16 + 0x20
0000054d: call R17 with noreturn

0000069e: sub register_tm_clones(register_tm_clones_result)
000006b5: register_tm_clones_result :: out u32 = low:32[R0]

00000274:
00000277: R0 := 0x11000
0000027d: R0 := R0 + 0x38
00000282: R1 := 0x11000
00000288: R1 := R1 + 0x38
0000028f: R1 := R1 + ~R0 + 1
00000295: R2 := 0.63:63[R1]
0000029c: R1 := R2 + (R1 ~>> 3)
000002a2: R1 := extend:64[63:1[R1]]
000002a8: when R1 = 0 goto %000002a6
0000069f: goto %000003f5

000003f5:
000003f8: R2 := 0x10000
000003ff: R2 := mem[R2 + 0xFE0, el]:u64
00000404: when R2 = 0 goto %000002a6
000006a0: goto %00000408

000002a6:
000002ae: call R30 with noreturn

00000408:
0000040c: R16 := R2
00000411: call R16 with noreturn
