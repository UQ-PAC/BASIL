0000084c: program
00000832: sub __cxa_finalize(__cxa_finalize_result)
0000084d: __cxa_finalize_result :: out u32 = low:32[R0]

00000588:
000006b0: R16 := 0x10000
000006b7: R17 := mem[R16 + 0xFA0, el]:u64
000006bd: R16 := R16 + 0xFA0
000006c2: call R17 with noreturn

00000833: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000084e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000033e:
00000342: #3 := R31 - 0x20
00000348: mem := mem with [#3, el]:u64 <- R29
0000034e: mem := mem with [#3 + 8, el]:u64 <- R30
00000352: R31 := #3
00000358: R29 := R31
00000360: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000365: R19 := 0x11000
0000036c: R0 := pad:64[mem[R19 + 0x10]]
00000373: when 31:0[R0] <> 0 goto %00000371
00000834: goto %00000551

00000551:
00000554: R0 := 0x10000
0000055b: R0 := mem[R0 + 0xFE0, el]:u64
00000561: when R0 = 0 goto %0000055f
00000835: goto %00000578

00000578:
0000057b: R0 := 0x11000
00000582: R0 := mem[R0 + 8, el]:u64
00000587: R30 := 0x7F0
0000058a: call @__cxa_finalize with return %0000055f

0000055f:
00000567: R30 := 0x7F4
00000569: call @deregister_tm_clones with return %0000056b

0000056b:
0000056e: R0 := 1
00000576: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000836: goto %00000371

00000371:
0000037b: R19 := mem[R31 + 0x10, el]:u64
00000382: R29 := mem[R31, el]:u64
00000387: R30 := mem[R31 + 8, el]:u64
0000038b: R31 := R31 + 0x20
00000390: call R30 with noreturn

00000837: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000084f: __libc_start_main_main :: in u64 = R0
00000850: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000851: __libc_start_main_arg3 :: in out u64 = R2
00000852: __libc_start_main_auxv :: in out u64 = R3
00000853: __libc_start_main_result :: out u32 = low:32[R0]

00000297:
0000069a: R16 := 0x10000
000006a1: R17 := mem[R16 + 0xF98, el]:u64
000006a7: R16 := R16 + 0xF98
000006ac: call R17 with noreturn

00000838: sub _fini(_fini_result)
00000854: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000839: sub _init(_init_result)
00000855: _init_result :: out u32 = low:32[R0]

0000074c:
00000752: #7 := R31 - 0x10
00000758: mem := mem with [#7, el]:u64 <- R29
0000075e: mem := mem with [#7 + 8, el]:u64 <- R30
00000762: R31 := #7
00000768: R29 := R31
0000076d: R30 := 0x638
0000076f: call @call_weak_fn with return %00000771

00000771:
00000776: R29 := mem[R31, el]:u64
0000077b: R30 := mem[R31 + 8, el]:u64
0000077f: R31 := R31 + 0x10
00000784: call R30 with noreturn

0000083a: sub _start(_start_result)
00000856: _start_result :: out u32 = low:32[R0]

00000258:
0000025d: R29 := 0
00000262: R30 := 0
00000268: R5 := R0
0000026f: R1 := mem[R31, el]:u64
00000275: R2 := R31 + 8
0000027b: R6 := R31
00000280: R0 := 0x10000
00000287: R0 := mem[R0 + 0xFF0, el]:u64
0000028c: R3 := 0
00000291: R4 := 0
00000296: R30 := 0x730
00000299: call @__libc_start_main with return %0000029b

0000029b:
0000029e: R30 := 0x734
000002a1: call @abort with return %0000083b

0000083b:
0000083c: call @call_weak_fn with noreturn

0000083d: sub abort()


0000029f:
000006f2: R16 := 0x10000
000006f9: R17 := mem[R16 + 0xFB8, el]:u64
000006ff: R16 := R16 + 0xFB8
00000704: call R17 with noreturn

0000083e: sub call_weak_fn(call_weak_fn_result)
00000857: call_weak_fn_result :: out u32 = low:32[R0]

000002a3:
000002a6: R0 := 0x10000
000002ad: R0 := mem[R0 + 0xFE8, el]:u64
000002b3: when R0 = 0 goto %000002b1
0000083f: goto %000005c8

000002b1:
000002b9: call R30 with noreturn

000005c8:
000005cb: goto @__gmon_start__

000005c9:
000006dc: R16 := 0x10000
000006e3: R17 := mem[R16 + 0xFB0, el]:u64
000006e9: R16 := R16 + 0xFB0
000006ee: call R17 with noreturn

00000840: sub deregister_tm_clones(deregister_tm_clones_result)
00000858: deregister_tm_clones_result :: out u32 = low:32[R0]

000002bf:
000002c2: R0 := 0x11000
000002c8: R0 := R0 + 0x10
000002cd: R1 := 0x11000
000002d3: R1 := R1 + 0x10
000002d9: #1 := ~R0
000002de: #2 := R1 + ~R0
000002e4: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002ea: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002ee: ZF := #2 + 1 = 0
000002f2: NF := 63:63[#2 + 1]
000002f8: when ZF goto %000002f6
00000841: goto %000005aa

000005aa:
000005ad: R1 := 0x10000
000005b4: R1 := mem[R1 + 0xFD8, el]:u64
000005b9: when R1 = 0 goto %000002f6
00000842: goto %000005bd

000002f6:
000002fe: call R30 with noreturn

000005bd:
000005c1: R16 := R1
000005c6: call R16 with noreturn

00000843: sub frame_dummy(frame_dummy_result)
00000859: frame_dummy_result :: out u32 = low:32[R0]

00000396:
00000398: call @register_tm_clones with noreturn

00000844: sub free(free_ptr)
0000085a: free_ptr :: in out u64 = R0

00000525:
00000708: R16 := 0x10000
0000070f: R17 := mem[R16 + 0xFC0, el]:u64
00000715: R16 := R16 + 0xFC0
0000071a: call R17 with noreturn

00000845: sub main(main_argc, main_argv, main_result)
0000085b: main_argc :: in u32 = low:32[R0]
0000085c: main_argv :: in out u64 = R1
0000085d: main_result :: out u32 = low:32[R0]

0000039a:
0000039e: #4 := R31 - 0x40
000003a4: mem := mem with [#4, el]:u64 <- R29
000003aa: mem := mem with [#4 + 8, el]:u64 <- R30
000003ae: R31 := #4
000003b4: R29 := R31
000003b9: R0 := 1
000003be: R30 := 0x824
000003c1: call @malloc with return %000003c3

000003c3:
000003c9: mem := mem with [R31 + 0x28, el]:u64 <- R0
000003ce: R0 := 0xB
000003d6: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000003db: R0 := 4
000003e0: R30 := 0x838
000003e2: call @malloc with return %000003e4

000003e4:
000003ea: mem := mem with [R31 + 0x30, el]:u64 <- R0
000003ef: R0 := 0xA
000003f7: mem := mem with [R31 + 0x20, el]:u32 <- 31:0[R0]
000003fc: R0 := 4
00000401: R30 := 0x84C
00000403: call @malloc with return %00000405

00000405:
0000040b: mem := mem with [R31 + 0x38, el]:u64 <- R0
00000410: R0 := 9
00000418: mem := mem with [R31 + 0x24, el]:u32 <- 31:0[R0]
0000041f: R0 := mem[R31 + 0x28, el]:u64
00000424: R1 := 0x41
0000042c: mem := mem with [R0] <- 7:0[R1]
00000433: R0 := mem[R31 + 0x30, el]:u64
00000438: R1 := 0x2A
00000440: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000447: R0 := mem[R31 + 0x28, el]:u64
0000044c: R30 := 0x878
0000044f: call @printCharValue with return %000004db

000004db:
000004e0: R0 := mem[R31 + 0x30, el]:u64
000004e7: R0 := pad:64[mem[R0, el]:u32]
000004ed: R1 := pad:64[31:0[R0]]
000004f2: R0 := 0
000004f8: R0 := R0 + 0x920
000004fd: R30 := 0x890
000004ff: call @printf with return %00000501

00000501:
00000506: R1 := pad:64[mem[R31 + 0x20, el]:u32]
0000050b: R0 := 0
00000511: R0 := R0 + 0x930
00000516: R30 := 0x8A0
00000518: call @printf with return %0000051a

0000051a:
0000051f: R0 := mem[R31 + 0x28, el]:u64
00000524: R30 := 0x8A8
00000527: call @free with return %00000529

00000529:
0000052e: R0 := mem[R31 + 0x30, el]:u64
00000533: R30 := 0x8B0
00000535: call @free with return %00000537

00000537:
0000053a: R0 := 0
00000541: R29 := mem[R31, el]:u64
00000546: R30 := mem[R31 + 8, el]:u64
0000054a: R31 := R31 + 0x40
0000054f: call R30 with noreturn

00000846: sub malloc(malloc_size, malloc_result)
0000085e: malloc_size :: in u64 = R0
0000085f: malloc_result :: out u64 = R0

000003bf:
000006c6: R16 := 0x10000
000006cd: R17 := mem[R16 + 0xFA8, el]:u64
000006d3: R16 := R16 + 0xFA8
000006d8: call R17 with noreturn

00000847: sub printCharValue(printCharValue_result)
00000860: printCharValue_result :: out u32 = low:32[R0]

0000044d:
00000454: #5 := R31 - 0x20
0000045a: mem := mem with [#5, el]:u64 <- R29
00000460: mem := mem with [#5 + 8, el]:u64 <- R30
00000464: R31 := #5
0000046a: R29 := R31
00000472: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000479: R0 := mem[R31 + 0x18, el]:u64
00000480: R0 := pad:64[mem[R0]]
00000486: R0 := pad:64[31:0[R0] + 1]
0000048c: R1 := pad:64[0.7:0[R0]]
00000493: R0 := mem[R31 + 0x18, el]:u64
0000049b: mem := mem with [R0] <- 7:0[R1]
000004a2: R0 := mem[R31 + 0x18, el]:u64
000004a9: R0 := pad:64[mem[R0]]
000004af: R1 := pad:64[31:0[R0]]
000004b4: R0 := 0
000004ba: R0 := R0 + 0x950
000004bf: R30 := 0x8F8
000004c2: call @printf with return %000004c4

000004c4:
000004cb: R29 := mem[R31, el]:u64
000004d0: R30 := mem[R31 + 8, el]:u64
000004d4: R31 := R31 + 0x20
000004d9: call R30 with noreturn

00000848: sub printf(printf_format, printf_result)
00000861: printf_format :: in u64 = R0
00000862: printf_result :: out u32 = low:32[R0]

000004c0:
0000071e: R16 := 0x10000
00000725: R17 := mem[R16 + 0xFC8, el]:u64
0000072b: R16 := R16 + 0xFC8
00000730: call R17 with noreturn

00000849: sub register_tm_clones(register_tm_clones_result)
00000863: register_tm_clones_result :: out u32 = low:32[R0]

00000300:
00000303: R0 := 0x11000
00000309: R0 := R0 + 0x10
0000030e: R1 := 0x11000
00000314: R1 := R1 + 0x10
0000031b: R1 := R1 + ~R0 + 1
00000321: R2 := 0.63:63[R1]
00000328: R1 := R2 + (R1 ~>> 3)
0000032e: R1 := extend:64[63:1[R1]]
00000334: when R1 = 0 goto %00000332
0000084a: goto %0000058c

0000058c:
0000058f: R2 := 0x10000
00000596: R2 := mem[R2 + 0xFF8, el]:u64
0000059b: when R2 = 0 goto %00000332
0000084b: goto %0000059f

00000332:
0000033a: call R30 with noreturn

0000059f:
000005a3: R16 := R2
000005a8: call R16 with noreturn
