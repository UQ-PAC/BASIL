000006a0: program
0000066e: sub __cxa_finalize(__cxa_finalize_result)
000006a1: __cxa_finalize_result :: out u32 = low:32[R0]

000003fa:
000004f2: R16 := 0x10000
000004f9: R17 := mem[R16 + 0xFB8, el]:u64
000004ff: R16 := R16 + 0xFB8
00000504: call R17 with noreturn

0000066f: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006a2: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002be:
000002c2: #3 := R31 - 0x20
000002c8: mem := mem with [#3, el]:u64 <- R29
000002ce: mem := mem with [#3 + 8, el]:u64 <- R30
000002d2: R31 := #3
000002d8: R29 := R31
000002e0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002e5: R19 := 0x11000
000002ec: R0 := pad:64[mem[R19 + 0x10]]
000002f3: when 31:0[R0] <> 0 goto %000002f1
00000696: goto %000003c3

000003c3:
000003c6: R0 := 0x10000
000003cd: R0 := mem[R0 + 0xFE0, el]:u64
000003d3: when R0 = 0 goto %000003d1
00000697: goto %000003ea

000003ea:
000003ed: R0 := 0x11000
000003f4: R0 := mem[R0 + 8, el]:u64
000003f9: R30 := 0x6F0
000003fc: call @__cxa_finalize with return %000003d1

000003d1:
000003d9: R30 := 0x6F4
000003db: call @deregister_tm_clones with return %000003dd

000003dd:
000003e0: R0 := 1
000003e8: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000698: goto %000002f1

000002f1:
000002fb: R19 := mem[R31 + 0x10, el]:u64
00000302: R29 := mem[R31, el]:u64
00000307: R30 := mem[R31 + 8, el]:u64
0000030b: R31 := R31 + 0x20
00000310: call R30 with noreturn

00000673: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006a3: __libc_start_main_main :: in u64 = R0
000006a4: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006a5: __libc_start_main_arg3 :: in out u64 = R2
000006a6: __libc_start_main_auxv :: in out u64 = R3
000006a7: __libc_start_main_result :: out u32 = low:32[R0]

00000217:
000004dc: R16 := 0x10000
000004e3: R17 := mem[R16 + 0xFB0, el]:u64
000004e9: R16 := R16 + 0xFB0
000004ee: call R17 with noreturn

00000674: sub _fini(_fini_result)
000006a8: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000675: sub _init(_init_result)
000006a9: _init_result :: out u32 = low:32[R0]

000005b4:
000005ba: #5 := R31 - 0x10
000005c0: mem := mem with [#5, el]:u64 <- R29
000005c6: mem := mem with [#5 + 8, el]:u64 <- R30
000005ca: R31 := #5
000005d0: R29 := R31
000005d5: R30 := 0x590
000005d7: call @call_weak_fn with return %000005d9

000005d9:
000005de: R29 := mem[R31, el]:u64
000005e3: R30 := mem[R31 + 8, el]:u64
000005e7: R31 := R31 + 0x10
000005ec: call R30 with noreturn

00000676: sub _start(_start_result)
000006aa: _start_result :: out u32 = low:32[R0]

000001d8:
000001dd: R29 := 0
000001e2: R30 := 0
000001e8: R5 := R0
000001ef: R1 := mem[R31, el]:u64
000001f5: R2 := R31 + 8
000001fb: R6 := R31
00000200: R0 := 0x10000
00000207: R0 := mem[R0 + 0xFF0, el]:u64
0000020c: R3 := 0
00000211: R4 := 0
00000216: R30 := 0x630
00000219: call @__libc_start_main with return %0000021b

0000021b:
0000021e: R30 := 0x634
00000221: call @abort with return %00000699

00000699:
0000069a: call @call_weak_fn with noreturn

00000679: sub abort()


0000021f:
0000051e: R16 := 0x10000
00000525: R17 := mem[R16 + 0xFC8, el]:u64
0000052b: R16 := R16 + 0xFC8
00000530: call R17 with noreturn

0000067a: sub call_weak_fn(call_weak_fn_result)
000006ab: call_weak_fn_result :: out u32 = low:32[R0]

00000223:
00000226: R0 := 0x10000
0000022d: R0 := mem[R0 + 0xFE8, el]:u64
00000233: when R0 = 0 goto %00000231
0000069b: goto %0000043a

00000231:
00000239: call R30 with noreturn

0000043a:
0000043d: goto @__gmon_start__

0000043b:
00000508: R16 := 0x10000
0000050f: R17 := mem[R16 + 0xFC0, el]:u64
00000515: R16 := R16 + 0xFC0
0000051a: call R17 with noreturn

0000067c: sub deregister_tm_clones(deregister_tm_clones_result)
000006ac: deregister_tm_clones_result :: out u32 = low:32[R0]

0000023f:
00000242: R0 := 0x11000
00000248: R0 := R0 + 0x10
0000024d: R1 := 0x11000
00000253: R1 := R1 + 0x10
00000259: #1 := ~R0
0000025e: #2 := R1 + ~R0
00000264: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000026a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000026e: ZF := #2 + 1 = 0
00000272: NF := 63:63[#2 + 1]
00000278: when ZF goto %00000276
0000069c: goto %0000041c

0000041c:
0000041f: R1 := 0x10000
00000426: R1 := mem[R1 + 0xFD8, el]:u64
0000042b: when R1 = 0 goto %00000276
0000069d: goto %0000042f

00000276:
0000027e: call R30 with noreturn

0000042f:
00000433: R16 := R1
00000438: call R16 with noreturn

0000067f: sub frame_dummy(frame_dummy_result)
000006ad: frame_dummy_result :: out u32 = low:32[R0]

00000316:
00000318: call @register_tm_clones with noreturn

00000680: sub main(main_argc, main_argv, main_result)
000006ae: main_argc :: in u32 = low:32[R0]
000006af: main_argv :: in out u64 = R1
000006b0: main_result :: out u32 = low:32[R0]

0000031a:
0000031d: R0 := 0x11000
00000323: R0 := R0 + 0x14
0000032a: mem := mem with [R0, el]:u32 <- 0
0000032f: R0 := 0x11000
00000335: R0 := R0 + 0x14
0000033c: R0 := pad:64[mem[R0, el]:u32]
00000342: R1 := pad:64[31:0[R0] + 1]
00000347: R0 := 0x11000
0000034d: R0 := R0 + 0x14
00000355: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000035a: R0 := 0x11000
00000360: R0 := R0 + 0x1C
00000367: R1 := pad:64[mem[R0, el]:u32]
0000036c: R0 := 0x11000
00000372: R0 := R0 + 0x18
0000037a: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000037f: R0 := 0x11000
00000385: R0 := R0 + 0x18
0000038c: mem := mem with [R0, el]:u32 <- 0
00000391: R0 := 0x11000
00000397: R0 := R0 + 0x14
0000039e: R0 := pad:64[mem[R0, el]:u32]
000003a4: R1 := pad:64[31:0[R0] + 1]
000003a9: R0 := 0x11000
000003af: R0 := R0 + 0x14
000003b7: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003bc: R0 := 0
000003c1: call R30 with noreturn

00000681: sub register_tm_clones(register_tm_clones_result)
000006b1: register_tm_clones_result :: out u32 = low:32[R0]

00000280:
00000283: R0 := 0x11000
00000289: R0 := R0 + 0x10
0000028e: R1 := 0x11000
00000294: R1 := R1 + 0x10
0000029b: R1 := R1 + ~R0 + 1
000002a1: R2 := 0.63:63[R1]
000002a8: R1 := R2 + (R1 ~>> 3)
000002ae: R1 := extend:64[63:1[R1]]
000002b4: when R1 = 0 goto %000002b2
0000069e: goto %000003fe

000003fe:
00000401: R2 := 0x10000
00000408: R2 := mem[R2 + 0xFF8, el]:u64
0000040d: when R2 = 0 goto %000002b2
0000069f: goto %00000411

000002b2:
000002ba: call R30 with noreturn

00000411:
00000415: R16 := R2
0000041a: call R16 with noreturn
