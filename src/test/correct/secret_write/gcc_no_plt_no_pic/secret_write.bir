00000d12: program
00000cfc: sub __cxa_finalize(__cxa_finalize_result)
00000d13: __cxa_finalize_result :: out u32 = low:32[R0]

00000a88:
00000b80: R16 := 0x10000
00000b87: R17 := mem[R16 + 0xFB8, el]:u64
00000b8d: R16 := R16 + 0xFB8
00000b92: call R17 with noreturn

00000cfd: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000d14: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000094c:
00000950: #3 := R31 - 0x20
00000956: mem := mem with [#3, el]:u64 <- R29
0000095c: mem := mem with [#3 + 8, el]:u64 <- R30
00000960: R31 := #3
00000966: R29 := R31
0000096e: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000973: R19 := 0x11000
0000097a: R0 := pad:64[mem[R19 + 0x10]]
00000981: when 31:0[R0] <> 0 goto %0000097f
00000cfe: goto %00000a51

00000a51:
00000a54: R0 := 0x10000
00000a5b: R0 := mem[R0 + 0xFE0, el]:u64
00000a61: when R0 = 0 goto %00000a5f
00000cff: goto %00000a78

00000a78:
00000a7b: R0 := 0x11000
00000a82: R0 := mem[R0 + 8, el]:u64
00000a87: R30 := 0x6F0
00000a8a: call @__cxa_finalize with return %00000a5f

00000a5f:
00000a67: R30 := 0x6F4
00000a69: call @deregister_tm_clones with return %00000a6b

00000a6b:
00000a6e: R0 := 1
00000a76: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000d00: goto %0000097f

0000097f:
00000989: R19 := mem[R31 + 0x10, el]:u64
00000990: R29 := mem[R31, el]:u64
00000995: R30 := mem[R31 + 8, el]:u64
00000999: R31 := R31 + 0x20
0000099e: call R30 with noreturn

00000d01: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000d15: __libc_start_main_main :: in u64 = R0
00000d16: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000d17: __libc_start_main_arg3 :: in out u64 = R2
00000d18: __libc_start_main_auxv :: in out u64 = R3
00000d19: __libc_start_main_result :: out u32 = low:32[R0]

000008a5:
00000b6a: R16 := 0x10000
00000b71: R17 := mem[R16 + 0xFB0, el]:u64
00000b77: R16 := R16 + 0xFB0
00000b7c: call R17 with noreturn

00000d02: sub _fini(_fini_result)
00000d1a: _fini_result :: out u32 = low:32[R0]

000006ad:
000006b3: #0 := R31 - 0x10
000006b9: mem := mem with [#0, el]:u64 <- R29
000006bf: mem := mem with [#0 + 8, el]:u64 <- R30
000006c3: R31 := #0
000006c9: R29 := R31
000006d0: R29 := mem[R31, el]:u64
000006d5: R30 := mem[R31 + 8, el]:u64
000006d9: R31 := R31 + 0x10
000006de: call R30 with noreturn

00000d03: sub _init(_init_result)
00000d1b: _init_result :: out u32 = low:32[R0]

00000c42:
00000c48: #5 := R31 - 0x10
00000c4e: mem := mem with [#5, el]:u64 <- R29
00000c54: mem := mem with [#5 + 8, el]:u64 <- R30
00000c58: R31 := #5
00000c5e: R29 := R31
00000c63: R30 := 0x590
00000c65: call @call_weak_fn with return %00000c67

00000c67:
00000c6c: R29 := mem[R31, el]:u64
00000c71: R30 := mem[R31 + 8, el]:u64
00000c75: R31 := R31 + 0x10
00000c7a: call R30 with noreturn

00000d04: sub _start(_start_result)
00000d1c: _start_result :: out u32 = low:32[R0]

00000866:
0000086b: R29 := 0
00000870: R30 := 0
00000876: R5 := R0
0000087d: R1 := mem[R31, el]:u64
00000883: R2 := R31 + 8
00000889: R6 := R31
0000088e: R0 := 0x10000
00000895: R0 := mem[R0 + 0xFF0, el]:u64
0000089a: R3 := 0
0000089f: R4 := 0
000008a4: R30 := 0x630
000008a7: call @__libc_start_main with return %000008a9

000008a9:
000008ac: R30 := 0x634
000008af: call @abort with return %00000d05

00000d05:
00000d06: call @call_weak_fn with noreturn

00000d07: sub abort()


000008ad:
00000bac: R16 := 0x10000
00000bb3: R17 := mem[R16 + 0xFC8, el]:u64
00000bb9: R16 := R16 + 0xFC8
00000bbe: call R17 with noreturn

00000d08: sub call_weak_fn(call_weak_fn_result)
00000d1d: call_weak_fn_result :: out u32 = low:32[R0]

000008b1:
000008b4: R0 := 0x10000
000008bb: R0 := mem[R0 + 0xFE8, el]:u64
000008c1: when R0 = 0 goto %000008bf
00000d09: goto %00000ac8

000008bf:
000008c7: call R30 with noreturn

00000ac8:
00000acb: goto @__gmon_start__

00000ac9:
00000b96: R16 := 0x10000
00000b9d: R17 := mem[R16 + 0xFC0, el]:u64
00000ba3: R16 := R16 + 0xFC0
00000ba8: call R17 with noreturn

00000d0a: sub deregister_tm_clones(deregister_tm_clones_result)
00000d1e: deregister_tm_clones_result :: out u32 = low:32[R0]

000008cd:
000008d0: R0 := 0x11000
000008d6: R0 := R0 + 0x10
000008db: R1 := 0x11000
000008e1: R1 := R1 + 0x10
000008e7: #1 := ~R0
000008ec: #2 := R1 + ~R0
000008f2: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000008f8: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000008fc: ZF := #2 + 1 = 0
00000900: NF := 63:63[#2 + 1]
00000906: when ZF goto %00000904
00000d0b: goto %00000aaa

00000aaa:
00000aad: R1 := 0x10000
00000ab4: R1 := mem[R1 + 0xFD8, el]:u64
00000ab9: when R1 = 0 goto %00000904
00000d0c: goto %00000abd

00000904:
0000090c: call R30 with noreturn

00000abd:
00000ac1: R16 := R1
00000ac6: call R16 with noreturn

00000d0d: sub frame_dummy(frame_dummy_result)
00000d1f: frame_dummy_result :: out u32 = low:32[R0]

000009a4:
000009a6: call @register_tm_clones with noreturn

00000d0e: sub main(main_argc, main_argv, main_result)
00000d20: main_argc :: in u32 = low:32[R0]
00000d21: main_argv :: in out u64 = R1
00000d22: main_result :: out u32 = low:32[R0]

000009a8:
000009ab: R0 := 0x11000
000009b1: R0 := R0 + 0x14
000009b8: mem := mem with [R0, el]:u32 <- 0
000009bd: R0 := 0x11000
000009c3: R0 := R0 + 0x14
000009ca: R0 := pad:64[mem[R0, el]:u32]
000009d0: R1 := pad:64[31:0[R0] + 1]
000009d5: R0 := 0x11000
000009db: R0 := R0 + 0x14
000009e3: mem := mem with [R0, el]:u32 <- 31:0[R1]
000009e8: R0 := 0x11000
000009ee: R0 := R0 + 0x1C
000009f5: R1 := pad:64[mem[R0, el]:u32]
000009fa: R0 := 0x11000
00000a00: R0 := R0 + 0x18
00000a08: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000a0d: R0 := 0x11000
00000a13: R0 := R0 + 0x18
00000a1a: mem := mem with [R0, el]:u32 <- 0
00000a1f: R0 := 0x11000
00000a25: R0 := R0 + 0x14
00000a2c: R0 := pad:64[mem[R0, el]:u32]
00000a32: R1 := pad:64[31:0[R0] + 1]
00000a37: R0 := 0x11000
00000a3d: R0 := R0 + 0x14
00000a45: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000a4a: R0 := 0
00000a4f: call R30 with noreturn

00000d0f: sub register_tm_clones(register_tm_clones_result)
00000d23: register_tm_clones_result :: out u32 = low:32[R0]

0000090e:
00000911: R0 := 0x11000
00000917: R0 := R0 + 0x10
0000091c: R1 := 0x11000
00000922: R1 := R1 + 0x10
00000929: R1 := R1 + ~R0 + 1
0000092f: R2 := 0.63:63[R1]
00000936: R1 := R2 + (R1 ~>> 3)
0000093c: R1 := extend:64[63:1[R1]]
00000942: when R1 = 0 goto %00000940
00000d10: goto %00000a8c

00000a8c:
00000a8f: R2 := 0x10000
00000a96: R2 := mem[R2 + 0xFF8, el]:u64
00000a9b: when R2 = 0 goto %00000940
00000d11: goto %00000a9f

00000940:
00000948: call R30 with noreturn

00000a9f:
00000aa3: R16 := R2
00000aa8: call R16 with noreturn
