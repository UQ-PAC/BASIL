var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $secret_addr: bv64;
axiom ($secret_addr == 69688bv64);
const $x_addr: bv64;
axiom ($x_addr == 69692bv64);
const $z_addr: bv64;
axiom ($z_addr == 69684bv64);
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $secret_addr) then false else (if (index == $x_addr) then (bvsmod32(memory_load32_le(memory, $z_addr), 2bv32) == 0bv32) else (if (index == $z_addr) then true else false)))
}

function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:bvbuiltin "bvsge"} bvsge32(bv32, bv32) returns (bool);
function {:bvbuiltin "bvsmod"} bvsmod32(bv32, bv32) returns (bv32);
function gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (memory_load32_le(mem, $z_addr) == old(memory_load32_le(mem, $z_addr)));
  ensures (old(gamma_load32(Gamma_mem, $x_addr)) ==> gamma_load32(Gamma_mem, $x_addr));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (memory_load32_le(mem, $z_addr) == old(memory_load32_le(mem, $z_addr)));
  ensures (old(gamma_load32(Gamma_mem, $x_addr)) ==> gamma_load32(Gamma_mem, $x_addr));
{
  call rely();
  call rely();
}

procedure rely_reflexive()
{
  assert (memory_load32_le(mem, $z_addr) == memory_load32_le(mem, $z_addr));
  assert (gamma_load32(Gamma_mem, $x_addr) ==> gamma_load32(Gamma_mem, $x_addr));
}

procedure guarantee_reflexive()
  modifies mem, Gamma_mem;
{
  assert bvsge32(memory_load32_le(mem, $z_addr), memory_load32_le(mem, $z_addr));
}

procedure main(main_argc: bv32, Gamma_main_argc: bool, main_argv: bv64, Gamma_main_argv: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (main_argv_out: bv64, Gamma_main_argv_out: bool, main_result: bv32, Gamma_main_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
  requires (memory_load8_le(mem, 69664bv64) == 0bv8);
  requires (memory_load8_le(mem, 69665bv64) == 0bv8);
  requires (memory_load8_le(mem, 69666bv64) == 0bv8);
  requires (memory_load8_le(mem, 69667bv64) == 0bv8);
  requires (memory_load8_le(mem, 69668bv64) == 0bv8);
  requires (memory_load8_le(mem, 69669bv64) == 0bv8);
  requires (memory_load8_le(mem, 69670bv64) == 0bv8);
  requires (memory_load8_le(mem, 69671bv64) == 0bv8);
  requires (memory_load8_le(mem, 69672bv64) == 40bv8);
  requires (memory_load8_le(mem, 69673bv64) == 16bv8);
  requires (memory_load8_le(mem, 69674bv64) == 1bv8);
  requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  requires (gamma_load32(Gamma_mem, $x_addr) == true);
  requires (gamma_load32(Gamma_mem, $z_addr) == true);
  requires (gamma_load32(Gamma_mem, $secret_addr) == false);
  requires (memory_load32_le(mem, $z_addr) == 0bv32);
{
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R10: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var Gamma_R8: bool;
  var Gamma_R9: bool;
  var Gamma_x_old: bool;
  var R0: bv64;
  var R1: bv64;
  var R10: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  var R8: bv64;
  var R9: bv64;
  var z_old: bv32;
  R0, Gamma_R0 := zero_extend32_32(main_argc), Gamma_main_argc;
  R1, Gamma_R1 := main_argv, Gamma_main_argv;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lmain:
    R0, Gamma_R0 := 0bv64, true;
    R8, Gamma_R8 := 69632bv64, true;
    R9, Gamma_R9 := 69632bv64, true;
    R10, Gamma_R10 := 2bv64, true;
    call rely();
    assert (L(mem, bvadd64(R8, 60bv64)) ==> true);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R8, 60bv64), 0bv32), gamma_store32(Gamma_mem, bvadd64(R8, 60bv64), true);
    assert ((bvadd64(R8, 60bv64) == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    call rely();
    assert (L(mem, bvadd64(R9, 52bv64)) ==> Gamma_R10);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R9, 52bv64), R10[32:0]), gamma_store32(Gamma_mem, bvadd64(R9, 52bv64), Gamma_R10);
    assert ((bvadd64(R9, 52bv64) == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    main_argv_out, Gamma_main_argv_out := R1, Gamma_R1;
    main_result, Gamma_main_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}
