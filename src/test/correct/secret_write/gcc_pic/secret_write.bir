000006a8: program
00000676: sub __cxa_finalize(__cxa_finalize_result)
000006a9: __cxa_finalize_result :: out u32 = low:32[R0]

00000402:
000004fa: R16 := 0x20000
00000501: R17 := mem[R16 + 8, el]:u64
00000507: R16 := R16 + 8
0000050c: call R17 with noreturn

00000677: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006aa: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002bf:
000002c3: #3 := R31 - 0x20
000002c9: mem := mem with [#3, el]:u64 <- R29
000002cf: mem := mem with [#3 + 8, el]:u64 <- R30
000002d3: R31 := #3
000002d9: R29 := R31
000002e1: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002e6: R19 := 0x20000
000002ed: R0 := pad:64[mem[R19 + 0x30]]
000002f3: when 0:0[R0] goto %000002f1
0000069e: goto %000003cb

000003cb:
000003ce: R0 := 0x1F000
000003d5: R0 := mem[R0 + 0xFB0, el]:u64
000003db: when R0 = 0 goto %000003d9
0000069f: goto %000003f2

000003f2:
000003f5: R0 := 0x20000
000003fc: R0 := mem[R0 + 0x28, el]:u64
00000401: R30 := 0x730
00000404: call @__cxa_finalize with return %000003d9

000003d9:
000003e1: R30 := 0x734
000003e3: call @deregister_tm_clones with return %000003e5

000003e5:
000003e8: R0 := 1
000003f0: mem := mem with [R19 + 0x30] <- 7:0[R0]
000006a0: goto %000002f1

000002f1:
000002fb: R19 := mem[R31 + 0x10, el]:u64
00000302: R29 := mem[R31, el]:u64
00000307: R30 := mem[R31 + 8, el]:u64
0000030b: R31 := R31 + 0x20
00000310: call R30 with noreturn

0000067b: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006ab: __libc_start_main_main :: in u64 = R0
000006ac: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006ad: __libc_start_main_arg3 :: in out u64 = R2
000006ae: __libc_start_main_auxv :: in out u64 = R3
000006af: __libc_start_main_result :: out u32 = low:32[R0]

00000218:
000004e4: R16 := 0x20000
000004eb: R17 := mem[R16, el]:u64
000004f1: R16 := R16
000004f6: call R17 with noreturn

0000067c: sub _fini(_fini_result)
000006b0: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000067d: sub _init(_init_result)
000006b1: _init_result :: out u32 = low:32[R0]

000005bc:
000005c2: #5 := R31 - 0x10
000005c8: mem := mem with [#5, el]:u64 <- R29
000005ce: mem := mem with [#5 + 8, el]:u64 <- R30
000005d2: R31 := #5
000005d8: R29 := R31
000005dd: R30 := 0x5D8
000005df: call @call_weak_fn with return %000005e1

000005e1:
000005e6: R29 := mem[R31, el]:u64
000005eb: R30 := mem[R31 + 8, el]:u64
000005ef: R31 := R31 + 0x10
000005f4: call R30 with noreturn

0000067e: sub _start(_start_result)
000006b2: _start_result :: out u32 = low:32[R0]

000001d9:
000001de: R29 := 0
000001e3: R30 := 0
000001e9: R5 := R0
000001f0: R1 := mem[R31, el]:u64
000001f6: R2 := R31 + 8
000001fc: R6 := R31
00000201: R0 := 0x1F000
00000208: R0 := mem[R0 + 0xFD8, el]:u64
0000020d: R3 := 0
00000212: R4 := 0
00000217: R30 := 0x670
0000021a: call @__libc_start_main with return %0000021c

0000021c:
0000021f: R30 := 0x674
00000222: call @abort with return %000006a1

000006a1:
000006a2: call @call_weak_fn with noreturn

00000681: sub abort()


00000220:
00000526: R16 := 0x20000
0000052d: R17 := mem[R16 + 0x18, el]:u64
00000533: R16 := R16 + 0x18
00000538: call R17 with noreturn

00000682: sub call_weak_fn(call_weak_fn_result)
000006b3: call_weak_fn_result :: out u32 = low:32[R0]

00000224:
00000227: R0 := 0x1F000
0000022e: R0 := mem[R0 + 0xFC8, el]:u64
00000234: when R0 = 0 goto %00000232
000006a3: goto %00000442

00000232:
0000023a: call R30 with noreturn

00000442:
00000445: goto @__gmon_start__

00000443:
00000510: R16 := 0x20000
00000517: R17 := mem[R16 + 0x10, el]:u64
0000051d: R16 := R16 + 0x10
00000522: call R17 with noreturn

00000684: sub deregister_tm_clones(deregister_tm_clones_result)
000006b4: deregister_tm_clones_result :: out u32 = low:32[R0]

00000240:
00000243: R0 := 0x20000
00000249: R0 := R0 + 0x30
0000024e: R1 := 0x20000
00000254: R1 := R1 + 0x30
0000025a: #1 := ~R0
0000025f: #2 := R1 + ~R0
00000265: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000026b: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000026f: ZF := #2 + 1 = 0
00000273: NF := 63:63[#2 + 1]
00000279: when ZF goto %00000277
000006a4: goto %00000424

00000424:
00000427: R1 := 0x1F000
0000042e: R1 := mem[R1 + 0xFA8, el]:u64
00000433: when R1 = 0 goto %00000277
000006a5: goto %00000437

00000277:
0000027f: call R30 with noreturn

00000437:
0000043b: R16 := R1
00000440: call R16 with noreturn

00000687: sub frame_dummy(frame_dummy_result)
000006b5: frame_dummy_result :: out u32 = low:32[R0]

00000316:
00000318: call @register_tm_clones with noreturn

00000688: sub main(main_argc, main_argv, main_result)
000006b6: main_argc :: in u32 = low:32[R0]
000006b7: main_argv :: in out u64 = R1
000006b8: main_result :: out u32 = low:32[R0]

0000031a:
0000031d: R0 := 0x1F000
00000324: R0 := mem[R0 + 0xFB8, el]:u64
0000032b: mem := mem with [R0, el]:u32 <- 0
00000330: R0 := 0x1F000
00000337: R0 := mem[R0 + 0xFB8, el]:u64
0000033e: R0 := pad:64[mem[R0, el]:u32]
00000344: R1 := pad:64[31:0[R0] + 1]
00000349: R0 := 0x1F000
00000350: R0 := mem[R0 + 0xFB8, el]:u64
00000358: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000035d: R0 := 0x1F000
00000364: R0 := mem[R0 + 0xFD0, el]:u64
0000036b: R1 := pad:64[mem[R0, el]:u32]
00000370: R0 := 0x1F000
00000377: R0 := mem[R0 + 0xFC0, el]:u64
0000037f: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000384: R0 := 0x1F000
0000038b: R0 := mem[R0 + 0xFC0, el]:u64
00000392: mem := mem with [R0, el]:u32 <- 0
00000397: R0 := 0x1F000
0000039e: R0 := mem[R0 + 0xFB8, el]:u64
000003a5: R0 := pad:64[mem[R0, el]:u32]
000003ab: R1 := pad:64[31:0[R0] + 1]
000003b0: R0 := 0x1F000
000003b7: R0 := mem[R0 + 0xFB8, el]:u64
000003bf: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003c4: R0 := 0
000003c9: call R30 with noreturn

00000689: sub register_tm_clones(register_tm_clones_result)
000006b9: register_tm_clones_result :: out u32 = low:32[R0]

00000281:
00000284: R0 := 0x20000
0000028a: R0 := R0 + 0x30
0000028f: R1 := 0x20000
00000295: R1 := R1 + 0x30
0000029c: R1 := R1 + ~R0 + 1
000002a2: R2 := 0.63:63[R1]
000002a9: R1 := R2 + (R1 ~>> 3)
000002af: R1 := extend:64[63:1[R1]]
000002b5: when R1 = 0 goto %000002b3
000006a6: goto %00000406

00000406:
00000409: R2 := 0x1F000
00000410: R2 := mem[R2 + 0xFE0, el]:u64
00000415: when R2 = 0 goto %000002b3
000006a7: goto %00000419

000002b3:
000002bb: call R30 with noreturn

00000419:
0000041d: R16 := R2
00000422: call R16 with noreturn
