var {:extern} Gamma_mem: [bv64]bool;
var {:extern} mem: [bv64]bv8;
const {:extern} $secret_addr: bv64;
axiom ($secret_addr == 69660bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69656bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69652bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $secret_addr) then false else (if (index == $x_addr) then (bvsmod32(memory_load32_le(memory, $z_addr), 2bv32) == 0bv32) else (if (index == $z_addr) then true else false)))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsge"} bvsge32(bv32, bv32) returns (bool);
function {:extern} {:bvbuiltin "bvsmod"} bvsmod32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (memory_load32_le(mem, $z_addr) == old(memory_load32_le(mem, $z_addr)));
  ensures (old(gamma_load32(Gamma_mem, $x_addr)) ==> gamma_load32(Gamma_mem, $x_addr));
  free ensures (memory_load8_le(mem, 2008bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2009bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2010bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2011bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69608bv64) == 69660bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 1872bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (memory_load32_le(mem, $z_addr) == old(memory_load32_le(mem, $z_addr)));
  ensures (old(gamma_load32(Gamma_mem, $x_addr)) ==> gamma_load32(Gamma_mem, $x_addr));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert (memory_load32_le(mem, $z_addr) == memory_load32_le(mem, $z_addr));
  assert (gamma_load32(Gamma_mem, $x_addr) ==> gamma_load32(Gamma_mem, $x_addr));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

implementation {:extern} guarantee_reflexive()
{
  assert bvsge32(memory_load32_le(mem, $z_addr), memory_load32_le(mem, $z_addr));
}

procedure main(R0_in: bv64, Gamma_R0_in: bool, R1_in: bv64, Gamma_R1_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool);
  modifies Gamma_mem, mem;
  requires (gamma_load32(Gamma_mem, $x_addr) == true);
  requires (gamma_load32(Gamma_mem, $z_addr) == true);
  requires (gamma_load32(Gamma_mem, $secret_addr) == false);
  requires (memory_load32_le(mem, $z_addr) == 0bv32);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 2008bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2009bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2010bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2011bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69608bv64) == 69660bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 69656bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 68992bv64) == 1872bv64);
  free ensures (memory_load8_le(mem, 2008bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2009bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2010bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2011bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69608bv64) == 69660bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 68992bv64) == 1872bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R1_in: bv64, Gamma_R1_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool)
{
  var Gamma_R0_10: bool;
  var Gamma_R0_12: bool;
  var Gamma_R0_14: bool;
  var Gamma_R0_16: bool;
  var Gamma_R0_17: bool;
  var Gamma_R0_19: bool;
  var Gamma_R0_3: bool;
  var Gamma_R0_5: bool;
  var Gamma_R0_6: bool;
  var Gamma_R0_8: bool;
  var Gamma_R1_2: bool;
  var Gamma_R1_3: bool;
  var Gamma_R1_4: bool;
  var Gamma_x_old: bool;
  var R0_10: bv64;
  var R0_12: bv64;
  var R0_14: bv64;
  var R0_16: bv64;
  var R0_17: bv32;
  var R0_19: bv64;
  var R0_3: bv64;
  var R0_5: bv64;
  var R0_6: bv32;
  var R0_8: bv64;
  var R1_2: bv32;
  var R1_3: bv32;
  var R1_4: bv64;
  var z_old: bv32;
  $main$__0__$sQQ_g_3GSW~3KrITchatdg:
    call rely();
    R0_3, Gamma_R0_3 := memory_load64_le(mem, 69584bv64), (gamma_load64(Gamma_mem, 69584bv64) || L(mem, 69584bv64));
    call rely();
    assert (L(mem, R0_3) ==> true);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0_3, 0bv32), gamma_store32(Gamma_mem, R0_3, true);
    assert ((R0_3 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    call rely();
    R0_5, Gamma_R0_5 := memory_load64_le(mem, 69584bv64), (gamma_load64(Gamma_mem, 69584bv64) || L(mem, 69584bv64));
    call rely();
    R0_6, Gamma_R0_6 := memory_load32_le(mem, R0_5), (gamma_load32(Gamma_mem, R0_5) || L(mem, R0_5));
    R1_2, Gamma_R1_2 := bvadd32(R0_6, 1bv32), Gamma_R0_6;
    call rely();
    R0_8, Gamma_R0_8 := memory_load64_le(mem, 69584bv64), (gamma_load64(Gamma_mem, 69584bv64) || L(mem, 69584bv64));
    call rely();
    assert (L(mem, R0_8) ==> Gamma_R1_2);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0_8, R1_2), gamma_store32(Gamma_mem, R0_8, Gamma_R1_2);
    assert ((R0_8 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    call rely();
    R0_10, Gamma_R0_10 := memory_load64_le(mem, 69608bv64), (gamma_load64(Gamma_mem, 69608bv64) || L(mem, 69608bv64));
    call rely();
    R1_3, Gamma_R1_3 := memory_load32_le(mem, R0_10), (gamma_load32(Gamma_mem, R0_10) || L(mem, R0_10));
    call rely();
    R0_12, Gamma_R0_12 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    assert (L(mem, R0_12) ==> Gamma_R1_3);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0_12, R1_3), gamma_store32(Gamma_mem, R0_12, Gamma_R1_3);
    assert ((R0_12 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    call rely();
    R0_14, Gamma_R0_14 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    assert (L(mem, R0_14) ==> true);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0_14, 0bv32), gamma_store32(Gamma_mem, R0_14, true);
    assert ((R0_14 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    call rely();
    R0_16, Gamma_R0_16 := memory_load64_le(mem, 69584bv64), (gamma_load64(Gamma_mem, 69584bv64) || L(mem, 69584bv64));
    call rely();
    R0_17, Gamma_R0_17 := memory_load32_le(mem, R0_16), (gamma_load32(Gamma_mem, R0_16) || L(mem, R0_16));
    R1_4, Gamma_R1_4 := zero_extend32_32(bvadd32(R0_17, 1bv32)), Gamma_R0_17;
    call rely();
    R0_19, Gamma_R0_19 := memory_load64_le(mem, 69584bv64), (gamma_load64(Gamma_mem, 69584bv64) || L(mem, 69584bv64));
    call rely();
    assert (L(mem, R0_19) ==> Gamma_R1_4);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R0_19, R1_4[32:0]), gamma_store32(Gamma_mem, R0_19, Gamma_R1_4);
    assert ((R0_19 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    goto main_basil_return;
  main_basil_return:
    R0_out, R1_out := 0bv64, R1_4;
    Gamma_R0_out, Gamma_R1_out := true, Gamma_R1_4;
    return;
}

