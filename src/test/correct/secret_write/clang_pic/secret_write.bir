00000630: program
000005fe: sub __cxa_finalize(__cxa_finalize_result)
00000631: __cxa_finalize_result :: out u32 = low:32[R0]

0000039e:
00000496: R16 := 0x11000
0000049d: R17 := mem[R16 + 8, el]:u64
000004a3: R16 := R16 + 8
000004a8: call R17 with noreturn

000005ff: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000632: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000296:
0000029a: #3 := R31 - 0x20
000002a0: mem := mem with [#3, el]:u64 <- R29
000002a6: mem := mem with [#3 + 8, el]:u64 <- R30
000002aa: R31 := #3
000002b0: R29 := R31
000002b8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002bd: R19 := 0x11000
000002c4: R0 := pad:64[mem[R19 + 0x30]]
000002cb: when 31:0[R0] <> 0 goto %000002c9
00000626: goto %00000367

00000367:
0000036a: R0 := 0x10000
00000371: R0 := mem[R0 + 0xFB0, el]:u64
00000377: when R0 = 0 goto %00000375
00000627: goto %0000038e

0000038e:
00000391: R0 := 0x11000
00000398: R0 := mem[R0 + 0x28, el]:u64
0000039d: R30 := 0x730
000003a0: call @__cxa_finalize with return %00000375

00000375:
0000037d: R30 := 0x734
0000037f: call @deregister_tm_clones with return %00000381

00000381:
00000384: R0 := 1
0000038c: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000628: goto %000002c9

000002c9:
000002d3: R19 := mem[R31 + 0x10, el]:u64
000002da: R29 := mem[R31, el]:u64
000002df: R30 := mem[R31 + 8, el]:u64
000002e3: R31 := R31 + 0x20
000002e8: call R30 with noreturn

00000603: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000633: __libc_start_main_main :: in u64 = R0
00000634: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000635: __libc_start_main_arg3 :: in out u64 = R2
00000636: __libc_start_main_auxv :: in out u64 = R3
00000637: __libc_start_main_result :: out u32 = low:32[R0]

000001ef:
00000480: R16 := 0x11000
00000487: R17 := mem[R16, el]:u64
0000048d: R16 := R16
00000492: call R17 with noreturn

00000604: sub _fini(_fini_result)
00000638: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000605: sub _init(_init_result)
00000639: _init_result :: out u32 = low:32[R0]

0000054e:
00000554: #5 := R31 - 0x10
0000055a: mem := mem with [#5, el]:u64 <- R29
00000560: mem := mem with [#5 + 8, el]:u64 <- R30
00000564: R31 := #5
0000056a: R29 := R31
0000056f: R30 := 0x5D8
00000571: call @call_weak_fn with return %00000573

00000573:
00000578: R29 := mem[R31, el]:u64
0000057d: R30 := mem[R31 + 8, el]:u64
00000581: R31 := R31 + 0x10
00000586: call R30 with noreturn

00000606: sub _start(_start_result)
0000063a: _start_result :: out u32 = low:32[R0]

000001b0:
000001b5: R29 := 0
000001ba: R30 := 0
000001c0: R5 := R0
000001c7: R1 := mem[R31, el]:u64
000001cd: R2 := R31 + 8
000001d3: R6 := R31
000001d8: R0 := 0x10000
000001df: R0 := mem[R0 + 0xFD8, el]:u64
000001e4: R3 := 0
000001e9: R4 := 0
000001ee: R30 := 0x670
000001f1: call @__libc_start_main with return %000001f3

000001f3:
000001f6: R30 := 0x674
000001f9: call @abort with return %00000629

00000629:
0000062a: call @call_weak_fn with noreturn

00000609: sub abort()


000001f7:
000004c2: R16 := 0x11000
000004c9: R17 := mem[R16 + 0x18, el]:u64
000004cf: R16 := R16 + 0x18
000004d4: call R17 with noreturn

0000060a: sub call_weak_fn(call_weak_fn_result)
0000063b: call_weak_fn_result :: out u32 = low:32[R0]

000001fb:
000001fe: R0 := 0x10000
00000205: R0 := mem[R0 + 0xFC8, el]:u64
0000020b: when R0 = 0 goto %00000209
0000062b: goto %000003de

00000209:
00000211: call R30 with noreturn

000003de:
000003e1: goto @__gmon_start__

000003df:
000004ac: R16 := 0x11000
000004b3: R17 := mem[R16 + 0x10, el]:u64
000004b9: R16 := R16 + 0x10
000004be: call R17 with noreturn

0000060c: sub deregister_tm_clones(deregister_tm_clones_result)
0000063c: deregister_tm_clones_result :: out u32 = low:32[R0]

00000217:
0000021a: R0 := 0x11000
00000220: R0 := R0 + 0x30
00000225: R1 := 0x11000
0000022b: R1 := R1 + 0x30
00000231: #1 := ~R0
00000236: #2 := R1 + ~R0
0000023c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000242: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000246: ZF := #2 + 1 = 0
0000024a: NF := 63:63[#2 + 1]
00000250: when ZF goto %0000024e
0000062c: goto %000003c0

000003c0:
000003c3: R1 := 0x10000
000003ca: R1 := mem[R1 + 0xFA8, el]:u64
000003cf: when R1 = 0 goto %0000024e
0000062d: goto %000003d3

0000024e:
00000256: call R30 with noreturn

000003d3:
000003d7: R16 := R1
000003dc: call R16 with noreturn

0000060f: sub frame_dummy(frame_dummy_result)
0000063d: frame_dummy_result :: out u32 = low:32[R0]

000002ee:
000002f0: call @register_tm_clones with noreturn

00000610: sub main(main_argc, main_argv, main_result)
0000063e: main_argc :: in u32 = low:32[R0]
0000063f: main_argv :: in out u64 = R1
00000640: main_result :: out u32 = low:32[R0]

000002f2:
000002f5: R9 := 0x10000
000002fc: R9 := mem[R9 + 0xFB8, el]:u64
00000301: R0 := 0
00000308: mem := mem with [R9, el]:u32 <- 0
0000030f: R8 := pad:64[mem[R9, el]:u32]
00000315: R8 := pad:64[31:0[R8] + 1]
0000031d: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000322: R8 := 0x10000
00000329: R8 := mem[R8 + 0xFD0, el]:u64
00000330: R10 := pad:64[mem[R8, el]:u32]
00000335: R8 := 0x10000
0000033c: R8 := mem[R8 + 0xFC0, el]:u64
00000344: mem := mem with [R8, el]:u32 <- 31:0[R10]
0000034b: mem := mem with [R8, el]:u32 <- 0
00000352: R8 := pad:64[mem[R9, el]:u32]
00000358: R8 := pad:64[31:0[R8] + 1]
00000360: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000365: call R30 with noreturn

00000611: sub register_tm_clones(register_tm_clones_result)
00000641: register_tm_clones_result :: out u32 = low:32[R0]

00000258:
0000025b: R0 := 0x11000
00000261: R0 := R0 + 0x30
00000266: R1 := 0x11000
0000026c: R1 := R1 + 0x30
00000273: R1 := R1 + ~R0 + 1
00000279: R2 := 0.63:63[R1]
00000280: R1 := R2 + (R1 ~>> 3)
00000286: R1 := extend:64[63:1[R1]]
0000028c: when R1 = 0 goto %0000028a
0000062e: goto %000003a2

000003a2:
000003a5: R2 := 0x10000
000003ac: R2 := mem[R2 + 0xFE0, el]:u64
000003b1: when R2 = 0 goto %0000028a
0000062f: goto %000003b5

0000028a:
00000292: call R30 with noreturn

000003b5:
000003b9: R16 := R2
000003be: call R16 with noreturn
