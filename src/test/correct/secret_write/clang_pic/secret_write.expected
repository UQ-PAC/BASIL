var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R10: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R10: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
const {:extern} $secret_addr: bv64;
axiom ($secret_addr == 69688bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69692bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69684bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $secret_addr) then false else (if (index == $x_addr) then (bvsmod32(memory_load32_le(mem$in, $z_addr), 2bv32) == 0bv32) else (if (index == $z_addr) then true else false)))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsge"} bvsge32(bv32, bv32) returns (bool);
function {:extern} {:bvbuiltin "bvsmod"} bvsmod32(bv32, bv32) returns (bv32);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (memory_load32_le(mem, $z_addr) == old(memory_load32_le(mem, $z_addr)));
  ensures (old(gamma_load32(Gamma_mem, $x_addr)) ==> gamma_load32(Gamma_mem, $x_addr));
  free ensures (memory_load32_le(mem, 1968bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69040bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69048bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69560bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69692bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (memory_load32_le(mem, $z_addr) == old(memory_load32_le(mem, $z_addr)));
  ensures (old(gamma_load32(Gamma_mem, $x_addr)) ==> gamma_load32(Gamma_mem, $x_addr));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert (memory_load32_le(mem, $z_addr) == memory_load32_le(mem, $z_addr));
  assert (gamma_load32(Gamma_mem, $x_addr) ==> gamma_load32(Gamma_mem, $x_addr));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

implementation {:extern} guarantee_reflexive()
{
  assert bvsge32(memory_load32_le(mem, $z_addr), memory_load32_le(mem, $z_addr));
}

procedure main();
  modifies Gamma_R0, Gamma_R10, Gamma_R8, Gamma_R9, Gamma_mem, R0, R10, R8, R9, mem;
  requires (gamma_load32(Gamma_mem, $x_addr) == true);
  requires (gamma_load32(Gamma_mem, $z_addr) == true);
  requires (gamma_load32(Gamma_mem, $secret_addr) == false);
  requires (memory_load32_le(mem, $z_addr) == 0bv32);
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le(mem, 1968bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69040bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69048bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69560bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69692bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 69688bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load32_le(mem, 1968bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69040bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69048bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69560bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69692bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);

implementation main()
{
  var $load$18: bv64;
  var $load$19: bv32;
  var $load$20: bv64;
  var $load$21: bv32;
  var $load$22: bv64;
  var $load$23: bv32;
  var Gamma_$load$18: bool;
  var Gamma_$load$19: bool;
  var Gamma_$load$20: bool;
  var Gamma_$load$21: bool;
  var Gamma_$load$22: bool;
  var Gamma_$load$23: bool;
  var Gamma_x_old: bool;
  var z_old: bv32;
  lmain:
    assume {:captureState "lmain"} true;
    R9, Gamma_R9 := 65536bv64, true;
    call rely();
    $load$18, Gamma_$load$18 := memory_load64_le(mem, bvadd64(R9, 4024bv64)), (gamma_load64(Gamma_mem, bvadd64(R9, 4024bv64)) || L(mem, bvadd64(R9, 4024bv64)));
    R9, Gamma_R9 := $load$18, Gamma_$load$18;
    R0, Gamma_R0 := 0bv64, true;
    call rely();
    assert (L(mem, R9) ==> true);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R9, 0bv32), gamma_store32(Gamma_mem, R9, true);
    assert ((R9 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    assume {:captureState "%00000308"} true;
    call rely();
    $load$19, Gamma_$load$19 := memory_load32_le(mem, R9), (gamma_load32(Gamma_mem, R9) || L(mem, R9));
    R8, Gamma_R8 := zero_extend32_32($load$19), Gamma_$load$19;
    R8, Gamma_R8 := zero_extend32_32(bvadd32(R8[32:0], 1bv32)), Gamma_R8;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assert ((R9 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    assume {:captureState "%0000031d"} true;
    R8, Gamma_R8 := 65536bv64, true;
    call rely();
    $load$20, Gamma_$load$20 := memory_load64_le(mem, bvadd64(R8, 4048bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4048bv64)) || L(mem, bvadd64(R8, 4048bv64)));
    R8, Gamma_R8 := $load$20, Gamma_$load$20;
    call rely();
    $load$21, Gamma_$load$21 := memory_load32_le(mem, R8), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R10, Gamma_R10 := zero_extend32_32($load$21), Gamma_$load$21;
    R8, Gamma_R8 := 65536bv64, true;
    call rely();
    $load$22, Gamma_$load$22 := memory_load64_le(mem, bvadd64(R8, 4032bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4032bv64)) || L(mem, bvadd64(R8, 4032bv64)));
    R8, Gamma_R8 := $load$22, Gamma_$load$22;
    call rely();
    assert (L(mem, R8) ==> Gamma_R10);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R8, R10[32:0]), gamma_store32(Gamma_mem, R8, Gamma_R10);
    assert ((R8 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    assume {:captureState "%00000344"} true;
    call rely();
    assert (L(mem, R8) ==> true);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R8, 0bv32), gamma_store32(Gamma_mem, R8, true);
    assert ((R8 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    assume {:captureState "%0000034b"} true;
    call rely();
    $load$23, Gamma_$load$23 := memory_load32_le(mem, R9), (gamma_load32(Gamma_mem, R9) || L(mem, R9));
    R8, Gamma_R8 := zero_extend32_32($load$23), Gamma_$load$23;
    R8, Gamma_R8 := zero_extend32_32(bvadd32(R8[32:0], 1bv32)), Gamma_R8;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    z_old := memory_load32_le(mem, $z_addr);
    Gamma_x_old := (gamma_load32(Gamma_mem, $x_addr) || L(mem, $x_addr));
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assert ((R9 == $z_addr) ==> (L(mem, $x_addr) ==> Gamma_x_old));
    assert bvsge32(memory_load32_le(mem, $z_addr), z_old);
    assume {:captureState "%00000360"} true;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

