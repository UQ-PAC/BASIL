00000afc: program
00000ae6: sub __cxa_finalize(__cxa_finalize_result)
00000afd: __cxa_finalize_result :: out u32 = low:32[R0]

0000089e:
00000996: R16 := 0x10000
0000099d: R17 := mem[R16 + 0xFB8, el]:u64
000009a3: R16 := R16 + 0xFB8
000009a8: call R17 with noreturn

00000ae7: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000afe: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000007e9:
000007ed: #3 := R31 - 0x20
000007f3: mem := mem with [#3, el]:u64 <- R29
000007f9: mem := mem with [#3 + 8, el]:u64 <- R30
000007fd: R31 := #3
00000803: R29 := R31
0000080b: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000810: R19 := 0x11000
00000817: R0 := pad:64[mem[R19 + 0x10]]
0000081e: when 31:0[R0] <> 0 goto %0000081c
00000ae8: goto %00000867

00000867:
0000086a: R0 := 0x10000
00000871: R0 := mem[R0 + 0xFE0, el]:u64
00000877: when R0 = 0 goto %00000875
00000ae9: goto %0000088e

0000088e:
00000891: R0 := 0x11000
00000898: R0 := mem[R0 + 8, el]:u64
0000089d: R30 := 0x6F0
000008a0: call @__cxa_finalize with return %00000875

00000875:
0000087d: R30 := 0x6F4
0000087f: call @deregister_tm_clones with return %00000881

00000881:
00000884: R0 := 1
0000088c: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000aea: goto %0000081c

0000081c:
00000826: R19 := mem[R31 + 0x10, el]:u64
0000082d: R29 := mem[R31, el]:u64
00000832: R30 := mem[R31 + 8, el]:u64
00000836: R31 := R31 + 0x20
0000083b: call R30 with noreturn

00000aeb: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000aff: __libc_start_main_main :: in u64 = R0
00000b00: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000b01: __libc_start_main_arg3 :: in out u64 = R2
00000b02: __libc_start_main_auxv :: in out u64 = R3
00000b03: __libc_start_main_result :: out u32 = low:32[R0]

00000742:
00000980: R16 := 0x10000
00000987: R17 := mem[R16 + 0xFB0, el]:u64
0000098d: R16 := R16 + 0xFB0
00000992: call R17 with noreturn

00000aec: sub _fini(_fini_result)
00000b04: _fini_result :: out u32 = low:32[R0]

000005a2:
000005a8: #0 := R31 - 0x10
000005ae: mem := mem with [#0, el]:u64 <- R29
000005b4: mem := mem with [#0 + 8, el]:u64 <- R30
000005b8: R31 := #0
000005be: R29 := R31
000005c5: R29 := mem[R31, el]:u64
000005ca: R30 := mem[R31 + 8, el]:u64
000005ce: R31 := R31 + 0x10
000005d3: call R30 with noreturn

00000aed: sub _init(_init_result)
00000b05: _init_result :: out u32 = low:32[R0]

00000a42:
00000a48: #5 := R31 - 0x10
00000a4e: mem := mem with [#5, el]:u64 <- R29
00000a54: mem := mem with [#5 + 8, el]:u64 <- R30
00000a58: R31 := #5
00000a5e: R29 := R31
00000a63: R30 := 0x590
00000a65: call @call_weak_fn with return %00000a67

00000a67:
00000a6c: R29 := mem[R31, el]:u64
00000a71: R30 := mem[R31 + 8, el]:u64
00000a75: R31 := R31 + 0x10
00000a7a: call R30 with noreturn

00000aee: sub _start(_start_result)
00000b06: _start_result :: out u32 = low:32[R0]

00000703:
00000708: R29 := 0
0000070d: R30 := 0
00000713: R5 := R0
0000071a: R1 := mem[R31, el]:u64
00000720: R2 := R31 + 8
00000726: R6 := R31
0000072b: R0 := 0x10000
00000732: R0 := mem[R0 + 0xFF0, el]:u64
00000737: R3 := 0
0000073c: R4 := 0
00000741: R30 := 0x630
00000744: call @__libc_start_main with return %00000746

00000746:
00000749: R30 := 0x634
0000074c: call @abort with return %00000aef

00000aef:
00000af0: call @call_weak_fn with noreturn

00000af1: sub abort()


0000074a:
000009c2: R16 := 0x10000
000009c9: R17 := mem[R16 + 0xFC8, el]:u64
000009cf: R16 := R16 + 0xFC8
000009d4: call R17 with noreturn

00000af2: sub call_weak_fn(call_weak_fn_result)
00000b07: call_weak_fn_result :: out u32 = low:32[R0]

0000074e:
00000751: R0 := 0x10000
00000758: R0 := mem[R0 + 0xFE8, el]:u64
0000075e: when R0 = 0 goto %0000075c
00000af3: goto %000008de

0000075c:
00000764: call R30 with noreturn

000008de:
000008e1: goto @__gmon_start__

000008df:
000009ac: R16 := 0x10000
000009b3: R17 := mem[R16 + 0xFC0, el]:u64
000009b9: R16 := R16 + 0xFC0
000009be: call R17 with noreturn

00000af4: sub deregister_tm_clones(deregister_tm_clones_result)
00000b08: deregister_tm_clones_result :: out u32 = low:32[R0]

0000076a:
0000076d: R0 := 0x11000
00000773: R0 := R0 + 0x10
00000778: R1 := 0x11000
0000077e: R1 := R1 + 0x10
00000784: #1 := ~R0
00000789: #2 := R1 + ~R0
0000078f: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000795: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000799: ZF := #2 + 1 = 0
0000079d: NF := 63:63[#2 + 1]
000007a3: when ZF goto %000007a1
00000af5: goto %000008c0

000008c0:
000008c3: R1 := 0x10000
000008ca: R1 := mem[R1 + 0xFD8, el]:u64
000008cf: when R1 = 0 goto %000007a1
00000af6: goto %000008d3

000007a1:
000007a9: call R30 with noreturn

000008d3:
000008d7: R16 := R1
000008dc: call R16 with noreturn

00000af7: sub frame_dummy(frame_dummy_result)
00000b09: frame_dummy_result :: out u32 = low:32[R0]

00000841:
00000843: call @register_tm_clones with noreturn

00000af8: sub main(main_argc, main_argv, main_result)
00000b0a: main_argc :: in u32 = low:32[R0]
00000b0b: main_argv :: in out u64 = R1
00000b0c: main_result :: out u32 = low:32[R0]

00000845:
00000848: R0 := 0x11000
0000084e: R0 := R0 + 0x14
00000853: R1 := 1
0000085b: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000860: R0 := 0
00000865: call R30 with noreturn

00000af9: sub register_tm_clones(register_tm_clones_result)
00000b0d: register_tm_clones_result :: out u32 = low:32[R0]

000007ab:
000007ae: R0 := 0x11000
000007b4: R0 := R0 + 0x10
000007b9: R1 := 0x11000
000007bf: R1 := R1 + 0x10
000007c6: R1 := R1 + ~R0 + 1
000007cc: R2 := 0.63:63[R1]
000007d3: R1 := R2 + (R1 ~>> 3)
000007d9: R1 := extend:64[63:1[R1]]
000007df: when R1 = 0 goto %000007dd
00000afa: goto %000008a2

000008a2:
000008a5: R2 := 0x10000
000008ac: R2 := mem[R2 + 0xFF8, el]:u64
000008b1: when R2 = 0 goto %000007dd
00000afb: goto %000008b5

000007dd:
000007e5: call R30 with noreturn

000008b5:
000008b9: R16 := R2
000008be: call R16 with noreturn
