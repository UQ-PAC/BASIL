00000675: program
0000063e: sub __cxa_finalize(__cxa_finalize_result)
00000676: __cxa_finalize_result :: out u32 = low:32[R0]

000003ac:
000004b4: R16 := 0x10000
000004bb: R17 := mem[R16 + 0xFB0, el]:u64
000004c1: R16 := R16 + 0xFB0
000004c6: call R17 with noreturn

0000063f: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000677: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000313:
00000317: #4 := R31 - 0x20
0000031d: mem := mem with [#4, el]:u64 <- R29
00000323: mem := mem with [#4 + 8, el]:u64 <- R30
00000327: R31 := #4
0000032d: R29 := R31
00000335: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000033a: R19 := 0x11000
00000341: R0 := pad:64[mem[R19 + 0x10]]
00000348: when 31:0[R0] <> 0 goto %00000346
0000066b: goto %00000375

00000375:
00000378: R0 := 0x10000
0000037f: R0 := mem[R0 + 0xFE0, el]:u64
00000385: when R0 = 0 goto %00000383
0000066c: goto %0000039c

0000039c:
0000039f: R0 := 0x11000
000003a6: R0 := mem[R0 + 8, el]:u64
000003ab: R30 := 0x770
000003ae: call @__cxa_finalize with return %00000383

00000383:
0000038b: R30 := 0x774
0000038d: call @deregister_tm_clones with return %0000038f

0000038f:
00000392: R0 := 1
0000039a: mem := mem with [R19 + 0x10] <- 7:0[R0]
0000066d: goto %00000346

00000346:
00000350: R19 := mem[R31 + 0x10, el]:u64
00000357: R29 := mem[R31, el]:u64
0000035c: R30 := mem[R31 + 8, el]:u64
00000360: R31 := R31 + 0x20
00000365: call R30 with noreturn

00000643: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000678: __libc_start_main_main :: in u64 = R0
00000679: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000067a: __libc_start_main_arg3 :: in out u64 = R2
0000067b: __libc_start_main_auxv :: in out u64 = R3
0000067c: __libc_start_main_result :: out u32 = low:32[R0]

0000026c:
0000049e: R16 := 0x10000
000004a5: R17 := mem[R16 + 0xFA8, el]:u64
000004ab: R16 := R16 + 0xFA8
000004b0: call R17 with noreturn

00000644: sub _fini(_fini_result)
0000067d: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000645: sub _init(_init_result)
0000067e: _init_result :: out u32 = low:32[R0]

00000586:
0000058c: #6 := R31 - 0x10
00000592: mem := mem with [#6, el]:u64 <- R29
00000598: mem := mem with [#6 + 8, el]:u64 <- R30
0000059c: R31 := #6
000005a2: R29 := R31
000005a7: R30 := 0x5C8
000005a9: call @call_weak_fn with return %000005ab

000005ab:
000005b0: R29 := mem[R31, el]:u64
000005b5: R30 := mem[R31 + 8, el]:u64
000005b9: R31 := R31 + 0x10
000005be: call R30 with noreturn

00000646: sub _start(_start_result)
0000067f: _start_result :: out u32 = low:32[R0]

0000022d:
00000232: R29 := 0
00000237: R30 := 0
0000023d: R5 := R0
00000244: R1 := mem[R31, el]:u64
0000024a: R2 := R31 + 8
00000250: R6 := R31
00000255: R0 := 0x10000
0000025c: R0 := mem[R0 + 0xFF0, el]:u64
00000261: R3 := 0
00000266: R4 := 0
0000026b: R30 := 0x6B0
0000026e: call @__libc_start_main with return %00000270

00000270:
00000273: R30 := 0x6B4
00000276: call @abort with return %0000066e

0000066e:
0000066f: call @call_weak_fn with noreturn

00000649: sub abort()


00000274:
000004e0: R16 := 0x10000
000004e7: R17 := mem[R16 + 0xFC0, el]:u64
000004ed: R16 := R16 + 0xFC0
000004f2: call R17 with noreturn

0000064a: sub call_weak_fn(call_weak_fn_result)
00000680: call_weak_fn_result :: out u32 = low:32[R0]

00000278:
0000027b: R0 := 0x10000
00000282: R0 := mem[R0 + 0xFE8, el]:u64
00000288: when R0 = 0 goto %00000286
00000670: goto %000003ec

00000286:
0000028e: call R30 with noreturn

000003ec:
000003ef: goto @__gmon_start__

000003ed:
000004ca: R16 := 0x10000
000004d1: R17 := mem[R16 + 0xFB8, el]:u64
000004d7: R16 := R16 + 0xFB8
000004dc: call R17 with noreturn

0000064c: sub deregister_tm_clones(deregister_tm_clones_result)
00000681: deregister_tm_clones_result :: out u32 = low:32[R0]

00000294:
00000297: R0 := 0x11000
0000029d: R0 := R0 + 0x10
000002a2: R1 := 0x11000
000002a8: R1 := R1 + 0x10
000002ae: #2 := ~R0
000002b3: #3 := R1 + ~R0
000002b9: VF := extend:65[#3 + 1] <> extend:65[R1] + extend:65[#2] + 1
000002bf: CF := pad:65[#3 + 1] <> pad:65[R1] + pad:65[#2] + 1
000002c3: ZF := #3 + 1 = 0
000002c7: NF := 63:63[#3 + 1]
000002cd: when ZF goto %000002cb
00000671: goto %000003ce

000003ce:
000003d1: R1 := 0x10000
000003d8: R1 := mem[R1 + 0xFD8, el]:u64
000003dd: when R1 = 0 goto %000002cb
00000672: goto %000003e1

000002cb:
000002d3: call R30 with noreturn

000003e1:
000003e5: R16 := R1
000003ea: call R16 with noreturn

0000064f: sub frame_dummy(frame_dummy_result)
00000682: frame_dummy_result :: out u32 = low:32[R0]

0000036b:
0000036d: call @register_tm_clones with noreturn

00000650: sub greet(greet_result)
00000683: greet_result :: out u32 = low:32[R0]

000001f3:
000001f9: R0 := 0
000001ff: R0 := R0 + 0x7C8
00000203: call @puts with noreturn

00000651: sub main(main_argc, main_argv, main_result)
00000684: main_argc :: in u32 = low:32[R0]
00000685: main_argv :: in out u64 = R1
00000686: main_result :: out u32 = low:32[R0]

000001c0:
000001c4: #1 := R31 - 0x10
000001ca: mem := mem with [#1, el]:u64 <- R29
000001d0: mem := mem with [#1 + 8, el]:u64 <- R30
000001d4: R31 := #1
000001d9: R0 := 0
000001df: R0 := R0 + 0x7D8
000001e5: R29 := R31
000001ea: R30 := 0x654
000001ed: call @puts with return %000001ef

000001ef:
000001f2: R30 := 0x658
000001f5: call @greet with return %00000205

00000205:
00000208: R0 := 0
0000020f: R29 := mem[R31, el]:u64
00000214: R30 := mem[R31 + 8, el]:u64
00000218: R31 := R31 + 0x10
0000021d: call R30 with noreturn

00000652: sub puts(puts_s, puts_result)
00000687: puts_s :: in u64 = R0
00000688: puts_result :: out u32 = low:32[R0]

000001eb:
000004f6: R16 := 0x10000
000004fd: R17 := mem[R16 + 0xFC8, el]:u64
00000503: R16 := R16 + 0xFC8
00000508: call R17 with noreturn

00000653: sub register_tm_clones(register_tm_clones_result)
00000689: register_tm_clones_result :: out u32 = low:32[R0]

000002d5:
000002d8: R0 := 0x11000
000002de: R0 := R0 + 0x10
000002e3: R1 := 0x11000
000002e9: R1 := R1 + 0x10
000002f0: R1 := R1 + ~R0 + 1
000002f6: R2 := 0.63:63[R1]
000002fd: R1 := R2 + (R1 ~>> 3)
00000303: R1 := extend:64[63:1[R1]]
00000309: when R1 = 0 goto %00000307
00000673: goto %000003b0

000003b0:
000003b3: R2 := 0x10000
000003ba: R2 := mem[R2 + 0xFF8, el]:u64
000003bf: when R2 = 0 goto %00000307
00000674: goto %000003c3

00000307:
0000030f: call R30 with noreturn

000003c3:
000003c7: R16 := R2
000003cc: call R16 with noreturn
