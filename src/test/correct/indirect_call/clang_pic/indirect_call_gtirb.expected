var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R16: bool;
var {:extern} $Gamma_R17: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R16: bv64;
var {:extern} $R17: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $R8: bv64;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $_DYNAMIC_addr: bv64;
axiom ($_DYNAMIC_addr == 69072bv64);
const {:extern} $_GLOBAL_OFFSET_TABLE__addr: bv64;
axiom ($_GLOBAL_OFFSET_TABLE__addr == 69552bv64);
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2060bv64);
const {:extern} $__FRAME_END___addr: bv64;
axiom ($__FRAME_END___addr == 2412bv64);
const {:extern} $__abi_tag_addr: bv64;
axiom ($__abi_tag_addr == 632bv64);
const {:extern} $__do_global_dtors_aux_fini_array_entry_addr: bv64;
axiom ($__do_global_dtors_aux_fini_array_entry_addr == 69064bv64);
const {:extern} $__frame_dummy_init_array_entry_addr: bv64;
axiom ($__frame_dummy_init_array_entry_addr == 69056bv64);
const {:extern} $completed.0_addr: bv64;
axiom ($completed.0_addr == 69688bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_load8_le(#memory: [bv64]bv8, #index: bv64) returns (bv8) {
  #memory[#index]
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load8_le($mem, 2060bv64) == 1bv8);
  free ensures (memory_load8_le($mem, 2061bv64) == 0bv8);
  free ensures (memory_load8_le($mem, 2062bv64) == 2bv8);
  free ensures (memory_load8_le($mem, 2063bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 2064bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le($mem, 2072bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le($mem, 2080bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le($mem, 2088bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le($mem, 2096bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le($mem, 2104bv64) == 121bv8);
  free ensures (memory_load8_le($mem, 2105bv64) == 58bv8);
  free ensures (memory_load8_le($mem, 2106bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2107bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69056bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 69064bv64) == 1856bv64);
  free ensures (memory_load64_le($mem, 69576bv64) == 1940bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1968bv64);
  free ensures (memory_load64_le($mem, 69680bv64) == 69680bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$printf();
  free requires (memory_load8_le($mem, 2060bv64) == 1bv8);
  free requires (memory_load8_le($mem, 2061bv64) == 0bv8);
  free requires (memory_load8_le($mem, 2062bv64) == 2bv8);
  free requires (memory_load8_le($mem, 2063bv64) == 0bv8);
  free requires (memory_load64_le($mem, 2064bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le($mem, 2072bv64) == 4827869939076199023bv64);
  free requires (memory_load64_le($mem, 2080bv64) == 7431053109074095201bv64);
  free requires (memory_load64_le($mem, 2088bv64) == 7575099826965407090bv64);
  free requires (memory_load64_le($mem, 2096bv64) == 7814980540757009518bv64);
  free requires (memory_load8_le($mem, 2104bv64) == 121bv8);
  free requires (memory_load8_le($mem, 2105bv64) == 58bv8);
  free requires (memory_load8_le($mem, 2106bv64) == 10bv8);
  free requires (memory_load8_le($mem, 2107bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69056bv64) == 1936bv64);
  free requires (memory_load64_le($mem, 69064bv64) == 1856bv64);
  free requires (memory_load64_le($mem, 69576bv64) == 1940bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1968bv64);
  free requires (memory_load64_le($mem, 69680bv64) == 69680bv64);
  free ensures (memory_load8_le($mem, 2060bv64) == 1bv8);
  free ensures (memory_load8_le($mem, 2061bv64) == 0bv8);
  free ensures (memory_load8_le($mem, 2062bv64) == 2bv8);
  free ensures (memory_load8_le($mem, 2063bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 2064bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le($mem, 2072bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le($mem, 2080bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le($mem, 2088bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le($mem, 2096bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le($mem, 2104bv64) == 121bv8);
  free ensures (memory_load8_le($mem, 2105bv64) == 58bv8);
  free ensures (memory_load8_le($mem, 2106bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2107bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69056bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 69064bv64) == 1856bv64);
  free ensures (memory_load64_le($mem, 69576bv64) == 1940bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1968bv64);
  free ensures (memory_load64_le($mem, 69680bv64) == 69680bv64);

procedure p$greet_1940();
  modifies $Gamma_R0, $Gamma_R16, $Gamma_R17, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_mem, $Gamma_stack, $R0, $R16, $R17, $R29, $R30, $R31, $mem, $stack;
  free requires (memory_load8_le($mem, 2060bv64) == 1bv8);
  free requires (memory_load8_le($mem, 2061bv64) == 0bv8);
  free requires (memory_load8_le($mem, 2062bv64) == 2bv8);
  free requires (memory_load8_le($mem, 2063bv64) == 0bv8);
  free requires (memory_load64_le($mem, 2064bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le($mem, 2072bv64) == 4827869939076199023bv64);
  free requires (memory_load64_le($mem, 2080bv64) == 7431053109074095201bv64);
  free requires (memory_load64_le($mem, 2088bv64) == 7575099826965407090bv64);
  free requires (memory_load64_le($mem, 2096bv64) == 7814980540757009518bv64);
  free requires (memory_load8_le($mem, 2104bv64) == 121bv8);
  free requires (memory_load8_le($mem, 2105bv64) == 58bv8);
  free requires (memory_load8_le($mem, 2106bv64) == 10bv8);
  free requires (memory_load8_le($mem, 2107bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69056bv64) == 1936bv64);
  free requires (memory_load64_le($mem, 69064bv64) == 1856bv64);
  free requires (memory_load64_le($mem, 69576bv64) == 1940bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1968bv64);
  free requires (memory_load64_le($mem, 69680bv64) == 69680bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load8_le($mem, 2060bv64) == 1bv8);
  free ensures (memory_load8_le($mem, 2061bv64) == 0bv8);
  free ensures (memory_load8_le($mem, 2062bv64) == 2bv8);
  free ensures (memory_load8_le($mem, 2063bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 2064bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le($mem, 2072bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le($mem, 2080bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le($mem, 2088bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le($mem, 2096bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le($mem, 2104bv64) == 121bv8);
  free ensures (memory_load8_le($mem, 2105bv64) == 58bv8);
  free ensures (memory_load8_le($mem, 2106bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2107bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69056bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 69064bv64) == 1856bv64);
  free ensures (memory_load64_le($mem, 69576bv64) == 1940bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1968bv64);
  free ensures (memory_load64_le($mem, 69680bv64) == 69680bv64);

implementation p$greet_1940()
{
  var #Cse0__5_2: bv64;
  var #Gamma_Cse0__5_2: bool;
  var #Gamma_load20: bool;
  var #Gamma_load4: bool;
  var #Gamma_load5: bool;
  var #load20: bv64;
  var #load4: bv64;
  var #load5: bv64;
  b#greet_entry:
    assume {:captureState "greet_entry (2iOaL1UgSjeQS6XoIxVEwg==)"} true;
    #Cse0__5_2, #Gamma_Cse0__5_2 := bvadd64($R31, 18446744073709551600bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_2, $R29), gamma_store64($Gamma_stack, #Cse0__5_2, $Gamma_R29);
    assume {:captureState "1940_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_2, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_2, 8bv64), $Gamma_R30);
    assume {:captureState "1940_2"} true;
    $R31, $Gamma_R31 := #Cse0__5_2, #Gamma_Cse0__5_2;
    $R29, $Gamma_R29 := $R31, $Gamma_R31;
    $R0, $Gamma_R0 := 0bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 2064bv64), $Gamma_R0;
    $R30, $Gamma_R30 := 1960bv64, true;
    goto b#FUN_650_entry_481;
  b#FUN_650_entry_481:
    assume {:captureState "FUN_650_entry_481"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load20, #Gamma_load20 := memory_load64_le($mem, bvadd64($R16, 32bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 32bv64)) || L($mem, bvadd64($R16, 32bv64)));
    $R17, $Gamma_R17 := #load20, #Gamma_load20;
    $R16, $Gamma_R16 := bvadd64($R16, 32bv64), $Gamma_R16;
    call p$printf();
    goto b#FUN_650_basil_return_1_482;
  b#FUN_650_basil_return_1_482:
    assume {:captureState "FUN_650_basil_return_1_482"} true;
    goto b#_inlineret_3;
  b#_inlineret_3:
    assume {:captureState "_inlineret_3 (2iOaL1UgSjeQS6XoIxVEwg==)"} true;
    goto b#greet_3;
  b#greet_3:
    assume {:captureState "greet_3 (qE3JfQuGRqKhzooPEQBb4Q==)"} true;
    #load4, #Gamma_load4 := memory_load64_le($stack, $R31), gamma_load64($Gamma_stack, $R31);
    $R29, $Gamma_R29 := #load4, #Gamma_load4;
    #load5, #Gamma_load5 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R30, $Gamma_R30 := #load5, #Gamma_load5;
    $R31, $Gamma_R31 := bvadd64($R31, 16bv64), $Gamma_R31;
    goto b#greet_basil_return_1;
  b#greet_basil_return_1:
    assume {:captureState "greet_basil_return_1"} true;
    return;
}

procedure p$main_1968();
  modifies $Gamma_R0, $Gamma_R16, $Gamma_R17, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_R8, $Gamma_mem, $Gamma_stack, $R0, $R16, $R17, $R29, $R30, $R31, $R8, $mem, $stack;
  free requires (memory_load64_le($mem, 69672bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69680bv64) == 69680bv64);
  free requires (memory_load8_le($mem, 2060bv64) == 1bv8);
  free requires (memory_load8_le($mem, 2061bv64) == 0bv8);
  free requires (memory_load8_le($mem, 2062bv64) == 2bv8);
  free requires (memory_load8_le($mem, 2063bv64) == 0bv8);
  free requires (memory_load64_le($mem, 2064bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le($mem, 2072bv64) == 4827869939076199023bv64);
  free requires (memory_load64_le($mem, 2080bv64) == 7431053109074095201bv64);
  free requires (memory_load64_le($mem, 2088bv64) == 7575099826965407090bv64);
  free requires (memory_load64_le($mem, 2096bv64) == 7814980540757009518bv64);
  free requires (memory_load8_le($mem, 2104bv64) == 121bv8);
  free requires (memory_load8_le($mem, 2105bv64) == 58bv8);
  free requires (memory_load8_le($mem, 2106bv64) == 10bv8);
  free requires (memory_load8_le($mem, 2107bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69056bv64) == 1936bv64);
  free requires (memory_load64_le($mem, 69064bv64) == 1856bv64);
  free requires (memory_load64_le($mem, 69576bv64) == 1940bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1968bv64);
  free requires (memory_load64_le($mem, 69680bv64) == 69680bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load8_le($mem, 2060bv64) == 1bv8);
  free ensures (memory_load8_le($mem, 2061bv64) == 0bv8);
  free ensures (memory_load8_le($mem, 2062bv64) == 2bv8);
  free ensures (memory_load8_le($mem, 2063bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 2064bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le($mem, 2072bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le($mem, 2080bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le($mem, 2088bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le($mem, 2096bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le($mem, 2104bv64) == 121bv8);
  free ensures (memory_load8_le($mem, 2105bv64) == 58bv8);
  free ensures (memory_load8_le($mem, 2106bv64) == 10bv8);
  free ensures (memory_load8_le($mem, 2107bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69056bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 69064bv64) == 1856bv64);
  free ensures (memory_load64_le($mem, 69576bv64) == 1940bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1968bv64);
  free ensures (memory_load64_le($mem, 69680bv64) == 69680bv64);

implementation p$main_1968()
{
  var #Cse0__5_4: bv64;
  var #Cse0__5_5: bv64;
  var #Gamma_Cse0__5_4: bool;
  var #Gamma_Cse0__5_5: bool;
  var #Gamma_load14: bool;
  var #Gamma_load15: bool;
  var #Gamma_load16: bool;
  var #Gamma_load17: bool;
  var #Gamma_load18: bool;
  var #Gamma_load20: bool;
  var #load14: bv64;
  var #load15: bv64;
  var #load16: bv32;
  var #load17: bv64;
  var #load18: bv64;
  var #load20: bv64;
  b#main_entry:
    assume {:captureState "main_entry (sMTViGMvRc6UQwwHLkZ0lg==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551568bv64), $Gamma_R31;
    #Cse0__5_4, #Gamma_Cse0__5_4 := bvadd64($R31, 32bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_4, $R29), gamma_store64($Gamma_stack, #Cse0__5_4, $Gamma_R29);
    assume {:captureState "1972_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_4, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_4, 8bv64), $Gamma_R30);
    assume {:captureState "1972_2"} true;
    $R29, $Gamma_R29 := bvadd64($R31, 32bv64), $Gamma_R31;
    $R8, $Gamma_R8 := 0bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), $R8[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), $Gamma_R8);
    assume {:captureState "1984_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R29, 18446744073709551612bv64), 0bv32), gamma_store32($Gamma_stack, bvadd64($R29, 18446744073709551612bv64), true);
    assume {:captureState "1988_0"} true;
    $R8, $Gamma_R8 := 65536bv64, true;
    call p$rely();
    #load14, #Gamma_load14 := memory_load64_le($mem, bvadd64($R8, 4040bv64)), (gamma_load64($Gamma_mem, bvadd64($R8, 4040bv64)) || L($mem, bvadd64($R8, 4040bv64)));
    $R8, $Gamma_R8 := #load14, #Gamma_load14;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 16bv64), $R8), gamma_store64($Gamma_stack, bvadd64($R31, 16bv64), $Gamma_R8);
    assume {:captureState "2000_0"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 2079bv64), $Gamma_R0;
    $R30, $Gamma_R30 := 2016bv64, true;
    goto b#FUN_650_entry_483;
  b#FUN_650_entry_483:
    assume {:captureState "FUN_650_entry_483"} true;
    $R16, $Gamma_R16 := 69632bv64, true;
    call p$rely();
    #load20, #Gamma_load20 := memory_load64_le($mem, bvadd64($R16, 32bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 32bv64)) || L($mem, bvadd64($R16, 32bv64)));
    $R17, $Gamma_R17 := #load20, #Gamma_load20;
    $R16, $Gamma_R16 := bvadd64($R16, 32bv64), $Gamma_R16;
    call p$printf();
    goto b#FUN_650_basil_return_1_484;
  b#FUN_650_basil_return_1_484:
    assume {:captureState "FUN_650_basil_return_1_484"} true;
    goto b#_inlineret_3;
  b#_inlineret_3:
    assume {:captureState "_inlineret_3 (sMTViGMvRc6UQwwHLkZ0lg==)"} true;
    goto b#main_5;
  b#main_5:
    assume {:captureState "main_5 (3xrW3vxVQYegwMrQhPeDAA==)"} true;
    #load15, #Gamma_load15 := memory_load64_le($stack, bvadd64($R31, 16bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 16bv64));
    $R8, $Gamma_R8 := #load15, #Gamma_load15;
    $R30, $Gamma_R30 := 2024bv64, true;
    call p$greet_1940();
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (+oSET3ZKQL2oiUDT8+pKHA==)"} true;
    #load16, #Gamma_load16 := memory_load32_le($stack, bvadd64($R31, 12bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 12bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load16), #Gamma_load16;
    #Cse0__5_5, #Gamma_Cse0__5_5 := bvadd64($R31, 32bv64), $Gamma_R31;
    #load17, #Gamma_load17 := memory_load64_le($stack, #Cse0__5_5), gamma_load64($Gamma_stack, #Cse0__5_5);
    $R29, $Gamma_R29 := #load17, #Gamma_load17;
    #load18, #Gamma_load18 := memory_load64_le($stack, bvadd64(#Cse0__5_5, 8bv64)), gamma_load64($Gamma_stack, bvadd64(#Cse0__5_5, 8bv64));
    $R30, $Gamma_R30 := #load18, #Gamma_load18;
    $R31, $Gamma_R31 := bvadd64($R31, 48bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

