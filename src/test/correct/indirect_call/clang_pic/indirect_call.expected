var Gamma_R0: bool;
var Gamma_R29: bool;
var Gamma_R30: bool;
var Gamma_R31: bool;
var Gamma_R8: bool;
var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var R0: bv64;
var R29: bv64;
var R30: bv64;
var R31: bv64;
var R8: bv64;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2060bv64);
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure main()
  modifies Gamma_R0, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_stack, R0, R29, R30, R31, R8, stack;
  free requires (memory_load8_le(mem, 2060bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2061bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2062bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2063bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2064bv64) == 72bv8);
  free requires (memory_load8_le(mem, 2065bv64) == 101bv8);
  free requires (memory_load8_le(mem, 2066bv64) == 108bv8);
  free requires (memory_load8_le(mem, 2067bv64) == 108bv8);
  free requires (memory_load8_le(mem, 2068bv64) == 111bv8);
  free requires (memory_load8_le(mem, 2069bv64) == 44bv8);
  free requires (memory_load8_le(mem, 2070bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2071bv64) == 119bv8);
  free requires (memory_load8_le(mem, 2072bv64) == 111bv8);
  free requires (memory_load8_le(mem, 2073bv64) == 114bv8);
  free requires (memory_load8_le(mem, 2074bv64) == 108bv8);
  free requires (memory_load8_le(mem, 2075bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2076bv64) == 33bv8);
  free requires (memory_load8_le(mem, 2077bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2078bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2079bv64) == 67bv8);
  free requires (memory_load8_le(mem, 2080bv64) == 97bv8);
  free requires (memory_load8_le(mem, 2081bv64) == 108bv8);
  free requires (memory_load8_le(mem, 2082bv64) == 108bv8);
  free requires (memory_load8_le(mem, 2083bv64) == 105bv8);
  free requires (memory_load8_le(mem, 2084bv64) == 110bv8);
  free requires (memory_load8_le(mem, 2085bv64) == 103bv8);
  free requires (memory_load8_le(mem, 2086bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2087bv64) == 103bv8);
  free requires (memory_load8_le(mem, 2088bv64) == 114bv8);
  free requires (memory_load8_le(mem, 2089bv64) == 101bv8);
  free requires (memory_load8_le(mem, 2090bv64) == 101bv8);
  free requires (memory_load8_le(mem, 2091bv64) == 116bv8);
  free requires (memory_load8_le(mem, 2092bv64) == 40bv8);
  free requires (memory_load8_le(mem, 2093bv64) == 41bv8);
  free requires (memory_load8_le(mem, 2094bv64) == 32bv8);
  free requires (memory_load8_le(mem, 2095bv64) == 105bv8);
  free requires (memory_load8_le(mem, 2096bv64) == 110bv8);
  free requires (memory_load8_le(mem, 2097bv64) == 100bv8);
  free requires (memory_load8_le(mem, 2098bv64) == 105bv8);
  free requires (memory_load8_le(mem, 2099bv64) == 114bv8);
  free requires (memory_load8_le(mem, 2100bv64) == 101bv8);
  free requires (memory_load8_le(mem, 2101bv64) == 99bv8);
  free requires (memory_load8_le(mem, 2102bv64) == 116bv8);
  free requires (memory_load8_le(mem, 2103bv64) == 108bv8);
  free requires (memory_load8_le(mem, 2104bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2105bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2106bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2107bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69552bv64) == 208bv8);
  free requires (memory_load8_le(mem, 69553bv64) == 13bv8);
  free requires (memory_load8_le(mem, 69554bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69555bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69556bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69557bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69558bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69559bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69560bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69561bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69562bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69563bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69564bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69565bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69566bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69567bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69568bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69569bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69570bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69571bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69572bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69573bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69574bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69575bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69576bv64) == 148bv8);
  free requires (memory_load8_le(mem, 69577bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69578bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69579bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69580bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69581bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69582bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69583bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69584bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69585bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69586bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69587bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69588bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69589bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69590bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69591bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69592bv64) == 176bv8);
  free requires (memory_load8_le(mem, 69593bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69594bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69600bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69601bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69602bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69603bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69604bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69605bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69606bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69607bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69672bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69673bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69674bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69680bv64) == 48bv8);
  free requires (memory_load8_le(mem, 69681bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69682bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69683bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69684bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69685bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69686bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69687bv64) == 0bv8);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
{
  var #5: bv64;
  var #6: bv64;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  lmain:
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551568bv64), Gamma_R31;
    #5, Gamma_#5 := bvadd64(R31, 32bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #5, R29), gamma_store64(Gamma_stack, #5, Gamma_R29);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#5, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#5, 8bv64), Gamma_R30);
    R29, Gamma_R29 := bvadd64(R31, 32bv64), Gamma_R31;
    R8, Gamma_R8 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R8);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64), true);
    R8, Gamma_R8 := 65536bv64, true;
    R8, Gamma_R8 := memory_load64_le(mem, bvadd64(R8, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4040bv64)) || L(mem, bvadd64(R8, 4040bv64)));
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R8);
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2079bv64), Gamma_R0;
    R30, Gamma_R30 := 2016bv64, true;
    call printf();
    goto l000003aa;
  l000003aa:
    R8, Gamma_R8 := memory_load64_le(mem, bvadd64(R31, 16bv64)), (gamma_load64(Gamma_mem, bvadd64(R31, 16bv64)) || L(mem, bvadd64(R31, 16bv64)));
    R30, Gamma_R30 := 2024bv64, true;
    //UNRESOLVED: call R8
    assume false;
    goto l000003b9;
  l000003b9:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(mem, bvadd64(R31, 12bv64))), (gamma_load32(Gamma_mem, bvadd64(R31, 12bv64)) || L(mem, bvadd64(R31, 12bv64)));
    #6, Gamma_#6 := bvadd64(R31, 32bv64), Gamma_R31;
    R29, Gamma_R29 := memory_load64_le(mem, #6), (gamma_load64(Gamma_mem, #6) || L(mem, #6));
    R30, Gamma_R30 := memory_load64_le(mem, bvadd64(#6, 8bv64)), (gamma_load64(Gamma_mem, bvadd64(#6, 8bv64)) || L(mem, bvadd64(#6, 8bv64)));
    R31, Gamma_R31 := bvadd64(R31, 48bv64), Gamma_R31;
    return;
}

procedure printf();
