0000065f: program
00000628: sub __cxa_finalize(__cxa_finalize_result)
00000660: __cxa_finalize_result :: out u32 = low:32[R0]

00000412:
0000051a: R16 := 0x11000
00000521: R17 := mem[R16 + 8, el]:u64
00000527: R16 := R16 + 8
0000052c: call R17 with noreturn

00000629: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000661: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002b2:
000002b6: #3 := R31 - 0x20
000002bc: mem := mem with [#3, el]:u64 <- R29
000002c2: mem := mem with [#3 + 8, el]:u64 <- R30
000002c6: R31 := #3
000002cc: R29 := R31
000002d4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002d9: R19 := 0x11000
000002e0: R0 := pad:64[mem[R19 + 0x38]]
000002e7: when 31:0[R0] <> 0 goto %000002e5
00000655: goto %000003db

000003db:
000003de: R0 := 0x10000
000003e5: R0 := mem[R0 + 0xFC0, el]:u64
000003eb: when R0 = 0 goto %000003e9
00000656: goto %00000402

00000402:
00000405: R0 := 0x11000
0000040c: R0 := mem[R0 + 0x30, el]:u64
00000411: R30 := 0x770
00000414: call @__cxa_finalize with return %000003e9

000003e9:
000003f1: R30 := 0x774
000003f3: call @deregister_tm_clones with return %000003f5

000003f5:
000003f8: R0 := 1
00000400: mem := mem with [R19 + 0x38] <- 7:0[R0]
00000657: goto %000002e5

000002e5:
000002ef: R19 := mem[R31 + 0x10, el]:u64
000002f6: R29 := mem[R31, el]:u64
000002fb: R30 := mem[R31 + 8, el]:u64
000002ff: R31 := R31 + 0x20
00000304: call R30 with noreturn

0000062d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000662: __libc_start_main_main :: in u64 = R0
00000663: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000664: __libc_start_main_arg3 :: in out u64 = R2
00000665: __libc_start_main_auxv :: in out u64 = R3
00000666: __libc_start_main_result :: out u32 = low:32[R0]

0000020b:
00000504: R16 := 0x11000
0000050b: R17 := mem[R16, el]:u64
00000511: R16 := R16
00000516: call R17 with noreturn

0000062e: sub _fini(_fini_result)
00000667: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000062f: sub _init(_init_result)
00000668: _init_result :: out u32 = low:32[R0]

0000058a:
00000590: #8 := R31 - 0x10
00000596: mem := mem with [#8, el]:u64 <- R29
0000059c: mem := mem with [#8 + 8, el]:u64 <- R30
000005a0: R31 := #8
000005a6: R29 := R31
000005ab: R30 := 0x5E0
000005ad: call @call_weak_fn with return %000005af

000005af:
000005b4: R29 := mem[R31, el]:u64
000005b9: R30 := mem[R31 + 8, el]:u64
000005bd: R31 := R31 + 0x10
000005c2: call R30 with noreturn

00000630: sub _start(_start_result)
00000669: _start_result :: out u32 = low:32[R0]

000001cc:
000001d1: R29 := 0
000001d6: R30 := 0
000001dc: R5 := R0
000001e3: R1 := mem[R31, el]:u64
000001e9: R2 := R31 + 8
000001ef: R6 := R31
000001f4: R0 := 0x10000
000001fb: R0 := mem[R0 + 0xFD8, el]:u64
00000200: R3 := 0
00000205: R4 := 0
0000020a: R30 := 0x6B0
0000020d: call @__libc_start_main with return %0000020f

0000020f:
00000212: R30 := 0x6B4
00000215: call @abort with return %00000658

00000658:
00000659: call @call_weak_fn with noreturn

00000633: sub abort()


00000213:
00000546: R16 := 0x11000
0000054d: R17 := mem[R16 + 0x18, el]:u64
00000553: R16 := R16 + 0x18
00000558: call R17 with noreturn

00000634: sub call_weak_fn(call_weak_fn_result)
0000066a: call_weak_fn_result :: out u32 = low:32[R0]

00000217:
0000021a: R0 := 0x10000
00000221: R0 := mem[R0 + 0xFD0, el]:u64
00000227: when R0 = 0 goto %00000225
0000065a: goto %00000452

00000225:
0000022d: call R30 with noreturn

00000452:
00000455: goto @__gmon_start__

00000453:
00000530: R16 := 0x11000
00000537: R17 := mem[R16 + 0x10, el]:u64
0000053d: R16 := R16 + 0x10
00000542: call R17 with noreturn

00000636: sub deregister_tm_clones(deregister_tm_clones_result)
0000066b: deregister_tm_clones_result :: out u32 = low:32[R0]

00000233:
00000236: R0 := 0x11000
0000023c: R0 := R0 + 0x38
00000241: R1 := 0x11000
00000247: R1 := R1 + 0x38
0000024d: #1 := ~R0
00000252: #2 := R1 + ~R0
00000258: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000025e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000262: ZF := #2 + 1 = 0
00000266: NF := 63:63[#2 + 1]
0000026c: when ZF goto %0000026a
0000065b: goto %00000434

00000434:
00000437: R1 := 0x10000
0000043e: R1 := mem[R1 + 0xFB8, el]:u64
00000443: when R1 = 0 goto %0000026a
0000065c: goto %00000447

0000026a:
00000272: call R30 with noreturn

00000447:
0000044b: R16 := R1
00000450: call R16 with noreturn

00000639: sub frame_dummy(frame_dummy_result)
0000066c: frame_dummy_result :: out u32 = low:32[R0]

0000030a:
0000030c: call @register_tm_clones with noreturn

0000063a: sub greet(greet_result)
0000066d: greet_result :: out u32 = low:32[R0]

0000030e:
00000312: #4 := R31 - 0x10
00000318: mem := mem with [#4, el]:u64 <- R29
0000031e: mem := mem with [#4 + 8, el]:u64 <- R30
00000322: R31 := #4
00000328: R29 := R31
0000032d: R0 := 0
00000333: R0 := R0 + 0x810
00000338: R30 := 0x7A8
0000033b: call @printf with return %0000033d

0000033d:
00000342: R29 := mem[R31, el]:u64
00000347: R30 := mem[R31 + 8, el]:u64
0000034b: R31 := R31 + 0x10
00000350: call R30 with noreturn

0000063b: sub main(main_argc, main_argv, main_result)
0000066e: main_argc :: in u32 = low:32[R0]
0000066f: main_argv :: in out u64 = R1
00000670: main_result :: out u32 = low:32[R0]

00000352:
00000356: R31 := R31 - 0x30
0000035c: #5 := R31 + 0x20
00000362: mem := mem with [#5, el]:u64 <- R29
00000368: mem := mem with [#5 + 8, el]:u64 <- R30
0000036e: R29 := R31 + 0x20
00000373: R8 := 0
0000037b: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000382: mem := mem with [R29 - 4, el]:u32 <- 0
00000387: R8 := 0x10000
0000038e: R8 := mem[R8 + 0xFC8, el]:u64
00000396: mem := mem with [R31 + 0x10, el]:u64 <- R8
0000039b: R0 := 0
000003a1: R0 := R0 + 0x81F
000003a6: R30 := 0x7E0
000003a8: call @printf with return %000003aa

000003aa:
000003af: R8 := mem[R31 + 0x10, el]:u64
000003b4: R30 := 0x7E8
000003b7: call R8 with return %000003b9

000003b9:
000003be: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000003c4: #6 := R31 + 0x20
000003c9: R29 := mem[#6, el]:u64
000003ce: R30 := mem[#6 + 8, el]:u64
000003d4: R31 := R31 + 0x30
000003d9: call R30 with noreturn

0000063c: sub printf(printf_format, printf_result)
00000671: printf_format :: in u64 = R0
00000672: printf_result :: out u32 = low:32[R0]

00000339:
0000055c: R16 := 0x11000
00000563: R17 := mem[R16 + 0x20, el]:u64
00000569: R16 := R16 + 0x20
0000056e: call R17 with noreturn

0000063d: sub register_tm_clones(register_tm_clones_result)
00000673: register_tm_clones_result :: out u32 = low:32[R0]

00000274:
00000277: R0 := 0x11000
0000027d: R0 := R0 + 0x38
00000282: R1 := 0x11000
00000288: R1 := R1 + 0x38
0000028f: R1 := R1 + ~R0 + 1
00000295: R2 := 0.63:63[R1]
0000029c: R1 := R2 + (R1 ~>> 3)
000002a2: R1 := extend:64[63:1[R1]]
000002a8: when R1 = 0 goto %000002a6
0000065d: goto %00000416

00000416:
00000419: R2 := 0x10000
00000420: R2 := mem[R2 + 0xFE0, el]:u64
00000425: when R2 = 0 goto %000002a6
0000065e: goto %00000429

000002a6:
000002ae: call R30 with noreturn

00000429:
0000042d: R16 := R2
00000432: call R16 with noreturn
