var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1996bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load8_le(mem, 1996bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1997bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1998bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1999bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le(mem, 2040bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2041bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2042bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2043bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure greet_1876();
  modifies Gamma_R0, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R16, R17, R29, R30, R31, mem, stack;
  free requires (memory_load8_le(mem, 1996bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1997bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1998bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1999bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free requires (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free requires (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free requires (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free requires (memory_load8_le(mem, 2040bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2041bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2042bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2043bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 1996bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1997bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1998bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1999bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le(mem, 2040bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2041bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2042bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2043bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

implementation greet_1876()
{
  var Cse0__5_0_0: bv64;
  var Gamma_Cse0__5_0_0: bool;
  var Gamma_load1: bool;
  var Gamma_load2: bool;
  var Gamma_load3: bool;
  var load1: bv64;
  var load2: bv64;
  var load3: bv64;
  greet_1876__0__Nd2KKa~UT46Es~75P1pNcg:
    assume {:captureState "greet_1876__0__Nd2KKa~UT46Es~75P1pNcg"} true;
    Cse0__5_0_0, Gamma_Cse0__5_0_0 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5_0_0, R29), gamma_store64(Gamma_stack, Cse0__5_0_0, Gamma_R29);
    assume {:captureState "1876_1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5_0_0, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5_0_0, 8bv64), Gamma_R30);
    assume {:captureState "1876_2"} true;
    R31, Gamma_R31 := Cse0__5_0_0, Gamma_Cse0__5_0_0;
    R29, Gamma_R29 := R31, Gamma_R31;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2000bv64), Gamma_R0;
    R30, Gamma_R30 := 1896bv64, true;
    goto FUN_630_1584__0__49PTrR3fTD2lKP8wnhJ57g_469;
  FUN_630_1584__0__49PTrR3fTD2lKP8wnhJ57g_469:
    assume {:captureState "FUN_630_1584__0__49PTrR3fTD2lKP8wnhJ57g_469"} true;
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    load1, Gamma_load1 := memory_load64_le(mem, bvadd64(R16, 32bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 32bv64)) || L(mem, bvadd64(R16, 32bv64)));
    R17, Gamma_R17 := load1, Gamma_load1;
    R16, Gamma_R16 := bvadd64(R16, 32bv64), Gamma_R16;
    call printf();
    goto FUN_630_1584_basil_return_470;
  FUN_630_1584_basil_return_470:
    assume {:captureState "FUN_630_1584_basil_return_470"} true;
    goto greet_1876__0__Nd2KKa~UT46Es~75P1pNcg_inlineret;
  greet_1876__0__Nd2KKa~UT46Es~75P1pNcg_inlineret:
    assume {:captureState "greet_1876__0__Nd2KKa~UT46Es~75P1pNcg_inlineret"} true;
    goto greet_1876__1__wP8zXF~mT7CtEXlgRwnnfA;
  greet_1876__1__wP8zXF~mT7CtEXlgRwnnfA:
    assume {:captureState "greet_1876__1__wP8zXF~mT7CtEXlgRwnnfA"} true;
    load2, Gamma_load2 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R29, Gamma_R29 := load2, Gamma_load2;
    load3, Gamma_load3 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := load3, Gamma_load3;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto greet_1876_basil_return;
  greet_1876_basil_return:
    assume {:captureState "greet_1876_basil_return"} true;
    return;
}

procedure main_1904();
  modifies Gamma_R0, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_mem, Gamma_stack, R0, R16, R17, R29, R30, R31, R8, mem, stack;
  free requires (memory_load64_le(mem, 69672bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free requires (memory_load8_le(mem, 1996bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1997bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1998bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1999bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free requires (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free requires (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free requires (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free requires (memory_load8_le(mem, 2040bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2041bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2042bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2043bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 1996bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1997bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1998bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1999bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le(mem, 2040bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2041bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2042bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2043bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

implementation main_1904()
{
  var Cse0__5_0_1: bv64;
  var Cse0__5_1_1: bv64;
  var Gamma_Cse0__5_0_1: bool;
  var Gamma_Cse0__5_1_1: bool;
  var Gamma_load1: bool;
  var Gamma_load21: bool;
  var Gamma_load22: bool;
  var Gamma_load23: bool;
  var Gamma_load24: bool;
  var load1: bv64;
  var load21: bv32;
  var load22: bv64;
  var load23: bv64;
  var load24: bv64;
  main_1904__0__YfoEKj0KQgmJWDAtkqhLtQ:
    assume {:captureState "main_1904__0__YfoEKj0KQgmJWDAtkqhLtQ"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551568bv64), Gamma_R31;
    Cse0__5_0_1, Gamma_Cse0__5_0_1 := bvadd64(R31, 32bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5_0_1, R29), gamma_store64(Gamma_stack, Cse0__5_0_1, Gamma_R29);
    assume {:captureState "1908_1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5_0_1, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5_0_1, 8bv64), Gamma_R30);
    assume {:captureState "1908_2"} true;
    R29, Gamma_R29 := bvadd64(R31, 32bv64), Gamma_R31;
    R8, Gamma_R8 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R8);
    assume {:captureState "1920_0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64), true);
    assume {:captureState "1924_0"} true;
    R8, Gamma_R8 := 0bv64, true;
    R8, Gamma_R8 := bvadd64(R8, 1876bv64), Gamma_R8;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R8);
    assume {:captureState "1936_0"} true;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2015bv64), Gamma_R0;
    R30, Gamma_R30 := 1952bv64, true;
    goto FUN_630_1584__0__49PTrR3fTD2lKP8wnhJ57g_471;
  FUN_630_1584__0__49PTrR3fTD2lKP8wnhJ57g_471:
    assume {:captureState "FUN_630_1584__0__49PTrR3fTD2lKP8wnhJ57g_471"} true;
    R16, Gamma_R16 := 69632bv64, true;
    call rely();
    load1, Gamma_load1 := memory_load64_le(mem, bvadd64(R16, 32bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 32bv64)) || L(mem, bvadd64(R16, 32bv64)));
    R17, Gamma_R17 := load1, Gamma_load1;
    R16, Gamma_R16 := bvadd64(R16, 32bv64), Gamma_R16;
    call printf();
    goto FUN_630_1584_basil_return_472;
  FUN_630_1584_basil_return_472:
    assume {:captureState "FUN_630_1584_basil_return_472"} true;
    goto main_1904__0__YfoEKj0KQgmJWDAtkqhLtQ_inlineret;
  main_1904__0__YfoEKj0KQgmJWDAtkqhLtQ_inlineret:
    assume {:captureState "main_1904__0__YfoEKj0KQgmJWDAtkqhLtQ_inlineret"} true;
    goto main_1904__1__2meKsDplTtaQ3v5DgFlGYQ;
  main_1904__1__2meKsDplTtaQ3v5DgFlGYQ:
    assume {:captureState "main_1904__1__2meKsDplTtaQ3v5DgFlGYQ"} true;
    load24, Gamma_load24 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R8, Gamma_R8 := load24, Gamma_load24;
    R30, Gamma_R30 := 1960bv64, true;
    call greet_1876();
    goto main_1904__2__ZjG4NofsQHGQIBdy45MZMg;
  main_1904__2__ZjG4NofsQHGQIBdy45MZMg:
    assume {:captureState "main_1904__2__ZjG4NofsQHGQIBdy45MZMg"} true;
    load21, Gamma_load21 := memory_load32_le(stack, bvadd64(R31, 12bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    R0, Gamma_R0 := zero_extend32_32(load21), Gamma_load21;
    Cse0__5_1_1, Gamma_Cse0__5_1_1 := bvadd64(R31, 32bv64), Gamma_R31;
    load22, Gamma_load22 := memory_load64_le(stack, Cse0__5_1_1), gamma_load64(Gamma_stack, Cse0__5_1_1);
    R29, Gamma_R29 := load22, Gamma_load22;
    load23, Gamma_load23 := memory_load64_le(stack, bvadd64(Cse0__5_1_1, 8bv64)), gamma_load64(Gamma_stack, bvadd64(Cse0__5_1_1, 8bv64));
    R30, Gamma_R30 := load23, Gamma_load23;
    R31, Gamma_R31 := bvadd64(R31, 48bv64), Gamma_R31;
    goto main_1904_basil_return;
  main_1904_basil_return:
    assume {:captureState "main_1904_basil_return"} true;
    return;
}

procedure printf();
  free requires (memory_load8_le(mem, 1996bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1997bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1998bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1999bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free requires (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free requires (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free requires (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free requires (memory_load8_le(mem, 2040bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2041bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2042bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2043bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free ensures (memory_load8_le(mem, 1996bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1997bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1998bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1999bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le(mem, 2040bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2041bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2042bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2043bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

