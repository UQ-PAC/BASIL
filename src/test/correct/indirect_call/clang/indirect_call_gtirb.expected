var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1996bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:inline} byte_extract64_64(value: bv64, offset: bv64) returns (bv8) {
  bvlshr64(value,bvmul64(offset,8bv64))[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then byte_extract64_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1996bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1997bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1998bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1999bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le(mem, 2040bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2041bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2042bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2043bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure FUN_630(R16_in: bv64, Gamma_R16_in: bool) returns (R16_out: bv64, Gamma_R16_out: bool, R17_out: bv64, Gamma_R17_out: bool);
  modifies Gamma_mem, mem;
  free requires (memory_load8_le(mem, 1996bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1997bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1998bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1999bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free requires (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free requires (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free requires (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free requires (memory_load8_le(mem, 2040bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2041bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2042bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2043bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free ensures (memory_load8_le(mem, 1996bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1997bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1998bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1999bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le(mem, 2040bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2041bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2042bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2043bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

implementation FUN_630(R16_in: bv64, Gamma_R16_in: bool) returns (R16_out: bv64, Gamma_R16_out: bool, R17_out: bv64, Gamma_R17_out: bool)
{
  var Gamma_R0: bool;
  var Gamma_R0_1: bool;
  var Gamma_R1: bool;
  var Gamma_R10: bool;
  var Gamma_R10_1: bool;
  var Gamma_R11: bool;
  var Gamma_R11_1: bool;
  var Gamma_R12: bool;
  var Gamma_R12_1: bool;
  var Gamma_R13: bool;
  var Gamma_R13_1: bool;
  var Gamma_R14: bool;
  var Gamma_R14_1: bool;
  var Gamma_R15: bool;
  var Gamma_R15_1: bool;
  var Gamma_R16_4: bool;
  var Gamma_R17_1: bool;
  var Gamma_R17_2: bool;
  var Gamma_R18: bool;
  var Gamma_R18_1: bool;
  var Gamma_R19: bool;
  var Gamma_R19_1: bool;
  var Gamma_R1_1: bool;
  var Gamma_R2: bool;
  var Gamma_R20: bool;
  var Gamma_R20_1: bool;
  var Gamma_R21: bool;
  var Gamma_R21_1: bool;
  var Gamma_R22: bool;
  var Gamma_R22_1: bool;
  var Gamma_R23: bool;
  var Gamma_R23_1: bool;
  var Gamma_R24: bool;
  var Gamma_R24_1: bool;
  var Gamma_R25: bool;
  var Gamma_R25_1: bool;
  var Gamma_R26: bool;
  var Gamma_R26_1: bool;
  var Gamma_R27: bool;
  var Gamma_R27_1: bool;
  var Gamma_R28: bool;
  var Gamma_R28_1: bool;
  var Gamma_R29: bool;
  var Gamma_R29_1: bool;
  var Gamma_R2_1: bool;
  var Gamma_R3: bool;
  var Gamma_R30: bool;
  var Gamma_R30_1: bool;
  var Gamma_R31: bool;
  var Gamma_R31_1: bool;
  var Gamma_R3_1: bool;
  var Gamma_R4: bool;
  var Gamma_R4_1: bool;
  var Gamma_R5: bool;
  var Gamma_R5_1: bool;
  var Gamma_R6: bool;
  var Gamma_R6_1: bool;
  var Gamma_R7: bool;
  var Gamma_R7_1: bool;
  var Gamma_R8: bool;
  var Gamma_R8_1: bool;
  var Gamma_R9: bool;
  var Gamma_R9_1: bool;
  var R0: bv64;
  var R0_1: bv64;
  var R1: bv64;
  var R10: bv64;
  var R10_1: bv64;
  var R11: bv64;
  var R11_1: bv64;
  var R12: bv64;
  var R12_1: bv64;
  var R13: bv64;
  var R13_1: bv64;
  var R14: bv64;
  var R14_1: bv64;
  var R15: bv64;
  var R15_1: bv64;
  var R16_4: bv64;
  var R17_1: bv64;
  var R17_2: bv64;
  var R18: bv64;
  var R18_1: bv64;
  var R19: bv64;
  var R19_1: bv64;
  var R1_1: bv64;
  var R2: bv64;
  var R20: bv64;
  var R20_1: bv64;
  var R21: bv64;
  var R21_1: bv64;
  var R22: bv64;
  var R22_1: bv64;
  var R23: bv64;
  var R23_1: bv64;
  var R24: bv64;
  var R24_1: bv64;
  var R25: bv64;
  var R25_1: bv64;
  var R26: bv64;
  var R26_1: bv64;
  var R27: bv64;
  var R27_1: bv64;
  var R28: bv64;
  var R28_1: bv64;
  var R29: bv64;
  var R29_1: bv64;
  var R2_1: bv64;
  var R3: bv64;
  var R30: bv64;
  var R30_1: bv64;
  var R31: bv64;
  var R31_1: bv64;
  var R3_1: bv64;
  var R4: bv64;
  var R4_1: bv64;
  var R5: bv64;
  var R5_1: bv64;
  var R6: bv64;
  var R6_1: bv64;
  var R7: bv64;
  var R7_1: bv64;
  var R8: bv64;
  var R8_1: bv64;
  var R9: bv64;
  var R9_1: bv64;
  $FUN_630$__0__$49PTrR3fTD2lKP8wnhJ57g:
    call rely();
    R17_1, Gamma_R17_1 := memory_load64_le(mem, 69664bv64), (gamma_load64(Gamma_mem, 69664bv64) || L(mem, 69664bv64));
    call R0_1, Gamma_R0_1, R10_1, Gamma_R10_1, R11_1, Gamma_R11_1, R12_1, Gamma_R12_1, R13_1, Gamma_R13_1, R14_1, Gamma_R14_1, R15_1, Gamma_R15_1, R16_4, Gamma_R16_4, R17_2, Gamma_R17_2, R18_1, Gamma_R18_1, R19_1, Gamma_R19_1, R1_1, Gamma_R1_1, R20_1, Gamma_R20_1, R21_1, Gamma_R21_1, R22_1, Gamma_R22_1, R23_1, Gamma_R23_1, R24_1, Gamma_R24_1, R25_1, Gamma_R25_1, R26_1, Gamma_R26_1, R27_1, Gamma_R27_1, R28_1, Gamma_R28_1, R29_1, Gamma_R29_1, R2_1, Gamma_R2_1, R30_1, Gamma_R30_1, R31_1, Gamma_R31_1, R3_1, Gamma_R3_1, R4_1, Gamma_R4_1, R5_1, Gamma_R5_1, R6_1, Gamma_R6_1, R7_1, Gamma_R7_1, R8_1, Gamma_R8_1, R9_1, Gamma_R9_1 := printf(R0, Gamma_R0, R10, Gamma_R10, R11, Gamma_R11, R12, Gamma_R12, R13, Gamma_R13, R14, Gamma_R14, R15, Gamma_R15, 69664bv64, true, R17_1, Gamma_R17_1, R18, Gamma_R18, R19, Gamma_R19, R1, Gamma_R1, R20, Gamma_R20, R21, Gamma_R21, R22, Gamma_R22, R23, Gamma_R23, R24, Gamma_R24, R25, Gamma_R25, R26, Gamma_R26, R27, Gamma_R27, R28, Gamma_R28, R29, Gamma_R29, R2, Gamma_R2, R30, Gamma_R30, R31, Gamma_R31, R3, Gamma_R3, R4, Gamma_R4, R5, Gamma_R5, R6, Gamma_R6, R7, Gamma_R7, R8, Gamma_R8, R9, Gamma_R9);
    assume false;
}

procedure greet(R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R31_out: bv64, Gamma_R31_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  free requires (memory_load8_le(mem, 1996bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1997bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1998bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1999bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free requires (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free requires (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free requires (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free requires (memory_load8_le(mem, 2040bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2041bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2042bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2043bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free ensures (memory_load8_le(mem, 1996bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1997bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1998bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1999bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le(mem, 2040bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2041bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2042bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2043bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

implementation greet(R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R31_out: bv64, Gamma_R31_out: bool)
{
  var Gamma_R16: bool;
  var Gamma_R16_1: bool;
  var Gamma_R17_1: bool;
  var R16: bv64;
  var R16_1: bv64;
  var R17_1: bv64;
  $greet$__0__$Nd2KKa~UT46Es~75P1pNcg:
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551600bv64), R29_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551600bv64), Gamma_R29_in);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551608bv64), R30_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), Gamma_R30_in);
    call R16_1, Gamma_R16_1, R17_1, Gamma_R17_1 := FUN_630(R16, Gamma_R16);
    goto greet_basil_return;
  greet_basil_return:
    R31_out := R31_in;
    Gamma_R31_out := Gamma_R31_in;
    return;
}

procedure main(R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R16_out: bv64, Gamma_R16_out: bool, R17_out: bv64, Gamma_R17_out: bool, R29_out: bv64, Gamma_R29_out: bool, R30_out: bv64, Gamma_R30_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  free requires (memory_load64_le(mem, 69672bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free requires (memory_load8_le(mem, 1996bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1997bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1998bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1999bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free requires (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free requires (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free requires (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free requires (memory_load8_le(mem, 2040bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2041bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2042bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2043bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free ensures (memory_load8_le(mem, 1996bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1997bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1998bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1999bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le(mem, 2040bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2041bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2042bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2043bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

implementation main(R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R16_out: bv64, Gamma_R16_out: bool, R17_out: bv64, Gamma_R17_out: bool, R29_out: bv64, Gamma_R29_out: bool, R30_out: bv64, Gamma_R30_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool)
{
  var Gamma_R0_3: bool;
  var Gamma_R16: bool;
  var Gamma_R16_1: bool;
  var Gamma_R17_1: bool;
  var Gamma_R29_3: bool;
  var Gamma_R30_4: bool;
  var Gamma_R31_3: bool;
  var Gamma_R8_4: bool;
  var R0_3: bv64;
  var R16: bv64;
  var R16_1: bv64;
  var R17_1: bv64;
  var R29_3: bv64;
  var R30_4: bv64;
  var R31_3: bv64;
  var R8_4: bv64;
  $main$__0__$YfoEKj0KQgmJWDAtkqhLtQ:
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551600bv64), R29_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551600bv64), Gamma_R29_in);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551608bv64), R30_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551608bv64), Gamma_R30_in);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551580bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551580bv64), true);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551596bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551596bv64), true);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551584bv64), 1876bv64), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551584bv64), true);
    call R16_1, Gamma_R16_1, R17_1, Gamma_R17_1 := FUN_630(R16, Gamma_R16);
    goto $main$__1__$2meKsDplTtaQ3v5DgFlGYQ;
  $main$__1__$2meKsDplTtaQ3v5DgFlGYQ:
    R8_4, Gamma_R8_4 := memory_load64_le(stack, bvadd64(R31_in, 18446744073709551584bv64)), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551584bv64));
    call R31_3, Gamma_R31_3 := greet(bvadd64(R31_in, 18446744073709551600bv64), Gamma_R31_in, 1960bv64, true, bvadd64(R31_in, 18446744073709551568bv64), Gamma_R31_in);
    goto $main$__2__$ZjG4NofsQHGQIBdy45MZMg;
  $main$__2__$ZjG4NofsQHGQIBdy45MZMg:
    R0_3, Gamma_R0_3 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_3, 12bv64))), gamma_load32(Gamma_stack, bvadd64(R31_3, 12bv64));
    R29_3, Gamma_R29_3 := memory_load64_le(stack, bvadd64(R31_3, 32bv64)), gamma_load64(Gamma_stack, bvadd64(R31_3, 32bv64));
    R30_4, Gamma_R30_4 := memory_load64_le(stack, bvadd64(R31_3, 40bv64)), gamma_load64(Gamma_stack, bvadd64(R31_3, 40bv64));
    goto main_basil_return;
  main_basil_return:
    R0_out, R16_out, R17_out, R29_out, R30_out, R31_out, R8_out := R0_3, R16_1, R17_1, R29_3, R30_4, bvadd64(R31_3, 48bv64), R8_4;
    Gamma_R0_out, Gamma_R16_out, Gamma_R17_out, Gamma_R29_out, Gamma_R30_out, Gamma_R31_out, Gamma_R8_out := Gamma_R0_3, Gamma_R16_1, Gamma_R17_1, Gamma_R29_3, Gamma_R30_4, Gamma_R31_3, Gamma_R8_4;
    return;
}

procedure printf(R0_in: bv64, Gamma_R0_in: bool, R10_in: bv64, Gamma_R10_in: bool, R11_in: bv64, Gamma_R11_in: bool, R12_in: bv64, Gamma_R12_in: bool, R13_in: bv64, Gamma_R13_in: bool, R14_in: bv64, Gamma_R14_in: bool, R15_in: bv64, Gamma_R15_in: bool, R16_in: bv64, Gamma_R16_in: bool, R17_in: bv64, Gamma_R17_in: bool, R18_in: bv64, Gamma_R18_in: bool, R19_in: bv64, Gamma_R19_in: bool, R1_in: bv64, Gamma_R1_in: bool, R20_in: bv64, Gamma_R20_in: bool, R21_in: bv64, Gamma_R21_in: bool, R22_in: bv64, Gamma_R22_in: bool, R23_in: bv64, Gamma_R23_in: bool, R24_in: bv64, Gamma_R24_in: bool, R25_in: bv64, Gamma_R25_in: bool, R26_in: bv64, Gamma_R26_in: bool, R27_in: bv64, Gamma_R27_in: bool, R28_in: bv64, Gamma_R28_in: bool, R29_in: bv64, Gamma_R29_in: bool, R2_in: bv64, Gamma_R2_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool, R3_in: bv64, Gamma_R3_in: bool, R4_in: bv64, Gamma_R4_in: bool, R5_in: bv64, Gamma_R5_in: bool, R6_in: bv64, Gamma_R6_in: bool, R7_in: bv64, Gamma_R7_in: bool, R8_in: bv64, Gamma_R8_in: bool, R9_in: bv64, Gamma_R9_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R10_out: bv64, Gamma_R10_out: bool, R11_out: bv64, Gamma_R11_out: bool, R12_out: bv64, Gamma_R12_out: bool, R13_out: bv64, Gamma_R13_out: bool, R14_out: bv64, Gamma_R14_out: bool, R15_out: bv64, Gamma_R15_out: bool, R16_out: bv64, Gamma_R16_out: bool, R17_out: bv64, Gamma_R17_out: bool, R18_out: bv64, Gamma_R18_out: bool, R19_out: bv64, Gamma_R19_out: bool, R1_out: bv64, Gamma_R1_out: bool, R20_out: bv64, Gamma_R20_out: bool, R21_out: bv64, Gamma_R21_out: bool, R22_out: bv64, Gamma_R22_out: bool, R23_out: bv64, Gamma_R23_out: bool, R24_out: bv64, Gamma_R24_out: bool, R25_out: bv64, Gamma_R25_out: bool, R26_out: bv64, Gamma_R26_out: bool, R27_out: bv64, Gamma_R27_out: bool, R28_out: bv64, Gamma_R28_out: bool, R29_out: bv64, Gamma_R29_out: bool, R2_out: bv64, Gamma_R2_out: bool, R30_out: bv64, Gamma_R30_out: bool, R31_out: bv64, Gamma_R31_out: bool, R3_out: bv64, Gamma_R3_out: bool, R4_out: bv64, Gamma_R4_out: bool, R5_out: bv64, Gamma_R5_out: bool, R6_out: bv64, Gamma_R6_out: bool, R7_out: bv64, Gamma_R7_out: bool, R8_out: bv64, Gamma_R8_out: bool, R9_out: bv64, Gamma_R9_out: bool);
  free requires (memory_load8_le(mem, 1996bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1997bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1998bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1999bv64) == 0bv8);
  free requires (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free requires (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free requires (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free requires (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free requires (memory_load8_le(mem, 2040bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2041bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2042bv64) == 10bv8);
  free requires (memory_load8_le(mem, 2043bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 69680bv64);
  free ensures (memory_load8_le(mem, 1996bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1997bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1998bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1999bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 2000bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 4827869939076199023bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 7431053109074095201bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 7575099826965407090bv64);
  free ensures (memory_load64_le(mem, 2032bv64) == 7814980540757009518bv64);
  free ensures (memory_load8_le(mem, 2040bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2041bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2042bv64) == 10bv8);
  free ensures (memory_load8_le(mem, 2043bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1904bv64);
  free ensures (memory_load64_le(mem, 69680bv64) == 69680bv64);

