var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1984bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load64_le(mem, 1984bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 1992bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2000bv64) == 143418749551bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 2334956330884555075bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 2317427963641295463bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 8386658473162862185bv64);
  free ensures (memory_load8_le(mem, 2032bv64) == 108bv8);
  free ensures (memory_load8_le(mem, 2033bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2034bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1908bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure FUN_630_1584();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 1984bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 1992bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le(mem, 2000bv64) == 143418749551bv64);
  free requires (memory_load64_le(mem, 2008bv64) == 2334956330884555075bv64);
  free requires (memory_load64_le(mem, 2016bv64) == 2317427963641295463bv64);
  free requires (memory_load64_le(mem, 2024bv64) == 8386658473162862185bv64);
  free requires (memory_load8_le(mem, 2032bv64) == 108bv8);
  free requires (memory_load8_le(mem, 2033bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2034bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2035bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69008bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1908bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 1984bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 1992bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2000bv64) == 143418749551bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 2334956330884555075bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 2317427963641295463bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 8386658473162862185bv64);
  free ensures (memory_load8_le(mem, 2032bv64) == 108bv8);
  free ensures (memory_load8_le(mem, 2033bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2034bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1908bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation FUN_630_1584()
{
  var Gamma_load1: bool;
  var load1: bv64;
  FUN_630_1584__0__tuyfiXKhQwyDbRrxvmvI3A:
    assume {:captureState "FUN_630_1584__0__tuyfiXKhQwyDbRrxvmvI3A"} true;
    R16, Gamma_R16 := 65536bv64, true;
    call rely();
    load1, Gamma_load1 := memory_load64_le(mem, bvadd64(R16, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 4040bv64)) || L(mem, bvadd64(R16, 4040bv64)));
    R17, Gamma_R17 := load1, Gamma_load1;
    R16, Gamma_R16 := bvadd64(R16, 4040bv64), Gamma_R16;
    call puts();
    goto FUN_630_1584_basil_return;
  FUN_630_1584_basil_return:
    assume {:captureState "FUN_630_1584_basil_return"} true;
    return;
}

procedure greet_1876();
  modifies Gamma_R0, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R16, R17, R29, R30, R31, mem, stack;
  free requires (memory_load64_le(mem, 1984bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 1992bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le(mem, 2000bv64) == 143418749551bv64);
  free requires (memory_load64_le(mem, 2008bv64) == 2334956330884555075bv64);
  free requires (memory_load64_le(mem, 2016bv64) == 2317427963641295463bv64);
  free requires (memory_load64_le(mem, 2024bv64) == 8386658473162862185bv64);
  free requires (memory_load8_le(mem, 2032bv64) == 108bv8);
  free requires (memory_load8_le(mem, 2033bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2034bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2035bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69008bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1908bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 1984bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 1992bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2000bv64) == 143418749551bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 2334956330884555075bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 2317427963641295463bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 8386658473162862185bv64);
  free ensures (memory_load8_le(mem, 2032bv64) == 108bv8);
  free ensures (memory_load8_le(mem, 2033bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2034bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1908bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation greet_1876()
{
  var Cse0__5_1_0: bv64;
  var Gamma_Cse0__5_1_0: bool;
  var Gamma_load2: bool;
  var Gamma_load3: bool;
  var load2: bv64;
  var load3: bv64;
  greet_1876__0__81FUb_xuSnaFuKB7SDT2jQ:
    assume {:captureState "greet_1876__0__81FUb_xuSnaFuKB7SDT2jQ"} true;
    Cse0__5_1_0, Gamma_Cse0__5_1_0 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5_1_0, R29), gamma_store64(Gamma_stack, Cse0__5_1_0, Gamma_R29);
    assume {:captureState "1876_1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5_1_0, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5_1_0, 8bv64), Gamma_R30);
    assume {:captureState "1876_2"} true;
    R31, Gamma_R31 := Cse0__5_1_0, Gamma_Cse0__5_1_0;
    R29, Gamma_R29 := R31, Gamma_R31;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 1992bv64), Gamma_R0;
    R30, Gamma_R30 := 1896bv64, true;
    call FUN_630_1584();
    goto greet_1876__1__kdZai1woRdCWjv9gZOc7IQ;
  greet_1876__1__kdZai1woRdCWjv9gZOc7IQ:
    assume {:captureState "greet_1876__1__kdZai1woRdCWjv9gZOc7IQ"} true;
    load2, Gamma_load2 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R29, Gamma_R29 := load2, Gamma_load2;
    load3, Gamma_load3 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := load3, Gamma_load3;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto greet_1876_basil_return;
  greet_1876_basil_return:
    assume {:captureState "greet_1876_basil_return"} true;
    return;
}

procedure main_1908();
  modifies Gamma_R0, Gamma_R16, Gamma_R17, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_mem, Gamma_stack, R0, R16, R17, R29, R30, R31, mem, stack;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le(mem, 1984bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 1992bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le(mem, 2000bv64) == 143418749551bv64);
  free requires (memory_load64_le(mem, 2008bv64) == 2334956330884555075bv64);
  free requires (memory_load64_le(mem, 2016bv64) == 2317427963641295463bv64);
  free requires (memory_load64_le(mem, 2024bv64) == 8386658473162862185bv64);
  free requires (memory_load8_le(mem, 2032bv64) == 108bv8);
  free requires (memory_load8_le(mem, 2033bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2034bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2035bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69008bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1908bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load64_le(mem, 1984bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 1992bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2000bv64) == 143418749551bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 2334956330884555075bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 2317427963641295463bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 8386658473162862185bv64);
  free ensures (memory_load8_le(mem, 2032bv64) == 108bv8);
  free ensures (memory_load8_le(mem, 2033bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2034bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1908bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main_1908()
{
  var Cse0__5_2_0: bv64;
  var Gamma_Cse0__5_2_0: bool;
  var Gamma_load16: bool;
  var Gamma_load17: bool;
  var Gamma_load18: bool;
  var load16: bv64;
  var load17: bv64;
  var load18: bv64;
  main_1908__0__w0OdBToKQa2Q58glCiVypg:
    assume {:captureState "main_1908__0__w0OdBToKQa2Q58glCiVypg"} true;
    Cse0__5_2_0, Gamma_Cse0__5_2_0 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5_2_0, R29), gamma_store64(Gamma_stack, Cse0__5_2_0, Gamma_R29);
    assume {:captureState "1908_1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5_2_0, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5_2_0, 8bv64), Gamma_R30);
    assume {:captureState "1908_2"} true;
    R31, Gamma_R31 := Cse0__5_2_0, Gamma_Cse0__5_2_0;
    R29, Gamma_R29 := R31, Gamma_R31;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 1876bv64), Gamma_R0;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 24bv64), R0), gamma_store64(Gamma_stack, bvadd64(R31, 24bv64), Gamma_R0);
    assume {:captureState "1924_0"} true;
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2008bv64), Gamma_R0;
    R30, Gamma_R30 := 1940bv64, true;
    call FUN_630_1584();
    goto main_1908__1__XCDB1coVTJ2EOAyBt9pNGg;
  main_1908__1__XCDB1coVTJ2EOAyBt9pNGg:
    assume {:captureState "main_1908__1__XCDB1coVTJ2EOAyBt9pNGg"} true;
    load18, Gamma_load18 := memory_load64_le(stack, bvadd64(R31, 24bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 24bv64));
    R0, Gamma_R0 := load18, Gamma_load18;
    R30, Gamma_R30 := 1948bv64, true;
    call greet_1876();
    goto main_1908__2__CUvNMZuRSsiLfPsNmfjI_Q;
  main_1908__2__CUvNMZuRSsiLfPsNmfjI_Q:
    assume {:captureState "main_1908__2__CUvNMZuRSsiLfPsNmfjI_Q"} true;
    R0, Gamma_R0 := 0bv64, true;
    load16, Gamma_load16 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R29, Gamma_R29 := load16, Gamma_load16;
    load17, Gamma_load17 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := load17, Gamma_load17;
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto main_1908_basil_return;
  main_1908_basil_return:
    assume {:captureState "main_1908_basil_return"} true;
    return;
}

procedure puts();
  free requires (memory_load64_le(mem, 1984bv64) == 131073bv64);
  free requires (memory_load64_le(mem, 1992bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le(mem, 2000bv64) == 143418749551bv64);
  free requires (memory_load64_le(mem, 2008bv64) == 2334956330884555075bv64);
  free requires (memory_load64_le(mem, 2016bv64) == 2317427963641295463bv64);
  free requires (memory_load64_le(mem, 2024bv64) == 8386658473162862185bv64);
  free requires (memory_load8_le(mem, 2032bv64) == 108bv8);
  free requires (memory_load8_le(mem, 2033bv64) == 121bv8);
  free requires (memory_load8_le(mem, 2034bv64) == 58bv8);
  free requires (memory_load8_le(mem, 2035bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69008bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1908bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 1984bv64) == 131073bv64);
  free ensures (memory_load64_le(mem, 1992bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le(mem, 2000bv64) == 143418749551bv64);
  free ensures (memory_load64_le(mem, 2008bv64) == 2334956330884555075bv64);
  free ensures (memory_load64_le(mem, 2016bv64) == 2317427963641295463bv64);
  free ensures (memory_load64_le(mem, 2024bv64) == 8386658473162862185bv64);
  free ensures (memory_load8_le(mem, 2032bv64) == 108bv8);
  free ensures (memory_load8_le(mem, 2033bv64) == 121bv8);
  free ensures (memory_load8_le(mem, 2034bv64) == 58bv8);
  free ensures (memory_load8_le(mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1908bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

