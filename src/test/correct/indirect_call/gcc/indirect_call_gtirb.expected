var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R16: bool;
var {:extern} $Gamma_R17: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R16: bv64;
var {:extern} $R17: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $_DYNAMIC_addr: bv64;
axiom ($_DYNAMIC_addr == 69024bv64);
const {:extern} $_GLOBAL_OFFSET_TABLE__addr: bv64;
axiom ($_GLOBAL_OFFSET_TABLE__addr == 69584bv64);
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1984bv64);
const {:extern} $__FRAME_END___addr: bv64;
axiom ($__FRAME_END___addr == 2304bv64);
const {:extern} $__abi_tag_addr: bv64;
axiom ($__abi_tag_addr == 632bv64);
const {:extern} $__do_global_dtors_aux_fini_array_entry_addr: bv64;
axiom ($__do_global_dtors_aux_fini_array_entry_addr == 69016bv64);
const {:extern} $__frame_dummy_init_array_entry_addr: bv64;
axiom ($__frame_dummy_init_array_entry_addr == 69008bv64);
const {:extern} $completed.0_addr: bv64;
axiom ($completed.0_addr == 69648bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_load8_le(#memory: [bv64]bv8, #index: bv64) returns (bv8) {
  #memory[#index]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load64_le($mem, 1984bv64) == 131073bv64);
  free ensures (memory_load64_le($mem, 1992bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le($mem, 2000bv64) == 143418749551bv64);
  free ensures (memory_load64_le($mem, 2008bv64) == 2334956330884555075bv64);
  free ensures (memory_load64_le($mem, 2016bv64) == 2317427963641295463bv64);
  free ensures (memory_load64_le($mem, 2024bv64) == 8386658473162862185bv64);
  free ensures (memory_load8_le($mem, 2032bv64) == 108bv8);
  free ensures (memory_load8_le($mem, 2033bv64) == 121bv8);
  free ensures (memory_load8_le($mem, 2034bv64) == 58bv8);
  free ensures (memory_load8_le($mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1908bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$puts();
  free requires (memory_load64_le($mem, 1984bv64) == 131073bv64);
  free requires (memory_load64_le($mem, 1992bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le($mem, 2000bv64) == 143418749551bv64);
  free requires (memory_load64_le($mem, 2008bv64) == 2334956330884555075bv64);
  free requires (memory_load64_le($mem, 2016bv64) == 2317427963641295463bv64);
  free requires (memory_load64_le($mem, 2024bv64) == 8386658473162862185bv64);
  free requires (memory_load8_le($mem, 2032bv64) == 108bv8);
  free requires (memory_load8_le($mem, 2033bv64) == 121bv8);
  free requires (memory_load8_le($mem, 2034bv64) == 58bv8);
  free requires (memory_load8_le($mem, 2035bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1908bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le($mem, 1984bv64) == 131073bv64);
  free ensures (memory_load64_le($mem, 1992bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le($mem, 2000bv64) == 143418749551bv64);
  free ensures (memory_load64_le($mem, 2008bv64) == 2334956330884555075bv64);
  free ensures (memory_load64_le($mem, 2016bv64) == 2317427963641295463bv64);
  free ensures (memory_load64_le($mem, 2024bv64) == 8386658473162862185bv64);
  free ensures (memory_load8_le($mem, 2032bv64) == 108bv8);
  free ensures (memory_load8_le($mem, 2033bv64) == 121bv8);
  free ensures (memory_load8_le($mem, 2034bv64) == 58bv8);
  free ensures (memory_load8_le($mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1908bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure p$greet_1876();
  modifies $Gamma_R0, $Gamma_R16, $Gamma_R17, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_mem, $Gamma_stack, $R0, $R16, $R17, $R29, $R30, $R31, $mem, $stack;
  free requires (memory_load64_le($mem, 1984bv64) == 131073bv64);
  free requires (memory_load64_le($mem, 1992bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le($mem, 2000bv64) == 143418749551bv64);
  free requires (memory_load64_le($mem, 2008bv64) == 2334956330884555075bv64);
  free requires (memory_load64_le($mem, 2016bv64) == 2317427963641295463bv64);
  free requires (memory_load64_le($mem, 2024bv64) == 8386658473162862185bv64);
  free requires (memory_load8_le($mem, 2032bv64) == 108bv8);
  free requires (memory_load8_le($mem, 2033bv64) == 121bv8);
  free requires (memory_load8_le($mem, 2034bv64) == 58bv8);
  free requires (memory_load8_le($mem, 2035bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1908bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load64_le($mem, 1984bv64) == 131073bv64);
  free ensures (memory_load64_le($mem, 1992bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le($mem, 2000bv64) == 143418749551bv64);
  free ensures (memory_load64_le($mem, 2008bv64) == 2334956330884555075bv64);
  free ensures (memory_load64_le($mem, 2016bv64) == 2317427963641295463bv64);
  free ensures (memory_load64_le($mem, 2024bv64) == 8386658473162862185bv64);
  free ensures (memory_load8_le($mem, 2032bv64) == 108bv8);
  free ensures (memory_load8_le($mem, 2033bv64) == 121bv8);
  free ensures (memory_load8_le($mem, 2034bv64) == 58bv8);
  free ensures (memory_load8_le($mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1908bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$greet_1876()
{
  var #Cse0__5_5: bv64;
  var #Gamma_Cse0__5_5: bool;
  var #Gamma_load10: bool;
  var #Gamma_load11: bool;
  var #Gamma_load25: bool;
  var #load10: bv64;
  var #load11: bv64;
  var #load25: bv64;
  b#greet_entry:
    assume {:captureState "greet_entry (81FUb/xuSnaFuKB7SDT2jQ==)"} true;
    #Cse0__5_5, #Gamma_Cse0__5_5 := bvadd64($R31, 18446744073709551600bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_5, $R29), gamma_store64($Gamma_stack, #Cse0__5_5, $Gamma_R29);
    assume {:captureState "1876_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_5, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_5, 8bv64), $Gamma_R30);
    assume {:captureState "1876_2"} true;
    $R31, $Gamma_R31 := #Cse0__5_5, #Gamma_Cse0__5_5;
    $R29, $Gamma_R29 := $R31, $Gamma_R31;
    $R0, $Gamma_R0 := 0bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 1992bv64), $Gamma_R0;
    $R30, $Gamma_R30 := 1896bv64, true;
    goto b#FUN_630_entry_491;
  b#FUN_630_entry_491:
    assume {:captureState "FUN_630_entry_491"} true;
    $R16, $Gamma_R16 := 65536bv64, true;
    call p$rely();
    #load25, #Gamma_load25 := memory_load64_le($mem, bvadd64($R16, 4040bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 4040bv64)) || L($mem, bvadd64($R16, 4040bv64)));
    $R17, $Gamma_R17 := #load25, #Gamma_load25;
    $R16, $Gamma_R16 := bvadd64($R16, 4040bv64), $Gamma_R16;
    call p$puts();
    goto b#FUN_630_basil_return_1_492;
  b#FUN_630_basil_return_1_492:
    assume {:captureState "FUN_630_basil_return_1_492"} true;
    goto b#_inlineret_3;
  b#_inlineret_3:
    assume {:captureState "_inlineret_3 (81FUb/xuSnaFuKB7SDT2jQ==)"} true;
    goto b#greet_3;
  b#greet_3:
    assume {:captureState "greet_3 (kdZai1woRdCWjv9gZOc7IQ==)"} true;
    #load10, #Gamma_load10 := memory_load64_le($stack, $R31), gamma_load64($Gamma_stack, $R31);
    $R29, $Gamma_R29 := #load10, #Gamma_load10;
    #load11, #Gamma_load11 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R30, $Gamma_R30 := #load11, #Gamma_load11;
    $R31, $Gamma_R31 := bvadd64($R31, 16bv64), $Gamma_R31;
    goto b#greet_basil_return_1;
  b#greet_basil_return_1:
    assume {:captureState "greet_basil_return_1"} true;
    return;
}

procedure p$main_1908();
  modifies $Gamma_R0, $Gamma_R16, $Gamma_R17, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_mem, $Gamma_stack, $R0, $R16, $R17, $R29, $R30, $R31, $mem, $stack;
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le($mem, 1984bv64) == 131073bv64);
  free requires (memory_load64_le($mem, 1992bv64) == 8583909746840200520bv64);
  free requires (memory_load64_le($mem, 2000bv64) == 143418749551bv64);
  free requires (memory_load64_le($mem, 2008bv64) == 2334956330884555075bv64);
  free requires (memory_load64_le($mem, 2016bv64) == 2317427963641295463bv64);
  free requires (memory_load64_le($mem, 2024bv64) == 8386658473162862185bv64);
  free requires (memory_load8_le($mem, 2032bv64) == 108bv8);
  free requires (memory_load8_le($mem, 2033bv64) == 121bv8);
  free requires (memory_load8_le($mem, 2034bv64) == 58bv8);
  free requires (memory_load8_le($mem, 2035bv64) == 0bv8);
  free requires (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1908bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load64_le($mem, 1984bv64) == 131073bv64);
  free ensures (memory_load64_le($mem, 1992bv64) == 8583909746840200520bv64);
  free ensures (memory_load64_le($mem, 2000bv64) == 143418749551bv64);
  free ensures (memory_load64_le($mem, 2008bv64) == 2334956330884555075bv64);
  free ensures (memory_load64_le($mem, 2016bv64) == 2317427963641295463bv64);
  free ensures (memory_load64_le($mem, 2024bv64) == 8386658473162862185bv64);
  free ensures (memory_load8_le($mem, 2032bv64) == 108bv8);
  free ensures (memory_load8_le($mem, 2033bv64) == 121bv8);
  free ensures (memory_load8_le($mem, 2034bv64) == 58bv8);
  free ensures (memory_load8_le($mem, 2035bv64) == 0bv8);
  free ensures (memory_load64_le($mem, 69008bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1908bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_1908()
{
  var #Cse0__5_8: bv64;
  var #Gamma_Cse0__5_8: bool;
  var #Gamma_load22: bool;
  var #Gamma_load23: bool;
  var #Gamma_load24: bool;
  var #Gamma_load25: bool;
  var #load22: bv64;
  var #load23: bv64;
  var #load24: bv64;
  var #load25: bv64;
  b#main_entry:
    assume {:captureState "main_entry (w0OdBToKQa2Q58glCiVypg==)"} true;
    #Cse0__5_8, #Gamma_Cse0__5_8 := bvadd64($R31, 18446744073709551584bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_8, $R29), gamma_store64($Gamma_stack, #Cse0__5_8, $Gamma_R29);
    assume {:captureState "1908_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_8, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_8, 8bv64), $Gamma_R30);
    assume {:captureState "1908_2"} true;
    $R31, $Gamma_R31 := #Cse0__5_8, #Gamma_Cse0__5_8;
    $R29, $Gamma_R29 := $R31, $Gamma_R31;
    $R0, $Gamma_R0 := 0bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 1876bv64), $Gamma_R0;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 24bv64), $R0), gamma_store64($Gamma_stack, bvadd64($R31, 24bv64), $Gamma_R0);
    assume {:captureState "1924_0"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 2008bv64), $Gamma_R0;
    $R30, $Gamma_R30 := 1940bv64, true;
    goto b#FUN_630_entry_489;
  b#FUN_630_entry_489:
    assume {:captureState "FUN_630_entry_489"} true;
    $R16, $Gamma_R16 := 65536bv64, true;
    call p$rely();
    #load25, #Gamma_load25 := memory_load64_le($mem, bvadd64($R16, 4040bv64)), (gamma_load64($Gamma_mem, bvadd64($R16, 4040bv64)) || L($mem, bvadd64($R16, 4040bv64)));
    $R17, $Gamma_R17 := #load25, #Gamma_load25;
    $R16, $Gamma_R16 := bvadd64($R16, 4040bv64), $Gamma_R16;
    call p$puts();
    goto b#FUN_630_basil_return_1_490;
  b#FUN_630_basil_return_1_490:
    assume {:captureState "FUN_630_basil_return_1_490"} true;
    goto b#_inlineret_3;
  b#_inlineret_3:
    assume {:captureState "_inlineret_3 (w0OdBToKQa2Q58glCiVypg==)"} true;
    goto b#main_5;
  b#main_5:
    assume {:captureState "main_5 (XCDB1coVTJ2EOAyBt9pNGg==)"} true;
    #load24, #Gamma_load24 := memory_load64_le($stack, bvadd64($R31, 24bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 24bv64));
    $R0, $Gamma_R0 := #load24, #Gamma_load24;
    $R30, $Gamma_R30 := 1948bv64, true;
    call p$greet_1876();
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (CUvNMZuRSsiLfPsNmfjI/Q==)"} true;
    $R0, $Gamma_R0 := 0bv64, true;
    #load22, #Gamma_load22 := memory_load64_le($stack, $R31), gamma_load64($Gamma_stack, $R31);
    $R29, $Gamma_R29 := #load22, #Gamma_load22;
    #load23, #Gamma_load23 := memory_load64_le($stack, bvadd64($R31, 8bv64)), gamma_load64($Gamma_stack, bvadd64($R31, 8bv64));
    $R30, $Gamma_R30 := #load23, #Gamma_load23;
    $R31, $Gamma_R31 := bvadd64($R31, 32bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

