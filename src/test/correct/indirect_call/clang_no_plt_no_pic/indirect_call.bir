00000d8f: program
00000d77: sub __cxa_finalize(__cxa_finalize_result)
00000d90: __cxa_finalize_result :: out u32 = low:32[R0]

00000adf:
00000be7: R16 := 0x11000
00000bee: R17 := mem[R16 + 8, el]:u64
00000bf4: R16 := R16 + 8
00000bf9: call R17 with noreturn

00000d78: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000d91: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000980:
00000984: #3 := R31 - 0x20
0000098a: mem := mem with [#3, el]:u64 <- R29
00000990: mem := mem with [#3 + 8, el]:u64 <- R30
00000994: R31 := #3
0000099a: R29 := R31
000009a2: mem := mem with [R31 + 0x10, el]:u64 <- R19
000009a7: R19 := 0x11000
000009ae: R0 := pad:64[mem[R19 + 0x38]]
000009b5: when 31:0[R0] <> 0 goto %000009b3
00000d79: goto %00000aa8

00000aa8:
00000aab: R0 := 0x10000
00000ab2: R0 := mem[R0 + 0xFC8, el]:u64
00000ab8: when R0 = 0 goto %00000ab6
00000d7a: goto %00000acf

00000acf:
00000ad2: R0 := 0x11000
00000ad9: R0 := mem[R0 + 0x30, el]:u64
00000ade: R30 := 0x730
00000ae1: call @__cxa_finalize with return %00000ab6

00000ab6:
00000abe: R30 := 0x734
00000ac0: call @deregister_tm_clones with return %00000ac2

00000ac2:
00000ac5: R0 := 1
00000acd: mem := mem with [R19 + 0x38] <- 7:0[R0]
00000d7b: goto %000009b3

000009b3:
000009bd: R19 := mem[R31 + 0x10, el]:u64
000009c4: R29 := mem[R31, el]:u64
000009c9: R30 := mem[R31 + 8, el]:u64
000009cd: R31 := R31 + 0x20
000009d2: call R30 with noreturn

00000d7c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000d92: __libc_start_main_main :: in u64 = R0
00000d93: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000d94: __libc_start_main_arg3 :: in out u64 = R2
00000d95: __libc_start_main_auxv :: in out u64 = R3
00000d96: __libc_start_main_result :: out u32 = low:32[R0]

000008d9:
00000bd1: R16 := 0x11000
00000bd8: R17 := mem[R16, el]:u64
00000bde: R16 := R16
00000be3: call R17 with noreturn

00000d7d: sub _fini(_fini_result)
00000d97: _fini_result :: out u32 = low:32[R0]

000006ed:
000006f3: #0 := R31 - 0x10
000006f9: mem := mem with [#0, el]:u64 <- R29
000006ff: mem := mem with [#0 + 8, el]:u64 <- R30
00000703: R31 := #0
00000709: R29 := R31
00000710: R29 := mem[R31, el]:u64
00000715: R30 := mem[R31 + 8, el]:u64
00000719: R31 := R31 + 0x10
0000071e: call R30 with noreturn

00000d7e: sub _init(_init_result)
00000d98: _init_result :: out u32 = low:32[R0]

00000cbc:
00000cc2: #8 := R31 - 0x10
00000cc8: mem := mem with [#8, el]:u64 <- R29
00000cce: mem := mem with [#8 + 8, el]:u64 <- R30
00000cd2: R31 := #8
00000cd8: R29 := R31
00000cdd: R30 := 0x5C8
00000cdf: call @call_weak_fn with return %00000ce1

00000ce1:
00000ce6: R29 := mem[R31, el]:u64
00000ceb: R30 := mem[R31 + 8, el]:u64
00000cef: R31 := R31 + 0x10
00000cf4: call R30 with noreturn

00000d7f: sub _start(_start_result)
00000d99: _start_result :: out u32 = low:32[R0]

0000089a:
0000089f: R29 := 0
000008a4: R30 := 0
000008aa: R5 := R0
000008b1: R1 := mem[R31, el]:u64
000008b7: R2 := R31 + 8
000008bd: R6 := R31
000008c2: R0 := 0x10000
000008c9: R0 := mem[R0 + 0xFD8, el]:u64
000008ce: R3 := 0
000008d3: R4 := 0
000008d8: R30 := 0x670
000008db: call @__libc_start_main with return %000008dd

000008dd:
000008e0: R30 := 0x674
000008e3: call @abort with return %00000d80

00000d80:
00000d81: call @call_weak_fn with noreturn

00000d82: sub abort()


000008e1:
00000c13: R16 := 0x11000
00000c1a: R17 := mem[R16 + 0x18, el]:u64
00000c20: R16 := R16 + 0x18
00000c25: call R17 with noreturn

00000d83: sub call_weak_fn(call_weak_fn_result)
00000d9a: call_weak_fn_result :: out u32 = low:32[R0]

000008e5:
000008e8: R0 := 0x10000
000008ef: R0 := mem[R0 + 0xFD0, el]:u64
000008f5: when R0 = 0 goto %000008f3
00000d84: goto %00000b1f

000008f3:
000008fb: call R30 with noreturn

00000b1f:
00000b22: goto @__gmon_start__

00000b20:
00000bfd: R16 := 0x11000
00000c04: R17 := mem[R16 + 0x10, el]:u64
00000c0a: R16 := R16 + 0x10
00000c0f: call R17 with noreturn

00000d85: sub deregister_tm_clones(deregister_tm_clones_result)
00000d9b: deregister_tm_clones_result :: out u32 = low:32[R0]

00000901:
00000904: R0 := 0x11000
0000090a: R0 := R0 + 0x38
0000090f: R1 := 0x11000
00000915: R1 := R1 + 0x38
0000091b: #1 := ~R0
00000920: #2 := R1 + ~R0
00000926: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000092c: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000930: ZF := #2 + 1 = 0
00000934: NF := 63:63[#2 + 1]
0000093a: when ZF goto %00000938
00000d86: goto %00000b01

00000b01:
00000b04: R1 := 0x10000
00000b0b: R1 := mem[R1 + 0xFC0, el]:u64
00000b10: when R1 = 0 goto %00000938
00000d87: goto %00000b14

00000938:
00000940: call R30 with noreturn

00000b14:
00000b18: R16 := R1
00000b1d: call R16 with noreturn

00000d88: sub frame_dummy(frame_dummy_result)
00000d9c: frame_dummy_result :: out u32 = low:32[R0]

000009d8:
000009da: call @register_tm_clones with noreturn

00000d89: sub greet(greet_result)
00000d9d: greet_result :: out u32 = low:32[R0]

000009dc:
000009e0: #4 := R31 - 0x10
000009e6: mem := mem with [#4, el]:u64 <- R29
000009ec: mem := mem with [#4 + 8, el]:u64 <- R30
000009f0: R31 := #4
000009f6: R29 := R31
000009fb: R0 := 0
00000a01: R0 := R0 + 0x7D0
00000a06: R30 := 0x768
00000a09: call @printf with return %00000a0b

00000a0b:
00000a10: R29 := mem[R31, el]:u64
00000a15: R30 := mem[R31 + 8, el]:u64
00000a19: R31 := R31 + 0x10
00000a1e: call R30 with noreturn

00000d8a: sub main(main_argc, main_argv, main_result)
00000d9e: main_argc :: in u32 = low:32[R0]
00000d9f: main_argv :: in out u64 = R1
00000da0: main_result :: out u32 = low:32[R0]

00000a20:
00000a24: R31 := R31 - 0x30
00000a2a: #5 := R31 + 0x20
00000a30: mem := mem with [#5, el]:u64 <- R29
00000a36: mem := mem with [#5 + 8, el]:u64 <- R30
00000a3c: R29 := R31 + 0x20
00000a41: R8 := 0
00000a49: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000a50: mem := mem with [R29 - 4, el]:u32 <- 0
00000a55: R8 := 0
00000a5b: R8 := R8 + 0x754
00000a63: mem := mem with [R31 + 0x10, el]:u64 <- R8
00000a68: R0 := 0
00000a6e: R0 := R0 + 0x7DF
00000a73: R30 := 0x7A0
00000a75: call @printf with return %00000a77

00000a77:
00000a7c: R8 := mem[R31 + 0x10, el]:u64
00000a81: R30 := 0x7A8
00000a84: call R8 with return %00000a86

00000a86:
00000a8b: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000a91: #6 := R31 + 0x20
00000a96: R29 := mem[#6, el]:u64
00000a9b: R30 := mem[#6 + 8, el]:u64
00000aa1: R31 := R31 + 0x30
00000aa6: call R30 with noreturn

00000d8b: sub printf(printf_format, printf_result)
00000da1: printf_format :: in u64 = R0
00000da2: printf_result :: out u32 = low:32[R0]

00000a07:
00000c29: R16 := 0x11000
00000c30: R17 := mem[R16 + 0x20, el]:u64
00000c36: R16 := R16 + 0x20
00000c3b: call R17 with noreturn

00000d8c: sub register_tm_clones(register_tm_clones_result)
00000da3: register_tm_clones_result :: out u32 = low:32[R0]

00000942:
00000945: R0 := 0x11000
0000094b: R0 := R0 + 0x38
00000950: R1 := 0x11000
00000956: R1 := R1 + 0x38
0000095d: R1 := R1 + ~R0 + 1
00000963: R2 := 0.63:63[R1]
0000096a: R1 := R2 + (R1 ~>> 3)
00000970: R1 := extend:64[63:1[R1]]
00000976: when R1 = 0 goto %00000974
00000d8d: goto %00000ae3

00000ae3:
00000ae6: R2 := 0x10000
00000aed: R2 := mem[R2 + 0xFE0, el]:u64
00000af2: when R2 = 0 goto %00000974
00000d8e: goto %00000af6

00000974:
0000097c: call R30 with noreturn

00000af6:
00000afa: R16 := R2
00000aff: call R16 with noreturn
