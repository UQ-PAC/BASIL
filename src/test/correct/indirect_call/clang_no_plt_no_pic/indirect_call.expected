var Gamma_mem: [bv64]bool;
var Gamma_stack: [bv64]bool;
var mem: [bv64]bv8;
var stack: [bv64]bv8;
const $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1996bv64);
function L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure rely();
  modifies mem, Gamma_mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

procedure rely_transitive()
  modifies mem, Gamma_mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
{
  call rely();
  call rely();
}

procedure rely_reflexive();

procedure guarantee_reflexive();
  modifies mem, Gamma_mem;

procedure main(main_argc: bv32, Gamma_main_argc: bool, main_argv: bv64, Gamma_main_argv: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (main_argv_out: bv64, Gamma_main_argv_out: bool, main_result: bv32, Gamma_main_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool)
  modifies mem, Gamma_mem, stack, Gamma_stack;
  requires (memory_load8_le(mem, 1996bv64) == 1bv8);
  requires (memory_load8_le(mem, 1997bv64) == 0bv8);
  requires (memory_load8_le(mem, 1998bv64) == 2bv8);
  requires (memory_load8_le(mem, 1999bv64) == 0bv8);
  requires (memory_load8_le(mem, 2000bv64) == 72bv8);
  requires (memory_load8_le(mem, 2001bv64) == 101bv8);
  requires (memory_load8_le(mem, 2002bv64) == 108bv8);
  requires (memory_load8_le(mem, 2003bv64) == 108bv8);
  requires (memory_load8_le(mem, 2004bv64) == 111bv8);
  requires (memory_load8_le(mem, 2005bv64) == 44bv8);
  requires (memory_load8_le(mem, 2006bv64) == 32bv8);
  requires (memory_load8_le(mem, 2007bv64) == 119bv8);
  requires (memory_load8_le(mem, 2008bv64) == 111bv8);
  requires (memory_load8_le(mem, 2009bv64) == 114bv8);
  requires (memory_load8_le(mem, 2010bv64) == 108bv8);
  requires (memory_load8_le(mem, 2011bv64) == 100bv8);
  requires (memory_load8_le(mem, 2012bv64) == 33bv8);
  requires (memory_load8_le(mem, 2013bv64) == 10bv8);
  requires (memory_load8_le(mem, 2014bv64) == 0bv8);
  requires (memory_load8_le(mem, 2015bv64) == 67bv8);
  requires (memory_load8_le(mem, 2016bv64) == 97bv8);
  requires (memory_load8_le(mem, 2017bv64) == 108bv8);
  requires (memory_load8_le(mem, 2018bv64) == 108bv8);
  requires (memory_load8_le(mem, 2019bv64) == 105bv8);
  requires (memory_load8_le(mem, 2020bv64) == 110bv8);
  requires (memory_load8_le(mem, 2021bv64) == 103bv8);
  requires (memory_load8_le(mem, 2022bv64) == 32bv8);
  requires (memory_load8_le(mem, 2023bv64) == 103bv8);
  requires (memory_load8_le(mem, 2024bv64) == 114bv8);
  requires (memory_load8_le(mem, 2025bv64) == 101bv8);
  requires (memory_load8_le(mem, 2026bv64) == 101bv8);
  requires (memory_load8_le(mem, 2027bv64) == 116bv8);
  requires (memory_load8_le(mem, 2028bv64) == 40bv8);
  requires (memory_load8_le(mem, 2029bv64) == 41bv8);
  requires (memory_load8_le(mem, 2030bv64) == 32bv8);
  requires (memory_load8_le(mem, 2031bv64) == 105bv8);
  requires (memory_load8_le(mem, 2032bv64) == 110bv8);
  requires (memory_load8_le(mem, 2033bv64) == 100bv8);
  requires (memory_load8_le(mem, 2034bv64) == 105bv8);
  requires (memory_load8_le(mem, 2035bv64) == 114bv8);
  requires (memory_load8_le(mem, 2036bv64) == 101bv8);
  requires (memory_load8_le(mem, 2037bv64) == 99bv8);
  requires (memory_load8_le(mem, 2038bv64) == 116bv8);
  requires (memory_load8_le(mem, 2039bv64) == 108bv8);
  requires (memory_load8_le(mem, 2040bv64) == 121bv8);
  requires (memory_load8_le(mem, 2041bv64) == 58bv8);
  requires (memory_load8_le(mem, 2042bv64) == 10bv8);
  requires (memory_load8_le(mem, 2043bv64) == 0bv8);
  requires (memory_load8_le(mem, 69560bv64) == 216bv8);
  requires (memory_load8_le(mem, 69561bv64) == 13bv8);
  requires (memory_load8_le(mem, 69562bv64) == 1bv8);
  requires (memory_load8_le(mem, 69563bv64) == 0bv8);
  requires (memory_load8_le(mem, 69564bv64) == 0bv8);
  requires (memory_load8_le(mem, 69565bv64) == 0bv8);
  requires (memory_load8_le(mem, 69566bv64) == 0bv8);
  requires (memory_load8_le(mem, 69567bv64) == 0bv8);
  requires (memory_load8_le(mem, 69568bv64) == 0bv8);
  requires (memory_load8_le(mem, 69569bv64) == 0bv8);
  requires (memory_load8_le(mem, 69570bv64) == 0bv8);
  requires (memory_load8_le(mem, 69571bv64) == 0bv8);
  requires (memory_load8_le(mem, 69572bv64) == 0bv8);
  requires (memory_load8_le(mem, 69573bv64) == 0bv8);
  requires (memory_load8_le(mem, 69574bv64) == 0bv8);
  requires (memory_load8_le(mem, 69575bv64) == 0bv8);
  requires (memory_load8_le(mem, 69576bv64) == 0bv8);
  requires (memory_load8_le(mem, 69577bv64) == 0bv8);
  requires (memory_load8_le(mem, 69578bv64) == 0bv8);
  requires (memory_load8_le(mem, 69579bv64) == 0bv8);
  requires (memory_load8_le(mem, 69580bv64) == 0bv8);
  requires (memory_load8_le(mem, 69581bv64) == 0bv8);
  requires (memory_load8_le(mem, 69582bv64) == 0bv8);
  requires (memory_load8_le(mem, 69583bv64) == 0bv8);
  requires (memory_load8_le(mem, 69584bv64) == 0bv8);
  requires (memory_load8_le(mem, 69585bv64) == 0bv8);
  requires (memory_load8_le(mem, 69586bv64) == 0bv8);
  requires (memory_load8_le(mem, 69587bv64) == 0bv8);
  requires (memory_load8_le(mem, 69588bv64) == 0bv8);
  requires (memory_load8_le(mem, 69589bv64) == 0bv8);
  requires (memory_load8_le(mem, 69590bv64) == 0bv8);
  requires (memory_load8_le(mem, 69591bv64) == 0bv8);
  requires (memory_load8_le(mem, 69592bv64) == 112bv8);
  requires (memory_load8_le(mem, 69593bv64) == 7bv8);
  requires (memory_load8_le(mem, 69594bv64) == 0bv8);
  requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  requires (memory_load8_le(mem, 69600bv64) == 0bv8);
  requires (memory_load8_le(mem, 69601bv64) == 0bv8);
  requires (memory_load8_le(mem, 69602bv64) == 0bv8);
  requires (memory_load8_le(mem, 69603bv64) == 0bv8);
  requires (memory_load8_le(mem, 69604bv64) == 0bv8);
  requires (memory_load8_le(mem, 69605bv64) == 0bv8);
  requires (memory_load8_le(mem, 69606bv64) == 0bv8);
  requires (memory_load8_le(mem, 69607bv64) == 0bv8);
  requires (memory_load8_le(mem, 69672bv64) == 0bv8);
  requires (memory_load8_le(mem, 69673bv64) == 0bv8);
  requires (memory_load8_le(mem, 69674bv64) == 0bv8);
  requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  requires (memory_load8_le(mem, 69680bv64) == 48bv8);
  requires (memory_load8_le(mem, 69681bv64) == 16bv8);
  requires (memory_load8_le(mem, 69682bv64) == 1bv8);
  requires (memory_load8_le(mem, 69683bv64) == 0bv8);
  requires (memory_load8_le(mem, 69684bv64) == 0bv8);
  requires (memory_load8_le(mem, 69685bv64) == 0bv8);
  requires (memory_load8_le(mem, 69686bv64) == 0bv8);
  requires (memory_load8_le(mem, 69687bv64) == 0bv8);
{
  var #5: bv64;
  var #6: bv64;
  var #temp0: bv32;
  var Gamma_#5: bool;
  var Gamma_#6: bool;
  var Gamma_#temp0: bool;
  var Gamma_R0: bool;
  var Gamma_R1: bool;
  var Gamma_R29: bool;
  var Gamma_R30: bool;
  var Gamma_R31: bool;
  var Gamma_R8: bool;
  var R0: bv64;
  var R1: bv64;
  var R29: bv64;
  var R30: bv64;
  var R31: bv64;
  var R8: bv64;
  R0, Gamma_R0 := zero_extend32_32(main_argc), Gamma_main_argc;
  R1, Gamma_R1 := main_argv, Gamma_main_argv;
  R29, Gamma_R29 := FP, Gamma_FP;
  R30, Gamma_R30 := LR, Gamma_LR;
  R31, Gamma_R31 := SP, Gamma_SP;
  lmain:
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551568bv64), Gamma_R31;
    #5, Gamma_#5 := bvadd64(R31, 32bv64), Gamma_R31;
    call rely();
    assert (L(mem, #5) ==> Gamma_R29);
    mem, Gamma_mem := memory_store64_le(mem, #5, R29), gamma_store64(Gamma_mem, #5, Gamma_R29);
    call rely();
    assert (L(mem, bvadd64(#5, 8bv64)) ==> Gamma_R30);
    mem, Gamma_mem := memory_store64_le(mem, bvadd64(#5, 8bv64), R30), gamma_store64(Gamma_mem, bvadd64(#5, 8bv64), Gamma_R30);
    R29, Gamma_R29 := bvadd64(R31, 32bv64), Gamma_R31;
    R8, Gamma_R8 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R8[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R8);
    call rely();
    assert (L(mem, bvadd64(R29, 18446744073709551612bv64)) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_mem, bvadd64(R29, 18446744073709551612bv64), true);
    R8, Gamma_R8 := 0bv64, true;
    R8, Gamma_R8 := bvadd64(R8, 1876bv64), Gamma_R8;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R8), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R8);
    R0, Gamma_R0 := 0bv64, true;
    R0, Gamma_R0 := bvadd64(R0, 2015bv64), Gamma_R0;
    R30, Gamma_R30 := 1952bv64, true;
    call #temp0, Gamma_#temp0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31 := printf(R0, Gamma_R0, R29, Gamma_R29, R30, Gamma_R30, R31, Gamma_R31);
    R0, Gamma_R0 := zero_extend32_32(#temp0), Gamma_#temp0;
    goto l00000a77;
  l00000a77:
    R8, Gamma_R8 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R30, Gamma_R30 := 1960bv64, true;
    //UNRESOLVED: call R8
    assume false;
    goto l00000a86;
  l00000a86:
    R0, Gamma_R0 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 12bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    #6, Gamma_#6 := bvadd64(R31, 32bv64), Gamma_R31;
    call rely();
    R29, Gamma_R29 := memory_load64_le(mem, #6), (gamma_load64(Gamma_mem, #6) || L(mem, #6));
    call rely();
    R30, Gamma_R30 := memory_load64_le(mem, bvadd64(#6, 8bv64)), (gamma_load64(Gamma_mem, bvadd64(#6, 8bv64)) || L(mem, bvadd64(#6, 8bv64)));
    R31, Gamma_R31 := bvadd64(R31, 48bv64), Gamma_R31;
    main_argv_out, Gamma_main_argv_out := R1, Gamma_R1;
    main_result, Gamma_main_result := R0[32:0], Gamma_R0;
    FP_out, Gamma_FP_out := R29, Gamma_R29;
    LR_out, Gamma_LR_out := R30, Gamma_R30;
    SP_out, Gamma_SP_out := R31, Gamma_R31;
    return;
}

procedure printf(printf_format: bv64, Gamma_printf_format: bool, FP: bv64, Gamma_FP: bool, LR: bv64, Gamma_LR: bool, SP: bv64, Gamma_SP: bool) returns (printf_result: bv32, Gamma_printf_result: bool, FP_out: bv64, Gamma_FP_out: bool, LR_out: bv64, Gamma_LR_out: bool, SP_out: bv64, Gamma_SP_out: bool);
  modifies mem, Gamma_mem, stack, Gamma_stack;
