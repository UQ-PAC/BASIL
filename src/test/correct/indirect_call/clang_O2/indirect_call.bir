0000063c: program
00000605: sub __cxa_finalize(__cxa_finalize_result)
0000063d: __cxa_finalize_result :: out u32 = low:32[R0]

00000383:
0000048b: R16 := 0x11000
00000492: R17 := mem[R16 + 8, el]:u64
00000498: R16 := R16 + 8
0000049d: call R17 with noreturn

00000606: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000063e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000286:
0000028a: #3 := R31 - 0x20
00000290: mem := mem with [#3, el]:u64 <- R29
00000296: mem := mem with [#3 + 8, el]:u64 <- R30
0000029a: R31 := #3
000002a0: R29 := R31
000002a8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ad: R19 := 0x11000
000002b4: R0 := pad:64[mem[R19 + 0x38]]
000002bb: when 31:0[R0] <> 0 goto %000002b9
00000632: goto %0000034c

0000034c:
0000034f: R0 := 0x10000
00000356: R0 := mem[R0 + 0xFC8, el]:u64
0000035c: when R0 = 0 goto %0000035a
00000633: goto %00000373

00000373:
00000376: R0 := 0x11000
0000037d: R0 := mem[R0 + 0x30, el]:u64
00000382: R30 := 0x730
00000385: call @__cxa_finalize with return %0000035a

0000035a:
00000362: R30 := 0x734
00000364: call @deregister_tm_clones with return %00000366

00000366:
00000369: R0 := 1
00000371: mem := mem with [R19 + 0x38] <- 7:0[R0]
00000634: goto %000002b9

000002b9:
000002c3: R19 := mem[R31 + 0x10, el]:u64
000002ca: R29 := mem[R31, el]:u64
000002cf: R30 := mem[R31 + 8, el]:u64
000002d3: R31 := R31 + 0x20
000002d8: call R30 with noreturn

0000060a: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000063f: __libc_start_main_main :: in u64 = R0
00000640: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000641: __libc_start_main_arg3 :: in out u64 = R2
00000642: __libc_start_main_auxv :: in out u64 = R3
00000643: __libc_start_main_result :: out u32 = low:32[R0]

000001df:
00000475: R16 := 0x11000
0000047c: R17 := mem[R16, el]:u64
00000482: R16 := R16
00000487: call R17 with noreturn

0000060b: sub _fini(_fini_result)
00000644: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000060c: sub _init(_init_result)
00000645: _init_result :: out u32 = low:32[R0]

00000555:
0000055b: #6 := R31 - 0x10
00000561: mem := mem with [#6, el]:u64 <- R29
00000567: mem := mem with [#6 + 8, el]:u64 <- R30
0000056b: R31 := #6
00000571: R29 := R31
00000576: R30 := 0x5C8
00000578: call @call_weak_fn with return %0000057a

0000057a:
0000057f: R29 := mem[R31, el]:u64
00000584: R30 := mem[R31 + 8, el]:u64
00000588: R31 := R31 + 0x10
0000058d: call R30 with noreturn

0000060d: sub _start(_start_result)
00000646: _start_result :: out u32 = low:32[R0]

000001a0:
000001a5: R29 := 0
000001aa: R30 := 0
000001b0: R5 := R0
000001b7: R1 := mem[R31, el]:u64
000001bd: R2 := R31 + 8
000001c3: R6 := R31
000001c8: R0 := 0x10000
000001cf: R0 := mem[R0 + 0xFD8, el]:u64
000001d4: R3 := 0
000001d9: R4 := 0
000001de: R30 := 0x670
000001e1: call @__libc_start_main with return %000001e3

000001e3:
000001e6: R30 := 0x674
000001e9: call @abort with return %00000635

00000635:
00000636: call @call_weak_fn with noreturn

00000610: sub abort()


000001e7:
000004b7: R16 := 0x11000
000004be: R17 := mem[R16 + 0x18, el]:u64
000004c4: R16 := R16 + 0x18
000004c9: call R17 with noreturn

00000611: sub call_weak_fn(call_weak_fn_result)
00000647: call_weak_fn_result :: out u32 = low:32[R0]

000001eb:
000001ee: R0 := 0x10000
000001f5: R0 := mem[R0 + 0xFD0, el]:u64
000001fb: when R0 = 0 goto %000001f9
00000637: goto %000003c3

000001f9:
00000201: call R30 with noreturn

000003c3:
000003c6: goto @__gmon_start__

000003c4:
000004a1: R16 := 0x11000
000004a8: R17 := mem[R16 + 0x10, el]:u64
000004ae: R16 := R16 + 0x10
000004b3: call R17 with noreturn

00000613: sub deregister_tm_clones(deregister_tm_clones_result)
00000648: deregister_tm_clones_result :: out u32 = low:32[R0]

00000207:
0000020a: R0 := 0x11000
00000210: R0 := R0 + 0x38
00000215: R1 := 0x11000
0000021b: R1 := R1 + 0x38
00000221: #1 := ~R0
00000226: #2 := R1 + ~R0
0000022c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000232: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000236: ZF := #2 + 1 = 0
0000023a: NF := 63:63[#2 + 1]
00000240: when ZF goto %0000023e
00000638: goto %000003a5

000003a5:
000003a8: R1 := 0x10000
000003af: R1 := mem[R1 + 0xFC0, el]:u64
000003b4: when R1 = 0 goto %0000023e
00000639: goto %000003b8

0000023e:
00000246: call R30 with noreturn

000003b8:
000003bc: R16 := R1
000003c1: call R16 with noreturn

00000616: sub frame_dummy(frame_dummy_result)
00000649: frame_dummy_result :: out u32 = low:32[R0]

000002de:
000002e0: call @register_tm_clones with noreturn

00000617: sub greet(greet_result)
0000064a: greet_result :: out u32 = low:32[R0]

000002e2:
000002e5: R0 := 0
000002eb: R0 := R0 + 0x7A4
000002f0: call @puts with noreturn

00000618: sub main(main_argc, main_argv, main_result)
0000064b: main_argc :: in u32 = low:32[R0]
0000064c: main_argv :: in out u64 = R1
0000064d: main_result :: out u32 = low:32[R0]

000002f2:
000002f6: #4 := R31 - 0x10
000002fc: mem := mem with [#4, el]:u64 <- R29
00000302: mem := mem with [#4 + 8, el]:u64 <- R30
00000306: R31 := #4
0000030c: R29 := R31
00000311: R0 := 0
00000317: R0 := R0 + 0x7B2
0000031c: R30 := 0x774
0000031e: call @puts with return %00000320

00000320:
00000323: R0 := 0
00000329: R0 := R0 + 0x7A4
0000032e: R30 := 0x780
00000330: call @puts with return %00000332

00000332:
00000335: R0 := 0
0000033c: R29 := mem[R31, el]:u64
00000341: R30 := mem[R31 + 8, el]:u64
00000345: R31 := R31 + 0x10
0000034a: call R30 with noreturn

00000619: sub puts(puts_s, puts_result)
0000064e: puts_s :: in u64 = R0
0000064f: puts_result :: out u32 = low:32[R0]

000002ee:
000004cd: R16 := 0x11000
000004d4: R17 := mem[R16 + 0x20, el]:u64
000004da: R16 := R16 + 0x20
000004df: call R17 with noreturn

0000061a: sub register_tm_clones(register_tm_clones_result)
00000650: register_tm_clones_result :: out u32 = low:32[R0]

00000248:
0000024b: R0 := 0x11000
00000251: R0 := R0 + 0x38
00000256: R1 := 0x11000
0000025c: R1 := R1 + 0x38
00000263: R1 := R1 + ~R0 + 1
00000269: R2 := 0.63:63[R1]
00000270: R1 := R2 + (R1 ~>> 3)
00000276: R1 := extend:64[63:1[R1]]
0000027c: when R1 = 0 goto %0000027a
0000063a: goto %00000387

00000387:
0000038a: R2 := 0x10000
00000391: R2 := mem[R2 + 0xFE0, el]:u64
00000396: when R2 = 0 goto %0000027a
0000063b: goto %0000039a

0000027a:
00000282: call R30 with noreturn

0000039a:
0000039e: R16 := R2
000003a3: call R16 with noreturn
