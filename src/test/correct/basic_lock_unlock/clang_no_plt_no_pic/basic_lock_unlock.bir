00000b14: program
00000afe: sub __cxa_finalize(__cxa_finalize_result)
00000b15: __cxa_finalize_result :: out u32 = low:32[R0]

000008b4:
000009ac: R16 := 0x11000
000009b3: R17 := mem[R16 + 8, el]:u64
000009b9: R16 := R16 + 8
000009be: call R17 with noreturn

00000aff: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000b16: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000007f9:
000007fd: #3 := R31 - 0x20
00000803: mem := mem with [#3, el]:u64 <- R29
00000809: mem := mem with [#3 + 8, el]:u64 <- R30
0000080d: R31 := #3
00000813: R29 := R31
0000081b: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000820: R19 := 0x11000
00000827: R0 := pad:64[mem[R19 + 0x30]]
0000082e: when 31:0[R0] <> 0 goto %0000082c
00000b00: goto %0000087d

0000087d:
00000880: R0 := 0x10000
00000887: R0 := mem[R0 + 0xFC8, el]:u64
0000088d: when R0 = 0 goto %0000088b
00000b01: goto %000008a4

000008a4:
000008a7: R0 := 0x11000
000008ae: R0 := mem[R0 + 0x28, el]:u64
000008b3: R30 := 0x6F0
000008b6: call @__cxa_finalize with return %0000088b

0000088b:
00000893: R30 := 0x6F4
00000895: call @deregister_tm_clones with return %00000897

00000897:
0000089a: R0 := 1
000008a2: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000b02: goto %0000082c

0000082c:
00000836: R19 := mem[R31 + 0x10, el]:u64
0000083d: R29 := mem[R31, el]:u64
00000842: R30 := mem[R31 + 8, el]:u64
00000846: R31 := R31 + 0x20
0000084b: call R30 with noreturn

00000b03: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000b17: __libc_start_main_main :: in u64 = R0
00000b18: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000b19: __libc_start_main_arg3 :: in out u64 = R2
00000b1a: __libc_start_main_auxv :: in out u64 = R3
00000b1b: __libc_start_main_result :: out u32 = low:32[R0]

00000752:
00000996: R16 := 0x11000
0000099d: R17 := mem[R16, el]:u64
000009a3: R16 := R16
000009a8: call R17 with noreturn

00000b04: sub _fini(_fini_result)
00000b1c: _fini_result :: out u32 = low:32[R0]

000005ae:
000005b4: #0 := R31 - 0x10
000005ba: mem := mem with [#0, el]:u64 <- R29
000005c0: mem := mem with [#0 + 8, el]:u64 <- R30
000005c4: R31 := #0
000005ca: R29 := R31
000005d1: R29 := mem[R31, el]:u64
000005d6: R30 := mem[R31 + 8, el]:u64
000005da: R31 := R31 + 0x10
000005df: call R30 with noreturn

00000b05: sub _init(_init_result)
00000b1d: _init_result :: out u32 = low:32[R0]

00000a59:
00000a5f: #5 := R31 - 0x10
00000a65: mem := mem with [#5, el]:u64 <- R29
00000a6b: mem := mem with [#5 + 8, el]:u64 <- R30
00000a6f: R31 := #5
00000a75: R29 := R31
00000a7a: R30 := 0x590
00000a7c: call @call_weak_fn with return %00000a7e

00000a7e:
00000a83: R29 := mem[R31, el]:u64
00000a88: R30 := mem[R31 + 8, el]:u64
00000a8c: R31 := R31 + 0x10
00000a91: call R30 with noreturn

00000b06: sub _start(_start_result)
00000b1e: _start_result :: out u32 = low:32[R0]

00000713:
00000718: R29 := 0
0000071d: R30 := 0
00000723: R5 := R0
0000072a: R1 := mem[R31, el]:u64
00000730: R2 := R31 + 8
00000736: R6 := R31
0000073b: R0 := 0x10000
00000742: R0 := mem[R0 + 0xFD8, el]:u64
00000747: R3 := 0
0000074c: R4 := 0
00000751: R30 := 0x630
00000754: call @__libc_start_main with return %00000756

00000756:
00000759: R30 := 0x634
0000075c: call @abort with return %00000b07

00000b07:
00000b08: call @call_weak_fn with noreturn

00000b09: sub abort()


0000075a:
000009d8: R16 := 0x11000
000009df: R17 := mem[R16 + 0x18, el]:u64
000009e5: R16 := R16 + 0x18
000009ea: call R17 with noreturn

00000b0a: sub call_weak_fn(call_weak_fn_result)
00000b1f: call_weak_fn_result :: out u32 = low:32[R0]

0000075e:
00000761: R0 := 0x10000
00000768: R0 := mem[R0 + 0xFD0, el]:u64
0000076e: when R0 = 0 goto %0000076c
00000b0b: goto %000008f4

0000076c:
00000774: call R30 with noreturn

000008f4:
000008f7: goto @__gmon_start__

000008f5:
000009c2: R16 := 0x11000
000009c9: R17 := mem[R16 + 0x10, el]:u64
000009cf: R16 := R16 + 0x10
000009d4: call R17 with noreturn

00000b0c: sub deregister_tm_clones(deregister_tm_clones_result)
00000b20: deregister_tm_clones_result :: out u32 = low:32[R0]

0000077a:
0000077d: R0 := 0x11000
00000783: R0 := R0 + 0x30
00000788: R1 := 0x11000
0000078e: R1 := R1 + 0x30
00000794: #1 := ~R0
00000799: #2 := R1 + ~R0
0000079f: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000007a5: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000007a9: ZF := #2 + 1 = 0
000007ad: NF := 63:63[#2 + 1]
000007b3: when ZF goto %000007b1
00000b0d: goto %000008d6

000008d6:
000008d9: R1 := 0x10000
000008e0: R1 := mem[R1 + 0xFC0, el]:u64
000008e5: when R1 = 0 goto %000007b1
00000b0e: goto %000008e9

000007b1:
000007b9: call R30 with noreturn

000008e9:
000008ed: R16 := R1
000008f2: call R16 with noreturn

00000b0f: sub frame_dummy(frame_dummy_result)
00000b21: frame_dummy_result :: out u32 = low:32[R0]

00000851:
00000853: call @register_tm_clones with noreturn

00000b10: sub main(main_argc, main_argv, main_result)
00000b22: main_argc :: in u32 = low:32[R0]
00000b23: main_argv :: in out u64 = R1
00000b24: main_result :: out u32 = low:32[R0]

00000855:
00000858: R9 := 0x11000
0000085d: R8 := 1
00000865: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
0000086a: R8 := 0x11000
0000086f: R0 := 0
00000876: mem := mem with [R8 + 0x38, el]:u32 <- 0
0000087b: call R30 with noreturn

00000b11: sub register_tm_clones(register_tm_clones_result)
00000b25: register_tm_clones_result :: out u32 = low:32[R0]

000007bb:
000007be: R0 := 0x11000
000007c4: R0 := R0 + 0x30
000007c9: R1 := 0x11000
000007cf: R1 := R1 + 0x30
000007d6: R1 := R1 + ~R0 + 1
000007dc: R2 := 0.63:63[R1]
000007e3: R1 := R2 + (R1 ~>> 3)
000007e9: R1 := extend:64[63:1[R1]]
000007ef: when R1 = 0 goto %000007ed
00000b12: goto %000008b8

000008b8:
000008bb: R2 := 0x10000
000008c2: R2 := mem[R2 + 0xFE0, el]:u64
000008c7: when R2 = 0 goto %000007ed
00000b13: goto %000008cb

000007ed:
000007f5: call R30 with noreturn

000008cb:
000008cf: R16 := R2
000008d4: call R16 with noreturn
