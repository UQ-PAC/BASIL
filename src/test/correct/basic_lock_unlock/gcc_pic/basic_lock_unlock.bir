0000054d: program
0000051b: sub __cxa_finalize(__cxa_finalize_result)
0000054e: __cxa_finalize_result :: out u32 = low:32[R0]

0000033b:
00000433: R16 := 0x10000
0000043a: R17 := mem[R16 + 0xFA8, el]:u64
00000440: R16 := R16 + 0xFA8
00000445: call R17 with noreturn

0000051c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000054f: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000272:
00000276: #3 := R31 - 0x20
0000027c: mem := mem with [#3, el]:u64 <- R29
00000282: mem := mem with [#3 + 8, el]:u64 <- R30
00000286: R31 := #3
0000028c: R29 := R31
00000294: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000299: R19 := 0x11000
000002a0: R0 := pad:64[mem[R19 + 0x10]]
000002a7: when 31:0[R0] <> 0 goto %000002a5
00000543: goto %00000304

00000304:
00000307: R0 := 0x10000
0000030e: R0 := mem[R0 + 0xFD0, el]:u64
00000314: when R0 = 0 goto %00000312
00000544: goto %0000032b

0000032b:
0000032e: R0 := 0x11000
00000335: R0 := mem[R0 + 8, el]:u64
0000033a: R30 := 0x730
0000033d: call @__cxa_finalize with return %00000312

00000312:
0000031a: R30 := 0x734
0000031c: call @deregister_tm_clones with return %0000031e

0000031e:
00000321: R0 := 1
00000329: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000545: goto %000002a5

000002a5:
000002af: R19 := mem[R31 + 0x10, el]:u64
000002b6: R29 := mem[R31, el]:u64
000002bb: R30 := mem[R31 + 8, el]:u64
000002bf: R31 := R31 + 0x20
000002c4: call R30 with noreturn

00000520: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000550: __libc_start_main_main :: in u64 = R0
00000551: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000552: __libc_start_main_arg3 :: in out u64 = R2
00000553: __libc_start_main_auxv :: in out u64 = R3
00000554: __libc_start_main_result :: out u32 = low:32[R0]

000001cb:
0000041d: R16 := 0x10000
00000424: R17 := mem[R16 + 0xFA0, el]:u64
0000042a: R16 := R16 + 0xFA0
0000042f: call R17 with noreturn

00000521: sub _fini(_fini_result)
00000555: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000522: sub _init(_init_result)
00000556: _init_result :: out u32 = low:32[R0]

0000048d:
00000493: #5 := R31 - 0x10
00000499: mem := mem with [#5, el]:u64 <- R29
0000049f: mem := mem with [#5 + 8, el]:u64 <- R30
000004a3: R31 := #5
000004a9: R29 := R31
000004ae: R30 := 0x5C0
000004b0: call @call_weak_fn with return %000004b2

000004b2:
000004b7: R29 := mem[R31, el]:u64
000004bc: R30 := mem[R31 + 8, el]:u64
000004c0: R31 := R31 + 0x10
000004c5: call R30 with noreturn

00000523: sub _start(_start_result)
00000557: _start_result :: out u32 = low:32[R0]

0000018c:
00000191: R29 := 0
00000196: R30 := 0
0000019c: R5 := R0
000001a3: R1 := mem[R31, el]:u64
000001a9: R2 := R31 + 8
000001af: R6 := R31
000001b4: R0 := 0x10000
000001bb: R0 := mem[R0 + 0xFF0, el]:u64
000001c0: R3 := 0
000001c5: R4 := 0
000001ca: R30 := 0x670
000001cd: call @__libc_start_main with return %000001cf

000001cf:
000001d2: R30 := 0x674
000001d5: call @abort with return %00000546

00000546:
00000547: call @call_weak_fn with noreturn

00000526: sub abort()


000001d3:
0000045f: R16 := 0x10000
00000466: R17 := mem[R16 + 0xFB8, el]:u64
0000046c: R16 := R16 + 0xFB8
00000471: call R17 with noreturn

00000527: sub call_weak_fn(call_weak_fn_result)
00000558: call_weak_fn_result :: out u32 = low:32[R0]

000001d7:
000001da: R0 := 0x10000
000001e1: R0 := mem[R0 + 0xFE8, el]:u64
000001e7: when R0 = 0 goto %000001e5
00000548: goto %0000037b

000001e5:
000001ed: call R30 with noreturn

0000037b:
0000037e: goto @__gmon_start__

0000037c:
00000449: R16 := 0x10000
00000450: R17 := mem[R16 + 0xFB0, el]:u64
00000456: R16 := R16 + 0xFB0
0000045b: call R17 with noreturn

00000529: sub deregister_tm_clones(deregister_tm_clones_result)
00000559: deregister_tm_clones_result :: out u32 = low:32[R0]

000001f3:
000001f6: R0 := 0x11000
000001fc: R0 := R0 + 0x10
00000201: R1 := 0x11000
00000207: R1 := R1 + 0x10
0000020d: #1 := ~R0
00000212: #2 := R1 + ~R0
00000218: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000021e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000222: ZF := #2 + 1 = 0
00000226: NF := 63:63[#2 + 1]
0000022c: when ZF goto %0000022a
00000549: goto %0000035d

0000035d:
00000360: R1 := 0x10000
00000367: R1 := mem[R1 + 0xFC8, el]:u64
0000036c: when R1 = 0 goto %0000022a
0000054a: goto %00000370

0000022a:
00000232: call R30 with noreturn

00000370:
00000374: R16 := R1
00000379: call R16 with noreturn

0000052c: sub frame_dummy(frame_dummy_result)
0000055a: frame_dummy_result :: out u32 = low:32[R0]

000002ca:
000002cc: call @register_tm_clones with noreturn

0000052d: sub main(main_argc, main_argv, main_result)
0000055b: main_argc :: in u32 = low:32[R0]
0000055c: main_argv :: in out u64 = R1
0000055d: main_result :: out u32 = low:32[R0]

000002ce:
000002d1: R0 := 0x10000
000002d8: R0 := mem[R0 + 0xFE0, el]:u64
000002dd: R1 := 1
000002e5: mem := mem with [R0, el]:u32 <- 31:0[R1]
000002ea: R0 := 0x10000
000002f1: R0 := mem[R0 + 0xFD8, el]:u64
000002f8: mem := mem with [R0, el]:u32 <- 0
000002fd: R0 := 0
00000302: call R30 with noreturn

0000052e: sub register_tm_clones(register_tm_clones_result)
0000055e: register_tm_clones_result :: out u32 = low:32[R0]

00000234:
00000237: R0 := 0x11000
0000023d: R0 := R0 + 0x10
00000242: R1 := 0x11000
00000248: R1 := R1 + 0x10
0000024f: R1 := R1 + ~R0 + 1
00000255: R2 := 0.63:63[R1]
0000025c: R1 := R2 + (R1 ~>> 3)
00000262: R1 := extend:64[63:1[R1]]
00000268: when R1 = 0 goto %00000266
0000054b: goto %0000033f

0000033f:
00000342: R2 := 0x10000
00000349: R2 := mem[R2 + 0xFF8, el]:u64
0000034e: when R2 = 0 goto %00000266
0000054c: goto %00000352

00000266:
0000026e: call R30 with noreturn

00000352:
00000356: R16 := R2
0000035b: call R16 with noreturn
