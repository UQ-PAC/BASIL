0000054e: program
0000051c: sub __cxa_finalize(__cxa_finalize_result)
0000054f: __cxa_finalize_result :: out u32 = low:32[R0]

00000325:
0000041d: R16 := 0x20000
00000424: R17 := mem[R16 + 8, el]:u64
0000042a: R16 := R16 + 8
0000042f: call R17 with noreturn

0000051d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000550: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000026b:
0000026f: #3 := R31 - 0x20
00000275: mem := mem with [#3, el]:u64 <- R29
0000027b: mem := mem with [#3 + 8, el]:u64 <- R30
0000027f: R31 := #3
00000285: R29 := R31
0000028d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000292: R19 := 0x20000
00000299: R0 := pad:64[mem[R19 + 0x30]]
0000029f: when 0:0[R0] goto %0000029d
00000544: goto %000002ee

000002ee:
000002f1: R0 := 0x1F000
000002f8: R0 := mem[R0 + 0xFC8, el]:u64
000002fe: when R0 = 0 goto %000002fc
00000545: goto %00000315

00000315:
00000318: R0 := 0x20000
0000031f: R0 := mem[R0 + 0x28, el]:u64
00000324: R30 := 0x730
00000327: call @__cxa_finalize with return %000002fc

000002fc:
00000304: R30 := 0x734
00000306: call @deregister_tm_clones with return %00000308

00000308:
0000030b: R0 := 1
00000313: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000546: goto %0000029d

0000029d:
000002a7: R19 := mem[R31 + 0x10, el]:u64
000002ae: R29 := mem[R31, el]:u64
000002b3: R30 := mem[R31 + 8, el]:u64
000002b7: R31 := R31 + 0x20
000002bc: call R30 with noreturn

00000521: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000551: __libc_start_main_main :: in u64 = R0
00000552: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000553: __libc_start_main_arg3 :: in out u64 = R2
00000554: __libc_start_main_auxv :: in out u64 = R3
00000555: __libc_start_main_result :: out u32 = low:32[R0]

000001c4:
00000407: R16 := 0x20000
0000040e: R17 := mem[R16, el]:u64
00000414: R16 := R16
00000419: call R17 with noreturn

00000522: sub _fini(_fini_result)
00000556: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000523: sub _init(_init_result)
00000557: _init_result :: out u32 = low:32[R0]

00000477:
0000047d: #5 := R31 - 0x10
00000483: mem := mem with [#5, el]:u64 <- R29
00000489: mem := mem with [#5 + 8, el]:u64 <- R30
0000048d: R31 := #5
00000493: R29 := R31
00000498: R30 := 0x5C8
0000049a: call @call_weak_fn with return %0000049c

0000049c:
000004a1: R29 := mem[R31, el]:u64
000004a6: R30 := mem[R31 + 8, el]:u64
000004aa: R31 := R31 + 0x10
000004af: call R30 with noreturn

00000524: sub _start(_start_result)
00000558: _start_result :: out u32 = low:32[R0]

00000185:
0000018a: R29 := 0
0000018f: R30 := 0
00000195: R5 := R0
0000019c: R1 := mem[R31, el]:u64
000001a2: R2 := R31 + 8
000001a8: R6 := R31
000001ad: R0 := 0x1F000
000001b4: R0 := mem[R0 + 0xFD8, el]:u64
000001b9: R3 := 0
000001be: R4 := 0
000001c3: R30 := 0x670
000001c6: call @__libc_start_main with return %000001c8

000001c8:
000001cb: R30 := 0x674
000001ce: call @abort with return %00000547

00000547:
00000548: call @call_weak_fn with noreturn

00000527: sub abort()


000001cc:
00000449: R16 := 0x20000
00000450: R17 := mem[R16 + 0x18, el]:u64
00000456: R16 := R16 + 0x18
0000045b: call R17 with noreturn

00000528: sub call_weak_fn(call_weak_fn_result)
00000559: call_weak_fn_result :: out u32 = low:32[R0]

000001d0:
000001d3: R0 := 0x1F000
000001da: R0 := mem[R0 + 0xFD0, el]:u64
000001e0: when R0 = 0 goto %000001de
00000549: goto %00000365

000001de:
000001e6: call R30 with noreturn

00000365:
00000368: goto @__gmon_start__

00000366:
00000433: R16 := 0x20000
0000043a: R17 := mem[R16 + 0x10, el]:u64
00000440: R16 := R16 + 0x10
00000445: call R17 with noreturn

0000052a: sub deregister_tm_clones(deregister_tm_clones_result)
0000055a: deregister_tm_clones_result :: out u32 = low:32[R0]

000001ec:
000001ef: R0 := 0x20000
000001f5: R0 := R0 + 0x30
000001fa: R1 := 0x20000
00000200: R1 := R1 + 0x30
00000206: #1 := ~R0
0000020b: #2 := R1 + ~R0
00000211: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000217: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000021b: ZF := #2 + 1 = 0
0000021f: NF := 63:63[#2 + 1]
00000225: when ZF goto %00000223
0000054a: goto %00000347

00000347:
0000034a: R1 := 0x1F000
00000351: R1 := mem[R1 + 0xFC0, el]:u64
00000356: when R1 = 0 goto %00000223
0000054b: goto %0000035a

00000223:
0000022b: call R30 with noreturn

0000035a:
0000035e: R16 := R1
00000363: call R16 with noreturn

0000052d: sub frame_dummy(frame_dummy_result)
0000055b: frame_dummy_result :: out u32 = low:32[R0]

000002c2:
000002c4: call @register_tm_clones with noreturn

0000052e: sub main(main_argc, main_argv, main_result)
0000055c: main_argc :: in u32 = low:32[R0]
0000055d: main_argv :: in out u64 = R1
0000055e: main_result :: out u32 = low:32[R0]

000002c6:
000002c9: R0 := 0
000002ce: R8 := 0x20000
000002d3: R9 := 1
000002d8: R10 := 0x20000
000002e0: mem := mem with [R8 + 0x34, el]:u32 <- 31:0[R9]
000002e7: mem := mem with [R10 + 0x38, el]:u32 <- 0
000002ec: call R30 with noreturn

0000052f: sub register_tm_clones(register_tm_clones_result)
0000055f: register_tm_clones_result :: out u32 = low:32[R0]

0000022d:
00000230: R0 := 0x20000
00000236: R0 := R0 + 0x30
0000023b: R1 := 0x20000
00000241: R1 := R1 + 0x30
00000248: R1 := R1 + ~R0 + 1
0000024e: R2 := 0.63:63[R1]
00000255: R1 := R2 + (R1 ~>> 3)
0000025b: R1 := extend:64[63:1[R1]]
00000261: when R1 = 0 goto %0000025f
0000054c: goto %00000329

00000329:
0000032c: R2 := 0x1F000
00000333: R2 := mem[R2 + 0xFE0, el]:u64
00000338: when R2 = 0 goto %0000025f
0000054d: goto %0000033c

0000025f:
00000267: call R30 with noreturn

0000033c:
00000340: R16 := R2
00000345: call R16 with noreturn
