var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R10: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R10: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 1924bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 131124bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 131128bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 1924bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1925bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1926bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1927bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 130488bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R10, Gamma_R8, Gamma_R9, Gamma_mem, R0, R10, R8, R9, mem;
  free requires (memory_load64_le(mem, 131104bv64) == 0bv64);
  free requires (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free requires (memory_load8_le(mem, 1924bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1925bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1926bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1927bv64) == 0bv8);
  free requires (memory_load64_le(mem, 130488bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 130496bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free ensures (memory_load8_le(mem, 1924bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1925bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1926bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1927bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 130488bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);

implementation main()
{
  lmain:
    assume {:captureState "lmain"} true;
    R0, Gamma_R0 := 0bv64, true;
    R8, Gamma_R8 := 131072bv64, true;
    R9, Gamma_R9 := 1bv64, true;
    R10, Gamma_R10 := 131072bv64, true;
    call rely();
    assert (L(mem, bvadd64(R8, 52bv64)) ==> Gamma_R9);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R8, 52bv64), R9[32:0]), gamma_store32(Gamma_mem, bvadd64(R8, 52bv64), Gamma_R9);
    assume {:captureState "%000002e0"} true;
    call rely();
    assert (L(mem, bvadd64(R10, 56bv64)) ==> true);
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R10, 56bv64), 0bv32), gamma_store32(Gamma_mem, bvadd64(R10, 56bv64), true);
    assume {:captureState "%000002e7"} true;
    goto main_return;
  main_return:
    assume {:captureState "main_return"} true;
    return;
}

