00000566: program
00000534: sub __cxa_finalize(__cxa_finalize_result)
00000567: __cxa_finalize_result :: out u32 = low:32[R0]

0000033b:
00000433: R16 := 0x20000
0000043a: R17 := mem[R16 + 8, el]:u64
00000440: R16 := R16 + 8
00000445: call R17 with noreturn

00000535: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000568: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000273:
00000277: #3 := R31 - 0x20
0000027d: mem := mem with [#3, el]:u64 <- R29
00000283: mem := mem with [#3 + 8, el]:u64 <- R30
00000287: R31 := #3
0000028d: R29 := R31
00000295: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000029a: R19 := 0x20000
000002a1: R0 := pad:64[mem[R19 + 0x30]]
000002a7: when 0:0[R0] goto %000002a5
0000055c: goto %00000304

00000304:
00000307: R0 := 0x1F000
0000030e: R0 := mem[R0 + 0xFB8, el]:u64
00000314: when R0 = 0 goto %00000312
0000055d: goto %0000032b

0000032b:
0000032e: R0 := 0x20000
00000335: R0 := mem[R0 + 0x28, el]:u64
0000033a: R30 := 0x770
0000033d: call @__cxa_finalize with return %00000312

00000312:
0000031a: R30 := 0x774
0000031c: call @deregister_tm_clones with return %0000031e

0000031e:
00000321: R0 := 1
00000329: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000055e: goto %000002a5

000002a5:
000002af: R19 := mem[R31 + 0x10, el]:u64
000002b6: R29 := mem[R31, el]:u64
000002bb: R30 := mem[R31 + 8, el]:u64
000002bf: R31 := R31 + 0x20
000002c4: call R30 with noreturn

00000539: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000569: __libc_start_main_main :: in u64 = R0
0000056a: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000056b: __libc_start_main_arg3 :: in out u64 = R2
0000056c: __libc_start_main_auxv :: in out u64 = R3
0000056d: __libc_start_main_result :: out u32 = low:32[R0]

000001cc:
0000041d: R16 := 0x20000
00000424: R17 := mem[R16, el]:u64
0000042a: R16 := R16
0000042f: call R17 with noreturn

0000053a: sub _fini(_fini_result)
0000056e: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000053b: sub _init(_init_result)
0000056f: _init_result :: out u32 = low:32[R0]

0000048d:
00000493: #5 := R31 - 0x10
00000499: mem := mem with [#5, el]:u64 <- R29
0000049f: mem := mem with [#5 + 8, el]:u64 <- R30
000004a3: R31 := #5
000004a9: R29 := R31
000004ae: R30 := 0x5F8
000004b0: call @call_weak_fn with return %000004b2

000004b2:
000004b7: R29 := mem[R31, el]:u64
000004bc: R30 := mem[R31 + 8, el]:u64
000004c0: R31 := R31 + 0x10
000004c5: call R30 with noreturn

0000053c: sub _start(_start_result)
00000570: _start_result :: out u32 = low:32[R0]

0000018d:
00000192: R29 := 0
00000197: R30 := 0
0000019d: R5 := R0
000001a4: R1 := mem[R31, el]:u64
000001aa: R2 := R31 + 8
000001b0: R6 := R31
000001b5: R0 := 0x1F000
000001bc: R0 := mem[R0 + 0xFD8, el]:u64
000001c1: R3 := 0
000001c6: R4 := 0
000001cb: R30 := 0x6B0
000001ce: call @__libc_start_main with return %000001d0

000001d0:
000001d3: R30 := 0x6B4
000001d6: call @abort with return %0000055f

0000055f:
00000560: call @call_weak_fn with noreturn

0000053f: sub abort()


000001d4:
0000045f: R16 := 0x20000
00000466: R17 := mem[R16 + 0x18, el]:u64
0000046c: R16 := R16 + 0x18
00000471: call R17 with noreturn

00000540: sub call_weak_fn(call_weak_fn_result)
00000571: call_weak_fn_result :: out u32 = low:32[R0]

000001d8:
000001db: R0 := 0x1F000
000001e2: R0 := mem[R0 + 0xFD0, el]:u64
000001e8: when R0 = 0 goto %000001e6
00000561: goto %0000037b

000001e6:
000001ee: call R30 with noreturn

0000037b:
0000037e: goto @__gmon_start__

0000037c:
00000449: R16 := 0x20000
00000450: R17 := mem[R16 + 0x10, el]:u64
00000456: R16 := R16 + 0x10
0000045b: call R17 with noreturn

00000542: sub deregister_tm_clones(deregister_tm_clones_result)
00000572: deregister_tm_clones_result :: out u32 = low:32[R0]

000001f4:
000001f7: R0 := 0x20000
000001fd: R0 := R0 + 0x30
00000202: R1 := 0x20000
00000208: R1 := R1 + 0x30
0000020e: #1 := ~R0
00000213: #2 := R1 + ~R0
00000219: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000021f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000223: ZF := #2 + 1 = 0
00000227: NF := 63:63[#2 + 1]
0000022d: when ZF goto %0000022b
00000562: goto %0000035d

0000035d:
00000360: R1 := 0x1F000
00000367: R1 := mem[R1 + 0xFB0, el]:u64
0000036c: when R1 = 0 goto %0000022b
00000563: goto %00000370

0000022b:
00000233: call R30 with noreturn

00000370:
00000374: R16 := R1
00000379: call R16 with noreturn

00000545: sub frame_dummy(frame_dummy_result)
00000573: frame_dummy_result :: out u32 = low:32[R0]

000002ca:
000002cc: call @register_tm_clones with noreturn

00000546: sub main(main_argc, main_argv, main_result)
00000574: main_argc :: in u32 = low:32[R0]
00000575: main_argv :: in out u64 = R1
00000576: main_result :: out u32 = low:32[R0]

000002ce:
000002d1: R9 := 0x1F000
000002d8: R9 := mem[R9 + 0xFC8, el]:u64
000002dd: R8 := 1
000002e5: mem := mem with [R9, el]:u32 <- 31:0[R8]
000002ea: R8 := 0x1F000
000002f1: R8 := mem[R8 + 0xFC0, el]:u64
000002f6: R0 := 0
000002fd: mem := mem with [R8, el]:u32 <- 0
00000302: call R30 with noreturn

00000547: sub register_tm_clones(register_tm_clones_result)
00000577: register_tm_clones_result :: out u32 = low:32[R0]

00000235:
00000238: R0 := 0x20000
0000023e: R0 := R0 + 0x30
00000243: R1 := 0x20000
00000249: R1 := R1 + 0x30
00000250: R1 := R1 + ~R0 + 1
00000256: R2 := 0.63:63[R1]
0000025d: R1 := R2 + (R1 ~>> 3)
00000263: R1 := extend:64[63:1[R1]]
00000269: when R1 = 0 goto %00000267
00000564: goto %0000033f

0000033f:
00000342: R2 := 0x1F000
00000349: R2 := mem[R2 + 0xFE0, el]:u64
0000034e: when R2 = 0 goto %00000267
00000565: goto %00000352

00000267:
0000026f: call R30 with noreturn

00000352:
00000356: R16 := R2
0000035b: call R16 with noreturn
