000005b9: program
00000587: sub __cxa_finalize(__cxa_finalize_result)
000005ba: __cxa_finalize_result :: out u32 = low:32[R0]

00000339:
00000431: R16 := 0x20000
00000438: R17 := mem[R16 + 8, el]:u64
0000043e: R16 := R16 + 8
00000443: call R17 with noreturn

00000588: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005bb: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000273:
00000277: #3 := R31 - 0x20
0000027d: mem := mem with [#3, el]:u64 <- R29
00000283: mem := mem with [#3 + 8, el]:u64 <- R30
00000287: R31 := #3
0000028d: R29 := R31
00000295: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000029a: R19 := 0x20000
000002a1: R0 := pad:64[mem[R19 + 0x30]]
000002a7: when 0:0[R0] goto %000002a5
000005af: goto %00000302

00000302:
00000305: R0 := 0x1F000
0000030c: R0 := mem[R0 + 0xFC8, el]:u64
00000312: when R0 = 0 goto %00000310
000005b0: goto %00000329

00000329:
0000032c: R0 := 0x20000
00000333: R0 := mem[R0 + 0x28, el]:u64
00000338: R30 := 0x6F0
0000033b: call @__cxa_finalize with return %00000310

00000310:
00000318: R30 := 0x6F4
0000031a: call @deregister_tm_clones with return %0000031c

0000031c:
0000031f: R0 := 1
00000327: mem := mem with [R19 + 0x30] <- 7:0[R0]
000005b1: goto %000002a5

000002a5:
000002af: R19 := mem[R31 + 0x10, el]:u64
000002b6: R29 := mem[R31, el]:u64
000002bb: R30 := mem[R31 + 8, el]:u64
000002bf: R31 := R31 + 0x20
000002c4: call R30 with noreturn

0000058c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005bc: __libc_start_main_main :: in u64 = R0
000005bd: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005be: __libc_start_main_arg3 :: in out u64 = R2
000005bf: __libc_start_main_auxv :: in out u64 = R3
000005c0: __libc_start_main_result :: out u32 = low:32[R0]

000001cc:
0000041b: R16 := 0x20000
00000422: R17 := mem[R16, el]:u64
00000428: R16 := R16
0000042d: call R17 with noreturn

0000058d: sub _fini(_fini_result)
000005c1: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000058e: sub _init(_init_result)
000005c2: _init_result :: out u32 = low:32[R0]

000004e0:
000004e6: #5 := R31 - 0x10
000004ec: mem := mem with [#5, el]:u64 <- R29
000004f2: mem := mem with [#5 + 8, el]:u64 <- R30
000004f6: R31 := #5
000004fc: R29 := R31
00000501: R30 := 0x590
00000503: call @call_weak_fn with return %00000505

00000505:
0000050a: R29 := mem[R31, el]:u64
0000050f: R30 := mem[R31 + 8, el]:u64
00000513: R31 := R31 + 0x10
00000518: call R30 with noreturn

0000058f: sub _start(_start_result)
000005c3: _start_result :: out u32 = low:32[R0]

0000018d:
00000192: R29 := 0
00000197: R30 := 0
0000019d: R5 := R0
000001a4: R1 := mem[R31, el]:u64
000001aa: R2 := R31 + 8
000001b0: R6 := R31
000001b5: R0 := 0x1F000
000001bc: R0 := mem[R0 + 0xFD8, el]:u64
000001c1: R3 := 0
000001c6: R4 := 0
000001cb: R30 := 0x630
000001ce: call @__libc_start_main with return %000001d0

000001d0:
000001d3: R30 := 0x634
000001d6: call @abort with return %000005b2

000005b2:
000005b3: call @call_weak_fn with noreturn

00000592: sub abort()


000001d4:
0000045d: R16 := 0x20000
00000464: R17 := mem[R16 + 0x18, el]:u64
0000046a: R16 := R16 + 0x18
0000046f: call R17 with noreturn

00000593: sub call_weak_fn(call_weak_fn_result)
000005c4: call_weak_fn_result :: out u32 = low:32[R0]

000001d8:
000001db: R0 := 0x1F000
000001e2: R0 := mem[R0 + 0xFD0, el]:u64
000001e8: when R0 = 0 goto %000001e6
000005b4: goto %00000379

000001e6:
000001ee: call R30 with noreturn

00000379:
0000037c: goto @__gmon_start__

0000037a:
00000447: R16 := 0x20000
0000044e: R17 := mem[R16 + 0x10, el]:u64
00000454: R16 := R16 + 0x10
00000459: call R17 with noreturn

00000595: sub deregister_tm_clones(deregister_tm_clones_result)
000005c5: deregister_tm_clones_result :: out u32 = low:32[R0]

000001f4:
000001f7: R0 := 0x20000
000001fd: R0 := R0 + 0x30
00000202: R1 := 0x20000
00000208: R1 := R1 + 0x30
0000020e: #1 := ~R0
00000213: #2 := R1 + ~R0
00000219: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000021f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000223: ZF := #2 + 1 = 0
00000227: NF := 63:63[#2 + 1]
0000022d: when ZF goto %0000022b
000005b5: goto %0000035b

0000035b:
0000035e: R1 := 0x1F000
00000365: R1 := mem[R1 + 0xFC0, el]:u64
0000036a: when R1 = 0 goto %0000022b
000005b6: goto %0000036e

0000022b:
00000233: call R30 with noreturn

0000036e:
00000372: R16 := R1
00000377: call R16 with noreturn

00000598: sub frame_dummy(frame_dummy_result)
000005c6: frame_dummy_result :: out u32 = low:32[R0]

000002ca:
000002cc: call @register_tm_clones with noreturn

00000599: sub main(main_argc, main_argv, main_result)
000005c7: main_argc :: in u32 = low:32[R0]
000005c8: main_argv :: in out u64 = R1
000005c9: main_result :: out u32 = low:32[R0]

000002ce:
000002d1: R0 := 0x20000
000002d7: R0 := R0 + 0x34
000002dc: R1 := 1
000002e4: mem := mem with [R0, el]:u32 <- 31:0[R1]
000002e9: R0 := 0x20000
000002ef: R0 := R0 + 0x38
000002f6: mem := mem with [R0, el]:u32 <- 0
000002fb: R0 := 0
00000300: call R30 with noreturn

0000059a: sub register_tm_clones(register_tm_clones_result)
000005ca: register_tm_clones_result :: out u32 = low:32[R0]

00000235:
00000238: R0 := 0x20000
0000023e: R0 := R0 + 0x30
00000243: R1 := 0x20000
00000249: R1 := R1 + 0x30
00000250: R1 := R1 + ~R0 + 1
00000256: R2 := 0.63:63[R1]
0000025d: R1 := R2 + (R1 ~>> 3)
00000263: R1 := extend:64[63:1[R1]]
00000269: when R1 = 0 goto %00000267
000005b7: goto %0000033d

0000033d:
00000340: R2 := 0x1F000
00000347: R2 := mem[R2 + 0xFE0, el]:u64
0000034c: when R2 = 0 goto %00000267
000005b8: goto %00000350

00000267:
0000026f: call R30 with noreturn

00000350:
00000354: R16 := R2
00000359: call R16 with noreturn
