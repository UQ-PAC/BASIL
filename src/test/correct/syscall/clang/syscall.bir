0000062a: program
000005f6: sub __cxa_finalize(__cxa_finalize_result)
0000062b: __cxa_finalize_result :: out u32 = low:32[R0]

00000378:
00000480: R16 := 0x11000
00000487: R17 := mem[R16 + 8, el]:u64
0000048d: R16 := R16 + 8
00000492: call R17 with noreturn

000005f7: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000062c: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000027e:
00000282: #3 := R31 - 0x20
00000288: mem := mem with [#3, el]:u64 <- R29
0000028e: mem := mem with [#3 + 8, el]:u64 <- R30
00000292: R31 := #3
00000298: R29 := R31
000002a0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002a5: R19 := 0x11000
000002ac: R0 := pad:64[mem[R19 + 0x38]]
000002b3: when 31:0[R0] <> 0 goto %000002b1
00000620: goto %00000341

00000341:
00000344: R0 := 0x10000
0000034b: R0 := mem[R0 + 0xFC8, el]:u64
00000351: when R0 = 0 goto %0000034f
00000621: goto %00000368

00000368:
0000036b: R0 := 0x11000
00000372: R0 := mem[R0 + 0x30, el]:u64
00000377: R30 := 0x730
0000037a: call @__cxa_finalize with return %0000034f

0000034f:
00000357: R30 := 0x734
00000359: call @deregister_tm_clones with return %0000035b

0000035b:
0000035e: R0 := 1
00000366: mem := mem with [R19 + 0x38] <- 7:0[R0]
00000622: goto %000002b1

000002b1:
000002bb: R19 := mem[R31 + 0x10, el]:u64
000002c2: R29 := mem[R31, el]:u64
000002c7: R30 := mem[R31 + 8, el]:u64
000002cb: R31 := R31 + 0x20
000002d0: call R30 with noreturn

000005fb: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000062d: __libc_start_main_main :: in u64 = R0
0000062e: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000062f: __libc_start_main_arg3 :: in out u64 = R2
00000630: __libc_start_main_auxv :: in out u64 = R3
00000631: __libc_start_main_result :: out u32 = low:32[R0]

000001d7:
0000046a: R16 := 0x11000
00000471: R17 := mem[R16, el]:u64
00000477: R16 := R16
0000047c: call R17 with noreturn

000005fc: sub _fini(_fini_result)
00000632: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005fd: sub _init(_init_result)
00000633: _init_result :: out u32 = low:32[R0]

00000548:
0000054e: #7 := R31 - 0x10
00000554: mem := mem with [#7, el]:u64 <- R29
0000055a: mem := mem with [#7 + 8, el]:u64 <- R30
0000055e: R31 := #7
00000564: R29 := R31
00000569: R30 := 0x5C8
0000056b: call @call_weak_fn with return %0000056d

0000056d:
00000572: R29 := mem[R31, el]:u64
00000577: R30 := mem[R31 + 8, el]:u64
0000057b: R31 := R31 + 0x10
00000580: call R30 with noreturn

000005fe: sub _start(_start_result)
00000634: _start_result :: out u32 = low:32[R0]

00000198:
0000019d: R29 := 0
000001a2: R30 := 0
000001a8: R5 := R0
000001af: R1 := mem[R31, el]:u64
000001b5: R2 := R31 + 8
000001bb: R6 := R31
000001c0: R0 := 0x10000
000001c7: R0 := mem[R0 + 0xFD8, el]:u64
000001cc: R3 := 0
000001d1: R4 := 0
000001d6: R30 := 0x670
000001d9: call @__libc_start_main with return %000001db

000001db:
000001de: R30 := 0x674
000001e1: call @abort with return %00000623

00000623:
00000624: call @call_weak_fn with noreturn

00000601: sub abort()


000001df:
000004c2: R16 := 0x11000
000004c9: R17 := mem[R16 + 0x20, el]:u64
000004cf: R16 := R16 + 0x20
000004d4: call R17 with noreturn

00000602: sub call_weak_fn(call_weak_fn_result)
00000635: call_weak_fn_result :: out u32 = low:32[R0]

000001e3:
000001e6: R0 := 0x10000
000001ed: R0 := mem[R0 + 0xFD0, el]:u64
000001f3: when R0 = 0 goto %000001f1
00000625: goto %000003b8

000001f1:
000001f9: call R30 with noreturn

000003b8:
000003bb: goto @__gmon_start__

000003b9:
000004ac: R16 := 0x11000
000004b3: R17 := mem[R16 + 0x18, el]:u64
000004b9: R16 := R16 + 0x18
000004be: call R17 with noreturn

00000604: sub deregister_tm_clones(deregister_tm_clones_result)
00000636: deregister_tm_clones_result :: out u32 = low:32[R0]

000001ff:
00000202: R0 := 0x11000
00000208: R0 := R0 + 0x38
0000020d: R1 := 0x11000
00000213: R1 := R1 + 0x38
00000219: #1 := ~R0
0000021e: #2 := R1 + ~R0
00000224: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000022a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000022e: ZF := #2 + 1 = 0
00000232: NF := 63:63[#2 + 1]
00000238: when ZF goto %00000236
00000626: goto %0000039a

0000039a:
0000039d: R1 := 0x10000
000003a4: R1 := mem[R1 + 0xFC0, el]:u64
000003a9: when R1 = 0 goto %00000236
00000627: goto %000003ad

00000236:
0000023e: call R30 with noreturn

000003ad:
000003b1: R16 := R1
000003b6: call R16 with noreturn

00000607: sub fork(fork_result)
00000637: fork_result :: out u32 = low:32[R0]

00000313:
00000496: R16 := 0x11000
0000049d: R17 := mem[R16 + 0x10, el]:u64
000004a3: R16 := R16 + 0x10
000004a8: call R17 with noreturn

00000608: sub frame_dummy(frame_dummy_result)
00000638: frame_dummy_result :: out u32 = low:32[R0]

000002d6:
000002d8: call @register_tm_clones with noreturn

00000609: sub main(main_argc, main_argv, main_result)
00000639: main_argc :: in u32 = low:32[R0]
0000063a: main_argv :: in out u64 = R1
0000063b: main_result :: out u32 = low:32[R0]

000002da:
000002de: R31 := R31 - 0x30
000002e4: #4 := R31 + 0x20
000002ea: mem := mem with [#4, el]:u64 <- R29
000002f0: mem := mem with [#4 + 8, el]:u64 <- R30
000002f6: R29 := R31 + 0x20
000002fd: mem := mem with [R29 - 4, el]:u32 <- 0
00000305: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
0000030d: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000312: R30 := 0x770
00000315: call @fork with return %00000317

00000317:
0000031d: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000324: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000032a: #5 := R31 + 0x20
0000032f: R29 := mem[#5, el]:u64
00000334: R30 := mem[#5 + 8, el]:u64
0000033a: R31 := R31 + 0x30
0000033f: call R30 with noreturn

0000060a: sub register_tm_clones(register_tm_clones_result)
0000063c: register_tm_clones_result :: out u32 = low:32[R0]

00000240:
00000243: R0 := 0x11000
00000249: R0 := R0 + 0x38
0000024e: R1 := 0x11000
00000254: R1 := R1 + 0x38
0000025b: R1 := R1 + ~R0 + 1
00000261: R2 := 0.63:63[R1]
00000268: R1 := R2 + (R1 ~>> 3)
0000026e: R1 := extend:64[63:1[R1]]
00000274: when R1 = 0 goto %00000272
00000628: goto %0000037c

0000037c:
0000037f: R2 := 0x10000
00000386: R2 := mem[R2 + 0xFE0, el]:u64
0000038b: when R2 = 0 goto %00000272
00000629: goto %0000038f

00000272:
0000027a: call R30 with noreturn

0000038f:
00000393: R16 := R2
00000398: call R16 with noreturn
