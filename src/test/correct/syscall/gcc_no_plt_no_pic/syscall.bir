00000be3: program
00000bcc: sub __cxa_finalize(__cxa_finalize_result)
00000be4: __cxa_finalize_result :: out u32 = low:32[R0]

00000954:
00000a5c: R16 := 0x10000
00000a63: R17 := mem[R16 + 0xFB0, el]:u64
00000a69: R16 := R16 + 0xFB0
00000a6e: call R17 with noreturn

00000bcd: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000be5: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000869:
0000086d: #3 := R31 - 0x20
00000873: mem := mem with [#3, el]:u64 <- R29
00000879: mem := mem with [#3 + 8, el]:u64 <- R30
0000087d: R31 := #3
00000883: R29 := R31
0000088b: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000890: R19 := 0x11000
00000897: R0 := pad:64[mem[R19 + 0x10]]
0000089e: when 31:0[R0] <> 0 goto %0000089c
00000bce: goto %0000091d

0000091d:
00000920: R0 := 0x10000
00000927: R0 := mem[R0 + 0xFE0, el]:u64
0000092d: when R0 = 0 goto %0000092b
00000bcf: goto %00000944

00000944:
00000947: R0 := 0x11000
0000094e: R0 := mem[R0 + 8, el]:u64
00000953: R30 := 0x730
00000956: call @__cxa_finalize with return %0000092b

0000092b:
00000933: R30 := 0x734
00000935: call @deregister_tm_clones with return %00000937

00000937:
0000093a: R0 := 1
00000942: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000bd0: goto %0000089c

0000089c:
000008a6: R19 := mem[R31 + 0x10, el]:u64
000008ad: R29 := mem[R31, el]:u64
000008b2: R30 := mem[R31 + 8, el]:u64
000008b6: R31 := R31 + 0x20
000008bb: call R30 with noreturn

00000bd1: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000be6: __libc_start_main_main :: in u64 = R0
00000be7: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000be8: __libc_start_main_arg3 :: in out u64 = R2
00000be9: __libc_start_main_auxv :: in out u64 = R3
00000bea: __libc_start_main_result :: out u32 = low:32[R0]

000007c2:
00000a46: R16 := 0x10000
00000a4d: R17 := mem[R16 + 0xFA8, el]:u64
00000a53: R16 := R16 + 0xFA8
00000a58: call R17 with noreturn

00000bd2: sub _fini(_fini_result)
00000beb: _fini_result :: out u32 = low:32[R0]

00000616:
0000061c: #0 := R31 - 0x10
00000622: mem := mem with [#0, el]:u64 <- R29
00000628: mem := mem with [#0 + 8, el]:u64 <- R30
0000062c: R31 := #0
00000632: R29 := R31
00000639: R29 := mem[R31, el]:u64
0000063e: R30 := mem[R31 + 8, el]:u64
00000642: R31 := R31 + 0x10
00000647: call R30 with noreturn

00000bd3: sub _init(_init_result)
00000bec: _init_result :: out u32 = low:32[R0]

00000b21:
00000b27: #6 := R31 - 0x10
00000b2d: mem := mem with [#6, el]:u64 <- R29
00000b33: mem := mem with [#6 + 8, el]:u64 <- R30
00000b37: R31 := #6
00000b3d: R29 := R31
00000b42: R30 := 0x5C8
00000b44: call @call_weak_fn with return %00000b46

00000b46:
00000b4b: R29 := mem[R31, el]:u64
00000b50: R30 := mem[R31 + 8, el]:u64
00000b54: R31 := R31 + 0x10
00000b59: call R30 with noreturn

00000bd4: sub _start(_start_result)
00000bed: _start_result :: out u32 = low:32[R0]

00000783:
00000788: R29 := 0
0000078d: R30 := 0
00000793: R5 := R0
0000079a: R1 := mem[R31, el]:u64
000007a0: R2 := R31 + 8
000007a6: R6 := R31
000007ab: R0 := 0x10000
000007b2: R0 := mem[R0 + 0xFF0, el]:u64
000007b7: R3 := 0
000007bc: R4 := 0
000007c1: R30 := 0x670
000007c4: call @__libc_start_main with return %000007c6

000007c6:
000007c9: R30 := 0x674
000007cc: call @abort with return %00000bd5

00000bd5:
00000bd6: call @call_weak_fn with noreturn

00000bd7: sub abort()


000007ca:
00000a9e: R16 := 0x10000
00000aa5: R17 := mem[R16 + 0xFC8, el]:u64
00000aab: R16 := R16 + 0xFC8
00000ab0: call R17 with noreturn

00000bd8: sub call_weak_fn(call_weak_fn_result)
00000bee: call_weak_fn_result :: out u32 = low:32[R0]

000007ce:
000007d1: R0 := 0x10000
000007d8: R0 := mem[R0 + 0xFE8, el]:u64
000007de: when R0 = 0 goto %000007dc
00000bd9: goto %00000994

000007dc:
000007e4: call R30 with noreturn

00000994:
00000997: goto @__gmon_start__

00000995:
00000a88: R16 := 0x10000
00000a8f: R17 := mem[R16 + 0xFC0, el]:u64
00000a95: R16 := R16 + 0xFC0
00000a9a: call R17 with noreturn

00000bda: sub deregister_tm_clones(deregister_tm_clones_result)
00000bef: deregister_tm_clones_result :: out u32 = low:32[R0]

000007ea:
000007ed: R0 := 0x11000
000007f3: R0 := R0 + 0x10
000007f8: R1 := 0x11000
000007fe: R1 := R1 + 0x10
00000804: #1 := ~R0
00000809: #2 := R1 + ~R0
0000080f: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000815: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000819: ZF := #2 + 1 = 0
0000081d: NF := 63:63[#2 + 1]
00000823: when ZF goto %00000821
00000bdb: goto %00000976

00000976:
00000979: R1 := 0x10000
00000980: R1 := mem[R1 + 0xFD8, el]:u64
00000985: when R1 = 0 goto %00000821
00000bdc: goto %00000989

00000821:
00000829: call R30 with noreturn

00000989:
0000098d: R16 := R1
00000992: call R16 with noreturn

00000bdd: sub fork(fork_result)
00000bf0: fork_result :: out u32 = low:32[R0]

000008f5:
00000a72: R16 := 0x10000
00000a79: R17 := mem[R16 + 0xFB8, el]:u64
00000a7f: R16 := R16 + 0xFB8
00000a84: call R17 with noreturn

00000bde: sub frame_dummy(frame_dummy_result)
00000bf1: frame_dummy_result :: out u32 = low:32[R0]

000008c1:
000008c3: call @register_tm_clones with noreturn

00000bdf: sub main(main_argc, main_argv, main_result)
00000bf2: main_argc :: in u32 = low:32[R0]
00000bf3: main_argv :: in out u64 = R1
00000bf4: main_result :: out u32 = low:32[R0]

000008c5:
000008c9: #4 := R31 - 0x30
000008cf: mem := mem with [#4, el]:u64 <- R29
000008d5: mem := mem with [#4 + 8, el]:u64 <- R30
000008d9: R31 := #4
000008df: R29 := R31
000008e7: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000008ef: mem := mem with [R31 + 0x10, el]:u64 <- R1
000008f4: R30 := 0x768
000008f7: call @fork with return %000008f9

000008f9:
000008ff: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000906: R0 := pad:64[mem[R31 + 0x2C, el]:u32]
0000090d: R29 := mem[R31, el]:u64
00000912: R30 := mem[R31 + 8, el]:u64
00000916: R31 := R31 + 0x30
0000091b: call R30 with noreturn

00000be0: sub register_tm_clones(register_tm_clones_result)
00000bf5: register_tm_clones_result :: out u32 = low:32[R0]

0000082b:
0000082e: R0 := 0x11000
00000834: R0 := R0 + 0x10
00000839: R1 := 0x11000
0000083f: R1 := R1 + 0x10
00000846: R1 := R1 + ~R0 + 1
0000084c: R2 := 0.63:63[R1]
00000853: R1 := R2 + (R1 ~>> 3)
00000859: R1 := extend:64[63:1[R1]]
0000085f: when R1 = 0 goto %0000085d
00000be1: goto %00000958

00000958:
0000095b: R2 := 0x10000
00000962: R2 := mem[R2 + 0xFF8, el]:u64
00000967: when R2 = 0 goto %0000085d
00000be2: goto %0000096b

0000085d:
00000865: call R30 with noreturn

0000096b:
0000096f: R16 := R2
00000974: call R16 with noreturn
