var {:extern} Gamma_R16: bool;
var {:extern} Gamma_R17: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} R16: bv64;
var {:extern} R17: bv64;
var {:extern} mem: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 4196376bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 4196376bv64) == 131073bv32);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure .L_400680();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load32_le(mem, 4196376bv64) == 131073bv32);
  free ensures (memory_load32_le(mem, 4196376bv64) == 131073bv32);

implementation .L_400680()
{
  var $load5: bv64;
  var Gamma_$load5: bool;
  $.L_400680$__0__$UfNyH7KvQiam2F847lIf0g:
    assume {:captureState "$.L_400680$__0__$UfNyH7KvQiam2F847lIf0g"} true;
    R16, Gamma_R16 := 4321280bv64, true;
    call rely();
    $load5, Gamma_$load5 := memory_load64_le(mem, bvadd64(R16, 4040bv64)), (gamma_load64(Gamma_mem, bvadd64(R16, 4040bv64)) || L(mem, bvadd64(R16, 4040bv64)));
    R17, Gamma_R17 := $load5, Gamma_$load5;
    R16, Gamma_R16 := bvadd64(R16, 4040bv64), Gamma_R16;
    call fork();
    assume false;
}

procedure main();
  modifies Gamma_R16, Gamma_R17, Gamma_mem, R16, R17, mem;
  free requires (memory_load64_le(mem, 4325376bv64) == 0bv64);
  free requires (memory_load64_le(mem, 4325384bv64) == 0bv64);
  free requires (memory_load32_le(mem, 4196376bv64) == 131073bv32);
  free ensures (memory_load32_le(mem, 4196376bv64) == 131073bv32);

implementation main()
{
  $main$__0__$YmNxI7RsS_6TZy3HTKzvWg:
    assume {:captureState "$main$__0__$YmNxI7RsS_6TZy3HTKzvWg"} true;
    call .L_400680();
    assume false;
}

procedure fork();
  free requires (memory_load32_le(mem, 4196376bv64) == 131073bv32);
  free ensures (memory_load32_le(mem, 4196376bv64) == 131073bv32);

