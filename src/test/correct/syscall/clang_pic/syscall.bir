00000c25: program
00000c0e: sub __cxa_finalize(__cxa_finalize_result)
00000c26: __cxa_finalize_result :: out u32 = low:32[R0]

00000990:
00000a98: R16 := 0x11000
00000a9f: R17 := mem[R16 + 8, el]:u64
00000aa5: R16 := R16 + 8
00000aaa: call R17 with noreturn

00000c0f: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c27: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000896:
0000089a: #3 := R31 - 0x20
000008a0: mem := mem with [#3, el]:u64 <- R29
000008a6: mem := mem with [#3 + 8, el]:u64 <- R30
000008aa: R31 := #3
000008b0: R29 := R31
000008b8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008bd: R19 := 0x11000
000008c4: R0 := pad:64[mem[R19 + 0x38]]
000008cb: when 31:0[R0] <> 0 goto %000008c9
00000c10: goto %00000959

00000959:
0000095c: R0 := 0x10000
00000963: R0 := mem[R0 + 0xFC8, el]:u64
00000969: when R0 = 0 goto %00000967
00000c11: goto %00000980

00000980:
00000983: R0 := 0x11000
0000098a: R0 := mem[R0 + 0x30, el]:u64
0000098f: R30 := 0x730
00000992: call @__cxa_finalize with return %00000967

00000967:
0000096f: R30 := 0x734
00000971: call @deregister_tm_clones with return %00000973

00000973:
00000976: R0 := 1
0000097e: mem := mem with [R19 + 0x38] <- 7:0[R0]
00000c12: goto %000008c9

000008c9:
000008d3: R19 := mem[R31 + 0x10, el]:u64
000008da: R29 := mem[R31, el]:u64
000008df: R30 := mem[R31 + 8, el]:u64
000008e3: R31 := R31 + 0x20
000008e8: call R30 with noreturn

00000c13: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c28: __libc_start_main_main :: in u64 = R0
00000c29: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c2a: __libc_start_main_arg3 :: in out u64 = R2
00000c2b: __libc_start_main_auxv :: in out u64 = R3
00000c2c: __libc_start_main_result :: out u32 = low:32[R0]

000007ef:
00000a82: R16 := 0x11000
00000a89: R17 := mem[R16, el]:u64
00000a8f: R16 := R16
00000a94: call R17 with noreturn

00000c14: sub _fini(_fini_result)
00000c2d: _fini_result :: out u32 = low:32[R0]

00000637:
0000063d: #0 := R31 - 0x10
00000643: mem := mem with [#0, el]:u64 <- R29
00000649: mem := mem with [#0 + 8, el]:u64 <- R30
0000064d: R31 := #0
00000653: R29 := R31
0000065a: R29 := mem[R31, el]:u64
0000065f: R30 := mem[R31 + 8, el]:u64
00000663: R31 := R31 + 0x10
00000668: call R30 with noreturn

00000c15: sub _init(_init_result)
00000c2e: _init_result :: out u32 = low:32[R0]

00000b60:
00000b66: #7 := R31 - 0x10
00000b6c: mem := mem with [#7, el]:u64 <- R29
00000b72: mem := mem with [#7 + 8, el]:u64 <- R30
00000b76: R31 := #7
00000b7c: R29 := R31
00000b81: R30 := 0x5C8
00000b83: call @call_weak_fn with return %00000b85

00000b85:
00000b8a: R29 := mem[R31, el]:u64
00000b8f: R30 := mem[R31 + 8, el]:u64
00000b93: R31 := R31 + 0x10
00000b98: call R30 with noreturn

00000c16: sub _start(_start_result)
00000c2f: _start_result :: out u32 = low:32[R0]

000007b0:
000007b5: R29 := 0
000007ba: R30 := 0
000007c0: R5 := R0
000007c7: R1 := mem[R31, el]:u64
000007cd: R2 := R31 + 8
000007d3: R6 := R31
000007d8: R0 := 0x10000
000007df: R0 := mem[R0 + 0xFD8, el]:u64
000007e4: R3 := 0
000007e9: R4 := 0
000007ee: R30 := 0x670
000007f1: call @__libc_start_main with return %000007f3

000007f3:
000007f6: R30 := 0x674
000007f9: call @abort with return %00000c17

00000c17:
00000c18: call @call_weak_fn with noreturn

00000c19: sub abort()


000007f7:
00000ada: R16 := 0x11000
00000ae1: R17 := mem[R16 + 0x20, el]:u64
00000ae7: R16 := R16 + 0x20
00000aec: call R17 with noreturn

00000c1a: sub call_weak_fn(call_weak_fn_result)
00000c30: call_weak_fn_result :: out u32 = low:32[R0]

000007fb:
000007fe: R0 := 0x10000
00000805: R0 := mem[R0 + 0xFD0, el]:u64
0000080b: when R0 = 0 goto %00000809
00000c1b: goto %000009d0

00000809:
00000811: call R30 with noreturn

000009d0:
000009d3: goto @__gmon_start__

000009d1:
00000ac4: R16 := 0x11000
00000acb: R17 := mem[R16 + 0x18, el]:u64
00000ad1: R16 := R16 + 0x18
00000ad6: call R17 with noreturn

00000c1c: sub deregister_tm_clones(deregister_tm_clones_result)
00000c31: deregister_tm_clones_result :: out u32 = low:32[R0]

00000817:
0000081a: R0 := 0x11000
00000820: R0 := R0 + 0x38
00000825: R1 := 0x11000
0000082b: R1 := R1 + 0x38
00000831: #1 := ~R0
00000836: #2 := R1 + ~R0
0000083c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000842: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000846: ZF := #2 + 1 = 0
0000084a: NF := 63:63[#2 + 1]
00000850: when ZF goto %0000084e
00000c1d: goto %000009b2

000009b2:
000009b5: R1 := 0x10000
000009bc: R1 := mem[R1 + 0xFC0, el]:u64
000009c1: when R1 = 0 goto %0000084e
00000c1e: goto %000009c5

0000084e:
00000856: call R30 with noreturn

000009c5:
000009c9: R16 := R1
000009ce: call R16 with noreturn

00000c1f: sub fork(fork_result)
00000c32: fork_result :: out u32 = low:32[R0]

0000092b:
00000aae: R16 := 0x11000
00000ab5: R17 := mem[R16 + 0x10, el]:u64
00000abb: R16 := R16 + 0x10
00000ac0: call R17 with noreturn

00000c20: sub frame_dummy(frame_dummy_result)
00000c33: frame_dummy_result :: out u32 = low:32[R0]

000008ee:
000008f0: call @register_tm_clones with noreturn

00000c21: sub main(main_argc, main_argv, main_result)
00000c34: main_argc :: in u32 = low:32[R0]
00000c35: main_argv :: in out u64 = R1
00000c36: main_result :: out u32 = low:32[R0]

000008f2:
000008f6: R31 := R31 - 0x30
000008fc: #4 := R31 + 0x20
00000902: mem := mem with [#4, el]:u64 <- R29
00000908: mem := mem with [#4 + 8, el]:u64 <- R30
0000090e: R29 := R31 + 0x20
00000915: mem := mem with [R29 - 4, el]:u32 <- 0
0000091d: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
00000925: mem := mem with [R31 + 0x10, el]:u64 <- R1
0000092a: R30 := 0x770
0000092d: call @fork with return %0000092f

0000092f:
00000935: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
0000093c: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000942: #5 := R31 + 0x20
00000947: R29 := mem[#5, el]:u64
0000094c: R30 := mem[#5 + 8, el]:u64
00000952: R31 := R31 + 0x30
00000957: call R30 with noreturn

00000c22: sub register_tm_clones(register_tm_clones_result)
00000c37: register_tm_clones_result :: out u32 = low:32[R0]

00000858:
0000085b: R0 := 0x11000
00000861: R0 := R0 + 0x38
00000866: R1 := 0x11000
0000086c: R1 := R1 + 0x38
00000873: R1 := R1 + ~R0 + 1
00000879: R2 := 0.63:63[R1]
00000880: R1 := R2 + (R1 ~>> 3)
00000886: R1 := extend:64[63:1[R1]]
0000088c: when R1 = 0 goto %0000088a
00000c23: goto %00000994

00000994:
00000997: R2 := 0x10000
0000099e: R2 := mem[R2 + 0xFE0, el]:u64
000009a3: when R2 = 0 goto %0000088a
00000c24: goto %000009a7

0000088a:
00000892: call R30 with noreturn

000009a7:
000009ab: R16 := R2
000009b0: call R16 with noreturn
