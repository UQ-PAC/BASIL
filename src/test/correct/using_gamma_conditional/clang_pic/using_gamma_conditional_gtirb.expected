var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69684bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69688bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $z_addr) then true else (if (index == $x_addr) then (memory_load32_le(memory, $z_addr) == 0bv32) else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (old(gamma_load32(Gamma_mem, $x_addr)) ==> gamma_load32(Gamma_mem, $x_addr));
  free ensures (memory_load8_le(mem, 1964bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1965bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1966bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1967bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69064bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (old(gamma_load32(Gamma_mem, $x_addr)) ==> gamma_load32(Gamma_mem, $x_addr));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert (gamma_load32(Gamma_mem, $x_addr) ==> gamma_load32(Gamma_mem, $x_addr));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

implementation {:extern} guarantee_reflexive()
{
  assert ((memory_load32_le(mem, $x_addr) == memory_load32_le(mem, $x_addr)) && (memory_load32_le(mem, $z_addr) == memory_load32_le(mem, $z_addr)));
}

procedure main(R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  requires (gamma_load32(Gamma_mem, $x_addr) == true);
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load8_le(mem, 1964bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1965bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1966bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1967bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1872bv64);
  free requires (memory_load64_le(mem, 69064bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 1876bv64);
  free ensures (memory_load8_le(mem, 1964bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1965bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1966bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1967bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69576bv64) == 69684bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1872bv64);
  free ensures (memory_load64_le(mem, 69064bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 1876bv64);

implementation main(R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R31_out: bv64, Gamma_R31_out: bool, R8_out: bv64, Gamma_R8_out: bool)
{
  var Gamma_R0_1: bool;
  var Gamma_R8_11: bool;
  var Gamma_R8_13: bool;
  var Gamma_R8_2: bool;
  var Gamma_R8_3: bool;
  var Gamma_R8_9: bool;
  var R0_1: bv64;
  var R8_11: bv64;
  var R8_13: bv64;
  var R8_2: bv64;
  var R8_3: bv32;
  var R8_9: bv64;
  $main$__0__$WvserH3~TZmxgcnn~OP60A:
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    call rely();
    R8_2, Gamma_R8_2 := memory_load64_le(mem, 69576bv64), (gamma_load64(Gamma_mem, 69576bv64) || L(mem, 69576bv64));
    call rely();
    R8_3, Gamma_R8_3 := memory_load32_le(mem, R8_2), (gamma_load32(Gamma_mem, R8_2) || L(mem, R8_2));
    assert Gamma_R8_3;
    goto $main$__0__$WvserH3~TZmxgcnn~OP60A$__0, $main$__0__$WvserH3~TZmxgcnn~OP60A$__1;
  $main$__0__$WvserH3~TZmxgcnn~OP60A$__1:
    assume (R8_3 == 0bv32);
    goto $main$__0__$WvserH3~TZmxgcnn~OP60A$__1_phi_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__3__$GuPi8JNBSIam340giZcdIw_phi_back_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__3__$GuPi8JNBSIam340giZcdIw, $main$__0__$WvserH3~TZmxgcnn~OP60A$__1_phi_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__1__$G0q4wFaXSHCrjXIW8xOBDQ_phi_back_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__1__$G0q4wFaXSHCrjXIW8xOBDQ;
  $main$__0__$WvserH3~TZmxgcnn~OP60A$__1_phi_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__1__$G0q4wFaXSHCrjXIW8xOBDQ_phi_back_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__1__$G0q4wFaXSHCrjXIW8xOBDQ:
    R8_9, Gamma_R8_9 := 1bv64, true;
    assert Gamma_R8_9;
    goto $main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__1__$G0q4wFaXSHCrjXIW8xOBDQ;
  $main$__0__$WvserH3~TZmxgcnn~OP60A$__1_phi_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__3__$GuPi8JNBSIam340giZcdIw_phi_back_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__3__$GuPi8JNBSIam340giZcdIw:
    R8_11, Gamma_R8_11 := 1bv64, true;
    assert Gamma_R8_11;
    goto $main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__3__$GuPi8JNBSIam340giZcdIw;
  $main$__0__$WvserH3~TZmxgcnn~OP60A$__0:
    assume (!(R8_3 == 0bv32));
    goto $main$__0__$WvserH3~TZmxgcnn~OP60A$__0_phi_back_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__1__$G0q4wFaXSHCrjXIW8xOBDQ, $main$__0__$WvserH3~TZmxgcnn~OP60A$__0_phi_back_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__3__$GuPi8JNBSIam340giZcdIw;
  $main$__0__$WvserH3~TZmxgcnn~OP60A$__0_phi_back_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__3__$GuPi8JNBSIam340giZcdIw:
    R8_11, Gamma_R8_11 := 0bv64, true;
    assert Gamma_R8_11;
    goto $main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__3__$GuPi8JNBSIam340giZcdIw;
  $main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__3__$GuPi8JNBSIam340giZcdIw:
    assume (R8_11[1:0] == 1bv1);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 1bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    R8_13, Gamma_R8_13 := 1bv64, true;
    goto $main$__4__$5nmLw0UdTXyYfW~alw3bBw;
  $main$__0__$WvserH3~TZmxgcnn~OP60A$__0_phi_back_$main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__1__$G0q4wFaXSHCrjXIW8xOBDQ:
    R8_9, Gamma_R8_9 := 0bv64, true;
    assert Gamma_R8_9;
    goto $main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__1__$G0q4wFaXSHCrjXIW8xOBDQ;
  $main$__0__$WvserH3~TZmxgcnn~OP60A_goto_$main$__1__$G0q4wFaXSHCrjXIW8xOBDQ:
    assume (!(R8_9[1:0] == 1bv1));
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), true);
    R8_13, Gamma_R8_13 := R8_9, Gamma_R8_9;
    goto $main$__4__$5nmLw0UdTXyYfW~alw3bBw;
  $main$__4__$5nmLw0UdTXyYfW~alw3bBw:
    R0_1, Gamma_R0_1 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31_in, 18446744073709551612bv64))), gamma_load32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64));
    goto main_basil_return;
  main_basil_return:
    R0_out, R31_out, R8_out := R0_1, R31_in, R8_13;
    Gamma_R0_out, Gamma_R31_out, Gamma_R8_out := Gamma_R0_1, Gamma_R31_in, Gamma_R8_13;
    return;
}

