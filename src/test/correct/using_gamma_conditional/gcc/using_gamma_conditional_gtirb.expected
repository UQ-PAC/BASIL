var {:extern} $CF: bv1;
var {:extern} $Gamma_CF: bool;
var {:extern} $Gamma_NF: bool;
var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_VF: bool;
var {:extern} $Gamma_ZF: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $NF: bv1;
var {:extern} $R0: bv64;
var {:extern} $VF: bv1;
var {:extern} $ZF: bv1;
var {:extern} $mem: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69652bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69656bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  (if (#index == $z_addr) then true else (if (#index == $x_addr) then (memory_load32_le(#mem$in, $z_addr) == 0bv32) else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures (forall #i: bv64::  ((($mem[#i] == old($mem[#i])) ==> ($Gamma_mem[#i] == old($Gamma_mem[#i])))));
  ensures (old(gamma_load32($Gamma_mem, $x_addr)) ==> gamma_load32($Gamma_mem, $x_addr));
  free ensures (memory_load32_le($mem, 1868bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures (old(gamma_load32($Gamma_mem, $x_addr)) ==> gamma_load32($Gamma_mem, $x_addr));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

implementation {:extern} p$rely_reflexive()
{
  assert (gamma_load32($Gamma_mem, $x_addr) ==> gamma_load32($Gamma_mem, $x_addr));
}

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

implementation {:extern} p$guarantee_reflexive()
{
  assert ((memory_load32_le($mem, $x_addr) == memory_load32_le($mem, $x_addr)) && (memory_load32_le($mem, $z_addr) == memory_load32_le($mem, $z_addr)));
}

procedure p$main_1812();
  modifies $CF, $Gamma_CF, $Gamma_NF, $Gamma_R0, $Gamma_VF, $Gamma_ZF, $Gamma_mem, $NF, $R0, $VF, $ZF, $mem;
  requires (gamma_load32($Gamma_mem, $x_addr) == true);
  free requires (memory_load64_le($mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free requires (memory_load32_le($mem, 1868bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free requires (memory_load64_le($mem, 69640bv64) == 69640bv64);
  free ensures (memory_load32_le($mem, 1868bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69016bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69024bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69616bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69640bv64) == 69640bv64);

implementation p$main_1812()
{
  var #Cse0__5_6: bv32;
  var #Gamma_Cse0__5_6: bool;
  var #Gamma_load15: bool;
  var #load15: bv32;
  b#main_entry:
    assume {:captureState "main_entry (0Z93XS38RGCWcCuYAn4Wlg==)"} true;
    $R0, $Gamma_R0 := 69632bv64, true;
    $R0, $Gamma_R0 := bvadd64($R0, 20bv64), $Gamma_R0;
    call p$rely();
    #load15, #Gamma_load15 := memory_load32_le($mem, $R0), (gamma_load32($Gamma_mem, $R0) || L($mem, $R0));
    $R0, $Gamma_R0 := zero_extend32_32(#load15), #Gamma_load15;
    #Cse0__5_6, #Gamma_Cse0__5_6 := bvadd32($R0[32:0], 0bv32), $Gamma_R0;
    $VF, $Gamma_VF := bvnot1(bvcomp32(#Cse0__5_6, #Cse0__5_6)), #Gamma_Cse0__5_6;
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_6), bvadd33(zero_extend1_32($R0[32:0]), 4294967296bv33))), ($Gamma_R0 && #Gamma_Cse0__5_6);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_6, 0bv32), #Gamma_Cse0__5_6;
    $NF, $Gamma_NF := #Cse0__5_6[32:31], #Gamma_Cse0__5_6;
    assert $Gamma_ZF;
    goto b#main_7, b#main_11;
  b#main_11:
    assume {:captureState "main_11"} true;
    assume (!($ZF == 1bv1));
    $R0, $Gamma_R0 := 0bv64, true;
    goto b#main_9;
  b#main_9:
    assume {:captureState "main_9 (Nfpd5K+xSA6Q+xrcC34K8w==)"} true;
    goto b#main_3;
  b#main_7:
    assume {:captureState "main_7"} true;
    assume ($ZF == 1bv1);
    $R0, $Gamma_R0 := 1bv64, true;
    goto b#main_5;
  b#main_5:
    assume {:captureState "main_5 (dFUCtpaoQFSZ3wSzJ5ELFA==)"} true;
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (R27N5eQARYq8nJdevhUAeQ==)"} true;
    return;
}

