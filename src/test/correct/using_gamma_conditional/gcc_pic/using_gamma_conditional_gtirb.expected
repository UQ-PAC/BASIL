var {:extern} Gamma_mem: [bv64]bool;
var {:extern} mem: [bv64]bv8;
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69652bv64);
const {:extern} $z_addr: bv64;
axiom ($z_addr == 69656bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if (index == $z_addr) then true else (if (index == $x_addr) then (memory_load32_le(memory, $z_addr) == 0bv32) else false))
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures (old(gamma_load32(Gamma_mem, $x_addr)) ==> gamma_load32(Gamma_mem, $x_addr));
  free ensures (memory_load8_le(mem, 1932bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1933bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1934bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1935bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1872bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (old(gamma_load32(Gamma_mem, $x_addr)) ==> gamma_load32(Gamma_mem, $x_addr));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

implementation {:extern} rely_reflexive()
{
  assert (gamma_load32(Gamma_mem, $x_addr) ==> gamma_load32(Gamma_mem, $x_addr));
}

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

implementation {:extern} guarantee_reflexive()
{
  assert ((memory_load32_le(mem, $x_addr) == memory_load32_le(mem, $x_addr)) && (memory_load32_le(mem, $z_addr) == memory_load32_le(mem, $z_addr)));
}

procedure main(R0_in: bv64, Gamma_R0_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool);
  modifies Gamma_mem, mem;
  requires (gamma_load32(Gamma_mem, $x_addr) == true);
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load8_le(mem, 1932bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1933bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1934bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1935bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free requires (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 69652bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1872bv64);
  free ensures (memory_load8_le(mem, 1932bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1933bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1934bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1935bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load64_le(mem, 69616bv64) == 1876bv64);
  free ensures (memory_load64_le(mem, 69016bv64) == 1792bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69652bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1872bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool)
{
  var Gamma_R0_3: bool;
  var Gamma_R0_4: bool;
  var Gamma_R0_8: bool;
  var R0_3: bv64;
  var R0_4: bv32;
  var R0_8: bv64;
  $main$__0__$0opbVr6FSKqk~SauZFq~bg:
    call rely();
    R0_3, Gamma_R0_3 := memory_load64_le(mem, 69600bv64), (gamma_load64(Gamma_mem, 69600bv64) || L(mem, 69600bv64));
    call rely();
    R0_4, Gamma_R0_4 := memory_load32_le(mem, R0_3), (gamma_load32(Gamma_mem, R0_3) || L(mem, R0_3));
    assert Gamma_R0_4;
    goto $main$__0__$0opbVr6FSKqk~SauZFq~bg_goto_$main$__2__$PU15ptK8QmqsodwKTutr4A, $main$__0__$0opbVr6FSKqk~SauZFq~bg_goto_$main$__1__$MkdgQZmORkuq9AzG1tEbvg;
  $main$__0__$0opbVr6FSKqk~SauZFq~bg_goto_$main$__1__$MkdgQZmORkuq9AzG1tEbvg:
    assume (!(R0_4 == 0bv32));
    R0_8, Gamma_R0_8 := 0bv64, true;
    goto $main$__3__$rmk1cd0ERD~sxbsj_Z3~5Q;
  $main$__0__$0opbVr6FSKqk~SauZFq~bg_goto_$main$__2__$PU15ptK8QmqsodwKTutr4A:
    assume (R0_4 == 0bv32);
    R0_8, Gamma_R0_8 := 1bv64, true;
    goto $main$__3__$rmk1cd0ERD~sxbsj_Z3~5Q;
  $main$__3__$rmk1cd0ERD~sxbsj_Z3~5Q:
    goto main_basil_return;
  main_basil_return:
    R0_out := R0_8;
    Gamma_R0_out := Gamma_R0_8;
    return;
}

