00000c2c: program
00000c15: sub __cxa_finalize(__cxa_finalize_result)
00000c2d: __cxa_finalize_result :: out u32 = low:32[R0]

000009b9:
00000ab1: R16 := 0x11000
00000ab8: R17 := mem[R16 + 8, el]:u64
00000abe: R16 := R16 + 8
00000ac3: call R17 with noreturn

00000c16: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000c2e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000008a9:
000008ad: #3 := R31 - 0x20
000008b3: mem := mem with [#3, el]:u64 <- R29
000008b9: mem := mem with [#3 + 8, el]:u64 <- R30
000008bd: R31 := #3
000008c3: R29 := R31
000008cb: mem := mem with [R31 + 0x10, el]:u64 <- R19
000008d0: R19 := 0x11000
000008d7: R0 := pad:64[mem[R19 + 0x30]]
000008de: when 31:0[R0] <> 0 goto %000008dc
00000c17: goto %00000982

00000982:
00000985: R0 := 0x10000
0000098c: R0 := mem[R0 + 0xFC8, el]:u64
00000992: when R0 = 0 goto %00000990
00000c18: goto %000009a9

000009a9:
000009ac: R0 := 0x11000
000009b3: R0 := mem[R0 + 0x28, el]:u64
000009b8: R30 := 0x6F0
000009bb: call @__cxa_finalize with return %00000990

00000990:
00000998: R30 := 0x6F4
0000099a: call @deregister_tm_clones with return %0000099c

0000099c:
0000099f: R0 := 1
000009a7: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000c19: goto %000008dc

000008dc:
000008e6: R19 := mem[R31 + 0x10, el]:u64
000008ed: R29 := mem[R31, el]:u64
000008f2: R30 := mem[R31 + 8, el]:u64
000008f6: R31 := R31 + 0x20
000008fb: call R30 with noreturn

00000c1a: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000c2f: __libc_start_main_main :: in u64 = R0
00000c30: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000c31: __libc_start_main_arg3 :: in out u64 = R2
00000c32: __libc_start_main_auxv :: in out u64 = R3
00000c33: __libc_start_main_result :: out u32 = low:32[R0]

00000802:
00000a9b: R16 := 0x11000
00000aa2: R17 := mem[R16, el]:u64
00000aa8: R16 := R16
00000aad: call R17 with noreturn

00000c1b: sub _fini(_fini_result)
00000c34: _fini_result :: out u32 = low:32[R0]

0000063a:
00000640: #0 := R31 - 0x10
00000646: mem := mem with [#0, el]:u64 <- R29
0000064c: mem := mem with [#0 + 8, el]:u64 <- R30
00000650: R31 := #0
00000656: R29 := R31
0000065d: R29 := mem[R31, el]:u64
00000662: R30 := mem[R31 + 8, el]:u64
00000666: R31 := R31 + 0x10
0000066b: call R30 with noreturn

00000c1c: sub _init(_init_result)
00000c35: _init_result :: out u32 = low:32[R0]

00000b67:
00000b6d: #6 := R31 - 0x10
00000b73: mem := mem with [#6, el]:u64 <- R29
00000b79: mem := mem with [#6 + 8, el]:u64 <- R30
00000b7d: R31 := #6
00000b83: R29 := R31
00000b88: R30 := 0x590
00000b8a: call @call_weak_fn with return %00000b8c

00000b8c:
00000b91: R29 := mem[R31, el]:u64
00000b96: R30 := mem[R31 + 8, el]:u64
00000b9a: R31 := R31 + 0x10
00000b9f: call R30 with noreturn

00000c1d: sub _start(_start_result)
00000c36: _start_result :: out u32 = low:32[R0]

000007c3:
000007c8: R29 := 0
000007cd: R30 := 0
000007d3: R5 := R0
000007da: R1 := mem[R31, el]:u64
000007e0: R2 := R31 + 8
000007e6: R6 := R31
000007eb: R0 := 0x10000
000007f2: R0 := mem[R0 + 0xFD8, el]:u64
000007f7: R3 := 0
000007fc: R4 := 0
00000801: R30 := 0x630
00000804: call @__libc_start_main with return %00000806

00000806:
00000809: R30 := 0x634
0000080c: call @abort with return %00000c1e

00000c1e:
00000c1f: call @call_weak_fn with noreturn

00000c20: sub abort()


0000080a:
00000add: R16 := 0x11000
00000ae4: R17 := mem[R16 + 0x18, el]:u64
00000aea: R16 := R16 + 0x18
00000aef: call R17 with noreturn

00000c21: sub call_weak_fn(call_weak_fn_result)
00000c37: call_weak_fn_result :: out u32 = low:32[R0]

0000080e:
00000811: R0 := 0x10000
00000818: R0 := mem[R0 + 0xFD0, el]:u64
0000081e: when R0 = 0 goto %0000081c
00000c22: goto %000009f9

0000081c:
00000824: call R30 with noreturn

000009f9:
000009fc: goto @__gmon_start__

000009fa:
00000ac7: R16 := 0x11000
00000ace: R17 := mem[R16 + 0x10, el]:u64
00000ad4: R16 := R16 + 0x10
00000ad9: call R17 with noreturn

00000c23: sub deregister_tm_clones(deregister_tm_clones_result)
00000c38: deregister_tm_clones_result :: out u32 = low:32[R0]

0000082a:
0000082d: R0 := 0x11000
00000833: R0 := R0 + 0x30
00000838: R1 := 0x11000
0000083e: R1 := R1 + 0x30
00000844: #1 := ~R0
00000849: #2 := R1 + ~R0
0000084f: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000855: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000859: ZF := #2 + 1 = 0
0000085d: NF := 63:63[#2 + 1]
00000863: when ZF goto %00000861
00000c24: goto %000009db

000009db:
000009de: R1 := 0x10000
000009e5: R1 := mem[R1 + 0xFC0, el]:u64
000009ea: when R1 = 0 goto %00000861
00000c25: goto %000009ee

00000861:
00000869: call R30 with noreturn

000009ee:
000009f2: R16 := R1
000009f7: call R16 with noreturn

00000c26: sub frame_dummy(frame_dummy_result)
00000c39: frame_dummy_result :: out u32 = low:32[R0]

00000901:
00000903: call @register_tm_clones with noreturn

00000c27: sub main(main_argc, main_argv, main_result)
00000c3a: main_argc :: in u32 = low:32[R0]
00000c3b: main_argv :: in out u64 = R1
00000c3c: main_result :: out u32 = low:32[R0]

00000905:
00000909: R31 := R31 - 0x10
00000910: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000915: R8 := 0x11000
0000091c: R8 := pad:64[mem[R8 + 0x34, el]:u32]
00000922: #4 := 31:0[R8] - 1
00000927: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] + 0
0000092c: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] - 0x100000000
00000930: ZF := #4 + 1 = 0
00000934: NF := 31:31[#4 + 1]
00000938: R8 := pad:64[#4 + 1]
00000944: when ZF <> 1 goto %0000093d
00000945: goto %00000940

00000940:
00000941: R8 := 1
00000947: goto %00000943

0000093d:
0000093e: R8 := 0
00000946: goto %00000943

00000943:
0000094d: when 0:0[R8] goto %0000094b
00000c28: goto %00000973

0000094b:
00000953: R8 := 1
0000095b: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
00000960: goto %0000095e

00000973:
00000976: goto %00000974

00000974:
0000097c: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000980: goto %0000095e

0000095e:
00000966: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000096c: R31 := R31 + 0x10
00000971: call R30 with noreturn

00000c29: sub register_tm_clones(register_tm_clones_result)
00000c3d: register_tm_clones_result :: out u32 = low:32[R0]

0000086b:
0000086e: R0 := 0x11000
00000874: R0 := R0 + 0x30
00000879: R1 := 0x11000
0000087f: R1 := R1 + 0x30
00000886: R1 := R1 + ~R0 + 1
0000088c: R2 := 0.63:63[R1]
00000893: R1 := R2 + (R1 ~>> 3)
00000899: R1 := extend:64[63:1[R1]]
0000089f: when R1 = 0 goto %0000089d
00000c2a: goto %000009bd

000009bd:
000009c0: R2 := 0x10000
000009c7: R2 := mem[R2 + 0xFE0, el]:u64
000009cc: when R2 = 0 goto %0000089d
00000c2b: goto %000009d0

0000089d:
000008a5: call R30 with noreturn

000009d0:
000009d4: R16 := R2
000009d9: call R16 with noreturn
