000005bd: program
0000058b: sub __cxa_finalize(__cxa_finalize_result)
000005be: __cxa_finalize_result :: out u32 = low:32[R0]

0000033d:
00000435: R16 := 0x10000
0000043c: R17 := mem[R16 + 0xFB8, el]:u64
00000442: R16 := R16 + 0xFB8
00000447: call R17 with noreturn

0000058c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005bf: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000272:
00000276: #3 := R31 - 0x20
0000027c: mem := mem with [#3, el]:u64 <- R29
00000282: mem := mem with [#3 + 8, el]:u64 <- R30
00000286: R31 := #3
0000028c: R29 := R31
00000294: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000299: R19 := 0x11000
000002a0: R0 := pad:64[mem[R19 + 0x10]]
000002a7: when 31:0[R0] <> 0 goto %000002a5
000005b3: goto %00000306

00000306:
00000309: R0 := 0x10000
00000310: R0 := mem[R0 + 0xFE0, el]:u64
00000316: when R0 = 0 goto %00000314
000005b4: goto %0000032d

0000032d:
00000330: R0 := 0x11000
00000337: R0 := mem[R0 + 8, el]:u64
0000033c: R30 := 0x6F0
0000033f: call @__cxa_finalize with return %00000314

00000314:
0000031c: R30 := 0x6F4
0000031e: call @deregister_tm_clones with return %00000320

00000320:
00000323: R0 := 1
0000032b: mem := mem with [R19 + 0x10] <- 7:0[R0]
000005b5: goto %000002a5

000002a5:
000002af: R19 := mem[R31 + 0x10, el]:u64
000002b6: R29 := mem[R31, el]:u64
000002bb: R30 := mem[R31 + 8, el]:u64
000002bf: R31 := R31 + 0x20
000002c4: call R30 with noreturn

00000590: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005c0: __libc_start_main_main :: in u64 = R0
000005c1: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005c2: __libc_start_main_arg3 :: in out u64 = R2
000005c3: __libc_start_main_auxv :: in out u64 = R3
000005c4: __libc_start_main_result :: out u32 = low:32[R0]

000001cb:
0000041f: R16 := 0x10000
00000426: R17 := mem[R16 + 0xFB0, el]:u64
0000042c: R16 := R16 + 0xFB0
00000431: call R17 with noreturn

00000591: sub _fini(_fini_result)
000005c5: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000592: sub _init(_init_result)
000005c6: _init_result :: out u32 = low:32[R0]

000004e4:
000004ea: #5 := R31 - 0x10
000004f0: mem := mem with [#5, el]:u64 <- R29
000004f6: mem := mem with [#5 + 8, el]:u64 <- R30
000004fa: R31 := #5
00000500: R29 := R31
00000505: R30 := 0x590
00000507: call @call_weak_fn with return %00000509

00000509:
0000050e: R29 := mem[R31, el]:u64
00000513: R30 := mem[R31 + 8, el]:u64
00000517: R31 := R31 + 0x10
0000051c: call R30 with noreturn

00000593: sub _start(_start_result)
000005c7: _start_result :: out u32 = low:32[R0]

0000018c:
00000191: R29 := 0
00000196: R30 := 0
0000019c: R5 := R0
000001a3: R1 := mem[R31, el]:u64
000001a9: R2 := R31 + 8
000001af: R6 := R31
000001b4: R0 := 0x10000
000001bb: R0 := mem[R0 + 0xFF0, el]:u64
000001c0: R3 := 0
000001c5: R4 := 0
000001ca: R30 := 0x630
000001cd: call @__libc_start_main with return %000001cf

000001cf:
000001d2: R30 := 0x634
000001d5: call @abort with return %000005b6

000005b6:
000005b7: call @call_weak_fn with noreturn

00000596: sub abort()


000001d3:
00000461: R16 := 0x10000
00000468: R17 := mem[R16 + 0xFC8, el]:u64
0000046e: R16 := R16 + 0xFC8
00000473: call R17 with noreturn

00000597: sub call_weak_fn(call_weak_fn_result)
000005c8: call_weak_fn_result :: out u32 = low:32[R0]

000001d7:
000001da: R0 := 0x10000
000001e1: R0 := mem[R0 + 0xFE8, el]:u64
000001e7: when R0 = 0 goto %000001e5
000005b8: goto %0000037d

000001e5:
000001ed: call R30 with noreturn

0000037d:
00000380: goto @__gmon_start__

0000037e:
0000044b: R16 := 0x10000
00000452: R17 := mem[R16 + 0xFC0, el]:u64
00000458: R16 := R16 + 0xFC0
0000045d: call R17 with noreturn

00000599: sub deregister_tm_clones(deregister_tm_clones_result)
000005c9: deregister_tm_clones_result :: out u32 = low:32[R0]

000001f3:
000001f6: R0 := 0x11000
000001fc: R0 := R0 + 0x10
00000201: R1 := 0x11000
00000207: R1 := R1 + 0x10
0000020d: #1 := ~R0
00000212: #2 := R1 + ~R0
00000218: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000021e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000222: ZF := #2 + 1 = 0
00000226: NF := 63:63[#2 + 1]
0000022c: when ZF goto %0000022a
000005b9: goto %0000035f

0000035f:
00000362: R1 := 0x10000
00000369: R1 := mem[R1 + 0xFD8, el]:u64
0000036e: when R1 = 0 goto %0000022a
000005ba: goto %00000372

0000022a:
00000232: call R30 with noreturn

00000372:
00000376: R16 := R1
0000037b: call R16 with noreturn

0000059c: sub frame_dummy(frame_dummy_result)
000005ca: frame_dummy_result :: out u32 = low:32[R0]

000002ca:
000002cc: call @register_tm_clones with noreturn

0000059d: sub main(main_argc, main_argv, main_result)
000005cb: main_argc :: in u32 = low:32[R0]
000005cc: main_argv :: in out u64 = R1
000005cd: main_result :: out u32 = low:32[R0]

000002ce:
000002d2: R31 := R31 - 0x10
000002da: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000002df: R0 := 0x11000
000002e5: R0 := R0 + 0x18
000002ec: R1 := pad:64[mem[R31 + 0xC, el]:u32]
000002f4: mem := mem with [R0 + 4, el]:u32 <- 31:0[R1]
000002f9: R0 := 0
000002ff: R31 := R31 + 0x10
00000304: call R30 with noreturn

0000059e: sub register_tm_clones(register_tm_clones_result)
000005ce: register_tm_clones_result :: out u32 = low:32[R0]

00000234:
00000237: R0 := 0x11000
0000023d: R0 := R0 + 0x10
00000242: R1 := 0x11000
00000248: R1 := R1 + 0x10
0000024f: R1 := R1 + ~R0 + 1
00000255: R2 := 0.63:63[R1]
0000025c: R1 := R2 + (R1 ~>> 3)
00000262: R1 := extend:64[63:1[R1]]
00000268: when R1 = 0 goto %00000266
000005bb: goto %00000341

00000341:
00000344: R2 := 0x10000
0000034b: R2 := mem[R2 + 0xFF8, el]:u64
00000350: when R2 = 0 goto %00000266
000005bc: goto %00000354

00000266:
0000026e: call R30 with noreturn

00000354:
00000358: R16 := R2
0000035d: call R16 with noreturn
