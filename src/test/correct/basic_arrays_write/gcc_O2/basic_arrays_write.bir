000005e2: program
000005b0: sub __cxa_finalize(__cxa_finalize_result)
000005e3: __cxa_finalize_result :: out u32 = low:32[R0]

00000354:
0000044c: R16 := 0x10000
00000453: R17 := mem[R16 + 0xFB8, el]:u64
00000459: R16 := R16 + 0xFB8
0000045e: call R17 with noreturn

000005b1: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005e4: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c1:
000002c5: #3 := R31 - 0x20
000002cb: mem := mem with [#3, el]:u64 <- R29
000002d1: mem := mem with [#3 + 8, el]:u64 <- R30
000002d5: R31 := #3
000002db: R29 := R31
000002e3: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002e8: R19 := 0x11000
000002ef: R0 := pad:64[mem[R19 + 0x10]]
000002f6: when 31:0[R0] <> 0 goto %000002f4
000005d8: goto %0000031d

0000031d:
00000320: R0 := 0x10000
00000327: R0 := mem[R0 + 0xFE0, el]:u64
0000032d: when R0 = 0 goto %0000032b
000005d9: goto %00000344

00000344:
00000347: R0 := 0x11000
0000034e: R0 := mem[R0 + 8, el]:u64
00000353: R30 := 0x730
00000356: call @__cxa_finalize with return %0000032b

0000032b:
00000333: R30 := 0x734
00000335: call @deregister_tm_clones with return %00000337

00000337:
0000033a: R0 := 1
00000342: mem := mem with [R19 + 0x10] <- 7:0[R0]
000005da: goto %000002f4

000002f4:
000002fe: R19 := mem[R31 + 0x10, el]:u64
00000305: R29 := mem[R31, el]:u64
0000030a: R30 := mem[R31 + 8, el]:u64
0000030e: R31 := R31 + 0x20
00000313: call R30 with noreturn

000005b5: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005e5: __libc_start_main_main :: in u64 = R0
000005e6: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005e7: __libc_start_main_arg3 :: in out u64 = R2
000005e8: __libc_start_main_auxv :: in out u64 = R3
000005e9: __libc_start_main_result :: out u32 = low:32[R0]

0000021a:
00000436: R16 := 0x10000
0000043d: R17 := mem[R16 + 0xFB0, el]:u64
00000443: R16 := R16 + 0xFB0
00000448: call R17 with noreturn

000005b6: sub _fini(_fini_result)
000005ea: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005b7: sub _init(_init_result)
000005eb: _init_result :: out u32 = low:32[R0]

00000502:
00000508: #5 := R31 - 0x10
0000050e: mem := mem with [#5, el]:u64 <- R29
00000514: mem := mem with [#5 + 8, el]:u64 <- R30
00000518: R31 := #5
0000051e: R29 := R31
00000523: R30 := 0x590
00000525: call @call_weak_fn with return %00000527

00000527:
0000052c: R29 := mem[R31, el]:u64
00000531: R30 := mem[R31 + 8, el]:u64
00000535: R31 := R31 + 0x10
0000053a: call R30 with noreturn

000005b8: sub _start(_start_result)
000005ec: _start_result :: out u32 = low:32[R0]

000001db:
000001e0: R29 := 0
000001e5: R30 := 0
000001eb: R5 := R0
000001f2: R1 := mem[R31, el]:u64
000001f8: R2 := R31 + 8
000001fe: R6 := R31
00000203: R0 := 0x10000
0000020a: R0 := mem[R0 + 0xFF0, el]:u64
0000020f: R3 := 0
00000214: R4 := 0
00000219: R30 := 0x670
0000021c: call @__libc_start_main with return %0000021e

0000021e:
00000221: R30 := 0x674
00000224: call @abort with return %000005db

000005db:
000005dc: call @call_weak_fn with noreturn

000005bb: sub abort()


00000222:
00000478: R16 := 0x10000
0000047f: R17 := mem[R16 + 0xFC8, el]:u64
00000485: R16 := R16 + 0xFC8
0000048a: call R17 with noreturn

000005bc: sub call_weak_fn(call_weak_fn_result)
000005ed: call_weak_fn_result :: out u32 = low:32[R0]

00000226:
00000229: R0 := 0x10000
00000230: R0 := mem[R0 + 0xFE8, el]:u64
00000236: when R0 = 0 goto %00000234
000005dd: goto %00000394

00000234:
0000023c: call R30 with noreturn

00000394:
00000397: goto @__gmon_start__

00000395:
00000462: R16 := 0x10000
00000469: R17 := mem[R16 + 0xFC0, el]:u64
0000046f: R16 := R16 + 0xFC0
00000474: call R17 with noreturn

000005be: sub deregister_tm_clones(deregister_tm_clones_result)
000005ee: deregister_tm_clones_result :: out u32 = low:32[R0]

00000242:
00000245: R0 := 0x11000
0000024b: R0 := R0 + 0x10
00000250: R1 := 0x11000
00000256: R1 := R1 + 0x10
0000025c: #1 := ~R0
00000261: #2 := R1 + ~R0
00000267: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000026d: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000271: ZF := #2 + 1 = 0
00000275: NF := 63:63[#2 + 1]
0000027b: when ZF goto %00000279
000005de: goto %00000376

00000376:
00000379: R1 := 0x10000
00000380: R1 := mem[R1 + 0xFD8, el]:u64
00000385: when R1 = 0 goto %00000279
000005df: goto %00000389

00000279:
00000281: call R30 with noreturn

00000389:
0000038d: R16 := R1
00000392: call R16 with noreturn

000005c1: sub frame_dummy(frame_dummy_result)
000005ef: frame_dummy_result :: out u32 = low:32[R0]

00000319:
0000031b: call @register_tm_clones with noreturn

000005c2: sub main(main_argc, main_argv, main_result)
000005f0: main_argc :: in u32 = low:32[R0]
000005f1: main_argv :: in out u64 = R1
000005f2: main_result :: out u32 = low:32[R0]

000001a8:
000001ab: R1 := 0x11000
000001b1: R2 := pad:64[31:0[R0]]
000001b6: R0 := 0
000001be: mem := mem with [R1 + 0x1C, el]:u32 <- 31:0[R2]
000001c3: call R30 with noreturn

000005c3: sub register_tm_clones(register_tm_clones_result)
000005f3: register_tm_clones_result :: out u32 = low:32[R0]

00000283:
00000286: R0 := 0x11000
0000028c: R0 := R0 + 0x10
00000291: R1 := 0x11000
00000297: R1 := R1 + 0x10
0000029e: R1 := R1 + ~R0 + 1
000002a4: R2 := 0.63:63[R1]
000002ab: R1 := R2 + (R1 ~>> 3)
000002b1: R1 := extend:64[63:1[R1]]
000002b7: when R1 = 0 goto %000002b5
000005e0: goto %00000358

00000358:
0000035b: R2 := 0x10000
00000362: R2 := mem[R2 + 0xFF8, el]:u64
00000367: when R2 = 0 goto %000002b5
000005e1: goto %0000036b

000002b5:
000002bd: call R30 with noreturn

0000036b:
0000036f: R16 := R2
00000374: call R16 with noreturn
