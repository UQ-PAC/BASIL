var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R2: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R2: bv64;
var {:extern} mem: [bv64]bv8;
const {:extern} $arr_addr: bv64;
axiom ($arr_addr == 69656bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if ((index == bvadd64($arr_addr, 4bv64)) || (index == bvadd64($arr_addr, 0bv64))) then false else false)
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures true;
  free ensures (memory_load8_le(mem, 1896bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1897bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1898bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1899bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69016bv64) == 80bv8);
  free ensures (memory_load8_le(mem, 69017bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69018bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69019bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69020bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69021bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69022bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69023bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69024bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69025bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69026bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69027bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69028bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69029bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69030bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69031bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69616bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69617bv64) == 6bv8);
  free ensures (memory_load8_le(mem, 69618bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69619bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69620bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69621bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69622bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69623bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69640bv64) == 8bv8);
  free ensures (memory_load8_le(mem, 69641bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69642bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69643bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69644bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69645bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69646bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69647bv64) == 0bv8);

procedure {:extern} rely_transitive()
  modifies Gamma_mem, mem;
  ensures true;
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive()
{
  assert true;
}

procedure {:extern} guarantee_reflexive()
  modifies Gamma_mem, mem;
{
  assert (memory_load32_le(mem, bvadd64($arr_addr, 0bv64)) == memory_load32_le(mem, bvadd64($arr_addr, 0bv64)));
}

procedure main()
  modifies Gamma_R0, Gamma_R1, Gamma_R2, Gamma_mem, R0, R1, R2, mem;
  requires (Gamma_R0 == false);
  free requires (memory_load8_le(mem, 69632bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69633bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69634bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69635bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69636bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69637bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69638bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69639bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1896bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1897bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1898bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1899bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69016bv64) == 80bv8);
  free requires (memory_load8_le(mem, 69017bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69018bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69019bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69020bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69021bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69022bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69023bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69024bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69025bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69026bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69027bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69028bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69029bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69030bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69031bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69616bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69617bv64) == 6bv8);
  free requires (memory_load8_le(mem, 69618bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69619bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69620bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69621bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69622bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69623bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69640bv64) == 8bv8);
  free requires (memory_load8_le(mem, 69641bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69642bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69643bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69644bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69645bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69646bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69647bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1896bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1897bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1898bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1899bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69016bv64) == 80bv8);
  free ensures (memory_load8_le(mem, 69017bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69018bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69019bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69020bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69021bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69022bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69023bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69024bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69025bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69026bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69027bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69028bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69029bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69030bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69031bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69616bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69617bv64) == 6bv8);
  free ensures (memory_load8_le(mem, 69618bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69619bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69620bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69621bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69622bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69623bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69640bv64) == 8bv8);
  free ensures (memory_load8_le(mem, 69641bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69642bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69643bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69644bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69645bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69646bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69647bv64) == 0bv8);
{
  var arr$0_old: bv32;
  lmain:
    assume {:captureState "lmain"} true;
    R1, Gamma_R1 := 69632bv64, true;
    R2, Gamma_R2 := zero_extend32_32(R0[32:0]), Gamma_R0;
    R0, Gamma_R0 := 0bv64, true;
    call rely();
    assert (L(mem, bvadd64(R1, 28bv64)) ==> Gamma_R2);
    arr$0_old := memory_load32_le(mem, bvadd64($arr_addr, 0bv64));
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R1, 28bv64), R2[32:0]), gamma_store32(Gamma_mem, bvadd64(R1, 28bv64), Gamma_R2);
    assert (arr$0_old == memory_load32_le(mem, bvadd64($arr_addr, 0bv64)));
    assume {:captureState "%000001be"} true;
    goto main_return;
  main_return:
    assume {:captureState "main_return"} true;
    return;
}
