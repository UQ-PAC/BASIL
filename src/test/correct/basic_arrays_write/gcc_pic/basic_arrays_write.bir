00000569: program
00000537: sub __cxa_finalize(__cxa_finalize_result)
0000056a: __cxa_finalize_result :: out u32 = low:32[R0]

0000033e:
00000436: R16 := 0x10000
0000043d: R17 := mem[R16 + 0xFB0, el]:u64
00000443: R16 := R16 + 0xFB0
00000448: call R17 with noreturn

00000538: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000056b: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000272:
00000276: #3 := R31 - 0x20
0000027c: mem := mem with [#3, el]:u64 <- R29
00000282: mem := mem with [#3 + 8, el]:u64 <- R30
00000286: R31 := #3
0000028c: R29 := R31
00000294: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000299: R19 := 0x11000
000002a0: R0 := pad:64[mem[R19 + 0x10]]
000002a7: when 31:0[R0] <> 0 goto %000002a5
0000055f: goto %00000307

00000307:
0000030a: R0 := 0x10000
00000311: R0 := mem[R0 + 0xFD8, el]:u64
00000317: when R0 = 0 goto %00000315
00000560: goto %0000032e

0000032e:
00000331: R0 := 0x11000
00000338: R0 := mem[R0 + 8, el]:u64
0000033d: R30 := 0x730
00000340: call @__cxa_finalize with return %00000315

00000315:
0000031d: R30 := 0x734
0000031f: call @deregister_tm_clones with return %00000321

00000321:
00000324: R0 := 1
0000032c: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000561: goto %000002a5

000002a5:
000002af: R19 := mem[R31 + 0x10, el]:u64
000002b6: R29 := mem[R31, el]:u64
000002bb: R30 := mem[R31 + 8, el]:u64
000002bf: R31 := R31 + 0x20
000002c4: call R30 with noreturn

0000053c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000056c: __libc_start_main_main :: in u64 = R0
0000056d: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000056e: __libc_start_main_arg3 :: in out u64 = R2
0000056f: __libc_start_main_auxv :: in out u64 = R3
00000570: __libc_start_main_result :: out u32 = low:32[R0]

000001cb:
00000420: R16 := 0x10000
00000427: R17 := mem[R16 + 0xFA8, el]:u64
0000042d: R16 := R16 + 0xFA8
00000432: call R17 with noreturn

0000053d: sub _fini(_fini_result)
00000571: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000053e: sub _init(_init_result)
00000572: _init_result :: out u32 = low:32[R0]

00000490:
00000496: #5 := R31 - 0x10
0000049c: mem := mem with [#5, el]:u64 <- R29
000004a2: mem := mem with [#5 + 8, el]:u64 <- R30
000004a6: R31 := #5
000004ac: R29 := R31
000004b1: R30 := 0x5A8
000004b3: call @call_weak_fn with return %000004b5

000004b5:
000004ba: R29 := mem[R31, el]:u64
000004bf: R30 := mem[R31 + 8, el]:u64
000004c3: R31 := R31 + 0x10
000004c8: call R30 with noreturn

0000053f: sub _start(_start_result)
00000573: _start_result :: out u32 = low:32[R0]

0000018c:
00000191: R29 := 0
00000196: R30 := 0
0000019c: R5 := R0
000001a3: R1 := mem[R31, el]:u64
000001a9: R2 := R31 + 8
000001af: R6 := R31
000001b4: R0 := 0x10000
000001bb: R0 := mem[R0 + 0xFE8, el]:u64
000001c0: R3 := 0
000001c5: R4 := 0
000001ca: R30 := 0x670
000001cd: call @__libc_start_main with return %000001cf

000001cf:
000001d2: R30 := 0x674
000001d5: call @abort with return %00000562

00000562:
00000563: call @call_weak_fn with noreturn

00000542: sub abort()


000001d3:
00000462: R16 := 0x10000
00000469: R17 := mem[R16 + 0xFC0, el]:u64
0000046f: R16 := R16 + 0xFC0
00000474: call R17 with noreturn

00000543: sub call_weak_fn(call_weak_fn_result)
00000574: call_weak_fn_result :: out u32 = low:32[R0]

000001d7:
000001da: R0 := 0x10000
000001e1: R0 := mem[R0 + 0xFE0, el]:u64
000001e7: when R0 = 0 goto %000001e5
00000564: goto %0000037e

000001e5:
000001ed: call R30 with noreturn

0000037e:
00000381: goto @__gmon_start__

0000037f:
0000044c: R16 := 0x10000
00000453: R17 := mem[R16 + 0xFB8, el]:u64
00000459: R16 := R16 + 0xFB8
0000045e: call R17 with noreturn

00000545: sub deregister_tm_clones(deregister_tm_clones_result)
00000575: deregister_tm_clones_result :: out u32 = low:32[R0]

000001f3:
000001f6: R0 := 0x11000
000001fc: R0 := R0 + 0x10
00000201: R1 := 0x11000
00000207: R1 := R1 + 0x10
0000020d: #1 := ~R0
00000212: #2 := R1 + ~R0
00000218: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000021e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000222: ZF := #2 + 1 = 0
00000226: NF := 63:63[#2 + 1]
0000022c: when ZF goto %0000022a
00000565: goto %00000360

00000360:
00000363: R1 := 0x10000
0000036a: R1 := mem[R1 + 0xFD0, el]:u64
0000036f: when R1 = 0 goto %0000022a
00000566: goto %00000373

0000022a:
00000232: call R30 with noreturn

00000373:
00000377: R16 := R1
0000037c: call R16 with noreturn

00000548: sub frame_dummy(frame_dummy_result)
00000576: frame_dummy_result :: out u32 = low:32[R0]

000002ca:
000002cc: call @register_tm_clones with noreturn

00000549: sub main(main_argc, main_argv, main_result)
00000577: main_argc :: in u32 = low:32[R0]
00000578: main_argv :: in out u64 = R1
00000579: main_result :: out u32 = low:32[R0]

000002ce:
000002d2: R31 := R31 - 0x10
000002da: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000002df: R0 := 0x10000
000002e6: R0 := mem[R0 + 0xFF0, el]:u64
000002ed: R1 := pad:64[mem[R31 + 0xC, el]:u32]
000002f5: mem := mem with [R0 + 4, el]:u32 <- 31:0[R1]
000002fa: R0 := 0
00000300: R31 := R31 + 0x10
00000305: call R30 with noreturn

0000054a: sub register_tm_clones(register_tm_clones_result)
0000057a: register_tm_clones_result :: out u32 = low:32[R0]

00000234:
00000237: R0 := 0x11000
0000023d: R0 := R0 + 0x10
00000242: R1 := 0x11000
00000248: R1 := R1 + 0x10
0000024f: R1 := R1 + ~R0 + 1
00000255: R2 := 0.63:63[R1]
0000025c: R1 := R2 + (R1 ~>> 3)
00000262: R1 := extend:64[63:1[R1]]
00000268: when R1 = 0 goto %00000266
00000567: goto %00000342

00000342:
00000345: R2 := 0x10000
0000034c: R2 := mem[R2 + 0xFF8, el]:u64
00000351: when R2 = 0 goto %00000266
00000568: goto %00000355

00000266:
0000026e: call R30 with noreturn

00000355:
00000359: R16 := R2
0000035e: call R16 with noreturn
