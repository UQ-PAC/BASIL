var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $arr_addr: bv64;
axiom ($arr_addr == 69684bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  (if ((index == bvadd64($arr_addr, 4bv64)) || (index == bvadd64($arr_addr, 0bv64))) then false else false)
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (forall i: bv64 :: (((mem[i] == old(mem[i])) ==> (Gamma_mem[i] == old(Gamma_mem[i])))));
  ensures true;
  free ensures (memory_load8_le(mem, 1868bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1869bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1870bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1871bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69064bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69065bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69066bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69067bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69068bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69069bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69070bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69071bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69072bv64) == 192bv8);
  free ensures (memory_load8_le(mem, 69073bv64) == 6bv8);
  free ensures (memory_load8_le(mem, 69074bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69075bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69076bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69077bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69078bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69079bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69592bv64) == 20bv8);
  free ensures (memory_load8_le(mem, 69593bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69594bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69595bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69596bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69597bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69598bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69599bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69672bv64) == 40bv8);
  free ensures (memory_load8_le(mem, 69673bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69674bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69675bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69676bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69677bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69678bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69679bv64) == 0bv8);

procedure {:extern} rely_transitive()
  modifies Gamma_mem, mem;
  ensures true;
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive()
{
  assert true;
}

procedure {:extern} guarantee_reflexive()
  modifies Gamma_mem, mem;
{
  assert (memory_load32_le(mem, bvadd64($arr_addr, 0bv64)) == memory_load32_le(mem, bvadd64($arr_addr, 0bv64)));
}

procedure main()
  modifies Gamma_R0, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R31, R8, R9, mem, stack;
  requires (Gamma_R0 == false);
  free requires (memory_load8_le(mem, 69664bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69665bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69666bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69667bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69668bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69669bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69670bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69671bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69672bv64) == 40bv8);
  free requires (memory_load8_le(mem, 69673bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69674bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1868bv64) == 1bv8);
  free requires (memory_load8_le(mem, 1869bv64) == 0bv8);
  free requires (memory_load8_le(mem, 1870bv64) == 2bv8);
  free requires (memory_load8_le(mem, 1871bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69064bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69065bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69066bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69067bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69068bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69069bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69070bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69071bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69072bv64) == 192bv8);
  free requires (memory_load8_le(mem, 69073bv64) == 6bv8);
  free requires (memory_load8_le(mem, 69074bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69075bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69076bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69077bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69078bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69079bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69592bv64) == 20bv8);
  free requires (memory_load8_le(mem, 69593bv64) == 7bv8);
  free requires (memory_load8_le(mem, 69594bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69595bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69596bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69597bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69598bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69599bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69672bv64) == 40bv8);
  free requires (memory_load8_le(mem, 69673bv64) == 16bv8);
  free requires (memory_load8_le(mem, 69674bv64) == 1bv8);
  free requires (memory_load8_le(mem, 69675bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69676bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69677bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69678bv64) == 0bv8);
  free requires (memory_load8_le(mem, 69679bv64) == 0bv8);
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 1868bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 1869bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 1870bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 1871bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69064bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69065bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69066bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69067bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69068bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69069bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69070bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69071bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69072bv64) == 192bv8);
  free ensures (memory_load8_le(mem, 69073bv64) == 6bv8);
  free ensures (memory_load8_le(mem, 69074bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69075bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69076bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69077bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69078bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69079bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69592bv64) == 20bv8);
  free ensures (memory_load8_le(mem, 69593bv64) == 7bv8);
  free ensures (memory_load8_le(mem, 69594bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69595bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69596bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69597bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69598bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69599bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69672bv64) == 40bv8);
  free ensures (memory_load8_le(mem, 69673bv64) == 16bv8);
  free ensures (memory_load8_le(mem, 69674bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 69675bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69676bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69677bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69678bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 69679bv64) == 0bv8);
{
  var arr$0_old: bv32;
  lmain:
    assume {:captureState "lmain"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551600bv64), Gamma_R31;
    R9, Gamma_R9 := 69632bv64, true;
    R9, Gamma_R9 := bvadd64(R9, 52bv64), Gamma_R9;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R0);
    assume {:captureState "%000002e5"} true;
    R8, Gamma_R8 := zero_extend32_32(memory_load32_le(stack, bvadd64(R31, 12bv64))), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    call rely();
    assert (L(mem, bvadd64(R9, 4bv64)) ==> Gamma_R8);
    arr$0_old := memory_load32_le(mem, bvadd64($arr_addr, 0bv64));
    mem, Gamma_mem := memory_store32_le(mem, bvadd64(R9, 4bv64), R8[32:0]), gamma_store32(Gamma_mem, bvadd64(R9, 4bv64), Gamma_R8);
    assert (arr$0_old == memory_load32_le(mem, bvadd64($arr_addr, 0bv64)));
    assume {:captureState "%000002f4"} true;
    R0, Gamma_R0 := 0bv64, true;
    R31, Gamma_R31 := bvadd64(R31, 16bv64), Gamma_R31;
    goto main_return;
  terminate:
    assume {:captureState "terminate"} true;
    goto terminate;
  main_return:
    assume {:captureState "main_return"} true;
    return;
}
