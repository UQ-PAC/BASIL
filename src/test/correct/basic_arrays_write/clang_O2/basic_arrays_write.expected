var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_R9: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $R0: bv64;
var {:extern} $R8: bv64;
var {:extern} $R9: bv64;
var {:extern} $mem: [bv64]bv8;
const {:extern} $arr_addr: bv64;
axiom ($arr_addr == 69684bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  (if ((#index == bvadd64($arr_addr, 4bv64)) || (#index == bvadd64($arr_addr, 0bv64))) then false else false)
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures (forall #i: bv64::  ((($mem[#i] == old($mem[#i])) ==> ($Gamma_mem[#i] == old($Gamma_mem[#i])))));
  ensures true;
  free ensures (memory_load32_le($mem, 1852bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures true;

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

implementation {:extern} p$rely_reflexive()
{
  assert true;
}

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

implementation {:extern} p$guarantee_reflexive()
{
  assert (memory_load32_le($mem, bvadd64($arr_addr, 0bv64)) == memory_load32_le($mem, bvadd64($arr_addr, 0bv64)));
}

procedure p$main_1812();
  modifies $Gamma_R0, $Gamma_R8, $Gamma_R9, $Gamma_mem, $R0, $R8, $R9, $mem;
  requires ($Gamma_R0 == false);
  free requires (memory_load64_le($mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load32_le($mem, 1852bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1812bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures (memory_load32_le($mem, 1852bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1808bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1728bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1812bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);

implementation p$main_1812()
{
  var #arr$0_old: bv32;
  b#main_entry:
    assume {:captureState "main_entry"} true;
    $R8, $Gamma_R8 := zero_extend32_32($R0[32:0]), $Gamma_R0;
    $R9, $Gamma_R9 := 69632bv64, true;
    $R0, $Gamma_R0 := 0bv64, true;
    call p$rely();
    #arr$0_old := memory_load32_le($mem, bvadd64($arr_addr, 0bv64));
    assert (L($mem, bvadd64($R9, 56bv64)) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R9, 56bv64), $R8[32:0]), gamma_store32($Gamma_mem, bvadd64($R9, 56bv64), $Gamma_R8);
    assert (#arr$0_old == memory_load32_le($mem, bvadd64($arr_addr, 0bv64)));
    assume {:captureState "%000002d4"} true;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

