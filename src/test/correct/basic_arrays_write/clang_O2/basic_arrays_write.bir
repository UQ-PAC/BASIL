00000539: program
00000507: sub __cxa_finalize(__cxa_finalize_result)
0000053a: __cxa_finalize_result :: out u32 = low:32[R0]

00000312:
0000040a: R16 := 0x20000
00000411: R17 := mem[R16 + 8, el]:u64
00000417: R16 := R16 + 8
0000041c: call R17 with noreturn

00000508: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000053b: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000263:
00000267: #3 := R31 - 0x20
0000026d: mem := mem with [#3, el]:u64 <- R29
00000273: mem := mem with [#3 + 8, el]:u64 <- R30
00000277: R31 := #3
0000027d: R29 := R31
00000285: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000028a: R19 := 0x20000
00000291: R0 := pad:64[mem[R19 + 0x30]]
00000297: when 0:0[R0] goto %00000295
0000052f: goto %000002db

000002db:
000002de: R0 := 0x1F000
000002e5: R0 := mem[R0 + 0xFC8, el]:u64
000002eb: when R0 = 0 goto %000002e9
00000530: goto %00000302

00000302:
00000305: R0 := 0x20000
0000030c: R0 := mem[R0 + 0x28, el]:u64
00000311: R30 := 0x730
00000314: call @__cxa_finalize with return %000002e9

000002e9:
000002f1: R30 := 0x734
000002f3: call @deregister_tm_clones with return %000002f5

000002f5:
000002f8: R0 := 1
00000300: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000531: goto %00000295

00000295:
0000029f: R19 := mem[R31 + 0x10, el]:u64
000002a6: R29 := mem[R31, el]:u64
000002ab: R30 := mem[R31 + 8, el]:u64
000002af: R31 := R31 + 0x20
000002b4: call R30 with noreturn

0000050c: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000053c: __libc_start_main_main :: in u64 = R0
0000053d: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000053e: __libc_start_main_arg3 :: in out u64 = R2
0000053f: __libc_start_main_auxv :: in out u64 = R3
00000540: __libc_start_main_result :: out u32 = low:32[R0]

000001bc:
000003f4: R16 := 0x20000
000003fb: R17 := mem[R16, el]:u64
00000401: R16 := R16
00000406: call R17 with noreturn

0000050d: sub _fini(_fini_result)
00000541: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

0000050e: sub _init(_init_result)
00000542: _init_result :: out u32 = low:32[R0]

00000464:
0000046a: #5 := R31 - 0x10
00000470: mem := mem with [#5, el]:u64 <- R29
00000476: mem := mem with [#5 + 8, el]:u64 <- R30
0000047a: R31 := #5
00000480: R29 := R31
00000485: R30 := 0x5C8
00000487: call @call_weak_fn with return %00000489

00000489:
0000048e: R29 := mem[R31, el]:u64
00000493: R30 := mem[R31 + 8, el]:u64
00000497: R31 := R31 + 0x10
0000049c: call R30 with noreturn

0000050f: sub _start(_start_result)
00000543: _start_result :: out u32 = low:32[R0]

0000017d:
00000182: R29 := 0
00000187: R30 := 0
0000018d: R5 := R0
00000194: R1 := mem[R31, el]:u64
0000019a: R2 := R31 + 8
000001a0: R6 := R31
000001a5: R0 := 0x1F000
000001ac: R0 := mem[R0 + 0xFD8, el]:u64
000001b1: R3 := 0
000001b6: R4 := 0
000001bb: R30 := 0x670
000001be: call @__libc_start_main with return %000001c0

000001c0:
000001c3: R30 := 0x674
000001c6: call @abort with return %00000532

00000532:
00000533: call @call_weak_fn with noreturn

00000512: sub abort()


000001c4:
00000436: R16 := 0x20000
0000043d: R17 := mem[R16 + 0x18, el]:u64
00000443: R16 := R16 + 0x18
00000448: call R17 with noreturn

00000513: sub call_weak_fn(call_weak_fn_result)
00000544: call_weak_fn_result :: out u32 = low:32[R0]

000001c8:
000001cb: R0 := 0x1F000
000001d2: R0 := mem[R0 + 0xFD0, el]:u64
000001d8: when R0 = 0 goto %000001d6
00000534: goto %00000352

000001d6:
000001de: call R30 with noreturn

00000352:
00000355: goto @__gmon_start__

00000353:
00000420: R16 := 0x20000
00000427: R17 := mem[R16 + 0x10, el]:u64
0000042d: R16 := R16 + 0x10
00000432: call R17 with noreturn

00000515: sub deregister_tm_clones(deregister_tm_clones_result)
00000545: deregister_tm_clones_result :: out u32 = low:32[R0]

000001e4:
000001e7: R0 := 0x20000
000001ed: R0 := R0 + 0x30
000001f2: R1 := 0x20000
000001f8: R1 := R1 + 0x30
000001fe: #1 := ~R0
00000203: #2 := R1 + ~R0
00000209: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000020f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000213: ZF := #2 + 1 = 0
00000217: NF := 63:63[#2 + 1]
0000021d: when ZF goto %0000021b
00000535: goto %00000334

00000334:
00000337: R1 := 0x1F000
0000033e: R1 := mem[R1 + 0xFC0, el]:u64
00000343: when R1 = 0 goto %0000021b
00000536: goto %00000347

0000021b:
00000223: call R30 with noreturn

00000347:
0000034b: R16 := R1
00000350: call R16 with noreturn

00000518: sub frame_dummy(frame_dummy_result)
00000546: frame_dummy_result :: out u32 = low:32[R0]

000002ba:
000002bc: call @register_tm_clones with noreturn

00000519: sub main(main_argc, main_argv, main_result)
00000547: main_argc :: in u32 = low:32[R0]
00000548: main_argv :: in out u64 = R1
00000549: main_result :: out u32 = low:32[R0]

000002be:
000002c2: R8 := pad:64[31:0[R0]]
000002c7: R9 := 0x20000
000002cc: R0 := 0
000002d4: mem := mem with [R9 + 0x38, el]:u32 <- 31:0[R8]
000002d9: call R30 with noreturn

0000051a: sub register_tm_clones(register_tm_clones_result)
0000054a: register_tm_clones_result :: out u32 = low:32[R0]

00000225:
00000228: R0 := 0x20000
0000022e: R0 := R0 + 0x30
00000233: R1 := 0x20000
00000239: R1 := R1 + 0x30
00000240: R1 := R1 + ~R0 + 1
00000246: R2 := 0.63:63[R1]
0000024d: R1 := R2 + (R1 ~>> 3)
00000253: R1 := extend:64[63:1[R1]]
00000259: when R1 = 0 goto %00000257
00000537: goto %00000316

00000316:
00000319: R2 := 0x1F000
00000320: R2 := mem[R2 + 0xFE0, el]:u64
00000325: when R2 = 0 goto %00000257
00000538: goto %00000329

00000257:
0000025f: call R30 with noreturn

00000329:
0000032d: R16 := R2
00000332: call R16 with noreturn
