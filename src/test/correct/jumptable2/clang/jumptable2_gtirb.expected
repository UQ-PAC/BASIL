var {:extern} $CF: bv1;
var {:extern} $Gamma_CF: bool;
var {:extern} $Gamma_NF: bool;
var {:extern} $Gamma_R0: bool;
var {:extern} $Gamma_R1: bool;
var {:extern} $Gamma_R29: bool;
var {:extern} $Gamma_R30: bool;
var {:extern} $Gamma_R31: bool;
var {:extern} $Gamma_R8: bool;
var {:extern} $Gamma_R9: bool;
var {:extern} $Gamma_VF: bool;
var {:extern} $Gamma_ZF: bool;
var {:extern} $Gamma_mem: [bv64]bool;
var {:extern} $Gamma_stack: [bv64]bool;
var {:extern} $NF: bv1;
var {:extern} $R0: bv64;
var {:extern} $R1: bv64;
var {:extern} $R29: bv64;
var {:extern} $R30: bv64;
var {:extern} $R31: bv64;
var {:extern} $R8: bv64;
var {:extern} $R9: bv64;
var {:extern} $VF: bv1;
var {:extern} $ZF: bv1;
var {:extern} $mem: [bv64]bv8;
var {:extern} $stack: [bv64]bv8;
const {:extern} $_DYNAMIC_addr: bv64;
axiom ($_DYNAMIC_addr == 69080bv64);
const {:extern} $_GLOBAL_OFFSET_TABLE__addr: bv64;
axiom ($_GLOBAL_OFFSET_TABLE__addr == 69560bv64);
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2052bv64);
const {:extern} $__FRAME_END___addr: bv64;
axiom ($__FRAME_END___addr == 2400bv64);
const {:extern} $__abi_tag_addr: bv64;
axiom ($__abi_tag_addr == 632bv64);
const {:extern} $__do_global_dtors_aux_fini_array_entry_addr: bv64;
axiom ($__do_global_dtors_aux_fini_array_entry_addr == 69072bv64);
const {:extern} $__frame_dummy_init_array_entry_addr: bv64;
axiom ($__frame_dummy_init_array_entry_addr == 69064bv64);
const {:extern} $completed.0_addr: bv64;
axiom ($completed.0_addr == 69712bv64);
const {:extern} $jump_table_addr: bv64;
axiom ($jump_table_addr == 69688bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69680bv64);
function {:extern} L(#mem$in: [bv64]bv8, #index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))
}

function {:extern} gamma_load64(#gammaMap: [bv64]bool, #index: bv64) returns (bool) {
  (#gammaMap[bvadd64(#index, 7bv64)] && (#gammaMap[bvadd64(#index, 6bv64)] && (#gammaMap[bvadd64(#index, 5bv64)] && (#gammaMap[bvadd64(#index, 4bv64)] && (#gammaMap[bvadd64(#index, 3bv64)] && (#gammaMap[bvadd64(#index, 2bv64)] && (#gammaMap[bvadd64(#index, 1bv64)] && #gammaMap[#index])))))))
}

function {:extern} gamma_store32(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value]
}

function {:extern} gamma_store64(#gammaMap: [bv64]bool, #index: bv64, #value: bool) returns ([bv64]bool) {
  #gammaMap[#index := #value][bvadd64(#index, 1bv64) := #value][bvadd64(#index, 2bv64) := #value][bvadd64(#index, 3bv64) := #value][bvadd64(#index, 4bv64) := #value][bvadd64(#index, 5bv64) := #value][bvadd64(#index, 6bv64) := #value][bvadd64(#index, 7bv64) := #value]
}

function {:extern} memory_load32_le(#memory: [bv64]bv8, #index: bv64) returns (bv32) {
  (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))
}

function {:extern} memory_load64_le(#memory: [bv64]bv8, #index: bv64) returns (bv64) {
  (#memory[bvadd64(#index, 7bv64)] ++ (#memory[bvadd64(#index, 6bv64)] ++ (#memory[bvadd64(#index, 5bv64)] ++ (#memory[bvadd64(#index, 4bv64)] ++ (#memory[bvadd64(#index, 3bv64)] ++ (#memory[bvadd64(#index, 2bv64)] ++ (#memory[bvadd64(#index, 1bv64)] ++ #memory[#index])))))))
}

function {:extern} memory_store32_le(#memory: [bv64]bv8, #index: bv64, #value: bv32) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]]
}

function {:extern} memory_store64_le(#memory: [bv64]bv8, #index: bv64, #value: bv64) returns ([bv64]bv8) {
  #memory[#index := #value[8:0]][bvadd64(#index, 1bv64) := #value[16:8]][bvadd64(#index, 2bv64) := #value[24:16]][bvadd64(#index, 3bv64) := #value[32:24]][bvadd64(#index, 4bv64) := #value[40:32]][bvadd64(#index, 5bv64) := #value[48:40]][bvadd64(#index, 6bv64) := #value[56:48]][bvadd64(#index, 7bv64) := #value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} p$rely();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));
  free ensures (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le($mem, 69688bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69696bv64) == 1896bv64);
  free ensures (memory_load64_le($mem, 69704bv64) == 1916bv64);

procedure {:extern} p$rely_transitive();
  modifies $Gamma_mem, $mem;
  ensures ($Gamma_mem == old($Gamma_mem));
  ensures ($mem == old($mem));

implementation {:extern} p$rely_transitive()
{
  call p$rely();
  call p$rely();
}

procedure {:extern} p$rely_reflexive();

procedure {:extern} p$guarantee_reflexive();
  modifies $Gamma_mem, $mem;

procedure p$add_two_1876();
  modifies $Gamma_R8, $Gamma_R9, $Gamma_mem, $R8, $R9, $mem;
  free requires (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1936bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le($mem, 69688bv64) == 1876bv64);
  free requires (memory_load64_le($mem, 69696bv64) == 1896bv64);
  free requires (memory_load64_le($mem, 69704bv64) == 1916bv64);
  free ensures (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le($mem, 69688bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69696bv64) == 1896bv64);
  free ensures (memory_load64_le($mem, 69704bv64) == 1916bv64);

implementation p$add_two_1876()
{
  var #Gamma_load15: bool;
  var #load15: bv32;
  b#add_two_entry:
    assume {:captureState "add_two_entry (q7ZKy1R2QUKWr5v/JFG4ug==)"} true;
    $R9, $Gamma_R9 := 69632bv64, true;
    call p$rely();
    #load15, #Gamma_load15 := memory_load32_le($mem, bvadd64($R9, 48bv64)), (gamma_load32($Gamma_mem, bvadd64($R9, 48bv64)) || L($mem, bvadd64($R9, 48bv64)));
    $R8, $Gamma_R8 := zero_extend32_32(#load15), #Gamma_load15;
    $R8, $Gamma_R8 := zero_extend32_32(bvadd32($R8[32:0], 2bv32)), $Gamma_R8;
    call p$rely();
    assert (L($mem, bvadd64($R9, 48bv64)) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R9, 48bv64), $R8[32:0]), gamma_store32($Gamma_mem, bvadd64($R9, 48bv64), $Gamma_R8);
    assume {:captureState "1888_0"} true;
    goto b#add_two_basil_return_1;
  b#add_two_basil_return_1:
    assume {:captureState "add_two_basil_return_1"} true;
    return;
}

procedure p$sub_seven_1916();
  modifies $CF, $Gamma_CF, $Gamma_NF, $Gamma_R8, $Gamma_R9, $Gamma_VF, $Gamma_ZF, $Gamma_mem, $NF, $R8, $R9, $VF, $ZF, $mem;
  free requires (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1936bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le($mem, 69688bv64) == 1876bv64);
  free requires (memory_load64_le($mem, 69696bv64) == 1896bv64);
  free requires (memory_load64_le($mem, 69704bv64) == 1916bv64);
  free ensures (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le($mem, 69688bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69696bv64) == 1896bv64);
  free ensures (memory_load64_le($mem, 69704bv64) == 1916bv64);

implementation p$sub_seven_1916()
{
  var #Cse0__5_9: bv32;
  var #Gamma_Cse0__5_9: bool;
  var #Gamma_load29: bool;
  var #load29: bv32;
  b#sub_seven_entry:
    assume {:captureState "sub_seven_entry (NsH3NjTvSbaIhN4GlaFRLw==)"} true;
    $R9, $Gamma_R9 := 69632bv64, true;
    call p$rely();
    #load29, #Gamma_load29 := memory_load32_le($mem, bvadd64($R9, 48bv64)), (gamma_load32($Gamma_mem, bvadd64($R9, 48bv64)) || L($mem, bvadd64($R9, 48bv64)));
    $R8, $Gamma_R8 := zero_extend32_32(#load29), #Gamma_load29;
    #Cse0__5_9, #Gamma_Cse0__5_9 := bvadd32($R8[32:0], 4294967289bv32), $Gamma_R8;
    $VF, $Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(#Cse0__5_9), bvadd33(sign_extend1_32($R8[32:0]), 8589934585bv33))), ($Gamma_R8 && #Gamma_Cse0__5_9);
    $CF, $Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(#Cse0__5_9), bvadd33(zero_extend1_32($R8[32:0]), 4294967289bv33))), ($Gamma_R8 && #Gamma_Cse0__5_9);
    $ZF, $Gamma_ZF := bvcomp32(#Cse0__5_9, 0bv32), #Gamma_Cse0__5_9;
    $NF, $Gamma_NF := #Cse0__5_9[32:31], #Gamma_Cse0__5_9;
    $R8, $Gamma_R8 := zero_extend32_32(#Cse0__5_9), #Gamma_Cse0__5_9;
    call p$rely();
    assert (L($mem, bvadd64($R9, 48bv64)) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R9, 48bv64), $R8[32:0]), gamma_store32($Gamma_mem, bvadd64($R9, 48bv64), $Gamma_R8);
    assume {:captureState "1928_0"} true;
    goto b#sub_seven_basil_return_1;
  b#sub_seven_basil_return_1:
    assume {:captureState "sub_seven_basil_return_1"} true;
    return;
}

procedure p$add_six_1896();
  modifies $Gamma_R8, $Gamma_R9, $Gamma_mem, $R8, $R9, $mem;
  free requires (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1936bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le($mem, 69688bv64) == 1876bv64);
  free requires (memory_load64_le($mem, 69696bv64) == 1896bv64);
  free requires (memory_load64_le($mem, 69704bv64) == 1916bv64);
  free ensures (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le($mem, 69688bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69696bv64) == 1896bv64);
  free ensures (memory_load64_le($mem, 69704bv64) == 1916bv64);

implementation p$add_six_1896()
{
  var #Gamma_load14: bool;
  var #load14: bv32;
  b#add_six_entry:
    assume {:captureState "add_six_entry (R7rnILkkQt+m3atwYHgqZw==)"} true;
    $R9, $Gamma_R9 := 69632bv64, true;
    call p$rely();
    #load14, #Gamma_load14 := memory_load32_le($mem, bvadd64($R9, 48bv64)), (gamma_load32($Gamma_mem, bvadd64($R9, 48bv64)) || L($mem, bvadd64($R9, 48bv64)));
    $R8, $Gamma_R8 := zero_extend32_32(#load14), #Gamma_load14;
    $R8, $Gamma_R8 := zero_extend32_32(bvadd32($R8[32:0], 6bv32)), $Gamma_R8;
    call p$rely();
    assert (L($mem, bvadd64($R9, 48bv64)) ==> $Gamma_R8);
    $mem, $Gamma_mem := memory_store32_le($mem, bvadd64($R9, 48bv64), $R8[32:0]), gamma_store32($Gamma_mem, bvadd64($R9, 48bv64), $Gamma_R8);
    assume {:captureState "1908_0"} true;
    goto b#add_six_basil_return_1;
  b#add_six_basil_return_1:
    assume {:captureState "add_six_basil_return_1"} true;
    return;
}

procedure p$main_1936();
  modifies $CF, $Gamma_CF, $Gamma_NF, $Gamma_R0, $Gamma_R29, $Gamma_R30, $Gamma_R31, $Gamma_R8, $Gamma_R9, $Gamma_VF, $Gamma_ZF, $Gamma_mem, $Gamma_stack, $NF, $R0, $R29, $R30, $R31, $R8, $R9, $VF, $ZF, $mem, $stack;
  free requires (memory_load64_le($mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le($mem, 69680bv64) == 5bv64);
  free requires (memory_load64_le($mem, 69688bv64) == 1876bv64);
  free requires (memory_load64_le($mem, 69696bv64) == 1896bv64);
  free requires (memory_load64_le($mem, 69704bv64) == 1916bv64);
  free requires (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free requires (memory_load64_le($mem, 69064bv64) == 1872bv64);
  free requires (memory_load64_le($mem, 69072bv64) == 1792bv64);
  free requires (memory_load64_le($mem, 69592bv64) == 1936bv64);
  free requires (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le($mem, 69688bv64) == 1876bv64);
  free requires (memory_load64_le($mem, 69696bv64) == 1896bv64);
  free requires (memory_load64_le($mem, 69704bv64) == 1916bv64);
  free ensures ($Gamma_R29 == old($Gamma_R29));
  free ensures ($Gamma_R31 == old($Gamma_R31));
  free ensures ($R29 == old($R29));
  free ensures ($R31 == old($R31));
  free ensures (memory_load32_le($mem, 2052bv64) == 131073bv32);
  free ensures (memory_load64_le($mem, 69064bv64) == 1872bv64);
  free ensures (memory_load64_le($mem, 69072bv64) == 1792bv64);
  free ensures (memory_load64_le($mem, 69592bv64) == 1936bv64);
  free ensures (memory_load64_le($mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le($mem, 69688bv64) == 1876bv64);
  free ensures (memory_load64_le($mem, 69696bv64) == 1896bv64);
  free ensures (memory_load64_le($mem, 69704bv64) == 1916bv64);

implementation p$main_1936()
{
  var #Cse0__5_1: bv64;
  var #Cse0__5_2: bv64;
  var #Gamma_Cse0__5_1: bool;
  var #Gamma_Cse0__5_2: bool;
  var #Gamma_load10: bool;
  var #Gamma_load3: bool;
  var #Gamma_load4: bool;
  var #Gamma_load5: bool;
  var #Gamma_load6: bool;
  var #Gamma_load7: bool;
  var #Gamma_load8: bool;
  var #Gamma_load9: bool;
  var #load10: bv64;
  var #load3: bv32;
  var #load4: bv64;
  var #load5: bv64;
  var #load6: bv64;
  var #load7: bv64;
  var #load8: bv64;
  var #load9: bv64;
  b#main_entry:
    assume {:captureState "main_entry (eU5HB3jMTHGqgfMDZYX1tA==)"} true;
    $R31, $Gamma_R31 := bvadd64($R31, 18446744073709551568bv64), $Gamma_R31;
    #Cse0__5_2, #Gamma_Cse0__5_2 := bvadd64($R31, 32bv64), $Gamma_R31;
    $stack, $Gamma_stack := memory_store64_le($stack, #Cse0__5_2, $R29), gamma_store64($Gamma_stack, #Cse0__5_2, $Gamma_R29);
    assume {:captureState "1940_1"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64(#Cse0__5_2, 8bv64), $R30), gamma_store64($Gamma_stack, bvadd64(#Cse0__5_2, 8bv64), $Gamma_R30);
    assume {:captureState "1940_2"} true;
    $R29, $Gamma_R29 := bvadd64($R31, 32bv64), $Gamma_R31;
    $R8, $Gamma_R8 := 69632bv64, true;
    $R9, $Gamma_R9 := 69632bv64, true;
    $R9, $Gamma_R9 := bvadd64($R9, 56bv64), $Gamma_R9;
    $stack, $Gamma_stack := memory_store64_le($stack, $R31, $R9), gamma_store64($Gamma_stack, $R31, $Gamma_R9);
    assume {:captureState "1960_0"} true;
    $R9, $Gamma_R9 := 0bv64, true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R31, 12bv64), $R9[32:0]), gamma_store32($Gamma_stack, bvadd64($R31, 12bv64), $Gamma_R9);
    assume {:captureState "1968_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R29, 18446744073709551612bv64), 0bv32), gamma_store32($Gamma_stack, bvadd64($R29, 18446744073709551612bv64), true);
    assume {:captureState "1972_0"} true;
    $stack, $Gamma_stack := memory_store32_le($stack, bvadd64($R29, 18446744073709551608bv64), $R0[32:0]), gamma_store32($Gamma_stack, bvadd64($R29, 18446744073709551608bv64), $Gamma_R0);
    assume {:captureState "1976_0"} true;
    $stack, $Gamma_stack := memory_store64_le($stack, bvadd64($R31, 16bv64), $R1), gamma_store64($Gamma_stack, bvadd64($R31, 16bv64), $Gamma_R1);
    assume {:captureState "1980_0"} true;
    call p$rely();
    #load6, #Gamma_load6 := memory_load64_le($mem, bvadd64($R8, 56bv64)), (gamma_load64($Gamma_mem, bvadd64($R8, 56bv64)) || L($mem, bvadd64($R8, 56bv64)));
    $R8, $Gamma_R8 := #load6, #Gamma_load6;
    $R30, $Gamma_R30 := 1992bv64, true;
    call p$add_two_1876();
    goto b#main_7;
  b#main_7:
    assume {:captureState "main_7 (p5YPh9uZSeeRZ2XwUYn+Tw==)"} true;
    #load7, #Gamma_load7 := memory_load64_le($stack, $R31), gamma_load64($Gamma_stack, $R31);
    $R8, $Gamma_R8 := #load7, #Gamma_load7;
    call p$rely();
    #load8, #Gamma_load8 := memory_load64_le($mem, bvadd64($R8, 8bv64)), (gamma_load64($Gamma_mem, bvadd64($R8, 8bv64)) || L($mem, bvadd64($R8, 8bv64)));
    $R8, $Gamma_R8 := #load8, #Gamma_load8;
    $R30, $Gamma_R30 := 1992bv64, true;
    call p$add_six_1896();
    goto b#main_5;
  b#main_5:
    assume {:captureState "main_5 (/hg9mn5wS7GgqSlZeoJfGQ==)"} true;
    #load9, #Gamma_load9 := memory_load64_le($stack, $R31), gamma_load64($Gamma_stack, $R31);
    $R8, $Gamma_R8 := #load9, #Gamma_load9;
    call p$rely();
    #load10, #Gamma_load10 := memory_load64_le($mem, bvadd64($R8, 16bv64)), (gamma_load64($Gamma_mem, bvadd64($R8, 16bv64)) || L($mem, bvadd64($R8, 16bv64)));
    $R8, $Gamma_R8 := #load10, #Gamma_load10;
    $R30, $Gamma_R30 := 1992bv64, true;
    call p$sub_seven_1916();
    goto b#main_3;
  b#main_3:
    assume {:captureState "main_3 (Wg9L39DXQImRFWkgvX2gEw==)"} true;
    #load3, #Gamma_load3 := memory_load32_le($stack, bvadd64($R31, 12bv64)), gamma_load32($Gamma_stack, bvadd64($R31, 12bv64));
    $R0, $Gamma_R0 := zero_extend32_32(#load3), #Gamma_load3;
    #Cse0__5_1, #Gamma_Cse0__5_1 := bvadd64($R31, 32bv64), $Gamma_R31;
    #load4, #Gamma_load4 := memory_load64_le($stack, #Cse0__5_1), gamma_load64($Gamma_stack, #Cse0__5_1);
    $R29, $Gamma_R29 := #load4, #Gamma_load4;
    #load5, #Gamma_load5 := memory_load64_le($stack, bvadd64(#Cse0__5_1, 8bv64)), gamma_load64($Gamma_stack, bvadd64(#Cse0__5_1, 8bv64));
    $R30, $Gamma_R30 := #load5, #Gamma_load5;
    $R31, $Gamma_R31 := bvadd64($R31, 48bv64), $Gamma_R31;
    goto b#main_basil_return_1;
  b#main_basil_return_1:
    assume {:captureState "main_basil_return_1"} true;
    return;
}

