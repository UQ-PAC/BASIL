00000769: program
00000731: sub __cxa_finalize(__cxa_finalize_result)
0000076a: __cxa_finalize_result :: out u32 = low:32[R0]

000004a7:
0000059f: R16 := 0x20000
000005a6: R17 := mem[R16 + 8, el]:u64
000005ac: R16 := R16 + 8
000005b1: call R17 with noreturn

00000732: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000076b: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002eb:
000002ef: #3 := R31 - 0x20
000002f5: mem := mem with [#3, el]:u64 <- R29
000002fb: mem := mem with [#3 + 8, el]:u64 <- R30
000002ff: R31 := #3
00000305: R29 := R31
0000030d: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000312: R19 := 0x20000
00000319: R0 := pad:64[mem[R19 + 0x50]]
0000031f: when 0:0[R0] goto %0000031d
0000075f: goto %00000470

00000470:
00000473: R0 := 0x1F000
0000047a: R0 := mem[R0 + 0xFC8, el]:u64
00000480: when R0 = 0 goto %0000047e
00000760: goto %00000497

00000497:
0000049a: R0 := 0x20000
000004a1: R0 := mem[R0 + 0x28, el]:u64
000004a6: R30 := 0x770
000004a9: call @__cxa_finalize with return %0000047e

0000047e:
00000486: R30 := 0x774
00000488: call @deregister_tm_clones with return %0000048a

0000048a:
0000048d: R0 := 1
00000495: mem := mem with [R19 + 0x50] <- 7:0[R0]
00000761: goto %0000031d

0000031d:
00000327: R19 := mem[R31 + 0x10, el]:u64
0000032e: R29 := mem[R31, el]:u64
00000333: R30 := mem[R31 + 8, el]:u64
00000337: R31 := R31 + 0x20
0000033c: call R30 with noreturn

00000736: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000076c: __libc_start_main_main :: in u64 = R0
0000076d: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000076e: __libc_start_main_arg3 :: in out u64 = R2
0000076f: __libc_start_main_auxv :: in out u64 = R3
00000770: __libc_start_main_result :: out u32 = low:32[R0]

00000244:
00000589: R16 := 0x20000
00000590: R17 := mem[R16, el]:u64
00000596: R16 := R16
0000059b: call R17 with noreturn

00000737: sub _fini(_fini_result)
00000771: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000738: sub _init(_init_result)
00000772: _init_result :: out u32 = low:32[R0]

0000066c:
00000672: #8 := R31 - 0x10
00000678: mem := mem with [#8, el]:u64 <- R29
0000067e: mem := mem with [#8 + 8, el]:u64 <- R30
00000682: R31 := #8
00000688: R29 := R31
0000068d: R30 := 0x610
0000068f: call @call_weak_fn with return %00000691

00000691:
00000696: R29 := mem[R31, el]:u64
0000069b: R30 := mem[R31 + 8, el]:u64
0000069f: R31 := R31 + 0x10
000006a4: call R30 with noreturn

00000739: sub _start(_start_result)
00000773: _start_result :: out u32 = low:32[R0]

00000205:
0000020a: R29 := 0
0000020f: R30 := 0
00000215: R5 := R0
0000021c: R1 := mem[R31, el]:u64
00000222: R2 := R31 + 8
00000228: R6 := R31
0000022d: R0 := 0x1F000
00000234: R0 := mem[R0 + 0xFD8, el]:u64
00000239: R3 := 0
0000023e: R4 := 0
00000243: R30 := 0x6B0
00000246: call @__libc_start_main with return %00000248

00000248:
0000024b: R30 := 0x6B4
0000024e: call @abort with return %00000762

00000762:
00000763: call @call_weak_fn with noreturn

0000073c: sub abort()


0000024c:
000005cb: R16 := 0x20000
000005d2: R17 := mem[R16 + 0x18, el]:u64
000005d8: R16 := R16 + 0x18
000005dd: call R17 with noreturn

0000073d: sub add_six(add_six_result)
00000774: add_six_result :: out u32 = low:32[R0]

00000365:
00000368: R9 := 0x20000
0000036f: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000375: R8 := pad:64[31:0[R8] + 6]
0000037d: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000382: call R30 with noreturn

0000073e: sub add_two(add_two_result)
00000775: add_two_result :: out u32 = low:32[R0]

00000346:
00000349: R9 := 0x20000
00000350: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000356: R8 := pad:64[31:0[R8] + 2]
0000035e: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000363: call R30 with noreturn

0000073f: sub call_weak_fn(call_weak_fn_result)
00000776: call_weak_fn_result :: out u32 = low:32[R0]

00000250:
00000253: R0 := 0x1F000
0000025a: R0 := mem[R0 + 0xFD0, el]:u64
00000260: when R0 = 0 goto %0000025e
00000764: goto %000004e7

0000025e:
00000266: call R30 with noreturn

000004e7:
000004ea: goto @__gmon_start__

000004e8:
000005b5: R16 := 0x20000
000005bc: R17 := mem[R16 + 0x10, el]:u64
000005c2: R16 := R16 + 0x10
000005c7: call R17 with noreturn

00000741: sub deregister_tm_clones(deregister_tm_clones_result)
00000777: deregister_tm_clones_result :: out u32 = low:32[R0]

0000026c:
0000026f: R0 := 0x20000
00000275: R0 := R0 + 0x50
0000027a: R1 := 0x20000
00000280: R1 := R1 + 0x50
00000286: #1 := ~R0
0000028b: #2 := R1 + ~R0
00000291: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000297: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000029b: ZF := #2 + 1 = 0
0000029f: NF := 63:63[#2 + 1]
000002a5: when ZF goto %000002a3
00000765: goto %000004c9

000004c9:
000004cc: R1 := 0x1F000
000004d3: R1 := mem[R1 + 0xFC0, el]:u64
000004d8: when R1 = 0 goto %000002a3
00000766: goto %000004dc

000002a3:
000002ab: call R30 with noreturn

000004dc:
000004e0: R16 := R1
000004e5: call R16 with noreturn

00000744: sub frame_dummy(frame_dummy_result)
00000778: frame_dummy_result :: out u32 = low:32[R0]

00000342:
00000344: call @register_tm_clones with noreturn

00000745: sub main(main_argc, main_argv, main_result)
00000779: main_argc :: in u32 = low:32[R0]
0000077a: main_argv :: in out u64 = R1
0000077b: main_result :: out u32 = low:32[R0]

000003b9:
000003bd: R31 := R31 - 0x30
000003c3: #5 := R31 + 0x20
000003c9: mem := mem with [#5, el]:u64 <- R29
000003cf: mem := mem with [#5 + 8, el]:u64 <- R30
000003d5: R29 := R31 + 0x20
000003da: R8 := 0x20000
000003df: R9 := 0x20000
000003e5: R9 := R9 + 0x38
000003ed: mem := mem with [R31, el]:u64 <- R9
000003f2: R9 := 0
000003fa: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R9]
00000401: mem := mem with [R29 - 4, el]:u32 <- 0
00000409: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
00000411: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000418: R8 := mem[R8 + 0x38, el]:u64
0000041d: R30 := 0x808
00000420: call R8 with return %00000422

00000422:
00000427: R8 := mem[R31, el]:u64
0000042e: R8 := mem[R8 + 8, el]:u64
00000433: R30 := 0x814
00000436: call R8 with return %00000438

00000438:
0000043d: R8 := mem[R31, el]:u64
00000444: R8 := mem[R8 + 0x10, el]:u64
00000449: R30 := 0x820
0000044c: call R8 with return %0000044e

0000044e:
00000453: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000459: #6 := R31 + 0x20
0000045e: R29 := mem[#6, el]:u64
00000463: R30 := mem[#6 + 8, el]:u64
00000469: R31 := R31 + 0x30
0000046e: call R30 with noreturn

00000746: sub register_tm_clones(register_tm_clones_result)
0000077c: register_tm_clones_result :: out u32 = low:32[R0]

000002ad:
000002b0: R0 := 0x20000
000002b6: R0 := R0 + 0x50
000002bb: R1 := 0x20000
000002c1: R1 := R1 + 0x50
000002c8: R1 := R1 + ~R0 + 1
000002ce: R2 := 0.63:63[R1]
000002d5: R1 := R2 + (R1 ~>> 3)
000002db: R1 := extend:64[63:1[R1]]
000002e1: when R1 = 0 goto %000002df
00000767: goto %000004ab

000004ab:
000004ae: R2 := 0x1F000
000004b5: R2 := mem[R2 + 0xFE0, el]:u64
000004ba: when R2 = 0 goto %000002df
00000768: goto %000004be

000002df:
000002e7: call R30 with noreturn

000004be:
000004c2: R16 := R2
000004c7: call R16 with noreturn

00000749: sub sub_seven(sub_seven_result)
0000077d: sub_seven_result :: out u32 = low:32[R0]

00000384:
00000387: R9 := 0x20000
0000038e: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000394: #4 := 31:0[R8] - 8
00000399: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 7
0000039e: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFF9
000003a2: ZF := #4 + 1 = 0
000003a6: NF := 31:31[#4 + 1]
000003aa: R8 := pad:64[#4 + 1]
000003b2: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
000003b7: call R30 with noreturn
