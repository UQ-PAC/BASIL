000006f8: program
000006c0: sub __cxa_finalize(__cxa_finalize_result)
000006f9: __cxa_finalize_result :: out u32 = low:32[R0]

000004c0:
000005b8: R16 := 0x20000
000005bf: R17 := mem[R16 + 8, el]:u64
000005c5: R16 := R16 + 8
000005ca: call R17 with noreturn

000006c1: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006fa: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002f3:
000002f7: #3 := R31 - 0x20
000002fd: mem := mem with [#3, el]:u64 <- R29
00000303: mem := mem with [#3 + 8, el]:u64 <- R30
00000307: R31 := #3
0000030d: R29 := R31
00000315: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000031a: R19 := 0x20000
00000321: R0 := pad:64[mem[R19 + 0x50]]
00000327: when 0:0[R0] goto %00000325
000006ee: goto %00000489

00000489:
0000048c: R0 := 0x1F000
00000493: R0 := mem[R0 + 0xFB8, el]:u64
00000499: when R0 = 0 goto %00000497
000006ef: goto %000004b0

000004b0:
000004b3: R0 := 0x20000
000004ba: R0 := mem[R0 + 0x28, el]:u64
000004bf: R30 := 0x7B0
000004c2: call @__cxa_finalize with return %00000497

00000497:
0000049f: R30 := 0x7B4
000004a1: call @deregister_tm_clones with return %000004a3

000004a3:
000004a6: R0 := 1
000004ae: mem := mem with [R19 + 0x50] <- 7:0[R0]
000006f0: goto %00000325

00000325:
0000032f: R19 := mem[R31 + 0x10, el]:u64
00000336: R29 := mem[R31, el]:u64
0000033b: R30 := mem[R31 + 8, el]:u64
0000033f: R31 := R31 + 0x20
00000344: call R30 with noreturn

000006c5: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006fb: __libc_start_main_main :: in u64 = R0
000006fc: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006fd: __libc_start_main_arg3 :: in out u64 = R2
000006fe: __libc_start_main_auxv :: in out u64 = R3
000006ff: __libc_start_main_result :: out u32 = low:32[R0]

0000024c:
000005a2: R16 := 0x20000
000005a9: R17 := mem[R16, el]:u64
000005af: R16 := R16
000005b4: call R17 with noreturn

000006c6: sub _fini(_fini_result)
00000700: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

000006c7: sub _init(_init_result)
00000701: _init_result :: out u32 = low:32[R0]

00000612:
00000618: #8 := R31 - 0x10
0000061e: mem := mem with [#8, el]:u64 <- R29
00000624: mem := mem with [#8 + 8, el]:u64 <- R30
00000628: R31 := #8
0000062e: R29 := R31
00000633: R30 := 0x640
00000635: call @call_weak_fn with return %00000637

00000637:
0000063c: R29 := mem[R31, el]:u64
00000641: R30 := mem[R31 + 8, el]:u64
00000645: R31 := R31 + 0x10
0000064a: call R30 with noreturn

000006c8: sub _start(_start_result)
00000702: _start_result :: out u32 = low:32[R0]

0000020d:
00000212: R29 := 0
00000217: R30 := 0
0000021d: R5 := R0
00000224: R1 := mem[R31, el]:u64
0000022a: R2 := R31 + 8
00000230: R6 := R31
00000235: R0 := 0x1F000
0000023c: R0 := mem[R0 + 0xFD0, el]:u64
00000241: R3 := 0
00000246: R4 := 0
0000024b: R30 := 0x6F0
0000024e: call @__libc_start_main with return %00000250

00000250:
00000253: R30 := 0x6F4
00000256: call @abort with return %000006f1

000006f1:
000006f2: call @call_weak_fn with noreturn

000006cb: sub abort()


00000254:
000005e4: R16 := 0x20000
000005eb: R17 := mem[R16 + 0x18, el]:u64
000005f1: R16 := R16 + 0x18
000005f6: call R17 with noreturn

000006cc: sub add_six(add_six_result)
00000703: add_six_result :: out u32 = low:32[R0]

00000374:
00000377: R9 := 0x1F000
0000037e: R9 := mem[R9 + 0xFC0, el]:u64
00000385: R8 := pad:64[mem[R9, el]:u32]
0000038b: R8 := pad:64[31:0[R8] + 6]
00000393: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000398: call R30 with noreturn

000006cd: sub add_two(add_two_result)
00000704: add_two_result :: out u32 = low:32[R0]

0000034e:
00000351: R9 := 0x1F000
00000358: R9 := mem[R9 + 0xFC0, el]:u64
0000035f: R8 := pad:64[mem[R9, el]:u32]
00000365: R8 := pad:64[31:0[R8] + 2]
0000036d: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000372: call R30 with noreturn

000006ce: sub call_weak_fn(call_weak_fn_result)
00000705: call_weak_fn_result :: out u32 = low:32[R0]

00000258:
0000025b: R0 := 0x1F000
00000262: R0 := mem[R0 + 0xFC8, el]:u64
00000268: when R0 = 0 goto %00000266
000006f3: goto %00000500

00000266:
0000026e: call R30 with noreturn

00000500:
00000503: goto @__gmon_start__

00000501:
000005ce: R16 := 0x20000
000005d5: R17 := mem[R16 + 0x10, el]:u64
000005db: R16 := R16 + 0x10
000005e0: call R17 with noreturn

000006d0: sub deregister_tm_clones(deregister_tm_clones_result)
00000706: deregister_tm_clones_result :: out u32 = low:32[R0]

00000274:
00000277: R0 := 0x20000
0000027d: R0 := R0 + 0x50
00000282: R1 := 0x20000
00000288: R1 := R1 + 0x50
0000028e: #1 := ~R0
00000293: #2 := R1 + ~R0
00000299: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000029f: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002a3: ZF := #2 + 1 = 0
000002a7: NF := 63:63[#2 + 1]
000002ad: when ZF goto %000002ab
000006f4: goto %000004e2

000004e2:
000004e5: R1 := 0x1F000
000004ec: R1 := mem[R1 + 0xFB0, el]:u64
000004f1: when R1 = 0 goto %000002ab
000006f5: goto %000004f5

000002ab:
000002b3: call R30 with noreturn

000004f5:
000004f9: R16 := R1
000004fe: call R16 with noreturn

000006d3: sub frame_dummy(frame_dummy_result)
00000707: frame_dummy_result :: out u32 = low:32[R0]

0000034a:
0000034c: call @register_tm_clones with noreturn

000006d4: sub main(main_argc, main_argv, main_result)
00000708: main_argc :: in u32 = low:32[R0]
00000709: main_argv :: in out u64 = R1
0000070a: main_result :: out u32 = low:32[R0]

000003d6:
000003da: R31 := R31 - 0x30
000003e0: #5 := R31 + 0x20
000003e6: mem := mem with [#5, el]:u64 <- R29
000003ec: mem := mem with [#5 + 8, el]:u64 <- R30
000003f2: R29 := R31 + 0x20
000003f7: R8 := 0x1F000
000003fe: R8 := mem[R8 + 0xFE0, el]:u64
00000406: mem := mem with [R31, el]:u64 <- R8
0000040b: R9 := 0
00000413: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R9]
0000041a: mem := mem with [R29 - 4, el]:u32 <- 0
00000422: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
0000042a: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000431: R8 := mem[R8, el]:u64
00000436: R30 := 0x850
00000439: call R8 with return %0000043b

0000043b:
00000440: R8 := mem[R31, el]:u64
00000447: R8 := mem[R8 + 8, el]:u64
0000044c: R30 := 0x85C
0000044f: call R8 with return %00000451

00000451:
00000456: R8 := mem[R31, el]:u64
0000045d: R8 := mem[R8 + 0x10, el]:u64
00000462: R30 := 0x868
00000465: call R8 with return %00000467

00000467:
0000046c: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000472: #6 := R31 + 0x20
00000477: R29 := mem[#6, el]:u64
0000047c: R30 := mem[#6 + 8, el]:u64
00000482: R31 := R31 + 0x30
00000487: call R30 with noreturn

000006d5: sub register_tm_clones(register_tm_clones_result)
0000070b: register_tm_clones_result :: out u32 = low:32[R0]

000002b5:
000002b8: R0 := 0x20000
000002be: R0 := R0 + 0x50
000002c3: R1 := 0x20000
000002c9: R1 := R1 + 0x50
000002d0: R1 := R1 + ~R0 + 1
000002d6: R2 := 0.63:63[R1]
000002dd: R1 := R2 + (R1 ~>> 3)
000002e3: R1 := extend:64[63:1[R1]]
000002e9: when R1 = 0 goto %000002e7
000006f6: goto %000004c4

000004c4:
000004c7: R2 := 0x1F000
000004ce: R2 := mem[R2 + 0xFD8, el]:u64
000004d3: when R2 = 0 goto %000002e7
000006f7: goto %000004d7

000002e7:
000002ef: call R30 with noreturn

000004d7:
000004db: R16 := R2
000004e0: call R16 with noreturn

000006d8: sub sub_seven(sub_seven_result)
0000070c: sub_seven_result :: out u32 = low:32[R0]

0000039a:
0000039d: R9 := 0x1F000
000003a4: R9 := mem[R9 + 0xFC0, el]:u64
000003ab: R8 := pad:64[mem[R9, el]:u32]
000003b1: #4 := 31:0[R8] - 8
000003b6: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 7
000003bb: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFF9
000003bf: ZF := #4 + 1 = 0
000003c3: NF := 31:31[#4 + 1]
000003c7: R8 := pad:64[#4 + 1]
000003cf: mem := mem with [R9, el]:u32 <- 31:0[R8]
000003d4: call R30 with noreturn
