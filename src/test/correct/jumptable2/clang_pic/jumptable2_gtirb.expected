var {:extern} CF: bv1;
var {:extern} Gamma_CF: bool;
var {:extern} Gamma_NF: bool;
var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R1: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_VF: bool;
var {:extern} Gamma_ZF: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} NF: bv1;
var {:extern} R0: bv64;
var {:extern} R1: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} VF: bv1;
var {:extern} ZF: bv1;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2124bv64);
const {:extern} $jump_table_addr: bv64;
axiom ($jump_table_addr == 69688bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69680bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd33(bv33, bv33) returns (bv33);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp32(bv32, bv32) returns (bv1);
function {:extern} {:bvbuiltin "bvcomp"} bvcomp33(bv33, bv33) returns (bv1);
function {:extern} {:bvbuiltin "bvnot"} bvnot1(bv1) returns (bv1);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "sign_extend 1"} sign_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 1"} zero_extend1_32(bv32) returns (bv33);
function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 2124bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69048bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69680bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69688bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 1964bv64);
  free ensures (memory_load64_le(mem, 69704bv64) == 1988bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure add_two_1940();
  modifies Gamma_R8, Gamma_R9, Gamma_mem, R8, R9, mem;
  free requires (memory_load32_le(mem, 2124bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69048bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69680bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 69688bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69688bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 1964bv64);
  free requires (memory_load64_le(mem, 69704bv64) == 1988bv64);
  free ensures (memory_load32_le(mem, 2124bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69048bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69680bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69688bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 1964bv64);
  free ensures (memory_load64_le(mem, 69704bv64) == 1988bv64);

implementation add_two_1940()
{
  var Gamma_load15: bool;
  var Gamma_load16: bool;
  var load15: bv64;
  var load16: bv32;
  add_two_1940__0__r_TPM3RHSfm3u2v1UY0bLw:
    assume {:captureState "add_two_1940__0__r_TPM3RHSfm3u2v1UY0bLw"} true;
    R9, Gamma_R9 := 65536bv64, true;
    call rely();
    load15, Gamma_load15 := memory_load64_le(mem, bvadd64(R9, 4032bv64)), (gamma_load64(Gamma_mem, bvadd64(R9, 4032bv64)) || L(mem, bvadd64(R9, 4032bv64)));
    R9, Gamma_R9 := load15, Gamma_load15;
    call rely();
    load16, Gamma_load16 := memory_load32_le(mem, R9), (gamma_load32(Gamma_mem, R9) || L(mem, R9));
    R8, Gamma_R8 := zero_extend32_32(load16), Gamma_load16;
    R8, Gamma_R8 := zero_extend32_32(bvadd32(R8[32:0], 2bv32)), Gamma_R8;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "1956_0"} true;
    goto add_two_1940_basil_return;
  add_two_1940_basil_return:
    assume {:captureState "add_two_1940_basil_return"} true;
    return;
}

procedure add_six_1964();
  modifies Gamma_R8, Gamma_R9, Gamma_mem, R8, R9, mem;
  free requires (memory_load32_le(mem, 2124bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69048bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69680bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 69688bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69688bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 1964bv64);
  free requires (memory_load64_le(mem, 69704bv64) == 1988bv64);
  free ensures (memory_load32_le(mem, 2124bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69048bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69680bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69688bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 1964bv64);
  free ensures (memory_load64_le(mem, 69704bv64) == 1988bv64);

implementation add_six_1964()
{
  var Gamma_load18: bool;
  var Gamma_load19: bool;
  var load18: bv64;
  var load19: bv32;
  add_six_1964__0__WmWCAeM7QYqeVhx9woNn_g:
    assume {:captureState "add_six_1964__0__WmWCAeM7QYqeVhx9woNn_g"} true;
    R9, Gamma_R9 := 65536bv64, true;
    call rely();
    load18, Gamma_load18 := memory_load64_le(mem, bvadd64(R9, 4032bv64)), (gamma_load64(Gamma_mem, bvadd64(R9, 4032bv64)) || L(mem, bvadd64(R9, 4032bv64)));
    R9, Gamma_R9 := load18, Gamma_load18;
    call rely();
    load19, Gamma_load19 := memory_load32_le(mem, R9), (gamma_load32(Gamma_mem, R9) || L(mem, R9));
    R8, Gamma_R8 := zero_extend32_32(load19), Gamma_load19;
    R8, Gamma_R8 := zero_extend32_32(bvadd32(R8[32:0], 6bv32)), Gamma_R8;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "1980_0"} true;
    goto add_six_1964_basil_return;
  add_six_1964_basil_return:
    assume {:captureState "add_six_1964_basil_return"} true;
    return;
}

procedure main_2012();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R0, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_VF, Gamma_ZF, Gamma_mem, Gamma_stack, NF, R0, R29, R30, R31, R8, R9, VF, ZF, mem, stack;
  free requires (memory_load64_le(mem, 69664bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69680bv64) == 5bv64);
  free requires (memory_load64_le(mem, 69688bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 1964bv64);
  free requires (memory_load64_le(mem, 69704bv64) == 1988bv64);
  free requires (memory_load32_le(mem, 2124bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69048bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69680bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 69688bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69688bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 1964bv64);
  free requires (memory_load64_le(mem, 69704bv64) == 1988bv64);
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 2124bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69048bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69680bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69688bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 1964bv64);
  free ensures (memory_load64_le(mem, 69704bv64) == 1988bv64);

implementation main_2012()
{
  var Cse0__5_0_1: bv64;
  var Cse0__5_2_1: bv64;
  var Gamma_Cse0__5_0_1: bool;
  var Gamma_Cse0__5_2_1: bool;
  var Gamma_load20: bool;
  var Gamma_load21: bool;
  var Gamma_load22: bool;
  var Gamma_load23: bool;
  var Gamma_load24: bool;
  var Gamma_load25: bool;
  var Gamma_load26: bool;
  var Gamma_load27: bool;
  var Gamma_load28: bool;
  var load20: bv64;
  var load21: bv64;
  var load22: bv64;
  var load23: bv64;
  var load24: bv32;
  var load25: bv64;
  var load26: bv64;
  var load27: bv64;
  var load28: bv64;
  main_2012__0__EvxJkgQzT1q~MAbs_DZI3w:
    assume {:captureState "main_2012__0__EvxJkgQzT1q~MAbs_DZI3w"} true;
    R31, Gamma_R31 := bvadd64(R31, 18446744073709551568bv64), Gamma_R31;
    Cse0__5_0_1, Gamma_Cse0__5_0_1 := bvadd64(R31, 32bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5_0_1, R29), gamma_store64(Gamma_stack, Cse0__5_0_1, Gamma_R29);
    assume {:captureState "2016_1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5_0_1, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5_0_1, 8bv64), Gamma_R30);
    assume {:captureState "2016_2"} true;
    R29, Gamma_R29 := bvadd64(R31, 32bv64), Gamma_R31;
    R8, Gamma_R8 := 65536bv64, true;
    call rely();
    load20, Gamma_load20 := memory_load64_le(mem, bvadd64(R8, 4064bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4064bv64)) || L(mem, bvadd64(R8, 4064bv64)));
    R8, Gamma_R8 := load20, Gamma_load20;
    stack, Gamma_stack := memory_store64_le(stack, R31, R8), gamma_store64(Gamma_stack, R31, Gamma_R8);
    assume {:captureState "2032_0"} true;
    R9, Gamma_R9 := 0bv64, true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31, 12bv64), R9[32:0]), gamma_store32(Gamma_stack, bvadd64(R31, 12bv64), Gamma_R9);
    assume {:captureState "2040_0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551612bv64), 0bv32), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551612bv64), true);
    assume {:captureState "2044_0"} true;
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R29, 18446744073709551608bv64), R0[32:0]), gamma_store32(Gamma_stack, bvadd64(R29, 18446744073709551608bv64), Gamma_R0);
    assume {:captureState "2048_0"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R1), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R1);
    assume {:captureState "2052_0"} true;
    call rely();
    load21, Gamma_load21 := memory_load64_le(mem, R8), (gamma_load64(Gamma_mem, R8) || L(mem, R8));
    R8, Gamma_R8 := load21, Gamma_load21;
    R30, Gamma_R30 := 2064bv64, true;
    call add_two_1940();
    goto main_2012__1__~R7GAmlPRJGIPLWxHDibcw;
  main_2012__1__~R7GAmlPRJGIPLWxHDibcw:
    assume {:captureState "main_2012__1__~R7GAmlPRJGIPLWxHDibcw"} true;
    load27, Gamma_load27 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R8, Gamma_R8 := load27, Gamma_load27;
    call rely();
    load28, Gamma_load28 := memory_load64_le(mem, bvadd64(R8, 8bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 8bv64)) || L(mem, bvadd64(R8, 8bv64)));
    R8, Gamma_R8 := load28, Gamma_load28;
    R30, Gamma_R30 := 2064bv64, true;
    call add_six_1964();
    goto main_2012__2__N2O4Vfx1QgWyqbECmi5prA;
  main_2012__2__N2O4Vfx1QgWyqbECmi5prA:
    assume {:captureState "main_2012__2__N2O4Vfx1QgWyqbECmi5prA"} true;
    load22, Gamma_load22 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R8, Gamma_R8 := load22, Gamma_load22;
    call rely();
    load23, Gamma_load23 := memory_load64_le(mem, bvadd64(R8, 16bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 16bv64)) || L(mem, bvadd64(R8, 16bv64)));
    R8, Gamma_R8 := load23, Gamma_load23;
    R30, Gamma_R30 := 2064bv64, true;
    call sub_seven_1988();
    goto main_2012__3__Ql81hl5HThuEPpygsxdjXA;
  main_2012__3__Ql81hl5HThuEPpygsxdjXA:
    assume {:captureState "main_2012__3__Ql81hl5HThuEPpygsxdjXA"} true;
    load24, Gamma_load24 := memory_load32_le(stack, bvadd64(R31, 12bv64)), gamma_load32(Gamma_stack, bvadd64(R31, 12bv64));
    R0, Gamma_R0 := zero_extend32_32(load24), Gamma_load24;
    Cse0__5_2_1, Gamma_Cse0__5_2_1 := bvadd64(R31, 32bv64), Gamma_R31;
    load25, Gamma_load25 := memory_load64_le(stack, Cse0__5_2_1), gamma_load64(Gamma_stack, Cse0__5_2_1);
    R29, Gamma_R29 := load25, Gamma_load25;
    load26, Gamma_load26 := memory_load64_le(stack, bvadd64(Cse0__5_2_1, 8bv64)), gamma_load64(Gamma_stack, bvadd64(Cse0__5_2_1, 8bv64));
    R30, Gamma_R30 := load26, Gamma_load26;
    R31, Gamma_R31 := bvadd64(R31, 48bv64), Gamma_R31;
    goto main_2012_basil_return;
  main_2012_basil_return:
    assume {:captureState "main_2012_basil_return"} true;
    return;
}

procedure sub_seven_1988();
  modifies CF, Gamma_CF, Gamma_NF, Gamma_R8, Gamma_R9, Gamma_VF, Gamma_ZF, Gamma_mem, NF, R8, R9, VF, ZF, mem;
  free requires (memory_load32_le(mem, 2124bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 69048bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69056bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69568bv64) == 69680bv64);
  free requires (memory_load64_le(mem, 69584bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69600bv64) == 69688bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free requires (memory_load64_le(mem, 69688bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69696bv64) == 1964bv64);
  free requires (memory_load64_le(mem, 69704bv64) == 1988bv64);
  free ensures (memory_load32_le(mem, 2124bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 69048bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69056bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69568bv64) == 69680bv64);
  free ensures (memory_load64_le(mem, 69584bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69600bv64) == 69688bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 69672bv64);
  free ensures (memory_load64_le(mem, 69688bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69696bv64) == 1964bv64);
  free ensures (memory_load64_le(mem, 69704bv64) == 1988bv64);

implementation sub_seven_1988()
{
  var Cse0__5_0_3: bv32;
  var Gamma_Cse0__5_0_3: bool;
  var Gamma_load30: bool;
  var Gamma_load31: bool;
  var load30: bv64;
  var load31: bv32;
  sub_seven_1988__0__PpMW6ScZQ3q32PrByBlXeA:
    assume {:captureState "sub_seven_1988__0__PpMW6ScZQ3q32PrByBlXeA"} true;
    R9, Gamma_R9 := 65536bv64, true;
    call rely();
    load30, Gamma_load30 := memory_load64_le(mem, bvadd64(R9, 4032bv64)), (gamma_load64(Gamma_mem, bvadd64(R9, 4032bv64)) || L(mem, bvadd64(R9, 4032bv64)));
    R9, Gamma_R9 := load30, Gamma_load30;
    call rely();
    load31, Gamma_load31 := memory_load32_le(mem, R9), (gamma_load32(Gamma_mem, R9) || L(mem, R9));
    R8, Gamma_R8 := zero_extend32_32(load31), Gamma_load31;
    Cse0__5_0_3, Gamma_Cse0__5_0_3 := bvadd32(R8[32:0], 4294967289bv32), Gamma_R8;
    VF, Gamma_VF := bvnot1(bvcomp33(sign_extend1_32(Cse0__5_0_3), bvadd33(sign_extend1_32(R8[32:0]), 8589934585bv33))), (Gamma_R8 && Gamma_Cse0__5_0_3);
    CF, Gamma_CF := bvnot1(bvcomp33(zero_extend1_32(Cse0__5_0_3), bvadd33(zero_extend1_32(R8[32:0]), 4294967289bv33))), (Gamma_R8 && Gamma_Cse0__5_0_3);
    ZF, Gamma_ZF := bvcomp32(Cse0__5_0_3, 0bv32), Gamma_Cse0__5_0_3;
    NF, Gamma_NF := Cse0__5_0_3[32:31], Gamma_Cse0__5_0_3;
    R8, Gamma_R8 := zero_extend32_32(Cse0__5_0_3), Gamma_Cse0__5_0_3;
    call rely();
    assert (L(mem, R9) ==> Gamma_R8);
    mem, Gamma_mem := memory_store32_le(mem, R9, R8[32:0]), gamma_store32(Gamma_mem, R9, Gamma_R8);
    assume {:captureState "2004_0"} true;
    goto sub_seven_1988_basil_return;
  sub_seven_1988_basil_return:
    assume {:captureState "sub_seven_1988_basil_return"} true;
    return;
}

