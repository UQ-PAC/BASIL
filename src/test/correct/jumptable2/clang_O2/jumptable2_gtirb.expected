var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R19: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_R9: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R19: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} R9: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2500bv64);
const {:extern} $jump_table_addr: bv64;
axiom ($jump_table_addr == 131096bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 131088bv64);
function {:extern} L(mem$in: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value]
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

function {:extern} {:bvbuiltin "zero_extend 32"} zero_extend32_32(bv32) returns (bv64);
procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));
  free ensures (memory_load32_le(mem, 2500bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 130424bv64) == 2320bv64);
  free ensures (memory_load64_le(mem, 130432bv64) == 2240bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 131088bv64);
  free ensures (memory_load64_le(mem, 131048bv64) == 2420bv64);
  free ensures (memory_load64_le(mem, 131064bv64) == 131096bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free ensures (memory_load64_le(mem, 131096bv64) == 2324bv64);
  free ensures (memory_load64_le(mem, 131104bv64) == 2356bv64);
  free ensures (memory_load64_le(mem, 131112bv64) == 2388bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (Gamma_mem == old(Gamma_mem));
  ensures (mem == old(mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure add_two();
  modifies Gamma_R8, Gamma_R9, Gamma_mem, R8, R9, mem;
  free requires (memory_load32_le(mem, 2500bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 130424bv64) == 2320bv64);
  free requires (memory_load64_le(mem, 130432bv64) == 2240bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 131088bv64);
  free requires (memory_load64_le(mem, 131048bv64) == 2420bv64);
  free requires (memory_load64_le(mem, 131064bv64) == 131096bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free requires (memory_load64_le(mem, 131096bv64) == 2324bv64);
  free requires (memory_load64_le(mem, 131104bv64) == 2356bv64);
  free requires (memory_load64_le(mem, 131112bv64) == 2388bv64);
  free ensures (memory_load32_le(mem, 2500bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 130424bv64) == 2320bv64);
  free ensures (memory_load64_le(mem, 130432bv64) == 2240bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 131088bv64);
  free ensures (memory_load64_le(mem, 131048bv64) == 2420bv64);
  free ensures (memory_load64_le(mem, 131064bv64) == 131096bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free ensures (memory_load64_le(mem, 131096bv64) == 2324bv64);
  free ensures (memory_load64_le(mem, 131104bv64) == 2356bv64);
  free ensures (memory_load64_le(mem, 131112bv64) == 2388bv64);

implementation add_two()
{
  var $load6: bv64;
  var $load7: bv32;
  var Gamma_$load6: bool;
  var Gamma_$load7: bool;
  $add_two$__0__$SFN4dpBgSO2bPUu0fyDluw:
    assume {:captureState "$add_two$__0__$SFN4dpBgSO2bPUu0fyDluw"} true;
    R8, Gamma_R8 := 126976bv64, true;
    call rely();
    $load6, Gamma_$load6 := memory_load64_le(mem, bvadd64(R8, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4056bv64)) || L(mem, bvadd64(R8, 4056bv64)));
    R8, Gamma_R8 := $load6, Gamma_$load6;
    call rely();
    $load7, Gamma_$load7 := memory_load32_le(mem, R8), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R9, Gamma_R9 := zero_extend32_32($load7), Gamma_$load7;
    R9, Gamma_R9 := zero_extend32_32(bvadd32(R9[32:0], 2bv32)), Gamma_R9;
    call rely();
    assert (L(mem, R8) ==> Gamma_R9);
    mem, Gamma_mem := memory_store32_le(mem, R8, R9[32:0]), gamma_store32(Gamma_mem, R8, Gamma_R9);
    assume {:captureState "2340$0"} true;
    R8, Gamma_R8 := 0bv64, true;
    R9, Gamma_R9 := 0bv64, true;
    goto add_two_basil_return;
  add_two_basil_return:
    assume {:captureState "add_two_basil_return"} true;
    return;
}

procedure main();
  modifies Gamma_R0, Gamma_R19, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_R9, Gamma_mem, Gamma_stack, R0, R19, R29, R30, R31, R8, R9, mem, stack;
  free requires (memory_load64_le(mem, 131072bv64) == 0bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free requires (memory_load64_le(mem, 131088bv64) == 5bv64);
  free requires (memory_load64_le(mem, 131096bv64) == 2324bv64);
  free requires (memory_load64_le(mem, 131104bv64) == 2356bv64);
  free requires (memory_load64_le(mem, 131112bv64) == 2388bv64);
  free requires (memory_load32_le(mem, 2500bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 130424bv64) == 2320bv64);
  free requires (memory_load64_le(mem, 130432bv64) == 2240bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 131088bv64);
  free requires (memory_load64_le(mem, 131048bv64) == 2420bv64);
  free requires (memory_load64_le(mem, 131064bv64) == 131096bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free requires (memory_load64_le(mem, 131096bv64) == 2324bv64);
  free requires (memory_load64_le(mem, 131104bv64) == 2356bv64);
  free requires (memory_load64_le(mem, 131112bv64) == 2388bv64);
  free ensures (Gamma_R19 == old(Gamma_R19));
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R19 == old(R19));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load32_le(mem, 2500bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 130424bv64) == 2320bv64);
  free ensures (memory_load64_le(mem, 130432bv64) == 2240bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 131088bv64);
  free ensures (memory_load64_le(mem, 131048bv64) == 2420bv64);
  free ensures (memory_load64_le(mem, 131064bv64) == 131096bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free ensures (memory_load64_le(mem, 131096bv64) == 2324bv64);
  free ensures (memory_load64_le(mem, 131104bv64) == 2356bv64);
  free ensures (memory_load64_le(mem, 131112bv64) == 2388bv64);

implementation main()
{
  var $load17: bv64;
  var $load18: bv64;
  var $load19: bv64;
  var $load20: bv64;
  var $load21: bv64;
  var $load22: bv64;
  var $load23: bv64;
  var Cse0__5$1$0: bv64;
  var Gamma_$load17: bool;
  var Gamma_$load18: bool;
  var Gamma_$load19: bool;
  var Gamma_$load20: bool;
  var Gamma_$load21: bool;
  var Gamma_$load22: bool;
  var Gamma_$load23: bool;
  var Gamma_Cse0__5$1$0: bool;
  $main$__0__$OuTzy8qRTci75taVjGinFQ:
    assume {:captureState "$main$__0__$OuTzy8qRTci75taVjGinFQ"} true;
    Cse0__5$1$0, Gamma_Cse0__5$1$0 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, Cse0__5$1$0, R29), gamma_store64(Gamma_stack, Cse0__5$1$0, Gamma_R29);
    assume {:captureState "2420$1"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(Cse0__5$1$0, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(Cse0__5$1$0, 8bv64), Gamma_R30);
    assume {:captureState "2420$2"} true;
    R31, Gamma_R31 := Cse0__5$1$0, Gamma_Cse0__5$1$0;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R19), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R19);
    assume {:captureState "2424$0"} true;
    R29, Gamma_R29 := R31, Gamma_R31;
    R19, Gamma_R19 := 126976bv64, true;
    call rely();
    $load20, Gamma_$load20 := memory_load64_le(mem, bvadd64(R19, 4088bv64)), (gamma_load64(Gamma_mem, bvadd64(R19, 4088bv64)) || L(mem, bvadd64(R19, 4088bv64)));
    R19, Gamma_R19 := $load20, Gamma_$load20;
    call rely();
    $load21, Gamma_$load21 := memory_load64_le(mem, R19), (gamma_load64(Gamma_mem, R19) || L(mem, R19));
    R8, Gamma_R8 := $load21, Gamma_$load21;
    R30, Gamma_R30 := 2076bv64, true;
    call add_two();
    goto $main$__1__$rCSSdLZcRB2TKAu9h~WCqg;
  $main$__1__$rCSSdLZcRB2TKAu9h~WCqg:
    assume {:captureState "$main$__1__$rCSSdLZcRB2TKAu9h~WCqg"} true;
    call rely();
    $load23, Gamma_$load23 := memory_load64_le(mem, bvadd64(R19, 8bv64)), (gamma_load64(Gamma_mem, bvadd64(R19, 8bv64)) || L(mem, bvadd64(R19, 8bv64)));
    R8, Gamma_R8 := $load23, Gamma_$load23;
    R30, Gamma_R30 := 2056bv64, true;
    call add_six();
    goto $main$__2__$ZLfuz7OtTNOS9GLtqSI1gg;
  $main$__2__$ZLfuz7OtTNOS9GLtqSI1gg:
    assume {:captureState "$main$__2__$ZLfuz7OtTNOS9GLtqSI1gg"} true;
    call rely();
    $load22, Gamma_$load22 := memory_load64_le(mem, bvadd64(R19, 16bv64)), (gamma_load64(Gamma_mem, bvadd64(R19, 16bv64)) || L(mem, bvadd64(R19, 16bv64)));
    R8, Gamma_R8 := $load22, Gamma_$load22;
    R30, Gamma_R30 := 2056bv64, true;
    call sub_seven();
    goto $main$__3__$HVqN0_3~RWiLPKsHRvUqeg;
  $main$__3__$HVqN0_3~RWiLPKsHRvUqeg:
    assume {:captureState "$main$__3__$HVqN0_3~RWiLPKsHRvUqeg"} true;
    R0, Gamma_R0 := 0bv64, true;
    $load17, Gamma_$load17 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R19, Gamma_R19 := $load17, Gamma_$load17;
    $load18, Gamma_$load18 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R29, Gamma_R29 := $load18, Gamma_$load18;
    $load19, Gamma_$load19 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R30, Gamma_R30 := $load19, Gamma_$load19;
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto main_basil_return;
  main_basil_return:
    assume {:captureState "main_basil_return"} true;
    return;
}

procedure add_six();
  modifies Gamma_R8, Gamma_R9, Gamma_mem, R8, R9, mem;
  free requires (memory_load32_le(mem, 2500bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 130424bv64) == 2320bv64);
  free requires (memory_load64_le(mem, 130432bv64) == 2240bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 131088bv64);
  free requires (memory_load64_le(mem, 131048bv64) == 2420bv64);
  free requires (memory_load64_le(mem, 131064bv64) == 131096bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free requires (memory_load64_le(mem, 131096bv64) == 2324bv64);
  free requires (memory_load64_le(mem, 131104bv64) == 2356bv64);
  free requires (memory_load64_le(mem, 131112bv64) == 2388bv64);
  free ensures (memory_load32_le(mem, 2500bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 130424bv64) == 2320bv64);
  free ensures (memory_load64_le(mem, 130432bv64) == 2240bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 131088bv64);
  free ensures (memory_load64_le(mem, 131048bv64) == 2420bv64);
  free ensures (memory_load64_le(mem, 131064bv64) == 131096bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free ensures (memory_load64_le(mem, 131096bv64) == 2324bv64);
  free ensures (memory_load64_le(mem, 131104bv64) == 2356bv64);
  free ensures (memory_load64_le(mem, 131112bv64) == 2388bv64);

implementation add_six()
{
  var $load24: bv64;
  var $load25: bv32;
  var Gamma_$load24: bool;
  var Gamma_$load25: bool;
  $add_six$__0__$mmpaLvZYQk2b8selWCLriA:
    assume {:captureState "$add_six$__0__$mmpaLvZYQk2b8selWCLriA"} true;
    R8, Gamma_R8 := 126976bv64, true;
    call rely();
    $load24, Gamma_$load24 := memory_load64_le(mem, bvadd64(R8, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4056bv64)) || L(mem, bvadd64(R8, 4056bv64)));
    R8, Gamma_R8 := $load24, Gamma_$load24;
    call rely();
    $load25, Gamma_$load25 := memory_load32_le(mem, R8), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R9, Gamma_R9 := zero_extend32_32($load25), Gamma_$load25;
    R9, Gamma_R9 := zero_extend32_32(bvadd32(R9[32:0], 6bv32)), Gamma_R9;
    call rely();
    assert (L(mem, R8) ==> Gamma_R9);
    mem, Gamma_mem := memory_store32_le(mem, R8, R9[32:0]), gamma_store32(Gamma_mem, R8, Gamma_R9);
    assume {:captureState "2372$0"} true;
    R8, Gamma_R8 := 0bv64, true;
    R9, Gamma_R9 := 0bv64, true;
    goto add_six_basil_return;
  add_six_basil_return:
    assume {:captureState "add_six_basil_return"} true;
    return;
}

procedure sub_seven();
  modifies Gamma_R8, Gamma_R9, Gamma_mem, R8, R9, mem;
  free requires (memory_load32_le(mem, 2500bv64) == 131073bv32);
  free requires (memory_load64_le(mem, 130424bv64) == 2320bv64);
  free requires (memory_load64_le(mem, 130432bv64) == 2240bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 131088bv64);
  free requires (memory_load64_le(mem, 131048bv64) == 2420bv64);
  free requires (memory_load64_le(mem, 131064bv64) == 131096bv64);
  free requires (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free requires (memory_load64_le(mem, 131096bv64) == 2324bv64);
  free requires (memory_load64_le(mem, 131104bv64) == 2356bv64);
  free requires (memory_load64_le(mem, 131112bv64) == 2388bv64);
  free ensures (memory_load32_le(mem, 2500bv64) == 131073bv32);
  free ensures (memory_load64_le(mem, 130424bv64) == 2320bv64);
  free ensures (memory_load64_le(mem, 130432bv64) == 2240bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 131088bv64);
  free ensures (memory_load64_le(mem, 131048bv64) == 2420bv64);
  free ensures (memory_load64_le(mem, 131064bv64) == 131096bv64);
  free ensures (memory_load64_le(mem, 131080bv64) == 131080bv64);
  free ensures (memory_load64_le(mem, 131096bv64) == 2324bv64);
  free ensures (memory_load64_le(mem, 131104bv64) == 2356bv64);
  free ensures (memory_load64_le(mem, 131112bv64) == 2388bv64);

implementation sub_seven()
{
  var $load27: bv64;
  var $load28: bv32;
  var Gamma_$load27: bool;
  var Gamma_$load28: bool;
  $sub_seven$__0__$6JJvkaLhTaWXaEL0~yxKxg:
    assume {:captureState "$sub_seven$__0__$6JJvkaLhTaWXaEL0~yxKxg"} true;
    R8, Gamma_R8 := 126976bv64, true;
    call rely();
    $load27, Gamma_$load27 := memory_load64_le(mem, bvadd64(R8, 4056bv64)), (gamma_load64(Gamma_mem, bvadd64(R8, 4056bv64)) || L(mem, bvadd64(R8, 4056bv64)));
    R8, Gamma_R8 := $load27, Gamma_$load27;
    call rely();
    $load28, Gamma_$load28 := memory_load32_le(mem, R8), (gamma_load32(Gamma_mem, R8) || L(mem, R8));
    R9, Gamma_R9 := zero_extend32_32($load28), Gamma_$load28;
    R9, Gamma_R9 := zero_extend32_32(bvadd32(R9[32:0], 4294967289bv32)), Gamma_R9;
    call rely();
    assert (L(mem, R8) ==> Gamma_R9);
    mem, Gamma_mem := memory_store32_le(mem, R8, R9[32:0]), gamma_store32(Gamma_mem, R8, Gamma_R9);
    assume {:captureState "2404$0"} true;
    R8, Gamma_R8 := 0bv64, true;
    R9, Gamma_R9 := 0bv64, true;
    goto sub_seven_basil_return;
  sub_seven_basil_return:
    assume {:captureState "sub_seven_basil_return"} true;
    return;
}

