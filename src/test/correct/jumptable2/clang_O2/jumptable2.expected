var {:extern} Gamma_R0: bool;
var {:extern} Gamma_R19: bool;
var {:extern} Gamma_R29: bool;
var {:extern} Gamma_R30: bool;
var {:extern} Gamma_R31: bool;
var {:extern} Gamma_R8: bool;
var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} R0: bv64;
var {:extern} R19: bv64;
var {:extern} R29: bv64;
var {:extern} R30: bv64;
var {:extern} R31: bv64;
var {:extern} R8: bv64;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2080bv64);
const {:extern} $jump_table_addr: bv64;
axiom ($jump_table_addr == 131128bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 131120bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  gammaMap[index := value][bvadd64(index, 1bv64) := value][bvadd64(index, 2bv64) := value][bvadd64(index, 3bv64) := value][bvadd64(index, 4bv64) := value][bvadd64(index, 5bv64) := value][bvadd64(index, 6bv64) := value][bvadd64(index, 7bv64) := value]
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  memory[index := value[8:0]][bvadd64(index, 1bv64) := value[16:8]][bvadd64(index, 2bv64) := value[24:16]][bvadd64(index, 3bv64) := value[32:24]][bvadd64(index, 4bv64) := value[40:32]][bvadd64(index, 5bv64) := value[48:40]][bvadd64(index, 6bv64) := value[56:48]][bvadd64(index, 7bv64) := value[64:56]]
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2080bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2081bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2082bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2083bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free ensures (memory_load64_le(mem, 131144bv64) == 1980bv64);
  free ensures (memory_load64_le(mem, 130488bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 131136bv64) == 1960bv64);
  free ensures (memory_load64_le(mem, 131128bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 1856bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure main();
  modifies Gamma_R0, Gamma_R19, Gamma_R29, Gamma_R30, Gamma_R31, Gamma_R8, Gamma_mem, Gamma_stack, R0, R19, R29, R30, R31, R8, mem, stack;
  free requires (memory_load64_le(mem, 131104bv64) == 0bv64);
  free requires (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free requires (memory_load64_le(mem, 131120bv64) == 5bv64);
  free requires (memory_load64_le(mem, 131128bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 131136bv64) == 1960bv64);
  free requires (memory_load64_le(mem, 131144bv64) == 1980bv64);
  free requires (memory_load8_le(mem, 2080bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2081bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2082bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2083bv64) == 0bv8);
  free requires (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free requires (memory_load64_le(mem, 131144bv64) == 1980bv64);
  free requires (memory_load64_le(mem, 130488bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 131032bv64) == 2000bv64);
  free requires (memory_load64_le(mem, 131136bv64) == 1960bv64);
  free requires (memory_load64_le(mem, 131128bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 130496bv64) == 1856bv64);
  free ensures (Gamma_R19 == old(Gamma_R19));
  free ensures (Gamma_R29 == old(Gamma_R29));
  free ensures (Gamma_R31 == old(Gamma_R31));
  free ensures (R19 == old(R19));
  free ensures (R29 == old(R29));
  free ensures (R31 == old(R31));
  free ensures (memory_load8_le(mem, 2080bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2081bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2082bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2083bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 131112bv64) == 131112bv64);
  free ensures (memory_load64_le(mem, 131144bv64) == 1980bv64);
  free ensures (memory_load64_le(mem, 130488bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 131032bv64) == 2000bv64);
  free ensures (memory_load64_le(mem, 131136bv64) == 1960bv64);
  free ensures (memory_load64_le(mem, 131128bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 130496bv64) == 1856bv64);

implementation main()
{
  var #4: bv64;
  var Gamma_#4: bool;
  lmain:
    assume {:captureState "lmain"} true;
    #4, Gamma_#4 := bvadd64(R31, 18446744073709551584bv64), Gamma_R31;
    stack, Gamma_stack := memory_store64_le(stack, #4, R29), gamma_store64(Gamma_stack, #4, Gamma_R29);
    assume {:captureState "%00000389"} true;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(#4, 8bv64), R30), gamma_store64(Gamma_stack, bvadd64(#4, 8bv64), Gamma_R30);
    assume {:captureState "%0000038f"} true;
    R31, Gamma_R31 := #4, Gamma_#4;
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31, 16bv64), R19), gamma_store64(Gamma_stack, bvadd64(R31, 16bv64), Gamma_R19);
    assume {:captureState "%0000039b"} true;
    R29, Gamma_R29 := R31, Gamma_R31;
    R19, Gamma_R19 := 131072bv64, true;
    R19, Gamma_R19 := bvadd64(R19, 56bv64), Gamma_R19;
    call rely();
    R8, Gamma_R8 := memory_load64_le(mem, R19), (gamma_load64(Gamma_mem, R19) || L(mem, R19));
    R30, Gamma_R30 := 2028bv64, true;
    //UNRESOLVED: call R8
    assert false;
    goto l000003bd;
  l000003bd:
    assume {:captureState "l000003bd"} true;
    call rely();
    R8, Gamma_R8 := memory_load64_le(mem, bvadd64(R19, 8bv64)), (gamma_load64(Gamma_mem, bvadd64(R19, 8bv64)) || L(mem, bvadd64(R19, 8bv64)));
    R30, Gamma_R30 := 2036bv64, true;
    //UNRESOLVED: call R8
    assert false;
    goto l000003cc;
  l000003cc:
    assume {:captureState "l000003cc"} true;
    call rely();
    R8, Gamma_R8 := memory_load64_le(mem, bvadd64(R19, 16bv64)), (gamma_load64(Gamma_mem, bvadd64(R19, 16bv64)) || L(mem, bvadd64(R19, 16bv64)));
    R30, Gamma_R30 := 2044bv64, true;
    //UNRESOLVED: call R8
    assert false;
    goto l000003db;
  l000003db:
    assume {:captureState "l000003db"} true;
    R0, Gamma_R0 := 0bv64, true;
    R19, Gamma_R19 := memory_load64_le(stack, bvadd64(R31, 16bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 16bv64));
    R29, Gamma_R29 := memory_load64_le(stack, R31), gamma_load64(Gamma_stack, R31);
    R30, Gamma_R30 := memory_load64_le(stack, bvadd64(R31, 8bv64)), gamma_load64(Gamma_stack, bvadd64(R31, 8bv64));
    R31, Gamma_R31 := bvadd64(R31, 32bv64), Gamma_R31;
    goto main_return;
  main_return:
    assume {:captureState "main_return"} true;
    return;
}

