var {:extern} Gamma_mem: [bv64]bool;
var {:extern} Gamma_stack: [bv64]bool;
var {:extern} mem: [bv64]bv8;
var {:extern} stack: [bv64]bv8;
const {:extern} $_IO_stdin_used_addr: bv64;
axiom ($_IO_stdin_used_addr == 2144bv64);
const {:extern} $jump_table_addr: bv64;
axiom ($jump_table_addr == 69656bv64);
const {:extern} $x_addr: bv64;
axiom ($x_addr == 69648bv64);
function {:extern} L(memory: [bv64]bv8, index: bv64) returns (bool) {
  false
}

function {:extern} {:bvbuiltin "bvadd"} bvadd32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvadd"} bvadd64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr32(bv32, bv32) returns (bv32);
function {:extern} {:bvbuiltin "bvlshr"} bvlshr64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvmul"} bvmul64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvsub"} bvsub64(bv64, bv64) returns (bv64);
function {:extern} {:bvbuiltin "bvule"} bvule64(bv64, bv64) returns (bool);
function {:extern} {:bvbuiltin "bvult"} bvult64(bv64, bv64) returns (bool);
function {:inline} byte_extract32_64(value: bv32, offset: bv64) returns (bv8) {
  bvlshr32(value,bvmul64(offset,8bv64)[32:0])[8:0]
}

function {:inline} byte_extract64_64(value: bv64, offset: bv64) returns (bv8) {
  bvlshr64(value,bvmul64(offset,8bv64))[8:0]
}

function {:extern} gamma_load32(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))
}

function {:extern} gamma_load64(gammaMap: [bv64]bool, index: bv64) returns (bool) {
  (gammaMap[bvadd64(index, 7bv64)] && (gammaMap[bvadd64(index, 6bv64)] && (gammaMap[bvadd64(index, 5bv64)] && (gammaMap[bvadd64(index, 4bv64)] && (gammaMap[bvadd64(index, 3bv64)] && (gammaMap[bvadd64(index, 2bv64)] && (gammaMap[bvadd64(index, 1bv64)] && gammaMap[index])))))))
}

function {:extern} gamma_store32(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then value else gammaMap[i])))
}

function {:extern} gamma_store64(gammaMap: [bv64]bool, index: bv64, value: bool) returns ([bv64]bool) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then value else gammaMap[i])))
}

function {:inline} in_bounds64_le(base: bv64, len: bv64, i: bv64) returns (bool) {
  (if bvule64(base, bvadd64(base, len)) then (bvule64(base, i) && bvult64(i, bvadd64(base, len))) else (bvule64(base, i) || bvult64(i, bvadd64(base, len))))
}

function {:extern} memory_load32_le(memory: [bv64]bv8, index: bv64) returns (bv32) {
  (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))
}

function {:extern} memory_load64_le(memory: [bv64]bv8, index: bv64) returns (bv64) {
  (memory[bvadd64(index, 7bv64)] ++ (memory[bvadd64(index, 6bv64)] ++ (memory[bvadd64(index, 5bv64)] ++ (memory[bvadd64(index, 4bv64)] ++ (memory[bvadd64(index, 3bv64)] ++ (memory[bvadd64(index, 2bv64)] ++ (memory[bvadd64(index, 1bv64)] ++ memory[index])))))))
}

function {:extern} memory_load8_le(memory: [bv64]bv8, index: bv64) returns (bv8) {
  memory[index]
}

function {:extern} memory_store32_le(memory: [bv64]bv8, index: bv64, value: bv32) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 4bv64, i) then byte_extract32_64(value, bvsub64(i, index)) else memory[i])))
}

function {:extern} memory_store64_le(memory: [bv64]bv8, index: bv64, value: bv64) returns ([bv64]bv8) {
  (lambda i: bv64 :: ((if in_bounds64_le(index, 8bv64, i) then byte_extract64_64(value, bvsub64(i, index)) else memory[i])))
}

procedure {:extern} rely();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));
  free ensures (memory_load8_le(mem, 2144bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2145bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2146bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2147bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69608bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 69656bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69664bv64) == 1976bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69624bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69648bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

procedure {:extern} rely_transitive();
  modifies Gamma_mem, mem;
  ensures (mem == old(mem));
  ensures (Gamma_mem == old(Gamma_mem));

implementation {:extern} rely_transitive()
{
  call rely();
  call rely();
}

procedure {:extern} rely_reflexive();

procedure {:extern} guarantee_reflexive();
  modifies Gamma_mem, mem;

procedure add_two();
  modifies Gamma_mem, mem;
  free requires (memory_load8_le(mem, 2144bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2145bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2146bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2147bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69608bv64) == 2048bv64);
  free requires (memory_load64_le(mem, 69656bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69664bv64) == 1976bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69624bv64) == 69656bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 69648bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2144bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2145bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2146bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2147bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69608bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 69656bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69664bv64) == 1976bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69624bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69648bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation add_two()
{
  var Gamma_R0_2: bool;
  var Gamma_R0_3: bool;
  var Gamma_R0_5: bool;
  var Gamma_R1_1: bool;
  var R0_2: bv64;
  var R0_3: bv32;
  var R0_5: bv64;
  var R1_1: bv32;
  $add_two$__0__$ACkGoC6ATEib99m8m22xRg:
    call rely();
    R0_2, Gamma_R0_2 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    R0_3, Gamma_R0_3 := memory_load32_le(mem, R0_2), (gamma_load32(Gamma_mem, R0_2) || L(mem, R0_2));
    R1_1, Gamma_R1_1 := bvadd32(R0_3, 2bv32), Gamma_R0_3;
    call rely();
    R0_5, Gamma_R0_5 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    assert (L(mem, R0_5) ==> Gamma_R1_1);
    mem, Gamma_mem := memory_store32_le(mem, R0_5, R1_1), gamma_store32(Gamma_mem, R0_5, Gamma_R1_1);
    goto add_two_basil_return;
  add_two_basil_return:
    return;
}

procedure sub_seven();
  modifies Gamma_mem, mem;
  free requires (memory_load8_le(mem, 2144bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2145bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2146bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2147bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69608bv64) == 2048bv64);
  free requires (memory_load64_le(mem, 69656bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69664bv64) == 1976bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69624bv64) == 69656bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 69648bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2144bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2145bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2146bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2147bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69608bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 69656bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69664bv64) == 1976bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69624bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69648bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation sub_seven()
{
  var Gamma_R0_2: bool;
  var Gamma_R0_3: bool;
  var Gamma_R0_5: bool;
  var Gamma_R1_1: bool;
  var R0_2: bv64;
  var R0_3: bv32;
  var R0_5: bv64;
  var R1_1: bv32;
  $sub_seven$__0__$mxkvrZFjT0OVHvaLG5jKfA:
    call rely();
    R0_2, Gamma_R0_2 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    R0_3, Gamma_R0_3 := memory_load32_le(mem, R0_2), (gamma_load32(Gamma_mem, R0_2) || L(mem, R0_2));
    R1_1, Gamma_R1_1 := bvadd32(R0_3, 4294967289bv32), Gamma_R0_3;
    call rely();
    R0_5, Gamma_R0_5 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    assert (L(mem, R0_5) ==> Gamma_R1_1);
    mem, Gamma_mem := memory_store32_le(mem, R0_5, R1_1), gamma_store32(Gamma_mem, R0_5, Gamma_R1_1);
    goto sub_seven_basil_return;
  sub_seven_basil_return:
    return;
}

procedure main(R0_in: bv64, Gamma_R0_in: bool, R1_in: bv64, Gamma_R1_in: bool, R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R29_out: bv64, Gamma_R29_out: bool, R30_out: bv64, Gamma_R30_out: bool, R31_out: bv64, Gamma_R31_out: bool);
  modifies Gamma_mem, Gamma_stack, mem, stack;
  free requires (memory_load64_le(mem, 69632bv64) == 0bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free requires (memory_load64_le(mem, 69648bv64) == 5bv64);
  free requires (memory_load64_le(mem, 69656bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69664bv64) == 1976bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 2012bv64);
  free requires (memory_load8_le(mem, 2144bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2145bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2146bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2147bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69608bv64) == 2048bv64);
  free requires (memory_load64_le(mem, 69656bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69664bv64) == 1976bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69624bv64) == 69656bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 69648bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2144bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2145bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2146bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2147bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69608bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 69656bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69664bv64) == 1976bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69624bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69648bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation main(R0_in: bv64, Gamma_R0_in: bool, R1_in: bv64, Gamma_R1_in: bool, R29_in: bv64, Gamma_R29_in: bool, R30_in: bv64, Gamma_R30_in: bool, R31_in: bv64, Gamma_R31_in: bool) returns (R0_out: bv64, Gamma_R0_out: bool, R1_out: bv64, Gamma_R1_out: bool, R29_out: bv64, Gamma_R29_out: bool, R30_out: bv64, Gamma_R30_out: bool, R31_out: bv64, Gamma_R31_out: bool)
{
  var Gamma_R29_3: bool;
  var Gamma_R30_5: bool;
  var R29_3: bv64;
  var R30_5: bv64;
  $main$__0__$WpLalhBxTN28CzXBzaW2jg:
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551584bv64), R29_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551584bv64), Gamma_R29_in);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551592bv64), R30_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64), Gamma_R30_in);
    stack, Gamma_stack := memory_store32_le(stack, bvadd64(R31_in, 18446744073709551612bv64), R0_in[32:0]), gamma_store32(Gamma_stack, bvadd64(R31_in, 18446744073709551612bv64), Gamma_R0_in);
    stack, Gamma_stack := memory_store64_le(stack, bvadd64(R31_in, 18446744073709551600bv64), R1_in), gamma_store64(Gamma_stack, bvadd64(R31_in, 18446744073709551600bv64), Gamma_R1_in);
    call add_two();
    goto $main$__1__$sDnYWAohRBuHbEQ~zVQGsQ;
  $main$__1__$sDnYWAohRBuHbEQ~zVQGsQ:
    call add_six();
    goto $main$__2__$L~8jkqoxTpihgr9AvP0~jA;
  $main$__2__$L~8jkqoxTpihgr9AvP0~jA:
    call sub_seven();
    goto $main$__3__$QIGh3XotTZ6dibPcFRtsag;
  $main$__3__$QIGh3XotTZ6dibPcFRtsag:
    R29_3, Gamma_R29_3 := memory_load64_le(stack, bvadd64(R31_in, 18446744073709551584bv64)), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551584bv64));
    R30_5, Gamma_R30_5 := memory_load64_le(stack, bvadd64(R31_in, 18446744073709551592bv64)), gamma_load64(Gamma_stack, bvadd64(R31_in, 18446744073709551592bv64));
    goto main_basil_return;
  main_basil_return:
    R0_out, R1_out, R29_out, R30_out, R31_out := 0bv64, R1_in, R29_3, R30_5, R31_in;
    Gamma_R0_out, Gamma_R1_out, Gamma_R29_out, Gamma_R30_out, Gamma_R31_out := true, Gamma_R1_in, Gamma_R29_3, Gamma_R30_5, Gamma_R31_in;
    return;
}

procedure add_six();
  modifies Gamma_mem, mem;
  free requires (memory_load8_le(mem, 2144bv64) == 1bv8);
  free requires (memory_load8_le(mem, 2145bv64) == 0bv8);
  free requires (memory_load8_le(mem, 2146bv64) == 2bv8);
  free requires (memory_load8_le(mem, 2147bv64) == 0bv8);
  free requires (memory_load64_le(mem, 69608bv64) == 2048bv64);
  free requires (memory_load64_le(mem, 69656bv64) == 1940bv64);
  free requires (memory_load64_le(mem, 69664bv64) == 1976bv64);
  free requires (memory_load64_le(mem, 69008bv64) == 1856bv64);
  free requires (memory_load64_le(mem, 69624bv64) == 69656bv64);
  free requires (memory_load64_le(mem, 69592bv64) == 69648bv64);
  free requires (memory_load64_le(mem, 69000bv64) == 1936bv64);
  free requires (memory_load64_le(mem, 69672bv64) == 2012bv64);
  free requires (memory_load64_le(mem, 69640bv64) == 69640bv64);
  free ensures (memory_load8_le(mem, 2144bv64) == 1bv8);
  free ensures (memory_load8_le(mem, 2145bv64) == 0bv8);
  free ensures (memory_load8_le(mem, 2146bv64) == 2bv8);
  free ensures (memory_load8_le(mem, 2147bv64) == 0bv8);
  free ensures (memory_load64_le(mem, 69608bv64) == 2048bv64);
  free ensures (memory_load64_le(mem, 69656bv64) == 1940bv64);
  free ensures (memory_load64_le(mem, 69664bv64) == 1976bv64);
  free ensures (memory_load64_le(mem, 69008bv64) == 1856bv64);
  free ensures (memory_load64_le(mem, 69624bv64) == 69656bv64);
  free ensures (memory_load64_le(mem, 69592bv64) == 69648bv64);
  free ensures (memory_load64_le(mem, 69000bv64) == 1936bv64);
  free ensures (memory_load64_le(mem, 69672bv64) == 2012bv64);
  free ensures (memory_load64_le(mem, 69640bv64) == 69640bv64);

implementation add_six()
{
  var Gamma_R0_2: bool;
  var Gamma_R0_3: bool;
  var Gamma_R0_5: bool;
  var Gamma_R1_1: bool;
  var R0_2: bv64;
  var R0_3: bv32;
  var R0_5: bv64;
  var R1_1: bv32;
  $add_six$__0__$csIZPpeWTza5lU2dTuTP6g:
    call rely();
    R0_2, Gamma_R0_2 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    R0_3, Gamma_R0_3 := memory_load32_le(mem, R0_2), (gamma_load32(Gamma_mem, R0_2) || L(mem, R0_2));
    R1_1, Gamma_R1_1 := bvadd32(R0_3, 6bv32), Gamma_R0_3;
    call rely();
    R0_5, Gamma_R0_5 := memory_load64_le(mem, 69592bv64), (gamma_load64(Gamma_mem, 69592bv64) || L(mem, 69592bv64));
    call rely();
    assert (L(mem, R0_5) ==> Gamma_R1_1);
    mem, Gamma_mem := memory_store32_le(mem, R0_5, R1_1), gamma_store32(Gamma_mem, R0_5, Gamma_R1_1);
    goto add_six_basil_return;
  add_six_basil_return:
    return;
}

