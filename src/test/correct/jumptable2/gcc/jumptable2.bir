00000793: program
0000075b: sub __cxa_finalize(__cxa_finalize_result)
00000794: __cxa_finalize_result :: out u32 = low:32[R0]

000004c3:
000005bb: R16 := 0x20000
000005c2: R17 := mem[R16 + 8, el]:u64
000005c8: R16 := R16 + 8
000005cd: call R17 with noreturn

0000075c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000795: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000307:
0000030b: #3 := R31 - 0x20
00000311: mem := mem with [#3, el]:u64 <- R29
00000317: mem := mem with [#3 + 8, el]:u64 <- R30
0000031b: R31 := #3
00000321: R29 := R31
00000329: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000032e: R19 := 0x20000
00000335: R0 := pad:64[mem[R19 + 0x50]]
0000033b: when 0:0[R0] goto %00000339
00000789: goto %0000048c

0000048c:
0000048f: R0 := 0x1F000
00000496: R0 := mem[R0 + 0xFC8, el]:u64
0000049c: when R0 = 0 goto %0000049a
0000078a: goto %000004b3

000004b3:
000004b6: R0 := 0x20000
000004bd: R0 := mem[R0 + 0x28, el]:u64
000004c2: R30 := 0x730
000004c5: call @__cxa_finalize with return %0000049a

0000049a:
000004a2: R30 := 0x734
000004a4: call @deregister_tm_clones with return %000004a6

000004a6:
000004a9: R0 := 1
000004b1: mem := mem with [R19 + 0x50] <- 7:0[R0]
0000078b: goto %00000339

00000339:
00000343: R19 := mem[R31 + 0x10, el]:u64
0000034a: R29 := mem[R31, el]:u64
0000034f: R30 := mem[R31 + 8, el]:u64
00000353: R31 := R31 + 0x20
00000358: call R30 with noreturn

00000760: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000796: __libc_start_main_main :: in u64 = R0
00000797: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000798: __libc_start_main_arg3 :: in out u64 = R2
00000799: __libc_start_main_auxv :: in out u64 = R3
0000079a: __libc_start_main_result :: out u32 = low:32[R0]

00000260:
000005a5: R16 := 0x20000
000005ac: R17 := mem[R16, el]:u64
000005b2: R16 := R16
000005b7: call R17 with noreturn

00000761: sub _fini(_fini_result)
0000079b: _fini_result :: out u32 = low:32[R0]

00000020:
00000026: #0 := R31 - 0x10
0000002c: mem := mem with [#0, el]:u64 <- R29
00000032: mem := mem with [#0 + 8, el]:u64 <- R30
00000036: R31 := #0
0000003c: R29 := R31
00000043: R29 := mem[R31, el]:u64
00000048: R30 := mem[R31 + 8, el]:u64
0000004c: R31 := R31 + 0x10
00000051: call R30 with noreturn

00000762: sub _init(_init_result)
0000079c: _init_result :: out u32 = low:32[R0]

0000068f:
00000695: #6 := R31 - 0x10
0000069b: mem := mem with [#6, el]:u64 <- R29
000006a1: mem := mem with [#6 + 8, el]:u64 <- R30
000006a5: R31 := #6
000006ab: R29 := R31
000006b0: R30 := 0x5D8
000006b2: call @call_weak_fn with return %000006b4

000006b4:
000006b9: R29 := mem[R31, el]:u64
000006be: R30 := mem[R31 + 8, el]:u64
000006c2: R31 := R31 + 0x10
000006c7: call R30 with noreturn

00000763: sub _start(_start_result)
0000079d: _start_result :: out u32 = low:32[R0]

00000221:
00000226: R29 := 0
0000022b: R30 := 0
00000231: R5 := R0
00000238: R1 := mem[R31, el]:u64
0000023e: R2 := R31 + 8
00000244: R6 := R31
00000249: R0 := 0x1F000
00000250: R0 := mem[R0 + 0xFD8, el]:u64
00000255: R3 := 0
0000025a: R4 := 0
0000025f: R30 := 0x670
00000262: call @__libc_start_main with return %00000264

00000264:
00000267: R30 := 0x674
0000026a: call @abort with return %0000078c

0000078c:
0000078d: call @call_weak_fn with noreturn

00000766: sub abort()


00000268:
000005e7: R16 := 0x20000
000005ee: R17 := mem[R16 + 0x18, el]:u64
000005f4: R16 := R16 + 0x18
000005f9: call R17 with noreturn

00000767: sub add_six(add_six_result)
0000079e: add_six_result :: out u32 = low:32[R0]

00000394:
00000397: R0 := 0x20000
0000039d: R0 := R0 + 0x30
000003a4: R0 := pad:64[mem[R0, el]:u32]
000003aa: R1 := pad:64[31:0[R0] + 6]
000003af: R0 := 0x20000
000003b5: R0 := R0 + 0x30
000003bd: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003c4: call R30 with noreturn

00000768: sub add_two(add_two_result)
0000079f: add_two_result :: out u32 = low:32[R0]

00000362:
00000365: R0 := 0x20000
0000036b: R0 := R0 + 0x30
00000372: R0 := pad:64[mem[R0, el]:u32]
00000378: R1 := pad:64[31:0[R0] + 2]
0000037d: R0 := 0x20000
00000383: R0 := R0 + 0x30
0000038b: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000392: call R30 with noreturn

00000769: sub call_weak_fn(call_weak_fn_result)
000007a0: call_weak_fn_result :: out u32 = low:32[R0]

0000026c:
0000026f: R0 := 0x1F000
00000276: R0 := mem[R0 + 0xFD0, el]:u64
0000027c: when R0 = 0 goto %0000027a
0000078e: goto %00000503

0000027a:
00000282: call R30 with noreturn

00000503:
00000506: goto @__gmon_start__

00000504:
000005d1: R16 := 0x20000
000005d8: R17 := mem[R16 + 0x10, el]:u64
000005de: R16 := R16 + 0x10
000005e3: call R17 with noreturn

0000076b: sub deregister_tm_clones(deregister_tm_clones_result)
000007a1: deregister_tm_clones_result :: out u32 = low:32[R0]

00000288:
0000028b: R0 := 0x20000
00000291: R0 := R0 + 0x50
00000296: R1 := 0x20000
0000029c: R1 := R1 + 0x50
000002a2: #1 := ~R0
000002a7: #2 := R1 + ~R0
000002ad: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002b3: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002b7: ZF := #2 + 1 = 0
000002bb: NF := 63:63[#2 + 1]
000002c1: when ZF goto %000002bf
0000078f: goto %000004e5

000004e5:
000004e8: R1 := 0x1F000
000004ef: R1 := mem[R1 + 0xFC0, el]:u64
000004f4: when R1 = 0 goto %000002bf
00000790: goto %000004f8

000002bf:
000002c7: call R30 with noreturn

000004f8:
000004fc: R16 := R1
00000501: call R16 with noreturn

0000076e: sub frame_dummy(frame_dummy_result)
000007a2: frame_dummy_result :: out u32 = low:32[R0]

0000035e:
00000360: call @register_tm_clones with noreturn

0000076f: sub main(main_argc, main_argv, main_result)
000007a3: main_argc :: in u32 = low:32[R0]
000007a4: main_argv :: in out u64 = R1
000007a5: main_result :: out u32 = low:32[R0]

000003f8:
000003fc: #4 := R31 - 0x20
00000402: mem := mem with [#4, el]:u64 <- R29
00000408: mem := mem with [#4 + 8, el]:u64 <- R30
0000040c: R31 := #4
00000412: R29 := R31
0000041a: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000422: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000427: R0 := 0x20000
0000042d: R0 := R0 + 0x38
00000434: R0 := mem[R0, el]:u64
00000439: R30 := 0x7E0
0000043c: call R0 with return %0000043e

0000043e:
00000441: R0 := 0x20000
00000447: R0 := R0 + 0x38
0000044e: R0 := mem[R0 + 8, el]:u64
00000453: R30 := 0x7F0
00000456: call R0 with return %00000458

00000458:
0000045b: R0 := 0x20000
00000461: R0 := R0 + 0x38
00000468: R0 := mem[R0 + 0x10, el]:u64
0000046d: R30 := 0x800
00000470: call R0 with return %00000472

00000472:
00000475: R0 := 0
0000047c: R29 := mem[R31, el]:u64
00000481: R30 := mem[R31 + 8, el]:u64
00000485: R31 := R31 + 0x20
0000048a: call R30 with noreturn

00000770: sub register_tm_clones(register_tm_clones_result)
000007a6: register_tm_clones_result :: out u32 = low:32[R0]

000002c9:
000002cc: R0 := 0x20000
000002d2: R0 := R0 + 0x50
000002d7: R1 := 0x20000
000002dd: R1 := R1 + 0x50
000002e4: R1 := R1 + ~R0 + 1
000002ea: R2 := 0.63:63[R1]
000002f1: R1 := R2 + (R1 ~>> 3)
000002f7: R1 := extend:64[63:1[R1]]
000002fd: when R1 = 0 goto %000002fb
00000791: goto %000004c7

000004c7:
000004ca: R2 := 0x1F000
000004d1: R2 := mem[R2 + 0xFE0, el]:u64
000004d6: when R2 = 0 goto %000002fb
00000792: goto %000004da

000002fb:
00000303: call R30 with noreturn

000004da:
000004de: R16 := R2
000004e3: call R16 with noreturn

00000773: sub sub_seven(sub_seven_result)
000007a7: sub_seven_result :: out u32 = low:32[R0]

000003c6:
000003c9: R0 := 0x20000
000003cf: R0 := R0 + 0x30
000003d6: R0 := pad:64[mem[R0, el]:u32]
000003dc: R1 := pad:64[31:0[R0] - 7]
000003e1: R0 := 0x20000
000003e7: R0 := R0 + 0x30
000003ef: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003f6: call R30 with noreturn
