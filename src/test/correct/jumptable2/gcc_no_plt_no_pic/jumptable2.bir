00000ef5: program
00000edc: sub __cxa_finalize(__cxa_finalize_result)
00000ef6: __cxa_finalize_result :: out u32 = low:32[R0]

00000c44:
00000d3c: R16 := 0x10000
00000d43: R17 := mem[R16 + 0xFB8, el]:u64
00000d49: R16 := R16 + 0xFB8
00000d4e: call R17 with noreturn

00000edd: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000ef7: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000a87:
00000a8b: #3 := R31 - 0x20
00000a91: mem := mem with [#3, el]:u64 <- R29
00000a97: mem := mem with [#3 + 8, el]:u64 <- R30
00000a9b: R31 := #3
00000aa1: R29 := R31
00000aa9: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000aae: R19 := 0x11000
00000ab5: R0 := pad:64[mem[R19 + 0x30]]
00000abc: when 31:0[R0] <> 0 goto %00000aba
00000ede: goto %00000c0d

00000c0d:
00000c10: R0 := 0x10000
00000c17: R0 := mem[R0 + 0xFE0, el]:u64
00000c1d: when R0 = 0 goto %00000c1b
00000edf: goto %00000c34

00000c34:
00000c37: R0 := 0x11000
00000c3e: R0 := mem[R0 + 8, el]:u64
00000c43: R30 := 0x730
00000c46: call @__cxa_finalize with return %00000c1b

00000c1b:
00000c23: R30 := 0x734
00000c25: call @deregister_tm_clones with return %00000c27

00000c27:
00000c2a: R0 := 1
00000c32: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000ee0: goto %00000aba

00000aba:
00000ac4: R19 := mem[R31 + 0x10, el]:u64
00000acb: R29 := mem[R31, el]:u64
00000ad0: R30 := mem[R31 + 8, el]:u64
00000ad4: R31 := R31 + 0x20
00000ad9: call R30 with noreturn

00000ee1: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000ef8: __libc_start_main_main :: in u64 = R0
00000ef9: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000efa: __libc_start_main_arg3 :: in out u64 = R2
00000efb: __libc_start_main_auxv :: in out u64 = R3
00000efc: __libc_start_main_result :: out u32 = low:32[R0]

000009e0:
00000d26: R16 := 0x10000
00000d2d: R17 := mem[R16 + 0xFB0, el]:u64
00000d33: R16 := R16 + 0xFB0
00000d38: call R17 with noreturn

00000ee2: sub _fini(_fini_result)
00000efd: _fini_result :: out u32 = low:32[R0]

000007a0:
000007a6: #0 := R31 - 0x10
000007ac: mem := mem with [#0, el]:u64 <- R29
000007b2: mem := mem with [#0 + 8, el]:u64 <- R30
000007b6: R31 := #0
000007bc: R29 := R31
000007c3: R29 := mem[R31, el]:u64
000007c8: R30 := mem[R31 + 8, el]:u64
000007cc: R31 := R31 + 0x10
000007d1: call R30 with noreturn

00000ee3: sub _init(_init_result)
00000efe: _init_result :: out u32 = low:32[R0]

00000e10:
00000e16: #6 := R31 - 0x10
00000e1c: mem := mem with [#6, el]:u64 <- R29
00000e22: mem := mem with [#6 + 8, el]:u64 <- R30
00000e26: R31 := #6
00000e2c: R29 := R31
00000e31: R30 := 0x5D8
00000e33: call @call_weak_fn with return %00000e35

00000e35:
00000e3a: R29 := mem[R31, el]:u64
00000e3f: R30 := mem[R31 + 8, el]:u64
00000e43: R31 := R31 + 0x10
00000e48: call R30 with noreturn

00000ee4: sub _start(_start_result)
00000eff: _start_result :: out u32 = low:32[R0]

000009a1:
000009a6: R29 := 0
000009ab: R30 := 0
000009b1: R5 := R0
000009b8: R1 := mem[R31, el]:u64
000009be: R2 := R31 + 8
000009c4: R6 := R31
000009c9: R0 := 0x10000
000009d0: R0 := mem[R0 + 0xFF0, el]:u64
000009d5: R3 := 0
000009da: R4 := 0
000009df: R30 := 0x670
000009e2: call @__libc_start_main with return %000009e4

000009e4:
000009e7: R30 := 0x674
000009ea: call @abort with return %00000ee5

00000ee5:
00000ee6: call @call_weak_fn with noreturn

00000ee7: sub abort()


000009e8:
00000d68: R16 := 0x10000
00000d6f: R17 := mem[R16 + 0xFC8, el]:u64
00000d75: R16 := R16 + 0xFC8
00000d7a: call R17 with noreturn

00000ee8: sub add_six(add_six_result)
00000f00: add_six_result :: out u32 = low:32[R0]

00000b15:
00000b18: R0 := 0x11000
00000b1e: R0 := R0 + 0x10
00000b25: R0 := pad:64[mem[R0, el]:u32]
00000b2b: R1 := pad:64[31:0[R0] + 6]
00000b30: R0 := 0x11000
00000b36: R0 := R0 + 0x10
00000b3e: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000b45: call R30 with noreturn

00000ee9: sub add_two(add_two_result)
00000f01: add_two_result :: out u32 = low:32[R0]

00000ae3:
00000ae6: R0 := 0x11000
00000aec: R0 := R0 + 0x10
00000af3: R0 := pad:64[mem[R0, el]:u32]
00000af9: R1 := pad:64[31:0[R0] + 2]
00000afe: R0 := 0x11000
00000b04: R0 := R0 + 0x10
00000b0c: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000b13: call R30 with noreturn

00000eea: sub call_weak_fn(call_weak_fn_result)
00000f02: call_weak_fn_result :: out u32 = low:32[R0]

000009ec:
000009ef: R0 := 0x10000
000009f6: R0 := mem[R0 + 0xFE8, el]:u64
000009fc: when R0 = 0 goto %000009fa
00000eeb: goto %00000c84

000009fa:
00000a02: call R30 with noreturn

00000c84:
00000c87: goto @__gmon_start__

00000c85:
00000d52: R16 := 0x10000
00000d59: R17 := mem[R16 + 0xFC0, el]:u64
00000d5f: R16 := R16 + 0xFC0
00000d64: call R17 with noreturn

00000eec: sub deregister_tm_clones(deregister_tm_clones_result)
00000f03: deregister_tm_clones_result :: out u32 = low:32[R0]

00000a08:
00000a0b: R0 := 0x11000
00000a11: R0 := R0 + 0x30
00000a16: R1 := 0x11000
00000a1c: R1 := R1 + 0x30
00000a22: #1 := ~R0
00000a27: #2 := R1 + ~R0
00000a2d: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000a33: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000a37: ZF := #2 + 1 = 0
00000a3b: NF := 63:63[#2 + 1]
00000a41: when ZF goto %00000a3f
00000eed: goto %00000c66

00000c66:
00000c69: R1 := 0x10000
00000c70: R1 := mem[R1 + 0xFD8, el]:u64
00000c75: when R1 = 0 goto %00000a3f
00000eee: goto %00000c79

00000a3f:
00000a47: call R30 with noreturn

00000c79:
00000c7d: R16 := R1
00000c82: call R16 with noreturn

00000eef: sub frame_dummy(frame_dummy_result)
00000f04: frame_dummy_result :: out u32 = low:32[R0]

00000adf:
00000ae1: call @register_tm_clones with noreturn

00000ef0: sub main(main_argc, main_argv, main_result)
00000f05: main_argc :: in u32 = low:32[R0]
00000f06: main_argv :: in out u64 = R1
00000f07: main_result :: out u32 = low:32[R0]

00000b79:
00000b7d: #4 := R31 - 0x20
00000b83: mem := mem with [#4, el]:u64 <- R29
00000b89: mem := mem with [#4 + 8, el]:u64 <- R30
00000b8d: R31 := #4
00000b93: R29 := R31
00000b9b: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000ba3: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000ba8: R0 := 0x11000
00000bae: R0 := R0 + 0x18
00000bb5: R0 := mem[R0, el]:u64
00000bba: R30 := 0x7E0
00000bbd: call R0 with return %00000bbf

00000bbf:
00000bc2: R0 := 0x11000
00000bc8: R0 := R0 + 0x18
00000bcf: R0 := mem[R0 + 8, el]:u64
00000bd4: R30 := 0x7F0
00000bd7: call R0 with return %00000bd9

00000bd9:
00000bdc: R0 := 0x11000
00000be2: R0 := R0 + 0x18
00000be9: R0 := mem[R0 + 0x10, el]:u64
00000bee: R30 := 0x800
00000bf1: call R0 with return %00000bf3

00000bf3:
00000bf6: R0 := 0
00000bfd: R29 := mem[R31, el]:u64
00000c02: R30 := mem[R31 + 8, el]:u64
00000c06: R31 := R31 + 0x20
00000c0b: call R30 with noreturn

00000ef1: sub register_tm_clones(register_tm_clones_result)
00000f08: register_tm_clones_result :: out u32 = low:32[R0]

00000a49:
00000a4c: R0 := 0x11000
00000a52: R0 := R0 + 0x30
00000a57: R1 := 0x11000
00000a5d: R1 := R1 + 0x30
00000a64: R1 := R1 + ~R0 + 1
00000a6a: R2 := 0.63:63[R1]
00000a71: R1 := R2 + (R1 ~>> 3)
00000a77: R1 := extend:64[63:1[R1]]
00000a7d: when R1 = 0 goto %00000a7b
00000ef2: goto %00000c48

00000c48:
00000c4b: R2 := 0x10000
00000c52: R2 := mem[R2 + 0xFF8, el]:u64
00000c57: when R2 = 0 goto %00000a7b
00000ef3: goto %00000c5b

00000a7b:
00000a83: call R30 with noreturn

00000c5b:
00000c5f: R16 := R2
00000c64: call R16 with noreturn

00000ef4: sub sub_seven(sub_seven_result)
00000f09: sub_seven_result :: out u32 = low:32[R0]

00000b47:
00000b4a: R0 := 0x11000
00000b50: R0 := R0 + 0x10
00000b57: R0 := pad:64[mem[R0, el]:u32]
00000b5d: R1 := pad:64[31:0[R0] - 7]
00000b62: R0 := 0x11000
00000b68: R0 := R0 + 0x10
00000b70: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000b77: call R30 with noreturn
