00000838: program
000007fc: sub __cxa_finalize(__cxa_finalize_result)
00000839: __cxa_finalize_result :: out u32 = low:32[R0]

000005a3:
000006ab: R16 := 0x10000
000006b2: R17 := mem[R16 + 0xFA8, el]:u64
000006b8: R16 := R16 + 0xFA8
000006bd: call R17 with noreturn

000007fd: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000083a: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000034a:
0000034e: #3 := R31 - 0x20
00000354: mem := mem with [#3, el]:u64 <- R29
0000035a: mem := mem with [#3 + 8, el]:u64 <- R30
0000035e: R31 := #3
00000364: R29 := R31
0000036c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000371: R19 := 0x11000
00000378: R0 := pad:64[mem[R19 + 0x30]]
0000037f: when 31:0[R0] <> 0 goto %0000037d
0000082d: goto %0000056c

0000056c:
0000056f: R0 := 0x10000
00000576: R0 := mem[R0 + 0xFD8, el]:u64
0000057c: when R0 = 0 goto %0000057a
0000082e: goto %00000593

00000593:
00000596: R0 := 0x11000
0000059d: R0 := mem[R0 + 8, el]:u64
000005a2: R30 := 0x830
000005a5: call @__cxa_finalize with return %0000057a

0000057a:
00000582: R30 := 0x834
00000584: call @deregister_tm_clones with return %00000586

00000586:
00000589: R0 := 1
00000591: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000082f: goto %0000037d

0000037d:
00000387: R19 := mem[R31 + 0x10, el]:u64
0000038e: R29 := mem[R31, el]:u64
00000393: R30 := mem[R31 + 8, el]:u64
00000397: R31 := R31 + 0x20
0000039c: call R30 with noreturn

00000801: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000083b: __libc_start_main_main :: in u64 = R0
0000083c: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000083d: __libc_start_main_arg3 :: in out u64 = R2
0000083e: __libc_start_main_auxv :: in out u64 = R3
0000083f: __libc_start_main_result :: out u32 = low:32[R0]

000002a3:
00000695: R16 := 0x10000
0000069c: R17 := mem[R16 + 0xFA0, el]:u64
000006a2: R16 := R16 + 0xFA0
000006a7: call R17 with noreturn

00000802: sub __stack_chk_fail(__stack_chk_fail_result)
00000840: __stack_chk_fail_result :: out u32 = low:32[R0]

00000568:
000006c1: R16 := 0x10000
000006c8: R17 := mem[R16 + 0xFB0, el]:u64
000006ce: R16 := R16 + 0xFB0
000006d3: call R17 with noreturn

00000803: sub _fini(_fini_result)
00000841: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000804: sub _init(_init_result)
00000842: _init_result :: out u32 = low:32[R0]

0000071b:
00000721: #8 := R31 - 0x10
00000727: mem := mem with [#8, el]:u64 <- R29
0000072d: mem := mem with [#8 + 8, el]:u64 <- R30
00000731: R31 := #8
00000737: R29 := R31
0000073c: R30 := 0x698
0000073e: call @call_weak_fn with return %00000740

00000740:
00000745: R29 := mem[R31, el]:u64
0000074a: R30 := mem[R31 + 8, el]:u64
0000074e: R31 := R31 + 0x10
00000753: call R30 with noreturn

00000805: sub _start(_start_result)
00000843: _start_result :: out u32 = low:32[R0]

00000264:
00000269: R29 := 0
0000026e: R30 := 0
00000274: R5 := R0
0000027b: R1 := mem[R31, el]:u64
00000281: R2 := R31 + 8
00000287: R6 := R31
0000028c: R0 := 0x10000
00000293: R0 := mem[R0 + 0xFF0, el]:u64
00000298: R3 := 0
0000029d: R4 := 0
000002a2: R30 := 0x770
000002a5: call @__libc_start_main with return %000002a7

000002a7:
000002aa: R30 := 0x774
000002ad: call @abort with return %00000830

00000830:
00000831: call @call_weak_fn with noreturn

00000808: sub abort()


000002ab:
000006ed: R16 := 0x10000
000006f4: R17 := mem[R16 + 0xFC0, el]:u64
000006fa: R16 := R16 + 0xFC0
000006ff: call R17 with noreturn

00000809: sub add_six(add_six_result)
00000844: add_six_result :: out u32 = low:32[R0]

000003d8:
000003db: R0 := 0x11000
000003e1: R0 := R0 + 0x10
000003e8: R0 := pad:64[mem[R0, el]:u32]
000003ee: R1 := pad:64[31:0[R0] + 6]
000003f3: R0 := 0x11000
000003f9: R0 := R0 + 0x10
00000401: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000408: call R30 with noreturn

0000080a: sub add_two(add_two_result)
00000845: add_two_result :: out u32 = low:32[R0]

000003a6:
000003a9: R0 := 0x11000
000003af: R0 := R0 + 0x10
000003b6: R0 := pad:64[mem[R0, el]:u32]
000003bc: R1 := pad:64[31:0[R0] + 2]
000003c1: R0 := 0x11000
000003c7: R0 := R0 + 0x10
000003cf: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003d6: call R30 with noreturn

0000080b: sub call_weak_fn(call_weak_fn_result)
00000846: call_weak_fn_result :: out u32 = low:32[R0]

000002af:
000002b2: R0 := 0x10000
000002b9: R0 := mem[R0 + 0xFE0, el]:u64
000002bf: when R0 = 0 goto %000002bd
00000832: goto %000005e3

000002bd:
000002c5: call R30 with noreturn

000005e3:
000005e6: goto @__gmon_start__

000005e4:
000006d7: R16 := 0x10000
000006de: R17 := mem[R16 + 0xFB8, el]:u64
000006e4: R16 := R16 + 0xFB8
000006e9: call R17 with noreturn

0000080d: sub deregister_tm_clones(deregister_tm_clones_result)
00000847: deregister_tm_clones_result :: out u32 = low:32[R0]

000002cb:
000002ce: R0 := 0x11000
000002d4: R0 := R0 + 0x30
000002d9: R1 := 0x11000
000002df: R1 := R1 + 0x30
000002e5: #1 := ~R0
000002ea: #2 := R1 + ~R0
000002f0: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002f6: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002fa: ZF := #2 + 1 = 0
000002fe: NF := 63:63[#2 + 1]
00000304: when ZF goto %00000302
00000833: goto %000005c5

000005c5:
000005c8: R1 := 0x10000
000005cf: R1 := mem[R1 + 0xFD0, el]:u64
000005d4: when R1 = 0 goto %00000302
00000834: goto %000005d8

00000302:
0000030a: call R30 with noreturn

000005d8:
000005dc: R16 := R1
000005e1: call R16 with noreturn

00000810: sub frame_dummy(frame_dummy_result)
00000848: frame_dummy_result :: out u32 = low:32[R0]

000003a2:
000003a4: call @register_tm_clones with noreturn

00000811: sub main(main_argc, main_argv, main_result)
00000849: main_argc :: in u32 = low:32[R0]
0000084a: main_argv :: in out u64 = R1
0000084b: main_result :: out u32 = low:32[R0]

0000043c:
00000440: #4 := R31 - 0x40
00000446: mem := mem with [#4, el]:u64 <- R29
0000044c: mem := mem with [#4 + 8, el]:u64 <- R30
00000450: R31 := #4
00000456: R29 := R31
0000045e: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000466: mem := mem with [R31 + 0x10, el]:u64 <- R1
0000046b: R0 := 0x10000
00000472: R0 := mem[R0 + 0xFE8, el]:u64
00000479: R1 := mem[R0, el]:u64
00000481: mem := mem with [R31 + 0x38, el]:u64 <- R1
00000486: R1 := 0
0000048b: R0 := 0x11000
00000491: R0 := R0 + 0x18
00000497: R2 := R31 + 0x20
0000049d: R3 := R0
000004a4: R0 := mem[R3, el]:u64
000004a9: R1 := mem[R3 + 8, el]:u64
000004b1: mem := mem with [R2, el]:u64 <- R0
000004b7: mem := mem with [R2 + 8, el]:u64 <- R1
000004be: R0 := mem[R3 + 0x10, el]:u64
000004c6: mem := mem with [R2 + 0x10, el]:u64 <- R0
000004cd: R0 := mem[R31 + 0x20, el]:u64
000004d2: R30 := 0x90C
000004d5: call R0 with return %000004d7

000004d7:
000004dc: R0 := mem[R31 + 0x28, el]:u64
000004e1: R30 := 0x914
000004e4: call R0 with return %000004e6

000004e6:
000004eb: R0 := mem[R31 + 0x30, el]:u64
000004f0: R30 := 0x91C
000004f3: call R0 with return %000004f5

000004f5:
000004f8: R0 := 0
000004fe: R1 := pad:64[31:0[R0]]
00000503: R0 := 0x10000
0000050a: R0 := mem[R0 + 0xFE8, el]:u64
00000511: R3 := mem[R31 + 0x38, el]:u64
00000518: R2 := mem[R0, el]:u64
0000051e: #5 := ~R2
00000523: #6 := R3 + ~R2
00000529: VF := extend:65[#6 + 1] <> extend:65[R3] + extend:65[#5] + 1
0000052f: CF := pad:65[#6 + 1] <> pad:65[R3] + pad:65[#5] + 1
00000533: ZF := #6 + 1 = 0
00000537: NF := 63:63[#6 + 1]
0000053b: R3 := #6 + 1
00000540: R2 := 0
00000546: when ZF goto %00000544
00000835: goto %00000564

00000564:
00000567: R30 := 0x944
0000056a: call @__stack_chk_fail with return %00000544

00000544:
0000054d: R0 := pad:64[31:0[R1]]
00000554: R29 := mem[R31, el]:u64
00000559: R30 := mem[R31 + 8, el]:u64
0000055d: R31 := R31 + 0x40
00000562: call R30 with noreturn

00000813: sub register_tm_clones(register_tm_clones_result)
0000084c: register_tm_clones_result :: out u32 = low:32[R0]

0000030c:
0000030f: R0 := 0x11000
00000315: R0 := R0 + 0x30
0000031a: R1 := 0x11000
00000320: R1 := R1 + 0x30
00000327: R1 := R1 + ~R0 + 1
0000032d: R2 := 0.63:63[R1]
00000334: R1 := R2 + (R1 ~>> 3)
0000033a: R1 := extend:64[63:1[R1]]
00000340: when R1 = 0 goto %0000033e
00000836: goto %000005a7

000005a7:
000005aa: R2 := 0x10000
000005b1: R2 := mem[R2 + 0xFF8, el]:u64
000005b6: when R2 = 0 goto %0000033e
00000837: goto %000005ba

0000033e:
00000346: call R30 with noreturn

000005ba:
000005be: R16 := R2
000005c3: call R16 with noreturn

00000816: sub sub_seven(sub_seven_result)
0000084d: sub_seven_result :: out u32 = low:32[R0]

0000040a:
0000040d: R0 := 0x11000
00000413: R0 := R0 + 0x10
0000041a: R0 := pad:64[mem[R0, el]:u32]
00000420: R1 := pad:64[31:0[R0] - 7]
00000425: R0 := 0x11000
0000042b: R0 := R0 + 0x10
00000433: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000043a: call R30 with noreturn
