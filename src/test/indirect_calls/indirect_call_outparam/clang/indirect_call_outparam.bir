0000064c: program
00000634: sub __cxa_finalize(__cxa_finalize_result)
0000064d: __cxa_finalize_result :: out u32 = low:32[R0]

000003ce:
000004c6: R16 := 0x11000
000004cd: R17 := mem[R16 + 8, el]:u64
000004d3: R16 := R16 + 8
000004d8: call R17 with noreturn

00000635: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000064e: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002a2:
000002a6: #3 := R31 - 0x20
000002ac: mem := mem with [#3, el]:u64 <- R29
000002b2: mem := mem with [#3 + 8, el]:u64 <- R30
000002b6: R31 := #3
000002bc: R29 := R31
000002c4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002c9: R19 := 0x11000
000002d0: R0 := pad:64[mem[R19 + 0x30]]
000002d7: when 31:0[R0] <> 0 goto %000002d5
00000636: goto %00000397

00000397:
0000039a: R0 := 0x10000
000003a1: R0 := mem[R0 + 0xFC8, el]:u64
000003a7: when R0 = 0 goto %000003a5
00000637: goto %000003be

000003be:
000003c1: R0 := 0x11000
000003c8: R0 := mem[R0 + 0x28, el]:u64
000003cd: R30 := 0x6F0
000003d0: call @__cxa_finalize with return %000003a5

000003a5:
000003ad: R30 := 0x6F4
000003af: call @deregister_tm_clones with return %000003b1

000003b1:
000003b4: R0 := 1
000003bc: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000638: goto %000002d5

000002d5:
000002df: R19 := mem[R31 + 0x10, el]:u64
000002e6: R29 := mem[R31, el]:u64
000002eb: R30 := mem[R31 + 8, el]:u64
000002ef: R31 := R31 + 0x20
000002f4: call R30 with noreturn

00000639: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000064f: __libc_start_main_main :: in u64 = R0
00000650: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000651: __libc_start_main_arg3 :: in out u64 = R2
00000652: __libc_start_main_auxv :: in out u64 = R3
00000653: __libc_start_main_result :: out u32 = low:32[R0]

000001fb:
000004b0: R16 := 0x11000
000004b7: R17 := mem[R16, el]:u64
000004bd: R16 := R16
000004c2: call R17 with noreturn

0000063a: sub _fini(_fini_result)
00000654: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000063b: sub _init(_init_result)
00000655: _init_result :: out u32 = low:32[R0]

00000581:
00000587: #7 := R31 - 0x10
0000058d: mem := mem with [#7, el]:u64 <- R29
00000593: mem := mem with [#7 + 8, el]:u64 <- R30
00000597: R31 := #7
0000059d: R29 := R31
000005a2: R30 := 0x590
000005a4: call @call_weak_fn with return %000005a6

000005a6:
000005ab: R29 := mem[R31, el]:u64
000005b0: R30 := mem[R31 + 8, el]:u64
000005b4: R31 := R31 + 0x10
000005b9: call R30 with noreturn

0000063c: sub _start(_start_result)
00000656: _start_result :: out u32 = low:32[R0]

000001bc:
000001c1: R29 := 0
000001c6: R30 := 0
000001cc: R5 := R0
000001d3: R1 := mem[R31, el]:u64
000001d9: R2 := R31 + 8
000001df: R6 := R31
000001e4: R0 := 0x10000
000001eb: R0 := mem[R0 + 0xFD8, el]:u64
000001f0: R3 := 0
000001f5: R4 := 0
000001fa: R30 := 0x630
000001fd: call @__libc_start_main with return %000001ff

000001ff:
00000202: R30 := 0x634
00000205: call @abort with return %0000063d

0000063d:
0000063e: call @call_weak_fn with noreturn

0000063f: sub abort()


00000203:
000004f2: R16 := 0x11000
000004f9: R17 := mem[R16 + 0x18, el]:u64
000004ff: R16 := R16 + 0x18
00000504: call R17 with noreturn

00000640: sub call_weak_fn(call_weak_fn_result)
00000657: call_weak_fn_result :: out u32 = low:32[R0]

00000207:
0000020a: R0 := 0x10000
00000211: R0 := mem[R0 + 0xFD0, el]:u64
00000217: when R0 = 0 goto %00000215
00000641: goto %0000040e

00000215:
0000021d: call R30 with noreturn

0000040e:
00000411: goto @__gmon_start__

0000040f:
000004dc: R16 := 0x11000
000004e3: R17 := mem[R16 + 0x10, el]:u64
000004e9: R16 := R16 + 0x10
000004ee: call R17 with noreturn

00000642: sub deregister_tm_clones(deregister_tm_clones_result)
00000658: deregister_tm_clones_result :: out u32 = low:32[R0]

00000223:
00000226: R0 := 0x11000
0000022c: R0 := R0 + 0x30
00000231: R1 := 0x11000
00000237: R1 := R1 + 0x30
0000023d: #1 := ~R0
00000242: #2 := R1 + ~R0
00000248: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000024e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000252: ZF := #2 + 1 = 0
00000256: NF := 63:63[#2 + 1]
0000025c: when ZF goto %0000025a
00000643: goto %000003f0

000003f0:
000003f3: R1 := 0x10000
000003fa: R1 := mem[R1 + 0xFC0, el]:u64
000003ff: when R1 = 0 goto %0000025a
00000644: goto %00000403

0000025a:
00000262: call R30 with noreturn

00000403:
00000407: R16 := R1
0000040c: call R16 with noreturn

00000645: sub frame_dummy(frame_dummy_result)
00000659: frame_dummy_result :: out u32 = low:32[R0]

000002fa:
000002fc: call @register_tm_clones with noreturn

00000646: sub get_call(get_call_result)
0000065a: get_call_result :: out u32 = low:32[R0]

00000308:
0000030c: R31 := R31 - 0x10
00000314: mem := mem with [R31 + 8, el]:u64 <- R0
0000031b: R9 := mem[R31 + 8, el]:u64
00000320: R8 := 0
00000326: R8 := R8 + 0x714
0000032e: mem := mem with [R9, el]:u64 <- R8
00000334: R31 := R31 + 0x10
00000339: call R30 with noreturn

00000647: sub main(main_argc, main_argv, main_result)
0000065b: main_argc :: in u32 = low:32[R0]
0000065c: main_argv :: in out u64 = R1
0000065d: main_result :: out u32 = low:32[R0]

0000033b:
0000033f: R31 := R31 - 0x20
00000345: #4 := R31 + 0x10
0000034b: mem := mem with [#4, el]:u64 <- R29
00000351: mem := mem with [#4 + 8, el]:u64 <- R30
00000357: R29 := R31 + 0x10
0000035e: mem := mem with [R29 - 4, el]:u32 <- 0
00000364: R0 := R31
00000369: R30 := 0x754
0000036b: call @get_call with return %0000036d

0000036d:
00000372: R8 := mem[R31, el]:u64
00000377: R30 := 0x75C
0000037a: call R8 with return %0000037c

0000037c:
00000380: #5 := R31 + 0x10
00000385: R29 := mem[#5, el]:u64
0000038a: R30 := mem[#5 + 8, el]:u64
00000390: R31 := R31 + 0x20
00000395: call R30 with noreturn

00000648: sub register_tm_clones(register_tm_clones_result)
0000065e: register_tm_clones_result :: out u32 = low:32[R0]

00000264:
00000267: R0 := 0x11000
0000026d: R0 := R0 + 0x30
00000272: R1 := 0x11000
00000278: R1 := R1 + 0x30
0000027f: R1 := R1 + ~R0 + 1
00000285: R2 := 0.63:63[R1]
0000028c: R1 := R2 + (R1 ~>> 3)
00000292: R1 := extend:64[63:1[R1]]
00000298: when R1 = 0 goto %00000296
00000649: goto %000003d2

000003d2:
000003d5: R2 := 0x10000
000003dc: R2 := mem[R2 + 0xFE0, el]:u64
000003e1: when R2 = 0 goto %00000296
0000064a: goto %000003e5

00000296:
0000029e: call R30 with noreturn

000003e5:
000003e9: R16 := R2
000003ee: call R16 with noreturn

0000064b: sub seven(seven_result)
0000065f: seven_result :: out u32 = low:32[R0]

000002fe:
00000301: R0 := 7
00000306: call R30 with noreturn
