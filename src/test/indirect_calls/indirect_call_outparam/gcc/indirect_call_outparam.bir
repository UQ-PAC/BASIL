000006ab: program
00000691: sub __cxa_finalize(__cxa_finalize_result)
000006ac: __cxa_finalize_result :: out u32 = low:32[R0]

00000472:
0000057a: R16 := 0x10000
00000581: R17 := mem[R16 + 0xFA8, el]:u64
00000587: R16 := R16 + 0xFA8
0000058c: call R17 with noreturn

00000692: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006ad: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002d6:
000002da: #3 := R31 - 0x20
000002e0: mem := mem with [#3, el]:u64 <- R29
000002e6: mem := mem with [#3 + 8, el]:u64 <- R30
000002ea: R31 := #3
000002f0: R29 := R31
000002f8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002fd: R19 := 0x11000
00000304: R0 := pad:64[mem[R19 + 0x10]]
0000030b: when 31:0[R0] <> 0 goto %00000309
00000693: goto %0000043b

0000043b:
0000043e: R0 := 0x10000
00000445: R0 := mem[R0 + 0xFD8, el]:u64
0000044b: when R0 = 0 goto %00000449
00000694: goto %00000462

00000462:
00000465: R0 := 0x11000
0000046c: R0 := mem[R0 + 8, el]:u64
00000471: R30 := 0x7F0
00000474: call @__cxa_finalize with return %00000449

00000449:
00000451: R30 := 0x7F4
00000453: call @deregister_tm_clones with return %00000455

00000455:
00000458: R0 := 1
00000460: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000695: goto %00000309

00000309:
00000313: R19 := mem[R31 + 0x10, el]:u64
0000031a: R29 := mem[R31, el]:u64
0000031f: R30 := mem[R31 + 8, el]:u64
00000323: R31 := R31 + 0x20
00000328: call R30 with noreturn

00000696: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006ae: __libc_start_main_main :: in u64 = R0
000006af: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006b0: __libc_start_main_arg3 :: in out u64 = R2
000006b1: __libc_start_main_auxv :: in out u64 = R3
000006b2: __libc_start_main_result :: out u32 = low:32[R0]

0000022f:
00000564: R16 := 0x10000
0000056b: R17 := mem[R16 + 0xFA0, el]:u64
00000571: R16 := R16 + 0xFA0
00000576: call R17 with noreturn

00000697: sub __stack_chk_fail(__stack_chk_fail_result)
000006b3: __stack_chk_fail_result :: out u32 = low:32[R0]

00000437:
00000590: R16 := 0x10000
00000597: R17 := mem[R16 + 0xFB0, el]:u64
0000059d: R16 := R16 + 0xFB0
000005a2: call R17 with noreturn

00000698: sub _fini(_fini_result)
000006b4: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000699: sub _init(_init_result)
000006b5: _init_result :: out u32 = low:32[R0]

000005ea:
000005f0: #8 := R31 - 0x10
000005f6: mem := mem with [#8, el]:u64 <- R29
000005fc: mem := mem with [#8 + 8, el]:u64 <- R30
00000600: R31 := #8
00000606: R29 := R31
0000060b: R30 := 0x650
0000060d: call @call_weak_fn with return %0000060f

0000060f:
00000614: R29 := mem[R31, el]:u64
00000619: R30 := mem[R31 + 8, el]:u64
0000061d: R31 := R31 + 0x10
00000622: call R30 with noreturn

0000069a: sub _start(_start_result)
000006b6: _start_result :: out u32 = low:32[R0]

000001f0:
000001f5: R29 := 0
000001fa: R30 := 0
00000200: R5 := R0
00000207: R1 := mem[R31, el]:u64
0000020d: R2 := R31 + 8
00000213: R6 := R31
00000218: R0 := 0x10000
0000021f: R0 := mem[R0 + 0xFF0, el]:u64
00000224: R3 := 0
00000229: R4 := 0
0000022e: R30 := 0x730
00000231: call @__libc_start_main with return %00000233

00000233:
00000236: R30 := 0x734
00000239: call @abort with return %0000069b

0000069b:
0000069c: call @call_weak_fn with noreturn

0000069d: sub abort()


00000237:
000005bc: R16 := 0x10000
000005c3: R17 := mem[R16 + 0xFC0, el]:u64
000005c9: R16 := R16 + 0xFC0
000005ce: call R17 with noreturn

0000069e: sub call_weak_fn(call_weak_fn_result)
000006b7: call_weak_fn_result :: out u32 = low:32[R0]

0000023b:
0000023e: R0 := 0x10000
00000245: R0 := mem[R0 + 0xFE0, el]:u64
0000024b: when R0 = 0 goto %00000249
0000069f: goto %000004b2

00000249:
00000251: call R30 with noreturn

000004b2:
000004b5: goto @__gmon_start__

000004b3:
000005a6: R16 := 0x10000
000005ad: R17 := mem[R16 + 0xFB8, el]:u64
000005b3: R16 := R16 + 0xFB8
000005b8: call R17 with noreturn

000006a0: sub deregister_tm_clones(deregister_tm_clones_result)
000006b8: deregister_tm_clones_result :: out u32 = low:32[R0]

00000257:
0000025a: R0 := 0x11000
00000260: R0 := R0 + 0x10
00000265: R1 := 0x11000
0000026b: R1 := R1 + 0x10
00000271: #1 := ~R0
00000276: #2 := R1 + ~R0
0000027c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000282: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000286: ZF := #2 + 1 = 0
0000028a: NF := 63:63[#2 + 1]
00000290: when ZF goto %0000028e
000006a1: goto %00000494

00000494:
00000497: R1 := 0x10000
0000049e: R1 := mem[R1 + 0xFD0, el]:u64
000004a3: when R1 = 0 goto %0000028e
000006a2: goto %000004a7

0000028e:
00000296: call R30 with noreturn

000004a7:
000004ab: R16 := R1
000004b0: call R16 with noreturn

000006a3: sub frame_dummy(frame_dummy_result)
000006b9: frame_dummy_result :: out u32 = low:32[R0]

0000032e:
00000330: call @register_tm_clones with noreturn

000006a4: sub get_call(get_call_result)
000006ba: get_call_result :: out u32 = low:32[R0]

0000033c:
00000340: R31 := R31 - 0x10
00000348: mem := mem with [R31 + 8, el]:u64 <- R0
0000034f: R0 := mem[R31 + 8, el]:u64
00000354: R1 := 0
0000035a: R1 := R1 + 0x814
00000362: mem := mem with [R0, el]:u64 <- R1
0000036a: R31 := R31 + 0x10
0000036f: call R30 with noreturn

000006a5: sub main(main_argc, main_argv, main_result)
000006bb: main_argc :: in u32 = low:32[R0]
000006bc: main_argv :: in out u64 = R1
000006bd: main_result :: out u32 = low:32[R0]

00000371:
00000375: #4 := R31 - 0x20
0000037b: mem := mem with [#4, el]:u64 <- R29
00000381: mem := mem with [#4 + 8, el]:u64 <- R30
00000385: R31 := #4
0000038b: R29 := R31
00000390: R0 := 0x10000
00000397: R0 := mem[R0 + 0xFE8, el]:u64
0000039e: R1 := mem[R0, el]:u64
000003a6: mem := mem with [R31 + 0x18, el]:u64 <- R1
000003ab: R1 := 0
000003b1: R0 := R31 + 0x10
000003b6: R30 := 0x864
000003b8: call @get_call with return %000003ba

000003ba:
000003bf: R0 := mem[R31 + 0x10, el]:u64
000003c4: R30 := 0x86C
000003c7: call R0 with return %000003c9

000003c9:
000003cd: R1 := pad:64[31:0[R0]]
000003d2: R0 := 0x10000
000003d9: R0 := mem[R0 + 0xFE8, el]:u64
000003e0: R3 := mem[R31 + 0x18, el]:u64
000003e7: R2 := mem[R0, el]:u64
000003ed: #5 := ~R2
000003f2: #6 := R3 + ~R2
000003f8: VF := extend:65[#6 + 1] <> extend:65[R3] + extend:65[#5] + 1
000003fe: CF := pad:65[#6 + 1] <> pad:65[R3] + pad:65[#5] + 1
00000402: ZF := #6 + 1 = 0
00000406: NF := 63:63[#6 + 1]
0000040a: R3 := #6 + 1
0000040f: R2 := 0
00000415: when ZF goto %00000413
000006a6: goto %00000433

00000433:
00000436: R30 := 0x890
00000439: call @__stack_chk_fail with return %00000413

00000413:
0000041c: R0 := pad:64[31:0[R1]]
00000423: R29 := mem[R31, el]:u64
00000428: R30 := mem[R31 + 8, el]:u64
0000042c: R31 := R31 + 0x20
00000431: call R30 with noreturn

000006a7: sub register_tm_clones(register_tm_clones_result)
000006be: register_tm_clones_result :: out u32 = low:32[R0]

00000298:
0000029b: R0 := 0x11000
000002a1: R0 := R0 + 0x10
000002a6: R1 := 0x11000
000002ac: R1 := R1 + 0x10
000002b3: R1 := R1 + ~R0 + 1
000002b9: R2 := 0.63:63[R1]
000002c0: R1 := R2 + (R1 ~>> 3)
000002c6: R1 := extend:64[63:1[R1]]
000002cc: when R1 = 0 goto %000002ca
000006a8: goto %00000476

00000476:
00000479: R2 := 0x10000
00000480: R2 := mem[R2 + 0xFF8, el]:u64
00000485: when R2 = 0 goto %000002ca
000006a9: goto %00000489

000002ca:
000002d2: call R30 with noreturn

00000489:
0000048d: R16 := R2
00000492: call R16 with noreturn

000006aa: sub seven(seven_result)
000006bf: seven_result :: out u32 = low:32[R0]

00000332:
00000335: R0 := 7
0000033a: call R30 with noreturn
