000006e3: program
000006ab: sub __cxa_finalize(__cxa_finalize_result)
000006e4: __cxa_finalize_result :: out u32 = low:32[R0]

00000433:
0000052b: R16 := 0x11000
00000532: R17 := mem[R16 + 8, el]:u64
00000538: R16 := R16 + 8
0000053d: call R17 with noreturn

000006ac: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006e5: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002c6:
000002ca: #3 := R31 - 0x20
000002d0: mem := mem with [#3, el]:u64 <- R29
000002d6: mem := mem with [#3 + 8, el]:u64 <- R30
000002da: R31 := #3
000002e0: R29 := R31
000002e8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002ed: R19 := 0x11000
000002f4: R0 := pad:64[mem[R19 + 0x50]]
000002fb: when 31:0[R0] <> 0 goto %000002f9
000006d9: goto %000003fc

000003fc:
000003ff: R0 := 0x10000
00000406: R0 := mem[R0 + 0xFC8, el]:u64
0000040c: when R0 = 0 goto %0000040a
000006da: goto %00000423

00000423:
00000426: R0 := 0x11000
0000042d: R0 := mem[R0 + 0x28, el]:u64
00000432: R30 := 0x730
00000435: call @__cxa_finalize with return %0000040a

0000040a:
00000412: R30 := 0x734
00000414: call @deregister_tm_clones with return %00000416

00000416:
00000419: R0 := 1
00000421: mem := mem with [R19 + 0x50] <- 7:0[R0]
000006db: goto %000002f9

000002f9:
00000303: R19 := mem[R31 + 0x10, el]:u64
0000030a: R29 := mem[R31, el]:u64
0000030f: R30 := mem[R31 + 8, el]:u64
00000313: R31 := R31 + 0x20
00000318: call R30 with noreturn

000006b0: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006e6: __libc_start_main_main :: in u64 = R0
000006e7: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006e8: __libc_start_main_arg3 :: in out u64 = R2
000006e9: __libc_start_main_auxv :: in out u64 = R3
000006ea: __libc_start_main_result :: out u32 = low:32[R0]

0000021f:
00000515: R16 := 0x11000
0000051c: R17 := mem[R16, el]:u64
00000522: R16 := R16
00000527: call R17 with noreturn

000006b1: sub _fini(_fini_result)
000006eb: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000006b2: sub _init(_init_result)
000006ec: _init_result :: out u32 = low:32[R0]

000005ef:
000005f5: #6 := R31 - 0x10
000005fb: mem := mem with [#6, el]:u64 <- R29
00000601: mem := mem with [#6 + 8, el]:u64 <- R30
00000605: R31 := #6
0000060b: R29 := R31
00000610: R30 := 0x5D8
00000612: call @call_weak_fn with return %00000614

00000614:
00000619: R29 := mem[R31, el]:u64
0000061e: R30 := mem[R31 + 8, el]:u64
00000622: R31 := R31 + 0x10
00000627: call R30 with noreturn

000006b3: sub _start(_start_result)
000006ed: _start_result :: out u32 = low:32[R0]

000001e0:
000001e5: R29 := 0
000001ea: R30 := 0
000001f0: R5 := R0
000001f7: R1 := mem[R31, el]:u64
000001fd: R2 := R31 + 8
00000203: R6 := R31
00000208: R0 := 0x10000
0000020f: R0 := mem[R0 + 0xFD8, el]:u64
00000214: R3 := 0
00000219: R4 := 0
0000021e: R30 := 0x670
00000221: call @__libc_start_main with return %00000223

00000223:
00000226: R30 := 0x674
00000229: call @abort with return %000006dc

000006dc:
000006dd: call @call_weak_fn with noreturn

000006b6: sub abort()


00000227:
00000557: R16 := 0x11000
0000055e: R17 := mem[R16 + 0x18, el]:u64
00000564: R16 := R16 + 0x18
00000569: call R17 with noreturn

000006b7: sub add_six(add_six_result)
000006ee: add_six_result :: out u32 = low:32[R0]

00000341:
00000344: R8 := 0x11000
0000034b: R9 := pad:64[mem[R8 + 0x30, el]:u32]
00000351: R9 := pad:64[31:0[R9] + 6]
00000359: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
0000035e: call R30 with noreturn

000006b8: sub add_two(add_two_result)
000006ef: add_two_result :: out u32 = low:32[R0]

00000322:
00000325: R8 := 0x11000
0000032c: R9 := pad:64[mem[R8 + 0x30, el]:u32]
00000332: R9 := pad:64[31:0[R9] + 2]
0000033a: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
0000033f: call R30 with noreturn

000006b9: sub call_weak_fn(call_weak_fn_result)
000006f0: call_weak_fn_result :: out u32 = low:32[R0]

0000022b:
0000022e: R0 := 0x10000
00000235: R0 := mem[R0 + 0xFD0, el]:u64
0000023b: when R0 = 0 goto %00000239
000006de: goto %00000473

00000239:
00000241: call R30 with noreturn

00000473:
00000476: goto @__gmon_start__

00000474:
00000541: R16 := 0x11000
00000548: R17 := mem[R16 + 0x10, el]:u64
0000054e: R16 := R16 + 0x10
00000553: call R17 with noreturn

000006bb: sub deregister_tm_clones(deregister_tm_clones_result)
000006f1: deregister_tm_clones_result :: out u32 = low:32[R0]

00000247:
0000024a: R0 := 0x11000
00000250: R0 := R0 + 0x50
00000255: R1 := 0x11000
0000025b: R1 := R1 + 0x50
00000261: #1 := ~R0
00000266: #2 := R1 + ~R0
0000026c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000272: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000276: ZF := #2 + 1 = 0
0000027a: NF := 63:63[#2 + 1]
00000280: when ZF goto %0000027e
000006df: goto %00000455

00000455:
00000458: R1 := 0x10000
0000045f: R1 := mem[R1 + 0xFC0, el]:u64
00000464: when R1 = 0 goto %0000027e
000006e0: goto %00000468

0000027e:
00000286: call R30 with noreturn

00000468:
0000046c: R16 := R1
00000471: call R16 with noreturn

000006be: sub frame_dummy(frame_dummy_result)
000006f2: frame_dummy_result :: out u32 = low:32[R0]

0000031e:
00000320: call @register_tm_clones with noreturn

000006bf: sub main(main_argc, main_argv, main_result)
000006f3: main_argc :: in u32 = low:32[R0]
000006f4: main_argv :: in out u64 = R1
000006f5: main_result :: out u32 = low:32[R0]

0000037f:
00000383: #4 := R31 - 0x20
00000389: mem := mem with [#4, el]:u64 <- R29
0000038f: mem := mem with [#4 + 8, el]:u64 <- R30
00000393: R31 := #4
0000039b: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003a1: R29 := R31
000003a6: R19 := 0x11000
000003ac: R19 := R19 + 0x38
000003b3: R8 := mem[R19, el]:u64
000003b8: R30 := 0x7AC
000003bb: call R8 with return %000003bd

000003bd:
000003c2: R8 := mem[R19 + 8, el]:u64
000003c7: R30 := 0x7B4
000003ca: call R8 with return %000003cc

000003cc:
000003d1: R8 := mem[R19 + 0x10, el]:u64
000003d6: R30 := 0x7BC
000003d9: call R8 with return %000003db

000003db:
000003de: R0 := 0
000003e5: R19 := mem[R31 + 0x10, el]:u64
000003ec: R29 := mem[R31, el]:u64
000003f1: R30 := mem[R31 + 8, el]:u64
000003f5: R31 := R31 + 0x20
000003fa: call R30 with noreturn

000006c0: sub register_tm_clones(register_tm_clones_result)
000006f6: register_tm_clones_result :: out u32 = low:32[R0]

00000288:
0000028b: R0 := 0x11000
00000291: R0 := R0 + 0x50
00000296: R1 := 0x11000
0000029c: R1 := R1 + 0x50
000002a3: R1 := R1 + ~R0 + 1
000002a9: R2 := 0.63:63[R1]
000002b0: R1 := R2 + (R1 ~>> 3)
000002b6: R1 := extend:64[63:1[R1]]
000002bc: when R1 = 0 goto %000002ba
000006e1: goto %00000437

00000437:
0000043a: R2 := 0x10000
00000441: R2 := mem[R2 + 0xFE0, el]:u64
00000446: when R2 = 0 goto %000002ba
000006e2: goto %0000044a

000002ba:
000002c2: call R30 with noreturn

0000044a:
0000044e: R16 := R2
00000453: call R16 with noreturn

000006c3: sub sub_seven(sub_seven_result)
000006f7: sub_seven_result :: out u32 = low:32[R0]

00000360:
00000363: R8 := 0x11000
0000036a: R9 := pad:64[mem[R8 + 0x30, el]:u32]
00000370: R9 := pad:64[31:0[R9] - 7]
00000378: mem := mem with [R8 + 0x30, el]:u32 <- 31:0[R9]
0000037d: call R30 with noreturn
