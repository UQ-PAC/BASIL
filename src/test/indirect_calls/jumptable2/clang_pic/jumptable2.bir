00000711: program
000006d9: sub __cxa_finalize(__cxa_finalize_result)
00000712: __cxa_finalize_result :: out u32 = low:32[R0]

000004c0:
000005b8: R16 := 0x11000
000005bf: R17 := mem[R16 + 8, el]:u64
000005c5: R16 := R16 + 8
000005ca: call R17 with noreturn

000006da: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000713: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002f2:
000002f6: #3 := R31 - 0x20
000002fc: mem := mem with [#3, el]:u64 <- R29
00000302: mem := mem with [#3 + 8, el]:u64 <- R30
00000306: R31 := #3
0000030c: R29 := R31
00000314: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000319: R19 := 0x11000
00000320: R0 := pad:64[mem[R19 + 0x50]]
00000327: when 31:0[R0] <> 0 goto %00000325
00000707: goto %00000489

00000489:
0000048c: R0 := 0x10000
00000493: R0 := mem[R0 + 0xFB8, el]:u64
00000499: when R0 = 0 goto %00000497
00000708: goto %000004b0

000004b0:
000004b3: R0 := 0x11000
000004ba: R0 := mem[R0 + 0x28, el]:u64
000004bf: R30 := 0x770
000004c2: call @__cxa_finalize with return %00000497

00000497:
0000049f: R30 := 0x774
000004a1: call @deregister_tm_clones with return %000004a3

000004a3:
000004a6: R0 := 1
000004ae: mem := mem with [R19 + 0x50] <- 7:0[R0]
00000709: goto %00000325

00000325:
0000032f: R19 := mem[R31 + 0x10, el]:u64
00000336: R29 := mem[R31, el]:u64
0000033b: R30 := mem[R31 + 8, el]:u64
0000033f: R31 := R31 + 0x20
00000344: call R30 with noreturn

000006de: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000714: __libc_start_main_main :: in u64 = R0
00000715: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000716: __libc_start_main_arg3 :: in out u64 = R2
00000717: __libc_start_main_auxv :: in out u64 = R3
00000718: __libc_start_main_result :: out u32 = low:32[R0]

0000024b:
000005a2: R16 := 0x11000
000005a9: R17 := mem[R16, el]:u64
000005af: R16 := R16
000005b4: call R17 with noreturn

000006df: sub _fini(_fini_result)
00000719: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000006e0: sub _init(_init_result)
0000071a: _init_result :: out u32 = low:32[R0]

00000612:
00000618: #8 := R31 - 0x10
0000061e: mem := mem with [#8, el]:u64 <- R29
00000624: mem := mem with [#8 + 8, el]:u64 <- R30
00000628: R31 := #8
0000062e: R29 := R31
00000633: R30 := 0x608
00000635: call @call_weak_fn with return %00000637

00000637:
0000063c: R29 := mem[R31, el]:u64
00000641: R30 := mem[R31 + 8, el]:u64
00000645: R31 := R31 + 0x10
0000064a: call R30 with noreturn

000006e1: sub _start(_start_result)
0000071b: _start_result :: out u32 = low:32[R0]

0000020c:
00000211: R29 := 0
00000216: R30 := 0
0000021c: R5 := R0
00000223: R1 := mem[R31, el]:u64
00000229: R2 := R31 + 8
0000022f: R6 := R31
00000234: R0 := 0x10000
0000023b: R0 := mem[R0 + 0xFD0, el]:u64
00000240: R3 := 0
00000245: R4 := 0
0000024a: R30 := 0x6B0
0000024d: call @__libc_start_main with return %0000024f

0000024f:
00000252: R30 := 0x6B4
00000255: call @abort with return %0000070a

0000070a:
0000070b: call @call_weak_fn with noreturn

000006e4: sub abort()


00000253:
000005e4: R16 := 0x11000
000005eb: R17 := mem[R16 + 0x18, el]:u64
000005f1: R16 := R16 + 0x18
000005f6: call R17 with noreturn

000006e5: sub add_six(add_six_result)
0000071c: add_six_result :: out u32 = low:32[R0]

00000374:
00000377: R9 := 0x10000
0000037e: R9 := mem[R9 + 0xFC0, el]:u64
00000385: R8 := pad:64[mem[R9, el]:u32]
0000038b: R8 := pad:64[31:0[R8] + 6]
00000393: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000398: call R30 with noreturn

000006e6: sub add_two(add_two_result)
0000071d: add_two_result :: out u32 = low:32[R0]

0000034e:
00000351: R9 := 0x10000
00000358: R9 := mem[R9 + 0xFC0, el]:u64
0000035f: R8 := pad:64[mem[R9, el]:u32]
00000365: R8 := pad:64[31:0[R8] + 2]
0000036d: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000372: call R30 with noreturn

000006e7: sub call_weak_fn(call_weak_fn_result)
0000071e: call_weak_fn_result :: out u32 = low:32[R0]

00000257:
0000025a: R0 := 0x10000
00000261: R0 := mem[R0 + 0xFC8, el]:u64
00000267: when R0 = 0 goto %00000265
0000070c: goto %00000500

00000265:
0000026d: call R30 with noreturn

00000500:
00000503: goto @__gmon_start__

00000501:
000005ce: R16 := 0x11000
000005d5: R17 := mem[R16 + 0x10, el]:u64
000005db: R16 := R16 + 0x10
000005e0: call R17 with noreturn

000006e9: sub deregister_tm_clones(deregister_tm_clones_result)
0000071f: deregister_tm_clones_result :: out u32 = low:32[R0]

00000273:
00000276: R0 := 0x11000
0000027c: R0 := R0 + 0x50
00000281: R1 := 0x11000
00000287: R1 := R1 + 0x50
0000028d: #1 := ~R0
00000292: #2 := R1 + ~R0
00000298: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000029e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002a2: ZF := #2 + 1 = 0
000002a6: NF := 63:63[#2 + 1]
000002ac: when ZF goto %000002aa
0000070d: goto %000004e2

000004e2:
000004e5: R1 := 0x10000
000004ec: R1 := mem[R1 + 0xFB0, el]:u64
000004f1: when R1 = 0 goto %000002aa
0000070e: goto %000004f5

000002aa:
000002b2: call R30 with noreturn

000004f5:
000004f9: R16 := R1
000004fe: call R16 with noreturn

000006ec: sub frame_dummy(frame_dummy_result)
00000720: frame_dummy_result :: out u32 = low:32[R0]

0000034a:
0000034c: call @register_tm_clones with noreturn

000006ed: sub main(main_argc, main_argv, main_result)
00000721: main_argc :: in u32 = low:32[R0]
00000722: main_argv :: in out u64 = R1
00000723: main_result :: out u32 = low:32[R0]

000003d6:
000003da: R31 := R31 - 0x30
000003e0: #5 := R31 + 0x20
000003e6: mem := mem with [#5, el]:u64 <- R29
000003ec: mem := mem with [#5 + 8, el]:u64 <- R30
000003f2: R29 := R31 + 0x20
000003f7: R8 := 0x10000
000003fe: R8 := mem[R8 + 0xFE0, el]:u64
00000406: mem := mem with [R31, el]:u64 <- R8
0000040b: R9 := 0
00000413: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R9]
0000041a: mem := mem with [R29 - 4, el]:u32 <- 0
00000422: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
0000042a: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000431: R8 := mem[R8, el]:u64
00000436: R30 := 0x810
00000439: call R8 with return %0000043b

0000043b:
00000440: R8 := mem[R31, el]:u64
00000447: R8 := mem[R8 + 8, el]:u64
0000044c: R30 := 0x81C
0000044f: call R8 with return %00000451

00000451:
00000456: R8 := mem[R31, el]:u64
0000045d: R8 := mem[R8 + 0x10, el]:u64
00000462: R30 := 0x828
00000465: call R8 with return %00000467

00000467:
0000046c: R0 := pad:64[mem[R31 + 0xC, el]:u32]
00000472: #6 := R31 + 0x20
00000477: R29 := mem[#6, el]:u64
0000047c: R30 := mem[#6 + 8, el]:u64
00000482: R31 := R31 + 0x30
00000487: call R30 with noreturn

000006ee: sub register_tm_clones(register_tm_clones_result)
00000724: register_tm_clones_result :: out u32 = low:32[R0]

000002b4:
000002b7: R0 := 0x11000
000002bd: R0 := R0 + 0x50
000002c2: R1 := 0x11000
000002c8: R1 := R1 + 0x50
000002cf: R1 := R1 + ~R0 + 1
000002d5: R2 := 0.63:63[R1]
000002dc: R1 := R2 + (R1 ~>> 3)
000002e2: R1 := extend:64[63:1[R1]]
000002e8: when R1 = 0 goto %000002e6
0000070f: goto %000004c4

000004c4:
000004c7: R2 := 0x10000
000004ce: R2 := mem[R2 + 0xFD8, el]:u64
000004d3: when R2 = 0 goto %000002e6
00000710: goto %000004d7

000002e6:
000002ee: call R30 with noreturn

000004d7:
000004db: R16 := R2
000004e0: call R16 with noreturn

000006f1: sub sub_seven(sub_seven_result)
00000725: sub_seven_result :: out u32 = low:32[R0]

0000039a:
0000039d: R9 := 0x10000
000003a4: R9 := mem[R9 + 0xFC0, el]:u64
000003ab: R8 := pad:64[mem[R9, el]:u32]
000003b1: #4 := 31:0[R8] - 8
000003b6: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 7
000003bb: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFF9
000003bf: ZF := #4 + 1 = 0
000003c3: NF := 31:31[#4 + 1]
000003c7: R8 := pad:64[#4 + 1]
000003cf: mem := mem with [R9, el]:u32 <- 31:0[R8]
000003d4: call R30 with noreturn
