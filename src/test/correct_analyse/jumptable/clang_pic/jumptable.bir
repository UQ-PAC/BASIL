00000704: program
000006cc: sub __cxa_finalize(__cxa_finalize_result)
00000705: __cxa_finalize_result :: out u32 = low:32[R0]

000004cb:
000005c3: R16 := 0x11000
000005ca: R17 := mem[R16 + 8, el]:u64
000005d0: R16 := R16 + 8
000005d5: call R17 with noreturn

000006cd: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000706: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002f6:
000002fa: #3 := R31 - 0x20
00000300: mem := mem with [#3, el]:u64 <- R29
00000306: mem := mem with [#3 + 8, el]:u64 <- R30
0000030a: R31 := #3
00000310: R29 := R31
00000318: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000031d: R19 := 0x11000
00000324: R0 := pad:64[mem[R19 + 0x34]]
0000032b: when 31:0[R0] <> 0 goto %00000329
000006fa: goto %00000494

00000494:
00000497: R0 := 0x10000
0000049e: R0 := mem[R0 + 0xFC0, el]:u64
000004a4: when R0 = 0 goto %000004a2
000006fb: goto %000004bb

000004bb:
000004be: R0 := 0x11000
000004c5: R0 := mem[R0 + 0x28, el]:u64
000004ca: R30 := 0x770
000004cd: call @__cxa_finalize with return %000004a2

000004a2:
000004aa: R30 := 0x774
000004ac: call @deregister_tm_clones with return %000004ae

000004ae:
000004b1: R0 := 1
000004b9: mem := mem with [R19 + 0x34] <- 7:0[R0]
000006fc: goto %00000329

00000329:
00000333: R19 := mem[R31 + 0x10, el]:u64
0000033a: R29 := mem[R31, el]:u64
0000033f: R30 := mem[R31 + 8, el]:u64
00000343: R31 := R31 + 0x20
00000348: call R30 with noreturn

000006d1: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000707: __libc_start_main_main :: in u64 = R0
00000708: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000709: __libc_start_main_arg3 :: in out u64 = R2
0000070a: __libc_start_main_auxv :: in out u64 = R3
0000070b: __libc_start_main_result :: out u32 = low:32[R0]

0000024f:
000005ad: R16 := 0x11000
000005b4: R17 := mem[R16, el]:u64
000005ba: R16 := R16
000005bf: call R17 with noreturn

000006d2: sub _fini(_fini_result)
0000070c: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000006d3: sub _init(_init_result)
0000070d: _init_result :: out u32 = low:32[R0]

0000061d:
00000623: #8 := R31 - 0x10
00000629: mem := mem with [#8, el]:u64 <- R29
0000062f: mem := mem with [#8 + 8, el]:u64 <- R30
00000633: R31 := #8
00000639: R29 := R31
0000063e: R30 := 0x5F0
00000640: call @call_weak_fn with return %00000642

00000642:
00000647: R29 := mem[R31, el]:u64
0000064c: R30 := mem[R31 + 8, el]:u64
00000650: R31 := R31 + 0x10
00000655: call R30 with noreturn

000006d4: sub _start(_start_result)
0000070e: _start_result :: out u32 = low:32[R0]

00000210:
00000215: R29 := 0
0000021a: R30 := 0
00000220: R5 := R0
00000227: R1 := mem[R31, el]:u64
0000022d: R2 := R31 + 8
00000233: R6 := R31
00000238: R0 := 0x10000
0000023f: R0 := mem[R0 + 0xFD8, el]:u64
00000244: R3 := 0
00000249: R4 := 0
0000024e: R30 := 0x6B0
00000251: call @__libc_start_main with return %00000253

00000253:
00000256: R30 := 0x6B4
00000259: call @abort with return %000006fd

000006fd:
000006fe: call @call_weak_fn with noreturn

000006d7: sub abort()


00000257:
000005ef: R16 := 0x11000
000005f6: R17 := mem[R16 + 0x18, el]:u64
000005fc: R16 := R16 + 0x18
00000601: call R17 with noreturn

000006d8: sub add_six(add_six_result)
0000070f: add_six_result :: out u32 = low:32[R0]

00000378:
0000037b: R9 := 0x10000
00000382: R9 := mem[R9 + 0xFC8, el]:u64
00000389: R8 := pad:64[mem[R9, el]:u32]
0000038f: R8 := pad:64[31:0[R8] + 6]
00000397: mem := mem with [R9, el]:u32 <- 31:0[R8]
0000039c: call R30 with noreturn

000006d9: sub add_two(add_two_result)
00000710: add_two_result :: out u32 = low:32[R0]

00000352:
00000355: R9 := 0x10000
0000035c: R9 := mem[R9 + 0xFC8, el]:u64
00000363: R8 := pad:64[mem[R9, el]:u32]
00000369: R8 := pad:64[31:0[R8] + 2]
00000371: mem := mem with [R9, el]:u32 <- 31:0[R8]
00000376: call R30 with noreturn

000006da: sub call_weak_fn(call_weak_fn_result)
00000711: call_weak_fn_result :: out u32 = low:32[R0]

0000025b:
0000025e: R0 := 0x10000
00000265: R0 := mem[R0 + 0xFD0, el]:u64
0000026b: when R0 = 0 goto %00000269
000006ff: goto %0000050b

00000269:
00000271: call R30 with noreturn

0000050b:
0000050e: goto @__gmon_start__

0000050c:
000005d9: R16 := 0x11000
000005e0: R17 := mem[R16 + 0x10, el]:u64
000005e6: R16 := R16 + 0x10
000005eb: call R17 with noreturn

000006dc: sub deregister_tm_clones(deregister_tm_clones_result)
00000712: deregister_tm_clones_result :: out u32 = low:32[R0]

00000277:
0000027a: R0 := 0x11000
00000280: R0 := R0 + 0x38
00000285: R1 := 0x11000
0000028b: R1 := R1 + 0x38
00000291: #1 := ~R0
00000296: #2 := R1 + ~R0
0000029c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002a2: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002a6: ZF := #2 + 1 = 0
000002aa: NF := 63:63[#2 + 1]
000002b0: when ZF goto %000002ae
00000700: goto %000004ed

000004ed:
000004f0: R1 := 0x10000
000004f7: R1 := mem[R1 + 0xFB8, el]:u64
000004fc: when R1 = 0 goto %000002ae
00000701: goto %00000500

000002ae:
000002b6: call R30 with noreturn

00000500:
00000504: R16 := R1
00000509: call R16 with noreturn

000006df: sub frame_dummy(frame_dummy_result)
00000713: frame_dummy_result :: out u32 = low:32[R0]

0000034e:
00000350: call @register_tm_clones with noreturn

000006e0: sub main(main_argc, main_argv, main_result)
00000714: main_argc :: in u32 = low:32[R0]
00000715: main_argv :: in out u64 = R1
00000716: main_result :: out u32 = low:32[R0]

000003da:
000003de: R31 := R31 - 0x50
000003e4: #5 := R31 + 0x40
000003ea: mem := mem with [#5, el]:u64 <- R29
000003f0: mem := mem with [#5 + 8, el]:u64 <- R30
000003f6: R29 := R31 + 0x40
000003fb: R8 := 0
00000403: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000040a: mem := mem with [R29 - 4, el]:u32 <- 0
00000412: mem := mem with [R29 - 8, el]:u32 <- 31:0[R0]
0000041a: mem := mem with [R29 - 0x10, el]:u64 <- R1
0000041f: R8 := 0x10000
00000425: R8 := R8 + 0xDB8
0000042c: V0 := mem[R8, el]:u128
00000434: mem := mem with [R31 + 0x10, el]:u128 <- V0
0000043b: R8 := mem[R8 + 0x10, el]:u64
00000443: mem := mem with [R31 + 0x20, el]:u64 <- R8
0000044a: R8 := mem[R31 + 0x10, el]:u64
0000044f: R30 := 0x81C
00000452: call R8 with return %00000454

00000454:
00000459: R8 := mem[R31 + 0x18, el]:u64
0000045e: R30 := 0x824
00000461: call R8 with return %00000463

00000463:
00000468: R8 := mem[R31 + 0x20, el]:u64
0000046d: R30 := 0x82C
00000470: call R8 with return %00000472

00000472:
00000477: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000047d: #6 := R31 + 0x40
00000482: R29 := mem[#6, el]:u64
00000487: R30 := mem[#6 + 8, el]:u64
0000048d: R31 := R31 + 0x50
00000492: call R30 with noreturn

000006e1: sub register_tm_clones(register_tm_clones_result)
00000717: register_tm_clones_result :: out u32 = low:32[R0]

000002b8:
000002bb: R0 := 0x11000
000002c1: R0 := R0 + 0x38
000002c6: R1 := 0x11000
000002cc: R1 := R1 + 0x38
000002d3: R1 := R1 + ~R0 + 1
000002d9: R2 := 0.63:63[R1]
000002e0: R1 := R2 + (R1 ~>> 3)
000002e6: R1 := extend:64[63:1[R1]]
000002ec: when R1 = 0 goto %000002ea
00000702: goto %000004cf

000004cf:
000004d2: R2 := 0x10000
000004d9: R2 := mem[R2 + 0xFE0, el]:u64
000004de: when R2 = 0 goto %000002ea
00000703: goto %000004e2

000002ea:
000002f2: call R30 with noreturn

000004e2:
000004e6: R16 := R2
000004eb: call R16 with noreturn

000006e4: sub sub_seven(sub_seven_result)
00000718: sub_seven_result :: out u32 = low:32[R0]

0000039e:
000003a1: R9 := 0x10000
000003a8: R9 := mem[R9 + 0xFC8, el]:u64
000003af: R8 := pad:64[mem[R9, el]:u32]
000003b5: #4 := 31:0[R8] - 8
000003ba: VF := extend:33[#4 + 1] <> extend:33[31:0[R8]] - 7
000003bf: CF := pad:33[#4 + 1] <> pad:33[31:0[R8]] + 0xFFFFFFF9
000003c3: ZF := #4 + 1 = 0
000003c7: NF := 31:31[#4 + 1]
000003cb: R8 := pad:64[#4 + 1]
000003d3: mem := mem with [R9, el]:u32 <- 31:0[R8]
000003d8: call R30 with noreturn
