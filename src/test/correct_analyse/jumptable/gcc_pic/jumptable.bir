00000821: program
000007e5: sub __cxa_finalize(__cxa_finalize_result)
00000822: __cxa_finalize_result :: out u32 = low:32[R0]

000005a9:
000006b1: R16 := 0x10000
000006b8: R17 := mem[R16 + 0xFA0, el]:u64
000006be: R16 := R16 + 0xFA0
000006c3: call R17 with noreturn

000007e6: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000823: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000034a:
0000034e: #3 := R31 - 0x20
00000354: mem := mem with [#3, el]:u64 <- R29
0000035a: mem := mem with [#3 + 8, el]:u64 <- R30
0000035e: R31 := #3
00000364: R29 := R31
0000036c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000371: R19 := 0x11000
00000378: R0 := pad:64[mem[R19 + 0x30]]
0000037f: when 31:0[R0] <> 0 goto %0000037d
00000816: goto %00000572

00000572:
00000575: R0 := 0x10000
0000057c: R0 := mem[R0 + 0xFD0, el]:u64
00000582: when R0 = 0 goto %00000580
00000817: goto %00000599

00000599:
0000059c: R0 := 0x11000
000005a3: R0 := mem[R0 + 8, el]:u64
000005a8: R30 := 0x830
000005ab: call @__cxa_finalize with return %00000580

00000580:
00000588: R30 := 0x834
0000058a: call @deregister_tm_clones with return %0000058c

0000058c:
0000058f: R0 := 1
00000597: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000818: goto %0000037d

0000037d:
00000387: R19 := mem[R31 + 0x10, el]:u64
0000038e: R29 := mem[R31, el]:u64
00000393: R30 := mem[R31 + 8, el]:u64
00000397: R31 := R31 + 0x20
0000039c: call R30 with noreturn

000007ea: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000824: __libc_start_main_main :: in u64 = R0
00000825: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000826: __libc_start_main_arg3 :: in out u64 = R2
00000827: __libc_start_main_auxv :: in out u64 = R3
00000828: __libc_start_main_result :: out u32 = low:32[R0]

000002a3:
0000069b: R16 := 0x10000
000006a2: R17 := mem[R16 + 0xF98, el]:u64
000006a8: R16 := R16 + 0xF98
000006ad: call R17 with noreturn

000007eb: sub __stack_chk_fail(__stack_chk_fail_result)
00000829: __stack_chk_fail_result :: out u32 = low:32[R0]

0000056e:
000006c7: R16 := 0x10000
000006ce: R17 := mem[R16 + 0xFA8, el]:u64
000006d4: R16 := R16 + 0xFA8
000006d9: call R17 with noreturn

000007ec: sub _fini(_fini_result)
0000082a: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000007ed: sub _init(_init_result)
0000082b: _init_result :: out u32 = low:32[R0]

00000721:
00000727: #8 := R31 - 0x10
0000072d: mem := mem with [#8, el]:u64 <- R29
00000733: mem := mem with [#8 + 8, el]:u64 <- R30
00000737: R31 := #8
0000073d: R29 := R31
00000742: R30 := 0x6B0
00000744: call @call_weak_fn with return %00000746

00000746:
0000074b: R29 := mem[R31, el]:u64
00000750: R30 := mem[R31 + 8, el]:u64
00000754: R31 := R31 + 0x10
00000759: call R30 with noreturn

000007ee: sub _start(_start_result)
0000082c: _start_result :: out u32 = low:32[R0]

00000264:
00000269: R29 := 0
0000026e: R30 := 0
00000274: R5 := R0
0000027b: R1 := mem[R31, el]:u64
00000281: R2 := R31 + 8
00000287: R6 := R31
0000028c: R0 := 0x10000
00000293: R0 := mem[R0 + 0xFF0, el]:u64
00000298: R3 := 0
0000029d: R4 := 0
000002a2: R30 := 0x770
000002a5: call @__libc_start_main with return %000002a7

000002a7:
000002aa: R30 := 0x774
000002ad: call @abort with return %00000819

00000819:
0000081a: call @call_weak_fn with noreturn

000007f1: sub abort()


000002ab:
000006f3: R16 := 0x10000
000006fa: R17 := mem[R16 + 0xFB8, el]:u64
00000700: R16 := R16 + 0xFB8
00000705: call R17 with noreturn

000007f2: sub add_six(add_six_result)
0000082d: add_six_result :: out u32 = low:32[R0]

000003da:
000003dd: R0 := 0x10000
000003e4: R0 := mem[R0 + 0xFD8, el]:u64
000003eb: R0 := pad:64[mem[R0, el]:u32]
000003f1: R1 := pad:64[31:0[R0] + 6]
000003f6: R0 := 0x10000
000003fd: R0 := mem[R0 + 0xFD8, el]:u64
00000405: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000040c: call R30 with noreturn

000007f3: sub add_two(add_two_result)
0000082e: add_two_result :: out u32 = low:32[R0]

000003a6:
000003a9: R0 := 0x10000
000003b0: R0 := mem[R0 + 0xFD8, el]:u64
000003b7: R0 := pad:64[mem[R0, el]:u32]
000003bd: R1 := pad:64[31:0[R0] + 2]
000003c2: R0 := 0x10000
000003c9: R0 := mem[R0 + 0xFD8, el]:u64
000003d1: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003d8: call R30 with noreturn

000007f4: sub call_weak_fn(call_weak_fn_result)
0000082f: call_weak_fn_result :: out u32 = low:32[R0]

000002af:
000002b2: R0 := 0x10000
000002b9: R0 := mem[R0 + 0xFE0, el]:u64
000002bf: when R0 = 0 goto %000002bd
0000081b: goto %000005e9

000002bd:
000002c5: call R30 with noreturn

000005e9:
000005ec: goto @__gmon_start__

000005ea:
000006dd: R16 := 0x10000
000006e4: R17 := mem[R16 + 0xFB0, el]:u64
000006ea: R16 := R16 + 0xFB0
000006ef: call R17 with noreturn

000007f6: sub deregister_tm_clones(deregister_tm_clones_result)
00000830: deregister_tm_clones_result :: out u32 = low:32[R0]

000002cb:
000002ce: R0 := 0x11000
000002d4: R0 := R0 + 0x30
000002d9: R1 := 0x11000
000002df: R1 := R1 + 0x30
000002e5: #1 := ~R0
000002ea: #2 := R1 + ~R0
000002f0: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
000002f6: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
000002fa: ZF := #2 + 1 = 0
000002fe: NF := 63:63[#2 + 1]
00000304: when ZF goto %00000302
0000081c: goto %000005cb

000005cb:
000005ce: R1 := 0x10000
000005d5: R1 := mem[R1 + 0xFC8, el]:u64
000005da: when R1 = 0 goto %00000302
0000081d: goto %000005de

00000302:
0000030a: call R30 with noreturn

000005de:
000005e2: R16 := R1
000005e7: call R16 with noreturn

000007f9: sub frame_dummy(frame_dummy_result)
00000831: frame_dummy_result :: out u32 = low:32[R0]

000003a2:
000003a4: call @register_tm_clones with noreturn

000007fa: sub main(main_argc, main_argv, main_result)
00000832: main_argc :: in u32 = low:32[R0]
00000833: main_argv :: in out u64 = R1
00000834: main_result :: out u32 = low:32[R0]

00000442:
00000446: #4 := R31 - 0x40
0000044c: mem := mem with [#4, el]:u64 <- R29
00000452: mem := mem with [#4 + 8, el]:u64 <- R30
00000456: R31 := #4
0000045c: R29 := R31
00000464: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000046c: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000471: R0 := 0x10000
00000478: R0 := mem[R0 + 0xFE8, el]:u64
0000047f: R1 := mem[R0, el]:u64
00000487: mem := mem with [R31 + 0x38, el]:u64 <- R1
0000048c: R1 := 0
00000491: R0 := 0x11000
00000497: R0 := R0 + 0x18
0000049d: R2 := R31 + 0x20
000004a3: R3 := R0
000004aa: R0 := mem[R3, el]:u64
000004af: R1 := mem[R3 + 8, el]:u64
000004b7: mem := mem with [R2, el]:u64 <- R0
000004bd: mem := mem with [R2 + 8, el]:u64 <- R1
000004c4: R0 := mem[R3 + 0x10, el]:u64
000004cc: mem := mem with [R2 + 0x10, el]:u64 <- R0
000004d3: R0 := mem[R31 + 0x20, el]:u64
000004d8: R30 := 0x90C
000004db: call R0 with return %000004dd

000004dd:
000004e2: R0 := mem[R31 + 0x28, el]:u64
000004e7: R30 := 0x914
000004ea: call R0 with return %000004ec

000004ec:
000004f1: R0 := mem[R31 + 0x30, el]:u64
000004f6: R30 := 0x91C
000004f9: call R0 with return %000004fb

000004fb:
000004fe: R0 := 0
00000504: R1 := pad:64[31:0[R0]]
00000509: R0 := 0x10000
00000510: R0 := mem[R0 + 0xFE8, el]:u64
00000517: R3 := mem[R31 + 0x38, el]:u64
0000051e: R2 := mem[R0, el]:u64
00000524: #5 := ~R2
00000529: #6 := R3 + ~R2
0000052f: VF := extend:65[#6 + 1] <> extend:65[R3] + extend:65[#5] + 1
00000535: CF := pad:65[#6 + 1] <> pad:65[R3] + pad:65[#5] + 1
00000539: ZF := #6 + 1 = 0
0000053d: NF := 63:63[#6 + 1]
00000541: R3 := #6 + 1
00000546: R2 := 0
0000054c: when ZF goto %0000054a
0000081e: goto %0000056a

0000056a:
0000056d: R30 := 0x944
00000570: call @__stack_chk_fail with return %0000054a

0000054a:
00000553: R0 := pad:64[31:0[R1]]
0000055a: R29 := mem[R31, el]:u64
0000055f: R30 := mem[R31 + 8, el]:u64
00000563: R31 := R31 + 0x40
00000568: call R30 with noreturn

000007fc: sub register_tm_clones(register_tm_clones_result)
00000835: register_tm_clones_result :: out u32 = low:32[R0]

0000030c:
0000030f: R0 := 0x11000
00000315: R0 := R0 + 0x30
0000031a: R1 := 0x11000
00000320: R1 := R1 + 0x30
00000327: R1 := R1 + ~R0 + 1
0000032d: R2 := 0.63:63[R1]
00000334: R1 := R2 + (R1 ~>> 3)
0000033a: R1 := extend:64[63:1[R1]]
00000340: when R1 = 0 goto %0000033e
0000081f: goto %000005ad

000005ad:
000005b0: R2 := 0x10000
000005b7: R2 := mem[R2 + 0xFF8, el]:u64
000005bc: when R2 = 0 goto %0000033e
00000820: goto %000005c0

0000033e:
00000346: call R30 with noreturn

000005c0:
000005c4: R16 := R2
000005c9: call R16 with noreturn

000007ff: sub sub_seven(sub_seven_result)
00000836: sub_seven_result :: out u32 = low:32[R0]

0000040e:
00000411: R0 := 0x10000
00000418: R0 := mem[R0 + 0xFD8, el]:u64
0000041f: R0 := pad:64[mem[R0, el]:u32]
00000425: R1 := pad:64[31:0[R0] - 7]
0000042a: R0 := 0x10000
00000431: R0 := mem[R0 + 0xFD8, el]:u64
00000439: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000440: call R30 with noreturn
