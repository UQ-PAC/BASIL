0000072f: program
00000718: sub __cxa_finalize(__cxa_finalize_result)
00000730: __cxa_finalize_result :: out u32 = low:32[R0]

0000046c:
00000574: R16 := 0x10000
0000057b: R17 := mem[R16 + 0xFB0, el]:u64
00000581: R16 := R16 + 0xFB0
00000586: call R17 with noreturn

00000719: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000731: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002da:
000002de: #3 := R31 - 0x20
000002e4: mem := mem with [#3, el]:u64 <- R29
000002ea: mem := mem with [#3 + 8, el]:u64 <- R30
000002ee: R31 := #3
000002f4: R29 := R31
000002fc: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000301: R19 := 0x11000
00000308: R0 := pad:64[mem[R19 + 0x18]]
0000030f: when 31:0[R0] <> 0 goto %0000030d
0000071a: goto %00000435

00000435:
00000438: R0 := 0x10000
0000043f: R0 := mem[R0 + 0xFE0, el]:u64
00000445: when R0 = 0 goto %00000443
0000071b: goto %0000045c

0000045c:
0000045f: R0 := 0x11000
00000466: R0 := mem[R0 + 8, el]:u64
0000046b: R30 := 0x730
0000046e: call @__cxa_finalize with return %00000443

00000443:
0000044b: R30 := 0x734
0000044d: call @deregister_tm_clones with return %0000044f

0000044f:
00000452: R0 := 1
0000045a: mem := mem with [R19 + 0x18] <- 7:0[R0]
0000071c: goto %0000030d

0000030d:
00000317: R19 := mem[R31 + 0x10, el]:u64
0000031e: R29 := mem[R31, el]:u64
00000323: R30 := mem[R31 + 8, el]:u64
00000327: R31 := R31 + 0x20
0000032c: call R30 with noreturn

0000071d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000732: __libc_start_main_main :: in u64 = R0
00000733: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000734: __libc_start_main_arg3 :: in out u64 = R2
00000735: __libc_start_main_auxv :: in out u64 = R3
00000736: __libc_start_main_result :: out u32 = low:32[R0]

00000233:
0000055e: R16 := 0x10000
00000565: R17 := mem[R16 + 0xFA8, el]:u64
0000056b: R16 := R16 + 0xFA8
00000570: call R17 with noreturn

0000071e: sub _fini(_fini_result)
00000737: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000071f: sub _init(_init_result)
00000738: _init_result :: out u32 = low:32[R0]

00000653:
00000659: #6 := R31 - 0x10
0000065f: mem := mem with [#6, el]:u64 <- R29
00000665: mem := mem with [#6 + 8, el]:u64 <- R30
00000669: R31 := #6
0000066f: R29 := R31
00000674: R30 := 0x5C8
00000676: call @call_weak_fn with return %00000678

00000678:
0000067d: R29 := mem[R31, el]:u64
00000682: R30 := mem[R31 + 8, el]:u64
00000686: R31 := R31 + 0x10
0000068b: call R30 with noreturn

00000720: sub _start(_start_result)
00000739: _start_result :: out u32 = low:32[R0]

000001f4:
000001f9: R29 := 0
000001fe: R30 := 0
00000204: R5 := R0
0000020b: R1 := mem[R31, el]:u64
00000211: R2 := R31 + 8
00000217: R6 := R31
0000021c: R0 := 0x10000
00000223: R0 := mem[R0 + 0xFF0, el]:u64
00000228: R3 := 0
0000022d: R4 := 0
00000232: R30 := 0x670
00000235: call @__libc_start_main with return %00000237

00000237:
0000023a: R30 := 0x674
0000023d: call @abort with return %00000721

00000721:
00000722: call @call_weak_fn with noreturn

00000723: sub abort()


0000023b:
000005b6: R16 := 0x10000
000005bd: R17 := mem[R16 + 0xFC8, el]:u64
000005c3: R16 := R16 + 0xFC8
000005c8: call R17 with noreturn

00000724: sub call_weak_fn(call_weak_fn_result)
0000073a: call_weak_fn_result :: out u32 = low:32[R0]

0000023f:
00000242: R0 := 0x10000
00000249: R0 := mem[R0 + 0xFE8, el]:u64
0000024f: when R0 = 0 goto %0000024d
00000725: goto %000004ac

0000024d:
00000255: call R30 with noreturn

000004ac:
000004af: goto @__gmon_start__

000004ad:
000005a0: R16 := 0x10000
000005a7: R17 := mem[R16 + 0xFC0, el]:u64
000005ad: R16 := R16 + 0xFC0
000005b2: call R17 with noreturn

00000726: sub deregister_tm_clones(deregister_tm_clones_result)
0000073b: deregister_tm_clones_result :: out u32 = low:32[R0]

0000025b:
0000025e: R0 := 0x11000
00000264: R0 := R0 + 0x18
00000269: R1 := 0x11000
0000026f: R1 := R1 + 0x18
00000275: #1 := ~R0
0000027a: #2 := R1 + ~R0
00000280: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000286: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000028a: ZF := #2 + 1 = 0
0000028e: NF := 63:63[#2 + 1]
00000294: when ZF goto %00000292
00000727: goto %0000048e

0000048e:
00000491: R1 := 0x10000
00000498: R1 := mem[R1 + 0xFD8, el]:u64
0000049d: when R1 = 0 goto %00000292
00000728: goto %000004a1

00000292:
0000029a: call R30 with noreturn

000004a1:
000004a5: R16 := R1
000004aa: call R16 with noreturn

00000729: sub frame_dummy(frame_dummy_result)
0000073c: frame_dummy_result :: out u32 = low:32[R0]

00000332:
00000334: call @register_tm_clones with noreturn

0000072a: sub main(main_argc, main_argv, main_result)
0000073d: main_argc :: in u32 = low:32[R0]
0000073e: main_argv :: in out u64 = R1
0000073f: main_result :: out u32 = low:32[R0]

00000336:
0000033a: #4 := R31 - 0x30
00000340: mem := mem with [#4, el]:u64 <- R29
00000346: mem := mem with [#4 + 8, el]:u64 <- R30
0000034a: R31 := #4
00000350: R29 := R31
00000358: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000360: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000365: R0 := 4
0000036a: R30 := 0x76C
0000036d: call @malloc with return %0000036f

0000036f:
00000375: mem := mem with [R31 + 0x20, el]:u64 <- R0
0000037a: R0 := 4
0000037f: R30 := 0x778
00000381: call @malloc with return %00000383

00000383:
00000389: mem := mem with [R31 + 0x28, el]:u64 <- R0
0000038e: R0 := 0x11000
00000394: R0 := R0 + 0x10
0000039b: R0 := pad:64[mem[R0, el]:u32]
000003a1: R1 := pad:64[31:0[R0] + 1]
000003a8: R0 := mem[R31 + 0x20, el]:u64
000003b0: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003b5: R0 := 0x11000
000003bb: R0 := R0 + 0x14
000003c2: R0 := pad:64[mem[R0, el]:u32]
000003c8: R1 := pad:64[31:0[R0] + 2]
000003cf: R0 := mem[R31 + 0x28, el]:u64
000003d7: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003de: R0 := mem[R31 + 0x20, el]:u64
000003e5: R1 := pad:64[mem[R0, el]:u32]
000003ea: R0 := 0x11000
000003f0: R0 := R0 + 0x10
000003f8: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003ff: R0 := mem[R31 + 0x28, el]:u64
00000406: R1 := pad:64[mem[R0, el]:u32]
0000040b: R0 := 0x11000
00000411: R0 := R0 + 0x14
00000419: mem := mem with [R0, el]:u32 <- 31:0[R1]
0000041e: R0 := 0
00000425: R29 := mem[R31, el]:u64
0000042a: R30 := mem[R31 + 8, el]:u64
0000042e: R31 := R31 + 0x30
00000433: call R30 with noreturn

0000072b: sub malloc(malloc_size, malloc_result)
00000740: malloc_size :: in u64 = R0
00000741: malloc_result :: out u64 = R0

0000036b:
0000058a: R16 := 0x10000
00000591: R17 := mem[R16 + 0xFB8, el]:u64
00000597: R16 := R16 + 0xFB8
0000059c: call R17 with noreturn

0000072c: sub register_tm_clones(register_tm_clones_result)
00000742: register_tm_clones_result :: out u32 = low:32[R0]

0000029c:
0000029f: R0 := 0x11000
000002a5: R0 := R0 + 0x18
000002aa: R1 := 0x11000
000002b0: R1 := R1 + 0x18
000002b7: R1 := R1 + ~R0 + 1
000002bd: R2 := 0.63:63[R1]
000002c4: R1 := R2 + (R1 ~>> 3)
000002ca: R1 := extend:64[63:1[R1]]
000002d0: when R1 = 0 goto %000002ce
0000072d: goto %00000470

00000470:
00000473: R2 := 0x10000
0000047a: R2 := mem[R2 + 0xFF8, el]:u64
0000047f: when R2 = 0 goto %000002ce
0000072e: goto %00000483

000002ce:
000002d6: call R30 with noreturn

00000483:
00000487: R16 := R2
0000048c: call R16 with noreturn
