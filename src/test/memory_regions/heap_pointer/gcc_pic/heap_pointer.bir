000006c4: program
000006ad: sub __cxa_finalize(__cxa_finalize_result)
000006c5: __cxa_finalize_result :: out u32 = low:32[R0]

00000470:
00000578: R16 := 0x10000
0000057f: R17 := mem[R16 + 0xFA0, el]:u64
00000585: R16 := R16 + 0xFA0
0000058a: call R17 with noreturn

000006ae: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000006c6: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002da:
000002de: #3 := R31 - 0x20
000002e4: mem := mem with [#3, el]:u64 <- R29
000002ea: mem := mem with [#3 + 8, el]:u64 <- R30
000002ee: R31 := #3
000002f4: R29 := R31
000002fc: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000301: R19 := 0x11000
00000308: R0 := pad:64[mem[R19 + 0x18]]
0000030f: when 31:0[R0] <> 0 goto %0000030d
000006af: goto %00000439

00000439:
0000043c: R0 := 0x10000
00000443: R0 := mem[R0 + 0xFD0, el]:u64
00000449: when R0 = 0 goto %00000447
000006b0: goto %00000460

00000460:
00000463: R0 := 0x11000
0000046a: R0 := mem[R0 + 8, el]:u64
0000046f: R30 := 0x770
00000472: call @__cxa_finalize with return %00000447

00000447:
0000044f: R30 := 0x774
00000451: call @deregister_tm_clones with return %00000453

00000453:
00000456: R0 := 1
0000045e: mem := mem with [R19 + 0x18] <- 7:0[R0]
000006b1: goto %0000030d

0000030d:
00000317: R19 := mem[R31 + 0x10, el]:u64
0000031e: R29 := mem[R31, el]:u64
00000323: R30 := mem[R31 + 8, el]:u64
00000327: R31 := R31 + 0x20
0000032c: call R30 with noreturn

000006b2: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000006c7: __libc_start_main_main :: in u64 = R0
000006c8: __libc_start_main_arg2 :: in u32 = low:32[R1]
000006c9: __libc_start_main_arg3 :: in out u64 = R2
000006ca: __libc_start_main_auxv :: in out u64 = R3
000006cb: __libc_start_main_result :: out u32 = low:32[R0]

00000233:
00000562: R16 := 0x10000
00000569: R17 := mem[R16 + 0xF98, el]:u64
0000056f: R16 := R16 + 0xF98
00000574: call R17 with noreturn

000006b3: sub _fini(_fini_result)
000006cc: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000006b4: sub _init(_init_result)
000006cd: _init_result :: out u32 = low:32[R0]

000005e8:
000005ee: #6 := R31 - 0x10
000005f4: mem := mem with [#6, el]:u64 <- R29
000005fa: mem := mem with [#6 + 8, el]:u64 <- R30
000005fe: R31 := #6
00000604: R29 := R31
00000609: R30 := 0x5F8
0000060b: call @call_weak_fn with return %0000060d

0000060d:
00000612: R29 := mem[R31, el]:u64
00000617: R30 := mem[R31 + 8, el]:u64
0000061b: R31 := R31 + 0x10
00000620: call R30 with noreturn

000006b5: sub _start(_start_result)
000006ce: _start_result :: out u32 = low:32[R0]

000001f4:
000001f9: R29 := 0
000001fe: R30 := 0
00000204: R5 := R0
0000020b: R1 := mem[R31, el]:u64
00000211: R2 := R31 + 8
00000217: R6 := R31
0000021c: R0 := 0x10000
00000223: R0 := mem[R0 + 0xFF0, el]:u64
00000228: R3 := 0
0000022d: R4 := 0
00000232: R30 := 0x6B0
00000235: call @__libc_start_main with return %00000237

00000237:
0000023a: R30 := 0x6B4
0000023d: call @abort with return %000006b6

000006b6:
000006b7: call @call_weak_fn with noreturn

000006b8: sub abort()


0000023b:
000005ba: R16 := 0x10000
000005c1: R17 := mem[R16 + 0xFB8, el]:u64
000005c7: R16 := R16 + 0xFB8
000005cc: call R17 with noreturn

000006b9: sub call_weak_fn(call_weak_fn_result)
000006cf: call_weak_fn_result :: out u32 = low:32[R0]

0000023f:
00000242: R0 := 0x10000
00000249: R0 := mem[R0 + 0xFE0, el]:u64
0000024f: when R0 = 0 goto %0000024d
000006ba: goto %000004b0

0000024d:
00000255: call R30 with noreturn

000004b0:
000004b3: goto @__gmon_start__

000004b1:
000005a4: R16 := 0x10000
000005ab: R17 := mem[R16 + 0xFB0, el]:u64
000005b1: R16 := R16 + 0xFB0
000005b6: call R17 with noreturn

000006bb: sub deregister_tm_clones(deregister_tm_clones_result)
000006d0: deregister_tm_clones_result :: out u32 = low:32[R0]

0000025b:
0000025e: R0 := 0x11000
00000264: R0 := R0 + 0x18
00000269: R1 := 0x11000
0000026f: R1 := R1 + 0x18
00000275: #1 := ~R0
0000027a: #2 := R1 + ~R0
00000280: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000286: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000028a: ZF := #2 + 1 = 0
0000028e: NF := 63:63[#2 + 1]
00000294: when ZF goto %00000292
000006bc: goto %00000492

00000492:
00000495: R1 := 0x10000
0000049c: R1 := mem[R1 + 0xFC8, el]:u64
000004a1: when R1 = 0 goto %00000292
000006bd: goto %000004a5

00000292:
0000029a: call R30 with noreturn

000004a5:
000004a9: R16 := R1
000004ae: call R16 with noreturn

000006be: sub frame_dummy(frame_dummy_result)
000006d1: frame_dummy_result :: out u32 = low:32[R0]

00000332:
00000334: call @register_tm_clones with noreturn

000006bf: sub main(main_argc, main_argv, main_result)
000006d2: main_argc :: in u32 = low:32[R0]
000006d3: main_argv :: in out u64 = R1
000006d4: main_result :: out u32 = low:32[R0]

00000336:
0000033a: #4 := R31 - 0x30
00000340: mem := mem with [#4, el]:u64 <- R29
00000346: mem := mem with [#4 + 8, el]:u64 <- R30
0000034a: R31 := #4
00000350: R29 := R31
00000358: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000360: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000365: R0 := 4
0000036a: R30 := 0x7AC
0000036d: call @malloc with return %0000036f

0000036f:
00000375: mem := mem with [R31 + 0x20, el]:u64 <- R0
0000037a: R0 := 4
0000037f: R30 := 0x7B8
00000381: call @malloc with return %00000383

00000383:
00000389: mem := mem with [R31 + 0x28, el]:u64 <- R0
0000038e: R0 := 0x10000
00000395: R0 := mem[R0 + 0xFD8, el]:u64
0000039c: R0 := pad:64[mem[R0, el]:u32]
000003a2: R1 := pad:64[31:0[R0] + 1]
000003a9: R0 := mem[R31 + 0x20, el]:u64
000003b1: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003b6: R0 := 0x10000
000003bd: R0 := mem[R0 + 0xFE8, el]:u64
000003c4: R0 := pad:64[mem[R0, el]:u32]
000003ca: R1 := pad:64[31:0[R0] + 2]
000003d1: R0 := mem[R31 + 0x28, el]:u64
000003d9: mem := mem with [R0, el]:u32 <- 31:0[R1]
000003e0: R0 := mem[R31 + 0x20, el]:u64
000003e7: R1 := pad:64[mem[R0, el]:u32]
000003ec: R0 := 0x10000
000003f3: R0 := mem[R0 + 0xFD8, el]:u64
000003fb: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000402: R0 := mem[R31 + 0x28, el]:u64
00000409: R1 := pad:64[mem[R0, el]:u32]
0000040e: R0 := 0x10000
00000415: R0 := mem[R0 + 0xFE8, el]:u64
0000041d: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000422: R0 := 0
00000429: R29 := mem[R31, el]:u64
0000042e: R30 := mem[R31 + 8, el]:u64
00000432: R31 := R31 + 0x30
00000437: call R30 with noreturn

000006c0: sub malloc(malloc_size, malloc_result)
000006d5: malloc_size :: in u64 = R0
000006d6: malloc_result :: out u64 = R0

0000036b:
0000058e: R16 := 0x10000
00000595: R17 := mem[R16 + 0xFA8, el]:u64
0000059b: R16 := R16 + 0xFA8
000005a0: call R17 with noreturn

000006c1: sub register_tm_clones(register_tm_clones_result)
000006d7: register_tm_clones_result :: out u32 = low:32[R0]

0000029c:
0000029f: R0 := 0x11000
000002a5: R0 := R0 + 0x18
000002aa: R1 := 0x11000
000002b0: R1 := R1 + 0x18
000002b7: R1 := R1 + ~R0 + 1
000002bd: R2 := 0.63:63[R1]
000002c4: R1 := R2 + (R1 ~>> 3)
000002ca: R1 := extend:64[63:1[R1]]
000002d0: when R1 = 0 goto %000002ce
000006c2: goto %00000474

00000474:
00000477: R2 := 0x10000
0000047e: R2 := mem[R2 + 0xFF8, el]:u64
00000483: when R2 = 0 goto %000002ce
000006c3: goto %00000487

000002ce:
000002d6: call R30 with noreturn

00000487:
0000048b: R16 := R2
00000490: call R16 with noreturn
