0000059f: program
00000589: sub __cxa_finalize(__cxa_finalize_result)
000005a0: __cxa_finalize_result :: out u32 = low:32[R0]

000003a0:
00000498: R16 := 0x11000
0000049f: R17 := mem[R16 + 8, el]:u64
000004a5: R16 := R16 + 8
000004aa: call R17 with noreturn

0000058a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005a1: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000296:
0000029a: #3 := R31 - 0x20
000002a0: mem := mem with [#3, el]:u64 <- R29
000002a6: mem := mem with [#3 + 8, el]:u64 <- R30
000002aa: R31 := #3
000002b0: R29 := R31
000002b8: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002bd: R19 := 0x11000
000002c4: R0 := pad:64[mem[R19 + 0x38]]
000002cb: when 31:0[R0] <> 0 goto %000002c9
0000058b: goto %00000369

00000369:
0000036c: R0 := 0x10000
00000373: R0 := mem[R0 + 0xFB8, el]:u64
00000379: when R0 = 0 goto %00000377
0000058c: goto %00000390

00000390:
00000393: R0 := 0x11000
0000039a: R0 := mem[R0 + 0x28, el]:u64
0000039f: R30 := 0x730
000003a2: call @__cxa_finalize with return %00000377

00000377:
0000037f: R30 := 0x734
00000381: call @deregister_tm_clones with return %00000383

00000383:
00000386: R0 := 1
0000038e: mem := mem with [R19 + 0x38] <- 7:0[R0]
0000058d: goto %000002c9

000002c9:
000002d3: R19 := mem[R31 + 0x10, el]:u64
000002da: R29 := mem[R31, el]:u64
000002df: R30 := mem[R31 + 8, el]:u64
000002e3: R31 := R31 + 0x20
000002e8: call R30 with noreturn

0000058e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005a2: __libc_start_main_main :: in u64 = R0
000005a3: __libc_start_main_arg2 :: in u32 = low:32[R1]
000005a4: __libc_start_main_arg3 :: in out u64 = R2
000005a5: __libc_start_main_auxv :: in out u64 = R3
000005a6: __libc_start_main_result :: out u32 = low:32[R0]

000001ef:
00000482: R16 := 0x11000
00000489: R17 := mem[R16, el]:u64
0000048f: R16 := R16
00000494: call R17 with noreturn

0000058f: sub _fini(_fini_result)
000005a7: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000590: sub _init(_init_result)
000005a8: _init_result :: out u32 = low:32[R0]

000004f2:
000004f8: #5 := R31 - 0x10
000004fe: mem := mem with [#5, el]:u64 <- R29
00000504: mem := mem with [#5 + 8, el]:u64 <- R30
00000508: R31 := #5
0000050e: R29 := R31
00000513: R30 := 0x5C0
00000515: call @call_weak_fn with return %00000517

00000517:
0000051c: R29 := mem[R31, el]:u64
00000521: R30 := mem[R31 + 8, el]:u64
00000525: R31 := R31 + 0x10
0000052a: call R30 with noreturn

00000591: sub _start(_start_result)
000005a9: _start_result :: out u32 = low:32[R0]

000001b0:
000001b5: R29 := 0
000001ba: R30 := 0
000001c0: R5 := R0
000001c7: R1 := mem[R31, el]:u64
000001cd: R2 := R31 + 8
000001d3: R6 := R31
000001d8: R0 := 0x10000
000001df: R0 := mem[R0 + 0xFD8, el]:u64
000001e4: R3 := 0
000001e9: R4 := 0
000001ee: R30 := 0x670
000001f1: call @__libc_start_main with return %000001f3

000001f3:
000001f6: R30 := 0x674
000001f9: call @abort with return %00000592

00000592:
00000593: call @call_weak_fn with noreturn

00000594: sub abort()


000001f7:
000004c4: R16 := 0x11000
000004cb: R17 := mem[R16 + 0x18, el]:u64
000004d1: R16 := R16 + 0x18
000004d6: call R17 with noreturn

00000595: sub call_weak_fn(call_weak_fn_result)
000005aa: call_weak_fn_result :: out u32 = low:32[R0]

000001fb:
000001fe: R0 := 0x10000
00000205: R0 := mem[R0 + 0xFC8, el]:u64
0000020b: when R0 = 0 goto %00000209
00000596: goto %000003e0

00000209:
00000211: call R30 with noreturn

000003e0:
000003e3: goto @__gmon_start__

000003e1:
000004ae: R16 := 0x11000
000004b5: R17 := mem[R16 + 0x10, el]:u64
000004bb: R16 := R16 + 0x10
000004c0: call R17 with noreturn

00000597: sub deregister_tm_clones(deregister_tm_clones_result)
000005ab: deregister_tm_clones_result :: out u32 = low:32[R0]

00000217:
0000021a: R0 := 0x11000
00000220: R0 := R0 + 0x38
00000225: R1 := 0x11000
0000022b: R1 := R1 + 0x38
00000231: #1 := ~R0
00000236: #2 := R1 + ~R0
0000023c: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
00000242: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000246: ZF := #2 + 1 = 0
0000024a: NF := 63:63[#2 + 1]
00000250: when ZF goto %0000024e
00000598: goto %000003c2

000003c2:
000003c5: R1 := 0x10000
000003cc: R1 := mem[R1 + 0xFB0, el]:u64
000003d1: when R1 = 0 goto %0000024e
00000599: goto %000003d5

0000024e:
00000256: call R30 with noreturn

000003d5:
000003d9: R16 := R1
000003de: call R16 with noreturn

0000059a: sub frame_dummy(frame_dummy_result)
000005ac: frame_dummy_result :: out u32 = low:32[R0]

000002ee:
000002f0: call @register_tm_clones with noreturn

0000059b: sub main(main_argc, main_argv, main_result)
000005ad: main_argc :: in u32 = low:32[R0]
000005ae: main_argv :: in out u64 = R1
000005af: main_result :: out u32 = low:32[R0]

000002f2:
000002f6: R31 := R31 - 0x20
000002fe: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000306: mem := mem with [R31 + 0x10, el]:u64 <- R1
0000030b: R9 := 0x10000
00000312: R9 := mem[R9 + 0xFC0, el]:u64
00000319: R8 := pad:64[mem[R9, el]:u32]
0000031f: R10 := R31 + 0xC
00000327: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000032c: R8 := 0x10000
00000333: R8 := mem[R8 + 0xFD0, el]:u64
0000033b: mem := mem with [R8, el]:u64 <- R10
00000342: R8 := mem[R8, el]:u64
00000349: R8 := pad:64[mem[R8, el]:u32]
0000034f: R8 := pad:64[31:0[R8] + 1]
00000357: mem := mem with [R9, el]:u32 <- 31:0[R8]
0000035c: R0 := 0
00000362: R31 := R31 + 0x20
00000367: call R30 with noreturn

0000059c: sub register_tm_clones(register_tm_clones_result)
000005b0: register_tm_clones_result :: out u32 = low:32[R0]

00000258:
0000025b: R0 := 0x11000
00000261: R0 := R0 + 0x38
00000266: R1 := 0x11000
0000026c: R1 := R1 + 0x38
00000273: R1 := R1 + ~R0 + 1
00000279: R2 := 0.63:63[R1]
00000280: R1 := R2 + (R1 ~>> 3)
00000286: R1 := extend:64[63:1[R1]]
0000028c: when R1 = 0 goto %0000028a
0000059d: goto %000003a4

000003a4:
000003a7: R2 := 0x10000
000003ae: R2 := mem[R2 + 0xFE0, el]:u64
000003b3: when R2 = 0 goto %0000028a
0000059e: goto %000003b7

0000028a:
00000292: call R30 with noreturn

000003b7:
000003bb: R16 := R2
000003c0: call R16 with noreturn
