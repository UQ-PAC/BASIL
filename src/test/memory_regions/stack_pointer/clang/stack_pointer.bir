000005fc: program
000005e6: sub __cxa_finalize(__cxa_finalize_result)
000005fd: __cxa_finalize_result :: out u32 = low:32[R0]

0000038a:
00000482: R16 := 0x11000
00000489: R17 := mem[R16 + 8, el]:u64
0000048f: R16 := R16 + 8
00000494: call R17 with noreturn

000005e7: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000005fe: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000028e:
00000292: #3 := R31 - 0x20
00000298: mem := mem with [#3, el]:u64 <- R29
0000029e: mem := mem with [#3 + 8, el]:u64 <- R30
000002a2: R31 := #3
000002a8: R29 := R31
000002b0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002b5: R19 := 0x11000
000002bc: R0 := pad:64[mem[R19 + 0x38]]
000002c3: when 31:0[R0] <> 0 goto %000002c1
000005e8: goto %00000353

00000353:
00000356: R0 := 0x10000
0000035d: R0 := mem[R0 + 0xFC8, el]:u64
00000363: when R0 = 0 goto %00000361
000005e9: goto %0000037a

0000037a:
0000037d: R0 := 0x11000
00000384: R0 := mem[R0 + 0x28, el]:u64
00000389: R30 := 0x6F0
0000038c: call @__cxa_finalize with return %00000361

00000361:
00000369: R30 := 0x6F4
0000036b: call @deregister_tm_clones with return %0000036d

0000036d:
00000370: R0 := 1
00000378: mem := mem with [R19 + 0x38] <- 7:0[R0]
000005ea: goto %000002c1

000002c1:
000002cb: R19 := mem[R31 + 0x10, el]:u64
000002d2: R29 := mem[R31, el]:u64
000002d7: R30 := mem[R31 + 8, el]:u64
000002db: R31 := R31 + 0x20
000002e0: call R30 with noreturn

000005eb: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000005ff: __libc_start_main_main :: in u64 = R0
00000600: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000601: __libc_start_main_arg3 :: in out u64 = R2
00000602: __libc_start_main_auxv :: in out u64 = R3
00000603: __libc_start_main_result :: out u32 = low:32[R0]

000001e7:
0000046c: R16 := 0x11000
00000473: R17 := mem[R16, el]:u64
00000479: R16 := R16
0000047e: call R17 with noreturn

000005ec: sub _fini(_fini_result)
00000604: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

000005ed: sub _init(_init_result)
00000605: _init_result :: out u32 = low:32[R0]

00000538:
0000053e: #5 := R31 - 0x10
00000544: mem := mem with [#5, el]:u64 <- R29
0000054a: mem := mem with [#5 + 8, el]:u64 <- R30
0000054e: R31 := #5
00000554: R29 := R31
00000559: R30 := 0x590
0000055b: call @call_weak_fn with return %0000055d

0000055d:
00000562: R29 := mem[R31, el]:u64
00000567: R30 := mem[R31 + 8, el]:u64
0000056b: R31 := R31 + 0x10
00000570: call R30 with noreturn

000005ee: sub _start(_start_result)
00000606: _start_result :: out u32 = low:32[R0]

000001a8:
000001ad: R29 := 0
000001b2: R30 := 0
000001b8: R5 := R0
000001bf: R1 := mem[R31, el]:u64
000001c5: R2 := R31 + 8
000001cb: R6 := R31
000001d0: R0 := 0x10000
000001d7: R0 := mem[R0 + 0xFD8, el]:u64
000001dc: R3 := 0
000001e1: R4 := 0
000001e6: R30 := 0x630
000001e9: call @__libc_start_main with return %000001eb

000001eb:
000001ee: R30 := 0x634
000001f1: call @abort with return %000005ef

000005ef:
000005f0: call @call_weak_fn with noreturn

000005f1: sub abort()


000001ef:
000004ae: R16 := 0x11000
000004b5: R17 := mem[R16 + 0x18, el]:u64
000004bb: R16 := R16 + 0x18
000004c0: call R17 with noreturn

000005f2: sub call_weak_fn(call_weak_fn_result)
00000607: call_weak_fn_result :: out u32 = low:32[R0]

000001f3:
000001f6: R0 := 0x10000
000001fd: R0 := mem[R0 + 0xFD0, el]:u64
00000203: when R0 = 0 goto %00000201
000005f3: goto %000003ca

00000201:
00000209: call R30 with noreturn

000003ca:
000003cd: goto @__gmon_start__

000003cb:
00000498: R16 := 0x11000
0000049f: R17 := mem[R16 + 0x10, el]:u64
000004a5: R16 := R16 + 0x10
000004aa: call R17 with noreturn

000005f4: sub deregister_tm_clones(deregister_tm_clones_result)
00000608: deregister_tm_clones_result :: out u32 = low:32[R0]

0000020f:
00000212: R0 := 0x11000
00000218: R0 := R0 + 0x38
0000021d: R1 := 0x11000
00000223: R1 := R1 + 0x38
00000229: #1 := ~R0
0000022e: #2 := R1 + ~R0
00000234: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000023a: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
0000023e: ZF := #2 + 1 = 0
00000242: NF := 63:63[#2 + 1]
00000248: when ZF goto %00000246
000005f5: goto %000003ac

000003ac:
000003af: R1 := 0x10000
000003b6: R1 := mem[R1 + 0xFC0, el]:u64
000003bb: when R1 = 0 goto %00000246
000005f6: goto %000003bf

00000246:
0000024e: call R30 with noreturn

000003bf:
000003c3: R16 := R1
000003c8: call R16 with noreturn

000005f7: sub frame_dummy(frame_dummy_result)
00000609: frame_dummy_result :: out u32 = low:32[R0]

000002e6:
000002e8: call @register_tm_clones with noreturn

000005f8: sub main(main_argc, main_argv, main_result)
0000060a: main_argc :: in u32 = low:32[R0]
0000060b: main_argv :: in out u64 = R1
0000060c: main_result :: out u32 = low:32[R0]

000002ea:
000002ee: R31 := R31 - 0x20
000002f6: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
000002fe: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000303: R9 := 0x11000
0000030a: R8 := pad:64[mem[R9 + 0x30, el]:u32]
00000310: R10 := R31 + 0xC
00000318: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000031d: R8 := 0x11000
00000325: mem := mem with [R8 + 0x40, el]:u64 <- R10
0000032c: R8 := mem[R8 + 0x40, el]:u64
00000333: R8 := pad:64[mem[R8, el]:u32]
00000339: R8 := pad:64[31:0[R8] + 1]
00000341: mem := mem with [R9 + 0x30, el]:u32 <- 31:0[R8]
00000346: R0 := 0
0000034c: R31 := R31 + 0x20
00000351: call R30 with noreturn

000005f9: sub register_tm_clones(register_tm_clones_result)
0000060d: register_tm_clones_result :: out u32 = low:32[R0]

00000250:
00000253: R0 := 0x11000
00000259: R0 := R0 + 0x38
0000025e: R1 := 0x11000
00000264: R1 := R1 + 0x38
0000026b: R1 := R1 + ~R0 + 1
00000271: R2 := 0.63:63[R1]
00000278: R1 := R2 + (R1 ~>> 3)
0000027e: R1 := extend:64[63:1[R1]]
00000284: when R1 = 0 goto %00000282
000005fa: goto %0000038e

0000038e:
00000391: R2 := 0x10000
00000398: R2 := mem[R2 + 0xFE0, el]:u64
0000039d: when R2 = 0 goto %00000282
000005fb: goto %000003a1

00000282:
0000028a: call R30 with noreturn

000003a1:
000003a5: R16 := R2
000003aa: call R16 with noreturn
