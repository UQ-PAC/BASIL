000008ee: program
000008cd: sub __cxa_finalize(__cxa_finalize_result)
000008ef: __cxa_finalize_result :: out u32 = low:32[R0]

00000627:
00000708: R16 := 0x10000
0000070f: R17 := mem[R16 + 0xFA0, el]:u64
00000715: R16 := R16 + 0xFA0
0000071a: call R17 with noreturn

000008ce: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008f0: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000036a:
0000036e: #5 := R31 - 0x20
00000374: mem := mem with [#5, el]:u64 <- R29
0000037a: mem := mem with [#5 + 8, el]:u64 <- R30
0000037e: R31 := #5
00000384: R29 := R31
0000038c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000391: R19 := 0x11000
00000398: R0 := pad:64[mem[R19 + 0x10]]
0000039f: when 31:0[R0] <> 0 goto %0000039d
000008cf: goto %000005f0

000005f0:
000005f3: R0 := 0x10000
000005fa: R0 := mem[R0 + 0xFD8, el]:u64
00000600: when R0 = 0 goto %000005fe
000008d0: goto %00000617

00000617:
0000061a: R0 := 0x11000
00000621: R0 := mem[R0 + 8, el]:u64
00000626: R30 := 0x700
00000629: call @__cxa_finalize with return %000005fe

000005fe:
00000606: R30 := 0x704
00000608: call @deregister_tm_clones with return %0000060a

0000060a:
0000060d: R0 := 1
00000615: mem := mem with [R19 + 0x10] <- 7:0[R0]
000008d1: goto %0000039d

0000039d:
000003a7: R19 := mem[R31 + 0x10, el]:u64
000003ae: R29 := mem[R31, el]:u64
000003b3: R30 := mem[R31 + 8, el]:u64
000003b7: R31 := R31 + 0x20
000003bc: call R30 with noreturn

000008d2: sub __libc_csu_fini(__libc_csu_fini_result)
000008f1: __libc_csu_fini_result :: out u32 = low:32[R0]

0000055c:
0000055f: call R30 with noreturn

000008d3: sub __libc_csu_init(__libc_csu_init_result)
000008f2: __libc_csu_init_result :: out u32 = low:32[R0]

00000469:
0000046d: #9 := R31 - 0x40
00000473: mem := mem with [#9, el]:u64 <- R29
00000479: mem := mem with [#9 + 8, el]:u64 <- R30
0000047d: R31 := #9
00000483: R29 := R31
00000489: #10 := R31 + 0x10
0000048f: mem := mem with [#10, el]:u64 <- R19
00000495: mem := mem with [#10 + 8, el]:u64 <- R20
0000049a: R20 := 0x10000
000004a0: R20 := R20 + 0xD90
000004a6: #11 := R31 + 0x20
000004ac: mem := mem with [#11, el]:u64 <- R21
000004b2: mem := mem with [#11 + 8, el]:u64 <- R22
000004b7: R21 := 0x10000
000004bd: R21 := R21 + 0xD88
000004c4: R20 := R20 + ~R21 + 1
000004ca: R22 := pad:64[31:0[R0]]
000004d0: #12 := R31 + 0x30
000004d6: mem := mem with [#12, el]:u64 <- R23
000004dc: mem := mem with [#12 + 8, el]:u64 <- R24
000004e2: R23 := R1
000004e8: R24 := R2
000004ed: R30 := 0x7C0
000004f0: call @_init with return %000004f2

000004f2:
000004f6: #13 := ~(R20 ~>> 3)
000004fa: #14 := ~(R20 ~>> 3) + 1
000004ff: VF := extend:65[#14] <> extend:65[#13] + 1
00000504: CF := pad:65[#14] <> pad:65[#13] + 1
00000508: ZF := #14 = 0
0000050c: NF := 63:63[#14]
00000512: when ZF goto %00000510
000008d4: goto %00000561

00000561:
00000567: R20 :=

          >> 3 | R20 << 0x3D]
0000056c: R19 := 0
000008d5: goto %0000056e

0000056e:
00000574: R3 := mem[R21 + (60:0[R19].0), el]:u64
0000057a: R2 := R24
00000580: R19 := R19 + 1
00000586: R1 := R23
0000058c: R0 := pad:64[31:0[R22]]
00000591: R30 := 0x7E8
00000594: call R3 with return %00000596

00000596:
0000059a: #18 := ~R19
0000059f: #19 := R20 + ~R19 + 1
000005a5: VF := extend:65[#19] <> extend:65[R20] + extend:65[#18] + 1
000005ab: CF := pad:65[#19] <> pad:65[R20] + pad:65[#18] + 1
000005af: ZF := #19 = 0
000005b3: NF := 63:63[#19]
000005b8: when ZF <> 1 goto %0000056e
000008d6: goto %00000510

00000510:
00000519: #15 := R31 + 0x10
0000051e: R19 := mem[#15, el]:u64
00000523: R20 := mem[#15 + 8, el]:u64
00000529: #16 := R31 + 0x20
0000052e: R21 := mem[#16, el]:u64
00000533: R22 := mem[#16 + 8, el]:u64
00000539: #17 := R31 + 0x30
0000053e: R23 := mem[#17, el]:u64
00000543: R24 := mem[#17 + 8, el]:u64
0000054a: R29 := mem[R31, el]:u64
0000054f: R30 := mem[R31 + 8, el]:u64
00000553: R31 := R31 + 0x40
00000558: call R30 with noreturn

000008d7: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008f3: __libc_start_main_main :: in u64 = R0
000008f4: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008f5: __libc_start_main_arg3 :: in out u64 = R2
000008f6: __libc_start_main_auxv :: in out u64 = R3
000008f7: __libc_start_main_result :: out u32 = low:32[R0]

000002a8:
0000071e: R16 := 0x10000
00000725: R17 := mem[R16 + 0xFA8, el]:u64
0000072b: R16 := R16 + 0xFA8
00000730: call R17 with noreturn

000008d8: sub _fini(_fini_result)
000008f8: _fini_result :: out u32 = low:32[R0]

0000002e:
00000032: #0 := R31 - 0x10
00000038: mem := mem with [#0, el]:u64 <- R29
0000003e: mem := mem with [#0 + 8, el]:u64 <- R30
00000042: R31 := #0
00000048: R29 := R31
0000004f: R29 := mem[R31, el]:u64
00000054: R30 := mem[R31 + 8, el]:u64
00000058: R31 := R31 + 0x10
0000005d: call R30 with noreturn

000008d9: sub _init(_init_result)
000008f9: _init_result :: out u32 = low:32[R0]

000004ee:
000007fc: #21 := R31 - 0x10
00000802: mem := mem with [#21, el]:u64 <- R29
00000808: mem := mem with [#21 + 8, el]:u64 <- R30
0000080c: R31 := #21
00000812: R29 := R31
00000817: R30 := 0x5A4
00000819: call @call_weak_fn with return %0000081b

0000081b:
00000820: R29 := mem[R31, el]:u64
00000825: R30 := mem[R31 + 8, el]:u64
00000829: R31 := R31 + 0x10
0000082e: call R30 with noreturn

000008da: sub _start(_start_result)
000008fa: _start_result :: out u32 = low:32[R0]

0000025d:
00000260: R29 := 0
00000265: R30 := 0
0000026b: R5 := R0
00000272: R1 := mem[R31, el]:u64
00000278: R2 := R31 + 8
0000027e: R6 := R31
00000283: R0 := 0x10000
0000028a: R0 := mem[R0 + 0xFF0, el]:u64
0000028f: R3 := 0x10000
00000296: R3 := mem[R3 + 0xFE8, el]:u64
0000029b: R4 := 0x10000
000002a2: R4 := mem[R4 + 0xFC8, el]:u64
000002a7: R30 := 0x644
000002aa: call @__libc_start_main with return %000002ac

000002ac:
000002af: R30 := 0x648
000002b2: call @abort with return %000008db

000008db:
000008dc: call @call_weak_fn with noreturn

000008dd: sub abort()


000002b0:
0000074a: R16 := 0x10000
00000751: R17 := mem[R16 + 0xFB8, el]:u64
00000757: R16 := R16 + 0xFB8
0000075c: call R17 with noreturn

000008de: sub call_weak_fn(call_weak_fn_result)
000008fb: call_weak_fn_result :: out u32 = low:32[R0]

000002b4:
000002b7: R0 := 0x10000
000002be: R0 := mem[R0 + 0xFE0, el]:u64
000002c4: when R0 = 0 goto %000002c2
000008df: goto %00000667

000002c2:
000002ca: call R30 with noreturn

00000667:
0000066a: goto @__gmon_start__

00000668:
00000734: R16 := 0x10000
0000073b: R17 := mem[R16 + 0xFB0, el]:u64
00000741: R16 := R16 + 0xFB0
00000746: call R17 with noreturn

000008e0: sub deregister_tm_clones(deregister_tm_clones_result)
000008fc: deregister_tm_clones_result :: out u32 = low:32[R0]

000002ce:
000002d1: R0 := 0x11000
000002d7: R0 := R0 + 0x10
000002dc: R1 := 0x11000
000002e2: R1 := R1 + 0x10
000002e8: #1 := ~R0
000002ed: #2 := R1 + ~R0 + 1
000002f3: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002f9: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002fd: ZF := #2 = 0
00000301: NF := 63:63[#2]
00000307: when ZF goto %00000305
000008e1: goto %00000649

00000649:
0000064c: R1 := 0x10000
00000653: R1 := mem[R1 + 0xFD0, el]:u64
00000658: when R1 = 0 goto %00000305
000008e2: goto %0000065c

00000305:
0000030d: call R30 with noreturn

0000065c:
00000660: R16 := R1
00000665: call R16 with noreturn

000008e3: sub frame_dummy(frame_dummy_result)
000008fd: frame_dummy_result :: out u32 = low:32[R0]

000003be:
000003c0: call @register_tm_clones with noreturn

000008e4: sub main(main_argc, main_argv, main_result)
000008fe: main_argc :: in u32 = low:32[R0]
000008ff: main_argv :: in out u64 = R1
00000900: main_result :: out u32 = low:32[R0]

000003c2:
000003c6: R31 := R31 - 0x10
000003cd: mem := mem with [R31 + 0xC, el]:u32 <- 0
000003d2: R0 := 0x11000
000003d8: R0 := R0 + 0x18
000003df: R0 := pad:64[mem[R0, el]:u32]
000003e5: #6 := 31:0[R0] + 0
000003ea: VF := extend:33[#6] <> extend:33[31:0[R0]] + 0
000003ef: CF := pad:33[#6] <> pad:33[31:0[R0]] - 0x100000000
000003f3: ZF := #6 = 0
000003f7: NF := 31:31[#6]
000003fd: when ZF <> 1 goto %000003fb
000008e5: goto %000005e3

000005e3:
000005e6: R0 := 3
000005ee: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000008e6: goto %000003fb

000003fb:
00000403: R0 := 0x11000
00000409: R0 := R0 + 0x18
00000410: R0 := pad:64[mem[R0, el]:u32]
00000416: #7 := 31:0[R0] - 1
0000041b: VF := extend:33[#7] <> extend:33[31:0[R0]] - 1
00000420: CF := pad:33[#7] <> pad:33[31:0[R0]] + 0xFFFFFFFF
00000424: ZF := #7 = 0
00000428: NF := 31:31[#7]
0000042e: when ZF <> 1 goto %0000042c
000008e7: goto %000005d6

000005d6:
000005d9: R0 := 5
000005e1: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000008e8: goto %0000042c

0000042c:
00000436: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000043c: #8 := 31:0[R0] - 3
00000441: VF := extend:33[#8] <> extend:33[31:0[R0]] - 3
00000446: CF := pad:33[#8] <> pad:33[31:0[R0]] + 0xFFFFFFFD
0000044a: ZF := #8 = 0
0000044e: NF := 31:31[#8]
00000454: when ZF <> 1 goto %00000452
000008e9: goto %000005bc

000005bc:
000005bf: R0 := 0x11000
000005c5: R0 := R0 + 0x14
000005cc: R0 := pad:64[mem[R0, el]:u32]
000005d4: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000008ea: goto %00000452

00000452:
0000045a: R0 := 0
00000460: R31 := R31 + 0x10
00000465: call R30 with noreturn

000008eb: sub register_tm_clones(register_tm_clones_result)
00000901: register_tm_clones_result :: out u32 = low:32[R0]

0000030f:
00000312: R0 := 0x11000
00000318: R0 := R0 + 0x10
0000031d: R1 := 0x11000
00000323: R1 := R1 + 0x10
0000032a: R1 := R1 + ~R0 + 1
00000331: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000338: R1 := R2 + (R1 ~>> 3)
0000033e: #3 := ~(R1 ~>> 1)
00000342: #4 := ~(R1 ~>> 1) + 1
00000347: VF := extend:65[#4] <> extend:65[#3] + 1
0000034c: CF := pad:65[#4] <> pad:65[#3] + 1
00000350: ZF := #4 = 0
00000354: NF := 63:63[#4]
0000035c: R1 :=

          >> 1 | R1 << 0x3F]
00000362: when ZF goto %00000360
000008ec: goto %0000062b

0000062b:
0000062e: R2 := 0x10000
00000635: R2 := mem[R2 + 0xFF8, el]:u64
0000063a: when R2 = 0 goto %00000360
000008ed: goto %0000063e

00000360:
00000368: call R30 with noreturn

0000063e:
00000642: R16 := R2
00000647: call R16 with noreturn
