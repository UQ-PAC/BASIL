00000990: program
00000973: sub __cxa_finalize(__cxa_finalize_result)
00000991: __cxa_finalize_result :: out u32 = low:32[R0]

0000068b:
0000077c: R16 := 0x10000
00000783: R17 := mem[R16 + 0xF98, el]:u64
00000789: R16 := R16 + 0xF98
0000078e: call R17 with noreturn

00000974: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000992: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000039f:
000003a3: #5 := R31 - 0x20
000003a9: mem := mem with [#5, el]:u64 <- R29
000003af: mem := mem with [#5 + 8, el]:u64 <- R30
000003b3: R31 := #5
000003b9: R29 := R31
000003c1: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003c6: R19 := 0x11000
000003cd: R0 := pad:64[mem[R19 + 0x10]]
000003d4: when 31:0[R0] <> 0 goto %000003d2
00000975: goto %00000654

00000654:
00000657: R0 := 0x10000
0000065e: R0 := mem[R0 + 0xFD8, el]:u64
00000664: when R0 = 0 goto %00000662
00000976: goto %0000067b

0000067b:
0000067e: R0 := 0x11000
00000685: R0 := mem[R0 + 8, el]:u64
0000068a: R30 := 0x750
0000068d: call @__cxa_finalize with return %00000662

00000662:
0000066a: R30 := 0x754
0000066c: call @deregister_tm_clones with return %0000066e

0000066e:
00000671: R0 := 1
00000679: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000977: goto %000003d2

000003d2:
000003dc: R19 := mem[R31 + 0x10, el]:u64
000003e3: R29 := mem[R31, el]:u64
000003e8: R30 := mem[R31 + 8, el]:u64
000003ec: R31 := R31 + 0x20
000003f1: call R30 with noreturn

00000978: sub __libc_csu_fini(__libc_csu_fini_result)
00000993: __libc_csu_fini_result :: out u32 = low:32[R0]

000005f4:
000005f7: call R30 with noreturn

00000979: sub __libc_csu_init(__libc_csu_init_result)
00000994: __libc_csu_init_result :: out u32 = low:32[R0]

00000501:
00000505: #7 := R31 - 0x40
0000050b: mem := mem with [#7, el]:u64 <- R29
00000511: mem := mem with [#7 + 8, el]:u64 <- R30
00000515: R31 := #7
0000051b: R29 := R31
00000521: #8 := R31 + 0x10
00000527: mem := mem with [#8, el]:u64 <- R19
0000052d: mem := mem with [#8 + 8, el]:u64 <- R20
00000532: R20 := 0x10000
00000538: R20 := R20 + 0xD88
0000053e: #9 := R31 + 0x20
00000544: mem := mem with [#9, el]:u64 <- R21
0000054a: mem := mem with [#9 + 8, el]:u64 <- R22
0000054f: R21 := 0x10000
00000555: R21 := R21 + 0xD80
0000055c: R20 := R20 + ~R21 + 1
00000562: R22 := pad:64[31:0[R0]]
00000568: #10 := R31 + 0x30
0000056e: mem := mem with [#10, el]:u64 <- R23
00000574: mem := mem with [#10 + 8, el]:u64 <- R24
0000057a: R23 := R1
00000580: R24 := R2
00000585: R30 := 0x840
00000588: call @_init with return %0000058a

0000058a:
0000058e: #11 := ~(R20 ~>> 3)
00000592: #12 := ~(R20 ~>> 3) + 1
00000597: VF := extend:65[#12] <> extend:65[#11] + 1
0000059c: CF := pad:65[#12] <> pad:65[#11] + 1
000005a0: ZF := #12 = 0
000005a4: NF := 63:63[#12]
000005aa: when ZF goto %000005a8
0000097a: goto %000005f9

000005f9:
000005ff: R20 :=

          >> 3 | R20 << 0x3D]
00000604: R19 := 0
0000097b: goto %00000606

00000606:
0000060c: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000612: R2 := R24
00000618: R19 := R19 + 1
0000061e: R1 := R23
00000624: R0 := pad:64[31:0[R22]]
00000629: R30 := 0x868
0000062c: call R3 with return %0000062e

0000062e:
00000632: #16 := ~R19
00000637: #17 := R20 + ~R19 + 1
0000063d: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
00000643: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
00000647: ZF := #17 = 0
0000064b: NF := 63:63[#17]
00000650: when ZF <> 1 goto %00000606
0000097c: goto %000005a8

000005a8:
000005b1: #13 := R31 + 0x10
000005b6: R19 := mem[#13, el]:u64
000005bb: R20 := mem[#13 + 8, el]:u64
000005c1: #14 := R31 + 0x20
000005c6: R21 := mem[#14, el]:u64
000005cb: R22 := mem[#14 + 8, el]:u64
000005d1: #15 := R31 + 0x30
000005d6: R23 := mem[#15, el]:u64
000005db: R24 := mem[#15 + 8, el]:u64
000005e2: R29 := mem[R31, el]:u64
000005e7: R30 := mem[R31 + 8, el]:u64
000005eb: R31 := R31 + 0x40
000005f0: call R30 with noreturn

0000097d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000995: __libc_start_main_main :: in u64 = R0
00000996: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000997: __libc_start_main_arg3 :: in out u64 = R2
00000998: __libc_start_main_auxv :: in out u64 = R3
00000999: __libc_start_main_result :: out u32 = low:32[R0]

000002dd:
00000792: R16 := 0x10000
00000799: R17 := mem[R16 + 0xFA0, el]:u64
0000079f: R16 := R16 + 0xFA0
000007a4: call R17 with noreturn

0000097e: sub _fini(_fini_result)
0000099a: _fini_result :: out u32 = low:32[R0]

00000033:
00000037: #0 := R31 - 0x10
0000003d: mem := mem with [#0, el]:u64 <- R29
00000043: mem := mem with [#0 + 8, el]:u64 <- R30
00000047: R31 := #0
0000004d: R29 := R31
00000054: R29 := mem[R31, el]:u64
00000059: R30 := mem[R31 + 8, el]:u64
0000005d: R31 := R31 + 0x10
00000062: call R30 with noreturn

0000097f: sub _init(_init_result)
0000099b: _init_result :: out u32 = low:32[R0]

00000586:
00000892: #19 := R31 - 0x10
00000898: mem := mem with [#19, el]:u64 <- R29
0000089e: mem := mem with [#19 + 8, el]:u64 <- R30
000008a2: R31 := #19
000008a8: R29 := R31
000008ad: R30 := 0x5DC
000008af: call @call_weak_fn with return %000008b1

000008b1:
000008b6: R29 := mem[R31, el]:u64
000008bb: R30 := mem[R31 + 8, el]:u64
000008bf: R31 := R31 + 0x10
000008c4: call R30 with noreturn

00000980: sub _start(_start_result)
0000099c: _start_result :: out u32 = low:32[R0]

00000292:
00000295: R29 := 0
0000029a: R30 := 0
000002a0: R5 := R0
000002a7: R1 := mem[R31, el]:u64
000002ad: R2 := R31 + 8
000002b3: R6 := R31
000002b8: R0 := 0x10000
000002bf: R0 := mem[R0 + 0xFF0, el]:u64
000002c4: R3 := 0x10000
000002cb: R3 := mem[R3 + 0xFE8, el]:u64
000002d0: R4 := 0x10000
000002d7: R4 := mem[R4 + 0xFC8, el]:u64
000002dc: R30 := 0x694
000002df: call @__libc_start_main with return %000002e1

000002e1:
000002e4: R30 := 0x698
000002e7: call @abort with return %00000981

00000981:
00000982: call @call_weak_fn with noreturn

00000983: sub abort()


000002e5:
000007be: R16 := 0x10000
000007c5: R17 := mem[R16 + 0xFB0, el]:u64
000007cb: R16 := R16 + 0xFB0
000007d0: call R17 with noreturn

00000984: sub call_weak_fn(call_weak_fn_result)
0000099d: call_weak_fn_result :: out u32 = low:32[R0]

000002e9:
000002ec: R0 := 0x10000
000002f3: R0 := mem[R0 + 0xFE0, el]:u64
000002f9: when R0 = 0 goto %000002f7
00000985: goto %000006cb

000002f7:
000002ff: call R30 with noreturn

000006cb:
000006ce: goto @__gmon_start__

000006cc:
000007a8: R16 := 0x10000
000007af: R17 := mem[R16 + 0xFA8, el]:u64
000007b5: R16 := R16 + 0xFA8
000007ba: call R17 with noreturn

00000986: sub deregister_tm_clones(deregister_tm_clones_result)
0000099e: deregister_tm_clones_result :: out u32 = low:32[R0]

00000303:
00000306: R0 := 0x11000
0000030c: R0 := R0 + 0x10
00000311: R1 := 0x11000
00000317: R1 := R1 + 0x10
0000031d: #1 := ~R0
00000322: #2 := R1 + ~R0 + 1
00000328: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
0000032e: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
00000332: ZF := #2 = 0
00000336: NF := 63:63[#2]
0000033c: when ZF goto %0000033a
00000987: goto %000006ad

000006ad:
000006b0: R1 := 0x10000
000006b7: R1 := mem[R1 + 0xFD0, el]:u64
000006bc: when R1 = 0 goto %0000033a
00000988: goto %000006c0

0000033a:
00000342: call R30 with noreturn

000006c0:
000006c4: R16 := R1
000006c9: call R16 with noreturn

00000989: sub frame_dummy(frame_dummy_result)
0000099f: frame_dummy_result :: out u32 = low:32[R0]

000003f3:
000003f5: call @register_tm_clones with noreturn

0000098a: sub get_two(get_two_result)
000009a0: get_two_result :: out u32 = low:32[R0]

000003f7:
000003fb: R31 := R31 - 0x10
00000403: mem := mem with [R31 + 0xF] <- 7:0[R0]
0000040b: mem := mem with [R31 + 8, el]:u32 <- 31:0[R1]
00000413: mem := mem with [R31, el]:u64 <- R2
0000041a: R1 := pad:64[mem[R31 + 0xF]]
00000421: R0 := pad:64[mem[R31 + 8, el]:u32]
00000428: R0 := pad:64[31:0[R1] + 31:0[R0]]
0000042e: R1 := pad:64[31:0[R0]]
00000435: R0 := mem[R31, el]:u64
0000043c: R0 := pad:64[31:0[R1] + 31:0[R0]]
00000442: R31 := R31 + 0x10
00000447: call R30 with noreturn

0000098b: sub main(main_argc, main_argv, main_result)
000009a1: main_argc :: in u32 = low:32[R0]
000009a2: main_argv :: in out u64 = R1
000009a3: main_result :: out u32 = low:32[R0]

00000449:
0000044d: #6 := R31 - 0x10
00000453: mem := mem with [#6, el]:u64 <- R29
00000459: mem := mem with [#6 + 8, el]:u64 <- R30
0000045d: R31 := #6
00000463: R29 := R31
00000468: R0 := 0x11000
0000046e: R0 := R0 + 0x14
00000473: R1 := 1
0000047b: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000480: R2 := 0xE400
00000487: R2 := 63:32[R2].0x540B.15:0[R2]
0000048e: R2 := 63:48[R2].2.31:0[R2]
00000493: R1 := 0xA
00000498: R0 := 0x61
0000049d: R30 := 0x7CC
0000049f: call @get_two with return %000004a1

000004a1:
000004a5: R1 := pad:64[31:0[R0]]
000004aa: R0 := 0x11000
000004b0: R0 := R0 + 0x18
000004b8: mem := mem with [R0, el]:u32 <- 31:0[R1]
000004bd: R0 := 0x11000
000004c3: R0 := R0 + 0x18
000004ca: R0 := pad:64[mem[R0, el]:u32]
000004d0: R1 := pad:64[31:0[R0]]
000004d5: R0 := 0
000004db: R0 := R0 + 0x8A8
000004e0: R30 := 0x7F8
000004e3: call @printf with return %000004e5

000004e5:
000004e8: R0 := 0
000004ef: R29 := mem[R31, el]:u64
000004f4: R30 := mem[R31 + 8, el]:u64
000004f8: R31 := R31 + 0x10
000004fd: call R30 with noreturn

0000098c: sub printf(printf_format, printf_result)
000009a4: printf_format :: in u64 = R0
000009a5: printf_result :: out u32 = low:32[R0]

000004e1:
000007d4: R16 := 0x10000
000007db: R17 := mem[R16 + 0xFB8, el]:u64
000007e1: R16 := R16 + 0xFB8
000007e6: call R17 with noreturn

0000098d: sub register_tm_clones(register_tm_clones_result)
000009a6: register_tm_clones_result :: out u32 = low:32[R0]

00000344:
00000347: R0 := 0x11000
0000034d: R0 := R0 + 0x10
00000352: R1 := 0x11000
00000358: R1 := R1 + 0x10
0000035f: R1 := R1 + ~R0 + 1
00000366: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
0000036d: R1 := R2 + (R1 ~>> 3)
00000373: #3 := ~(R1 ~>> 1)
00000377: #4 := ~(R1 ~>> 1) + 1
0000037c: VF := extend:65[#4] <> extend:65[#3] + 1
00000381: CF := pad:65[#4] <> pad:65[#3] + 1
00000385: ZF := #4 = 0
00000389: NF := 63:63[#4]
00000391: R1 :=

          >> 1 | R1 << 0x3F]
00000397: when ZF goto %00000395
0000098e: goto %0000068f

0000068f:
00000692: R2 := 0x10000
00000699: R2 := mem[R2 + 0xFF8, el]:u64
0000069e: when R2 = 0 goto %00000395
0000098f: goto %000006a2

00000395:
0000039d: call R30 with noreturn

000006a2:
000006a6: R16 := R2
000006ab: call R16 with noreturn
