000008e3: program
000008c8: sub __cxa_finalize(__cxa_finalize_result)
000008e4: __cxa_finalize_result :: out u32 = low:32[R0]

0000061a:
000006fb: R16 := 0x10000
00000702: R17 := mem[R16 + 0xFA0, el]:u64
00000708: R16 := R16 + 0xFA0
0000070d: call R17 with noreturn

000008c9: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008e5: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000037c:
00000380: #5 := R31 - 0x20
00000386: mem := mem with [#5, el]:u64 <- R29
0000038c: mem := mem with [#5 + 8, el]:u64 <- R30
00000390: R31 := #5
00000396: R29 := R31
0000039e: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003a3: R19 := 0x11000
000003aa: R0 := pad:64[mem[R19 + 0x28]]
000003b1: when 31:0[R0] <> 0 goto %000003af
000008ca: goto %000005e3

000005e3:
000005e6: R0 := 0x10000
000005ed: R0 := mem[R0 + 0xFD8, el]:u64
000005f3: when R0 = 0 goto %000005f1
000008cb: goto %0000060a

0000060a:
0000060d: R0 := 0x11000
00000614: R0 := mem[R0 + 8, el]:u64
00000619: R30 := 0x700
0000061c: call @__cxa_finalize with return %000005f1

000005f1:
000005f9: R30 := 0x704
000005fb: call @deregister_tm_clones with return %000005fd

000005fd:
00000600: R0 := 1
00000608: mem := mem with [R19 + 0x28] <- 7:0[R0]
000008cc: goto %000003af

000003af:
000003b9: R19 := mem[R31 + 0x10, el]:u64
000003c0: R29 := mem[R31, el]:u64
000003c5: R30 := mem[R31 + 8, el]:u64
000003c9: R31 := R31 + 0x20
000003ce: call R30 with noreturn

000008cd: sub __libc_csu_fini(__libc_csu_fini_result)
000008e6: __libc_csu_fini_result :: out u32 = low:32[R0]

00000583:
00000586: call R30 with noreturn

000008ce: sub __libc_csu_init(__libc_csu_init_result)
000008e7: __libc_csu_init_result :: out u32 = low:32[R0]

00000490:
00000494: #6 := R31 - 0x40
0000049a: mem := mem with [#6, el]:u64 <- R29
000004a0: mem := mem with [#6 + 8, el]:u64 <- R30
000004a4: R31 := #6
000004aa: R29 := R31
000004b0: #7 := R31 + 0x10
000004b6: mem := mem with [#7, el]:u64 <- R19
000004bc: mem := mem with [#7 + 8, el]:u64 <- R20
000004c1: R20 := 0x10000
000004c7: R20 := R20 + 0xD90
000004cd: #8 := R31 + 0x20
000004d3: mem := mem with [#8, el]:u64 <- R21
000004d9: mem := mem with [#8 + 8, el]:u64 <- R22
000004de: R21 := 0x10000
000004e4: R21 := R21 + 0xD88
000004eb: R20 := R20 + ~R21 + 1
000004f1: R22 := pad:64[31:0[R0]]
000004f7: #9 := R31 + 0x30
000004fd: mem := mem with [#9, el]:u64 <- R23
00000503: mem := mem with [#9 + 8, el]:u64 <- R24
00000509: R23 := R1
0000050f: R24 := R2
00000514: R30 := 0x7D0
00000517: call @_init with return %00000519

00000519:
0000051d: #10 := ~(R20 ~>> 3)
00000521: #11 := ~(R20 ~>> 3) + 1
00000526: VF := extend:65[#11] <> extend:65[#10] + 1
0000052b: CF := pad:65[#11] <> pad:65[#10] + 1
0000052f: ZF := #11 = 0
00000533: NF := 63:63[#11]
00000539: when ZF goto %00000537
000008cf: goto %00000588

00000588:
0000058e: R20 :=

          >> 3 | R20 << 0x3D]
00000593: R19 := 0
000008d0: goto %00000595

00000595:
0000059b: R3 := mem[R21 + (60:0[R19].0), el]:u64
000005a1: R2 := R24
000005a7: R19 := R19 + 1
000005ad: R1 := R23
000005b3: R0 := pad:64[31:0[R22]]
000005b8: R30 := 0x7F8
000005bb: call R3 with return %000005bd

000005bd:
000005c1: #15 := ~R19
000005c6: #16 := R20 + ~R19 + 1
000005cc: VF := extend:65[#16] <> extend:65[R20] + extend:65[#15] + 1
000005d2: CF := pad:65[#16] <> pad:65[R20] + pad:65[#15] + 1
000005d6: ZF := #16 = 0
000005da: NF := 63:63[#16]
000005df: when ZF <> 1 goto %00000595
000008d1: goto %00000537

00000537:
00000540: #12 := R31 + 0x10
00000545: R19 := mem[#12, el]:u64
0000054a: R20 := mem[#12 + 8, el]:u64
00000550: #13 := R31 + 0x20
00000555: R21 := mem[#13, el]:u64
0000055a: R22 := mem[#13 + 8, el]:u64
00000560: #14 := R31 + 0x30
00000565: R23 := mem[#14, el]:u64
0000056a: R24 := mem[#14 + 8, el]:u64
00000571: R29 := mem[R31, el]:u64
00000576: R30 := mem[R31 + 8, el]:u64
0000057a: R31 := R31 + 0x40
0000057f: call R30 with noreturn

000008d2: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008e8: __libc_start_main_main :: in u64 = R0
000008e9: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008ea: __libc_start_main_arg3 :: in out u64 = R2
000008eb: __libc_start_main_auxv :: in out u64 = R3
000008ec: __libc_start_main_result :: out u32 = low:32[R0]

000002ba:
00000711: R16 := 0x10000
00000718: R17 := mem[R16 + 0xFA8, el]:u64
0000071e: R16 := R16 + 0xFA8
00000723: call R17 with noreturn

000008d3: sub _fini(_fini_result)
000008ed: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

000008d4: sub _init(_init_result)
000008ee: _init_result :: out u32 = low:32[R0]

00000515:
000007f3: #18 := R31 - 0x10
000007f9: mem := mem with [#18, el]:u64 <- R29
000007ff: mem := mem with [#18 + 8, el]:u64 <- R30
00000803: R31 := #18
00000809: R29 := R31
0000080e: R30 := 0x5A4
00000810: call @call_weak_fn with return %00000812

00000812:
00000817: R29 := mem[R31, el]:u64
0000081c: R30 := mem[R31 + 8, el]:u64
00000820: R31 := R31 + 0x10
00000825: call R30 with noreturn

000008d5: sub _start(_start_result)
000008ef: _start_result :: out u32 = low:32[R0]

0000026f:
00000272: R29 := 0
00000277: R30 := 0
0000027d: R5 := R0
00000284: R1 := mem[R31, el]:u64
0000028a: R2 := R31 + 8
00000290: R6 := R31
00000295: R0 := 0x10000
0000029c: R0 := mem[R0 + 0xFF0, el]:u64
000002a1: R3 := 0x10000
000002a8: R3 := mem[R3 + 0xFE8, el]:u64
000002ad: R4 := 0x10000
000002b4: R4 := mem[R4 + 0xFC8, el]:u64
000002b9: R30 := 0x644
000002bc: call @__libc_start_main with return %000002be

000002be:
000002c1: R30 := 0x648
000002c4: call @abort with return %000008d6

000008d6:
000008d7: call @call_weak_fn with noreturn

000008d8: sub abort()


000002c2:
0000073d: R16 := 0x10000
00000744: R17 := mem[R16 + 0xFB8, el]:u64
0000074a: R16 := R16 + 0xFB8
0000074f: call R17 with noreturn

000008d9: sub call_weak_fn(call_weak_fn_result)
000008f0: call_weak_fn_result :: out u32 = low:32[R0]

000002c6:
000002c9: R0 := 0x10000
000002d0: R0 := mem[R0 + 0xFE0, el]:u64
000002d6: when R0 = 0 goto %000002d4
000008da: goto %0000065a

000002d4:
000002dc: call R30 with noreturn

0000065a:
0000065d: goto @__gmon_start__

0000065b:
00000727: R16 := 0x10000
0000072e: R17 := mem[R16 + 0xFB0, el]:u64
00000734: R16 := R16 + 0xFB0
00000739: call R17 with noreturn

000008db: sub deregister_tm_clones(deregister_tm_clones_result)
000008f1: deregister_tm_clones_result :: out u32 = low:32[R0]

000002e0:
000002e3: R0 := 0x11000
000002e9: R0 := R0 + 0x28
000002ee: R1 := 0x11000
000002f4: R1 := R1 + 0x28
000002fa: #1 := ~R0
000002ff: #2 := R1 + ~R0 + 1
00000305: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
0000030b: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
0000030f: ZF := #2 = 0
00000313: NF := 63:63[#2]
00000319: when ZF goto %00000317
000008dc: goto %0000063c

0000063c:
0000063f: R1 := 0x10000
00000646: R1 := mem[R1 + 0xFD0, el]:u64
0000064b: when R1 = 0 goto %00000317
000008dd: goto %0000064f

00000317:
0000031f: call R30 with noreturn

0000064f:
00000653: R16 := R1
00000658: call R16 with noreturn

000008de: sub frame_dummy(frame_dummy_result)
000008f2: frame_dummy_result :: out u32 = low:32[R0]

000003d0:
000003d2: call @register_tm_clones with noreturn

000008df: sub main(main_argc, main_argv, main_result)
000008f3: main_argc :: in u32 = low:32[R0]
000008f4: main_argv :: in out u64 = R1
000008f5: main_result :: out u32 = low:32[R0]

000003d4:
000003d7: R0 := 0x11000
000003dd: R0 := R0 + 0x10
000003e4: R0 := pad:64[mem[R0, el]:u32]
000003ea: R1 := pad:64[31:0[R0] + 1]
000003ef: R0 := 0x11000
000003f5: R0 := R0 + 0x10
000003fd: mem := mem with [R0, el]:u32 <- 31:0[R1]
00000402: R0 := 0x11000
00000408: R0 := R0 + 0x18
0000040f: R0 := mem[R0, el]:u64
00000415: R1 := R0 - 1
0000041a: R0 := 0x11000
00000420: R0 := R0 + 0x18
00000428: mem := mem with [R0, el]:u64 <- R1
0000042d: R0 := 0x11000
00000433: R0 := R0 + 0x20
0000043a: R0 := pad:64[mem[R0, el]:u32]
00000440: R1 := pad:64[31:0[R0] + 3]
00000445: R0 := 0x11000
0000044b: R0 := R0 + 0x20
00000453: mem := mem with [R0 + 4, el]:u32 <- 31:0[R1]
00000458: R0 := 0x11000
0000045e: R0 := R0 + 0x14
00000465: R0 := pad:64[mem[R0]]
0000046b: R0 := pad:64[31:0[R0] + 1]
00000471: R1 := pad:64[0.7:0[R0]]
00000476: R0 := 0x11000
0000047c: R0 := R0 + 0x14
00000484: mem := mem with [R0] <- 7:0[R1]
00000489: R0 := 0
0000048e: call R30 with noreturn

000008e0: sub register_tm_clones(register_tm_clones_result)
000008f6: register_tm_clones_result :: out u32 = low:32[R0]

00000321:
00000324: R0 := 0x11000
0000032a: R0 := R0 + 0x28
0000032f: R1 := 0x11000
00000335: R1 := R1 + 0x28
0000033c: R1 := R1 + ~R0 + 1
00000343: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
0000034a: R1 := R2 + (R1 ~>> 3)
00000350: #3 := ~(R1 ~>> 1)
00000354: #4 := ~(R1 ~>> 1) + 1
00000359: VF := extend:65[#4] <> extend:65[#3] + 1
0000035e: CF := pad:65[#4] <> pad:65[#3] + 1
00000362: ZF := #4 = 0
00000366: NF := 63:63[#4]
0000036e: R1 :=

          >> 1 | R1 << 0x3F]
00000374: when ZF goto %00000372
000008e1: goto %0000061e

0000061e:
00000621: R2 := 0x10000
00000628: R2 := mem[R2 + 0xFF8, el]:u64
0000062d: when R2 = 0 goto %00000372
000008e2: goto %00000631

00000372:
0000037a: call R30 with noreturn

00000631:
00000635: R16 := R2
0000063a: call R16 with noreturn
