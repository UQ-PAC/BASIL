000008a2: program
00000886: sub __cxa_finalize(__cxa_finalize_result)
000008a3: __cxa_finalize_result :: out u32 = low:32[R0]

000005e8:
000006c9: R16 := 0x11000
000006d0: R17 := mem[R16, el]:u64
000006d6: R16 := R16
000006db: call R17 with noreturn

00000887: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008a4: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000035a:
0000035e: #5 := R31 - 0x20
00000364: mem := mem with [#5, el]:u64 <- R29
0000036a: mem := mem with [#5 + 8, el]:u64 <- R30
0000036e: R31 := #5
00000374: R29 := R31
0000037c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000381: R19 := 0x11000
00000388: R0 := pad:64[mem[R19 + 0x30]]
0000038f: when 31:0[R0] <> 0 goto %0000038d
00000888: goto %000005b1

000005b1:
000005b4: R0 := 0x10000
000005bb: R0 := mem[R0 + 0xFC0, el]:u64
000005c1: when R0 = 0 goto %000005bf
00000889: goto %000005d8

000005d8:
000005db: R0 := 0x11000
000005e2: R0 := mem[R0 + 0x28, el]:u64
000005e7: R30 := 0x700
000005ea: call @__cxa_finalize with return %000005bf

000005bf:
000005c7: R30 := 0x704
000005c9: call @deregister_tm_clones with return %000005cb

000005cb:
000005ce: R0 := 1
000005d6: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000088a: goto %0000038d

0000038d:
00000397: R19 := mem[R31 + 0x10, el]:u64
0000039e: R29 := mem[R31, el]:u64
000003a3: R30 := mem[R31 + 8, el]:u64
000003a7: R31 := R31 + 0x20
000003ac: call R30 with noreturn

0000088b: sub __libc_csu_fini(__libc_csu_fini_result)
000008a5: __libc_csu_fini_result :: out u32 = low:32[R0]

0000053c:
0000053f: call R30 with noreturn

0000088c: sub __libc_csu_init(__libc_csu_init_result)
000008a6: __libc_csu_init_result :: out u32 = low:32[R0]

00000449:
0000044d: #7 := R31 - 0x40
00000453: mem := mem with [#7, el]:u64 <- R29
00000459: mem := mem with [#7 + 8, el]:u64 <- R30
0000045d: R31 := #7
00000463: R29 := R31
00000469: #8 := R31 + 0x10
0000046f: mem := mem with [#8, el]:u64 <- R19
00000475: mem := mem with [#8 + 8, el]:u64 <- R20
0000047a: R20 := 0x10000
00000480: R20 := R20 + 0xDC0
00000486: #9 := R31 + 0x20
0000048c: mem := mem with [#9, el]:u64 <- R21
00000492: mem := mem with [#9 + 8, el]:u64 <- R22
00000497: R21 := 0x10000
0000049d: R21 := R21 + 0xDB8
000004a4: R20 := R20 + ~R21 + 1
000004aa: R22 := pad:64[31:0[R0]]
000004b0: #10 := R31 + 0x30
000004b6: mem := mem with [#10, el]:u64 <- R23
000004bc: mem := mem with [#10 + 8, el]:u64 <- R24
000004c2: R23 := R1
000004c8: R24 := R2
000004cd: R30 := 0x7B0
000004d0: call @_init with return %000004d2

000004d2:
000004d6: #11 := ~(R20 ~>> 3)
000004da: #12 := ~(R20 ~>> 3) + 1
000004df: VF := extend:65[#12] <> extend:65[#11] + 1
000004e4: CF := pad:65[#12] <> pad:65[#11] + 1
000004e8: ZF := #12 = 0
000004ec: NF := 63:63[#12]
000004f2: when ZF goto %000004f0
0000088d: goto %00000541

00000541:
00000547: R20 :=
          63:61[63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20]].60:0[R20
          >> 3 | R20 << 0x3D]
0000054c: R19 := 0
0000088e: goto %0000054e

0000054e:
00000554: R3 := mem[R21 + (60:0[R19].0), el]:u64
0000055a: R2 := R24
00000560: R19 := R19 + 1
00000566: R1 := R23
0000056c: R0 := pad:64[31:0[R22]]
00000571: R30 := 0x7D8
00000574: call R3 with return %00000576

00000576:
0000057a: #16 := ~R19
0000057f: #17 := R20 + ~R19 + 1
00000585: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
0000058b: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
0000058f: ZF := #17 = 0
00000593: NF := 63:63[#17]
00000598: when ZF <> 1 goto %0000054e
0000088f: goto %000004f0

000004f0:
000004f9: #13 := R31 + 0x10
000004fe: R19 := mem[#13, el]:u64
00000503: R20 := mem[#13 + 8, el]:u64
00000509: #14 := R31 + 0x20
0000050e: R21 := mem[#14, el]:u64
00000513: R22 := mem[#14 + 8, el]:u64
00000519: #15 := R31 + 0x30
0000051e: R23 := mem[#15, el]:u64
00000523: R24 := mem[#15 + 8, el]:u64
0000052a: R29 := mem[R31, el]:u64
0000052f: R30 := mem[R31 + 8, el]:u64
00000533: R31 := R31 + 0x40
00000538: call R30 with noreturn

00000890: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008a7: __libc_start_main_main :: in u64 = R0
000008a8: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008a9: __libc_start_main_arg3 :: in out u64 = R2
000008aa: __libc_start_main_auxv :: in out u64 = R3
000008ab: __libc_start_main_result :: out u32 = low:32[R0]

00000298:
000006df: R16 := 0x11000
000006e6: R17 := mem[R16 + 8, el]:u64
000006ec: R16 := R16 + 8
000006f1: call R17 with noreturn

00000891: sub _fini(_fini_result)
000008ac: _fini_result :: out u32 = low:32[R0]

0000002e:
00000032: #0 := R31 - 0x10
00000038: mem := mem with [#0, el]:u64 <- R29
0000003e: mem := mem with [#0 + 8, el]:u64 <- R30
00000042: R31 := #0
00000048: R29 := R31
0000004f: R29 := mem[R31, el]:u64
00000054: R30 := mem[R31 + 8, el]:u64
00000058: R31 := R31 + 0x10
0000005d: call R30 with noreturn

00000892: sub _init(_init_result)
000008ad: _init_result :: out u32 = low:32[R0]

000004ce:
000007b9: #19 := R31 - 0x10
000007bf: mem := mem with [#19, el]:u64 <- R29
000007c5: mem := mem with [#19 + 8, el]:u64 <- R30
000007c9: R31 := #19
000007cf: R29 := R31
000007d4: R30 := 0x5A4
000007d6: call @call_weak_fn with return %000007d8

000007d8:
000007dd: R29 := mem[R31, el]:u64
000007e2: R30 := mem[R31 + 8, el]:u64
000007e6: R31 := R31 + 0x10
000007eb: call R30 with noreturn

00000893: sub _start(_start_result)
000008ae: _start_result :: out u32 = low:32[R0]

0000024d:
00000250: R29 := 0
00000255: R30 := 0
0000025b: R5 := R0
00000262: R1 := mem[R31, el]:u64
00000268: R2 := R31 + 8
0000026e: R6 := R31
00000273: R0 := 0x10000
0000027a: R0 := mem[R0 + 0xFD8, el]:u64
0000027f: R3 := 0x10000
00000286: R3 := mem[R3 + 0xFD0, el]:u64
0000028b: R4 := 0x10000
00000292: R4 := mem[R4 + 0xFB0, el]:u64
00000297: R30 := 0x644
0000029a: call @__libc_start_main with return %0000029c

0000029c:
0000029f: R30 := 0x648
000002a2: call @abort with return %00000894

00000894:
00000895: call @call_weak_fn with noreturn

00000896: sub abort()


000002a0:
0000070b: R16 := 0x11000
00000712: R17 := mem[R16 + 0x18, el]:u64
00000718: R16 := R16 + 0x18
0000071d: call R17 with noreturn

00000897: sub call_weak_fn(call_weak_fn_result)
000008af: call_weak_fn_result :: out u32 = low:32[R0]

000002a4:
000002a7: R0 := 0x10000
000002ae: R0 := mem[R0 + 0xFC8, el]:u64
000002b4: when R0 = 0 goto %000002b2
00000898: goto %00000628

000002b2:
000002ba: call R30 with noreturn

00000628:
0000062b: goto @__gmon_start__

00000629:
000006f5: R16 := 0x11000
000006fc: R17 := mem[R16 + 0x10, el]:u64
00000702: R16 := R16 + 0x10
00000707: call R17 with noreturn

00000899: sub deregister_tm_clones(deregister_tm_clones_result)
000008b0: deregister_tm_clones_result :: out u32 = low:32[R0]

000002be:
000002c1: R0 := 0x11000
000002c7: R0 := R0 + 0x30
000002cc: R1 := 0x11000
000002d2: R1 := R1 + 0x30
000002d8: #1 := ~R0
000002dd: #2 := R1 + ~R0 + 1
000002e3: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002e9: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002ed: ZF := #2 = 0
000002f1: NF := 63:63[#2]
000002f7: when ZF goto %000002f5
0000089a: goto %0000060a

0000060a:
0000060d: R1 := 0x10000
00000614: R1 := mem[R1 + 0xFB8, el]:u64
00000619: when R1 = 0 goto %000002f5
0000089b: goto %0000061d

000002f5:
000002fd: call R30 with noreturn

0000061d:
00000621: R16 := R1
00000626: call R16 with noreturn

0000089c: sub frame_dummy(frame_dummy_result)
000008b1: frame_dummy_result :: out u32 = low:32[R0]

000003ae:
000003b0: call @register_tm_clones with noreturn

0000089d: sub main(main_argc, main_argv, main_result)
000008b2: main_argc :: in u32 = low:32[R0]
000008b3: main_argv :: in out u64 = R1
000008b4: main_result :: out u32 = low:32[R0]

000003b2:
000003b6: R31 := R31 - 0x20
000003bd: mem := mem with [R31 + 0x1C, el]:u32 <- 0
000003c5: mem := mem with [R31 + 0x18, el]:u32 <- 31:0[R0]
000003cd: mem := mem with [R31 + 0x10, el]:u64 <- R1
000003d4: mem := mem with [R31 + 0xC, el]:u32 <- 0
000003db: R8 := pad:64[mem[R31 + 0x18, el]:u32]
000003e1: #6 := 31:0[R8] + 0
000003e6: VF := extend:33[#6] <> extend:33[31:0[R8]] + 0
000003eb: CF := pad:33[#6] <> pad:33[31:0[R8]] - 0x100000000
000003ef: ZF := #6 = 0
000003f3: NF := 31:31[#6]
000003f7: R8 := pad:64[#6]
00000403: when ZF goto %000003fc
00000404: goto %000003ff

000003ff:
00000400: R8 := 1
00000406: goto %00000402

000003fc:
000003fd: R8 := 0
00000405: goto %00000402

00000402:
0000040c: when 0:0[R8] goto %0000040a
0000089e: goto %0000059c

0000040a:
00000412: R8 := 2
0000041a: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
0000041f: goto %0000041d

0000059c:
0000059f: goto %0000059d

0000059d:
000005a3: R8 := 1
000005ab: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
000005af: goto %0000041d

0000041d:
00000425: R8 := pad:64[mem[R31 + 0xC, el]:u32]
0000042b: R8 := pad:64[31:0[R8] + 1]
00000433: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000043a: R0 := pad:64[mem[R31 + 8, el]:u32]
00000440: R31 := R31 + 0x20
00000445: call R30 with noreturn

0000089f: sub register_tm_clones(register_tm_clones_result)
000008b5: register_tm_clones_result :: out u32 = low:32[R0]

000002ff:
00000302: R0 := 0x11000
00000308: R0 := R0 + 0x30
0000030d: R1 := 0x11000
00000313: R1 := R1 + 0x30
0000031a: R1 := R1 + ~R0 + 1
00000321: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000328: R1 := R2 + (R1 ~>> 3)
0000032e: #3 := ~(R1 ~>> 1)
00000332: #4 := ~(R1 ~>> 1) + 1
00000337: VF := extend:65[#4] <> extend:65[#3] + 1
0000033c: CF := pad:65[#4] <> pad:65[#3] + 1
00000340: ZF := #4 = 0
00000344: NF := 63:63[#4]
0000034c: R1 :=

          >> 1 | R1 << 0x3F]
00000352: when ZF goto %00000350
000008a0: goto %000005ec

000005ec:
000005ef: R2 := 0x10000
000005f6: R2 := mem[R2 + 0xFE0, el]:u64
000005fb: when R2 = 0 goto %00000350
000008a1: goto %000005ff

00000350:
00000358: call R30 with noreturn

000005ff:
00000603: R16 := R2
00000608: call R16 with noreturn
