00000842: program
00000826: sub __cxa_finalize(__cxa_finalize_result)
00000843: __cxa_finalize_result :: out u32 = low:32[R0]

00000598:
00000679: R16 := 0x11000
00000680: R17 := mem[R16, el]:u64
00000686: R16 := R16
0000068b: call R17 with noreturn

00000827: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000844: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000033c:
00000340: #5 := R31 - 0x20
00000346: mem := mem with [#5, el]:u64 <- R29
0000034c: mem := mem with [#5 + 8, el]:u64 <- R30
00000350: R31 := #5
00000356: R29 := R31
0000035e: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000363: R19 := 0x11000
0000036a: R0 := pad:64[mem[R19 + 0x30]]
00000371: when 31:0[R0] <> 0 goto %0000036f
00000828: goto %00000561

00000561:
00000564: R0 := 0x10000
0000056b: R0 := mem[R0 + 0xFC0, el]:u64
00000571: when R0 = 0 goto %0000056f
00000829: goto %00000588

00000588:
0000058b: R0 := 0x11000
00000592: R0 := mem[R0 + 0x28, el]:u64
00000597: R30 := 0x700
0000059a: call @__cxa_finalize with return %0000056f

0000056f:
00000577: R30 := 0x704
00000579: call @deregister_tm_clones with return %0000057b

0000057b:
0000057e: R0 := 1
00000586: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000082a: goto %0000036f

0000036f:
00000379: R19 := mem[R31 + 0x10, el]:u64
00000380: R29 := mem[R31, el]:u64
00000385: R30 := mem[R31 + 8, el]:u64
00000389: R31 := R31 + 0x20
0000038e: call R30 with noreturn

0000082b: sub __libc_csu_fini(__libc_csu_fini_result)
00000845: __libc_csu_fini_result :: out u32 = low:32[R0]

000004ec:
000004ef: call R30 with noreturn

0000082c: sub __libc_csu_init(__libc_csu_init_result)
00000846: __libc_csu_init_result :: out u32 = low:32[R0]

000003f9:
000003fd: #7 := R31 - 0x40
00000403: mem := mem with [#7, el]:u64 <- R29
00000409: mem := mem with [#7 + 8, el]:u64 <- R30
0000040d: R31 := #7
00000413: R29 := R31
00000419: #8 := R31 + 0x10
0000041f: mem := mem with [#8, el]:u64 <- R19
00000425: mem := mem with [#8 + 8, el]:u64 <- R20
0000042a: R20 := 0x10000
00000430: R20 := R20 + 0xDC0
00000436: #9 := R31 + 0x20
0000043c: mem := mem with [#9, el]:u64 <- R21
00000442: mem := mem with [#9 + 8, el]:u64 <- R22
00000447: R21 := 0x10000
0000044d: R21 := R21 + 0xDB8
00000454: R20 := R20 + ~R21 + 1
0000045a: R22 := pad:64[31:0[R0]]
00000460: #10 := R31 + 0x30
00000466: mem := mem with [#10, el]:u64 <- R23
0000046c: mem := mem with [#10 + 8, el]:u64 <- R24
00000472: R23 := R1
00000478: R24 := R2
0000047d: R30 := 0x790
00000480: call @_init with return %00000482

00000482:
00000486: #11 := ~(R20 ~>> 3)
0000048a: #12 := ~(R20 ~>> 3) + 1
0000048f: VF := extend:65[#12] <> extend:65[#11] + 1
00000494: CF := pad:65[#12] <> pad:65[#11] + 1
00000498: ZF := #12 = 0
0000049c: NF := 63:63[#12]
000004a2: when ZF goto %000004a0
0000082d: goto %000004f1

000004f1:
000004f7: R20 :=

          >> 3 | R20 << 0x3D]
000004fc: R19 := 0
0000082e: goto %000004fe

000004fe:
00000504: R3 := mem[R21 + (60:0[R19].0), el]:u64
0000050a: R2 := R24
00000510: R19 := R19 + 1
00000516: R1 := R23
0000051c: R0 := pad:64[31:0[R22]]
00000521: R30 := 0x7B8
00000524: call R3 with return %00000526

00000526:
0000052a: #16 := ~R19
0000052f: #17 := R20 + ~R19 + 1
00000535: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
0000053b: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
0000053f: ZF := #17 = 0
00000543: NF := 63:63[#17]
00000548: when ZF <> 1 goto %000004fe
0000082f: goto %000004a0

000004a0:
000004a9: #13 := R31 + 0x10
000004ae: R19 := mem[#13, el]:u64
000004b3: R20 := mem[#13 + 8, el]:u64
000004b9: #14 := R31 + 0x20
000004be: R21 := mem[#14, el]:u64
000004c3: R22 := mem[#14 + 8, el]:u64
000004c9: #15 := R31 + 0x30
000004ce: R23 := mem[#15, el]:u64
000004d3: R24 := mem[#15 + 8, el]:u64
000004da: R29 := mem[R31, el]:u64
000004df: R30 := mem[R31 + 8, el]:u64
000004e3: R31 := R31 + 0x40
000004e8: call R30 with noreturn

00000830: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000847: __libc_start_main_main :: in u64 = R0
00000848: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000849: __libc_start_main_arg3 :: in out u64 = R2
0000084a: __libc_start_main_auxv :: in out u64 = R3
0000084b: __libc_start_main_result :: out u32 = low:32[R0]

0000027a:
0000068f: R16 := 0x11000
00000696: R17 := mem[R16 + 8, el]:u64
0000069c: R16 := R16 + 8
000006a1: call R17 with noreturn

00000831: sub _fini(_fini_result)
0000084c: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

00000832: sub _init(_init_result)
0000084d: _init_result :: out u32 = low:32[R0]

0000047e:
00000761: #19 := R31 - 0x10
00000767: mem := mem with [#19, el]:u64 <- R29
0000076d: mem := mem with [#19 + 8, el]:u64 <- R30
00000771: R31 := #19
00000777: R29 := R31
0000077c: R30 := 0x5A4
0000077e: call @call_weak_fn with return %00000780

00000780:
00000785: R29 := mem[R31, el]:u64
0000078a: R30 := mem[R31 + 8, el]:u64
0000078e: R31 := R31 + 0x10
00000793: call R30 with noreturn

00000833: sub _start(_start_result)
0000084e: _start_result :: out u32 = low:32[R0]

0000022f:
00000232: R29 := 0
00000237: R30 := 0
0000023d: R5 := R0
00000244: R1 := mem[R31, el]:u64
0000024a: R2 := R31 + 8
00000250: R6 := R31
00000255: R0 := 0x10000
0000025c: R0 := mem[R0 + 0xFD8, el]:u64
00000261: R3 := 0x10000
00000268: R3 := mem[R3 + 0xFD0, el]:u64
0000026d: R4 := 0x10000
00000274: R4 := mem[R4 + 0xFB0, el]:u64
00000279: R30 := 0x644
0000027c: call @__libc_start_main with return %0000027e

0000027e:
00000281: R30 := 0x648
00000284: call @abort with return %00000834

00000834:
00000835: call @call_weak_fn with noreturn

00000836: sub abort()


00000282:
000006bb: R16 := 0x11000
000006c2: R17 := mem[R16 + 0x18, el]:u64
000006c8: R16 := R16 + 0x18
000006cd: call R17 with noreturn

00000837: sub call_weak_fn(call_weak_fn_result)
0000084f: call_weak_fn_result :: out u32 = low:32[R0]

00000286:
00000289: R0 := 0x10000
00000290: R0 := mem[R0 + 0xFC8, el]:u64
00000296: when R0 = 0 goto %00000294
00000838: goto %000005d8

00000294:
0000029c: call R30 with noreturn

000005d8:
000005db: goto @__gmon_start__

000005d9:
000006a5: R16 := 0x11000
000006ac: R17 := mem[R16 + 0x10, el]:u64
000006b2: R16 := R16 + 0x10
000006b7: call R17 with noreturn

00000839: sub deregister_tm_clones(deregister_tm_clones_result)
00000850: deregister_tm_clones_result :: out u32 = low:32[R0]

000002a0:
000002a3: R0 := 0x11000
000002a9: R0 := R0 + 0x30
000002ae: R1 := 0x11000
000002b4: R1 := R1 + 0x30
000002ba: #1 := ~R0
000002bf: #2 := R1 + ~R0 + 1
000002c5: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002cb: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002cf: ZF := #2 = 0
000002d3: NF := 63:63[#2]
000002d9: when ZF goto %000002d7
0000083a: goto %000005ba

000005ba:
000005bd: R1 := 0x10000
000005c4: R1 := mem[R1 + 0xFB8, el]:u64
000005c9: when R1 = 0 goto %000002d7
0000083b: goto %000005cd

000002d7:
000002df: call R30 with noreturn

000005cd:
000005d1: R16 := R1
000005d6: call R16 with noreturn

0000083c: sub frame_dummy(frame_dummy_result)
00000851: frame_dummy_result :: out u32 = low:32[R0]

00000390:
00000392: call @register_tm_clones with noreturn

0000083d: sub main(main_argc, main_argv, main_result)
00000852: main_argc :: in u32 = low:32[R0]
00000853: main_argv :: in out u64 = R1
00000854: main_result :: out u32 = low:32[R0]

00000394:
00000398: R31 := R31 - 0x10
0000039f: mem := mem with [R31 + 0xC, el]:u32 <- 0
000003a4: R8 := 5
000003ac: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003b3: R8 := pad:64[mem[R31 + 8, el]:u32]
000003b9: #6 := 31:0[R8] - 5
000003be: VF := extend:33[#6] <> extend:33[31:0[R8]] - 5
000003c3: CF := pad:33[#6] <> pad:33[31:0[R8]] + 0xFFFFFFFB
000003c7: ZF := #6 = 0
000003cb: NF := 31:31[#6]
000003cf: R8 := pad:64[#6]
000003db: when ZF goto %000003d4
000003dc: goto %000003d7

000003d7:
000003d8: R8 := 1
000003de: goto %000003da

000003d4:
000003d5: R8 := 0
000003dd: goto %000003da

000003da:
000003e4: when 0:0[R8] goto %000003e2
0000083e: goto %0000054c

0000054c:
0000054f: goto %0000054d

0000054d:
00000553: R8 := 6
0000055b: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000055f: goto %000003e2

000003e2:
000003ec: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000003f2: R31 := R31 + 0x10
000003f7: call R30 with noreturn

0000083f: sub register_tm_clones(register_tm_clones_result)
00000855: register_tm_clones_result :: out u32 = low:32[R0]

000002e1:
000002e4: R0 := 0x11000
000002ea: R0 := R0 + 0x30
000002ef: R1 := 0x11000
000002f5: R1 := R1 + 0x30
000002fc: R1 := R1 + ~R0 + 1
00000303: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
0000030a: R1 := R2 + (R1 ~>> 3)
00000310: #3 := ~(R1 ~>> 1)
00000314: #4 := ~(R1 ~>> 1) + 1
00000319: VF := extend:65[#4] <> extend:65[#3] + 1
0000031e: CF := pad:65[#4] <> pad:65[#3] + 1
00000322: ZF := #4 = 0
00000326: NF := 63:63[#4]
0000032e: R1 :=

          >> 1 | R1 << 0x3F]
00000334: when ZF goto %00000332
00000840: goto %0000059c

0000059c:
0000059f: R2 := 0x10000
000005a6: R2 := mem[R2 + 0xFE0, el]:u64
000005ab: when R2 = 0 goto %00000332
00000841: goto %000005af

00000332:
0000033a: call R30 with noreturn

000005af:
000005b3: R16 := R2
000005b8: call R16 with noreturn
