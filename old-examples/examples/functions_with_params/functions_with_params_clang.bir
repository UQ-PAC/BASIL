00000882: program
00000866: sub __cxa_finalize(__cxa_finalize_result)
00000883: __cxa_finalize_result :: out u32 = low:32[R0]

000005cc:
000006ad: R16 := 0x11000
000006b4: R17 := mem[R16, el]:u64
000006ba: R16 := R16
000006bf: call R17 with noreturn

00000867: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000884: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000354:
00000358: #5 := R31 - 0x20
0000035e: mem := mem with [#5, el]:u64 <- R29
00000364: mem := mem with [#5 + 8, el]:u64 <- R30
00000368: R31 := #5
0000036e: R29 := R31
00000376: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000037b: R19 := 0x11000
00000382: R0 := pad:64[mem[R19 + 0x30]]
00000389: when 31:0[R0] <> 0 goto %00000387
00000868: goto %00000595

00000595:
00000598: R0 := 0x10000
0000059f: R0 := mem[R0 + 0xFC0, el]:u64
000005a5: when R0 = 0 goto %000005a3
00000869: goto %000005bc

000005bc:
000005bf: R0 := 0x11000
000005c6: R0 := mem[R0 + 0x28, el]:u64
000005cb: R30 := 0x700
000005ce: call @__cxa_finalize with return %000005a3

000005a3:
000005ab: R30 := 0x704
000005ad: call @deregister_tm_clones with return %000005af

000005af:
000005b2: R0 := 1
000005ba: mem := mem with [R19 + 0x30] <- 7:0[R0]
0000086a: goto %00000387

00000387:
00000391: R19 := mem[R31 + 0x10, el]:u64
00000398: R29 := mem[R31, el]:u64
0000039d: R30 := mem[R31 + 8, el]:u64
000003a1: R31 := R31 + 0x20
000003a6: call R30 with noreturn

0000086b: sub __libc_csu_fini(__libc_csu_fini_result)
00000885: __libc_csu_fini_result :: out u32 = low:32[R0]

0000050d:
00000510: call R30 with noreturn

0000086c: sub __libc_csu_init(__libc_csu_init_result)
00000886: __libc_csu_init_result :: out u32 = low:32[R0]

0000041a:
0000041e: #7 := R31 - 0x40
00000424: mem := mem with [#7, el]:u64 <- R29
0000042a: mem := mem with [#7 + 8, el]:u64 <- R30
0000042e: R31 := #7
00000434: R29 := R31
0000043a: #8 := R31 + 0x10
00000440: mem := mem with [#8, el]:u64 <- R19
00000446: mem := mem with [#8 + 8, el]:u64 <- R20
0000044b: R20 := 0x10000
00000451: R20 := R20 + 0xDC0
00000457: #9 := R31 + 0x20
0000045d: mem := mem with [#9, el]:u64 <- R21
00000463: mem := mem with [#9 + 8, el]:u64 <- R22
00000468: R21 := 0x10000
0000046e: R21 := R21 + 0xDB8
00000475: R20 := R20 + ~R21 + 1
0000047b: R22 := pad:64[31:0[R0]]
00000481: #10 := R31 + 0x30
00000487: mem := mem with [#10, el]:u64 <- R23
0000048d: mem := mem with [#10 + 8, el]:u64 <- R24
00000493: R23 := R1
00000499: R24 := R2
0000049e: R30 := 0x7A8
000004a1: call @_init with return %000004a3

000004a3:
000004a7: #11 := ~(R20 ~>> 3)
000004ab: #12 := ~(R20 ~>> 3) + 1
000004b0: VF := extend:65[#12] <> extend:65[#11] + 1
000004b5: CF := pad:65[#12] <> pad:65[#11] + 1
000004b9: ZF := #12 = 0
000004bd: NF := 63:63[#12]
000004c3: when ZF goto %000004c1
0000086d: goto %00000512

00000512:
00000518: R20 :=

          >> 3 | R20 << 0x3D]
0000051d: R19 := 0
0000086e: goto %0000051f

0000051f:
00000525: R3 := mem[R21 + (60:0[R19].0), el]:u64
0000052b: R2 := R24
00000531: R19 := R19 + 1
00000537: R1 := R23
0000053d: R0 := pad:64[31:0[R22]]
00000542: R30 := 0x7D0
00000545: call R3 with return %00000547

00000547:
0000054b: #16 := ~R19
00000550: #17 := R20 + ~R19 + 1
00000556: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
0000055c: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
00000560: ZF := #17 = 0
00000564: NF := 63:63[#17]
00000569: when ZF <> 1 goto %0000051f
0000086f: goto %000004c1

000004c1:
000004ca: #13 := R31 + 0x10
000004cf: R19 := mem[#13, el]:u64
000004d4: R20 := mem[#13 + 8, el]:u64
000004da: #14 := R31 + 0x20
000004df: R21 := mem[#14, el]:u64
000004e4: R22 := mem[#14 + 8, el]:u64
000004ea: #15 := R31 + 0x30
000004ef: R23 := mem[#15, el]:u64
000004f4: R24 := mem[#15 + 8, el]:u64
000004fb: R29 := mem[R31, el]:u64
00000500: R30 := mem[R31 + 8, el]:u64
00000504: R31 := R31 + 0x40
00000509: call R30 with noreturn

00000870: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000887: __libc_start_main_main :: in u64 = R0
00000888: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000889: __libc_start_main_arg3 :: in out u64 = R2
0000088a: __libc_start_main_auxv :: in out u64 = R3
0000088b: __libc_start_main_result :: out u32 = low:32[R0]

00000292:
000006c3: R16 := 0x11000
000006ca: R17 := mem[R16 + 8, el]:u64
000006d0: R16 := R16 + 8
000006d5: call R17 with noreturn

00000871: sub _fini(_fini_result)
0000088c: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

00000872: sub _init(_init_result)
0000088d: _init_result :: out u32 = low:32[R0]

0000049f:
0000079b: #20 := R31 - 0x10
000007a1: mem := mem with [#20, el]:u64 <- R29
000007a7: mem := mem with [#20 + 8, el]:u64 <- R30
000007ab: R31 := #20
000007b1: R29 := R31
000007b6: R30 := 0x5A4
000007b8: call @call_weak_fn with return %000007ba

000007ba:
000007bf: R29 := mem[R31, el]:u64
000007c4: R30 := mem[R31 + 8, el]:u64
000007c8: R31 := R31 + 0x10
000007cd: call R30 with noreturn

00000873: sub _start(_start_result)
0000088e: _start_result :: out u32 = low:32[R0]

00000247:
0000024a: R29 := 0
0000024f: R30 := 0
00000255: R5 := R0
0000025c: R1 := mem[R31, el]:u64
00000262: R2 := R31 + 8
00000268: R6 := R31
0000026d: R0 := 0x10000
00000274: R0 := mem[R0 + 0xFD8, el]:u64
00000279: R3 := 0x10000
00000280: R3 := mem[R3 + 0xFD0, el]:u64
00000285: R4 := 0x10000
0000028c: R4 := mem[R4 + 0xFB0, el]:u64
00000291: R30 := 0x644
00000294: call @__libc_start_main with return %00000296

00000296:
00000299: R30 := 0x648
0000029c: call @abort with return %00000874

00000874:
00000875: call @call_weak_fn with noreturn

00000876: sub abort()


0000029a:
000006ef: R16 := 0x11000
000006f6: R17 := mem[R16 + 0x18, el]:u64
000006fc: R16 := R16 + 0x18
00000701: call R17 with noreturn

00000877: sub call_weak_fn(call_weak_fn_result)
0000088f: call_weak_fn_result :: out u32 = low:32[R0]

0000029e:
000002a1: R0 := 0x10000
000002a8: R0 := mem[R0 + 0xFC8, el]:u64
000002ae: when R0 = 0 goto %000002ac
00000878: goto %0000060c

000002ac:
000002b4: call R30 with noreturn

0000060c:
0000060f: goto @__gmon_start__

0000060d:
000006d9: R16 := 0x11000
000006e0: R17 := mem[R16 + 0x10, el]:u64
000006e6: R16 := R16 + 0x10
000006eb: call R17 with noreturn

00000879: sub deregister_tm_clones(deregister_tm_clones_result)
00000890: deregister_tm_clones_result :: out u32 = low:32[R0]

000002b8:
000002bb: R0 := 0x11000
000002c1: R0 := R0 + 0x30
000002c6: R1 := 0x11000
000002cc: R1 := R1 + 0x30
000002d2: #1 := ~R0
000002d7: #2 := R1 + ~R0 + 1
000002dd: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002e3: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002e7: ZF := #2 = 0
000002eb: NF := 63:63[#2]
000002f1: when ZF goto %000002ef
0000087a: goto %000005ee

000005ee:
000005f1: R1 := 0x10000
000005f8: R1 := mem[R1 + 0xFB8, el]:u64
000005fd: when R1 = 0 goto %000002ef
0000087b: goto %00000601

000002ef:
000002f7: call R30 with noreturn

00000601:
00000605: R16 := R1
0000060a: call R16 with noreturn

0000087c: sub frame_dummy(frame_dummy_result)
00000891: frame_dummy_result :: out u32 = low:32[R0]

000003a8:
000003aa: call @register_tm_clones with noreturn

0000087d: sub main(main_argc, main_argv, main_result)
00000892: main_argc :: in u32 = low:32[R0]
00000893: main_argv :: in out u64 = R1
00000894: main_result :: out u32 = low:32[R0]

000003ac:
000003b0: R31 := R31 - 0x20
000003b6: #6 := R31 + 0x10
000003bc: mem := mem with [#6, el]:u64 <- R29
000003c2: mem := mem with [#6 + 8, el]:u64 <- R30
000003c8: R29 := R31 + 0x10
000003cd: R8 := 1
000003d5: mem := mem with [R29 - 4, el]:u32 <- 31:0[R8]
000003da: R8 := 2
000003e2: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000003e9: R0 := pad:64[mem[R29 - 4, el]:u32]
000003ee: R30 := 0x740
000003f1: call @plus_one with return %0000056d

0000056d:
00000573: mem := mem with [R29 - 4, el]:u32 <- 31:0[R0]
00000578: R0 := 0
0000057e: #18 := R31 + 0x10
00000583: R29 := mem[#18, el]:u64
00000588: R30 := mem[#18 + 8, el]:u64
0000058e: R31 := R31 + 0x20
00000593: call R30 with noreturn

0000087e: sub plus_one(plus_one_result)
00000895: plus_one_result :: out u32 = low:32[R0]

000003ef:
000003f6: R31 := R31 - 0x10
000003fe: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
00000405: R8 := pad:64[mem[R31 + 0xC, el]:u32]
0000040b: R0 := pad:64[31:0[R8] + 1]
00000411: R31 := R31 + 0x10
00000416: call R30 with noreturn

0000087f: sub register_tm_clones(register_tm_clones_result)
00000896: register_tm_clones_result :: out u32 = low:32[R0]

000002f9:
000002fc: R0 := 0x11000
00000302: R0 := R0 + 0x30
00000307: R1 := 0x11000
0000030d: R1 := R1 + 0x30
00000314: R1 := R1 + ~R0 + 1
0000031b: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000322: R1 := R2 + (R1 ~>> 3)
00000328: #3 := ~(R1 ~>> 1)
0000032c: #4 := ~(R1 ~>> 1) + 1
00000331: VF := extend:65[#4] <> extend:65[#3] + 1
00000336: CF := pad:65[#4] <> pad:65[#3] + 1
0000033a: ZF := #4 = 0
0000033e: NF := 63:63[#4]
00000346: R1 :=

          >> 1 | R1 << 0x3F]
0000034c: when ZF goto %0000034a
00000880: goto %000005d0

000005d0:
000005d3: R2 := 0x10000
000005da: R2 := mem[R2 + 0xFE0, el]:u64
000005df: when R2 = 0 goto %0000034a
00000881: goto %000005e3

0000034a:
00000352: call R30 with noreturn

000005e3:
000005e7: R16 := R2
000005ec: call R16 with noreturn
