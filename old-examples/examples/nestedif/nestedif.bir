000008d2: program
000008b3: sub __cxa_finalize(__cxa_finalize_result)
000008d3: __cxa_finalize_result :: out u32 = low:32[R0]

00000611:
000006f2: R16 := 0x10000
000006f9: R17 := mem[R16 + 0xFA0, el]:u64
000006ff: R16 := R16 + 0xFA0
00000704: call R17 with noreturn

000008b4: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008d4: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000362:
00000366: #5 := R31 - 0x20
0000036c: mem := mem with [#5, el]:u64 <- R29
00000372: mem := mem with [#5 + 8, el]:u64 <- R30
00000376: R31 := #5
0000037c: R29 := R31
00000384: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000389: R19 := 0x11000
00000390: R0 := pad:64[mem[R19 + 0x10]]
00000397: when 31:0[R0] <> 0 goto %00000395
000008b5: goto %000005da

000005da:
000005dd: R0 := 0x10000
000005e4: R0 := mem[R0 + 0xFD8, el]:u64
000005ea: when R0 = 0 goto %000005e8
000008b6: goto %00000601

00000601:
00000604: R0 := 0x11000
0000060b: R0 := mem[R0 + 8, el]:u64
00000610: R30 := 0x700
00000613: call @__cxa_finalize with return %000005e8

000005e8:
000005f0: R30 := 0x704
000005f2: call @deregister_tm_clones with return %000005f4

000005f4:
000005f7: R0 := 1
000005ff: mem := mem with [R19 + 0x10] <- 7:0[R0]
000008b7: goto %00000395

00000395:
0000039f: R19 := mem[R31 + 0x10, el]:u64
000003a6: R29 := mem[R31, el]:u64
000003ab: R30 := mem[R31 + 8, el]:u64
000003af: R31 := R31 + 0x20
000003b4: call R30 with noreturn

000008b8: sub __libc_csu_fini(__libc_csu_fini_result)
000008d5: __libc_csu_fini_result :: out u32 = low:32[R0]

0000054b:
0000054e: call R30 with noreturn

000008b9: sub __libc_csu_init(__libc_csu_init_result)
000008d6: __libc_csu_init_result :: out u32 = low:32[R0]

00000458:
0000045c: #9 := R31 - 0x40
00000462: mem := mem with [#9, el]:u64 <- R29
00000468: mem := mem with [#9 + 8, el]:u64 <- R30
0000046c: R31 := #9
00000472: R29 := R31
00000478: #10 := R31 + 0x10
0000047e: mem := mem with [#10, el]:u64 <- R19
00000484: mem := mem with [#10 + 8, el]:u64 <- R20
00000489: R20 := 0x10000
0000048f: R20 := R20 + 0xD90
00000495: #11 := R31 + 0x20
0000049b: mem := mem with [#11, el]:u64 <- R21
000004a1: mem := mem with [#11 + 8, el]:u64 <- R22
000004a6: R21 := 0x10000
000004ac: R21 := R21 + 0xD88
000004b3: R20 := R20 + ~R21 + 1
000004b9: R22 := pad:64[31:0[R0]]
000004bf: #12 := R31 + 0x30
000004c5: mem := mem with [#12, el]:u64 <- R23
000004cb: mem := mem with [#12 + 8, el]:u64 <- R24
000004d1: R23 := R1
000004d7: R24 := R2
000004dc: R30 := 0x7B8
000004df: call @_init with return %000004e1

000004e1:
000004e5: #13 := ~(R20 ~>> 3)
000004e9: #14 := ~(R20 ~>> 3) + 1
000004ee: VF := extend:65[#14] <> extend:65[#13] + 1
000004f3: CF := pad:65[#14] <> pad:65[#13] + 1
000004f7: ZF := #14 = 0
000004fb: NF := 63:63[#14]
00000501: when ZF goto %000004ff
000008ba: goto %00000550

00000550:
00000556: R20 :=

          >> 3 | R20 << 0x3D]
0000055b: R19 := 0
000008bb: goto %0000055d

0000055d:
00000563: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000569: R2 := R24
0000056f: R19 := R19 + 1
00000575: R1 := R23
0000057b: R0 := pad:64[31:0[R22]]
00000580: R30 := 0x7E0
00000583: call R3 with return %00000585

00000585:
00000589: #18 := ~R19
0000058e: #19 := R20 + ~R19 + 1
00000594: VF := extend:65[#19] <> extend:65[R20] + extend:65[#18] + 1
0000059a: CF := pad:65[#19] <> pad:65[R20] + pad:65[#18] + 1
0000059e: ZF := #19 = 0
000005a2: NF := 63:63[#19]
000005a7: when ZF <> 1 goto %0000055d
000008bc: goto %000004ff

000004ff:
00000508: #15 := R31 + 0x10
0000050d: R19 := mem[#15, el]:u64
00000512: R20 := mem[#15 + 8, el]:u64
00000518: #16 := R31 + 0x20
0000051d: R21 := mem[#16, el]:u64
00000522: R22 := mem[#16 + 8, el]:u64
00000528: #17 := R31 + 0x30
0000052d: R23 := mem[#17, el]:u64
00000532: R24 := mem[#17 + 8, el]:u64
00000539: R29 := mem[R31, el]:u64
0000053e: R30 := mem[R31 + 8, el]:u64
00000542: R31 := R31 + 0x40
00000547: call R30 with noreturn

000008bd: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008d7: __libc_start_main_main :: in u64 = R0
000008d8: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008d9: __libc_start_main_arg3 :: in out u64 = R2
000008da: __libc_start_main_auxv :: in out u64 = R3
000008db: __libc_start_main_result :: out u32 = low:32[R0]

000002a0:
00000708: R16 := 0x10000
0000070f: R17 := mem[R16 + 0xFA8, el]:u64
00000715: R16 := R16 + 0xFA8
0000071a: call R17 with noreturn

000008be: sub _fini(_fini_result)
000008dc: _fini_result :: out u32 = low:32[R0]

0000002e:
00000032: #0 := R31 - 0x10
00000038: mem := mem with [#0, el]:u64 <- R29
0000003e: mem := mem with [#0 + 8, el]:u64 <- R30
00000042: R31 := #0
00000048: R29 := R31
0000004f: R29 := mem[R31, el]:u64
00000054: R30 := mem[R31 + 8, el]:u64
00000058: R31 := R31 + 0x10
0000005d: call R30 with noreturn

000008bf: sub _init(_init_result)
000008dd: _init_result :: out u32 = low:32[R0]

000004dd:
000007e4: #21 := R31 - 0x10
000007ea: mem := mem with [#21, el]:u64 <- R29
000007f0: mem := mem with [#21 + 8, el]:u64 <- R30
000007f4: R31 := #21
000007fa: R29 := R31
000007ff: R30 := 0x5A4
00000801: call @call_weak_fn with return %00000803

00000803:
00000808: R29 := mem[R31, el]:u64
0000080d: R30 := mem[R31 + 8, el]:u64
00000811: R31 := R31 + 0x10
00000816: call R30 with noreturn

000008c0: sub _start(_start_result)
000008de: _start_result :: out u32 = low:32[R0]

00000255:
00000258: R29 := 0
0000025d: R30 := 0
00000263: R5 := R0
0000026a: R1 := mem[R31, el]:u64
00000270: R2 := R31 + 8
00000276: R6 := R31
0000027b: R0 := 0x10000
00000282: R0 := mem[R0 + 0xFF0, el]:u64
00000287: R3 := 0x10000
0000028e: R3 := mem[R3 + 0xFE8, el]:u64
00000293: R4 := 0x10000
0000029a: R4 := mem[R4 + 0xFC8, el]:u64
0000029f: R30 := 0x644
000002a2: call @__libc_start_main with return %000002a4

000002a4:
000002a7: R30 := 0x648
000002aa: call @abort with return %000008c1

000008c1:
000008c2: call @call_weak_fn with noreturn

000008c3: sub abort()


000002a8:
00000734: R16 := 0x10000
0000073b: R17 := mem[R16 + 0xFB8, el]:u64
00000741: R16 := R16 + 0xFB8
00000746: call R17 with noreturn

000008c4: sub call_weak_fn(call_weak_fn_result)
000008df: call_weak_fn_result :: out u32 = low:32[R0]

000002ac:
000002af: R0 := 0x10000
000002b6: R0 := mem[R0 + 0xFE0, el]:u64
000002bc: when R0 = 0 goto %000002ba
000008c5: goto %00000651

000002ba:
000002c2: call R30 with noreturn

00000651:
00000654: goto @__gmon_start__

00000652:
0000071e: R16 := 0x10000
00000725: R17 := mem[R16 + 0xFB0, el]:u64
0000072b: R16 := R16 + 0xFB0
00000730: call R17 with noreturn

000008c6: sub deregister_tm_clones(deregister_tm_clones_result)
000008e0: deregister_tm_clones_result :: out u32 = low:32[R0]

000002c6:
000002c9: R0 := 0x11000
000002cf: R0 := R0 + 0x10
000002d4: R1 := 0x11000
000002da: R1 := R1 + 0x10
000002e0: #1 := ~R0
000002e5: #2 := R1 + ~R0 + 1
000002eb: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002f1: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002f5: ZF := #2 = 0
000002f9: NF := 63:63[#2]
000002ff: when ZF goto %000002fd
000008c7: goto %00000633

00000633:
00000636: R1 := 0x10000
0000063d: R1 := mem[R1 + 0xFD0, el]:u64
00000642: when R1 = 0 goto %000002fd
000008c8: goto %00000646

000002fd:
00000305: call R30 with noreturn

00000646:
0000064a: R16 := R1
0000064f: call R16 with noreturn

000008c9: sub frame_dummy(frame_dummy_result)
000008e1: frame_dummy_result :: out u32 = low:32[R0]

000003b6:
000003b8: call @register_tm_clones with noreturn

000008ca: sub main(main_argc, main_argv, main_result)
000008e2: main_argc :: in u32 = low:32[R0]
000008e3: main_argv :: in out u64 = R1
000008e4: main_result :: out u32 = low:32[R0]

000003ba:
000003be: R31 := R31 - 0x10
000003c3: R0 := 2
000003cb: mem := mem with [R31 + 8, el]:u32 <- 31:0[R0]
000003d2: mem := mem with [R31 + 0xC, el]:u32 <- 0
000003d9: R0 := pad:64[mem[R31 + 8, el]:u32]
000003df: #6 := 31:0[R0] + 0
000003e4: VF := extend:33[#6] <> extend:33[31:0[R0]] + 0
000003e9: CF := pad:33[#6] <> pad:33[31:0[R0]] - 0x100000000
000003ed: ZF := #6 = 0
000003f1: NF := 31:31[#6]
000003f7: when ZF <> 1 goto %000003f5
000008cb: goto %000005c9

000003f5:
000003ff: R0 := pad:64[mem[R31 + 8, el]:u32]
00000405: #7 := 31:0[R0] - 1
0000040a: VF := extend:33[#7] <> extend:33[31:0[R0]] - 1
0000040f: CF := pad:33[#7] <> pad:33[31:0[R0]] + 0xFFFFFFFF
00000413: ZF := #7 = 0
00000417: NF := 31:31[#7]
0000041d: when ZF <> 1 goto %0000041b
000008cc: goto %000005b8

0000041b:
00000425: R0 := pad:64[mem[R31 + 8, el]:u32]
0000042b: #8 := 31:0[R0] - 2
00000430: VF := extend:33[#8] <> extend:33[31:0[R0]] - 2
00000435: CF := pad:33[#8] <> pad:33[31:0[R0]] + 0xFFFFFFFE
00000439: ZF := #8 = 0
0000043d: NF := 31:31[#8]
00000443: when ZF <> 1 goto %00000441
000008cd: goto %000005ab

000005ab:
000005ae: R0 := 7
000005b6: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000008ce: goto %00000441

000005b8:
000005bb: R0 := 5
000005c3: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000005c7: goto %00000441

000005c9:
000005cc: R0 := 3
000005d4: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000005d8: goto %00000441

00000441:
00000449: R0 := 0
0000044f: R31 := R31 + 0x10
00000454: call R30 with noreturn

000008cf: sub register_tm_clones(register_tm_clones_result)
000008e5: register_tm_clones_result :: out u32 = low:32[R0]

00000307:
0000030a: R0 := 0x11000
00000310: R0 := R0 + 0x10
00000315: R1 := 0x11000
0000031b: R1 := R1 + 0x10
00000322: R1 := R1 + ~R0 + 1
00000329: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000330: R1 := R2 + (R1 ~>> 3)
00000336: #3 := ~(R1 ~>> 1)
0000033a: #4 := ~(R1 ~>> 1) + 1
0000033f: VF := extend:65[#4] <> extend:65[#3] + 1
00000344: CF := pad:65[#4] <> pad:65[#3] + 1
00000348: ZF := #4 = 0
0000034c: NF := 63:63[#4]
00000354: R1 :=

          >> 1 | R1 << 0x3F]
0000035a: when ZF goto %00000358
000008d0: goto %00000615

00000615:
00000618: R2 := 0x10000
0000061f: R2 := mem[R2 + 0xFF8, el]:u64
00000624: when R2 = 0 goto %00000358
000008d1: goto %00000628

00000358:
00000360: call R30 with noreturn

00000628:
0000062c: R16 := R2
00000631: call R16 with noreturn
