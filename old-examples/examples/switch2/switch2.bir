00000a98: program
00000a70: sub __cxa_finalize(__cxa_finalize_result)
00000a99: __cxa_finalize_result :: out u32 = low:32[R0]

0000079a:
0000087b: R16 := 0x10000
00000882: R17 := mem[R16 + 0xFA0, el]:u64
00000888: R16 := R16 + 0xFA0
0000088d: call R17 with noreturn

00000a71: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000a9a: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000003ce:
000003d2: #5 := R31 - 0x20
000003d8: mem := mem with [#5, el]:u64 <- R29
000003de: mem := mem with [#5 + 8, el]:u64 <- R30
000003e2: R31 := #5
000003e8: R29 := R31
000003f0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003f5: R19 := 0x11000
000003fc: R0 := pad:64[mem[R19 + 0x10]]
00000403: when 31:0[R0] <> 0 goto %00000401
00000a72: goto %00000763

00000763:
00000766: R0 := 0x10000
0000076d: R0 := mem[R0 + 0xFD8, el]:u64
00000773: when R0 = 0 goto %00000771
00000a73: goto %0000078a

0000078a:
0000078d: R0 := 0x11000
00000794: R0 := mem[R0 + 8, el]:u64
00000799: R30 := 0x700
0000079c: call @__cxa_finalize with return %00000771

00000771:
00000779: R30 := 0x704
0000077b: call @deregister_tm_clones with return %0000077d

0000077d:
00000780: R0 := 1
00000788: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000a74: goto %00000401

00000401:
0000040b: R19 := mem[R31 + 0x10, el]:u64
00000412: R29 := mem[R31, el]:u64
00000417: R30 := mem[R31 + 8, el]:u64
0000041b: R31 := R31 + 0x20
00000420: call R30 with noreturn

00000a75: sub __libc_csu_fini(__libc_csu_fini_result)
00000a9b: __libc_csu_fini_result :: out u32 = low:32[R0]

000005b1:
000005b4: call R30 with noreturn

00000a76: sub __libc_csu_init(__libc_csu_init_result)
00000a9c: __libc_csu_init_result :: out u32 = low:32[R0]

000004be:
000004c2: #8 := R31 - 0x40
000004c8: mem := mem with [#8, el]:u64 <- R29
000004ce: mem := mem with [#8 + 8, el]:u64 <- R30
000004d2: R31 := #8
000004d8: R29 := R31
000004de: #9 := R31 + 0x10
000004e4: mem := mem with [#9, el]:u64 <- R19
000004ea: mem := mem with [#9 + 8, el]:u64 <- R20
000004ef: R20 := 0x10000
000004f5: R20 := R20 + 0xD90
000004fb: #10 := R31 + 0x20
00000501: mem := mem with [#10, el]:u64 <- R21
00000507: mem := mem with [#10 + 8, el]:u64 <- R22
0000050c: R21 := 0x10000
00000512: R21 := R21 + 0xD88
00000519: R20 := R20 + ~R21 + 1
0000051f: R22 := pad:64[31:0[R0]]
00000525: #11 := R31 + 0x30
0000052b: mem := mem with [#11, el]:u64 <- R23
00000531: mem := mem with [#11 + 8, el]:u64 <- R24
00000537: R23 := R1
0000053d: R24 := R2
00000542: R30 := 0x820
00000545: call @_init with return %00000547

00000547:
0000054b: #12 := ~(R20 ~>> 3)
0000054f: #13 := ~(R20 ~>> 3) + 1
00000554: VF := extend:65[#13] <> extend:65[#12] + 1
00000559: CF := pad:65[#13] <> pad:65[#12] + 1
0000055d: ZF := #13 = 0
00000561: NF := 63:63[#13]
00000567: when ZF goto %00000565
00000a77: goto %000005b6

000005b6:
000005bc: R20 :=
          63:61[63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20]].60:0[R20
          >> 3 | R20 << 0x3D]
000005c1: R19 := 0
00000a78: goto %000005c3

000005c3:
000005c9: R3 := mem[R21 + (60:0[R19].0), el]:u64
000005cf: R2 := R24
000005d5: R19 := R19 + 1
000005db: R1 := R23
000005e1: R0 := pad:64[31:0[R22]]
000005e6: R30 := 0x848
000005e9: call R3 with return %000005eb

000005eb:
000005ef: #17 := ~R19
000005f4: #18 := R20 + ~R19 + 1
000005fa: VF := extend:65[#18] <> extend:65[R20] + extend:65[#17] + 1
00000600: CF := pad:65[#18] <> pad:65[R20] + pad:65[#17] + 1
00000604: ZF := #18 = 0
00000608: NF := 63:63[#18]
0000060d: when ZF <> 1 goto %000005c3
00000a79: goto %00000565

00000565:
0000056e: #14 := R31 + 0x10
00000573: R19 := mem[#14, el]:u64
00000578: R20 := mem[#14 + 8, el]:u64
0000057e: #15 := R31 + 0x20
00000583: R21 := mem[#15, el]:u64
00000588: R22 := mem[#15 + 8, el]:u64
0000058e: #16 := R31 + 0x30
00000593: R23 := mem[#16, el]:u64
00000598: R24 := mem[#16 + 8, el]:u64
0000059f: R29 := mem[R31, el]:u64
000005a4: R30 := mem[R31 + 8, el]:u64
000005a8: R31 := R31 + 0x40
000005ad: call R30 with noreturn

00000a7a: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000a9d: __libc_start_main_main :: in u64 = R0
00000a9e: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000a9f: __libc_start_main_arg3 :: in out u64 = R2
00000aa0: __libc_start_main_auxv :: in out u64 = R3
00000aa1: __libc_start_main_result :: out u32 = low:32[R0]

0000030c:
00000891: R16 := 0x10000
00000898: R17 := mem[R16 + 0xFA8, el]:u64
0000089e: R16 := R16 + 0xFA8
000008a3: call R17 with noreturn

00000a7b: sub _fini(_fini_result)
00000aa2: _fini_result :: out u32 = low:32[R0]

00000032:
00000036: #0 := R31 - 0x10
0000003c: mem := mem with [#0, el]:u64 <- R29
00000042: mem := mem with [#0 + 8, el]:u64 <- R30
00000046: R31 := #0
0000004c: R29 := R31
00000053: R29 := mem[R31, el]:u64
00000058: R30 := mem[R31 + 8, el]:u64
0000005c: R31 := R31 + 0x10
00000061: call R30 with noreturn

00000a7c: sub _init(_init_result)
00000aa3: _init_result :: out u32 = low:32[R0]

00000543:
00000987: #27 := R31 - 0x10
0000098d: mem := mem with [#27, el]:u64 <- R29
00000993: mem := mem with [#27 + 8, el]:u64 <- R30
00000997: R31 := #27
0000099d: R29 := R31
000009a2: R30 := 0x5A4
000009a4: call @call_weak_fn with return %000009a6

000009a6:
000009ab: R29 := mem[R31, el]:u64
000009b0: R30 := mem[R31 + 8, el]:u64
000009b4: R31 := R31 + 0x10
000009b9: call R30 with noreturn

00000a7d: sub _start(_start_result)
00000aa4: _start_result :: out u32 = low:32[R0]

000002c1:
000002c4: R29 := 0
000002c9: R30 := 0
000002cf: R5 := R0
000002d6: R1 := mem[R31, el]:u64
000002dc: R2 := R31 + 8
000002e2: R6 := R31
000002e7: R0 := 0x10000
000002ee: R0 := mem[R0 + 0xFF0, el]:u64
000002f3: R3 := 0x10000
000002fa: R3 := mem[R3 + 0xFE8, el]:u64
000002ff: R4 := 0x10000
00000306: R4 := mem[R4 + 0xFC8, el]:u64
0000030b: R30 := 0x644
0000030e: call @__libc_start_main with return %00000310

00000310:
00000313: R30 := 0x648
00000316: call @abort with return %00000a7e

00000a7e:
00000a7f: call @call_weak_fn with noreturn

00000a80: sub abort()


00000314:
000008bd: R16 := 0x10000
000008c4: R17 := mem[R16 + 0xFB8, el]:u64
000008ca: R16 := R16 + 0xFB8
000008cf: call R17 with noreturn

00000a81: sub call_weak_fn(call_weak_fn_result)
00000aa5: call_weak_fn_result :: out u32 = low:32[R0]

00000318:
0000031b: R0 := 0x10000
00000322: R0 := mem[R0 + 0xFE0, el]:u64
00000328: when R0 = 0 goto %00000326
00000a82: goto %000007da

00000326:
0000032e: call R30 with noreturn

000007da:
000007dd: goto @__gmon_start__

000007db:
000008a7: R16 := 0x10000
000008ae: R17 := mem[R16 + 0xFB0, el]:u64
000008b4: R16 := R16 + 0xFB0
000008b9: call R17 with noreturn

00000a83: sub deregister_tm_clones(deregister_tm_clones_result)
00000aa6: deregister_tm_clones_result :: out u32 = low:32[R0]

00000332:
00000335: R0 := 0x11000
0000033b: R0 := R0 + 0x10
00000340: R1 := 0x11000
00000346: R1 := R1 + 0x10
0000034c: #1 := ~R0
00000351: #2 := R1 + ~R0 + 1
00000357: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
0000035d: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
00000361: ZF := #2 = 0
00000365: NF := 63:63[#2]
0000036b: when ZF goto %00000369
00000a84: goto %000007bc

000007bc:
000007bf: R1 := 0x10000
000007c6: R1 := mem[R1 + 0xFD0, el]:u64
000007cb: when R1 = 0 goto %00000369
00000a85: goto %000007cf

00000369:
00000371: call R30 with noreturn

000007cf:
000007d3: R16 := R1
000007d8: call R16 with noreturn

00000a86: sub frame_dummy(frame_dummy_result)
00000aa7: frame_dummy_result :: out u32 = low:32[R0]

00000422:
00000424: call @register_tm_clones with noreturn

00000a87: sub main(main_argc, main_argv, main_result)
00000aa8: main_argc :: in u32 = low:32[R0]
00000aa9: main_argv :: in out u64 = R1
00000aaa: main_result :: out u32 = low:32[R0]

00000430:
00000434: #6 := R31 - 0x30
0000043a: mem := mem with [#6, el]:u64 <- R29
00000440: mem := mem with [#6 + 8, el]:u64 <- R30
00000444: R31 := #6
0000044a: R29 := R31
00000452: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
0000045a: mem := mem with [R31 + 0x10, el]:u64 <- R1
00000461: mem := mem with [R31 + 0x2C, el]:u32 <- 0
00000468: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000046e: #7 := 31:0[R0] - 5
00000473: VF := extend:33[#7] <> extend:33[31:0[R0]] - 5
00000478: CF := pad:33[#7] <> pad:33[31:0[R0]] + 0xFFFFFFFB
0000047c: ZF := #7 = 0
00000480: NF := 31:31[#7]
00000486: when ZF goto %00000484
00000a88: goto %00000611

00000484:
0000048c: R0 := 4
00000494: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000a89: goto %00000496

00000611:
00000616: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000061c: #19 := 31:0[R0] - 5
00000621: VF := extend:33[#19] <> extend:33[31:0[R0]] - 5
00000626: CF := pad:33[#19] <> pad:33[31:0[R0]] + 0xFFFFFFFB
0000062a: ZF := #19 = 0
0000062e: NF := 31:31[#19]
00000635: when NF = VF & ~ZF goto %00000496
00000a8a: goto %00000639

00000639:
0000063e: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000644: #20 := 31:0[R0] - 4
00000649: VF := extend:33[#20] <> extend:33[31:0[R0]] - 4
0000064e: CF := pad:33[#20] <> pad:33[31:0[R0]] + 0xFFFFFFFC
00000652: ZF := #20 = 0
00000656: NF := 31:31[#20]
0000065c: when ZF goto %0000065a
00000a8b: goto %00000670

00000670:
00000675: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000067b: #21 := 31:0[R0] - 4
00000680: VF := extend:33[#21] <> extend:33[31:0[R0]] - 4
00000685: CF := pad:33[#21] <> pad:33[31:0[R0]] + 0xFFFFFFFC
00000689: ZF := #21 = 0
0000068d: NF := 31:31[#21]
00000694: when NF = VF & ~ZF goto %00000496
00000a8c: goto %00000698

00000698:
0000069d: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000006a3: #22 := 31:0[R0] - 3
000006a8: VF := extend:33[#22] <> extend:33[31:0[R0]] - 3
000006ad: CF := pad:33[#22] <> pad:33[31:0[R0]] + 0xFFFFFFFD
000006b1: ZF := #22 = 0
000006b5: NF := 31:31[#22]
000006bb: when ZF goto %000006b9
00000a8d: goto %000006eb

000006b9:
000006c1: R30 := 0x7A0
000006c3: call @r with return %000006c5

000006c5:
000006cb: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000a8e: goto %000006cd

000006eb:
000006f0: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
000006f6: #23 := 31:0[R0] - 3
000006fb: VF := extend:33[#23] <> extend:33[31:0[R0]] - 3
00000700: CF := pad:33[#23] <> pad:33[31:0[R0]] + 0xFFFFFFFD
00000704: ZF := #23 = 0
00000708: NF := 31:31[#23]
0000070f: when NF = VF & ~ZF goto %00000496
00000a8f: goto %00000713

00000713:
00000718: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
0000071e: #24 := 31:0[R0] - 1
00000723: VF := extend:33[#24] <> extend:33[31:0[R0]] - 1
00000728: CF := pad:33[#24] <> pad:33[31:0[R0]] + 0xFFFFFFFF
0000072c: ZF := #24 = 0
00000730: NF := 31:31[#24]
00000735: when ZF goto %000006cd
00000a90: goto %00000739

000006cd:
000006d0: R0 := 1
000006d8: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
000006dc: goto %000004a5

00000739:
0000073e: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000744: #25 := 31:0[R0] - 2
00000749: VF := extend:33[#25] <> extend:33[31:0[R0]] - 2
0000074e: CF := pad:33[#25] <> pad:33[31:0[R0]] + 0xFFFFFFFE
00000752: ZF := #25 = 0
00000756: NF := 31:31[#25]
0000075b: when ZF goto %000006de
00000a91: goto %0000075f

000006de:
000006e1: R0 := 2
000006e9: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000a92: goto %0000065a

0000065a:
00000662: R0 := 3
0000066a: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
0000066e: goto %000004a5

0000075f:
00000761: goto %00000496

00000496:
00000499: R0 := 5
000004a1: mem := mem with [R31 + 0x2C, el]:u32 <- 31:0[R0]
00000a93: goto %000004a5

000004a5:
000004ac: R29 := mem[R31, el]:u64
000004b1: R30 := mem[R31 + 8, el]:u64
000004b5: R31 := R31 + 0x30
000004ba: call R30 with noreturn

00000a94: sub r(r_result)
00000aab: r_result :: out u32 = low:32[R0]

00000426:
00000429: R0 := 1
0000042e: call R30 with noreturn

00000a95: sub register_tm_clones(register_tm_clones_result)
00000aac: register_tm_clones_result :: out u32 = low:32[R0]

00000373:
00000376: R0 := 0x11000
0000037c: R0 := R0 + 0x10
00000381: R1 := 0x11000
00000387: R1 := R1 + 0x10
0000038e: R1 := R1 + ~R0 + 1
00000395: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
0000039c: R1 := R2 + (R1 ~>> 3)
000003a2: #3 := ~(R1 ~>> 1)
000003a6: #4 := ~(R1 ~>> 1) + 1
000003ab: VF := extend:65[#4] <> extend:65[#3] + 1
000003b0: CF := pad:65[#4] <> pad:65[#3] + 1
000003b4: ZF := #4 = 0
000003b8: NF := 63:63[#4]
000003c0: R1 :=

          >> 1 | R1 << 0x3F]
000003c6: when ZF goto %000003c4
00000a96: goto %0000079e

0000079e:
000007a1: R2 := 0x10000
000007a8: R2 := mem[R2 + 0xFF8, el]:u64
000007ad: when R2 = 0 goto %000003c4
00000a97: goto %000007b1

000003c4:
000003cc: call R30 with noreturn

000007b1:
000007b5: R16 := R2
000007ba: call R16 with noreturn
