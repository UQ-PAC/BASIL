000013be: program
00001396: sub .plt(\.plt_result)
000013bf: \.plt_result :: out u32 = low:32[R0]

00000fdd:
00000fe1: #20 := R31 - 0x10
00000fe7: mem := mem with [#20, el]:u64 <- R16
00000fed: mem := mem with [#20 + 8, el]:u64 <- R30
00000ff1: R31 := #20
00000ff6: R16 := 0x11000
00000ffd: R17 := mem[R16 + 0xF00, el]:u64
00001003: R16 := R16 + 0xF00
00001008: call R17 with noreturn

00001397: sub __cxa_finalize(__cxa_finalize_result)
000013c0: __cxa_finalize_result :: out u32 = low:32[R0]

00000f30:
00001028: R16 := 0x11000
0000102f: R17 := mem[R16 + 0xF10, el]:u64
00001035: R16 := R16 + 0xF10
0000103a: call R17 with noreturn

00001398: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000013c1: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000006a2:
000006a6: #3 := R31 - 0x20
000006ac: mem := mem with [#3, el]:u64 <- R29
000006b2: mem := mem with [#3 + 8, el]:u64 <- R30
000006b6: R31 := #3
000006bc: R29 := R31
000006c4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000006c9: R19 := 0x12000
000006d0: R0 := pad:64[mem[R19 + 0x10]]
000006d7: when 31:0[R0] <> 0 goto %000006d5
00001399: goto %00000ef9

00000ef9:
00000efc: R0 := 0x11000
00000f03: R0 := mem[R0 + 0xF48, el]:u64
00000f09: when R0 = 0 goto %00000f07
0000139a: goto %00000f20

00000f20:
00000f23: R0 := 0x12000
00000f2a: R0 := mem[R0 + 8, el]:u64
00000f2f: R30 := 0xAF0
00000f32: call @__cxa_finalize with return %00000f07

00000f07:
00000f0f: R30 := 0xAF4
00000f11: call @deregister_tm_clones with return %00000f13

00000f13:
00000f16: R0 := 1
00000f1e: mem := mem with [R19 + 0x10] <- 7:0[R0]
0000139b: goto %000006d5

000006d5:
000006df: R19 := mem[R31 + 0x10, el]:u64
000006e6: R29 := mem[R31, el]:u64
000006eb: R30 := mem[R31 + 8, el]:u64
000006ef: R31 := R31 + 0x20
000006f4: call R30 with noreturn

0000139c: sub __gmon_start__(__gmon_start___result)
000013c2: __gmon_start___result :: out u32 = low:32[R0]

00000f71:
0000103e: R16 := 0x11000
00001045: R17 := mem[R16 + 0xF18, el]:u64
0000104b: R16 := R16 + 0xF18
00001050: call R17 with noreturn

0000139d: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000013c3: __libc_start_main_main :: in u64 = R0
000013c4: __libc_start_main_arg2 :: in u32 = low:32[R1]
000013c5: __libc_start_main_arg3 :: in out u64 = R2
000013c6: __libc_start_main_auxv :: in out u64 = R3
000013c7: __libc_start_main_result :: out u32 = low:32[R0]

000005fb:
00001012: R16 := 0x11000
00001019: R17 := mem[R16 + 0xF08, el]:u64
0000101f: R16 := R16 + 0xF08
00001024: call R17 with noreturn

0000139e: sub _fini(_fini_result)
000013c8: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

0000139f: sub _init(_init_result)
000013c9: _init_result :: out u32 = low:32[R0]

000011e3:
000011e9: #21 := R31 - 0x10
000011ef: mem := mem with [#21, el]:u64 <- R29
000011f5: mem := mem with [#21 + 8, el]:u64 <- R30
000011f9: R31 := #21
000011ff: R29 := R31
00001204: R30 := 0x990
00001206: call @call_weak_fn with return %00001208

00001208:
0000120d: R29 := mem[R31, el]:u64
00001212: R30 := mem[R31 + 8, el]:u64
00001216: R31 := R31 + 0x10
0000121b: call R30 with noreturn

000013a0: sub _start(_start_result)
000013ca: _start_result :: out u32 = low:32[R0]

000005bc:
000005c1: R29 := 0
000005c6: R30 := 0
000005cc: R5 := R0
000005d3: R1 := mem[R31, el]:u64
000005d9: R2 := R31 + 8
000005df: R6 := R31
000005e4: R0 := 0x11000
000005eb: R0 := mem[R0 + 0xFD0, el]:u64
000005f0: R3 := 0
000005f5: R4 := 0
000005fa: R30 := 0xA30
000005fd: call @__libc_start_main with return %000005ff

000005ff:
00000602: R30 := 0xA34
00000605: call @abort with return %000013a1

000013a1:
000013a2: call @call_weak_fn with noreturn

000013a3: sub abort()


00000603:
00001054: R16 := 0x11000
0000105b: R17 := mem[R16 + 0xF20, el]:u64
00001061: R16 := R16 + 0xF20
00001066: call R17 with noreturn

000013a4: sub call_weak_fn(call_weak_fn_result)
000013cb: call_weak_fn_result :: out u32 = low:32[R0]

00000607:
0000060a: R0 := 0x11000
00000611: R0 := mem[R0 + 0xF98, el]:u64
00000617: when R0 = 0 goto %00000615
000013a5: goto %00000f70

00000615:
0000061d: call R30 with noreturn

00000f70:
00000f73: call @__gmon_start__ with noreturn

000013a6: sub closeFile(closeFile_result)
000013cc: closeFile_result :: out u32 = low:32[R0]

00000cb3:
00000cb7: #17 := R31 - 0x10
00000cbd: mem := mem with [#17, el]:u64 <- R29
00000cc3: mem := mem with [#17 + 8, el]:u64 <- R30
00000cc7: R31 := #17
00000ccd: R29 := R31
00000cd2: R0 := 0x11000
00000cd9: R0 := mem[R0 + 0xFB8, el]:u64
00000ce0: R0 := mem[R0, el]:u64
00000ce6: #18 := R0 - 1
00000ceb: VF := extend:65[#18 + 1] <> extend:65[R0] + 0
00000cf0: CF := pad:65[#18 + 1] <> pad:65[R0] - 0x10000000000000000
00000cf4: ZF := #18 + 1 = 0
00000cf8: NF := 63:63[#18 + 1]
00000cfe: when ZF goto %00000cfc
000013a7: goto %00000d18

00000d18:
00000d1b: R0 := 0x11000
00000d22: R0 := mem[R0 + 0xFB8, el]:u64
00000d29: R0 := mem[R0, el]:u64
00000d2e: R1 := 0x11000
00000d35: R1 := mem[R1 + 0xF58, el]:u64
00000d3a: R30 := 0xF18
00000d3d: call R1 with return %00000d3f

00000d3f:
00000d42: R0 := 0x11000
00000d49: R0 := mem[R0 + 0xF78, el]:u64
00000d50: R0 := mem[R0, el]:u64
00000d55: R1 := 0x11000
00000d5c: R1 := mem[R1 + 0xFC0, el]:u64
00000d61: R30 := 0xF30
00000d64: call R1 with return %00000d66

00000d66:
00000d69: R0 := 0x11000
00000d70: R0 := mem[R0 + 0xFB8, el]:u64
00000d77: mem := mem with [R0, el]:u64 <- 0
00000d7c: R0 := 0x11000
00000d83: R0 := mem[R0 + 0xF78, el]:u64
00000d8a: mem := mem with [R0, el]:u64 <- 0
00000d8f: R0 := 0x1000
00000d95: R0 := R0 + 0x1A8
00000d9a: R1 := 0x11000
00000da1: R1 := mem[R1 + 0xFA8, el]:u64
00000da6: R30 := 0xF5C
00000da9: call R1 with return %00000cfc

00000cfc:
00000d08: R29 := mem[R31, el]:u64
00000d0d: R30 := mem[R31 + 8, el]:u64
00000d11: R31 := R31 + 0x10
00000d16: call R30 with noreturn

000013a8: sub deregister_tm_clones(deregister_tm_clones_result)
000013cd: deregister_tm_clones_result :: out u32 = low:32[R0]

00000623:
00000626: R0 := 0x12000
0000062c: R0 := R0 + 0x10
00000631: R1 := 0x12000
00000637: R1 := R1 + 0x10
0000063d: #1 := ~R0
00000642: #2 := R1 + ~R0
00000648: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000064e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000652: ZF := #2 + 1 = 0
00000656: NF := 63:63[#2 + 1]
0000065c: when ZF goto %0000065a
000013a9: goto %00000f52

00000f52:
00000f55: R1 := 0x11000
00000f5c: R1 := mem[R1 + 0xF40, el]:u64
00000f61: when R1 = 0 goto %0000065a
000013aa: goto %00000f65

0000065a:
00000662: call R30 with noreturn

00000f65:
00000f69: R16 := R1
00000f6e: call R16 with noreturn

000013ab: sub frame_dummy(frame_dummy_result)
000013ce: frame_dummy_result :: out u32 = low:32[R0]

000006fa:
000006fc: call @register_tm_clones with noreturn

000013ac: sub handleInput(handleInput_result)
000013cf: handleInput_result :: out u32 = low:32[R0]

000007ee:
000007f2: #5 := R31 - 0x30
000007f8: mem := mem with [#5, el]:u64 <- R29
000007fe: mem := mem with [#5 + 8, el]:u64 <- R30
00000802: R31 := #5
00000808: R29 := R31
00000810: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000815: R0 := 0
0000081b: R1 := R0 + 0xFA8
00000822: R0 := mem[R31 + 0x18, el]:u64
00000827: R2 := 0x11000
0000082e: R2 := mem[R2 + 0xFB0, el]:u64
00000833: R30 := 0xBC8
00000836: call R2 with return %00000838

00000838:
0000083c: #6 := 31:0[R0] - 1
00000841: VF := extend:33[#6 + 1] <> extend:33[31:0[R0]] + 0
00000846: CF := pad:33[#6 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000084a: ZF := #6 + 1 = 0
0000084e: NF := 31:31[#6 + 1]
00000854: when ZF <> 1 goto %00000852
000013ad: goto %00000ee1

00000852:
0000085a: R2 := 5
0000085f: R0 := 0
00000865: R1 := R0 + 0xFB0
0000086c: R0 := mem[R31 + 0x18, el]:u64
00000871: R3 := 0x11000
00000878: R3 := mem[R3 + 0xF70, el]:u64
0000087d: R30 := 0xBFC
00000880: call R3 with return %00000882

00000882:
00000886: #7 := 31:0[R0] - 1
0000088b: VF := extend:33[#7 + 1] <> extend:33[31:0[R0]] + 0
00000890: CF := pad:33[#7 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000894: ZF := #7 + 1 = 0
00000898: NF := 31:31[#7 + 1]
0000089e: when ZF <> 1 goto %0000089c
000013ae: goto %00000ead

0000089c:
000008a4: R0 := 0
000008aa: R1 := R0 + 0xFB8
000008b1: R0 := mem[R31 + 0x18, el]:u64
000008b6: R2 := 0x11000
000008bd: R2 := mem[R2 + 0xFB0, el]:u64
000008c2: R30 := 0xC3C
000008c5: call R2 with return %000008c7

000008c7:
000008cb: #8 := 31:0[R0] - 1
000008d0: VF := extend:33[#8 + 1] <> extend:33[31:0[R0]] + 0
000008d5: CF := pad:33[#8 + 1] <> pad:33[31:0[R0]] - 0x100000000
000008d9: ZF := #8 + 1 = 0
000008dd: NF := 31:31[#8 + 1]
000008e3: when ZF <> 1 goto %000008e1
000013af: goto %00000e95

000008e1:
000008e9: R0 := 0
000008ef: R1 := R0 + 0xFC0
000008f6: R0 := mem[R31 + 0x18, el]:u64
000008fb: R2 := 0x11000
00000902: R2 := mem[R2 + 0xFB0, el]:u64
00000907: R30 := 0xC6C
0000090a: call R2 with return %0000090c

0000090c:
00000910: #9 := 31:0[R0] - 1
00000915: VF := extend:33[#9 + 1] <> extend:33[31:0[R0]] + 0
0000091a: CF := pad:33[#9 + 1] <> pad:33[31:0[R0]] - 0x100000000
0000091e: ZF := #9 + 1 = 0
00000922: NF := 31:31[#9 + 1]
00000928: when ZF <> 1 goto %00000926
000013b0: goto %00000e7d

00000926:
0000092e: R0 := 0
00000934: R1 := R0 + 0xFC8
0000093b: R0 := mem[R31 + 0x18, el]:u64
00000940: R2 := 0x11000
00000947: R2 := mem[R2 + 0xFB0, el]:u64
0000094c: R30 := 0xC9C
0000094f: call R2 with return %00000951

00000951:
00000955: #10 := 31:0[R0] - 1
0000095a: VF := extend:33[#10 + 1] <> extend:33[31:0[R0]] + 0
0000095f: CF := pad:33[#10 + 1] <> pad:33[31:0[R0]] - 0x100000000
00000963: ZF := #10 + 1 = 0
00000967: NF := 31:31[#10 + 1]
0000096d: when ZF <> 1 goto %0000096b
000013b1: goto %00000e1e

00000e1e:
00000e21: R0 := 0x11000
00000e28: R0 := mem[R0 + 0xFB8, el]:u64
00000e2f: R0 := mem[R0, el]:u64
00000e35: #19 := R0 - 1
00000e3a: VF := extend:65[#19 + 1] <> extend:65[R0] + 0
00000e3f: CF := pad:65[#19 + 1] <> pad:65[R0] - 0x10000000000000000
00000e43: ZF := #19 + 1 = 0
00000e47: NF := 63:63[#19 + 1]
00000e4d: when ZF goto %00000e4b
000013b2: goto %00000e69

00000e69:
00000e6c: R0 := 0x11000
00000e73: R0 := mem[R0 + 0xFC8, el]:u64
00000e78: R30 := 0xCC4
00000e7b: call R0 with return %00000e4b

00000e4b:
00000e53: R0 := 0
00000e58: R1 := 0x11000
00000e5f: R1 := mem[R1 + 0xF38, el]:u64
00000e64: R30 := 0xCD4
00000e67: call R1 with return %0000096b

0000096b:
00000973: R0 := 0
00000979: R0 := R0 + 0xFD0
0000097e: R1 := 0x11000
00000985: R1 := mem[R1 + 0xFA8, el]:u64
0000098a: R30 := 0xCE8
0000098d: call R1 with return %0000098f

00000e7d:
00000e80: R0 := 0x11000
00000e87: R0 := mem[R0 + 0xFC8, el]:u64
00000e8c: R30 := 0xC80
00000e8f: call R0 with return %00000e91

00000e91:
00000e93: goto %0000098f

00000e95:
00000e98: R0 := 0x11000
00000e9f: R0 := mem[R0 + 0xF68, el]:u64
00000ea4: R30 := 0xC50
00000ea7: call R0 with return %00000ea9

00000ea9:
00000eab: goto %0000098f

00000ead:
00000eb2: R0 := mem[R31 + 0x18, el]:u64
00000eb8: R0 := R0 + 5
00000ec0: mem := mem with [R31 + 0x28, el]:u64 <- R0
00000ec7: R0 := mem[R31 + 0x28, el]:u64
00000ecc: R1 := 0x11000
00000ed3: R1 := mem[R1 + 0xF50, el]:u64
00000ed8: R30 := 0xC20
00000edb: call R1 with return %00000edd

00000edd:
00000edf: goto %0000098f

00000ee1:
00000ee4: R0 := 0x11000
00000eeb: R0 := mem[R0 + 0xF30, el]:u64
00000ef0: R30 := 0xBDC
00000ef3: call R0 with return %00000ef5

00000ef5:
00000ef7: goto %0000098f

0000098f:
00000996: R29 := mem[R31, el]:u64
0000099b: R30 := mem[R31 + 8, el]:u64
0000099f: R31 := R31 + 0x30
000009a4: call R30 with noreturn

000013b3: sub main(main_argc, main_argv, main_result)
000013d0: main_argc :: in u32 = low:32[R0]
000013d1: main_argv :: in out u64 = R1
000013d2: main_result :: out u32 = low:32[R0]

000006fe:
00000702: #4 := R31 - 0x120
00000708: mem := mem with [#4, el]:u64 <- R29
0000070e: mem := mem with [#4 + 8, el]:u64 <- R30
00000712: R31 := #4
00000718: R29 := R31
0000071d: R0 := 0x11000
00000724: R0 := mem[R0 + 0xFA0, el]:u64
0000072b: R1 := mem[R0, el]:u64
00000733: mem := mem with [R31 + 0x118, el]:u64 <- R1
00000738: R1 := 0
000013b4: goto %0000073a

0000073a:
0000073d: R0 := 0
00000743: R0 := R0 + 0xF88
00000748: R1 := 0x11000
0000074f: R1 := mem[R1 + 0xFF0, el]:u64
00000754: R30 := 0xB44
00000757: call R1 with return %00000759

00000759:
0000075c: R0 := 0x11000
00000763: R0 := mem[R0 + 0xF88, el]:u64
0000076a: R1 := mem[R0, el]:u64
00000770: R0 := R31 + 0x18
00000776: R2 := R1
0000077b: R1 := 0x100
00000780: R3 := 0x11000
00000787: R3 := mem[R3 + 0xFF8, el]:u64
0000078c: R30 := 0xB68
0000078f: call R3 with return %00000791

00000791:
00000795: R2 := R31 + 0x18
0000079a: R0 := 0
000007a0: R1 := R0 + 0xFA0
000007a6: R0 := R2
000007ab: R2 := 0x11000
000007b2: R2 := mem[R2 + 0xFE8, el]:u64
000007b7: R30 := 0xB84
000007ba: call R2 with return %000007bc

000007bc:
000007c0: R1 := R0
000007c6: R0 := R31 + 0x18
000007ce: mem := mem with [R0 + R1] <- 0
000007d4: R0 := R31 + 0x18
000007d9: R1 := 0x11000
000007e0: R1 := mem[R1 + 0xFE0, el]:u64
000007e5: R30 := 0xBA0
000007e8: call R1 with return %000007ea

000007ea:
000007ec: goto %0000073a

000013b5: sub openFile(openFile_result)
000013d3: openFile_result :: out u32 = low:32[R0]

00000a93:
00000a97: #12 := R31 - 0x20
00000a9d: mem := mem with [#12, el]:u64 <- R29
00000aa3: mem := mem with [#12 + 8, el]:u64 <- R30
00000aa7: R31 := #12
00000aad: R29 := R31
00000ab5: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000aba: R0 := 0x11000
00000ac1: R0 := mem[R0 + 0xFB8, el]:u64
00000ac8: R0 := mem[R0, el]:u64
00000ace: #13 := R0 - 1
00000ad3: VF := extend:65[#13 + 1] <> extend:65[R0] + 0
00000ad8: CF := pad:65[#13 + 1] <> pad:65[R0] - 0x10000000000000000
00000adc: ZF := #13 + 1 = 0
00000ae0: NF := 63:63[#13 + 1]
00000ae6: when ZF goto %00000ae4
000013b6: goto %00000e0a

00000e0a:
00000e0d: R0 := 0x11000
00000e14: R0 := mem[R0 + 0xFC8, el]:u64
00000e19: R30 := 0xDAC
00000e1c: call R0 with return %00000ae4

00000ae4:
00000aee: R0 := mem[R31 + 0x18, el]:u64
00000af3: R1 := 0x11000
00000afa: R1 := mem[R1 + 0xF90, el]:u64
00000aff: R30 := 0xDBC
00000b02: call R1 with return %00000b04

00000b04:
00000b08: R1 := R0
00000b0d: R0 := 0x11000
00000b14: R0 := mem[R0 + 0xF78, el]:u64
00000b1c: mem := mem with [R0, el]:u64 <- R1
00000b21: R0 := 0x11000
00000b28: R0 := mem[R0 + 0xF78, el]:u64
00000b2f: R2 := mem[R0, el]:u64
00000b34: R0 := 0x1000
00000b3a: R1 := R0 + 0x128
00000b40: R0 := R2
00000b45: R2 := 0x11000
00000b4c: R2 := mem[R2 + 0xF60, el]:u64
00000b51: R30 := 0xDF0
00000b54: call R2 with return %00000b56

00000b56:
00000b5a: R1 := R0
00000b5f: R0 := 0x11000
00000b66: R0 := mem[R0 + 0xFB8, el]:u64
00000b6e: mem := mem with [R0, el]:u64 <- R1
00000b73: R0 := 0x11000
00000b7a: R0 := mem[R0 + 0xFB8, el]:u64
00000b81: R0 := mem[R0, el]:u64
00000b87: #14 := R0 - 1
00000b8c: VF := extend:65[#14 + 1] <> extend:65[R0] + 0
00000b91: CF := pad:65[#14 + 1] <> pad:65[R0] - 0x10000000000000000
00000b95: ZF := #14 + 1 = 0
00000b99: NF := 63:63[#14 + 1]
00000b9f: when ZF <> 1 goto %00000b9d
000013b7: goto %00000dce

00000b9d:
00000ba5: R0 := 0x11000
00000bac: R0 := mem[R0 + 0xF78, el]:u64
00000bb3: R0 := mem[R0, el]:u64
00000bb9: R1 := R0
00000bbe: R0 := 0x1000
00000bc4: R0 := R0 + 0x150
00000bc9: R2 := 0x11000
00000bd0: R2 := mem[R2 + 0xFF0, el]:u64
00000bd5: R30 := 0xE60
00000bd8: call R2 with return %00000bda

00000dce:
00000dd1: R0 := 0x11000
00000dd8: R0 := mem[R0 + 0xF78, el]:u64
00000ddf: R0 := mem[R0, el]:u64
00000de5: R1 := R0
00000dea: R0 := 0x1000
00000df0: R0 := R0 + 0x130
00000df5: R2 := 0x11000
00000dfc: R2 := mem[R2 + 0xFF0, el]:u64
00000e01: R30 := 0xE38
00000e04: call R2 with return %00000e06

00000e06:
00000e08: goto %00000bda

00000bda:
00000be1: R29 := mem[R31, el]:u64
00000be6: R30 := mem[R31 + 8, el]:u64
00000bea: R31 := R31 + 0x20
00000bef: call R30 with noreturn

000013b8: sub printHelp(printHelp_result)
000013d4: printHelp_result :: out u32 = low:32[R0]

000009a6:
000009aa: #11 := R31 - 0x10
000009b0: mem := mem with [#11, el]:u64 <- R29
000009b6: mem := mem with [#11 + 8, el]:u64 <- R30
000009ba: R31 := #11
000009c0: R29 := R31
000009c5: R0 := 0x1000
000009cb: R0 := R0 + 8
000009d0: R1 := 0x11000
000009d7: R1 := mem[R1 + 0xFA8, el]:u64
000009dc: R30 := 0xD10
000009df: call R1 with return %000009e1

000009e1:
000009e4: R0 := 0x1000
000009ea: R0 := R0 + 0x18
000009ef: R1 := 0x11000
000009f6: R1 := mem[R1 + 0xFA8, el]:u64
000009fb: R30 := 0xD24
000009fe: call R1 with return %00000a00

00000a00:
00000a03: R0 := 0x1000
00000a09: R0 := R0 + 0x50
00000a0e: R1 := 0x11000
00000a15: R1 := mem[R1 + 0xFA8, el]:u64
00000a1a: R30 := 0xD38
00000a1d: call R1 with return %00000a1f

00000a1f:
00000a22: R0 := 0x1000
00000a28: R0 := R0 + 0x88
00000a2d: R1 := 0x11000
00000a34: R1 := mem[R1 + 0xFA8, el]:u64
00000a39: R30 := 0xD4C
00000a3c: call R1 with return %00000a3e

00000a3e:
00000a41: R0 := 0x1000
00000a47: R0 := R0 + 0xC8
00000a4c: R1 := 0x11000
00000a53: R1 := mem[R1 + 0xFA8, el]:u64
00000a58: R30 := 0xD60
00000a5b: call R1 with return %00000a5d

00000a5d:
00000a60: R0 := 0x1000
00000a66: R0 := R0 + 0xF8
00000a6b: R1 := 0x11000
00000a72: R1 := mem[R1 + 0xFA8, el]:u64
00000a77: R30 := 0xD74
00000a7a: call R1 with return %00000a7c

00000a7c:
00000a83: R29 := mem[R31, el]:u64
00000a88: R30 := mem[R31 + 8, el]:u64
00000a8c: R31 := R31 + 0x10
00000a91: call R30 with noreturn

000013b9: sub register_tm_clones(register_tm_clones_result)
000013d5: register_tm_clones_result :: out u32 = low:32[R0]

00000664:
00000667: R0 := 0x12000
0000066d: R0 := R0 + 0x10
00000672: R1 := 0x12000
00000678: R1 := R1 + 0x10
0000067f: R1 := R1 + ~R0 + 1
00000685: R2 := 0.63:63[R1]
0000068c: R1 := R2 + (R1 ~>> 3)
00000692: R1 := extend:64[63:1[R1]]
00000698: when R1 = 0 goto %00000696
000013ba: goto %00000f34

00000f34:
00000f37: R2 := 0x11000
00000f3e: R2 := mem[R2 + 0xFD8, el]:u64
00000f43: when R2 = 0 goto %00000696
000013bb: goto %00000f47

00000696:
0000069e: call R30 with noreturn

00000f47:
00000f4b: R16 := R2
00000f50: call R16 with noreturn

000013bc: sub saveFile(saveFile_result)
000013d6: saveFile_result :: out u32 = low:32[R0]

00000bf1:
00000bf5: #15 := R31 - 0x10
00000bfb: mem := mem with [#15, el]:u64 <- R29
00000c01: mem := mem with [#15 + 8, el]:u64 <- R30
00000c05: R31 := #15
00000c0b: R29 := R31
00000c10: R0 := 0x11000
00000c17: R0 := mem[R0 + 0xFB8, el]:u64
00000c1e: R0 := mem[R0, el]:u64
00000c24: #16 := R0 - 1
00000c29: VF := extend:65[#16 + 1] <> extend:65[R0] + 0
00000c2e: CF := pad:65[#16 + 1] <> pad:65[R0] - 0x10000000000000000
00000c32: ZF := #16 + 1 = 0
00000c36: NF := 63:63[#16 + 1]
00000c3c: when ZF <> 1 goto %00000c3a
000013bd: goto %00000dab

00000c3a:
00000c42: R0 := 0x11000
00000c49: R0 := mem[R0 + 0xFB8, el]:u64
00000c50: R0 := mem[R0, el]:u64
00000c55: R1 := 0x11000
00000c5c: R1 := mem[R1 + 0xF80, el]:u64
00000c61: R30 := 0xEB8
00000c64: call R1 with return %00000c66

00000c66:
00000c69: R0 := 0x11000
00000c70: R0 := mem[R0 + 0xF78, el]:u64
00000c77: R0 := mem[R0, el]:u64
00000c7d: R1 := R0
00000c82: R0 := 0x1000
00000c88: R0 := R0 + 0x188
00000c8d: R2 := 0x11000
00000c94: R2 := mem[R2 + 0xFF0, el]:u64
00000c99: R30 := 0xEDC
00000c9c: call R2 with return %00000c9e

00000dab:
00000dae: R0 := 0x1000
00000db4: R0 := R0 + 0x168
00000db9: R1 := 0x11000
00000dc0: R1 := mem[R1 + 0xFA8, el]:u64
00000dc5: R30 := 0xE9C
00000dc8: call R1 with return %00000dca

00000dca:
00000dcc: goto %00000c9e

00000c9e:
00000ca3: R29 := mem[R31, el]:u64
00000ca8: R30 := mem[R31 + 8, el]:u64
00000cac: R31 := R31 + 0x10
00000cb1: call R30 with noreturn
