0000081f: program
00000804: sub __cxa_finalize(__cxa_finalize_result)
00000820: __cxa_finalize_result :: out u32 = low:32[R0]

00000576:
00000657: R16 := 0x11000
0000065e: R17 := mem[R16, el]:u64
00000664: R16 := R16
00000669: call R17 with noreturn

00000805: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000821: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000033a:
0000033e: #5 := R31 - 0x20
00000344: mem := mem with [#5, el]:u64 <- R29
0000034a: mem := mem with [#5 + 8, el]:u64 <- R30
0000034e: R31 := #5
00000354: R29 := R31
0000035c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000361: R19 := 0x11000
00000368: R0 := pad:64[mem[R19 + 0x30]]
0000036f: when 31:0[R0] <> 0 goto %0000036d
00000806: goto %0000053f

0000053f:
00000542: R0 := 0x10000
00000549: R0 := mem[R0 + 0xFC0, el]:u64
0000054f: when R0 = 0 goto %0000054d
00000807: goto %00000566

00000566:
00000569: R0 := 0x11000
00000570: R0 := mem[R0 + 0x28, el]:u64
00000575: R30 := 0x700
00000578: call @__cxa_finalize with return %0000054d

0000054d:
00000555: R30 := 0x704
00000557: call @deregister_tm_clones with return %00000559

00000559:
0000055c: R0 := 1
00000564: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000808: goto %0000036d

0000036d:
00000377: R19 := mem[R31 + 0x10, el]:u64
0000037e: R29 := mem[R31, el]:u64
00000383: R30 := mem[R31 + 8, el]:u64
00000387: R31 := R31 + 0x20
0000038c: call R30 with noreturn

00000809: sub __libc_csu_fini(__libc_csu_fini_result)
00000822: __libc_csu_fini_result :: out u32 = low:32[R0]

000004df:
000004e2: call R30 with noreturn

0000080a: sub __libc_csu_init(__libc_csu_init_result)
00000823: __libc_csu_init_result :: out u32 = low:32[R0]

000003ec:
000003f0: #6 := R31 - 0x40
000003f6: mem := mem with [#6, el]:u64 <- R29
000003fc: mem := mem with [#6 + 8, el]:u64 <- R30
00000400: R31 := #6
00000406: R29 := R31
0000040c: #7 := R31 + 0x10
00000412: mem := mem with [#7, el]:u64 <- R19
00000418: mem := mem with [#7 + 8, el]:u64 <- R20
0000041d: R20 := 0x10000
00000423: R20 := R20 + 0xDC0
00000429: #8 := R31 + 0x20
0000042f: mem := mem with [#8, el]:u64 <- R21
00000435: mem := mem with [#8 + 8, el]:u64 <- R22
0000043a: R21 := 0x10000
00000440: R21 := R21 + 0xDB8
00000447: R20 := R20 + ~R21 + 1
0000044d: R22 := pad:64[31:0[R0]]
00000453: #9 := R31 + 0x30
00000459: mem := mem with [#9, el]:u64 <- R23
0000045f: mem := mem with [#9 + 8, el]:u64 <- R24
00000465: R23 := R1
0000046b: R24 := R2
00000470: R30 := 0x790
00000473: call @_init with return %00000475

00000475:
00000479: #10 := ~(R20 ~>> 3)
0000047d: #11 := ~(R20 ~>> 3) + 1
00000482: VF := extend:65[#11] <> extend:65[#10] + 1
00000487: CF := pad:65[#11] <> pad:65[#10] + 1
0000048b: ZF := #11 = 0
0000048f: NF := 63:63[#11]
00000495: when ZF goto %00000493
0000080b: goto %000004e4

000004e4:
000004ea: R20 :=

          >> 3 | R20 << 0x3D]
000004ef: R19 := 0
0000080c: goto %000004f1

000004f1:
000004f7: R3 := mem[R21 + (60:0[R19].0), el]:u64
000004fd: R2 := R24
00000503: R19 := R19 + 1
00000509: R1 := R23
0000050f: R0 := pad:64[31:0[R22]]
00000514: R30 := 0x7B8
00000517: call R3 with return %00000519

00000519:
0000051d: #15 := ~R19
00000522: #16 := R20 + ~R19 + 1
00000528: VF := extend:65[#16] <> extend:65[R20] + extend:65[#15] + 1
0000052e: CF := pad:65[#16] <> pad:65[R20] + pad:65[#15] + 1
00000532: ZF := #16 = 0
00000536: NF := 63:63[#16]
0000053b: when ZF <> 1 goto %000004f1
0000080d: goto %00000493

00000493:
0000049c: #12 := R31 + 0x10
000004a1: R19 := mem[#12, el]:u64
000004a6: R20 := mem[#12 + 8, el]:u64
000004ac: #13 := R31 + 0x20
000004b1: R21 := mem[#13, el]:u64
000004b6: R22 := mem[#13 + 8, el]:u64
000004bc: #14 := R31 + 0x30
000004c1: R23 := mem[#14, el]:u64
000004c6: R24 := mem[#14 + 8, el]:u64
000004cd: R29 := mem[R31, el]:u64
000004d2: R30 := mem[R31 + 8, el]:u64
000004d6: R31 := R31 + 0x40
000004db: call R30 with noreturn

0000080e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000824: __libc_start_main_main :: in u64 = R0
00000825: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000826: __libc_start_main_arg3 :: in out u64 = R2
00000827: __libc_start_main_auxv :: in out u64 = R3
00000828: __libc_start_main_result :: out u32 = low:32[R0]

00000278:
0000066d: R16 := 0x11000
00000674: R17 := mem[R16 + 8, el]:u64
0000067a: R16 := R16 + 8
0000067f: call R17 with noreturn

0000080f: sub _fini(_fini_result)
00000829: _fini_result :: out u32 = low:32[R0]

0000002e:
00000032: #0 := R31 - 0x10
00000038: mem := mem with [#0, el]:u64 <- R29
0000003e: mem := mem with [#0 + 8, el]:u64 <- R30
00000042: R31 := #0
00000048: R29 := R31
0000004f: R29 := mem[R31, el]:u64
00000054: R30 := mem[R31 + 8, el]:u64
00000058: R31 := R31 + 0x10
0000005d: call R30 with noreturn

00000810: sub _init(_init_result)
0000082a: _init_result :: out u32 = low:32[R0]

00000471:
0000073f: #18 := R31 - 0x10
00000745: mem := mem with [#18, el]:u64 <- R29
0000074b: mem := mem with [#18 + 8, el]:u64 <- R30
0000074f: R31 := #18
00000755: R29 := R31
0000075a: R30 := 0x5A4
0000075c: call @call_weak_fn with return %0000075e

0000075e:
00000763: R29 := mem[R31, el]:u64
00000768: R30 := mem[R31 + 8, el]:u64
0000076c: R31 := R31 + 0x10
00000771: call R30 with noreturn

00000811: sub _start(_start_result)
0000082b: _start_result :: out u32 = low:32[R0]

0000022d:
00000230: R29 := 0
00000235: R30 := 0
0000023b: R5 := R0
00000242: R1 := mem[R31, el]:u64
00000248: R2 := R31 + 8
0000024e: R6 := R31
00000253: R0 := 0x10000
0000025a: R0 := mem[R0 + 0xFD8, el]:u64
0000025f: R3 := 0x10000
00000266: R3 := mem[R3 + 0xFD0, el]:u64
0000026b: R4 := 0x10000
00000272: R4 := mem[R4 + 0xFB0, el]:u64
00000277: R30 := 0x644
0000027a: call @__libc_start_main with return %0000027c

0000027c:
0000027f: R30 := 0x648
00000282: call @abort with return %00000812

00000812:
00000813: call @call_weak_fn with noreturn

00000814: sub abort()


00000280:
00000699: R16 := 0x11000
000006a0: R17 := mem[R16 + 0x18, el]:u64
000006a6: R16 := R16 + 0x18
000006ab: call R17 with noreturn

00000815: sub call_weak_fn(call_weak_fn_result)
0000082c: call_weak_fn_result :: out u32 = low:32[R0]

00000284:
00000287: R0 := 0x10000
0000028e: R0 := mem[R0 + 0xFC8, el]:u64
00000294: when R0 = 0 goto %00000292
00000816: goto %000005b6

00000292:
0000029a: call R30 with noreturn

000005b6:
000005b9: goto @__gmon_start__

000005b7:
00000683: R16 := 0x11000
0000068a: R17 := mem[R16 + 0x10, el]:u64
00000690: R16 := R16 + 0x10
00000695: call R17 with noreturn

00000817: sub deregister_tm_clones(deregister_tm_clones_result)
0000082d: deregister_tm_clones_result :: out u32 = low:32[R0]

0000029e:
000002a1: R0 := 0x11000
000002a7: R0 := R0 + 0x30
000002ac: R1 := 0x11000
000002b2: R1 := R1 + 0x30
000002b8: #1 := ~R0
000002bd: #2 := R1 + ~R0 + 1
000002c3: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002c9: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002cd: ZF := #2 = 0
000002d1: NF := 63:63[#2]
000002d7: when ZF goto %000002d5
00000818: goto %00000598

00000598:
0000059b: R1 := 0x10000
000005a2: R1 := mem[R1 + 0xFB8, el]:u64
000005a7: when R1 = 0 goto %000002d5
00000819: goto %000005ab

000002d5:
000002dd: call R30 with noreturn

000005ab:
000005af: R16 := R1
000005b4: call R16 with noreturn

0000081a: sub frame_dummy(frame_dummy_result)
0000082e: frame_dummy_result :: out u32 = low:32[R0]

0000038e:
00000390: call @register_tm_clones with noreturn

0000081b: sub main(main_argc, main_argv, main_result)
0000082f: main_argc :: in u32 = low:32[R0]
00000830: main_argv :: in out u64 = R1
00000831: main_result :: out u32 = low:32[R0]

00000392:
00000396: R31 := R31 - 0x10
0000039e: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R0]
000003a3: R9 := 0x11000
000003a8: R8 := 1
000003b0: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
000003b7: R10 := pad:64[mem[R31 + 0xC, el]:u32]
000003bc: R8 := 0x11000
000003c4: mem := mem with [R8 + 0x38, el]:u32 <- 31:0[R10]
000003c9: R0 := 0
000003d0: mem := mem with [R8 + 0x38, el]:u32 <- 0
000003d5: R8 := 2
000003dd: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
000003e3: R31 := R31 + 0x10
000003e8: call R30 with noreturn

0000081c: sub register_tm_clones(register_tm_clones_result)
00000832: register_tm_clones_result :: out u32 = low:32[R0]

000002df:
000002e2: R0 := 0x11000
000002e8: R0 := R0 + 0x30
000002ed: R1 := 0x11000
000002f3: R1 := R1 + 0x30
000002fa: R1 := R1 + ~R0 + 1
00000301: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000308: R1 := R2 + (R1 ~>> 3)
0000030e: #3 := ~(R1 ~>> 1)
00000312: #4 := ~(R1 ~>> 1) + 1
00000317: VF := extend:65[#4] <> extend:65[#3] + 1
0000031c: CF := pad:65[#4] <> pad:65[#3] + 1
00000320: ZF := #4 = 0
00000324: NF := 63:63[#4]
0000032c: R1 :=

          >> 1 | R1 << 0x3F]
00000332: when ZF goto %00000330
0000081d: goto %0000057a

0000057a:
0000057d: R2 := 0x10000
00000584: R2 := mem[R2 + 0xFE0, el]:u64
00000589: when R2 = 0 goto %00000330
0000081e: goto %0000058d

00000330:
00000338: call R30 with noreturn

0000058d:
00000591: R16 := R2
00000596: call R16 with noreturn
