000008eb: program
000008ce: sub __cxa_finalize(__cxa_finalize_result)
000008ec: __cxa_finalize_result :: out u32 = low:32[R0]

00000628:
00000709: R16 := 0x11000
00000710: R17 := mem[R16, el]:u64
00000716: R16 := R16
0000071b: call R17 with noreturn

000008cf: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000008ed: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000036a:
0000036e: #5 := R31 - 0x20
00000374: mem := mem with [#5, el]:u64 <- R29
0000037a: mem := mem with [#5 + 8, el]:u64 <- R30
0000037e: R31 := #5
00000384: R29 := R31
0000038c: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000391: R19 := 0x11000
00000398: R0 := pad:64[mem[R19 + 0x30]]
0000039f: when 31:0[R0] <> 0 goto %0000039d
000008d0: goto %000005f1

000005f1:
000005f4: R0 := 0x10000
000005fb: R0 := mem[R0 + 0xFC0, el]:u64
00000601: when R0 = 0 goto %000005ff
000008d1: goto %00000618

00000618:
0000061b: R0 := 0x11000
00000622: R0 := mem[R0 + 0x28, el]:u64
00000627: R30 := 0x700
0000062a: call @__cxa_finalize with return %000005ff

000005ff:
00000607: R30 := 0x704
00000609: call @deregister_tm_clones with return %0000060b

0000060b:
0000060e: R0 := 1
00000616: mem := mem with [R19 + 0x30] <- 7:0[R0]
000008d2: goto %0000039d

0000039d:
000003a7: R19 := mem[R31 + 0x10, el]:u64
000003ae: R29 := mem[R31, el]:u64
000003b3: R30 := mem[R31 + 8, el]:u64
000003b7: R31 := R31 + 0x20
000003bc: call R30 with noreturn

000008d3: sub __libc_csu_fini(__libc_csu_fini_result)
000008ee: __libc_csu_fini_result :: out u32 = low:32[R0]

0000052e:
00000531: call R30 with noreturn

000008d4: sub __libc_csu_init(__libc_csu_init_result)
000008ef: __libc_csu_init_result :: out u32 = low:32[R0]

0000043b:
0000043f: #7 := R31 - 0x40
00000445: mem := mem with [#7, el]:u64 <- R29
0000044b: mem := mem with [#7 + 8, el]:u64 <- R30
0000044f: R31 := #7
00000455: R29 := R31
0000045b: #8 := R31 + 0x10
00000461: mem := mem with [#8, el]:u64 <- R19
00000467: mem := mem with [#8 + 8, el]:u64 <- R20
0000046c: R20 := 0x10000
00000472: R20 := R20 + 0xDC0
00000478: #9 := R31 + 0x20
0000047e: mem := mem with [#9, el]:u64 <- R21
00000484: mem := mem with [#9 + 8, el]:u64 <- R22
00000489: R21 := 0x10000
0000048f: R21 := R21 + 0xDB8
00000496: R20 := R20 + ~R21 + 1
0000049c: R22 := pad:64[31:0[R0]]
000004a2: #10 := R31 + 0x30
000004a8: mem := mem with [#10, el]:u64 <- R23
000004ae: mem := mem with [#10 + 8, el]:u64 <- R24
000004b4: R23 := R1
000004ba: R24 := R2
000004bf: R30 := 0x7C0
000004c2: call @_init with return %000004c4

000004c4:
000004c8: #11 := ~(R20 ~>> 3)
000004cc: #12 := ~(R20 ~>> 3) + 1
000004d1: VF := extend:65[#12] <> extend:65[#11] + 1
000004d6: CF := pad:65[#12] <> pad:65[#11] + 1
000004da: ZF := #12 = 0
000004de: NF := 63:63[#12]
000004e4: when ZF goto %000004e2
000008d5: goto %00000533

00000533:
00000539: R20 :=

          >> 3 | R20 << 0x3D]
0000053e: R19 := 0
000008d6: goto %00000540

00000540:
00000546: R3 := mem[R21 + (60:0[R19].0), el]:u64
0000054c: R2 := R24
00000552: R19 := R19 + 1
00000558: R1 := R23
0000055e: R0 := pad:64[31:0[R22]]
00000563: R30 := 0x7E8
00000566: call R3 with return %00000568

00000568:
0000056c: #16 := ~R19
00000571: #17 := R20 + ~R19 + 1
00000577: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
0000057d: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
00000581: ZF := #17 = 0
00000585: NF := 63:63[#17]
0000058a: when ZF <> 1 goto %00000540
000008d7: goto %000004e2

000004e2:
000004eb: #13 := R31 + 0x10
000004f0: R19 := mem[#13, el]:u64
000004f5: R20 := mem[#13 + 8, el]:u64
000004fb: #14 := R31 + 0x20
00000500: R21 := mem[#14, el]:u64
00000505: R22 := mem[#14 + 8, el]:u64
0000050b: #15 := R31 + 0x30
00000510: R23 := mem[#15, el]:u64
00000515: R24 := mem[#15 + 8, el]:u64
0000051c: R29 := mem[R31, el]:u64
00000521: R30 := mem[R31 + 8, el]:u64
00000525: R31 := R31 + 0x40
0000052a: call R30 with noreturn

000008d8: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000008f0: __libc_start_main_main :: in u64 = R0
000008f1: __libc_start_main_arg2 :: in u32 = low:32[R1]
000008f2: __libc_start_main_arg3 :: in out u64 = R2
000008f3: __libc_start_main_auxv :: in out u64 = R3
000008f4: __libc_start_main_result :: out u32 = low:32[R0]

000002a8:
0000071f: R16 := 0x11000
00000726: R17 := mem[R16 + 8, el]:u64
0000072c: R16 := R16 + 8
00000731: call R17 with noreturn

000008d9: sub _fini(_fini_result)
000008f5: _fini_result :: out u32 = low:32[R0]

0000002e:
00000032: #0 := R31 - 0x10
00000038: mem := mem with [#0, el]:u64 <- R29
0000003e: mem := mem with [#0 + 8, el]:u64 <- R30
00000042: R31 := #0
00000048: R29 := R31
0000004f: R29 := mem[R31, el]:u64
00000054: R30 := mem[R31 + 8, el]:u64
00000058: R31 := R31 + 0x10
0000005d: call R30 with noreturn

000008da: sub _init(_init_result)
000008f6: _init_result :: out u32 = low:32[R0]

000004c0:
000007fd: #20 := R31 - 0x10
00000803: mem := mem with [#20, el]:u64 <- R29
00000809: mem := mem with [#20 + 8, el]:u64 <- R30
0000080d: R31 := #20
00000813: R29 := R31
00000818: R30 := 0x5A4
0000081a: call @call_weak_fn with return %0000081c

0000081c:
00000821: R29 := mem[R31, el]:u64
00000826: R30 := mem[R31 + 8, el]:u64
0000082a: R31 := R31 + 0x10
0000082f: call R30 with noreturn

000008db: sub _start(_start_result)
000008f7: _start_result :: out u32 = low:32[R0]

0000025d:
00000260: R29 := 0
00000265: R30 := 0
0000026b: R5 := R0
00000272: R1 := mem[R31, el]:u64
00000278: R2 := R31 + 8
0000027e: R6 := R31
00000283: R0 := 0x10000
0000028a: R0 := mem[R0 + 0xFD8, el]:u64
0000028f: R3 := 0x10000
00000296: R3 := mem[R3 + 0xFD0, el]:u64
0000029b: R4 := 0x10000
000002a2: R4 := mem[R4 + 0xFB0, el]:u64
000002a7: R30 := 0x644
000002aa: call @__libc_start_main with return %000002ac

000002ac:
000002af: R30 := 0x648
000002b2: call @abort with return %000008dc

000008dc:
000008dd: call @call_weak_fn with noreturn

000008de: sub abort()


000002b0:
0000074b: R16 := 0x11000
00000752: R17 := mem[R16 + 0x18, el]:u64
00000758: R16 := R16 + 0x18
0000075d: call R17 with noreturn

000008df: sub call_weak_fn(call_weak_fn_result)
000008f8: call_weak_fn_result :: out u32 = low:32[R0]

000002b4:
000002b7: R0 := 0x10000
000002be: R0 := mem[R0 + 0xFC8, el]:u64
000002c4: when R0 = 0 goto %000002c2
000008e0: goto %00000668

000002c2:
000002ca: call R30 with noreturn

00000668:
0000066b: goto @__gmon_start__

00000669:
00000735: R16 := 0x11000
0000073c: R17 := mem[R16 + 0x10, el]:u64
00000742: R16 := R16 + 0x10
00000747: call R17 with noreturn

000008e1: sub deregister_tm_clones(deregister_tm_clones_result)
000008f9: deregister_tm_clones_result :: out u32 = low:32[R0]

000002ce:
000002d1: R0 := 0x11000
000002d7: R0 := R0 + 0x30
000002dc: R1 := 0x11000
000002e2: R1 := R1 + 0x30
000002e8: #1 := ~R0
000002ed: #2 := R1 + ~R0 + 1
000002f3: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002f9: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002fd: ZF := #2 = 0
00000301: NF := 63:63[#2]
00000307: when ZF goto %00000305
000008e2: goto %0000064a

0000064a:
0000064d: R1 := 0x10000
00000654: R1 := mem[R1 + 0xFB8, el]:u64
00000659: when R1 = 0 goto %00000305
000008e3: goto %0000065d

00000305:
0000030d: call R30 with noreturn

0000065d:
00000661: R16 := R1
00000666: call R16 with noreturn

000008e4: sub frame_dummy(frame_dummy_result)
000008fa: frame_dummy_result :: out u32 = low:32[R0]

000003be:
000003c0: call @register_tm_clones with noreturn

000008e5: sub main(main_argc, main_argv, main_result)
000008fb: main_argc :: in u32 = low:32[R0]
000008fc: main_argv :: in out u64 = R1
000008fd: main_result :: out u32 = low:32[R0]

000003c2:
000003c6: R31 := R31 - 0x10
000003cb: R8 := 1
000003d3: mem := mem with [R31 + 0xC, el]:u32 <- 31:0[R8]
000003da: mem := mem with [R31 + 8, el]:u32 <- 0
000003e1: R8 := pad:64[mem[R31 + 0xC, el]:u32]
000003e9: mem := mem with [R31 + 4, el]:u32 <- 31:0[R8]
000003ef: #6 := 31:0[R8] - 1
000003f4: VF := extend:33[#6] <> extend:33[31:0[R8]] - 1
000003f9: CF := pad:33[#6] <> pad:33[31:0[R8]] + 0xFFFFFFFF
000003fd: ZF := #6 = 0
00000401: NF := 31:31[#6]
00000405: R8 := pad:64[#6]
00000411: when ZF <> 1 goto %0000040a
00000412: goto %0000040d

0000040d:
0000040e: R8 := 1
00000414: goto %00000410

0000040a:
0000040b: R8 := 0
00000413: goto %00000410

00000410:
0000041a: when 0:0[R8] goto %00000418
000008e6: goto %0000059f

0000059f:
000005a2: goto %000005a0

000005a0:
000005a8: R8 := pad:64[mem[R31 + 4, el]:u32]
000005ae: #18 := 31:0[R8] - 3
000005b3: VF := extend:33[#18] <> extend:33[31:0[R8]] - 3
000005b8: CF := pad:33[#18] <> pad:33[31:0[R8]] + 0xFFFFFFFD
000005bc: ZF := #18 = 0
000005c0: NF := 31:31[#18]
000005c4: R8 := pad:64[#18]
000005d0: when ZF goto %000005c9
000005d1: goto %000005cc

000005cc:
000005cd: R8 := 1
000005d3: goto %000005cf

000005c9:
000005ca: R8 := 0
000005d2: goto %000005cf

000005cf:
000005d8: when 0:0[R8] goto %0000058e
000008e7: goto %000005dc

0000058e:
00000591: R8 := 5
00000599: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000059d: goto %0000042b

000005dc:
000005df: goto %000005dd

000005dd:
000005e3: R8 := 3
000005eb: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
000005ef: goto %00000418

00000418:
00000420: R8 := 1
00000428: mem := mem with [R31 + 8, el]:u32 <- 31:0[R8]
0000042d: goto %0000042b

0000042b:
00000432: R31 := R31 + 0x10
00000437: call R30 with noreturn

000008e8: sub register_tm_clones(register_tm_clones_result)
000008fe: register_tm_clones_result :: out u32 = low:32[R0]

0000030f:
00000312: R0 := 0x11000
00000318: R0 := R0 + 0x30
0000031d: R1 := 0x11000
00000323: R1 := R1 + 0x30
0000032a: R1 := R1 + ~R0 + 1
00000331: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000338: R1 := R2 + (R1 ~>> 3)
0000033e: #3 := ~(R1 ~>> 1)
00000342: #4 := ~(R1 ~>> 1) + 1
00000347: VF := extend:65[#4] <> extend:65[#3] + 1
0000034c: CF := pad:65[#4] <> pad:65[#3] + 1
00000350: ZF := #4 = 0
00000354: NF := 63:63[#4]
0000035c: R1 :=

          >> 1 | R1 << 0x3F]
00000362: when ZF goto %00000360
000008e9: goto %0000062c

0000062c:
0000062f: R2 := 0x10000
00000636: R2 := mem[R2 + 0xFE0, el]:u64
0000063b: when R2 = 0 goto %00000360
000008ea: goto %0000063f

00000360:
00000368: call R30 with noreturn

0000063f:
00000643: R16 := R2
00000648: call R16 with noreturn
