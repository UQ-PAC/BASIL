00000858: program
0000083c: sub __cxa_finalize(__cxa_finalize_result)
00000859: __cxa_finalize_result :: out u32 = low:32[R0]

000005aa:
0000068b: R16 := 0x11000
00000692: R17 := mem[R16, el]:u64
00000698: R16 := R16
0000069d: call R17 with noreturn

0000083d: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000085a: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000344:
00000348: #5 := R31 - 0x20
0000034e: mem := mem with [#5, el]:u64 <- R29
00000354: mem := mem with [#5 + 8, el]:u64 <- R30
00000358: R31 := #5
0000035e: R29 := R31
00000366: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000036b: R19 := 0x11000
00000372: R0 := pad:64[mem[R19 + 0x30]]
00000379: when 31:0[R0] <> 0 goto %00000377
0000083e: goto %00000573

00000573:
00000576: R0 := 0x10000
0000057d: R0 := mem[R0 + 0xFC0, el]:u64
00000583: when R0 = 0 goto %00000581
0000083f: goto %0000059a

0000059a:
0000059d: R0 := 0x11000
000005a4: R0 := mem[R0 + 0x28, el]:u64
000005a9: R30 := 0x700
000005ac: call @__cxa_finalize with return %00000581

00000581:
00000589: R30 := 0x704
0000058b: call @deregister_tm_clones with return %0000058d

0000058d:
00000590: R0 := 1
00000598: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000840: goto %00000377

00000377:
00000381: R19 := mem[R31 + 0x10, el]:u64
00000388: R29 := mem[R31, el]:u64
0000038d: R30 := mem[R31 + 8, el]:u64
00000391: R31 := R31 + 0x20
00000396: call R30 with noreturn

00000841: sub __libc_csu_fini(__libc_csu_fini_result)
0000085b: __libc_csu_fini_result :: out u32 = low:32[R0]

000004f1:
000004f4: call R30 with noreturn

00000842: sub __libc_csu_init(__libc_csu_init_result)
0000085c: __libc_csu_init_result :: out u32 = low:32[R0]

000003fe:
00000402: #7 := R31 - 0x40
00000408: mem := mem with [#7, el]:u64 <- R29
0000040e: mem := mem with [#7 + 8, el]:u64 <- R30
00000412: R31 := #7
00000418: R29 := R31
0000041e: #8 := R31 + 0x10
00000424: mem := mem with [#8, el]:u64 <- R19
0000042a: mem := mem with [#8 + 8, el]:u64 <- R20
0000042f: R20 := 0x10000
00000435: R20 := R20 + 0xDC0
0000043b: #9 := R31 + 0x20
00000441: mem := mem with [#9, el]:u64 <- R21
00000447: mem := mem with [#9 + 8, el]:u64 <- R22
0000044c: R21 := 0x10000
00000452: R21 := R21 + 0xDB8
00000459: R20 := R20 + ~R21 + 1
0000045f: R22 := pad:64[31:0[R0]]
00000465: #10 := R31 + 0x30
0000046b: mem := mem with [#10, el]:u64 <- R23
00000471: mem := mem with [#10 + 8, el]:u64 <- R24
00000477: R23 := R1
0000047d: R24 := R2
00000482: R30 := 0x798
00000485: call @_init with return %00000487

00000487:
0000048b: #11 := ~(R20 ~>> 3)
0000048f: #12 := ~(R20 ~>> 3) + 1
00000494: VF := extend:65[#12] <> extend:65[#11] + 1
00000499: CF := pad:65[#12] <> pad:65[#11] + 1
0000049d: ZF := #12 = 0
000004a1: NF := 63:63[#12]
000004a7: when ZF goto %000004a5
00000843: goto %000004f6

000004f6:
000004fc: R20 :=
          63:61[63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20]].60:0[R20
          >> 3 | R20 << 0x3D]
00000501: R19 := 0
00000844: goto %00000503

00000503:
00000509: R3 := mem[R21 + (60:0[R19].0), el]:u64
0000050f: R2 := R24
00000515: R19 := R19 + 1
0000051b: R1 := R23
00000521: R0 := pad:64[31:0[R22]]
00000526: R30 := 0x7C0
00000529: call R3 with return %0000052b

0000052b:
0000052f: #16 := ~R19
00000534: #17 := R20 + ~R19 + 1
0000053a: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
00000540: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
00000544: ZF := #17 = 0
00000548: NF := 63:63[#17]
0000054d: when ZF <> 1 goto %00000503
00000845: goto %000004a5

000004a5:
000004ae: #13 := R31 + 0x10
000004b3: R19 := mem[#13, el]:u64
000004b8: R20 := mem[#13 + 8, el]:u64
000004be: #14 := R31 + 0x20
000004c3: R21 := mem[#14, el]:u64
000004c8: R22 := mem[#14 + 8, el]:u64
000004ce: #15 := R31 + 0x30
000004d3: R23 := mem[#15, el]:u64
000004d8: R24 := mem[#15 + 8, el]:u64
000004df: R29 := mem[R31, el]:u64
000004e4: R30 := mem[R31 + 8, el]:u64
000004e8: R31 := R31 + 0x40
000004ed: call R30 with noreturn

00000846: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000085d: __libc_start_main_main :: in u64 = R0
0000085e: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000085f: __libc_start_main_arg3 :: in out u64 = R2
00000860: __libc_start_main_auxv :: in out u64 = R3
00000861: __libc_start_main_result :: out u32 = low:32[R0]

00000282:
000006a1: R16 := 0x11000
000006a8: R17 := mem[R16 + 8, el]:u64
000006ae: R16 := R16 + 8
000006b3: call R17 with noreturn

00000847: sub _fini(_fini_result)
00000862: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

00000848: sub _init(_init_result)
00000863: _init_result :: out u32 = low:32[R0]

00000483:
00000775: #19 := R31 - 0x10
0000077b: mem := mem with [#19, el]:u64 <- R29
00000781: mem := mem with [#19 + 8, el]:u64 <- R30
00000785: R31 := #19
0000078b: R29 := R31
00000790: R30 := 0x5A4
00000792: call @call_weak_fn with return %00000794

00000794:
00000799: R29 := mem[R31, el]:u64
0000079e: R30 := mem[R31 + 8, el]:u64
000007a2: R31 := R31 + 0x10
000007a7: call R30 with noreturn

00000849: sub _start(_start_result)
00000864: _start_result :: out u32 = low:32[R0]

00000237:
0000023a: R29 := 0
0000023f: R30 := 0
00000245: R5 := R0
0000024c: R1 := mem[R31, el]:u64
00000252: R2 := R31 + 8
00000258: R6 := R31
0000025d: R0 := 0x10000
00000264: R0 := mem[R0 + 0xFD8, el]:u64
00000269: R3 := 0x10000
00000270: R3 := mem[R3 + 0xFD0, el]:u64
00000275: R4 := 0x10000
0000027c: R4 := mem[R4 + 0xFB0, el]:u64
00000281: R30 := 0x644
00000284: call @__libc_start_main with return %00000286

00000286:
00000289: R30 := 0x648
0000028c: call @abort with return %0000084a

0000084a:
0000084b: call @call_weak_fn with noreturn

0000084c: sub abort()


0000028a:
000006cd: R16 := 0x11000
000006d4: R17 := mem[R16 + 0x18, el]:u64
000006da: R16 := R16 + 0x18
000006df: call R17 with noreturn

0000084d: sub call_weak_fn(call_weak_fn_result)
00000865: call_weak_fn_result :: out u32 = low:32[R0]

0000028e:
00000291: R0 := 0x10000
00000298: R0 := mem[R0 + 0xFC8, el]:u64
0000029e: when R0 = 0 goto %0000029c
0000084e: goto %000005ea

0000029c:
000002a4: call R30 with noreturn

000005ea:
000005ed: goto @__gmon_start__

000005eb:
000006b7: R16 := 0x11000
000006be: R17 := mem[R16 + 0x10, el]:u64
000006c4: R16 := R16 + 0x10
000006c9: call R17 with noreturn

0000084f: sub deregister_tm_clones(deregister_tm_clones_result)
00000866: deregister_tm_clones_result :: out u32 = low:32[R0]

000002a8:
000002ab: R0 := 0x11000
000002b1: R0 := R0 + 0x30
000002b6: R1 := 0x11000
000002bc: R1 := R1 + 0x30
000002c2: #1 := ~R0
000002c7: #2 := R1 + ~R0 + 1
000002cd: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002d3: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002d7: ZF := #2 = 0
000002db: NF := 63:63[#2]
000002e1: when ZF goto %000002df
00000850: goto %000005cc

000005cc:
000005cf: R1 := 0x10000
000005d6: R1 := mem[R1 + 0xFB8, el]:u64
000005db: when R1 = 0 goto %000002df
00000851: goto %000005df

000002df:
000002e7: call R30 with noreturn

000005df:
000005e3: R16 := R1
000005e8: call R16 with noreturn

00000852: sub frame_dummy(frame_dummy_result)
00000867: frame_dummy_result :: out u32 = low:32[R0]

00000398:
0000039a: call @register_tm_clones with noreturn

00000853: sub main(main_argc, main_argv, main_result)
00000868: main_argc :: in u32 = low:32[R0]
00000869: main_argv :: in out u64 = R1
0000086a: main_result :: out u32 = low:32[R0]

0000039c:
000003a0: R31 := R31 - 0x10
000003a7: mem := mem with [R31 + 0xC, el]:u32 <- 0
000003ac: goto %000003aa

000003aa:
000003b0: R8 := 0x11000
000003b7: R8 := pad:64[mem[R8 + 0x34, el]:u32]
000003bd: #6 := 31:0[R8] - 0xA
000003c2: VF := extend:33[#6] <> extend:33[31:0[R8]] - 0xA
000003c7: CF := pad:33[#6] <> pad:33[31:0[R8]] + 0xFFFFFFF6
000003cb: ZF := #6 = 0
000003cf: NF := 31:31[#6]
000003d3: R8 := pad:64[#6]
000003e0: when NF <> VF goto %000003d9
000003e1: goto %000003dc

000003dc:
000003dd: R8 := 1
000003e3: goto %000003df

000003d9:
000003da: R8 := 0
000003e2: goto %000003df

000003df:
000003e9: when 0:0[R8] goto %000003e7
00000854: goto %00000551

000003e7:
000003f1: R0 := pad:64[mem[R31 + 0xC, el]:u32]
000003f7: R31 := R31 + 0x10
000003fc: call R30 with noreturn

00000551:
00000554: goto %00000552

00000552:
00000558: R9 := 0x11000
0000055f: R8 := pad:64[mem[R9 + 0x34, el]:u32]
00000565: R8 := pad:64[31:0[R8] + 1]
0000056d: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
00000571: goto %000003aa

00000855: sub register_tm_clones(register_tm_clones_result)
0000086b: register_tm_clones_result :: out u32 = low:32[R0]

000002e9:
000002ec: R0 := 0x11000
000002f2: R0 := R0 + 0x30
000002f7: R1 := 0x11000
000002fd: R1 := R1 + 0x30
00000304: R1 := R1 + ~R0 + 1
0000030b: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000312: R1 := R2 + (R1 ~>> 3)
00000318: #3 := ~(R1 ~>> 1)
0000031c: #4 := ~(R1 ~>> 1) + 1
00000321: VF := extend:65[#4] <> extend:65[#3] + 1
00000326: CF := pad:65[#4] <> pad:65[#3] + 1
0000032a: ZF := #4 = 0
0000032e: NF := 63:63[#4]
00000336: R1 :=

          >> 1 | R1 << 0x3F]
0000033c: when ZF goto %0000033a
00000856: goto %000005ae

000005ae:
000005b1: R2 := 0x10000
000005b8: R2 := mem[R2 + 0xFE0, el]:u64
000005bd: when R2 = 0 goto %0000033a
00000857: goto %000005c1

0000033a:
00000342: call R30 with noreturn

000005c1:
000005c5: R16 := R2
000005ca: call R16 with noreturn
