00000870: program
00000855: sub __cxa_finalize(__cxa_finalize_result)
00000871: __cxa_finalize_result :: out u32 = low:32[R0]

000005bb:
0000069c: R16 := 0x10000
000006a3: R17 := mem[R16 + 0xFA0, el]:u64
000006a9: R16 := R16 + 0xFA0
000006ae: call R17 with noreturn

00000856: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000872: __do_global_dtors_aux_result :: out u32 = low:32[R0]

00000354:
00000358: #5 := R31 - 0x20
0000035e: mem := mem with [#5, el]:u64 <- R29
00000364: mem := mem with [#5 + 8, el]:u64 <- R30
00000368: R31 := #5
0000036e: R29 := R31
00000376: mem := mem with [R31 + 0x10, el]:u64 <- R19
0000037b: R19 := 0x11000
00000382: R0 := pad:64[mem[R19 + 0x10]]
00000389: when 31:0[R0] <> 0 goto %00000387
00000857: goto %00000584

00000584:
00000587: R0 := 0x10000
0000058e: R0 := mem[R0 + 0xFD8, el]:u64
00000594: when R0 = 0 goto %00000592
00000858: goto %000005ab

000005ab:
000005ae: R0 := 0x11000
000005b5: R0 := mem[R0 + 8, el]:u64
000005ba: R30 := 0x700
000005bd: call @__cxa_finalize with return %00000592

00000592:
0000059a: R30 := 0x704
0000059c: call @deregister_tm_clones with return %0000059e

0000059e:
000005a1: R0 := 1
000005a9: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000859: goto %00000387

00000387:
00000391: R19 := mem[R31 + 0x10, el]:u64
00000398: R29 := mem[R31, el]:u64
0000039d: R30 := mem[R31 + 8, el]:u64
000003a1: R31 := R31 + 0x20
000003a6: call R30 with noreturn

0000085a: sub __libc_csu_fini(__libc_csu_fini_result)
00000873: __libc_csu_fini_result :: out u32 = low:32[R0]

00000524:
00000527: call R30 with noreturn

0000085b: sub __libc_csu_init(__libc_csu_init_result)
00000874: __libc_csu_init_result :: out u32 = low:32[R0]

00000431:
00000435: #6 := R31 - 0x40
0000043b: mem := mem with [#6, el]:u64 <- R29
00000441: mem := mem with [#6 + 8, el]:u64 <- R30
00000445: R31 := #6
0000044b: R29 := R31
00000451: #7 := R31 + 0x10
00000457: mem := mem with [#7, el]:u64 <- R19
0000045d: mem := mem with [#7 + 8, el]:u64 <- R20
00000462: R20 := 0x10000
00000468: R20 := R20 + 0xD90
0000046e: #8 := R31 + 0x20
00000474: mem := mem with [#8, el]:u64 <- R21
0000047a: mem := mem with [#8 + 8, el]:u64 <- R22
0000047f: R21 := 0x10000
00000485: R21 := R21 + 0xD88
0000048c: R20 := R20 + ~R21 + 1
00000492: R22 := pad:64[31:0[R0]]
00000498: #9 := R31 + 0x30
0000049e: mem := mem with [#9, el]:u64 <- R23
000004a4: mem := mem with [#9 + 8, el]:u64 <- R24
000004aa: R23 := R1
000004b0: R24 := R2
000004b5: R30 := 0x7A8
000004b8: call @_init with return %000004ba

000004ba:
000004be: #10 := ~(R20 ~>> 3)
000004c2: #11 := ~(R20 ~>> 3) + 1
000004c7: VF := extend:65[#11] <> extend:65[#10] + 1
000004cc: CF := pad:65[#11] <> pad:65[#10] + 1
000004d0: ZF := #11 = 0
000004d4: NF := 63:63[#11]
000004da: when ZF goto %000004d8
0000085c: goto %00000529

00000529:
0000052f: R20 :=

          >> 3 | R20 << 0x3D]
00000534: R19 := 0
0000085d: goto %00000536

00000536:
0000053c: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000542: R2 := R24
00000548: R19 := R19 + 1
0000054e: R1 := R23
00000554: R0 := pad:64[31:0[R22]]
00000559: R30 := 0x7D0
0000055c: call R3 with return %0000055e

0000055e:
00000562: #15 := ~R19
00000567: #16 := R20 + ~R19 + 1
0000056d: VF := extend:65[#16] <> extend:65[R20] + extend:65[#15] + 1
00000573: CF := pad:65[#16] <> pad:65[R20] + pad:65[#15] + 1
00000577: ZF := #16 = 0
0000057b: NF := 63:63[#16]
00000580: when ZF <> 1 goto %00000536
0000085e: goto %000004d8

000004d8:
000004e1: #12 := R31 + 0x10
000004e6: R19 := mem[#12, el]:u64
000004eb: R20 := mem[#12 + 8, el]:u64
000004f1: #13 := R31 + 0x20
000004f6: R21 := mem[#13, el]:u64
000004fb: R22 := mem[#13 + 8, el]:u64
00000501: #14 := R31 + 0x30
00000506: R23 := mem[#14, el]:u64
0000050b: R24 := mem[#14 + 8, el]:u64
00000512: R29 := mem[R31, el]:u64
00000517: R30 := mem[R31 + 8, el]:u64
0000051b: R31 := R31 + 0x40
00000520: call R30 with noreturn

0000085f: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000875: __libc_start_main_main :: in u64 = R0
00000876: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000877: __libc_start_main_arg3 :: in out u64 = R2
00000878: __libc_start_main_auxv :: in out u64 = R3
00000879: __libc_start_main_result :: out u32 = low:32[R0]

00000292:
000006b2: R16 := 0x10000
000006b9: R17 := mem[R16 + 0xFA8, el]:u64
000006bf: R16 := R16 + 0xFA8
000006c4: call R17 with noreturn

00000860: sub _fini(_fini_result)
0000087a: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

00000861: sub _init(_init_result)
0000087b: _init_result :: out u32 = low:32[R0]

000004b6:
0000078a: #18 := R31 - 0x10
00000790: mem := mem with [#18, el]:u64 <- R29
00000796: mem := mem with [#18 + 8, el]:u64 <- R30
0000079a: R31 := #18
000007a0: R29 := R31
000007a5: R30 := 0x5A4
000007a7: call @call_weak_fn with return %000007a9

000007a9:
000007ae: R29 := mem[R31, el]:u64
000007b3: R30 := mem[R31 + 8, el]:u64
000007b7: R31 := R31 + 0x10
000007bc: call R30 with noreturn

00000862: sub _start(_start_result)
0000087c: _start_result :: out u32 = low:32[R0]

00000247:
0000024a: R29 := 0
0000024f: R30 := 0
00000255: R5 := R0
0000025c: R1 := mem[R31, el]:u64
00000262: R2 := R31 + 8
00000268: R6 := R31
0000026d: R0 := 0x10000
00000274: R0 := mem[R0 + 0xFF0, el]:u64
00000279: R3 := 0x10000
00000280: R3 := mem[R3 + 0xFE8, el]:u64
00000285: R4 := 0x10000
0000028c: R4 := mem[R4 + 0xFC8, el]:u64
00000291: R30 := 0x644
00000294: call @__libc_start_main with return %00000296

00000296:
00000299: R30 := 0x648
0000029c: call @abort with return %00000863

00000863:
00000864: call @call_weak_fn with noreturn

00000865: sub abort()


0000029a:
000006de: R16 := 0x10000
000006e5: R17 := mem[R16 + 0xFB8, el]:u64
000006eb: R16 := R16 + 0xFB8
000006f0: call R17 with noreturn

00000866: sub call_weak_fn(call_weak_fn_result)
0000087d: call_weak_fn_result :: out u32 = low:32[R0]

0000029e:
000002a1: R0 := 0x10000
000002a8: R0 := mem[R0 + 0xFE0, el]:u64
000002ae: when R0 = 0 goto %000002ac
00000867: goto %000005fb

000002ac:
000002b4: call R30 with noreturn

000005fb:
000005fe: goto @__gmon_start__

000005fc:
000006c8: R16 := 0x10000
000006cf: R17 := mem[R16 + 0xFB0, el]:u64
000006d5: R16 := R16 + 0xFB0
000006da: call R17 with noreturn

00000868: sub deregister_tm_clones(deregister_tm_clones_result)
0000087e: deregister_tm_clones_result :: out u32 = low:32[R0]

000002b8:
000002bb: R0 := 0x11000
000002c1: R0 := R0 + 0x10
000002c6: R1 := 0x11000
000002cc: R1 := R1 + 0x10
000002d2: #1 := ~R0
000002d7: #2 := R1 + ~R0 + 1
000002dd: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002e3: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002e7: ZF := #2 = 0
000002eb: NF := 63:63[#2]
000002f1: when ZF goto %000002ef
00000869: goto %000005dd

000005dd:
000005e0: R1 := 0x10000
000005e7: R1 := mem[R1 + 0xFD0, el]:u64
000005ec: when R1 = 0 goto %000002ef
0000086a: goto %000005f0

000002ef:
000002f7: call R30 with noreturn

000005f0:
000005f4: R16 := R1
000005f9: call R16 with noreturn

0000086b: sub frame_dummy(frame_dummy_result)
0000087f: frame_dummy_result :: out u32 = low:32[R0]

000003a8:
000003aa: call @register_tm_clones with noreturn

0000086c: sub main(main_argc, main_argv, main_result)
00000880: main_argc :: in u32 = low:32[R0]
00000881: main_argv :: in out u64 = R1
00000882: main_result :: out u32 = low:32[R0]

000003ac:
000003b0: R31 := R31 - 0x10
000003b5: R0 := 0x11000
000003bb: R0 := R0 + 0x20
000003c2: R0 := mem[R0, el]:u64
000003ca: mem := mem with [R31 + 8, el]:u64 <- R0
000003d1: mem := mem with [R31 + 8, el]:u64 <- 0
000003d6: R0 := 0x11000
000003dc: R0 := R0 + 0x18
000003e3: R1 := mem[R31 + 8, el]:u64
000003eb: mem := mem with [R0, el]:u64 <- R1
000003f0: R0 := 0x11000
000003f6: R0 := R0 + 0x20
000003fd: R0 := mem[R0, el]:u64
00000405: mem := mem with [R31 + 8, el]:u64 <- R0
0000040a: R0 := 0x11000
00000410: R0 := R0 + 0x18
00000417: R1 := mem[R31 + 8, el]:u64
0000041f: mem := mem with [R0, el]:u64 <- R1
00000424: R0 := 0
0000042a: R31 := R31 + 0x10
0000042f: call R30 with noreturn

0000086d: sub register_tm_clones(register_tm_clones_result)
00000883: register_tm_clones_result :: out u32 = low:32[R0]

000002f9:
000002fc: R0 := 0x11000
00000302: R0 := R0 + 0x10
00000307: R1 := 0x11000
0000030d: R1 := R1 + 0x10
00000314: R1 := R1 + ~R0 + 1
0000031b: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
00000322: R1 := R2 + (R1 ~>> 3)
00000328: #3 := ~(R1 ~>> 1)
0000032c: #4 := ~(R1 ~>> 1) + 1
00000331: VF := extend:65[#4] <> extend:65[#3] + 1
00000336: CF := pad:65[#4] <> pad:65[#3] + 1
0000033a: ZF := #4 = 0
0000033e: NF := 63:63[#4]
00000346: R1 :=

          >> 1 | R1 << 0x3F]
0000034c: when ZF goto %0000034a
0000086e: goto %000005bf

000005bf:
000005c2: R2 := 0x10000
000005c9: R2 := mem[R2 + 0xFF8, el]:u64
000005ce: when R2 = 0 goto %0000034a
0000086f: goto %000005d2

0000034a:
00000352: call R30 with noreturn

000005d2:
000005d6: R16 := R2
000005db: call R16 with noreturn
