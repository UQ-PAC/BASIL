00000993: program
00000951: sub __cxa_finalize(__cxa_finalize_result)
00000994: __cxa_finalize_result :: out u32 = low:32[R0]

0000069b:
0000077c: R16 := 0x10000
00000783: R17 := mem[R16 + 0xF90, el]:u64
00000789: R16 := R16 + 0xF90
0000078e: call R17 with noreturn

00000952: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000995: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000038e:
00000392: #5 := R31 - 0x20
00000398: mem := mem with [#5, el]:u64 <- R29
0000039e: mem := mem with [#5 + 8, el]:u64 <- R30
000003a2: R31 := #5
000003a8: R29 := R31
000003b0: mem := mem with [R31 + 0x10, el]:u64 <- R19
000003b5: R19 := 0x11000
000003bc: R0 := pad:64[mem[R19 + 0x10]]
000003c3: when 31:0[R0] <> 0 goto %000003c1
00000983: goto %00000664

00000664:
00000667: R0 := 0x10000
0000066e: R0 := mem[R0 + 0xFC8, el]:u64
00000674: when R0 = 0 goto %00000672
00000984: goto %0000068b

0000068b:
0000068e: R0 := 0x11000
00000695: R0 := mem[R0 + 8, el]:u64
0000069a: R30 := 0x7C0
0000069d: call @__cxa_finalize with return %00000672

00000672:
0000067a: R30 := 0x7C4
0000067c: call @deregister_tm_clones with return %0000067e

0000067e:
00000681: R0 := 1
00000689: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000985: goto %000003c1

000003c1:
000003cb: R19 := mem[R31 + 0x10, el]:u64
000003d2: R29 := mem[R31, el]:u64
000003d7: R30 := mem[R31 + 8, el]:u64
000003db: R31 := R31 + 0x20
000003e0: call R30 with noreturn

00000956: sub __libc_csu_fini(__libc_csu_fini_result)
00000996: __libc_csu_fini_result :: out u32 = low:32[R0]

000005f0:
000005f3: call R30 with noreturn

00000957: sub __libc_csu_init(__libc_csu_init_result)
00000997: __libc_csu_init_result :: out u32 = low:32[R0]

000004fd:
00000501: #10 := R31 - 0x40
00000507: mem := mem with [#10, el]:u64 <- R29
0000050d: mem := mem with [#10 + 8, el]:u64 <- R30
00000511: R31 := #10
00000517: R29 := R31
0000051d: #11 := R31 + 0x10
00000523: mem := mem with [#11, el]:u64 <- R19
00000529: mem := mem with [#11 + 8, el]:u64 <- R20
0000052e: R20 := 0x10000
00000534: R20 := R20 + 0xD70
0000053a: #12 := R31 + 0x20
00000540: mem := mem with [#12, el]:u64 <- R21
00000546: mem := mem with [#12 + 8, el]:u64 <- R22
0000054b: R21 := 0x10000
00000551: R21 := R21 + 0xD68
00000558: R20 := R20 + ~R21 + 1
0000055e: R22 := pad:64[31:0[R0]]
00000564: #13 := R31 + 0x30
0000056a: mem := mem with [#13, el]:u64 <- R23
00000570: mem := mem with [#13 + 8, el]:u64 <- R24
00000576: R23 := R1
0000057c: R24 := R2
00000581: R30 := 0x8A0
00000584: call @_init with return %00000586

00000586:
0000058a: #14 := ~(R20 ~>> 3)
0000058e: #15 := ~(R20 ~>> 3) + 1
00000593: VF := extend:65[#15] <> extend:65[#14] + 1
00000598: CF := pad:65[#15] <> pad:65[#14] + 1
0000059c: ZF := #15 = 0
000005a0: NF := 63:63[#15]
000005a6: when ZF goto %000005a4
00000986: goto %000005f5

000005f5:
000005fb: R20 :=

          >> 3 | R20 << 0x3D]
00000600: R19 := 0
00000987: goto %00000602

00000602:
00000608: R3 := mem[R21 + (60:0[R19].0), el]:u64
0000060e: R2 := R24
00000614: R19 := R19 + 1
0000061a: R1 := R23
00000620: R0 := pad:64[31:0[R22]]
00000625: R30 := 0x8C8
00000628: call R3 with return %0000062a

0000062a:
0000062e: #19 := ~R19
00000633: #20 := R20 + ~R19 + 1
00000639: VF := extend:65[#20] <> extend:65[R20] + extend:65[#19] + 1
0000063f: CF := pad:65[#20] <> pad:65[R20] + pad:65[#19] + 1
00000643: ZF := #20 = 0
00000647: NF := 63:63[#20]
0000064c: when ZF <> 1 goto %00000602
00000988: goto %000005a4

000005a4:
000005ad: #16 := R31 + 0x10
000005b2: R19 := mem[#16, el]:u64
000005b7: R20 := mem[#16 + 8, el]:u64
000005bd: #17 := R31 + 0x20
000005c2: R21 := mem[#17, el]:u64
000005c7: R22 := mem[#17 + 8, el]:u64
000005cd: #18 := R31 + 0x30
000005d2: R23 := mem[#18, el]:u64
000005d7: R24 := mem[#18 + 8, el]:u64
000005de: R29 := mem[R31, el]:u64
000005e3: R30 := mem[R31 + 8, el]:u64
000005e7: R31 := R31 + 0x40
000005ec: call R30 with noreturn

0000095b: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000998: __libc_start_main_main :: in u64 = R0
00000999: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000099a: __libc_start_main_arg3 :: in out u64 = R2
0000099b: __libc_start_main_auxv :: in out u64 = R3
0000099c: __libc_start_main_result :: out u32 = low:32[R0]

000002cc:
00000792: R16 := 0x10000
00000799: R17 := mem[R16 + 0xF98, el]:u64
0000079f: R16 := R16 + 0xF98
000007a4: call R17 with noreturn

0000095c: sub _fini(_fini_result)
0000099d: _fini_result :: out u32 = low:32[R0]

00000032:
00000036: #0 := R31 - 0x10
0000003c: mem := mem with [#0, el]:u64 <- R29
00000042: mem := mem with [#0 + 8, el]:u64 <- R30
00000046: R31 := #0
0000004c: R29 := R31
00000053: R29 := mem[R31, el]:u64
00000058: R30 := mem[R31 + 8, el]:u64
0000005c: R31 := R31 + 0x10
00000061: call R30 with noreturn

0000095d: sub _init(_init_result)
0000099e: _init_result :: out u32 = low:32[R0]

00000582:
00000878: #22 := R31 - 0x10
0000087e: mem := mem with [#22, el]:u64 <- R29
00000884: mem := mem with [#22 + 8, el]:u64 <- R30
00000888: R31 := #22
0000088e: R29 := R31
00000893: R30 := 0x664
00000895: call @call_weak_fn with return %00000897

00000897:
0000089c: R29 := mem[R31, el]:u64
000008a1: R30 := mem[R31 + 8, el]:u64
000008a5: R31 := R31 + 0x10
000008aa: call R30 with noreturn

0000095e: sub _start(_start_result)
0000099f: _start_result :: out u32 = low:32[R0]

00000281:
00000284: R29 := 0
00000289: R30 := 0
0000028f: R5 := R0
00000296: R1 := mem[R31, el]:u64
0000029c: R2 := R31 + 8
000002a2: R6 := R31
000002a7: R0 := 0x10000
000002ae: R0 := mem[R0 + 0xFF0, el]:u64
000002b3: R3 := 0x10000
000002ba: R3 := mem[R3 + 0xFE8, el]:u64
000002bf: R4 := 0x10000
000002c6: R4 := mem[R4 + 0xFB8, el]:u64
000002cb: R30 := 0x704
000002ce: call @__libc_start_main with return %000002d0

000002d0:
000002d3: R30 := 0x708
000002d6: call @abort with return %00000989

00000989:
0000098a: call @call_weak_fn with noreturn

00000961: sub abort()


000002d4:
000007be: R16 := 0x10000
000007c5: R17 := mem[R16 + 0xFA8, el]:u64
000007cb: R16 := R16 + 0xFA8
000007d0: call R17 with noreturn

00000962: sub call_weak_fn(call_weak_fn_result)
000009a0: call_weak_fn_result :: out u32 = low:32[R0]

000002d8:
000002db: R0 := 0x10000
000002e2: R0 := mem[R0 + 0xFD8, el]:u64
000002e8: when R0 = 0 goto %000002e6
0000098b: goto %000006db

000002e6:
000002ee: call R30 with noreturn

000006db:
000006de: goto @__gmon_start__

000006dc:
000007a8: R16 := 0x10000
000007af: R17 := mem[R16 + 0xFA0, el]:u64
000007b5: R16 := R16 + 0xFA0
000007ba: call R17 with noreturn

00000964: sub deregister_tm_clones(deregister_tm_clones_result)
000009a1: deregister_tm_clones_result :: out u32 = low:32[R0]

000002f2:
000002f5: R0 := 0x11000
000002fb: R0 := R0 + 0x10
00000300: R1 := 0x11000
00000306: R1 := R1 + 0x10
0000030c: #1 := ~R0
00000311: #2 := R1 + ~R0 + 1
00000317: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
0000031d: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
00000321: ZF := #2 = 0
00000325: NF := 63:63[#2]
0000032b: when ZF goto %00000329
0000098c: goto %000006bd

000006bd:
000006c0: R1 := 0x10000
000006c7: R1 := mem[R1 + 0xFC0, el]:u64
000006cc: when R1 = 0 goto %00000329
0000098d: goto %000006d0

00000329:
00000331: call R30 with noreturn

000006d0:
000006d4: R16 := R1
000006d9: call R16 with noreturn

00000967: sub frame_dummy(frame_dummy_result)
000009a2: frame_dummy_result :: out u32 = low:32[R0]

000003e2:
000003e4: call @register_tm_clones with noreturn

00000968: sub main(main_argc, main_argv, main_result)
000009a3: main_argc :: in u32 = low:32[R0]
000009a4: main_argv :: in out u64 = R1
000009a5: main_result :: out u32 = low:32[R0]

000003e6:
000003ea: #6 := R31 - 0x40
000003f0: mem := mem with [#6, el]:u64 <- R29
000003f6: mem := mem with [#6 + 8, el]:u64 <- R30
000003fa: R31 := #6
00000400: R29 := R31
00000405: R0 := 0x10000
0000040c: R0 := mem[R0 + 0xFE0, el]:u64
00000413: R1 := mem[R0, el]:u64
0000041b: mem := mem with [R31 + 0x38, el]:u64 <- R1
00000420: R1 := 0
00000427: mem := mem with [R31 + 0x1C, el]:u32 <- 0
0000042c: goto %0000042a

0000042a:
00000432: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000438: #7 := 31:0[R0] - 4
0000043d: VF := extend:33[#7] <> extend:33[31:0[R0]] - 4
00000442: CF := pad:33[#7] <> pad:33[31:0[R0]] + 0xFFFFFFFC
00000446: ZF := #7 = 0
0000044a: NF := 31:31[#7]
00000452: when ~(NF = VF & ~ZF) goto %00000450
0000098e: goto %0000048e

0000048e:
00000491: R0 := 0
00000497: R1 := pad:64[31:0[R0]]
0000049c: R0 := 0x10000
000004a3: R0 := mem[R0 + 0xFE0, el]:u64
000004aa: R2 := mem[R31 + 0x38, el]:u64
000004b1: R3 := mem[R0, el]:u64
000004b7: #8 := ~R3
000004bc: #9 := R2 + ~R3 + 1
000004c2: VF := extend:65[#9] <> extend:65[R2] + extend:65[#8] + 1
000004c8: CF := pad:65[#9] <> pad:65[R2] + pad:65[#8] + 1
000004cc: ZF := #9 = 0
000004d0: NF := 63:63[#9]
000004d4: R2 := #9
000004d9: R3 := 0
000004df: when ZF goto %000004dd
0000098f: goto %00000650

00000650:
00000653: R0 := 0x10000
0000065a: R0 := mem[R0 + 0xFD0, el]:u64
0000065f: R30 := 0x85C
00000662: call R0 with return %000004dd

000004dd:
000004e6: R0 := pad:64[31:0[R1]]
000004ed: R29 := mem[R31, el]:u64
000004f2: R30 := mem[R31 + 8, el]:u64
000004f6: R31 := R31 + 0x40
000004fb: call R30 with noreturn

00000450:
0000045a: R0 := extend:64[mem[R31 + 0x1C, el]:u32]
00000461: R0 := 63:2[R0 >> 0x3E | R0 << 2].0
00000467: R1 := R31 + 0x20
0000046e: R2 := pad:64[mem[R31 + 0x1C, el]:u32]
00000477: mem := mem with [R1 + R0, el]:u32 <- 31:0[R2]
0000047e: R0 := pad:64[mem[R31 + 0x1C, el]:u32]
00000484: R0 := pad:64[31:0[R0] + 1]
0000048c: mem := mem with [R31 + 0x1C, el]:u32 <- 31:0[R0]
00000990: goto %0000042a

0000096c: sub register_tm_clones(register_tm_clones_result)
000009a6: register_tm_clones_result :: out u32 = low:32[R0]

00000333:
00000336: R0 := 0x11000
0000033c: R0 := R0 + 0x10
00000341: R1 := 0x11000
00000347: R1 := R1 + 0x10
0000034e: R1 := R1 + ~R0 + 1
00000355: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
0000035c: R1 := R2 + (R1 ~>> 3)
00000362: #3 := ~(R1 ~>> 1)
00000366: #4 := ~(R1 ~>> 1) + 1
0000036b: VF := extend:65[#4] <> extend:65[#3] + 1
00000370: CF := pad:65[#4] <> pad:65[#3] + 1
00000374: ZF := #4 = 0
00000378: NF := 63:63[#4]
00000380: R1 :=

          >> 1 | R1 << 0x3F]
00000386: when ZF goto %00000384
00000991: goto %0000069f

0000069f:
000006a2: R2 := 0x10000
000006a9: R2 := mem[R2 + 0xFF8, el]:u64
000006ae: when R2 = 0 goto %00000384
00000992: goto %000006b2

00000384:
0000038c: call R30 with noreturn

000006b2:
000006b6: R16 := R2
000006bb: call R16 with noreturn
