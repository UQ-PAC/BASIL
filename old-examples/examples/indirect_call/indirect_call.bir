00000618: program
000005ff: sub .plt(\.plt_result)
00000619: \.plt_result :: out u32 = low:32[R0]

000004bc:
000004c0: #6 := R31 - 0x10
000004c6: mem := mem with [#6, el]:u64 <- R16
000004cc: mem := mem with [#6 + 8, el]:u64 <- R30
000004d0: R31 := #6
000004d5: R16 := 0x10000
000004dc: R17 := mem[R16 + 0xF98, el]:u64
000004e2: R16 := R16 + 0xF98
000004e7: call R17 with noreturn

00000600: sub __cxa_finalize(__cxa_finalize_result)
0000061a: __cxa_finalize_result :: out u32 = low:32[R0]

0000040f:
00000507: R16 := 0x10000
0000050e: R17 := mem[R16 + 0xFA8, el]:u64
00000514: R16 := R16 + 0xFA8
00000519: call R17 with noreturn

00000601: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000061b: __do_global_dtors_aux_result :: out u32 = low:32[R0]

000002b2:
000002b6: #3 := R31 - 0x20
000002bc: mem := mem with [#3, el]:u64 <- R29
000002c2: mem := mem with [#3 + 8, el]:u64 <- R30
000002c6: R31 := #3
000002cc: R29 := R31
000002d4: mem := mem with [R31 + 0x10, el]:u64 <- R19
000002d9: R19 := 0x11000
000002e0: R0 := pad:64[mem[R19 + 0x10]]
000002e7: when 31:0[R0] <> 0 goto %000002e5
00000602: goto %000003d8

000003d8:
000003db: R0 := 0x10000
000003e2: R0 := mem[R0 + 0xFD0, el]:u64
000003e8: when R0 = 0 goto %000003e6
00000603: goto %000003ff

000003ff:
00000402: R0 := 0x11000
00000409: R0 := mem[R0 + 8, el]:u64
0000040e: R30 := 0x770
00000411: call @__cxa_finalize with return %000003e6

000003e6:
000003ee: R30 := 0x774
000003f0: call @deregister_tm_clones with return %000003f2

000003f2:
000003f5: R0 := 1
000003fd: mem := mem with [R19 + 0x10] <- 7:0[R0]
00000604: goto %000002e5

000002e5:
000002ef: R19 := mem[R31 + 0x10, el]:u64
000002f6: R29 := mem[R31, el]:u64
000002fb: R30 := mem[R31 + 8, el]:u64
000002ff: R31 := R31 + 0x20
00000304: call R30 with noreturn

00000605: sub __gmon_start__(__gmon_start___result)
0000061c: __gmon_start___result :: out u32 = low:32[R0]

00000450:
0000051d: R16 := 0x10000
00000524: R17 := mem[R16 + 0xFB0, el]:u64
0000052a: R16 := R16 + 0xFB0
0000052f: call R17 with noreturn

00000606: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
0000061d: __libc_start_main_main :: in u64 = R0
0000061e: __libc_start_main_arg2 :: in u32 = low:32[R1]
0000061f: __libc_start_main_arg3 :: in out u64 = R2
00000620: __libc_start_main_auxv :: in out u64 = R3
00000621: __libc_start_main_result :: out u32 = low:32[R0]

0000020b:
000004f1: R16 := 0x10000
000004f8: R17 := mem[R16 + 0xFA0, el]:u64
000004fe: R16 := R16 + 0xFA0
00000503: call R17 with noreturn

00000607: sub _fini(_fini_result)
00000622: _fini_result :: out u32 = low:32[R0]

0000001f:
00000025: #0 := R31 - 0x10
0000002b: mem := mem with [#0, el]:u64 <- R29
00000031: mem := mem with [#0 + 8, el]:u64 <- R30
00000035: R31 := #0
0000003b: R29 := R31
00000042: R29 := mem[R31, el]:u64
00000047: R30 := mem[R31 + 8, el]:u64
0000004b: R31 := R31 + 0x10
00000050: call R30 with noreturn

00000608: sub _init(_init_result)
00000623: _init_result :: out u32 = low:32[R0]

00000561:
00000567: #7 := R31 - 0x10
0000056d: mem := mem with [#7, el]:u64 <- R29
00000573: mem := mem with [#7 + 8, el]:u64 <- R30
00000577: R31 := #7
0000057d: R29 := R31
00000582: R30 := 0x5E0
00000584: call @call_weak_fn with return %00000586

00000586:
0000058b: R29 := mem[R31, el]:u64
00000590: R30 := mem[R31 + 8, el]:u64
00000594: R31 := R31 + 0x10
00000599: call R30 with noreturn

00000609: sub _start(_start_result)
00000624: _start_result :: out u32 = low:32[R0]

000001cc:
000001d1: R29 := 0
000001d6: R30 := 0
000001dc: R5 := R0
000001e3: R1 := mem[R31, el]:u64
000001e9: R2 := R31 + 8
000001ef: R6 := R31
000001f4: R0 := 0x10000
000001fb: R0 := mem[R0 + 0xFF0, el]:u64
00000200: R3 := 0
00000205: R4 := 0
0000020a: R30 := 0x6B0
0000020d: call @__libc_start_main with return %0000020f

0000020f:
00000212: R30 := 0x6B4
00000215: call @abort with return %0000060a

0000060a:
0000060b: call @call_weak_fn with noreturn

0000060c: sub abort()


00000213:
00000533: R16 := 0x10000
0000053a: R17 := mem[R16 + 0xFB8, el]:u64
00000540: R16 := R16 + 0xFB8
00000545: call R17 with noreturn

0000060d: sub call_weak_fn(call_weak_fn_result)
00000625: call_weak_fn_result :: out u32 = low:32[R0]

00000217:
0000021a: R0 := 0x10000
00000221: R0 := mem[R0 + 0xFE0, el]:u64
00000227: when R0 = 0 goto %00000225
0000060e: goto %0000044f

00000225:
0000022d: call R30 with noreturn

0000044f:
00000452: call @__gmon_start__ with noreturn

0000060f: sub deregister_tm_clones(deregister_tm_clones_result)
00000626: deregister_tm_clones_result :: out u32 = low:32[R0]

00000233:
00000236: R0 := 0x11000
0000023c: R0 := R0 + 0x10
00000241: R1 := 0x11000
00000247: R1 := R1 + 0x10
0000024d: #1 := ~R0
00000252: #2 := R1 + ~R0
00000258: VF := extend:65[#2 + 1] <> extend:65[R1] + extend:65[#1] + 1
0000025e: CF := pad:65[#2 + 1] <> pad:65[R1] + pad:65[#1] + 1
00000262: ZF := #2 + 1 = 0
00000266: NF := 63:63[#2 + 1]
0000026c: when ZF goto %0000026a
00000610: goto %00000431

00000431:
00000434: R1 := 0x10000
0000043b: R1 := mem[R1 + 0xFC8, el]:u64
00000440: when R1 = 0 goto %0000026a
00000611: goto %00000444

0000026a:
00000272: call R30 with noreturn

00000444:
00000448: R16 := R1
0000044d: call R16 with noreturn

00000612: sub frame_dummy(frame_dummy_result)
00000627: frame_dummy_result :: out u32 = low:32[R0]

0000030a:
0000030c: call @register_tm_clones with noreturn

00000613: sub greet(greet_result)
00000628: greet_result :: out u32 = low:32[R0]

0000030e:
00000312: #4 := R31 - 0x10
00000318: mem := mem with [#4, el]:u64 <- R29
0000031e: mem := mem with [#4 + 8, el]:u64 <- R30
00000322: R31 := #4
00000328: R29 := R31
0000032d: R0 := 0
00000333: R0 := R0 + 0x818
00000338: R1 := 0x10000
0000033f: R1 := mem[R1 + 0xFE8, el]:u64
00000344: R30 := 0x7B0
00000347: call R1 with return %00000349

00000349:
00000350: R29 := mem[R31, el]:u64
00000355: R30 := mem[R31 + 8, el]:u64
00000359: R31 := R31 + 0x10
0000035e: call R30 with noreturn

00000614: sub main(main_argc, main_argv, main_result)
00000629: main_argc :: in u32 = low:32[R0]
0000062a: main_argv :: in out u64 = R1
0000062b: main_result :: out u32 = low:32[R0]

00000360:
00000364: #5 := R31 - 0x20
0000036a: mem := mem with [#5, el]:u64 <- R29
00000370: mem := mem with [#5 + 8, el]:u64 <- R30
00000374: R31 := #5
0000037a: R29 := R31
0000037f: R0 := 0x10000
00000386: R0 := mem[R0 + 0xFD8, el]:u64
0000038e: mem := mem with [R31 + 0x18, el]:u64 <- R0
00000393: R0 := 0
00000399: R0 := R0 + 0x828
0000039e: R1 := 0x10000
000003a5: R1 := mem[R1 + 0xFE8, el]:u64
000003aa: R30 := 0x7E4
000003ad: call R1 with return %000003af

000003af:
000003b4: R0 := mem[R31 + 0x18, el]:u64
000003b9: R30 := 0x7EC
000003bc: call R0 with return %000003be

000003be:
000003c1: R0 := 0
000003c8: R29 := mem[R31, el]:u64
000003cd: R30 := mem[R31 + 8, el]:u64
000003d1: R31 := R31 + 0x20
000003d6: call R30 with noreturn

00000615: sub register_tm_clones(register_tm_clones_result)
0000062c: register_tm_clones_result :: out u32 = low:32[R0]

00000274:
00000277: R0 := 0x11000
0000027d: R0 := R0 + 0x10
00000282: R1 := 0x11000
00000288: R1 := R1 + 0x10
0000028f: R1 := R1 + ~R0 + 1
00000295: R2 := 0.63:63[R1]
0000029c: R1 := R2 + (R1 ~>> 3)
000002a2: R1 := extend:64[63:1[R1]]
000002a8: when R1 = 0 goto %000002a6
00000616: goto %00000413

00000413:
00000416: R2 := 0x10000
0000041d: R2 := mem[R2 + 0xFF8, el]:u64
00000422: when R2 = 0 goto %000002a6
00000617: goto %00000426

000002a6:
000002ae: call R30 with noreturn

00000426:
0000042a: R16 := R2
0000042f: call R16 with noreturn
