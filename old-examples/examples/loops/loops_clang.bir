00000870: program
00000854: sub __cxa_finalize(__cxa_finalize_result)
00000871: __cxa_finalize_result :: out u32 = low:32[R0]

000005be:
0000069f: R16 := 0x11000
000006a6: R17 := mem[R16, el]:u64
000006ac: R16 := R16
000006b1: call R17 with noreturn

00000855: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000872: __do_global_dtors_aux_result :: out u32 = low:32[R0]

0000034c:
00000350: #5 := R31 - 0x20
00000356: mem := mem with [#5, el]:u64 <- R29
0000035c: mem := mem with [#5 + 8, el]:u64 <- R30
00000360: R31 := #5
00000366: R29 := R31
0000036e: mem := mem with [R31 + 0x10, el]:u64 <- R19
00000373: R19 := 0x11000
0000037a: R0 := pad:64[mem[R19 + 0x30]]
00000381: when 31:0[R0] <> 0 goto %0000037f
00000856: goto %00000587

00000587:
0000058a: R0 := 0x10000
00000591: R0 := mem[R0 + 0xFC0, el]:u64
00000597: when R0 = 0 goto %00000595
00000857: goto %000005ae

000005ae:
000005b1: R0 := 0x11000
000005b8: R0 := mem[R0 + 0x28, el]:u64
000005bd: R30 := 0x700
000005c0: call @__cxa_finalize with return %00000595

00000595:
0000059d: R30 := 0x704
0000059f: call @deregister_tm_clones with return %000005a1

000005a1:
000005a4: R0 := 1
000005ac: mem := mem with [R19 + 0x30] <- 7:0[R0]
00000858: goto %0000037f

0000037f:
00000389: R19 := mem[R31 + 0x10, el]:u64
00000390: R29 := mem[R31, el]:u64
00000395: R30 := mem[R31 + 8, el]:u64
00000399: R31 := R31 + 0x20
0000039e: call R30 with noreturn

00000859: sub __libc_csu_fini(__libc_csu_fini_result)
00000873: __libc_csu_fini_result :: out u32 = low:32[R0]

00000505:
00000508: call R30 with noreturn

0000085a: sub __libc_csu_init(__libc_csu_init_result)
00000874: __libc_csu_init_result :: out u32 = low:32[R0]

00000412:
00000416: #7 := R31 - 0x40
0000041c: mem := mem with [#7, el]:u64 <- R29
00000422: mem := mem with [#7 + 8, el]:u64 <- R30
00000426: R31 := #7
0000042c: R29 := R31
00000432: #8 := R31 + 0x10
00000438: mem := mem with [#8, el]:u64 <- R19
0000043e: mem := mem with [#8 + 8, el]:u64 <- R20
00000443: R20 := 0x10000
00000449: R20 := R20 + 0xDC0
0000044f: #9 := R31 + 0x20
00000455: mem := mem with [#9, el]:u64 <- R21
0000045b: mem := mem with [#9 + 8, el]:u64 <- R22
00000460: R21 := 0x10000
00000466: R21 := R21 + 0xDB8
0000046d: R20 := R20 + ~R21 + 1
00000473: R22 := pad:64[31:0[R0]]
00000479: #10 := R31 + 0x30
0000047f: mem := mem with [#10, el]:u64 <- R23
00000485: mem := mem with [#10 + 8, el]:u64 <- R24
0000048b: R23 := R1
00000491: R24 := R2
00000496: R30 := 0x7A0
00000499: call @_init with return %0000049b

0000049b:
0000049f: #11 := ~(R20 ~>> 3)
000004a3: #12 := ~(R20 ~>> 3) + 1
000004a8: VF := extend:65[#12] <> extend:65[#11] + 1
000004ad: CF := pad:65[#12] <> pad:65[#11] + 1
000004b1: ZF := #12 = 0
000004b5: NF := 63:63[#12]
000004bb: when ZF goto %000004b9
0000085b: goto %0000050a

0000050a:
00000510: R20 :=
          63:61[63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20].63:63[R20]].60:0[R20
          >> 3 | R20 << 0x3D]
00000515: R19 := 0
0000085c: goto %00000517

00000517:
0000051d: R3 := mem[R21 + (60:0[R19].0), el]:u64
00000523: R2 := R24
00000529: R19 := R19 + 1
0000052f: R1 := R23
00000535: R0 := pad:64[31:0[R22]]
0000053a: R30 := 0x7C8
0000053d: call R3 with return %0000053f

0000053f:
00000543: #16 := ~R19
00000548: #17 := R20 + ~R19 + 1
0000054e: VF := extend:65[#17] <> extend:65[R20] + extend:65[#16] + 1
00000554: CF := pad:65[#17] <> pad:65[R20] + pad:65[#16] + 1
00000558: ZF := #17 = 0
0000055c: NF := 63:63[#17]
00000561: when ZF <> 1 goto %00000517
0000085d: goto %000004b9

000004b9:
000004c2: #13 := R31 + 0x10
000004c7: R19 := mem[#13, el]:u64
000004cc: R20 := mem[#13 + 8, el]:u64
000004d2: #14 := R31 + 0x20
000004d7: R21 := mem[#14, el]:u64
000004dc: R22 := mem[#14 + 8, el]:u64
000004e2: #15 := R31 + 0x30
000004e7: R23 := mem[#15, el]:u64
000004ec: R24 := mem[#15 + 8, el]:u64
000004f3: R29 := mem[R31, el]:u64
000004f8: R30 := mem[R31 + 8, el]:u64
000004fc: R31 := R31 + 0x40
00000501: call R30 with noreturn

0000085e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000875: __libc_start_main_main :: in u64 = R0
00000876: __libc_start_main_arg2 :: in u32 = low:32[R1]
00000877: __libc_start_main_arg3 :: in out u64 = R2
00000878: __libc_start_main_auxv :: in out u64 = R3
00000879: __libc_start_main_result :: out u32 = low:32[R0]

0000028a:
000006b5: R16 := 0x11000
000006bc: R17 := mem[R16 + 8, el]:u64
000006c2: R16 := R16 + 8
000006c7: call R17 with noreturn

0000085f: sub _fini(_fini_result)
0000087a: _fini_result :: out u32 = low:32[R0]

00000030:
00000034: #0 := R31 - 0x10
0000003a: mem := mem with [#0, el]:u64 <- R29
00000040: mem := mem with [#0 + 8, el]:u64 <- R30
00000044: R31 := #0
0000004a: R29 := R31
00000051: R29 := mem[R31, el]:u64
00000056: R30 := mem[R31 + 8, el]:u64
0000005a: R31 := R31 + 0x10
0000005f: call R30 with noreturn

00000860: sub _init(_init_result)
0000087b: _init_result :: out u32 = low:32[R0]

00000497:
0000078b: #19 := R31 - 0x10
00000791: mem := mem with [#19, el]:u64 <- R29
00000797: mem := mem with [#19 + 8, el]:u64 <- R30
0000079b: R31 := #19
000007a1: R29 := R31
000007a6: R30 := 0x5A4
000007a8: call @call_weak_fn with return %000007aa

000007aa:
000007af: R29 := mem[R31, el]:u64
000007b4: R30 := mem[R31 + 8, el]:u64
000007b8: R31 := R31 + 0x10
000007bd: call R30 with noreturn

00000861: sub _start(_start_result)
0000087c: _start_result :: out u32 = low:32[R0]

0000023f:
00000242: R29 := 0
00000247: R30 := 0
0000024d: R5 := R0
00000254: R1 := mem[R31, el]:u64
0000025a: R2 := R31 + 8
00000260: R6 := R31
00000265: R0 := 0x10000
0000026c: R0 := mem[R0 + 0xFD8, el]:u64
00000271: R3 := 0x10000
00000278: R3 := mem[R3 + 0xFD0, el]:u64
0000027d: R4 := 0x10000
00000284: R4 := mem[R4 + 0xFB0, el]:u64
00000289: R30 := 0x644
0000028c: call @__libc_start_main with return %0000028e

0000028e:
00000291: R30 := 0x648
00000294: call @abort with return %00000862

00000862:
00000863: call @call_weak_fn with noreturn

00000864: sub abort()


00000292:
000006e1: R16 := 0x11000
000006e8: R17 := mem[R16 + 0x18, el]:u64
000006ee: R16 := R16 + 0x18
000006f3: call R17 with noreturn

00000865: sub call_weak_fn(call_weak_fn_result)
0000087d: call_weak_fn_result :: out u32 = low:32[R0]

00000296:
00000299: R0 := 0x10000
000002a0: R0 := mem[R0 + 0xFC8, el]:u64
000002a6: when R0 = 0 goto %000002a4
00000866: goto %000005fe

000002a4:
000002ac: call R30 with noreturn

000005fe:
00000601: goto @__gmon_start__

000005ff:
000006cb: R16 := 0x11000
000006d2: R17 := mem[R16 + 0x10, el]:u64
000006d8: R16 := R16 + 0x10
000006dd: call R17 with noreturn

00000867: sub deregister_tm_clones(deregister_tm_clones_result)
0000087e: deregister_tm_clones_result :: out u32 = low:32[R0]

000002b0:
000002b3: R0 := 0x11000
000002b9: R0 := R0 + 0x30
000002be: R1 := 0x11000
000002c4: R1 := R1 + 0x30
000002ca: #1 := ~R0
000002cf: #2 := R1 + ~R0 + 1
000002d5: VF := extend:65[#2] <> extend:65[R1] + extend:65[#1] + 1
000002db: CF := pad:65[#2] <> pad:65[R1] + pad:65[#1] + 1
000002df: ZF := #2 = 0
000002e3: NF := 63:63[#2]
000002e9: when ZF goto %000002e7
00000868: goto %000005e0

000005e0:
000005e3: R1 := 0x10000
000005ea: R1 := mem[R1 + 0xFB8, el]:u64
000005ef: when R1 = 0 goto %000002e7
00000869: goto %000005f3

000002e7:
000002ef: call R30 with noreturn

000005f3:
000005f7: R16 := R1
000005fc: call R16 with noreturn

0000086a: sub frame_dummy(frame_dummy_result)
0000087f: frame_dummy_result :: out u32 = low:32[R0]

000003a0:
000003a2: call @register_tm_clones with noreturn

0000086b: sub main(main_argc, main_argv, main_result)
00000880: main_argc :: in u32 = low:32[R0]
00000881: main_argv :: in out u64 = R1
00000882: main_result :: out u32 = low:32[R0]

000003a4:
000003a8: R31 := R31 - 0x10
000003af: mem := mem with [R31 + 0xC, el]:u32 <- 0
000003b4: R8 := 0x11000
000003bb: mem := mem with [R8 + 0x34, el]:u32 <- 0
000003c0: goto %000003be

000003be:
000003c4: R8 := 0x11000
000003cb: R8 := pad:64[mem[R8 + 0x34, el]:u32]
000003d1: #6 := 31:0[R8] - 5
000003d6: VF := extend:33[#6] <> extend:33[31:0[R8]] - 5
000003db: CF := pad:33[#6] <> pad:33[31:0[R8]] + 0xFFFFFFFB
000003df: ZF := #6 = 0
000003e3: NF := 31:31[#6]
000003e7: R8 := pad:64[#6]
000003f4: when NF <> VF goto %000003ed
000003f5: goto %000003f0

000003f0:
000003f1: R8 := 1
000003f7: goto %000003f3

000003ed:
000003ee: R8 := 0
000003f6: goto %000003f3

000003f3:
000003fd: when 0:0[R8] goto %000003fb
0000086c: goto %00000565

000003fb:
00000405: R0 := pad:64[mem[R31 + 0xC, el]:u32]
0000040b: R31 := R31 + 0x10
00000410: call R30 with noreturn

00000565:
00000568: goto %00000566

00000566:
0000056c: R9 := 0x11000
00000573: R8 := pad:64[mem[R9 + 0x34, el]:u32]
00000579: R8 := pad:64[31:0[R8] + 1]
00000581: mem := mem with [R9 + 0x34, el]:u32 <- 31:0[R8]
00000585: goto %000003be

0000086d: sub register_tm_clones(register_tm_clones_result)
00000883: register_tm_clones_result :: out u32 = low:32[R0]

000002f1:
000002f4: R0 := 0x11000
000002fa: R0 := R0 + 0x30
000002ff: R1 := 0x11000
00000305: R1 := R1 + 0x30
0000030c: R1 := R1 + ~R0 + 1
00000313: R2 := 0.0:0[R1 >> 0x3F | R1 << 1]
0000031a: R1 := R2 + (R1 ~>> 3)
00000320: #3 := ~(R1 ~>> 1)
00000324: #4 := ~(R1 ~>> 1) + 1
00000329: VF := extend:65[#4] <> extend:65[#3] + 1
0000032e: CF := pad:65[#4] <> pad:65[#3] + 1
00000332: ZF := #4 = 0
00000336: NF := 63:63[#4]
0000033e: R1 :=

          >> 1 | R1 << 0x3F]
00000344: when ZF goto %00000342
0000086e: goto %000005c2

000005c2:
000005c5: R2 := 0x10000
000005cc: R2 := mem[R2 + 0xFE0, el]:u64
000005d1: when R2 = 0 goto %00000342
0000086f: goto %000005d5

00000342:
0000034a: call R30 with noreturn

000005d5:
000005d9: R16 := R2
000005de: call R16 with noreturn
