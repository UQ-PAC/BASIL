package build
import $packages._

import mill._
import scalalib._

import $file.basilmill.bnfc.BNFCJFlexModule
import $file.basilmill.antlr.AntlrModule
import $file.basilmill.basildocs.BasilDocs
import $file.basilmill.basilversion.BasilVersion

import os.Path

import $ivy.`com.lihaoyi::mill-contrib-scalapblib:$MILL_VERSION`
import contrib.scalapblib._

object `package` extends RootModule with ScalaModule with BasilDocs with BasilVersion {
  // ammoniteVersion should be updated whenever scalaVersion is changed. see, for example,
  // https://mvnrepository.com/artifact/com.lihaoyi/ammonite_3.4.3 to list valid versions.
  def scalaVersion = "3.3.4"

  val ammonite = "3.0.2"
  override def ammoniteVersion = ammonite

  def moduleDeps = Seq(basilAntlr, basilProto, bnfc)

  def scalacOptions: T[Seq[String]] = Seq("-deprecation")

  val javaTests = ivy"com.novocode:junit-interface:0.11"
  val scalaTests = ivy"org.scalatest::scalatest:3.2.19"
  val scalaCheck = ivy"org.scalatestplus::scalacheck-1-18:3.2.19.0"
  val scalactic = ivy"org.scalactic::scalactic:3.2.19"
  val antlrRuntime = ivy"org.antlr:antlr4-runtime:4.9"
  val sourceCode = ivy"com.lihaoyi::sourcecode:0.3.0"
  val mainArgs = ivy"com.lihaoyi::mainargs:0.5.1"
  val scalapb = ivy"com.thesamet.scalapb::scalapb-runtime:0.11.15"
  val upickle = ivy"com.lihaoyi::upickle:4.2.1"

  def mainClass = Some("Main")

  def ivyDeps = Agg(scalactic, sourceCode, mainArgs, upickle)
  def millSourcePath = super.millSourcePath / "src"
  def sources = Task.Sources {
    Seq(PathRef(this.millSourcePath / "main" / "scala"))
  }

  object test extends ScalaTests with TestModule.ScalaTest {
    override def ammoniteVersion = ammonite
    def ivyDeps = Agg(scalaTests, scalaCheck, javaTests)
    def sources = Task.Sources {
      Seq(PathRef(this.millSourcePath / "scala"))
    }

    // note: toBoolean accepts precisely "true" or "false"
    def basilTestParallel = Task.Input {
      Task.env.get("BASIL_TEST_PARALLEL").fold(false)(_.toBoolean)
    }

    def testForkGrouping = Task {
      val numGroups = 13
      if (basilTestParallel()) {
        discoveredTestClasses().zipWithIndex.groupMap(x => x._2 % numGroups)(_._1).values.toSeq
      } else {
        Seq(discoveredTestClasses())
      }
    }
  }

  /** Updates the expected
    */

  def updateExpectedBAP() = Task.Command {
    val correctPath = test.millSourcePath / "correct"
    val incorrectPath = test.millSourcePath / "incorrect"

    expectedUpdate(correctPath, true, true)
    expectedUpdate(incorrectPath, false, true)
  }

  def updateExpectedGTIRB() = Task.Command {
    val correctPath = test.millSourcePath / "correct"
    val incorrectPath = test.millSourcePath / "incorrect"

    expectedUpdate(correctPath, true, false)
    expectedUpdate(incorrectPath, false, false)
  }

  def updateExpectedExtraSpec() = Task.Command {
    val correctPath = test.millSourcePath / "extraspec_correct"
    val incorrectPath = test.millSourcePath / "extraspec_incorrect"
    expectedUpdate(correctPath, true, true)
    expectedUpdate(incorrectPath, false, true)
    expectedUpdate(correctPath, true, false)
    expectedUpdate(incorrectPath, false, false)
  }

  def expectedUpdate(path: Path, shouldVerify: Boolean, BAPVariant: Boolean): Unit = {
    val examples = os.list(path).filter(os.isDir)
    for (e <- examples) {
      val variations = os.list(e).filter(os.isDir)
      for (v <- variations) {
        val name = e.last
        val suffix = if (BAPVariant) {
          "_bap"
        } else {
          "_gtirb"
        }
        val expectedSuffix = if (BAPVariant) {
          ""
        } else {
          "_gtirb"
        }
        val outPath = v / (name + suffix + ".bpl")
        val expectedPath = v / (name + expectedSuffix + ".expected")
        val resultPath = v / (name + suffix + "_result.txt")
        if (os.exists(resultPath)) {
          val result = os.read(resultPath)
          val verified = result.strip().equals("Boogie program verifier finished with 0 errors")
          if (verified == shouldVerify) {
            if (os.exists(outPath) && !(os.exists(expectedPath) && filesContentEqual(outPath, expectedPath))) {
              println(s"updated $expectedPath")
              os.copy.over(outPath, expectedPath)
            }
          }
        }
      }
    }
  }

  def filesContentEqual(path1: Path, path2: Path): Boolean = {
    os.read.lines(path1) == os.read.lines(path2)
  }

  def scalafmt = mill.scalalib.scalafmt.ScalafmtModule

  object basilAntlr extends AntlrModule {
    override def ivyDeps = Agg(build.antlrRuntime)
    override def antlrPackage = Some("Parsers")
    override def antlrGenerateVisitor = true
    override def antlrGrammarSources = Task.Sources {
      Seq(PathRef(build.millSourcePath / "main" / "antlr4"))
    }
  }

  object basilProto extends ScalaPBModule {
    override def scalaPBVersion = "0.11.15"

    override def scalaVersion = build.scalaVersion
    override def ivyDeps = Agg(build.scalapb)

    override def scalaPBSources = Task.Sources {
      Seq(PathRef(build.millSourcePath / "main" / "protobuf"))
    }

    def scalaDocOptions = Task {
      super.scalaDocOptions() ++ build.scalaDocExternalMappingOptions()
    }
  }

  object bnfc extends BNFCJFlexModule {
    override def bnfcPackageName = "basil_ir"
    override def bnfcExtraArgs = Seq("--line-numbers")
    override def bnfcSource = Task.Source {
      PathRef(build.millSourcePath / "main" / "bnfc" / "BasilIR.cf")
    }
    override def javadocOptions = Task {
      super.javadocOptions() ++ Seq(
        "-linkoffline",
        s"$baseUrl/api/java-cup",
        cup.docJar().path / ".." / "javadoc"
      ).map(_.toString)
    }
  }

  override def artifactTypes = Task {
    super.artifactTypes() ++ Set(coursier.core.Type.source, coursier.Type("source"))
  }

  def gtagslist = Task {
    val src = Task.traverse(Seq(this, test) ++ moduleDeps)(_.allSources)().flatten
    val srcArgs = src.map(_.path).filter(os.exists(_))

    val allfiles = srcArgs.flatMap {
      case p if os.isDir(p) => os.walk(p).filter(x => x.last.endsWith(".scala") || x.last.endsWith(".java"))
      case p => Seq(p)
    }.map(_.toString)

    os.write(Task.dest / "gtagslist", allfiles.mkString("\n"))
  }

  /**
   * Build the ctags file containing code definition locations.
   * This can be used with `./mill -w` * to watch and re-build on file changes.
   */
  def ctags = Task {
    val src = Task.traverse(Seq(this, test) ++ moduleDeps)(_.allSources)().flatten
    val srcArgs = src.map(_.path).filter(os.exists(_)).map(_.toString)

    val newFile = Task.workspace / "tags.new"
    val tagsFile = Task.workspace / "tags"

    os.call(Seq("ctags", "--languages=scala,java", "--tag-relative=never", "-R", "-f", newFile.toString) ++ srcArgs, cwd = Task.workspace)
    os.move(newFile, tagsFile, replaceExisting = true, atomicMove = true)
  }

  object bigdocs extends ScalaModule {

    val upicklesrc = ivy"com.lihaoyi::upickle:4.2.1;classifier=sources"

    override def scalaVersion = build.scalaVersion

    def f(x: String) = {
      val parts = x.split("/").init.toList

      parts.init.init.mkString(".") + ":" + parts.init.last + ":" + parts.last
    }


    override def artifactTypes = Task {
      super.artifactTypes() ++ Set(coursier.core.Type.doc)
    }

    def boopdeps = Task {
      build.resolvedIvyDeps().map(_.toString.split("/maven2/")(1)).map(f)
    }

    override def ivyDeps = Task {
      println(boopdeps())
      boopdeps().flatMap(x => Seq(ivy"$x", ivy"${x};classifier=javadoc"))
    }

    def go = Task {
      println(resolvedIvyDeps())
      println(compileClasspath())
    }

    override def generatedSources = build.generatedSources
    override def moduleDeps = build.moduleDeps

    override def sources = Task {
      build.sources() ++ Seq(PathRef(Task.workspace / "big"))
    }


  }
}
