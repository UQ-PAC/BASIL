//| mill-version: 1.0.3-jvm
//| mvnDeps:
//| - org.antlr:antlr4:4.9.3
//| - com.goyeau::mill-scalafix::0.6.0
//| - com.lihaoyi::mill-contrib-buildinfo:$MILL_VERSION
//| - com.lihaoyi::mill-contrib-scalapblib:$MILL_VERSION

package build

import mill._
import scalalib._
import mill.api.BuildCtx
import coursier.core.Authentication
import coursier.maven.MavenRepository

import basilmill.mdbookBinary
import basilmill.BNFCJFlexModule
import basilmill.AntlrModule
import basilmill.BasilDocs
import basilmill.BasilVersion
import basilmill.ProfileModule
import basilmill.Z3Module

import os.Path

import contrib.scalapblib._
import com.goyeau.mill.scalafix.ScalafixModule

object `package` extends ScalaModule with BasilDocs with BasilVersion with ScalafixModule {
  // ammoniteVersion should be updated whenever scalaVersion is changed. see, for example,
  // https://mvnrepository.com/artifact/com.lihaoyi/ammonite_3.4.3 to list valid versions.
  override def scalaVersion = "3.3.7-RC1"

  override def ammoniteVersion = "3.0.2"

  override def moduleDeps = Seq(basilAntlr, basilProto, bnfc)

  override def scalacOptions: T[Seq[String]] = Seq("-deprecation", "-Wunused:imports", "-feature")

  val javaTests = mvn"com.novocode:junit-interface:0.11"
  val scalaTests = mvn"org.scalatest::scalatest:3.2.19"
  val scalaCheck = mvn"org.scalatestplus::scalacheck-1-18:3.2.19.0"
  val scalactic = mvn"org.scalactic::scalactic:3.2.19"
  val antlrRuntime = mvn"org.antlr:antlr4-runtime:4.9"
  val sourceCode = mvn"com.lihaoyi::sourcecode:0.4.2"
  val mainArgs = mvn"com.lihaoyi::mainargs:0.7.6"
  val scalapb = mvn"com.thesamet.scalapb::scalapb-runtime:0.11.15"
  val upickle = mvn"com.lihaoyi::upickle:4.2.1"
  val aslpOffline = mvn"io.github.uq-pac::lifter:0.1.0"
  val javaSmt = mvn"org.sosy-lab:java-smt:5.0.0"
  val javaSmtZ3 = mvn"org.sosy-lab:javasmt-solver-z3:4.14.0"

  override def mvnDeps = Seq(scalactic, sourceCode, mainArgs, upickle, aslpOffline, javaSmt, javaSmtZ3)

  override def repositoriesTask = Task.Anon {
    super.repositoriesTask() :+ MavenRepository(
      "https://maven.pkg.github.com/UQ-PAC/aslp",
      // this token will expire in one year. if downloading the lifter dependency fails,
      // re-generate a read:packages token.
      authentication = Some(Authentication("rina-bot1", "iH2Yg4xigOuRtBRoTrQWS85I26vgDuZ29Mgt_phg".reverse))
      // XXX: .reverse is used to subvert Github's secret detection, which will invalidate the
      // token if it sees it being committed....
    )
  }

  override def mainClass = Some("Main")

  override def moduleDir = BuildCtx.workspaceRoot / "src"

  override def sources = Task.Sources("main/scala")

  override def forkArgs = Task {
    super.forkArgs() ++ z3.forkArgs()
  }
  override def forkEnv = Task {
    super.forkEnv() ++ z3.forkEnv()
  }

  override def scalafixConfig = Task {
    Some(BuildCtx.workspaceRoot / ".scalafix.conf")
  }

  object test extends ScalaTests with TestModule.ScalaTest with ScalafixModule {

    override def ammoniteVersion = build.ammoniteVersion
    override def mvnDeps = Seq(scalaTests, scalaCheck, javaTests)

    def basilTestDir = build.moduleDir / "test"
    override def sources = Task.Sources(basilTestDir / "scala")

    override def scalafixConfig = build.scalafixConfig

    // inherit fork options with shared libraries from main package
    override def forkArgs = Task {
      super.forkArgs() ++ build.forkArgs()
    }
    override def forkEnv = Task {
      super.forkEnv() ++ build.forkEnv()
    }

    override def testParallelism = false
    override def testForkGrouping = Task {
      Seq(discoveredTestClasses())
    }
  }

  /** Updates the expected
    */

  def updateExpectedBAP() = Task.Command {
    val correctPath = test.basilTestDir / "correct"
    val incorrectPath = test.basilTestDir / "incorrect"

    expectedUpdate(correctPath, true, true)
    expectedUpdate(incorrectPath, false, true)
  }

  def updateExpectedGTIRB() = Task.Command {
    val correctPath = test.basilTestDir / "correct"
    val incorrectPath = test.basilTestDir / "incorrect"

    expectedUpdate(correctPath, true, false)
    expectedUpdate(incorrectPath, false, false)
  }

  def updateExpectedExtraSpec() = Task.Command {
    val correctPath = test.basilTestDir / "extraspec_correct"
    val incorrectPath = test.basilTestDir / "extraspec_incorrect"
    expectedUpdate(correctPath, true, true)
    expectedUpdate(incorrectPath, false, true)
    expectedUpdate(correctPath, true, false)
    expectedUpdate(incorrectPath, false, false)
  }

  def expectedUpdate(path: Path, shouldVerify: Boolean, BAPVariant: Boolean): Unit = {
    val examples = os.list(path).filter(os.isDir)
    for (e <- examples) {
      val variations = os.list(e).filter(os.isDir)
      for (v <- variations) {
        val name = e.last
        val suffix = if (BAPVariant) {
          "_bap"
        } else {
          "_gtirb"
        }
        val expectedSuffix = if (BAPVariant) {
          ""
        } else {
          "_gtirb"
        }
        val outPath = v / (name + suffix + ".bpl")
        val expectedPath = v / (name + expectedSuffix + ".expected")
        val resultPath = v / (name + suffix + "_result.txt")
        if (os.exists(resultPath)) {
          val result = os.read(resultPath)
          val verified = result.strip().equals("Boogie program verifier finished with 0 errors")
          if (verified == shouldVerify) {
            if (os.exists(outPath) && !(os.exists(expectedPath) && filesContentEqual(outPath, expectedPath))) {
              println(s"updated $expectedPath")
              os.copy.over(outPath, expectedPath)
            }
          }
        }
      }
    }
  }

  def filesContentEqual(path1: Path, path2: Path): Boolean = {
    os.read.lines(path1) == os.read.lines(path2)
  }

  val scalafmt = mill.scalalib.scalafmt.ScalafmtModule


  /**
   * Haoyi: "currently there isn't a terribly easy way to run things sequentially,
   *         but a command taking Evaluator could do that
   *         e.g. https://github.com/com-lihaoyi/mill/discussions/5360"
   */
  def fmt(ev: mill.api.Evaluator): Command[Unit] = Task.Command(exclusive = true) {
    ev.execute(Seq(fix(), test.fix()))
    ev.execute(Seq(scalafmt.reformat()))
    ()
  }

  object basilAntlr extends AntlrModule {
    override def mvnDeps = Seq(build.antlrRuntime)
    override def antlrPackage = Some("Parsers")
    override def antlrGenerateVisitor = true
    override def antlrGrammarSources = Task.Sources(build.moduleDir / "main/antlr4")
  }

  object basilProto extends ScalaPBModule {
    override def scalaPBVersion = "0.11.15"

    override def scalaVersion = build.scalaVersion
    override def mvnDeps = Seq(build.scalapb)

    override def scalaPBSources = Task.Sources(build.moduleDir / "main/protobuf")

    override def scalaDocOptions = Task {
      super.scalaDocOptions() ++ build.scalaDocExternalMappingOptions()
    }
  }

  object bnfc extends BNFCJFlexModule {
    override def bnfcPackageName = "basil_ir"
    override def bnfcExtraArgs = Seq("--line-numbers")
    override def bnfcSource = Task.Source(build.moduleDir / "main/bnfc/BasilIR.cf")
    override def javadocOptions = Task {
      super.javadocOptions() ++ Seq(
        "-linkoffline",
        s"$baseUrl/api/java-cup",
        cup.javadocGenerated().path
      ).map(_.toString)
    }
  }

  object mdbook extends mdbookBinary {
    override def mdbookSources = Task.Source {
      BuildCtx.workspaceRoot  / "docs"
    }
  }

  object z3 extends Z3Module

  def ctagsConfig = Task.Source {
    BuildCtx.workspaceRoot / "basilmill" / "scala.ctags"
  }

  /**
   * Build the ctags file containing code definition locations.
   * This can be used with `./mill -w` to watch and re-build on file changes.
   */
  def ctags() = Task.Command {
    val src = Task.traverse(Seq(this, test) ++ moduleDeps)(_.allSources)().flatten
    val srcArgs = src.map(_.path).filter(os.exists(_)).map(_.toString)

    val newFile = BuildCtx.workspaceRoot / "tags.new"
    val tagsFile = BuildCtx.workspaceRoot / "tags"

    val args = Seq(
      "ctags", "--tag-relative=no", "-R", "-f", newFile.toString,
      "--options=" + ctagsConfig().path,
      "--languages=scala,java", "--fields=+zK")

    os.call(args ++ srcArgs, cwd = BuildCtx.workspaceRoot)
    os.move(newFile, tagsFile, replaceExisting = true, atomicMove = true)
  }

  object asyncProf extends ProfileModule {
    override def scalaVersion = build.scalaVersion
  }

  def runProfile(profileDest: String, args: String*) = Task.Command {
    println(s"Profiling: you may want to set\n  sudo sysctl kernel.perf_event_paranoid=1\n  sudo sysctl kernel.kptr_restrict=0\n")
    val prof = asyncProf.path()
    os.call(("java", s"-agentpath:${prof}=start,event=cpu,file=${profileDest}",  "-jar", assembly().path.toString, args), stdout = os.Inherit, cwd = BuildCtx.workspaceRoot)
  }

}
