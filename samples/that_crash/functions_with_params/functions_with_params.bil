00000270: program
00000257: sub .plt(\.plt_result)
00000271: \.plt_result :: out u32 = R0

000001d6:
000001d8: mem := mem with [R31 - 0x10, el]:u64 <- R16
000001da: mem := mem with [R31 - 8, el]:u64 <- R30
000001dc: R31 := R31 - 0x10
000001e0: R16 := 0x10000
000001e4: R17 := mem[R16 + 0xFF8, el]:u64
000001e8: R16 := R16 + 0xFF8
000001ec: call R17 with noreturn

00000258: sub __cxa_finalize(__cxa_finalize_result)
00000272: __cxa_finalize_result :: out u32 = R0

0000019b:
00000206: R16 := 0x11000
0000020a: R17 := mem[R16 + 8, el]:u64
0000020e: R16 := R16 + 8
00000212: call R17 with noreturn

00000259: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000273: __do_global_dtors_aux_result :: out u32 = R0

000000cd:
000000cf: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000d1: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000d3: R31 := R31 - 0x20
000000d7: R29 := R31
000000db: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000df: R19 := 0x11000
000000e3: #23 := pad:64[mem[R19 + 0x30]]
000000e5: R0 := 0
000000e7: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#23]
000000f0: #24 := extract:31:0[R0] <> 0
000000ec: when #24 goto %000000ea
0000025a: goto %00000170

00000170:
00000172: R0 := 0x10000
00000176: R0 := mem[R0 + 0xFC8, el]:u64
0000017f: #38 := R0 = 0
0000017b: when #38 goto %00000179
0000025b: goto %00000190

00000190:
00000192: R0 := 0x11000
00000196: R0 := mem[R0 + 0x28, el]:u64
0000019a: R30 := 0x6F0
0000019d: call @__cxa_finalize with return %00000179

00000179:
00000182: R30 := 0x6F4
00000184: call @deregister_tm_clones with return %00000186

00000186:
00000188: R0 := 0
0000018a: R0 := R0 & 0xFFFFFFFF00000000 | 1
0000018e: mem := mem with [R19 + 0x30] <- low:8[extract:31:0[R0]]
0000025c: goto %000000ea

000000ea:
000000f3: R19 := mem[R31 + 0x10, el]:u64
000000f7: R29 := mem[R31, el]:u64
000000f9: R30 := mem[R31 + 8, el]:u64
000000fb: R31 := R31 + 0x20
000000ff: call R30 with noreturn

0000025d: sub __gmon_start__(__gmon_start___result)
00000274: __gmon_start___result :: out u32 = R0

000001d2:
00000216: R16 := 0x11000
0000021a: R17 := mem[R16 + 0x10, el]:u64
0000021e: R16 := R16 + 0x10
00000222: call R17 with noreturn

0000025e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000275: __libc_start_main_main :: in u64 = R0
00000276: __libc_start_main_arg2 :: in u32 = R1
00000277: __libc_start_main_arg3 :: in out u64 = R2
00000278: __libc_start_main_auxv :: in out u64 = R3
00000279: __libc_start_main_result :: out u32 = R0

00000051:
000001f6: R16 := 0x11000
000001fa: R17 := mem[R16, el]:u64
000001fe: R16 := R16
00000202: call R17 with noreturn

0000025f: sub _fini(_fini_result)
0000027a: _fini_result :: out u32 = R0

00000009:
0000000d: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000f: mem := mem with [R31 - 8, el]:u64 <- R30
00000011: R31 := R31 - 0x10
00000015: R29 := R31
00000019: R29 := mem[R31, el]:u64
0000001b: R30 := mem[R31 + 8, el]:u64
0000001d: R31 := R31 + 0x10
00000021: call R30 with noreturn

00000260: sub _init(_init_result)
0000027b: _init_result :: out u32 = R0

00000235:
00000239: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000023b: mem := mem with [R31 - 8, el]:u64 <- R30
0000023d: R31 := R31 - 0x10
00000241: R29 := R31
00000245: R30 := 0x590
00000247: call @call_weak_fn with return %00000249

00000249:
0000024b: R29 := mem[R31, el]:u64
0000024d: R30 := mem[R31 + 8, el]:u64
0000024f: R31 := R31 + 0x10
00000253: call R30 with noreturn

00000261: sub _start(_start_result)
0000027c: _start_result :: out u32 = R0

00000024:
00000028: R29 := 0
0000002c: R30 := 0
00000030: R5 := R0
00000034: R1 := mem[R31, el]:u64
00000038: R2 := R31 + 8
0000003c: R6 := R31
00000040: R0 := 0x10000
00000044: R0 := mem[R0 + 0xFD8, el]:u64
00000048: R3 := 0
0000004c: R4 := 0
00000050: R30 := 0x630
00000053: call @__libc_start_main with return %00000055

00000055:
00000057: R30 := 0x634
0000005a: call @abort with return %00000262

00000262:
00000263: call @call_weak_fn with noreturn

00000264: sub abort()


00000058:
00000226: R16 := 0x11000
0000022a: R17 := mem[R16 + 0x18, el]:u64
0000022e: R16 := R16 + 0x18
00000232: call R17 with noreturn

00000265: sub call_weak_fn(call_weak_fn_result)
0000027d: call_weak_fn_result :: out u32 = R0

0000005c:
0000005e: R0 := 0x10000
00000062: R0 := mem[R0 + 0xFD0, el]:u64
0000006b: #5 := R0 = 0
00000067: when #5 goto %00000065
00000266: goto %000001d1

00000065:
0000006e: call R30 with noreturn

000001d1:
000001d4: call @__gmon_start__ with noreturn

00000267: sub deregister_tm_clones(deregister_tm_clones_result)
0000027e: deregister_tm_clones_result :: out u32 = R0

00000075:
00000077: R0 := 0x11000
0000007b: R0 := R0 + 0x30
0000007f: R1 := 0x11000
00000083: R1 := R1 + 0x30
00000087: #9 := 1 + ~R0 + R1
00000089: NF := extract:63:63[#9]
0000008b: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
0000008d: ZF := #9 = 0
0000008f: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
00000098: #11 := ZF
00000094: when #11 goto %00000092
00000268: goto %000001b8

000001b8:
000001ba: R1 := 0x10000
000001be: R1 := mem[R1 + 0xFC0, el]:u64
000001c6: #44 := R1 = 0
000001c2: when #44 goto %00000092
00000269: goto %000001c8

00000092:
0000009b: call R30 with noreturn

000001c8:
000001ca: R16 := R1
000001ce: call R16 with noreturn

0000026a: sub frame_dummy(frame_dummy_result)
0000027f: frame_dummy_result :: out u32 = R0

00000106:
00000108: call @register_tm_clones with noreturn

0000026b: sub main(main_argc, main_argv, main_result)
00000280: main_argc :: in u32 = R0
00000281: main_argv :: in out u64 = R1
00000282: main_result :: out u32 = R0

0000010a:
0000010c: mem := mem with [R31 - 0x20, el]:u64 <- R29
0000010e: mem := mem with [R31 - 0x18, el]:u64 <- R30
00000110: R31 := R31 - 0x20
00000114: R29 := R31
00000118: R0 := 0
0000011a: R0 := R0 & 0xFFFFFFFF00000000 | 1
0000011e: mem := mem with [R31 + 0x1C, el]:u32 <- low:32[extract:31:0[R0]]
00000122: R0 := 0
00000124: R0 := R0 & 0xFFFFFFFF00000000 | 2
00000128: mem := mem with [R31 + 0x18, el]:u32 <- low:32[extract:31:0[R0]]
0000012c: #31 := pad:64[mem[R31 + 0x1C, el]:u32]
0000012e: R0 := 0
00000130: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#31]
00000134: R30 := 0x734
00000137: call @plus_one with return %00000159

00000159:
0000015b: mem := mem with [R31 + 0x1C, el]:u32 <- low:32[extract:31:0[R0]]
0000015f: R0 := 0
00000161: R0 := R0 & 0xFFFFFFFF00000000
00000165: R29 := mem[R31, el]:u64
00000167: R30 := mem[R31 + 8, el]:u64
00000169: R31 := R31 + 0x20
0000016d: call R30 with noreturn

0000026c: sub plus_one(plus_one_result)
00000283: plus_one_result :: out u32 = R0

00000135:
0000013a: R31 := R31 - 0x10
0000013e: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]
00000142: #33 := pad:64[mem[R31 + 0xC, el]:u32]
00000144: R0 := 0
00000146: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#33]
0000014a: #34 := extend:64[extract:31:0[R0]] + 1
0000014c: R0 := 0
0000014e: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#34]
00000152: R31 := R31 + 0x10
00000156: call R30 with noreturn

0000026d: sub register_tm_clones(register_tm_clones_result)
00000284: register_tm_clones_result :: out u32 = R0

0000009e:
000000a0: R0 := 0x11000
000000a4: R0 := R0 + 0x30
000000a8: R1 := 0x11000
000000ac: R1 := R1 + 0x30
000000b0: R1 := R1 - R0
000000b4: R2 := R1 >> 0x3F
000000b8: R1 := R2 + (R1 ~>> 3)
000000bc: R1 := R1 >> 1
000000c5: #20 := R1 = 0
000000c1: when #20 goto %000000bf
0000026e: goto %0000019f

0000019f:
000001a1: R2 := 0x10000
000001a5: R2 := mem[R2 + 0xFE0, el]:u64
000001ad: #40 := R2 = 0
000001a9: when #40 goto %000000bf
0000026f: goto %000001af

000000bf:
000000c8: call R30 with noreturn

000001af:
000001b1: R16 := R2
000001b5: call R16 with noreturn
