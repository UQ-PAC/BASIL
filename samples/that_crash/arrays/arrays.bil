0000026c: program
00000252: sub .plt(\.plt_result)
0000026d: \.plt_result :: out u32 = R0

000001d1:
000001d3: mem := mem with [R31 - 0x10, el]:u64 <- R16
000001d5: mem := mem with [R31 - 8, el]:u64 <- R30
000001d7: R31 := R31 - 0x10
000001db: R16 := 0x10000
000001df: R17 := mem[R16 + 0xFF8, el]:u64
000001e3: R16 := R16 + 0xFF8
000001e7: call R17 with noreturn

00000253: sub __cxa_finalize(__cxa_finalize_result)
0000026e: __cxa_finalize_result :: out u32 = R0

00000196:
00000201: R16 := 0x11000
00000205: R17 := mem[R16 + 8, el]:u64
00000209: R16 := R16 + 8
0000020d: call R17 with noreturn

00000254: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
0000026f: __do_global_dtors_aux_result :: out u32 = R0

000000cd:
000000cf: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000d1: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000d3: R31 := R31 - 0x20
000000d7: R29 := R31
000000db: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000df: R19 := 0x11000
000000e3: #24 := pad:64[mem[R19 + 0x30]]
000000e5: R0 := 0
000000e7: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#24]
000000f0: #25 := extract:31:0[R0] <> 0
000000ec: when #25 goto %000000ea
00000255: goto %0000016b

0000016b:
0000016d: R0 := 0x10000
00000171: R0 := mem[R0 + 0xFC8, el]:u64
0000017a: #39 := R0 = 0
00000176: when #39 goto %00000174
00000256: goto %0000018b

0000018b:
0000018d: R0 := 0x11000
00000191: R0 := mem[R0 + 0x28, el]:u64
00000195: R30 := 0x6F0
00000198: call @__cxa_finalize with return %00000174

00000174:
0000017d: R30 := 0x6F4
0000017f: call @deregister_tm_clones with return %00000181

00000181:
00000183: R0 := 0
00000185: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000189: mem := mem with [R19 + 0x30] <- low:8[extract:31:0[R0]]
00000257: goto %000000ea

000000ea:
000000f3: R19 := mem[R31 + 0x10, el]:u64
000000f7: R29 := mem[R31, el]:u64
000000f9: R30 := mem[R31 + 8, el]:u64
000000fb: R31 := R31 + 0x20
000000ff: call R30 with noreturn

00000258: sub __gmon_start__(__gmon_start___result)
00000270: __gmon_start___result :: out u32 = R0

000001cd:
00000211: R16 := 0x11000
00000215: R17 := mem[R16 + 0x10, el]:u64
00000219: R16 := R16 + 0x10
0000021d: call R17 with noreturn

00000259: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000271: __libc_start_main_main :: in u64 = R0
00000272: __libc_start_main_arg2 :: in u32 = R1
00000273: __libc_start_main_arg3 :: in out u64 = R2
00000274: __libc_start_main_auxv :: in out u64 = R3
00000275: __libc_start_main_result :: out u32 = R0

00000051:
000001f1: R16 := 0x11000
000001f5: R17 := mem[R16, el]:u64
000001f9: R16 := R16
000001fd: call R17 with noreturn

0000025a: sub _fini(_fini_result)
00000276: _fini_result :: out u32 = R0

00000009:
0000000d: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000f: mem := mem with [R31 - 8, el]:u64 <- R30
00000011: R31 := R31 - 0x10
00000015: R29 := R31
00000019: R29 := mem[R31, el]:u64
0000001b: R30 := mem[R31 + 8, el]:u64
0000001d: R31 := R31 + 0x10
00000021: call R30 with noreturn

0000025b: sub _init(_init_result)
00000277: _init_result :: out u32 = R0

00000230:
00000234: mem := mem with [R31 - 0x10, el]:u64 <- R29
00000236: mem := mem with [R31 - 8, el]:u64 <- R30
00000238: R31 := R31 - 0x10
0000023c: R29 := R31
00000240: R30 := 0x590
00000242: call @call_weak_fn with return %00000244

00000244:
00000246: R29 := mem[R31, el]:u64
00000248: R30 := mem[R31 + 8, el]:u64
0000024a: R31 := R31 + 0x10
0000024e: call R30 with noreturn

0000025c: sub _start(_start_result)
00000278: _start_result :: out u32 = R0

00000024:
00000028: R29 := 0
0000002c: R30 := 0
00000030: R5 := R0
00000034: R1 := mem[R31, el]:u64
00000038: R2 := R31 + 8
0000003c: R6 := R31
00000040: R0 := 0x10000
00000044: R0 := mem[R0 + 0xFD8, el]:u64
00000048: R3 := 0
0000004c: R4 := 0
00000050: R30 := 0x630
00000053: call @__libc_start_main with return %00000055

00000055:
00000057: R30 := 0x634
0000005a: call @abort with return %0000025d

0000025d:
0000025e: call @call_weak_fn with noreturn

0000025f: sub abort()


00000058:
00000221: R16 := 0x11000
00000225: R17 := mem[R16 + 0x18, el]:u64
00000229: R16 := R16 + 0x18
0000022d: call R17 with noreturn

00000260: sub call_weak_fn(call_weak_fn_result)
00000279: call_weak_fn_result :: out u32 = R0

0000005c:
0000005e: R0 := 0x10000
00000062: R0 := mem[R0 + 0xFD0, el]:u64
0000006b: #6 := R0 = 0
00000067: when #6 goto %00000065
00000261: goto %000001cc

00000065:
0000006e: call R30 with noreturn

000001cc:
000001cf: call @__gmon_start__ with noreturn

00000262: sub deregister_tm_clones(deregister_tm_clones_result)
0000027a: deregister_tm_clones_result :: out u32 = R0

00000075:
00000077: R0 := 0x11000
0000007b: R0 := R0 + 0x30
0000007f: R1 := 0x11000
00000083: R1 := R1 + 0x30
00000087: #10 := 1 + ~R0 + R1
00000089: NF := extract:63:63[#10]
0000008b: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#10]
          | ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#10]
0000008d: ZF := #10 = 0
0000008f: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#10] | extract:63:63[R1] & ~extract:63:63[#10]
00000098: #12 := ZF
00000094: when #12 goto %00000092
00000263: goto %000001b3

000001b3:
000001b5: R1 := 0x10000
000001b9: R1 := mem[R1 + 0xFC0, el]:u64
000001c1: #45 := R1 = 0
000001bd: when #45 goto %00000092
00000264: goto %000001c3

00000092:
0000009b: call R30 with noreturn

000001c3:
000001c5: R16 := R1
000001c9: call R16 with noreturn

00000265: sub frame_dummy(frame_dummy_result)
0000027b: frame_dummy_result :: out u32 = R0

00000106:
00000108: call @register_tm_clones with noreturn

00000266: sub main(main_argc, main_argv, main_result)
0000027c: main_argc :: in u32 = R0
0000027d: main_argv :: in out u64 = R1
0000027e: main_result :: out u32 = R0

0000010a:
0000010c: R31 := R31 - 0x20
00000110: mem := mem with [R31 + 0x1C, el]:u32 <- 0
00000115: goto %00000113

00000113:
00000118: #28 := pad:64[mem[R31 + 0x1C, el]:u32]
0000011a: R0 := 0
0000011c: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
00000120: #29 := 0xFFFFFFFFFFFFFFFC + extend:64[extract:31:0[R0]]
00000122: NF := extract:63:63[#29]
00000124: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#29]
00000126: ZF := #29 = 0
00000128: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#29] |
          ~extract:63:63[#29]
00000131: #31 := (NF <> VF | ZF) <> 0
0000012d: when #31 goto %0000012b
00000267: goto %0000015c

0000015c:
0000015e: R0 := 0
00000160: R0 := R0 & 0xFFFFFFFF00000000
00000164: R31 := R31 + 0x20
00000168: call R30 with noreturn

0000012b:
00000134: R0 := extend:64[mem[R31 + 0x1C, el]:u32]
00000138: R0 := R0 << 2
0000013c: R1 := R31 + 8
00000140: #34 := pad:64[mem[R31 + 0x1C, el]:u32]
00000142: R2 := 0
00000144: R2 := R2 & 0xFFFFFFFF00000000 | pad:64[#34]
0000014a: #35 := pad:64[mem[R31 + 0x1C, el]:u32]
0000014c: R0 := 0
0000014e: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#35]
00000152: #36 := extend:64[extract:31:0[R0]] + 1
00000154: R0 := 0
00000156: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#36]
0000015a: mem := mem with [R31 + 0x1C, el]:u32 <- low:32[extract:31:0[R0]]
00000268: goto %00000113

00000269: sub register_tm_clones(register_tm_clones_result)
0000027f: register_tm_clones_result :: out u32 = R0

0000009e:
000000a0: R0 := 0x11000
000000a4: R0 := R0 + 0x30
000000a8: R1 := 0x11000
000000ac: R1 := R1 + 0x30
000000b0: R1 := R1 - R0
000000b4: R2 := R1 >> 0x3F
000000b8: R1 := R2 + (R1 ~>> 3)
000000bc: R1 := R1 >> 1
000000c5: #21 := R1 = 0
000000c1: when #21 goto %000000bf
0000026a: goto %0000019a

0000019a:
0000019c: R2 := 0x10000
000001a0: R2 := mem[R2 + 0xFE0, el]:u64
000001a8: #41 := R2 = 0
000001a4: when #41 goto %000000bf
0000026b: goto %000001aa

000000bf:
000000c8: call R30 with noreturn

000001aa:
000001ac: R16 := R2
000001b0: call R16 with noreturn
