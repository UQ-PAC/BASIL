00000313: program
000002e9: sub __cxa_finalize(__cxa_finalize_result)
00000314: __cxa_finalize_result :: out u32 = R0

0000022e:
00000289: R16 := 0x10000
0000028d: R17 := mem[R16 + 0xFA0, el]:u64
00000291: R16 := R16 + 0xFA0
00000295: call R17 with noreturn

000002ea: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000315: __do_global_dtors_aux_result :: out u32 = R0

000000d1:
000000d3: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000d5: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000d7: R31 := R31 - 0x20
000000db: R29 := R31
000000df: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000e3: R19 := 0x11000
000000e7: #23 := pad:64[mem[R19 + 0x10]]
000000e9: R0 := 0
000000eb: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#23]
000000f4: #24 := extract:31:0[R0] <> 0
000000f0: when #24 goto %000000ee
00000304: goto %00000203

00000203:
00000205: R0 := 0x10000
00000209: R0 := mem[R0 + 0xFD8, el]:u64
00000212: #72 := R0 = 0
0000020e: when #72 goto %0000020c
00000305: goto %00000223

00000223:
00000225: R0 := 0x11000
00000229: R0 := mem[R0 + 8, el]:u64
0000022d: R30 := 0x730
00000230: call @__cxa_finalize with return %0000020c

0000020c:
00000215: R30 := 0x734
00000217: call @deregister_tm_clones with return %00000219

00000219:
0000021b: R0 := 0
0000021d: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000221: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
00000306: goto %000000ee

000000ee:
000000f7: R19 := mem[R31 + 0x10, el]:u64
000000fb: R29 := mem[R31, el]:u64
000000fd: R30 := mem[R31 + 8, el]:u64
000000ff: R31 := R31 + 0x20
00000103: call R30 with noreturn

000002ee: sub __libc_csu_fini(__libc_csu_fini_result)
00000316: __libc_csu_fini_result :: out u32 = R0

000001b3:
000001b5: call R30 with noreturn

000002ef: sub __libc_csu_init(__libc_csu_init_result)
00000317: __libc_csu_init_result :: out u32 = R0

0000013d:
0000013f: mem := mem with [R31 - 0x40, el]:u64 <- R29
00000141: mem := mem with [R31 - 0x38, el]:u64 <- R30
00000143: R31 := R31 - 0x40
00000147: R29 := R31
0000014b: mem := mem with [R31, el]:u64 <- R31 + 0x20
0000014d: mem := mem with [R31, el]:u64 <- R31 + 0x28
00000151: R20 := 0x10000
00000155: R20 := R20 + 0xD90
00000159: mem := mem with [R31, el]:u64 <- R31 + 0x40
0000015b: mem := mem with [R31, el]:u64 <- R31 + 0x48
0000015f: R21 := 0x10000
00000163: R21 := R21 + 0xD88
00000167: R20 := R20 - R21
0000016b: #40 := extract:31:0[R0]
0000016d: R22 := 0
0000016f: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#40]
00000173: mem := mem with [R31, el]:u64 <- R31 + 0x60
00000175: mem := mem with [R31, el]:u64 <- R31 + 0x68
00000179: R23 := R1
0000017d: R24 := R2
00000181: R20 := R20 >> 3
00000185: R30 := 0x7BC
00000188: call @_init with return %0000018a

0000018a:
00000191: #49 := R20 = 0
0000018d: when #49 goto %0000018b
00000307: goto %000001b8

000001b8:
000001ba: R19 := 0
00000308: goto %000001be

000001be:
000001c0: R3 := mem[R21 + (R19 << 3), el]:u64
000001c4: R2 := R24
000001c8: R19 := R19 + 1
000001cc: R1 := R23
000001d0: #63 := extract:31:0[R22]
000001d2: R0 := 0
000001d4: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#63]
000001d8: R30 := 0x7E0
000001da: call R3 with return %000001dd

000001dd:
000001df: #67 := 1 + ~R19 + R20
000001e1: NF := extract:63:63[#67]
000001e3: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#67] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#67]
000001e5: ZF := #67 = 0
000001e7: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#67] | extract:63:63[R20] &
          ~extract:63:63[#67]
000001ef: #69 := ~ZF <> 0
000001eb: when #69 goto %000001be
00000309: goto %0000018b

0000018b:
00000194: R19 := mem[R31 + 0x10, el]:u64
00000196: R20 := mem[R31 + 0x18, el]:u64
0000019a: R21 := mem[R31 + 0x20, el]:u64
0000019c: R22 := mem[R31 + 0x28, el]:u64
000001a0: R23 := mem[R31 + 0x30, el]:u64
000001a2: R24 := mem[R31 + 0x38, el]:u64
000001a6: R29 := mem[R31, el]:u64
000001a8: R30 := mem[R31 + 8, el]:u64
000001aa: R31 := R31 + 0x40
000001ae: call R30 with noreturn

000002f3: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000318: __libc_start_main_main :: in u64 = R0
00000319: __libc_start_main_arg2 :: in u32 = R1
0000031a: __libc_start_main_arg3 :: in out u64 = R2
0000031b: __libc_start_main_auxv :: in out u64 = R3
0000031c: __libc_start_main_result :: out u32 = R0

00000059:
00000299: R16 := 0x10000
0000029d: R17 := mem[R16 + 0xFA8, el]:u64
000002a1: R16 := R16 + 0xFA8
000002a5: call R17 with noreturn

000002f4: sub _fini(_fini_result)
0000031d: _fini_result :: out u32 = R0

00000009:
0000000d: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000f: mem := mem with [R31 - 8, el]:u64 <- R30
00000011: R31 := R31 - 0x10
00000015: R29 := R31
00000019: R29 := mem[R31, el]:u64
0000001b: R30 := mem[R31 + 8, el]:u64
0000001d: R31 := R31 + 0x10
00000021: call R30 with noreturn

000002f5: sub _init(_init_result)
0000031e: _init_result :: out u32 = R0

00000186:
000002cb: mem := mem with [R31 - 0x10, el]:u64 <- R29
000002cd: mem := mem with [R31 - 8, el]:u64 <- R30
000002cf: R31 := R31 - 0x10
000002d3: R29 := R31
000002d7: R30 := 0x5A8
000002d9: call @call_weak_fn with return %000002db

000002db:
000002dd: R29 := mem[R31, el]:u64
000002df: R30 := mem[R31 + 8, el]:u64
000002e1: R31 := R31 + 0x10
000002e5: call R30 with noreturn

000002f6: sub _start(_start_result)
0000031f: _start_result :: out u32 = R0

00000024:
00000028: R29 := 0
0000002c: R30 := 0
00000030: R5 := R0
00000034: R1 := mem[R31, el]:u64
00000038: R2 := R31 + 8
0000003c: R6 := R31
00000040: R0 := 0x10000
00000044: R0 := mem[R0 + 0xFF0, el]:u64
00000048: R3 := 0x10000
0000004c: R3 := mem[R3 + 0xFE8, el]:u64
00000050: R4 := 0x10000
00000054: R4 := mem[R4 + 0xFC8, el]:u64
00000058: R30 := 0x678
0000005b: call @__libc_start_main with return %0000005d

0000005d:
0000005f: R30 := 0x67C
00000062: call @abort with return %0000030a

0000030a:
0000030b: call @call_weak_fn with noreturn

000002f9: sub abort()


00000060:
000002b9: R16 := 0x10000
000002bd: R17 := mem[R16 + 0xFB8, el]:u64
000002c1: R16 := R16 + 0xFB8
000002c5: call R17 with noreturn

000002fa: sub call_weak_fn(call_weak_fn_result)
00000320: call_weak_fn_result :: out u32 = R0

00000064:
00000066: R0 := 0x10000
0000006a: R0 := mem[R0 + 0xFE0, el]:u64
00000073: #5 := R0 = 0
0000006f: when #5 goto %0000006d
0000030c: goto %00000264

0000006d:
00000076: call R30 with noreturn

00000264:
00000267: goto @__gmon_start__

00000265:
000002a9: R16 := 0x10000
000002ad: R17 := mem[R16 + 0xFB0, el]:u64
000002b1: R16 := R16 + 0xFB0
000002b5: call R17 with noreturn

000002fc: sub deregister_tm_clones(deregister_tm_clones_result)
00000321: deregister_tm_clones_result :: out u32 = R0

00000079:
0000007b: R0 := 0x11000
0000007f: R0 := R0 + 0x10
00000083: R1 := 0x11000
00000087: R1 := R1 + 0x10
0000008b: #9 := 1 + ~R0 + R1
0000008d: NF := extract:63:63[#9]
0000008f: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
00000091: ZF := #9 = 0
00000093: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
0000009c: #11 := ZF
00000098: when #11 goto %00000096
0000030d: goto %0000024b

0000024b:
0000024d: R1 := 0x10000
00000251: R1 := mem[R1 + 0xFD0, el]:u64
00000259: #78 := R1 = 0
00000255: when #78 goto %00000096
0000030e: goto %0000025b

00000096:
0000009f: call R30 with noreturn

0000025b:
0000025d: R16 := R1
00000261: call R16 with noreturn

000002ff: sub frame_dummy(frame_dummy_result)
00000322: frame_dummy_result :: out u32 = R0

0000010a:
0000010c: call @register_tm_clones with noreturn

00000300: sub main(main_argc, main_argv, main_result)
00000323: main_argc :: in u32 = R0
00000324: main_argv :: in out u64 = R1
00000325: main_result :: out u32 = R0

0000010e:
00000110: R0 := 0x11000
00000114: R0 := R0 + 0x14
00000118: #26 := pad:64[mem[R0, el]:u32]
0000011a: R0 := 0
0000011c: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#26]
00000120: #27 := extend:64[extract:31:0[R0]]
00000122: NF := extract:63:63[#27]
00000124: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#27]
00000126: ZF := #27 = 0
00000128: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#27] |
          ~extract:63:63[#27]
00000131: #29 := ~ZF <> 0
0000012d: when #29 goto %0000012b
0000030f: goto %000001f1

000001f1:
000001f3: R0 := 0x11000
000001f7: R0 := R0 + 0x14
000001fb: R1 := 0
000001fd: R1 := R1 & 0xFFFFFFFF00000000 | 1
00000201: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000310: goto %0000012b

0000012b:
00000134: R0 := 0
00000136: R0 := R0 & 0xFFFFFFFF00000000
0000013a: call R30 with noreturn

00000303: sub register_tm_clones(register_tm_clones_result)
00000326: register_tm_clones_result :: out u32 = R0

000000a2:
000000a4: R0 := 0x11000
000000a8: R0 := R0 + 0x10
000000ac: R1 := 0x11000
000000b0: R1 := R1 + 0x10
000000b4: R1 := R1 - R0
000000b8: R2 := R1 >> 0x3F
000000bc: R1 := R2 + (R1 ~>> 3)
000000c0: R1 := R1 >> 1
000000c9: #20 := R1 = 0
000000c5: when #20 goto %000000c3
00000311: goto %00000232

00000232:
00000234: R2 := 0x10000
00000238: R2 := mem[R2 + 0xFF8, el]:u64
00000240: #74 := R2 = 0
0000023c: when #74 goto %000000c3
00000312: goto %00000242

000000c3:
000000cc: call R30 with noreturn

00000242:
00000244: R16 := R2
00000248: call R16 with noreturn
