GAMMA: x -> LOW, y -> LOW
00000260: program
00000247: sub .plt(\.plt_result)
00000261: \.plt_result :: out u32 = R0

000001c6:
000001c8: mem := mem with [R31 - 0x10, el]:u64 <- R16
000001ca: mem := mem with [R31 - 8, el]:u64 <- R30
000001cc: R31 := R31 - 0x10
000001d0: R16 := 0x10000
000001d4: R17 := mem[R16 + 0xFF8, el]:u64
000001d8: R16 := R16 + 0xFF8
000001dc: call R17 with noreturn

00000248: sub __cxa_finalize(__cxa_finalize_result)
00000262: __cxa_finalize_result :: out u32 = R0

0000018b:
000001f6: R16 := 0x11000
000001fa: R17 := mem[R16 + 8, el]:u64
000001fe: R16 := R16 + 8
00000202: call R17 with noreturn

00000249: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000263: __do_global_dtors_aux_result :: out u32 = R0

000000cd:
000000cf: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000d1: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000d3: R31 := R31 - 0x20
000000d7: R29 := R31
000000db: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000df: R19 := 0x11000
000000e3: #24 := pad:64[mem[R19 + 0x30]]
000000e5: R0 := 0
000000e7: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#24]
000000f0: #25 := extract:31:0[R0] <> 0
000000ec: when #25 goto %000000ea
0000024a: goto %00000160

00000160:
00000162: R0 := 0x10000
00000166: R0 := mem[R0 + 0xFC8, el]:u64
0000016f: #38 := R0 = 0
0000016b: when #38 goto %00000169
0000024b: goto %00000180

00000180:
00000182: R0 := 0x11000
00000186: R0 := mem[R0 + 0x28, el]:u64
0000018a: R30 := 0x6F0
0000018d: call @__cxa_finalize with return %00000169

00000169:
00000172: R30 := 0x6F4
00000174: call @deregister_tm_clones with return %00000176

00000176:
00000178: R0 := 0
0000017a: R0 := R0 & 0xFFFFFFFF00000000 | 1
0000017e: mem := mem with [R19 + 0x30] <- low:8[extract:31:0[R0]]
0000024c: goto %000000ea

000000ea:
000000f3: R19 := mem[R31 + 0x10, el]:u64
000000f7: R29 := mem[R31, el]:u64
000000f9: R30 := mem[R31 + 8, el]:u64
000000fb: R31 := R31 + 0x20
000000ff: call R30 with noreturn

0000024d: sub __gmon_start__(__gmon_start___result)
00000264: __gmon_start___result :: out u32 = R0

000001c2:
00000206: R16 := 0x11000
0000020a: R17 := mem[R16 + 0x10, el]:u64
0000020e: R16 := R16 + 0x10
00000212: call R17 with noreturn

0000024e: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000265: __libc_start_main_main :: in u64 = R0
00000266: __libc_start_main_arg2 :: in u32 = R1
00000267: __libc_start_main_arg3 :: in out u64 = R2
00000268: __libc_start_main_auxv :: in out u64 = R3
00000269: __libc_start_main_result :: out u32 = R0

00000051:
000001e6: R16 := 0x11000
000001ea: R17 := mem[R16, el]:u64
000001ee: R16 := R16
000001f2: call R17 with noreturn

0000024f: sub _fini(_fini_result)
0000026a: _fini_result :: out u32 = R0

00000009:
0000000d: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000f: mem := mem with [R31 - 8, el]:u64 <- R30
00000011: R31 := R31 - 0x10
00000015: R29 := R31
00000019: R29 := mem[R31, el]:u64
0000001b: R30 := mem[R31 + 8, el]:u64
0000001d: R31 := R31 + 0x10
00000021: call R30 with noreturn

00000250: sub _init(_init_result)
0000026b: _init_result :: out u32 = R0

00000225:
00000229: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000022b: mem := mem with [R31 - 8, el]:u64 <- R30
0000022d: R31 := R31 - 0x10
00000231: R29 := R31
00000235: R30 := 0x590
00000237: call @call_weak_fn with return %00000239

00000239:
0000023b: R29 := mem[R31, el]:u64
0000023d: R30 := mem[R31 + 8, el]:u64
0000023f: R31 := R31 + 0x10
00000243: call R30 with noreturn

00000251: sub _start(_start_result)
0000026c: _start_result :: out u32 = R0

00000024:
00000028: R29 := 0
0000002c: R30 := 0
00000030: R5 := R0
00000034: R1 := mem[R31, el]:u64
00000038: R2 := R31 + 8
0000003c: R6 := R31
00000040: R0 := 0x10000
00000044: R0 := mem[R0 + 0xFD8, el]:u64
00000048: R3 := 0
0000004c: R4 := 0
00000050: R30 := 0x630
00000053: call @__libc_start_main with return %00000055

00000055:
00000057: R30 := 0x634
0000005a: call @abort with return %00000252

00000252:
00000253: call @call_weak_fn with noreturn

00000254: sub abort()


00000058:
00000216: R16 := 0x11000
0000021a: R17 := mem[R16 + 0x18, el]:u64
0000021e: R16 := R16 + 0x18
00000222: call R17 with noreturn

00000255: sub call_weak_fn(call_weak_fn_result)
0000026d: call_weak_fn_result :: out u32 = R0

0000005c:
0000005e: R0 := 0x10000
00000062: R0 := mem[R0 + 0xFD0, el]:u64
0000006b: #6 := R0 = 0
00000067: when #6 goto %00000065
00000256: goto %000001c1

00000065:
0000006e: call R30 with noreturn

000001c1:
000001c4: call @__gmon_start__ with noreturn

00000257: sub deregister_tm_clones(deregister_tm_clones_result)
0000026e: deregister_tm_clones_result :: out u32 = R0

00000075:
00000077: R0 := 0x11000
0000007b: R0 := R0 + 0x30
0000007f: R1 := 0x11000
00000083: R1 := R1 + 0x30
00000087: #10 := 1 + ~R0 + R1
00000089: NF := extract:63:63[#10]
0000008b: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#10]
          | ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#10]
0000008d: ZF := #10 = 0
0000008f: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#10] | extract:63:63[R1] & ~extract:63:63[#10]
00000098: #12 := ZF
00000094: when #12 goto %00000092
00000258: goto %000001a8

000001a8:
000001aa: R1 := 0x10000
000001ae: R1 := mem[R1 + 0xFC0, el]:u64
000001b6: #44 := R1 = 0
000001b2: when #44 goto %00000092
00000259: goto %000001b8

00000092:
0000009b: call R30 with noreturn

000001b8:
000001ba: R16 := R1
000001be: call R16 with noreturn

0000025a: sub frame_dummy(frame_dummy_result)
0000026f: frame_dummy_result :: out u32 = R0

00000106:
00000108: call @register_tm_clones with noreturn

0000025b: sub get_two(get_two_result)
ENSURES: Gamma_R0_out == true
00000270: get_two_result :: out u32 = R0

0000012b:
00000130: R0 := 0
00000132: R0 := R0 & 0xFFFFFFFF00000000 | 2
00000136: call R30 with noreturn

0000025c: sub main(main_argc, main_argv, main_result)
00000271: main_argc :: in u32 = R0
00000272: main_argv :: in out u64 = R1
00000273: main_result :: out u32 = R0

0000010a:
0000010c: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000010e: mem := mem with [R31 - 8, el]:u64 <- R30
00000110: R31 := R31 - 0x10
00000114: R29 := R31
00000118: R0 := 0x11000
0000011c: R0 := R0 + 0x34
00000120: R1 := 0
00000122: R1 := R1 & 0xFFFFFFFF00000000 | 1
00000126: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
0000012a: R30 := 0x730
0000012d: call @get_two with return %00000139

00000139:
0000013b: #34 := extract:31:0[R0]
0000013d: R1 := 0
0000013f: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#34]
00000143: R0 := 0x11000
00000147: R0 := R0 + 0x38
0000014b: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
0000014f: R0 := 0
00000151: R0 := R0 & 0xFFFFFFFF00000000
00000155: R29 := mem[R31, el]:u64
00000157: R30 := mem[R31 + 8, el]:u64
00000159: R31 := R31 + 0x10
0000015d: call R30 with noreturn

0000025d: sub register_tm_clones(register_tm_clones_result)
00000274: register_tm_clones_result :: out u32 = R0

0000009e:
000000a0: R0 := 0x11000
000000a4: R0 := R0 + 0x30
000000a8: R1 := 0x11000
000000ac: R1 := R1 + 0x30
000000b0: R1 := R1 - R0
000000b4: R2 := R1 >> 0x3F
000000b8: R1 := R2 + (R1 ~>> 3)
000000bc: R1 := R1 >> 1
000000c5: #21 := R1 = 0
000000c1: when #21 goto %000000bf
0000025e: goto %0000018f

0000018f:
00000191: R2 := 0x10000
00000195: R2 := mem[R2 + 0xFE0, el]:u64
0000019d: #40 := R2 = 0
00000199: when #40 goto %000000bf
0000025f: goto %0000019f

000000bf:
000000c8: call R30 with noreturn

0000019f:
000001a1: R16 := R2
000001a5: call R16 with noreturn
