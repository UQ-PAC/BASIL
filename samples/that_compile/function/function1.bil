000002e9: program
000002cf: sub .plt(\.plt_result)
000002ea: \.plt_result :: out u32 = R0

0000023f:
00000241: mem := mem with [R31 - 0x10, el]:u64 <- R16
00000243: mem := mem with [R31 - 8, el]:u64 <- R30
00000245: R31 := R31 - 0x10
00000249: R16 := 0x10000
0000024d: R17 := mem[R16 + 0xFF8, el]:u64
00000251: R16 := R16 + 0xFF8
00000255: call R17 with noreturn

000002d0: sub __cxa_finalize(__cxa_finalize_result)
000002eb: __cxa_finalize_result :: out u32 = R0

00000204:
0000026f: R16 := 0x11000
00000273: R17 := mem[R16 + 8, el]:u64
00000277: R16 := R16 + 8
0000027b: call R17 with noreturn

000002d1: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000002ec: __do_global_dtors_aux_result :: out u32 = R0

000000cd:
000000cf: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000d1: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000d3: R31 := R31 - 0x20
000000d7: R29 := R31
000000db: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000df: R19 := 0x11000
000000e3: #24 := pad:64[mem[R19 + 0x38]]
000000e5: R0 := 0
000000e7: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#24]
000000f0: #25 := extract:31:0[R0] <> 0
000000ec: when #25 goto %000000ea
000002d2: goto %000001d9

000001d9:
000001db: R0 := 0x10000
000001df: R0 := mem[R0 + 0xFC8, el]:u64
000001e8: #56 := R0 = 0
000001e4: when #56 goto %000001e2
000002d3: goto %000001f9

000001f9:
000001fb: R0 := 0x11000
000001ff: R0 := mem[R0 + 0x30, el]:u64
00000203: R30 := 0x730
00000206: call @__cxa_finalize with return %000001e2

000001e2:
000001eb: R30 := 0x734
000001ed: call @deregister_tm_clones with return %000001ef

000001ef:
000001f1: R0 := 0
000001f3: R0 := R0 & 0xFFFFFFFF00000000 | 1
000001f7: mem := mem with [R19 + 0x38] <- low:8[extract:31:0[R0]]
000002d4: goto %000000ea

000000ea:
000000f3: R19 := mem[R31 + 0x10, el]:u64
000000f7: R29 := mem[R31, el]:u64
000000f9: R30 := mem[R31 + 8, el]:u64
000000fb: R31 := R31 + 0x20
000000ff: call R30 with noreturn

000002d5: sub __gmon_start__(__gmon_start___result)
000002ed: __gmon_start___result :: out u32 = R0

0000023b:
0000027f: R16 := 0x11000
00000283: R17 := mem[R16 + 0x10, el]:u64
00000287: R16 := R16 + 0x10
0000028b: call R17 with noreturn

000002d6: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000002ee: __libc_start_main_main :: in u64 = R0
000002ef: __libc_start_main_arg2 :: in u32 = R1
000002f0: __libc_start_main_arg3 :: in out u64 = R2
000002f1: __libc_start_main_auxv :: in out u64 = R3
000002f2: __libc_start_main_result :: out u32 = R0

00000051:
0000025f: R16 := 0x11000
00000263: R17 := mem[R16, el]:u64
00000267: R16 := R16
0000026b: call R17 with noreturn

000002d7: sub _fini(_fini_result)
000002f3: _fini_result :: out u32 = R0

00000009:
0000000d: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000f: mem := mem with [R31 - 8, el]:u64 <- R30
00000011: R31 := R31 - 0x10
00000015: R29 := R31
00000019: R29 := mem[R31, el]:u64
0000001b: R30 := mem[R31 + 8, el]:u64
0000001d: R31 := R31 + 0x10
00000021: call R30 with noreturn

000002d8: sub _init(_init_result)
000002f4: _init_result :: out u32 = R0

000002ae:
000002b2: mem := mem with [R31 - 0x10, el]:u64 <- R29
000002b4: mem := mem with [R31 - 8, el]:u64 <- R30
000002b6: R31 := R31 - 0x10
000002ba: R29 := R31
000002be: R30 := 0x5C8
000002c0: call @call_weak_fn with return %000002c2

000002c2:
000002c4: R29 := mem[R31, el]:u64
000002c6: R30 := mem[R31 + 8, el]:u64
000002c8: R31 := R31 + 0x10
000002cc: call R30 with noreturn

000002d9: sub _start(_start_result)
000002f5: _start_result :: out u32 = R0

00000024:
00000028: R29 := 0
0000002c: R30 := 0
00000030: R5 := R0
00000034: R1 := mem[R31, el]:u64
00000038: R2 := R31 + 8
0000003c: R6 := R31
00000040: R0 := 0x10000
00000044: R0 := mem[R0 + 0xFD8, el]:u64
00000048: R3 := 0
0000004c: R4 := 0
00000050: R30 := 0x670
00000053: call @__libc_start_main with return %00000055

00000055:
00000057: R30 := 0x674
0000005a: call @abort with return %000002da

000002da:
000002db: call @call_weak_fn with noreturn

000002dc: sub abort()


00000058:
0000028f: R16 := 0x11000
00000293: R17 := mem[R16 + 0x18, el]:u64
00000297: R16 := R16 + 0x18
0000029b: call R17 with noreturn

000002dd: sub call_weak_fn(call_weak_fn_result)
000002f6: call_weak_fn_result :: out u32 = R0

0000005c:
0000005e: R0 := 0x10000
00000062: R0 := mem[R0 + 0xFD0, el]:u64
0000006b: #6 := R0 = 0
00000067: when #6 goto %00000065
000002de: goto %0000023a

00000065:
0000006e: call R30 with noreturn

0000023a:
0000023d: call @__gmon_start__ with noreturn

000002df: sub deregister_tm_clones(deregister_tm_clones_result)
000002f7: deregister_tm_clones_result :: out u32 = R0

00000075:
00000077: R0 := 0x11000
0000007b: R0 := R0 + 0x38
0000007f: R1 := 0x11000
00000083: R1 := R1 + 0x38
00000087: #10 := 1 + ~R0 + R1
00000089: NF := extract:63:63[#10]
0000008b: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#10]
          | ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#10]
0000008d: ZF := #10 = 0
0000008f: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#10] | extract:63:63[R1] & ~extract:63:63[#10]
00000098: #12 := ZF
00000094: when #12 goto %00000092
000002e0: goto %00000221

00000221:
00000223: R1 := 0x10000
00000227: R1 := mem[R1 + 0xFC0, el]:u64
0000022f: #62 := R1 = 0
0000022b: when #62 goto %00000092
000002e1: goto %00000231

00000092:
0000009b: call R30 with noreturn

00000231:
00000233: R16 := R1
00000237: call R16 with noreturn

000002e2: sub frame_dummy(frame_dummy_result)
000002f8: frame_dummy_result :: out u32 = R0

00000106:
00000108: call @register_tm_clones with noreturn

000002e3: sub get_two(get_two_result)
000002f9: get_two_result :: out u32 = R0

0000010a:
0000010c: R31 := R31 - 0x10
00000110: mem := mem with [R31 + 0xF] <- low:8[extract:31:0[R0]]
00000114: mem := mem with [R31 + 8, el]:u32 <- low:32[extract:31:0[R1]]
00000118: mem := mem with [R31, el]:u64 <- R2
0000011c: #29 := pad:64[mem[R31 + 0xF]]
0000011e: R1 := 0
00000120: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#29]
00000124: #30 := pad:64[mem[R31 + 8, el]:u32]
00000126: R0 := 0
00000128: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#30]
0000012c: #31 := extend:64[extract:31:0[R1]] + extend:64[extract:31:0[R0]]
0000012e: R0 := 0
00000130: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#31]
00000134: #35 := extract:31:0[R0]
00000136: R1 := 0
00000138: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#35]
0000013c: R0 := mem[R31, el]:u64
00000140: #36 := extend:64[extract:31:0[R1]] + extend:64[extract:31:0[R0]]
00000142: R0 := 0
00000144: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#36]
00000148: R31 := R31 + 0x10
0000014c: call R30 with noreturn

000002e4: sub main(main_argc, main_argv, main_result)
000002fa: main_argc :: in u32 = R0
000002fb: main_argv :: in out u64 = R1
000002fc: main_result :: out u32 = R0

0000014f:
00000151: mem := mem with [R31 - 0x10, el]:u64 <- R29
00000153: mem := mem with [R31 - 8, el]:u64 <- R30
00000155: R31 := R31 - 0x10
00000159: R29 := R31
0000015d: R0 := 0x11000
00000161: R0 := R0 + 0x3C
00000165: R1 := 0
00000167: R1 := R1 & 0xFFFFFFFF00000000 | 1
0000016b: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
0000016f: R2 := 0xE400
00000173: R2 := R2 & 0xFFFFFFFF0000FFFF | 0x540B0000
00000177: R2 := R2 & 0xFFFF0000FFFFFFFF | 0x200000000
0000017b: R1 := 0
0000017d: R1 := R1 & 0xFFFFFFFF00000000 | 0xA
00000181: R0 := 0
00000183: R0 := R0 & 0xFFFFFFFF00000000 | 0x61
00000187: R30 := 0x7B4
00000189: call @get_two with return %0000018b

0000018b:
0000018d: #47 := extract:31:0[R0]
0000018f: R1 := 0
00000191: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#47]
00000195: R0 := 0x11000
00000199: R0 := R0 + 0x40
0000019d: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
000001a1: R0 := 0x11000
000001a5: R0 := R0 + 0x40
000001a9: #49 := pad:64[mem[R0, el]:u32]
000001ab: R0 := 0
000001ad: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#49]
000001b1: #53 := extract:31:0[R0]
000001b3: R1 := 0
000001b5: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#53]
000001b9: R0 := 0
000001bd: R0 := R0 + 0x808
000001c1: R30 := 0x7E0
000001c4: call @printf with return %000001c6

000001c6:
000001c8: R0 := 0
000001ca: R0 := R0 & 0xFFFFFFFF00000000
000001ce: R29 := mem[R31, el]:u64
000001d0: R30 := mem[R31 + 8, el]:u64
000001d2: R31 := R31 + 0x10
000001d6: call R30 with noreturn

000002e5: sub printf(printf_format, printf_result)
000002fd: printf_format :: in u64 = R0
000002fe: printf_result :: out u32 = R0

000001c2:
0000029f: R16 := 0x11000
000002a3: R17 := mem[R16 + 0x20, el]:u64
000002a7: R16 := R16 + 0x20
000002ab: call R17 with noreturn

000002e6: sub register_tm_clones(register_tm_clones_result)
000002ff: register_tm_clones_result :: out u32 = R0

0000009e:
000000a0: R0 := 0x11000
000000a4: R0 := R0 + 0x38
000000a8: R1 := 0x11000
000000ac: R1 := R1 + 0x38
000000b0: R1 := R1 - R0
000000b4: R2 := R1 >> 0x3F
000000b8: R1 := R2 + (R1 ~>> 3)
000000bc: R1 := R1 >> 1
000000c5: #21 := R1 = 0
000000c1: when #21 goto %000000bf
000002e7: goto %00000208

00000208:
0000020a: R2 := 0x10000
0000020e: R2 := mem[R2 + 0xFE0, el]:u64
00000216: #58 := R2 = 0
00000212: when #58 goto %000000bf
000002e8: goto %00000218

000000bf:
000000c8: call R30 with noreturn

00000218:
0000021a: R16 := R2
0000021e: call R16 with noreturn
