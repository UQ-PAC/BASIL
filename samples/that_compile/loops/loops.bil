0000026e: program
00000254: sub .plt(\.plt_result)
0000026f: \.plt_result :: out u32 = R0

000001d3:
000001d5: mem := mem with [R31 - 0x10, el]:u64 <- R16
000001d7: mem := mem with [R31 - 8, el]:u64 <- R30
000001d9: R31 := R31 - 0x10
000001dd: R16 := 0x10000
000001e1: R17 := mem[R16 + 0xFF8, el]:u64
000001e5: R16 := R16 + 0xFF8
000001e9: call R17 with noreturn

00000255: sub __cxa_finalize(__cxa_finalize_result)
00000270: __cxa_finalize_result :: out u32 = R0

00000198:
00000203: R16 := 0x11000
00000207: R17 := mem[R16 + 8, el]:u64
0000020b: R16 := R16 + 8
0000020f: call R17 with noreturn

00000256: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000271: __do_global_dtors_aux_result :: out u32 = R0

000000cd:
000000cf: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000d1: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000d3: R31 := R31 - 0x20
000000d7: R29 := R31
000000db: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000df: R19 := 0x11000
000000e3: #24 := pad:64[mem[R19 + 0x30]]
000000e5: R0 := 0
000000e7: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#24]
000000f0: #25 := extract:31:0[R0] <> 0
000000ec: when #25 goto %000000ea
00000257: goto %0000016d

0000016d:
0000016f: R0 := 0x10000
00000173: R0 := mem[R0 + 0xFC8, el]:u64
0000017c: #36 := R0 = 0
00000178: when #36 goto %00000176
00000258: goto %0000018d

0000018d:
0000018f: R0 := 0x11000
00000193: R0 := mem[R0 + 0x28, el]:u64
00000197: R30 := 0x6F0
0000019a: call @__cxa_finalize with return %00000176

00000176:
0000017f: R30 := 0x6F4
00000181: call @deregister_tm_clones with return %00000183

00000183:
00000185: R0 := 0
00000187: R0 := R0 & 0xFFFFFFFF00000000 | 1
0000018b: mem := mem with [R19 + 0x30] <- low:8[extract:31:0[R0]]
00000259: goto %000000ea

000000ea:
000000f3: R19 := mem[R31 + 0x10, el]:u64
000000f7: R29 := mem[R31, el]:u64
000000f9: R30 := mem[R31 + 8, el]:u64
000000fb: R31 := R31 + 0x20
000000ff: call R30 with noreturn

0000025a: sub __gmon_start__(__gmon_start___result)
00000272: __gmon_start___result :: out u32 = R0

000001cf:
00000213: R16 := 0x11000
00000217: R17 := mem[R16 + 0x10, el]:u64
0000021b: R16 := R16 + 0x10
0000021f: call R17 with noreturn

0000025b: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000273: __libc_start_main_main :: in u64 = R0
00000274: __libc_start_main_arg2 :: in u32 = R1
00000275: __libc_start_main_arg3 :: in out u64 = R2
00000276: __libc_start_main_auxv :: in out u64 = R3
00000277: __libc_start_main_result :: out u32 = R0

00000051:
000001f3: R16 := 0x11000
000001f7: R17 := mem[R16, el]:u64
000001fb: R16 := R16
000001ff: call R17 with noreturn

0000025c: sub _fini(_fini_result)
00000278: _fini_result :: out u32 = R0

00000009:
0000000d: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000f: mem := mem with [R31 - 8, el]:u64 <- R30
00000011: R31 := R31 - 0x10
00000015: R29 := R31
00000019: R29 := mem[R31, el]:u64
0000001b: R30 := mem[R31 + 8, el]:u64
0000001d: R31 := R31 + 0x10
00000021: call R30 with noreturn

0000025d: sub _init(_init_result)
00000279: _init_result :: out u32 = R0

00000232:
00000236: mem := mem with [R31 - 0x10, el]:u64 <- R29
00000238: mem := mem with [R31 - 8, el]:u64 <- R30
0000023a: R31 := R31 - 0x10
0000023e: R29 := R31
00000242: R30 := 0x590
00000244: call @call_weak_fn with return %00000246

00000246:
00000248: R29 := mem[R31, el]:u64
0000024a: R30 := mem[R31 + 8, el]:u64
0000024c: R31 := R31 + 0x10
00000250: call R30 with noreturn

0000025e: sub _start(_start_result)
0000027a: _start_result :: out u32 = R0

00000024:
00000028: R29 := 0
0000002c: R30 := 0
00000030: R5 := R0
00000034: R1 := mem[R31, el]:u64
00000038: R2 := R31 + 8
0000003c: R6 := R31
00000040: R0 := 0x10000
00000044: R0 := mem[R0 + 0xFD8, el]:u64
00000048: R3 := 0
0000004c: R4 := 0
00000050: R30 := 0x630
00000053: call @__libc_start_main with return %00000055

00000055:
00000057: R30 := 0x634
0000005a: call @abort with return %0000025f

0000025f:
00000260: call @call_weak_fn with noreturn

00000261: sub abort()


00000058:
00000223: R16 := 0x11000
00000227: R17 := mem[R16 + 0x18, el]:u64
0000022b: R16 := R16 + 0x18
0000022f: call R17 with noreturn

00000262: sub call_weak_fn(call_weak_fn_result)
0000027b: call_weak_fn_result :: out u32 = R0

0000005c:
0000005e: R0 := 0x10000
00000062: R0 := mem[R0 + 0xFD0, el]:u64
0000006b: #6 := R0 = 0
00000067: when #6 goto %00000065
00000263: goto %000001ce

00000065:
0000006e: call R30 with noreturn

000001ce:
000001d1: call @__gmon_start__ with noreturn

00000264: sub deregister_tm_clones(deregister_tm_clones_result)
0000027c: deregister_tm_clones_result :: out u32 = R0

00000075:
00000077: R0 := 0x11000
0000007b: R0 := R0 + 0x30
0000007f: R1 := 0x11000
00000083: R1 := R1 + 0x30
00000087: #10 := 1 + ~R0 + R1
00000089: NF := extract:63:63[#10]
0000008b: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#10]
          | ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#10]
0000008d: ZF := #10 = 0
0000008f: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#10] | extract:63:63[R1] & ~extract:63:63[#10]
00000098: #12 := ZF
00000094: when #12 goto %00000092
00000265: goto %000001b5

000001b5:
000001b7: R1 := 0x10000
000001bb: R1 := mem[R1 + 0xFC0, el]:u64
000001c3: #42 := R1 = 0
000001bf: when #42 goto %00000092
00000266: goto %000001c5

00000092:
0000009b: call R30 with noreturn

000001c5:
000001c7: R16 := R1
000001cb: call R16 with noreturn

00000267: sub frame_dummy(frame_dummy_result)
0000027d: frame_dummy_result :: out u32 = R0

00000106:
00000108: call @register_tm_clones with noreturn

00000268: sub main(main_argc, main_argv, main_result)
0000027e: main_argc :: in u32 = R0
0000027f: main_argv :: in out u64 = R1
00000280: main_result :: out u32 = R0

0000010a:
0000010c: R0 := 0x11000
00000110: R0 := R0 + 0x34
00000114: mem := mem with [R0, el]:u32 <- 0
00000119: goto %00000117

00000117:
0000011c: R0 := 0x11000
00000120: R0 := R0 + 0x34
00000124: #28 := pad:64[mem[R0, el]:u32]
00000126: R0 := 0
00000128: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
0000012c: #29 := 0xFFFFFFFFFFFFFFFC + extend:64[extract:31:0[R0]]
0000012e: NF := extract:63:63[#29]
00000130: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#29]
00000132: ZF := #29 = 0
00000134: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#29] |
          ~extract:63:63[#29]
0000013d: #31 := (NF <> VF | ZF) <> 0
00000139: when #31 goto %00000137
00000269: goto %00000162

00000162:
00000164: R0 := 0
00000166: R0 := R0 & 0xFFFFFFFF00000000
0000016a: call R30 with noreturn

00000137:
00000140: R0 := 0x11000
00000144: R0 := R0 + 0x34
00000148: #32 := pad:64[mem[R0, el]:u32]
0000014a: R0 := 0
0000014c: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#32]
00000150: #33 := extend:64[extract:31:0[R0]] + 1
00000152: R1 := 0
00000154: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#33]
00000158: R0 := 0x11000
0000015c: R0 := R0 + 0x34
00000160: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
0000026a: goto %00000117

0000026b: sub register_tm_clones(register_tm_clones_result)
00000281: register_tm_clones_result :: out u32 = R0

0000009e:
000000a0: R0 := 0x11000
000000a4: R0 := R0 + 0x30
000000a8: R1 := 0x11000
000000ac: R1 := R1 + 0x30
000000b0: R1 := R1 - R0
000000b4: R2 := R1 >> 0x3F
000000b8: R1 := R2 + (R1 ~>> 3)
000000bc: R1 := R1 >> 1
000000c5: #21 := R1 = 0
000000c1: when #21 goto %000000bf
0000026c: goto %0000019c

0000019c:
0000019e: R2 := 0x10000
000001a2: R2 := mem[R2 + 0xFE0, el]:u64
000001aa: #38 := R2 = 0
000001a6: when #38 goto %000000bf
0000026d: goto %000001ac

000000bf:
000000c8: call R30 with noreturn

000001ac:
000001ae: R16 := R2
000001b2: call R16 with noreturn
