00000290: program
// 00000278: sub .plt(\.plt_result)
// 00000291: \.plt_result :: out u32 = R0

// 000001f7:
// 000001f9: mem := mem with [R31 - 0x10, el]:u64 <- R16
// 000001fb: mem := mem with [R31 - 8, el]:u64 <- R30
// 000001fd: R31 := R31 - 0x10
// 00000201: R16 := 0x10000
// 00000205: R17 := mem[R16 + 0xFF8, el]:u64
// 00000209: R16 := R16 + 0xFF8
// 0000020d: call R17 with noreturn

00000279: sub __cxa_finalize(__cxa_finalize_result)
00000292: __cxa_finalize_result :: out u32 = R0

000001bc:
00000227: R16 := 0x11000
0000022b: R17 := mem[R16 + 8, el]:u64
0000022f: R16 := R16 + 8
00000233: call R17 with noreturn

0000027a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000293: __do_global_dtors_aux_result :: out u32 = R0

000000cd:
000000cf: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000d1: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000d3: R31 := R31 - 0x20
000000d7: R29 := R31
000000db: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000df: R19 := 0x11000
000000e3: #24 := pad:64[mem[R19 + 0x30]]
000000e5: R0 := 0
000000e7: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#24]
000000f0: #25 := extract:31:0[R0] <> 0
000000ec: when #25 goto %000000ea
0000027b: goto %00000191

00000191:
00000193: R0 := 0x10000
00000197: R0 := mem[R0 + 0xFC8, el]:u64
000001a0: #37 := R0 = 0
0000019c: when #37 goto %0000019a
0000027c: goto %000001b1

000001b1:
000001b3: R0 := 0x11000
000001b7: R0 := mem[R0 + 0x28, el]:u64
000001bb: R30 := 0x6F0
000001be: call @__cxa_finalize with return %0000019a

0000019a:
000001a3: R30 := 0x6F4
000001a5: call @deregister_tm_clones with return %000001a7

000001a7:
000001a9: R0 := 0
000001ab: R0 := R0 & 0xFFFFFFFF00000000 | 1
000001af: mem := mem with [R19 + 0x30] <- low:8[extract:31:0[R0]]
0000027d: goto %000000ea

000000ea:
000000f3: R19 := mem[R31 + 0x10, el]:u64
000000f7: R29 := mem[R31, el]:u64
000000f9: R30 := mem[R31 + 8, el]:u64
000000fb: R31 := R31 + 0x20
000000ff: call R30 with noreturn

0000027e: sub __gmon_start__(__gmon_start___result)
00000294: __gmon_start___result :: out u32 = R0

000001f3:
00000237: R16 := 0x11000
0000023b: R17 := mem[R16 + 0x10, el]:u64
0000023f: R16 := R16 + 0x10
00000243: call R17 with noreturn

0000027f: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000295: __libc_start_main_main :: in u64 = R0
00000296: __libc_start_main_arg2 :: in u32 = R1
00000297: __libc_start_main_arg3 :: in out u64 = R2
00000298: __libc_start_main_auxv :: in out u64 = R3
00000299: __libc_start_main_result :: out u32 = R0

00000051:
00000217: R16 := 0x11000
0000021b: R17 := mem[R16, el]:u64
0000021f: R16 := R16
00000223: call R17 with noreturn

00000280: sub _fini(_fini_result)
0000029a: _fini_result :: out u32 = R0

00000009:
0000000d: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000f: mem := mem with [R31 - 8, el]:u64 <- R30
00000011: R31 := R31 - 0x10
00000015: R29 := R31
00000019: R29 := mem[R31, el]:u64
0000001b: R30 := mem[R31 + 8, el]:u64
0000001d: R31 := R31 + 0x10
00000021: call R30 with noreturn

00000281: sub _init(_init_result)
0000029b: _init_result :: out u32 = R0

00000256:
0000025a: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000025c: mem := mem with [R31 - 8, el]:u64 <- R30
0000025e: R31 := R31 - 0x10
00000262: R29 := R31
00000266: R30 := 0x590
00000268: call @call_weak_fn with return %0000026a

0000026a:
0000026c: R29 := mem[R31, el]:u64
0000026e: R30 := mem[R31 + 8, el]:u64
00000270: R31 := R31 + 0x10
00000274: call R30 with noreturn

00000282: sub _start(_start_result)
0000029c: _start_result :: out u32 = R0

00000024:
00000028: R29 := 0
0000002c: R30 := 0
00000030: R5 := R0
00000034: R1 := mem[R31, el]:u64
00000038: R2 := R31 + 8
0000003c: R6 := R31
00000040: R0 := 0x10000
00000044: R0 := mem[R0 + 0xFD8, el]:u64
00000048: R3 := 0
0000004c: R4 := 0
00000050: R30 := 0x630
00000053: call @__libc_start_main with return %00000055

00000055:
00000057: R30 := 0x634
0000005a: call @abort with return %00000283

00000283:
00000284: call @call_weak_fn with noreturn

00000285: sub abort()


00000058:
00000247: R16 := 0x11000
0000024b: R17 := mem[R16 + 0x18, el]:u64
0000024f: R16 := R16 + 0x18
00000253: call R17 with noreturn

00000286: sub call_weak_fn(call_weak_fn_result)
0000029d: call_weak_fn_result :: out u32 = R0

0000005c:
0000005e: R0 := 0x10000
00000062: R0 := mem[R0 + 0xFD0, el]:u64
0000006b: #6 := R0 = 0
00000067: when #6 goto %00000065
00000287: goto %000001f2

00000065:
0000006e: call R30 with noreturn

000001f2:
000001f5: call @__gmon_start__ with noreturn

00000288: sub deregister_tm_clones(deregister_tm_clones_result)
0000029e: deregister_tm_clones_result :: out u32 = R0

00000075:
00000077: R0 := 0x11000
0000007b: R0 := R0 + 0x30
0000007f: R1 := 0x11000
00000083: R1 := R1 + 0x30
00000087: #10 := 1 + ~R0 + R1
00000089: NF := extract:63:63[#10]
0000008b: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#10]
          | ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#10]
0000008d: ZF := #10 = 0
0000008f: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#10] | extract:63:63[R1] & ~extract:63:63[#10]
00000098: #12 := ZF
00000094: when #12 goto %00000092
00000289: goto %000001d9

000001d9:
000001db: R1 := 0x10000
000001df: R1 := mem[R1 + 0xFC0, el]:u64
000001e7: #43 := R1 = 0
000001e3: when #43 goto %00000092
0000028a: goto %000001e9

00000092:
0000009b: call R30 with noreturn

000001e9:
000001eb: R16 := R1
000001ef: call R16 with noreturn

0000028b: sub frame_dummy(frame_dummy_result)
0000029f: frame_dummy_result :: out u32 = R0

00000106:
00000108: call @register_tm_clones with noreturn

0000028c: sub main(main_argc, main_argv, main_result)
000002a0: main_argc :: in u32 = R0
000002a1: main_argv :: in out u64 = R1
000002a2: main_result :: out u32 = R0

0000010a:
0000010c: R0 := 0x11000
00000110: R0 := R0 + 0x3C
00000114: #27 := pad:64[mem[R0, el]:u32]
00000116: R1 := 0
00000118: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#27]
0000011c: R0 := 0x11000
00000120: R0 := R0 + 0x34
00000124: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000128: R0 := 0x11000
0000012c: R0 := R0 + 0x34
00000130: mem := mem with [R0, el]:u32 <- 0
00000134: R0 := 0x11000
00000138: R0 := R0 + 0x34
0000013c: #30 := pad:64[mem[R0, el]:u32]
0000013e: R1 := 0
00000140: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#30]
00000144: R0 := 0x11000
00000148: R0 := R0 + 0x38
0000014c: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000150: R0 := 0x11000
00000154: R0 := R0 + 0x3C
00000158: #32 := pad:64[mem[R0, el]:u32]
0000015a: R1 := 0
0000015c: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#32]
00000160: R0 := 0x11000
00000164: R0 := R0 + 0x34
00000168: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
0000016c: R0 := 0x11000
00000170: R0 := R0 + 0x34
00000174: #34 := pad:64[mem[R0, el]:u32]
00000176: R1 := 0
00000178: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#34]
0000017c: R0 := 0x11000
00000180: R0 := R0 + 0x38
00000184: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000188: R0 := 0
0000018a: R0 := R0 & 0xFFFFFFFF00000000
0000018e: call R30 with noreturn

0000028d: sub register_tm_clones(register_tm_clones_result)
000002a3: register_tm_clones_result :: out u32 = R0

0000009e:
000000a0: R0 := 0x11000
000000a4: R0 := R0 + 0x30
000000a8: R1 := 0x11000
000000ac: R1 := R1 + 0x30
000000b0: R1 := R1 - R0
000000b4: R2 := R1 >> 0x3F
000000b8: R1 := R2 + (R1 ~>> 3)
000000bc: R1 := R1 >> 1
000000c5: #21 := R1 = 0
000000c1: when #21 goto %000000bf
0000028e: goto %000001c0

000001c0:
000001c2: R2 := 0x10000
000001c6: R2 := mem[R2 + 0xFE0, el]:u64
000001ce: #39 := R2 = 0
000001ca: when #39 goto %000000bf
0000028f: goto %000001d0

000000bf:
000000c8: call R30 with noreturn

000001d0:
000001d2: R16 := R2
000001d6: call R16 with noreturn
