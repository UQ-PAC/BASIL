L: z -> TRUE
00000270: program
00000258: sub .plt(\.plt_result)
00000271: \.plt_result :: out u32 = R0

000001d7:
000001d9: mem := mem with [R31 - 0x10, el]:u64 <- R16
000001db: mem := mem with [R31 - 8, el]:u64 <- R30
000001dd: R31 := R31 - 0x10
000001e1: R16 := 0x10000
000001e5: R17 := mem[R16 + 0xFF8, el]:u64
000001e9: R16 := R16 + 0xFF8
000001ed: call R17 with noreturn

00000259: sub __cxa_finalize(__cxa_finalize_result)
00000272: __cxa_finalize_result :: out u32 = R0

0000019c:
00000207: R16 := 0x11000
0000020b: R17 := mem[R16 + 8, el]:u64
0000020f: R16 := R16 + 8
00000213: call R17 with noreturn

0000025a: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000273: __do_global_dtors_aux_result :: out u32 = R0

000000cd:
000000cf: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000d1: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000d3: R31 := R31 - 0x20
000000d7: R29 := R31
000000db: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000df: R19 := 0x11000
000000e3: #24 := pad:64[mem[R19 + 0x30]]
000000e5: R0 := 0
000000e7: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#24]
000000f0: #25 := extract:31:0[R0] <> 0
000000ec: when #25 goto %000000ea
0000025b: goto %00000171

00000171:
00000173: R0 := 0x10000
00000177: R0 := mem[R0 + 0xFC8, el]:u64
00000180: #37 := R0 = 0
0000017c: when #37 goto %0000017a
0000025c: goto %00000191

00000191:
00000193: R0 := 0x11000
00000197: R0 := mem[R0 + 0x28, el]:u64
0000019b: R30 := 0x6F0
0000019e: call @__cxa_finalize with return %0000017a

0000017a:
00000183: R30 := 0x6F4
00000185: call @deregister_tm_clones with return %00000187

00000187:
00000189: R0 := 0
0000018b: R0 := R0 & 0xFFFFFFFF00000000 | 1
// 0000018f: mem := mem with [R19 + 0x30] <- low:8[extract:31:0[R0]]
0000025d: goto %000000ea

000000ea:
000000f3: R19 := mem[R31 + 0x10, el]:u64
000000f7: R29 := mem[R31, el]:u64
000000f9: R30 := mem[R31 + 8, el]:u64
000000fb: R31 := R31 + 0x20
000000ff: call R30 with noreturn

0000025e: sub __gmon_start__(__gmon_start___result)
00000274: __gmon_start___result :: out u32 = R0

000001d3:
00000217: R16 := 0x11000
0000021b: R17 := mem[R16 + 0x10, el]:u64
0000021f: R16 := R16 + 0x10
00000223: call R17 with noreturn

0000025f: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000275: __libc_start_main_main :: in u64 = R0
00000276: __libc_start_main_arg2 :: in u32 = R1
00000277: __libc_start_main_arg3 :: in out u64 = R2
00000278: __libc_start_main_auxv :: in out u64 = R3
00000279: __libc_start_main_result :: out u32 = R0

00000051:
000001f7: R16 := 0x11000
000001fb: R17 := mem[R16, el]:u64
000001ff: R16 := R16
00000203: call R17 with noreturn

00000260: sub _fini(_fini_result)
0000027a: _fini_result :: out u32 = R0

00000009:
0000000d: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000f: mem := mem with [R31 - 8, el]:u64 <- R30
00000011: R31 := R31 - 0x10
00000015: R29 := R31
00000019: R29 := mem[R31, el]:u64
0000001b: R30 := mem[R31 + 8, el]:u64
0000001d: R31 := R31 + 0x10
00000021: call R30 with noreturn

00000261: sub _init(_init_result)
0000027b: _init_result :: out u32 = R0

00000236:
0000023a: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000023c: mem := mem with [R31 - 8, el]:u64 <- R30
0000023e: R31 := R31 - 0x10
00000242: R29 := R31
00000246: R30 := 0x590
00000248: call @call_weak_fn with return %0000024a

0000024a:
0000024c: R29 := mem[R31, el]:u64
0000024e: R30 := mem[R31 + 8, el]:u64
00000250: R31 := R31 + 0x10
00000254: call R30 with noreturn

00000262: sub _start(_start_result)
0000027c: _start_result :: out u32 = R0

00000024:
00000028: R29 := 0
0000002c: R30 := 0
00000030: R5 := R0
00000034: R1 := mem[R31, el]:u64
00000038: R2 := R31 + 8
0000003c: R6 := R31
00000040: R0 := 0x10000
00000044: R0 := mem[R0 + 0xFD8, el]:u64
00000048: R3 := 0
0000004c: R4 := 0
00000050: R30 := 0x630
00000053: call @__libc_start_main with return %00000055

00000055:
00000057: R30 := 0x634
0000005a: call @abort with return %00000263

00000263:
00000264: call @call_weak_fn with noreturn

00000265: sub abort()


00000058:
00000227: R16 := 0x11000
0000022b: R17 := mem[R16 + 0x18, el]:u64
0000022f: R16 := R16 + 0x18
00000233: call R17 with noreturn

00000266: sub call_weak_fn(call_weak_fn_result)
0000027d: call_weak_fn_result :: out u32 = R0

0000005c:
0000005e: R0 := 0x10000
00000062: R0 := mem[R0 + 0xFD0, el]:u64
0000006b: #6 := R0 = 0
00000067: when #6 goto %00000065
00000267: goto %000001d2

00000065:
0000006e: call R30 with noreturn

000001d2:
000001d5: call @__gmon_start__ with noreturn

00000268: sub deregister_tm_clones(deregister_tm_clones_result)
0000027e: deregister_tm_clones_result :: out u32 = R0

00000075:
00000077: R0 := 0x11000
0000007b: R0 := R0 + 0x30
0000007f: R1 := 0x11000
00000083: R1 := R1 + 0x30
00000087: #10 := 1 + ~R0 + R1
00000089: NF := extract:63:63[#10]
0000008b: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#10]
          | ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#10]
0000008d: ZF := #10 = 0
0000008f: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#10] | extract:63:63[R1] & ~extract:63:63[#10]
00000098: #12 := ZF
00000094: when #12 goto %00000092
00000269: goto %000001b9

000001b9:
000001bb: R1 := 0x10000
000001bf: R1 := mem[R1 + 0xFC0, el]:u64
000001c7: #43 := R1 = 0
000001c3: when #43 goto %00000092
0000026a: goto %000001c9

00000092:
0000009b: call R30 with noreturn

000001c9:
000001cb: R16 := R1
000001cf: call R16 with noreturn

0000026b: sub frame_dummy(frame_dummy_result)
0000027f: frame_dummy_result :: out u32 = R0

00000106:
00000108: call @register_tm_clones with noreturn

0000026c: sub main(main_argc, main_argv, main_result)
00000280: main_argc :: in u32 = R0
00000281: main_argv :: in out u64 = R1
00000282: main_result :: out u32 = R0

0000010a:
0000010c: R31 := R31 - 0x10
00000110: R0 := 0x11000
00000114: R0 := R0 + 0x38
00000118: #27 := pad:64[mem[R0, el]:u32]
0000011a: R0 := 0
0000011c: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#27]
00000120: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]  // x = secret
00000124: mem := mem with [R31 + 0xC, el]:u32 <- 0  // x = 0
00000128: R0 := 0x11000
0000012c: R0 := R0 + 0x34
00000130: #30 := pad:64[mem[R31 + 0xC, el]:u32]
00000132: R1 := 0
00000134: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#30]
00000138: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]  // z = x
0000013c: R0 := 0x11000
00000140: R0 := R0 + 0x38
00000144: #32 := pad:64[mem[R0, el]:u32]
00000146: R0 := 0
00000148: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#32]
0000014c: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]  // x = secret
00000150: R0 := 0x11000
00000154: R0 := R0 + 0x34
00000158: #34 := pad:64[mem[R31 + 0xC, el]:u32]
0000015a: R1 := 0
0000015c: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#34]
00000160: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]  // unsafe: z = x
00000164: R0 := 0
00000166: R0 := R0 & 0xFFFFFFFF00000000
0000016a: R31 := R31 + 0x10
0000016e: call R30 with noreturn

0000026d: sub register_tm_clones(register_tm_clones_result)
00000283: register_tm_clones_result :: out u32 = R0

0000009e:
000000a0: R0 := 0x11000
000000a4: R0 := R0 + 0x30
000000a8: R1 := 0x11000
000000ac: R1 := R1 + 0x30
000000b0: R1 := R1 - R0
000000b4: R2 := R1 >> 0x3F
// 000000b8: R1 := R2 + (R1 ~>> 3)
000000bc: R1 := R1 >> 1
000000c5: #21 := R1 = 0
000000c1: when #21 goto %000000bf
0000026e: goto %000001a0

000001a0:
000001a2: R2 := 0x10000
000001a6: R2 := mem[R2 + 0xFE0, el]:u64
000001ae: #39 := R2 = 0
000001aa: when #39 goto %000000bf
0000026f: goto %000001b0

000000bf:
000000c8: call R30 with noreturn

000001b0:
000001b2: R16 := R2
000001b6: call R16 with noreturn
