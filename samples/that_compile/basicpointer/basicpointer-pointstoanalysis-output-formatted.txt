Map(
	return; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	X0 := 4; -> Map(
		FP -> 								Set((SP) - (32)),
		stack[(SP) - (24)] -> 				Set(null),
		SP -> 								Set((SP) - (32)),
		stack[(SP) - (32)] -> 				Set((SP) - (32)),
		X0 -> 								Set(alloc),
		LR -> 								Set(null)

	SP := (SP) - (32); -> Map(
		FP -> 								Set((SP) - (32)),
		stack[(SP) - (24)] -> 				Set(null),
		SP -> 								Set((SP) - (32)),
		stack[(SP) - (32)] -> 				Set((SP) - (32)),
		X0 -> 								Set(alloc),
		LR -> 								Set(null)

	X0 := stack[(SP) + (24)]; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	LR := stack[(SP) + (8)]; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	goto label000001e3; -> Map(
		FP -> 								Set((SP) - (32)),
		stack[(SP) - (24)] -> 				Set(null),
		SP -> 								Set((SP) - (32)),
		stack[(SP) - (32)] -> 				Set((SP) - (32)),
		X0 -> 								Set(alloc),
		LR -> 								Set(null)

	stack[(SP) - (24)] := LR; -> Map(
		FP -> 								Set((SP) - (32)),
		stack[(SP) - (24)] -> 				Set(null),
		SP -> 								Set((SP) - (32)),
		stack[(SP) - (32)] -> 				Set((SP) - (32)),
		X0 -> 								Set(alloc),
		LR -> 								Set(null)

	stack[(SP) + (24)] := X0; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	LR := 1908; -> Map(
		FP -> 								Set((SP) - (32)),
		stack[(SP) - (24)] -> 				Set(null),
		SP -> 								Set((SP) - (32)),
		stack[(SP) - (32)] -> 				Set((SP) - (32)),
		X0 -> 								Set(alloc),
		LR -> 								Set(null)

	X0 := heap[X0]; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	X0 := (SP) + (16); -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	FP := stack[SP]; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	X1 := X0; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	stack[(SP) - (32)] := FP; -> Map(
		FP -> 								Set((SP) - (32)),
		stack[(SP) - (24)] -> 				Set(null),
		SP -> 								Set((SP) - (32)),
		stack[(SP) - (32)] -> 				Set((SP) - (32)),
		X0 -> 								Set(alloc),
		LR -> 								Set(null)

	heap[X0] := X1; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	SP := (SP) + (32); -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	X0 := X0[0:0]; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	call   (); -> Map(
		FP -> 								Set((SP) - (32)),
		stack[(SP) - (24)] -> 				Set(null),
		SP -> 								Set((SP) - (32)),
		stack[(SP) - (32)] -> 				Set((SP) - (32)),
		X0 -> 								Set(alloc),
		LR -> 								Set(null)

	stack[(SP) + (16)] := X0; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	X0 := stack[(SP) + (16)]; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	stack[(SP) + (24)] := X0; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	X0 := stack[(SP) + (16)]; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	X0 := stack[(SP) + (24)]; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	skip; -> Map(
		FP -> 								Set((SP) - (32)),
		stack[(SP) - (24)] -> 				Set(null),
		SP -> 								Set((SP) - (32)),
		stack[(SP) - (32)] -> 				Set((SP) - (32)),
		X0 -> 								Set(alloc),
		LR -> 								Set(null)

	FP := SP; -> Map(
		FP -> 								Set((SP) - (32)),
		stack[(SP) - (24)] -> 				Set(null),
		SP -> 								Set((SP) - (32)),
		stack[(SP) - (32)] -> 				Set((SP) - (32)),
		X0 -> 								Set(alloc),
		LR -> 								Set(null)

	stack[(SP) + (16)] := X0; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))

	skip; -> Map(
		stack[(SP) + (24)] -> 				Set((SP) + (16)),
		X1 -> 								Set((SP) + (16)),
		SP -> 								Set((SP) + (32)),
		stack[(SP) + (16)] -> 				Set(null),
		X0 -> 								Set((SP) + (16)),
		(SP) + (16) -> 						Set((SP) + (16))