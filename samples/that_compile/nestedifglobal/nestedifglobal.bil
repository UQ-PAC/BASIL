000002c0: program
// TODO
//000002a4: sub .plt(\.plt_result)
//000002c1: \.plt_result :: out u32 = R0

//00000223:
//00000225: mem := mem with [R31 - 0x10, el]:u64 <- R16
//00000227: mem := mem with [R31 - 8, el]:u64 <- R30
//00000229: R31 := R31 - 0x10
//0000022d: R16 := 0x10000
//00000231: R17 := mem[R16 + 0xFF8, el]:u64
//00000235: R16 := R16 + 0xFF8
//00000239: call R17 with noreturn

000002a5: sub __cxa_finalize(__cxa_finalize_result)
000002c2: __cxa_finalize_result :: out u32 = R0

000001e8:
00000253: R16 := 0x11000
00000257: R17 := mem[R16 + 8, el]:u64
0000025b: R16 := R16 + 8
0000025f: call R17 with noreturn

000002a6: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000002c3: __do_global_dtors_aux_result :: out u32 = R0

000000cd:
000000cf: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000d1: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000d3: R31 := R31 - 0x20
000000d7: R29 := R31
000000db: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000df: R19 := 0x11000
000000e3: #24 := pad:64[mem[R19 + 0x30]]
000000e5: R0 := 0
000000e7: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#24]
000000f0: #25 := extract:31:0[R0] <> 0
000000ec: when #25 goto %000000ea
000002a7: goto %000001bd

000001bd:
000001bf: R0 := 0x10000
000001c3: R0 := mem[R0 + 0xFC8, el]:u64
000001cc: #47 := R0 = 0
000001c8: when #47 goto %000001c6
000002a8: goto %000001dd

000001dd:
000001df: R0 := 0x11000
000001e3: R0 := mem[R0 + 0x28, el]:u64
000001e7: R30 := 0x6F0
000001ea: call @__cxa_finalize with return %000001c6

000001c6:
000001cf: R30 := 0x6F4
000001d1: call @deregister_tm_clones with return %000001d3

000001d3:
000001d5: R0 := 0
000001d7: R0 := R0 & 0xFFFFFFFF00000000 | 1
000001db: mem := mem with [R19 + 0x30] <- low:8[extract:31:0[R0]]
000002a9: goto %000000ea

000000ea:
000000f3: R19 := mem[R31 + 0x10, el]:u64
000000f7: R29 := mem[R31, el]:u64
000000f9: R30 := mem[R31 + 8, el]:u64
000000fb: R31 := R31 + 0x20
000000ff: call R30 with noreturn

000002aa: sub __gmon_start__(__gmon_start___result)
000002c4: __gmon_start___result :: out u32 = R0

0000021f:
00000263: R16 := 0x11000
00000267: R17 := mem[R16 + 0x10, el]:u64
0000026b: R16 := R16 + 0x10
0000026f: call R17 with noreturn

000002ab: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000002c5: __libc_start_main_main :: in u64 = R0
000002c6: __libc_start_main_arg2 :: in u32 = R1
000002c7: __libc_start_main_arg3 :: in out u64 = R2
000002c8: __libc_start_main_auxv :: in out u64 = R3
000002c9: __libc_start_main_result :: out u32 = R0

00000051:
00000243: R16 := 0x11000
00000247: R17 := mem[R16, el]:u64
0000024b: R16 := R16
0000024f: call R17 with noreturn

000002ac: sub _fini(_fini_result)
000002ca: _fini_result :: out u32 = R0

00000009:
0000000d: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000f: mem := mem with [R31 - 8, el]:u64 <- R30
00000011: R31 := R31 - 0x10
00000015: R29 := R31
00000019: R29 := mem[R31, el]:u64
0000001b: R30 := mem[R31 + 8, el]:u64
0000001d: R31 := R31 + 0x10
00000021: call R30 with noreturn

000002ad: sub _init(_init_result)
000002cb: _init_result :: out u32 = R0

00000282:
00000286: mem := mem with [R31 - 0x10, el]:u64 <- R29
00000288: mem := mem with [R31 - 8, el]:u64 <- R30
0000028a: R31 := R31 - 0x10
0000028e: R29 := R31
00000292: R30 := 0x590
00000294: call @call_weak_fn with return %00000296

00000296:
00000298: R29 := mem[R31, el]:u64
0000029a: R30 := mem[R31 + 8, el]:u64
0000029c: R31 := R31 + 0x10
000002a0: call R30 with noreturn

000002ae: sub _start(_start_result)
000002cc: _start_result :: out u32 = R0

00000024:
00000028: R29 := 0
0000002c: R30 := 0
00000030: R5 := R0
00000034: R1 := mem[R31, el]:u64
00000038: R2 := R31 + 8
0000003c: R6 := R31
00000040: R0 := 0x10000
00000044: R0 := mem[R0 + 0xFD8, el]:u64
00000048: R3 := 0
0000004c: R4 := 0
00000050: R30 := 0x630
00000053: call @__libc_start_main with return %00000055

00000055:
00000057: R30 := 0x634
0000005a: call @abort with return %000002af

000002af:
000002b0: call @call_weak_fn with noreturn

000002b1: sub abort()


00000058:
00000273: R16 := 0x11000
00000277: R17 := mem[R16 + 0x18, el]:u64
0000027b: R16 := R16 + 0x18
0000027f: call R17 with noreturn

000002b2: sub call_weak_fn(call_weak_fn_result)
000002cd: call_weak_fn_result :: out u32 = R0

0000005c:
0000005e: R0 := 0x10000
00000062: R0 := mem[R0 + 0xFD0, el]:u64
0000006b: #6 := R0 = 0
00000067: when #6 goto %00000065
000002b3: goto %0000021e

00000065:
0000006e: call R30 with noreturn

0000021e:
00000221: call @__gmon_start__ with noreturn

000002b4: sub deregister_tm_clones(deregister_tm_clones_result)
000002ce: deregister_tm_clones_result :: out u32 = R0

00000075:
00000077: R0 := 0x11000
0000007b: R0 := R0 + 0x30
0000007f: R1 := 0x11000
00000083: R1 := R1 + 0x30
00000087: #10 := 1 + ~R0 + R1
00000089: NF := extract:63:63[#10]
0000008b: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#10]
          | ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#10]
0000008d: ZF := #10 = 0
0000008f: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#10] | extract:63:63[R1] & ~extract:63:63[#10]
00000098: #12 := ZF
00000094: when #12 goto %00000092
000002b5: goto %00000205

00000205:
00000207: R1 := 0x10000
0000020b: R1 := mem[R1 + 0xFC0, el]:u64
00000213: #53 := R1 = 0
0000020f: when #53 goto %00000092
000002b6: goto %00000215

00000092:
0000009b: call R30 with noreturn

00000215:
00000217: R16 := R1
0000021b: call R16 with noreturn

000002b7: sub frame_dummy(frame_dummy_result)
000002cf: frame_dummy_result :: out u32 = R0

00000106:
00000108: call @register_tm_clones with noreturn

000002b8: sub main(main_argc, main_argv, main_result)
000002d0: main_argc :: in u32 = R0
000002d1: main_argv :: in out u64 = R1
000002d2: main_result :: out u32 = R0

0000010a:
0000010c: R31 := R31 - 0x10
00000110: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000114: R0 := 0x11000
00000118: R0 := R0 + 0x34
0000011c: #28 := pad:64[mem[R0, el]:u32]
0000011e: R0 := 0
00000120: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
00000124: #29 := extend:64[extract:31:0[R0]]
00000126: NF := extract:63:63[#29]
00000128: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#29]
0000012a: ZF := #29 = 0
0000012c: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#29] |
          ~extract:63:63[#29]
00000135: #31 := ~ZF <> 0
00000131: when #31 goto %0000012f
000002b9: goto %000001af

0000012f:
00000138: R0 := 0x11000
0000013c: R0 := R0 + 0x34
00000140: #32 := pad:64[mem[R0, el]:u32]
00000142: R0 := 0
00000144: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#32]
00000148: #33 := 0xFFFFFFFFFFFFFFFF + extend:64[extract:31:0[R0]]
0000014a: NF := extract:63:63[#33]
0000014c: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#33]
0000014e: ZF := #33 = 0
00000150: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#33] |
          ~extract:63:63[#33]
00000159: #35 := ~ZF <> 0
00000155: when #35 goto %00000153
000002ba: goto %000001a1

00000153:
0000015c: R0 := 0x11000
00000160: R0 := R0 + 0x34
00000164: #36 := pad:64[mem[R0, el]:u32]
00000166: R0 := 0
00000168: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#36]
0000016c: #37 := 0xFFFFFFFFFFFFFFFE + extend:64[extract:31:0[R0]]
0000016e: NF := extract:63:63[#37]
00000170: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#37]
00000172: ZF := #37 = 0
00000174: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#37] |
          ~extract:63:63[#37]
0000017d: #39 := ~ZF <> 0
00000179: when #39 goto %00000177
000002bb: goto %0000018d

0000018d:
0000018f: R0 := 0x11000
00000193: R0 := R0 + 0x38
00000197: #41 := pad:64[mem[R0, el]:u32]
00000199: R0 := 0
0000019b: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#41]
0000019f: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]
000002bc: goto %00000177

000001a1:
000001a3: R0 := 0
000001a5: R0 := R0 & 0xFFFFFFFF00000000 | 5
000001a9: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]
000001ad: goto %00000177

000001af:
000001b1: R0 := 0
000001b3: R0 := R0 & 0xFFFFFFFF00000000 | 3
000001b7: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]
000001bb: goto %00000177

00000177:
00000180: R0 := 0
00000182: R0 := R0 & 0xFFFFFFFF00000000
00000186: R31 := R31 + 0x10
0000018a: call R30 with noreturn

000002bd: sub register_tm_clones(register_tm_clones_result)
000002d3: register_tm_clones_result :: out u32 = R0

0000009e:
000000a0: R0 := 0x11000
000000a4: R0 := R0 + 0x30
000000a8: R1 := 0x11000
000000ac: R1 := R1 + 0x30
000000b0: R1 := R1 - R0
000000b4: R2 := R1 >> 0x3F
000000b8: R1 := R2 + (R1 ~>> 3)
000000bc: R1 := R1 >> 1
000000c5: #21 := R1 = 0
000000c1: when #21 goto %000000bf
000002be: goto %000001ec

000001ec:
000001ee: R2 := 0x10000
000001f2: R2 := mem[R2 + 0xFE0, el]:u64
000001fa: #49 := R2 = 0
000001f6: when #49 goto %000000bf
000002bf: goto %000001fc

000000bf:
000000c8: call R30 with noreturn

000001fc:
000001fe: R16 := R2
00000202: call R16 with noreturn
