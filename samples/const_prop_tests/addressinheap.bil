000003e1: program
000003b5: sub .plt(\.plt_result)
000003e2: \.plt_result :: out u32 = R0

00000317:
00000319: mem := mem with [R31 - 0x10, el]:u64 <- R16
0000031b: mem := mem with [R31 - 8, el]:u64 <- R30
0000031d: R31 := R31 - 0x10
00000321: R16 := 0x10000
00000325: R17 := mem[R16 + 0xF80, el]:u64
00000329: R16 := R16 + 0xF80
0000032d: call R17 with noreturn

000003b6: sub __cxa_finalize(__cxa_finalize_result)
000003e3: __cxa_finalize_result :: out u32 = R0

000002dc:
00000337: R16 := 0x10000
0000033b: R17 := mem[R16 + 0xF88, el]:u64
0000033f: R16 := R16 + 0xF88
00000343: call R17 with noreturn

000003b7: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
000003e4: __do_global_dtors_aux_result :: out u32 = R0

000000d9:
000000db: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000dd: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000df: R31 := R31 - 0x20
000000e3: R29 := R31
000000e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000eb: R19 := 0x11000
000000ef: #28 := pad:64[mem[R19 + 0x10]]
000000f1: R0 := 0
000000f3: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
000000fc: #29 := extract:31:0[R0] <> 0
000000f8: when #29 goto %000000f6
000003d3: goto %000002b1

000002b1:
000002b3: R0 := 0x10000
000002b7: R0 := mem[R0 + 0xFD0, el]:u64
000002c0: #104 := R0 = 0
000002bc: when #104 goto %000002ba
000003d4: goto %000002d1

000002d1:
000002d3: R0 := 0x11000
000002d7: R0 := mem[R0 + 8, el]:u64
000002db: R30 := 0x820
000002de: call @__cxa_finalize with return %000002ba

000002ba:
000002c3: R30 := 0x824
000002c5: call @deregister_tm_clones with return %000002c7

000002c7:
000002c9: R0 := 0
000002cb: R0 := R0 & 0xFFFFFFFF00000000 | 1
000002cf: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
000003d5: goto %000000f6

000000f6:
000000ff: R19 := mem[R31 + 0x10, el]:u64
00000103: R29 := mem[R31, el]:u64
00000105: R30 := mem[R31 + 8, el]:u64
00000107: R31 := R31 + 0x20
0000010b: call R30 with noreturn

000003bb: sub __gmon_start__(__gmon_start___result)
000003e5: __gmon_start___result :: out u32 = R0

00000313:
00000377: R16 := 0x10000
0000037b: R17 := mem[R16 + 0xFA8, el]:u64
0000037f: R16 := R16 + 0xFA8
00000383: call R17 with noreturn

000003bc: sub __libc_csu_fini(__libc_csu_fini_result)
000003e6: __libc_csu_fini_result :: out u32 = R0

0000026a:
0000026c: call R30 with noreturn

000003bd: sub __libc_csu_init(__libc_csu_init_result)
000003e7: __libc_csu_init_result :: out u32 = R0

000001ec:
000001ee: mem := mem with [R31 - 0x40, el]:u64 <- R29
000001f0: mem := mem with [R31 - 0x38, el]:u64 <- R30
000001f2: R31 := R31 - 0x40
000001f6: R29 := R31
000001fa: mem := mem with [R31, el]:u64 <- R31 + 0x20
000001fc: mem := mem with [R31, el]:u64 <- R31 + 0x28
00000200: R20 := 0x10000
00000204: R20 := R20 + 0xD68
00000208: mem := mem with [R31, el]:u64 <- R31 + 0x40
0000020a: mem := mem with [R31, el]:u64 <- R31 + 0x48
0000020e: R21 := 0x10000
00000212: R21 := R21 + 0xD60
00000216: R20 := R20 - R21
0000021a: #69 := extract:31:0[R0]
0000021c: R22 := 0
0000021e: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#69]
00000222: mem := mem with [R31, el]:u64 <- R31 + 0x60
00000224: mem := mem with [R31, el]:u64 <- R31 + 0x68
00000228: R23 := R1
0000022c: R24 := R2
00000230: R30 := 0x920
00000233: call @_init with return %00000235

00000235:
00000237: #80 := ~(R20 ~>> 3) + 1
00000239: NF := extract:63:63[#80]
0000023b: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#80]
0000023d: ZF := #80 = 0
0000023f: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#80]
00000248: #82 := ZF
00000244: when #82 goto %00000242
000003d6: goto %0000026f

0000026f:
00000271: R20 := R20 >> 3
00000275: R19 := 0
000003d7: goto %00000277

00000277:
00000279: R3 := mem[R21 + (R19 << 3), el]:u64
0000027d: R2 := R24
00000281: R19 := R19 + 1
00000285: R1 := R23
00000289: #97 := extract:31:0[R22]
0000028b: R0 := 0
0000028d: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#97]
00000291: R30 := 0x948
00000293: call R3 with return %00000296

00000296:
00000298: #101 := 1 + ~R19 + R20
0000029a: NF := extract:63:63[#101]
0000029c: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#101] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#101]
0000029e: ZF := #101 = 0
000002a0: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#101] | extract:63:63[R20] &
          ~extract:63:63[#101]
000002a8: #103 := ~ZF <> 0
000002a4: when #103 goto %00000277
000003d8: goto %00000242

00000242:
0000024b: R19 := mem[R31 + 0x10, el]:u64
0000024d: R20 := mem[R31 + 0x18, el]:u64
00000251: R21 := mem[R31 + 0x20, el]:u64
00000253: R22 := mem[R31 + 0x28, el]:u64
00000257: R23 := mem[R31 + 0x30, el]:u64
00000259: R24 := mem[R31 + 0x38, el]:u64
0000025d: R29 := mem[R31, el]:u64
0000025f: R30 := mem[R31 + 8, el]:u64
00000261: R31 := R31 + 0x40
00000265: call R30 with noreturn

000003c1: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
000003e8: __libc_start_main_main :: in u64 = R0
000003e9: __libc_start_main_arg2 :: in u32 = R1
000003ea: __libc_start_main_arg3 :: in out u64 = R2
000003eb: __libc_start_main_auxv :: in out u64 = R3
000003ec: __libc_start_main_result :: out u32 = R0

00000055:
00000357: R16 := 0x10000
0000035b: R17 := mem[R16 + 0xF98, el]:u64
0000035f: R16 := R16 + 0xF98
00000363: call R17 with noreturn

000003c2: sub __stack_chk_fail(__stack_chk_fail_result)
000003ed: __stack_chk_fail_result :: out u32 = R0

000002ad:
00000367: R16 := 0x10000
0000036b: R17 := mem[R16 + 0xFA0, el]:u64
0000036f: R16 := R16 + 0xFA0
00000373: call R17 with noreturn

000003c3: sub _fini(_fini_result)
000003ee: _fini_result :: out u32 = R0

00000009:
0000000b: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000d: mem := mem with [R31 - 8, el]:u64 <- R30
0000000f: R31 := R31 - 0x10
00000013: R29 := R31
00000017: R29 := mem[R31, el]:u64
00000019: R30 := mem[R31 + 8, el]:u64
0000001b: R31 := R31 + 0x10
0000001f: call R30 with noreturn

000003c4: sub _init(_init_result)
000003ef: _init_result :: out u32 = R0

00000231:
00000397: mem := mem with [R31 - 0x10, el]:u64 <- R29
00000399: mem := mem with [R31 - 8, el]:u64 <- R30
0000039b: R31 := R31 - 0x10
0000039f: R29 := R31
000003a3: R30 := 0x69C
000003a5: call @call_weak_fn with return %000003a7

000003a7:
000003a9: R29 := mem[R31, el]:u64
000003ab: R30 := mem[R31 + 8, el]:u64
000003ad: R31 := R31 + 0x10
000003b1: call R30 with noreturn

000003c5: sub _start(_start_result)
000003f0: _start_result :: out u32 = R0

00000022:
00000024: R29 := 0
00000028: R30 := 0
0000002c: R5 := R0
00000030: R1 := mem[R31, el]:u64
00000034: R2 := R31 + 8
00000038: R6 := R31
0000003c: R0 := 0x10000
00000040: R0 := mem[R0 + 0xFF0, el]:u64
00000044: R3 := 0x10000
00000048: R3 := mem[R3 + 0xFE8, el]:u64
0000004c: R4 := 0x10000
00000050: R4 := mem[R4 + 0xFC0, el]:u64
00000054: R30 := 0x764
00000057: call @__libc_start_main with return %00000059

00000059:
0000005b: R30 := 0x768
0000005e: call @abort with return %000003d9

000003d9:
000003da: call @call_weak_fn with noreturn

000003c8: sub abort()


0000005c:
00000387: R16 := 0x10000
0000038b: R17 := mem[R16 + 0xFB0, el]:u64
0000038f: R16 := R16 + 0xFB0
00000393: call R17 with noreturn

000003c9: sub call_weak_fn(call_weak_fn_result)
000003f1: call_weak_fn_result :: out u32 = R0

00000060:
00000062: R0 := 0x10000
00000066: R0 := mem[R0 + 0xFD8, el]:u64
0000006f: #5 := R0 = 0
0000006b: when #5 goto %00000069
000003db: goto %00000312

00000069:
00000072: call R30 with noreturn

00000312:
00000315: call @__gmon_start__ with noreturn

000003cb: sub deregister_tm_clones(deregister_tm_clones_result)
000003f2: deregister_tm_clones_result :: out u32 = R0

00000077:
00000079: R0 := 0x11000
0000007d: R0 := R0 + 0x10
00000081: R1 := 0x11000
00000085: R1 := R1 + 0x10
00000089: #9 := 1 + ~R0 + R1
0000008b: NF := extract:63:63[#9]
0000008d: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
0000008f: ZF := #9 = 0
00000091: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
0000009a: #11 := ZF
00000096: when #11 goto %00000094
000003dc: goto %000002f9

000002f9:
000002fb: R1 := 0x10000
000002ff: R1 := mem[R1 + 0xFC8, el]:u64
00000307: #110 := R1 = 0
00000303: when #110 goto %00000094
000003dd: goto %00000309

00000094:
0000009d: call R30 with noreturn

00000309:
0000030b: R16 := R1
0000030f: call R16 with noreturn

000003ce: sub frame_dummy(frame_dummy_result)
000003f3: frame_dummy_result :: out u32 = R0

0000010e:
00000110: call @register_tm_clones with noreturn

000003cf: sub main(main_argc, main_argv, main_result)
000003f4: main_argc :: in u32 = R0
000003f5: main_argv :: in out u64 = R1
000003f6: main_result :: out u32 = R0

00000112:
00000114: mem := mem with [R31 - 0x40, el]:u64 <- R29
00000116: mem := mem with [R31 - 0x38, el]:u64 <- R30
00000118: R31 := R31 - 0x40
0000011c: R29 := R31
00000120: R0 := 0x10000
00000124: R0 := mem[R0 + 0xFE0, el]:u64
00000128: R1 := mem[R0, el]:u64
0000012c: mem := mem with [R31 + 0x38, el]:u64 <- R1
00000130: R1 := 0
00000134: R0 := 0
00000136: R0 := R0 & 0xFFFFFFFF00000000 | 5
0000013a: mem := mem with [R31 + 0x18, el]:u32 <- low:32[extract:31:0[R0]]
0000013e: R0 := 4
00000142: R30 := 0x868
00000145: call @malloc with return %00000147

00000147:
00000149: mem := mem with [R31 + 0x20, el]:u64 <- R0
0000014d: R0 := 8
00000151: R30 := 0x874
00000153: call @malloc with return %00000155

00000155:
00000157: mem := mem with [R31 + 0x28, el]:u64 <- R0
0000015b: R0 := 8
0000015f: R30 := 0x880
00000161: call @malloc with return %00000163

00000163:
00000165: mem := mem with [R31 + 0x30, el]:u64 <- R0
00000169: R0 := R31 + 0x20
0000016d: mem := mem with [R31 + 0x28, el]:u64 <- R0
00000171: R0 := R31 + 0x28
00000175: mem := mem with [R31 + 0x30, el]:u64 <- R0
00000179: R0 := mem[R31 + 0x20, el]:u64
0000017d: #40 := pad:64[mem[R31 + 0x18, el]:u32]
0000017f: R1 := 0
00000181: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#40]
00000185: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000189: R0 := mem[R31 + 0x30, el]:u64
0000018d: R0 := mem[R0, el]:u64
00000191: R0 := mem[R0, el]:u64
00000195: #42 := pad:64[mem[R0, el]:u32]
00000197: R0 := 0
00000199: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#42]
0000019d: mem := mem with [R31 + 0x1C, el]:u32 <- low:32[extract:31:0[R0]]
000001a1: R0 := 0
000001a3: R0 := R0 & 0xFFFFFFFF00000000
000001a7: #48 := extract:31:0[R0]
000001a9: R1 := 0
000001ab: R1 := R1 & 0xFFFFFFFF00000000 | pad:64[#48]
000001af: R0 := 0x10000
000001b3: R0 := mem[R0 + 0xFE0, el]:u64
000001b7: R2 := mem[R31 + 0x38, el]:u64
000001bb: R3 := mem[R0, el]:u64
000001bf: #52 := 1 + ~R3 + R2
000001c1: NF := extract:63:63[#52]
000001c3: VF := extract:63:63[R2] & extract:63:63[~R3] & ~extract:63:63[#52]
          | ~extract:63:63[R2] & ~extract:63:63[~R3] & extract:63:63[#52]
000001c5: ZF := #52 = 0
000001c7: CF := extract:63:63[R2] & extract:63:63[~R3] | extract:63:63[~R3] &
          ~extract:63:63[#52] | extract:63:63[R2] & ~extract:63:63[#52]
000001c9: R2 := #52
000001cd: R3 := 0
000001d6: #54 := ZF
000001d2: when #54 goto %000001d0
000003de: goto %000002aa

000002aa:
000002ac: R30 := 0x8DC
000002af: call @__stack_chk_fail with return %000001d0

000001d0:
000001d9: #58 := extract:31:0[R1]
000001db: R0 := 0
000001dd: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#58]
000001e1: R29 := mem[R31, el]:u64
000001e3: R30 := mem[R31 + 8, el]:u64
000001e5: R31 := R31 + 0x40
000001e9: call R30 with noreturn

000003d1: sub malloc(malloc_size, malloc_result)
000003f7: malloc_size :: in u64 = R0
000003f8: malloc_result :: out u64 = R0

00000143:
00000347: R16 := 0x10000
0000034b: R17 := mem[R16 + 0xF90, el]:u64
0000034f: R16 := R16 + 0xF90
00000353: call R17 with noreturn

000003d2: sub register_tm_clones(register_tm_clones_result)
000003f9: register_tm_clones_result :: out u32 = R0

000000a0:
000000a2: R0 := 0x11000
000000a6: R0 := R0 + 0x10
000000aa: R1 := 0x11000
000000ae: R1 := R1 + 0x10
000000b2: R1 := R1 - R0
000000b6: R2 := R1 >> 0x3F
000000ba: R1 := R2 + (R1 ~>> 3)
000000be: #22 := ~(R1 ~>> 1) + 1
000000c0: NF := extract:63:63[#22]
000000c2: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000000c4: ZF := #22 = 0
000000c6: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000000ca: R1 := R1 >> 1
000000d3: #25 := ZF
000000cf: when #25 goto %000000cd
000003df: goto %000002e0

000002e0:
000002e2: R2 := 0x10000
000002e6: R2 := mem[R2 + 0xFF8, el]:u64
000002ee: #106 := R2 = 0
000002ea: when #106 goto %000000cd
000003e0: goto %000002f0

000000cd:
000000d6: call R30 with noreturn

000002f0:
000002f2: R16 := R2
000002f6: call R16 with noreturn
