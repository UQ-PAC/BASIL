00000302: program
000002e5: sub .plt(\.plt_result)
00000303: \.plt_result :: out u32 = R0

00000267:
00000269: mem := mem with [R31 - 0x10, el]:u64 <- R16
0000026b: mem := mem with [R31 - 8, el]:u64 <- R30
0000026d: R31 := R31 - 0x10
00000271: R16 := 0x10000
00000275: R17 := mem[R16 + 0xF88, el]:u64
00000279: R16 := R16 + 0xF88
0000027d: call R17 with noreturn

000002e6: sub __cxa_finalize(__cxa_finalize_result)
00000304: __cxa_finalize_result :: out u32 = R0

0000022c:
00000287: R16 := 0x10000
0000028b: R17 := mem[R16 + 0xF90, el]:u64
0000028f: R16 := R16 + 0xF90
00000293: call R17 with noreturn

000002e7: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000305: __do_global_dtors_aux_result :: out u32 = R0

000000d9:
000000db: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000dd: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000df: R31 := R31 - 0x20
000000e3: R29 := R31
000000e7: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000eb: R19 := 0x11000
000000ef: #28 := pad:64[mem[R19 + 0x10]]
000000f1: R0 := 0
000000f3: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
000000fc: #29 := extract:31:0[R0] <> 0
000000f8: when #29 goto %000000f6
000002e8: goto %00000201

00000201:
00000203: R0 := 0x10000
00000207: R0 := mem[R0 + 0xFC8, el]:u64
00000210: #80 := R0 = 0
0000020c: when #80 goto %0000020a
000002e9: goto %00000221

00000221:
00000223: R0 := 0x11000
00000227: R0 := mem[R0 + 8, el]:u64
0000022b: R30 := 0x730
0000022e: call @__cxa_finalize with return %0000020a

0000020a:
00000213: R30 := 0x734
00000215: call @deregister_tm_clones with return %00000217

00000217:
00000219: R0 := 0
0000021b: R0 := R0 & 0xFFFFFFFF00000000 | 1
0000021f: mem := mem with [R19 + 0x10] <- low:8[extract:31:0[R0]]
000002ea: goto %000000f6

000000f6:
000000ff: R19 := mem[R31 + 0x10, el]:u64
00000103: R29 := mem[R31, el]:u64
00000105: R30 := mem[R31 + 8, el]:u64
00000107: R31 := R31 + 0x20
0000010b: call R30 with noreturn

000002eb: sub __gmon_start__(__gmon_start___result)
00000306: __gmon_start___result :: out u32 = R0

00000263:
000002a7: R16 := 0x10000
000002ab: R17 := mem[R16 + 0xFA0, el]:u64
000002af: R16 := R16 + 0xFA0
000002b3: call R17 with noreturn

000002ec: sub __libc_csu_fini(__libc_csu_fini_result)
00000307: __libc_csu_fini_result :: out u32 = R0

000001c1:
000001c3: call R30 with noreturn

000002ed: sub __libc_csu_init(__libc_csu_init_result)
00000308: __libc_csu_init_result :: out u32 = R0

00000143:
00000145: mem := mem with [R31 - 0x40, el]:u64 <- R29
00000147: mem := mem with [R31 - 0x38, el]:u64 <- R30
00000149: R31 := R31 - 0x40
0000014d: R29 := R31
00000151: mem := mem with [R31, el]:u64 <- R31 + 0x20
00000153: mem := mem with [R31, el]:u64 <- R31 + 0x28
00000157: R20 := 0x10000
0000015b: R20 := R20 + 0xD80
0000015f: mem := mem with [R31, el]:u64 <- R31 + 0x40
00000161: mem := mem with [R31, el]:u64 <- R31 + 0x48
00000165: R21 := 0x10000
00000169: R21 := R21 + 0xD78
0000016d: R20 := R20 - R21
00000171: #45 := extract:31:0[R0]
00000173: R22 := 0
00000175: R22 := R22 & 0xFFFFFFFF00000000 | pad:64[#45]
00000179: mem := mem with [R31, el]:u64 <- R31 + 0x60
0000017b: mem := mem with [R31, el]:u64 <- R31 + 0x68
0000017f: R23 := R1
00000183: R24 := R2
00000187: R30 := 0x7B0
0000018a: call @_init with return %0000018c

0000018c:
0000018e: #56 := ~(R20 ~>> 3) + 1
00000190: NF := extract:63:63[#56]
00000192: VF := ~extract:63:63[~(R20 ~>> 3)] & extract:63:63[#56]
00000194: ZF := #56 = 0
00000196: CF := extract:63:63[~(R20 ~>> 3)] & ~extract:63:63[#56]
0000019f: #58 := ZF
0000019b: when #58 goto %00000199
000002ee: goto %000001c6

000001c6:
000001c8: R20 := R20 >> 3
000001cc: R19 := 0
000002ef: goto %000001ce

000001ce:
000001d0: R3 := mem[R21 + (R19 << 3), el]:u64
000001d4: R2 := R24
000001d8: R19 := R19 + 1
000001dc: R1 := R23
000001e0: #73 := extract:31:0[R22]
000001e2: R0 := 0
000001e4: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#73]
000001e8: R30 := 0x7D8
000001ea: call R3 with return %000001ed

000001ed:
000001ef: #77 := 1 + ~R19 + R20
000001f1: NF := extract:63:63[#77]
000001f3: VF := extract:63:63[R20] & extract:63:63[~R19] &
          ~extract:63:63[#77] | ~extract:63:63[R20] & ~extract:63:63[~R19] &
          extract:63:63[#77]
000001f5: ZF := #77 = 0
000001f7: CF := extract:63:63[R20] & extract:63:63[~R19] |
          extract:63:63[~R19] & ~extract:63:63[#77] | extract:63:63[R20] &
          ~extract:63:63[#77]
000001ff: #79 := ~ZF <> 0
000001fb: when #79 goto %000001ce
000002f0: goto %00000199

00000199:
000001a2: R19 := mem[R31 + 0x10, el]:u64
000001a4: R20 := mem[R31 + 0x18, el]:u64
000001a8: R21 := mem[R31 + 0x20, el]:u64
000001aa: R22 := mem[R31 + 0x28, el]:u64
000001ae: R23 := mem[R31 + 0x30, el]:u64
000001b0: R24 := mem[R31 + 0x38, el]:u64
000001b4: R29 := mem[R31, el]:u64
000001b6: R30 := mem[R31 + 8, el]:u64
000001b8: R31 := R31 + 0x40
000001bc: call R30 with noreturn

000002f1: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000309: __libc_start_main_main :: in u64 = R0
0000030a: __libc_start_main_arg2 :: in u32 = R1
0000030b: __libc_start_main_arg3 :: in out u64 = R2
0000030c: __libc_start_main_auxv :: in out u64 = R3
0000030d: __libc_start_main_result :: out u32 = R0

00000055:
00000297: R16 := 0x10000
0000029b: R17 := mem[R16 + 0xF98, el]:u64
0000029f: R16 := R16 + 0xF98
000002a3: call R17 with noreturn

000002f2: sub _fini(_fini_result)
0000030e: _fini_result :: out u32 = R0

00000009:
0000000b: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000d: mem := mem with [R31 - 8, el]:u64 <- R30
0000000f: R31 := R31 - 0x10
00000013: R29 := R31
00000017: R29 := mem[R31, el]:u64
00000019: R30 := mem[R31 + 8, el]:u64
0000001b: R31 := R31 + 0x10
0000001f: call R30 with noreturn

000002f3: sub _init(_init_result)
0000030f: _init_result :: out u32 = R0

00000188:
000002c7: mem := mem with [R31 - 0x10, el]:u64 <- R29
000002c9: mem := mem with [R31 - 8, el]:u64 <- R30
000002cb: R31 := R31 - 0x10
000002cf: R29 := R31
000002d3: R30 := 0x5D4
000002d5: call @call_weak_fn with return %000002d7

000002d7:
000002d9: R29 := mem[R31, el]:u64
000002db: R30 := mem[R31 + 8, el]:u64
000002dd: R31 := R31 + 0x10
000002e1: call R30 with noreturn

000002f4: sub _start(_start_result)
00000310: _start_result :: out u32 = R0

00000022:
00000024: R29 := 0
00000028: R30 := 0
0000002c: R5 := R0
00000030: R1 := mem[R31, el]:u64
00000034: R2 := R31 + 8
00000038: R6 := R31
0000003c: R0 := 0x10000
00000040: R0 := mem[R0 + 0xFF0, el]:u64
00000044: R3 := 0x10000
00000048: R3 := mem[R3 + 0xFE0, el]:u64
0000004c: R4 := 0x10000
00000050: R4 := mem[R4 + 0xFB8, el]:u64
00000054: R30 := 0x674
00000057: call @__libc_start_main with return %00000059

00000059:
0000005b: R30 := 0x678
0000005e: call @abort with return %000002f5

000002f5:
000002f6: call @call_weak_fn with noreturn

000002f7: sub abort()


0000005c:
000002b7: R16 := 0x10000
000002bb: R17 := mem[R16 + 0xFA8, el]:u64
000002bf: R16 := R16 + 0xFA8
000002c3: call R17 with noreturn

000002f8: sub call_weak_fn(call_weak_fn_result)
00000311: call_weak_fn_result :: out u32 = R0

00000060:
00000062: R0 := 0x10000
00000066: R0 := mem[R0 + 0xFD8, el]:u64
0000006f: #5 := R0 = 0
0000006b: when #5 goto %00000069
000002f9: goto %00000262

00000069:
00000072: call R30 with noreturn

00000262:
00000265: call @__gmon_start__ with noreturn

000002fa: sub deregister_tm_clones(deregister_tm_clones_result)
00000312: deregister_tm_clones_result :: out u32 = R0

00000077:
00000079: R0 := 0x11000
0000007d: R0 := R0 + 0x10
00000081: R1 := 0x11000
00000085: R1 := R1 + 0x10
00000089: #9 := 1 + ~R0 + R1
0000008b: NF := extract:63:63[#9]
0000008d: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#9] |
          ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#9]
0000008f: ZF := #9 = 0
00000091: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#9] | extract:63:63[R1] & ~extract:63:63[#9]
0000009a: #11 := ZF
00000096: when #11 goto %00000094
000002fb: goto %00000249

00000249:
0000024b: R1 := 0x10000
0000024f: R1 := mem[R1 + 0xFC0, el]:u64
00000257: #86 := R1 = 0
00000253: when #86 goto %00000094
000002fc: goto %00000259

00000094:
0000009d: call R30 with noreturn

00000259:
0000025b: R16 := R1
0000025f: call R16 with noreturn

000002fd: sub frame_dummy(frame_dummy_result)
00000313: frame_dummy_result :: out u32 = R0

0000010e:
00000110: call @register_tm_clones with noreturn

000002fe: sub main(main_argc, main_argv, main_result)
00000314: main_argc :: in u32 = R0
00000315: main_argv :: in out u64 = R1
00000316: main_result :: out u32 = R0

00000112:
00000114: R0 := 0x10000                     
00000118: R0 := mem[R0 + 0xFD0, el]:u64     
0000011c: R1 := 0
0000011e: R1 := R1 & 0xFFFFFFFF00000000 | 1 
00000122: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]] 
00000126: R0 := 0x10000
0000012a: R0 := mem[R0 + 0xFE8, el]:u64
0000012e: R1 := 0
00000130: R1 := R1 & 0xFFFFFFFF00000000 | 2
00000134: mem := mem with [R0, el]:u32 <- low:32[extract:31:0[R1]]
00000138: R0 := 0
0000013a: R0 := R0 & 0xFFFFFFFF00000000
0000013e: call R30 with noreturn

000002ff: sub register_tm_clones(register_tm_clones_result)
00000317: register_tm_clones_result :: out u32 = R0

000000a0:
000000a2: R0 := 0x11000
000000a6: R0 := R0 + 0x10
000000aa: R1 := 0x11000
000000ae: R1 := R1 + 0x10
000000b2: R1 := R1 - R0
000000b6: R2 := R1 >> 0x3F
000000ba: R1 := R2 + (R1 ~>> 3)
000000be: #22 := ~(R1 ~>> 1) + 1
000000c0: NF := extract:63:63[#22]
000000c2: VF := ~extract:63:63[~(R1 ~>> 1)] & extract:63:63[#22]
000000c4: ZF := #22 = 0
000000c6: CF := extract:63:63[~(R1 ~>> 1)] & ~extract:63:63[#22]
000000ca: R1 := R1 >> 1
000000d3: #25 := ZF
000000cf: when #25 goto %000000cd
00000300: goto %00000230

00000230:
00000232: R2 := 0x10000
00000236: R2 := mem[R2 + 0xFF8, el]:u64
0000023e: #82 := R2 = 0
0000023a: when #82 goto %000000cd
00000301: goto %00000240

000000cd:
000000d6: call R30 with noreturn

00000240:
00000242: R16 := R2
00000246: call R16 with noreturn
