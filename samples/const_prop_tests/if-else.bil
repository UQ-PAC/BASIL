00000274: program
0000025a: sub .plt(\.plt_result)
00000275: \.plt_result :: out u32 = R0

000001d9:
000001db: mem := mem with [R31 - 0x10, el]:u64 <- R16
000001dd: mem := mem with [R31 - 8, el]:u64 <- R30
000001df: R31 := R31 - 0x10
000001e3: R16 := 0x10000
000001e7: R17 := mem[R16 + 0xFF8, el]:u64
000001eb: R16 := R16 + 0xFF8
000001ef: call R17 with noreturn

0000025b: sub __cxa_finalize(__cxa_finalize_result)
00000276: __cxa_finalize_result :: out u32 = R0

0000019e:
00000209: R16 := 0x11000
0000020d: R17 := mem[R16 + 8, el]:u64
00000211: R16 := R16 + 8
00000215: call R17 with noreturn

0000025c: sub __do_global_dtors_aux(__do_global_dtors_aux_result)
00000277: __do_global_dtors_aux_result :: out u32 = R0

000000cd:
000000cf: mem := mem with [R31 - 0x20, el]:u64 <- R29
000000d1: mem := mem with [R31 - 0x18, el]:u64 <- R30
000000d3: R31 := R31 - 0x20
000000d7: R29 := R31
000000db: mem := mem with [R31 + 0x10, el]:u64 <- R19
000000df: R19 := 0x11000
000000e3: #24 := pad:64[mem[R19 + 0x30]]
000000e5: R0 := 0
000000e7: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#24]
000000f0: #25 := extract:31:0[R0] <> 0
000000ec: when #25 goto %000000ea
0000025d: goto %00000173

00000173:
00000175: R0 := 0x10000
00000179: R0 := mem[R0 + 0xFC8, el]:u64
00000182: #41 := R0 = 0
0000017e: when #41 goto %0000017c
0000025e: goto %00000193

00000193:
00000195: R0 := 0x11000
00000199: R0 := mem[R0 + 0x28, el]:u64
0000019d: R30 := 0x6F0
000001a0: call @__cxa_finalize with return %0000017c

0000017c:
00000185: R30 := 0x6F4
00000187: call @deregister_tm_clones with return %00000189

00000189:
0000018b: R0 := 0
0000018d: R0 := R0 & 0xFFFFFFFF00000000 | 1
00000191: mem := mem with [R19 + 0x30] <- low:8[extract:31:0[R0]]
0000025f: goto %000000ea

000000ea:
000000f3: R19 := mem[R31 + 0x10, el]:u64
000000f7: R29 := mem[R31, el]:u64
000000f9: R30 := mem[R31 + 8, el]:u64
000000fb: R31 := R31 + 0x20
000000ff: call R30 with noreturn

00000260: sub __gmon_start__(__gmon_start___result)
00000278: __gmon_start___result :: out u32 = R0

000001d5:
00000219: R16 := 0x11000
0000021d: R17 := mem[R16 + 0x10, el]:u64
00000221: R16 := R16 + 0x10
00000225: call R17 with noreturn

00000261: sub __libc_start_main(__libc_start_main_main, __libc_start_main_arg2, __libc_start_main_arg3, __libc_start_main_auxv, __libc_start_main_result)
00000279: __libc_start_main_main :: in u64 = R0
0000027a: __libc_start_main_arg2 :: in u32 = R1
0000027b: __libc_start_main_arg3 :: in out u64 = R2
0000027c: __libc_start_main_auxv :: in out u64 = R3
0000027d: __libc_start_main_result :: out u32 = R0

00000051:
000001f9: R16 := 0x11000
000001fd: R17 := mem[R16, el]:u64
00000201: R16 := R16
00000205: call R17 with noreturn

00000262: sub _fini(_fini_result)
0000027e: _fini_result :: out u32 = R0

00000009:
0000000d: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000000f: mem := mem with [R31 - 8, el]:u64 <- R30
00000011: R31 := R31 - 0x10
00000015: R29 := R31
00000019: R29 := mem[R31, el]:u64
0000001b: R30 := mem[R31 + 8, el]:u64
0000001d: R31 := R31 + 0x10
00000021: call R30 with noreturn

00000263: sub _init(_init_result)
0000027f: _init_result :: out u32 = R0

00000238:
0000023c: mem := mem with [R31 - 0x10, el]:u64 <- R29
0000023e: mem := mem with [R31 - 8, el]:u64 <- R30
00000240: R31 := R31 - 0x10
00000244: R29 := R31
00000248: R30 := 0x590
0000024a: call @call_weak_fn with return %0000024c

0000024c:
0000024e: R29 := mem[R31, el]:u64
00000250: R30 := mem[R31 + 8, el]:u64
00000252: R31 := R31 + 0x10
00000256: call R30 with noreturn

00000264: sub _start(_start_result)
00000280: _start_result :: out u32 = R0

00000024:
00000028: R29 := 0
0000002c: R30 := 0
00000030: R5 := R0
00000034: R1 := mem[R31, el]:u64
00000038: R2 := R31 + 8
0000003c: R6 := R31
00000040: R0 := 0x10000
00000044: R0 := mem[R0 + 0xFD8, el]:u64
00000048: R3 := 0
0000004c: R4 := 0
00000050: R30 := 0x630
00000053: call @__libc_start_main with return %00000055

00000055:
00000057: R30 := 0x634
0000005a: call @abort with return %00000265

00000265:
00000266: call @call_weak_fn with noreturn

00000267: sub abort()


00000058:
00000229: R16 := 0x11000
0000022d: R17 := mem[R16 + 0x18, el]:u64
00000231: R16 := R16 + 0x18
00000235: call R17 with noreturn

00000268: sub call_weak_fn(call_weak_fn_result)
00000281: call_weak_fn_result :: out u32 = R0

0000005c:
0000005e: R0 := 0x10000
00000062: R0 := mem[R0 + 0xFD0, el]:u64
0000006b: #6 := R0 = 0
00000067: when #6 goto %00000065
00000269: goto %000001d4

00000065:
0000006e: call R30 with noreturn

000001d4:
000001d7: call @__gmon_start__ with noreturn

0000026a: sub deregister_tm_clones(deregister_tm_clones_result)
00000282: deregister_tm_clones_result :: out u32 = R0

00000075:
00000077: R0 := 0x11000
0000007b: R0 := R0 + 0x30
0000007f: R1 := 0x11000
00000083: R1 := R1 + 0x30
00000087: #10 := 1 + ~R0 + R1
00000089: NF := extract:63:63[#10]
0000008b: VF := extract:63:63[R1] & extract:63:63[~R0] & ~extract:63:63[#10]
          | ~extract:63:63[R1] & ~extract:63:63[~R0] & extract:63:63[#10]
0000008d: ZF := #10 = 0
0000008f: CF := extract:63:63[R1] & extract:63:63[~R0] | extract:63:63[~R0] &
          ~extract:63:63[#10] | extract:63:63[R1] & ~extract:63:63[#10]
00000098: #12 := ZF
00000094: when #12 goto %00000092
0000026b: goto %000001bb

000001bb:
000001bd: R1 := 0x10000
000001c1: R1 := mem[R1 + 0xFC0, el]:u64
000001c9: #47 := R1 = 0
000001c5: when #47 goto %00000092
0000026c: goto %000001cb

00000092:
0000009b: call R30 with noreturn

000001cb:
000001cd: R16 := R1
000001d1: call R16 with noreturn

0000026d: sub frame_dummy(frame_dummy_result)
00000283: frame_dummy_result :: out u32 = R0

00000106:
00000108: call @register_tm_clones with noreturn

0000026e: sub main(main_argc, main_argv, main_result)
00000284: main_argc :: in u32 = R0
00000285: main_argv :: in out u64 = R1
00000286: main_result :: out u32 = R0

0000010a:
0000010c: R31 := R31 - 0x10
00000110: mem := mem with [R31 + 0xC, el]:u32 <- 0
00000114: #28 := pad:64[mem[R31 + 0xC, el]:u32]
00000116: R0 := 0
00000118: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#28]
0000011c: #29 := extend:64[extract:31:0[R0]] + 1
0000011e: R0 := 0
00000120: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#29]
00000124: mem := mem with [R31 + 8, el]:u32 <- low:32[extract:31:0[R0]]
00000128: #31 := pad:64[mem[R31 + 0xC, el]:u32]
0000012a: R0 := 0
0000012c: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#31]
00000130: #32 := 0xFFFFFFFFFFFFFFFF + extend:64[extract:31:0[R0]]
00000132: NF := extract:63:63[#32]
00000134: VF := extract:31:31[extract:31:0[R0]] & ~extract:63:63[#32]
00000136: ZF := #32 = 0
00000138: CF := extract:31:31[extract:31:0[R0]] |
          extract:31:31[extract:31:0[R0]] & ~extract:63:63[#32] |
          ~extract:63:63[#32]
00000141: #34 := ZF
0000013d: when #34 goto %0000013b
0000026f: goto %0000015b

0000013b:
00000144: R0 := 0
00000146: R0 := R0 & 0xFFFFFFFF00000000 | 5
0000014a: mem := mem with [R31 + 0xC, el]:u32 <- low:32[extract:31:0[R0]]
00000270: goto %0000014c

0000015b:
0000015d: #38 := pad:64[mem[R31 + 8, el]:u32]
0000015f: R0 := 0
00000161: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#38]
00000165: #39 := extend:64[extract:31:0[R0]] + 2
00000167: R0 := 0
00000169: R0 := R0 & 0xFFFFFFFF00000000 | pad:64[#39]
0000016d: mem := mem with [R31 + 8, el]:u32 <- low:32[extract:31:0[R0]]
00000171: goto %0000014c

0000014c:
0000014e: R0 := 0
00000150: R0 := R0 & 0xFFFFFFFF00000000
00000154: R31 := R31 + 0x10
00000158: call R30 with noreturn

00000271: sub register_tm_clones(register_tm_clones_result)
00000287: register_tm_clones_result :: out u32 = R0

0000009e:
000000a0: R0 := 0x11000
000000a4: R0 := R0 + 0x30
000000a8: R1 := 0x11000
000000ac: R1 := R1 + 0x30
000000b0: R1 := R1 - R0
000000b4: R2 := R1 >> 0x3F
000000b8: R1 := R2 + (R1 ~>> 3)
000000bc: R1 := R1 >> 1
000000c5: #21 := R1 = 0
000000c1: when #21 goto %000000bf
00000272: goto %000001a2

000001a2:
000001a4: R2 := 0x10000
000001a8: R2 := mem[R2 + 0xFE0, el]:u64
000001b0: #43 := R2 = 0
000001ac: when #43 goto %000000bf
00000273: goto %000001b2

000000bf:
000000c8: call R30 with noreturn

000001b2:
000001b4: R16 := R2
000001b8: call R16 with noreturn
