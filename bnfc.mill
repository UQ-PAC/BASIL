package build
import mill._
import scalalib._

import $file.util.DownloadModule
import scala.util.{Try}

/**
 * Module to process a BNFC (https://bnfc.digitalgrammars.com/) grammar
 * through the `bnfc` generator and through Antlr to produce a Java
 * dependency.
 */
trait BNFCModule extends JavaModule with antlr.AntlrModule {
  def bnfcPackageName: String
  def bnfcSource: Task[PathRef]
  def bnfcExtraArgs: Seq[String] = Nil
  def antlrRuntime: Dep

  object bnfcBinary extends DownloadModule {
    def version = "2.9.5"
    def name = s"bnfc-$version-${System.currentTimeMillis()}$suffix"
    def url = s"https://github.com/BNFC/bnfc/releases/download/v$version/bnfc-$version$suffix"
    // https://github.com/BNFC/bnfc/releases

    def local = Task.Input {
      Try(os.proc("bnfc", "--version").call())
        .map(Function.const("bnfc"))
        .toEither
        .left.map(_.toString)
    }

    def osName = System.getProperty("os.name")

    def suffix = if (osName.contains("nux")) {
      "-linux.binary"
    } else if (osName.contains("Mac")) {
      "-mac.binary"
    } else if (osName.startsWith("Windows")) {
      ".exe"
    }
  }

  override def antlrPackage = Some(bnfcPackageName)

  override def sources = Task.Sources {
    Seq(bnfcGenerated())
  }
  def antlrGrammarSources = sources
  def ivyDeps = Agg(antlrRuntime)

  /**
    * Runs the BNFC binary.
    */
  override def run(args: Task[Args] = Task.Anon(Args())) = Task.Command {
    val res = os.call(bnfcBinary.path() +: args().value, stdout = os.Inherit, check = false)
    Task.ctx().systemExit(res.exitCode)
    ()
  }

  def bnfcGenerated = Task {
    val args = Seq("--java-antlr", bnfcSource().path.toString, "-m", "-o", Task.dest.toString, "--line-numbers")
    os.call(bnfcBinary.path() +: (args ++ bnfcExtraArgs))
    PathRef(Task.dest)
  }
}

